ARM GAS  /tmp/cc5CzIw8.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_wwdg.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_wwdg.c"
  20              		.section	.text.WWDG_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	WWDG_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	WWDG_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_wwdg.c **** /**
   2:./Lib/Src/stm32f4xx_wwdg.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_wwdg.c ****   * @file    stm32f4xx_wwdg.c
   4:./Lib/Src/stm32f4xx_wwdg.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_wwdg.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_wwdg.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_wwdg.c ****   *          functionalities of the Window watchdog (WWDG) peripheral:           
   9:./Lib/Src/stm32f4xx_wwdg.c ****   *           + Prescaler, Refresh window and Counter configuration
  10:./Lib/Src/stm32f4xx_wwdg.c ****   *           + WWDG activation
  11:./Lib/Src/stm32f4xx_wwdg.c ****   *           + Interrupts and flags management
  12:./Lib/Src/stm32f4xx_wwdg.c ****   *             
  13:./Lib/Src/stm32f4xx_wwdg.c ****  @verbatim    
  14:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================
  15:./Lib/Src/stm32f4xx_wwdg.c ****                            ##### WWDG features #####
  16:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================
  17:./Lib/Src/stm32f4xx_wwdg.c ****     [..]                                      
  18:./Lib/Src/stm32f4xx_wwdg.c ****         Once enabled the WWDG generates a system reset on expiry of a programmed
  19:./Lib/Src/stm32f4xx_wwdg.c ****         time period, unless the program refreshes the counter (downcounter) 
  20:./Lib/Src/stm32f4xx_wwdg.c ****         before to reach 0x3F value (i.e. a reset is generated when the counter
  21:./Lib/Src/stm32f4xx_wwdg.c ****         value rolls over from 0x40 to 0x3F). 
  22:./Lib/Src/stm32f4xx_wwdg.c ****         An MCU reset is also generated if the counter value is refreshed
  23:./Lib/Src/stm32f4xx_wwdg.c ****         before the counter has reached the refresh window value. This 
  24:./Lib/Src/stm32f4xx_wwdg.c ****         implies that the counter must be refreshed in a limited window.
  25:./Lib/Src/stm32f4xx_wwdg.c ****               
  26:./Lib/Src/stm32f4xx_wwdg.c ****         Once enabled the WWDG cannot be disabled except by a system reset.
  27:./Lib/Src/stm32f4xx_wwdg.c ****           
  28:./Lib/Src/stm32f4xx_wwdg.c ****         WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
  29:./Lib/Src/stm32f4xx_wwdg.c ****         reset occurs.
  30:./Lib/Src/stm32f4xx_wwdg.c ****              
ARM GAS  /tmp/cc5CzIw8.s 			page 2


  31:./Lib/Src/stm32f4xx_wwdg.c ****         The WWDG counter input clock is derived from the APB clock divided 
  32:./Lib/Src/stm32f4xx_wwdg.c ****         by a programmable prescaler.
  33:./Lib/Src/stm32f4xx_wwdg.c ****                 
  34:./Lib/Src/stm32f4xx_wwdg.c ****         WWDG counter clock = PCLK1 / Prescaler
  35:./Lib/Src/stm32f4xx_wwdg.c ****         WWDG timeout = (WWDG counter clock) * (counter value)
  36:./Lib/Src/stm32f4xx_wwdg.c ****                        
  37:./Lib/Src/stm32f4xx_wwdg.c ****         Min-max timeout value @42 MHz(PCLK1): ~97.5 us / ~49.9 ms
  38:./Lib/Src/stm32f4xx_wwdg.c ****                              
  39:./Lib/Src/stm32f4xx_wwdg.c ****                       ##### How to use this driver #####
  40:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================
  41:./Lib/Src/stm32f4xx_wwdg.c ****     [..]
  42:./Lib/Src/stm32f4xx_wwdg.c ****       (#) Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) function
  43:./Lib/Src/stm32f4xx_wwdg.c ****               
  44:./Lib/Src/stm32f4xx_wwdg.c ****       (#) Configure the WWDG prescaler using WWDG_SetPrescaler() function
  45:./Lib/Src/stm32f4xx_wwdg.c ****                              
  46:./Lib/Src/stm32f4xx_wwdg.c ****       (#) Configure the WWDG refresh window using WWDG_SetWindowValue() function
  47:./Lib/Src/stm32f4xx_wwdg.c ****               
  48:./Lib/Src/stm32f4xx_wwdg.c ****       (#) Set the WWDG counter value and start it using WWDG_Enable() function.
  49:./Lib/Src/stm32f4xx_wwdg.c ****           When the WWDG is enabled the counter value should be configured to 
  50:./Lib/Src/stm32f4xx_wwdg.c ****           a value greater than 0x40 to prevent generating an immediate reset.     
  51:./Lib/Src/stm32f4xx_wwdg.c ****               
  52:./Lib/Src/stm32f4xx_wwdg.c ****       (#) Optionally you can enable the Early wakeup interrupt which is 
  53:./Lib/Src/stm32f4xx_wwdg.c ****           generated when the counter reach 0x40.
  54:./Lib/Src/stm32f4xx_wwdg.c ****           Once enabled this interrupt cannot be disabled except by a system reset.
  55:./Lib/Src/stm32f4xx_wwdg.c ****                   
  56:./Lib/Src/stm32f4xx_wwdg.c ****       (#) Then the application program must refresh the WWDG counter at regular
  57:./Lib/Src/stm32f4xx_wwdg.c ****           intervals during normal operation to prevent an MCU reset, using
  58:./Lib/Src/stm32f4xx_wwdg.c ****           WWDG_SetCounter() function. This operation must occur only when
  59:./Lib/Src/stm32f4xx_wwdg.c ****           the counter value is lower than the refresh window value, 
  60:./Lib/Src/stm32f4xx_wwdg.c ****           programmed using WWDG_SetWindowValue().         
  61:./Lib/Src/stm32f4xx_wwdg.c ****   
  62:./Lib/Src/stm32f4xx_wwdg.c ****     @endverbatim
  63:./Lib/Src/stm32f4xx_wwdg.c ****   ******************************************************************************
  64:./Lib/Src/stm32f4xx_wwdg.c ****   * @attention
  65:./Lib/Src/stm32f4xx_wwdg.c ****   *
  66:./Lib/Src/stm32f4xx_wwdg.c ****   * Copyright (c) 2016 STMicroelectronics.
  67:./Lib/Src/stm32f4xx_wwdg.c ****   * All rights reserved.
  68:./Lib/Src/stm32f4xx_wwdg.c ****   *
  69:./Lib/Src/stm32f4xx_wwdg.c ****   * This software is licensed under terms that can be found in the LICENSE file
  70:./Lib/Src/stm32f4xx_wwdg.c ****   * in the root directory of this software component.
  71:./Lib/Src/stm32f4xx_wwdg.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  72:./Lib/Src/stm32f4xx_wwdg.c ****   *
  73:./Lib/Src/stm32f4xx_wwdg.c ****   ******************************************************************************
  74:./Lib/Src/stm32f4xx_wwdg.c ****   */
  75:./Lib/Src/stm32f4xx_wwdg.c **** 
  76:./Lib/Src/stm32f4xx_wwdg.c **** /* Includes ------------------------------------------------------------------*/
  77:./Lib/Src/stm32f4xx_wwdg.c **** #include "stm32f4xx_wwdg.h"
  78:./Lib/Src/stm32f4xx_wwdg.c **** #include "stm32f4xx_rcc.h"
  79:./Lib/Src/stm32f4xx_wwdg.c **** 
  80:./Lib/Src/stm32f4xx_wwdg.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  81:./Lib/Src/stm32f4xx_wwdg.c ****   * @{
  82:./Lib/Src/stm32f4xx_wwdg.c ****   */
  83:./Lib/Src/stm32f4xx_wwdg.c **** 
  84:./Lib/Src/stm32f4xx_wwdg.c **** /** @defgroup WWDG 
  85:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief WWDG driver modules
  86:./Lib/Src/stm32f4xx_wwdg.c ****   * @{
  87:./Lib/Src/stm32f4xx_wwdg.c ****   */
ARM GAS  /tmp/cc5CzIw8.s 			page 3


  88:./Lib/Src/stm32f4xx_wwdg.c **** 
  89:./Lib/Src/stm32f4xx_wwdg.c **** /* Private typedef -----------------------------------------------------------*/
  90:./Lib/Src/stm32f4xx_wwdg.c **** /* Private define ------------------------------------------------------------*/
  91:./Lib/Src/stm32f4xx_wwdg.c **** 
  92:./Lib/Src/stm32f4xx_wwdg.c **** /* ----------- WWDG registers bit address in the alias region ----------- */
  93:./Lib/Src/stm32f4xx_wwdg.c **** #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
  94:./Lib/Src/stm32f4xx_wwdg.c **** /* Alias word address of EWI bit */
  95:./Lib/Src/stm32f4xx_wwdg.c **** #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
  96:./Lib/Src/stm32f4xx_wwdg.c **** #define EWI_BitNumber     0x09
  97:./Lib/Src/stm32f4xx_wwdg.c **** #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
  98:./Lib/Src/stm32f4xx_wwdg.c **** 
  99:./Lib/Src/stm32f4xx_wwdg.c **** /* --------------------- WWDG registers bit mask ------------------------ */
 100:./Lib/Src/stm32f4xx_wwdg.c **** /* CFR register bit mask */
 101:./Lib/Src/stm32f4xx_wwdg.c **** #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
 102:./Lib/Src/stm32f4xx_wwdg.c **** #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
 103:./Lib/Src/stm32f4xx_wwdg.c **** #define BIT_MASK          ((uint8_t)0x7F)
 104:./Lib/Src/stm32f4xx_wwdg.c **** 
 105:./Lib/Src/stm32f4xx_wwdg.c **** /* Private macro -------------------------------------------------------------*/
 106:./Lib/Src/stm32f4xx_wwdg.c **** /* Private variables ---------------------------------------------------------*/
 107:./Lib/Src/stm32f4xx_wwdg.c **** /* Private function prototypes -----------------------------------------------*/
 108:./Lib/Src/stm32f4xx_wwdg.c **** /* Private functions ---------------------------------------------------------*/
 109:./Lib/Src/stm32f4xx_wwdg.c **** 
 110:./Lib/Src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Private_Functions
 111:./Lib/Src/stm32f4xx_wwdg.c ****   * @{
 112:./Lib/Src/stm32f4xx_wwdg.c ****   */
 113:./Lib/Src/stm32f4xx_wwdg.c **** 
 114:./Lib/Src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
 115:./Lib/Src/stm32f4xx_wwdg.c ****  *  @brief   Prescaler, Refresh window and Counter configuration functions 
 116:./Lib/Src/stm32f4xx_wwdg.c ****  *
 117:./Lib/Src/stm32f4xx_wwdg.c **** @verbatim   
 118:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================
 119:./Lib/Src/stm32f4xx_wwdg.c ****     ##### Prescaler, Refresh window and Counter configuration functions #####
 120:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================  
 121:./Lib/Src/stm32f4xx_wwdg.c **** 
 122:./Lib/Src/stm32f4xx_wwdg.c **** @endverbatim
 123:./Lib/Src/stm32f4xx_wwdg.c ****   * @{
 124:./Lib/Src/stm32f4xx_wwdg.c ****   */
 125:./Lib/Src/stm32f4xx_wwdg.c **** 
 126:./Lib/Src/stm32f4xx_wwdg.c **** /**
 127:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
 128:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  None
 129:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval None
 130:./Lib/Src/stm32f4xx_wwdg.c ****   */
 131:./Lib/Src/stm32f4xx_wwdg.c **** void WWDG_DeInit(void)
 132:./Lib/Src/stm32f4xx_wwdg.c **** {
  29              		.loc 1 132 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
 133:./Lib/Src/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
  39              		.loc 1 133 3
ARM GAS  /tmp/cc5CzIw8.s 			page 4


  40 0004 0121     		movs	r1, #1
  41 0006 4FF40060 		mov	r0, #2048
  42 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 134:./Lib/Src/stm32f4xx_wwdg.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
  43              		.loc 1 134 3
  44 000e 0021     		movs	r1, #0
  45 0010 4FF40060 		mov	r0, #2048
  46 0014 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 135:./Lib/Src/stm32f4xx_wwdg.c **** }
  47              		.loc 1 135 1
  48 0018 00BF     		nop
  49 001a 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.WWDG_SetPrescaler,"ax",%progbits
  54              		.align	1
  55              		.global	WWDG_SetPrescaler
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	WWDG_SetPrescaler:
  61              	.LFB124:
 136:./Lib/Src/stm32f4xx_wwdg.c **** 
 137:./Lib/Src/stm32f4xx_wwdg.c **** /**
 138:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG Prescaler.
 139:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
 140:./Lib/Src/stm32f4xx_wwdg.c ****   *   This parameter can be one of the following values:
 141:./Lib/Src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
 142:./Lib/Src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
 143:./Lib/Src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
 144:./Lib/Src/stm32f4xx_wwdg.c ****   *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
 145:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval None
 146:./Lib/Src/stm32f4xx_wwdg.c ****   */
 147:./Lib/Src/stm32f4xx_wwdg.c **** void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
 148:./Lib/Src/stm32f4xx_wwdg.c **** {
  62              		.loc 1 148 1
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 16
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 85B0     		sub	sp, sp, #20
  71              		.cfi_def_cfa_offset 24
  72 0004 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
 149:./Lib/Src/stm32f4xx_wwdg.c ****   uint32_t tmpreg = 0;
  75              		.loc 1 149 12
  76 0008 0023     		movs	r3, #0
  77 000a FB60     		str	r3, [r7, #12]
 150:./Lib/Src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 151:./Lib/Src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
 152:./Lib/Src/stm32f4xx_wwdg.c ****   /* Clear WDGTB[1:0] bits */
 153:./Lib/Src/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
  78              		.loc 1 153 16
ARM GAS  /tmp/cc5CzIw8.s 			page 5


  79 000c 084B     		ldr	r3, .L3
  80 000e 5B68     		ldr	r3, [r3, #4]
  81              		.loc 1 153 10
  82 0010 23F4C073 		bic	r3, r3, #384
  83 0014 FB60     		str	r3, [r7, #12]
 154:./Lib/Src/stm32f4xx_wwdg.c ****   /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
 155:./Lib/Src/stm32f4xx_wwdg.c ****   tmpreg |= WWDG_Prescaler;
  84              		.loc 1 155 10
  85 0016 FA68     		ldr	r2, [r7, #12]
  86 0018 7B68     		ldr	r3, [r7, #4]
  87 001a 1343     		orrs	r3, r3, r2
  88 001c FB60     		str	r3, [r7, #12]
 156:./Lib/Src/stm32f4xx_wwdg.c ****   /* Store the new value */
 157:./Lib/Src/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
  89              		.loc 1 157 7
  90 001e 044A     		ldr	r2, .L3
  91              		.loc 1 157 13
  92 0020 FB68     		ldr	r3, [r7, #12]
  93 0022 5360     		str	r3, [r2, #4]
 158:./Lib/Src/stm32f4xx_wwdg.c **** }
  94              		.loc 1 158 1
  95 0024 00BF     		nop
  96 0026 1437     		adds	r7, r7, #20
  97              		.cfi_def_cfa_offset 4
  98 0028 BD46     		mov	sp, r7
  99              		.cfi_def_cfa_register 13
 100              		@ sp needed
 101 002a 5DF8047B 		ldr	r7, [sp], #4
 102              		.cfi_restore 7
 103              		.cfi_def_cfa_offset 0
 104 002e 7047     		bx	lr
 105              	.L4:
 106              		.align	2
 107              	.L3:
 108 0030 002C0040 		.word	1073753088
 109              		.cfi_endproc
 110              	.LFE124:
 112              		.section	.text.WWDG_SetWindowValue,"ax",%progbits
 113              		.align	1
 114              		.global	WWDG_SetWindowValue
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	WWDG_SetWindowValue:
 120              	.LFB125:
 159:./Lib/Src/stm32f4xx_wwdg.c **** 
 160:./Lib/Src/stm32f4xx_wwdg.c **** /**
 161:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG window value.
 162:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  WindowValue: specifies the window value to be compared to the downcounter.
 163:./Lib/Src/stm32f4xx_wwdg.c ****   *   This parameter value must be lower than 0x80.
 164:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval None
 165:./Lib/Src/stm32f4xx_wwdg.c ****   */
 166:./Lib/Src/stm32f4xx_wwdg.c **** void WWDG_SetWindowValue(uint8_t WindowValue)
 167:./Lib/Src/stm32f4xx_wwdg.c **** {
 121              		.loc 1 167 1
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc5CzIw8.s 			page 6


 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 85B0     		sub	sp, sp, #20
 130              		.cfi_def_cfa_offset 24
 131 0004 00AF     		add	r7, sp, #0
 132              		.cfi_def_cfa_register 7
 133 0006 0346     		mov	r3, r0
 134 0008 FB71     		strb	r3, [r7, #7]
 168:./Lib/Src/stm32f4xx_wwdg.c ****   __IO uint32_t tmpreg = 0;
 135              		.loc 1 168 17
 136 000a 0023     		movs	r3, #0
 137 000c FB60     		str	r3, [r7, #12]
 169:./Lib/Src/stm32f4xx_wwdg.c **** 
 170:./Lib/Src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 171:./Lib/Src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
 172:./Lib/Src/stm32f4xx_wwdg.c ****   /* Clear W[6:0] bits */
 173:./Lib/Src/stm32f4xx_wwdg.c **** 
 174:./Lib/Src/stm32f4xx_wwdg.c ****   tmpreg = WWDG->CFR & CFR_W_MASK;
 138              		.loc 1 174 16
 139 000e 0A4B     		ldr	r3, .L6
 140 0010 5B68     		ldr	r3, [r3, #4]
 141              		.loc 1 174 22
 142 0012 23F07F03 		bic	r3, r3, #127
 143              		.loc 1 174 10
 144 0016 FB60     		str	r3, [r7, #12]
 175:./Lib/Src/stm32f4xx_wwdg.c **** 
 176:./Lib/Src/stm32f4xx_wwdg.c ****   /* Set W[6:0] bits according to WindowValue value */
 177:./Lib/Src/stm32f4xx_wwdg.c ****   tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 145              		.loc 1 177 25
 146 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 147 001a 03F07F02 		and	r2, r3, #127
 148              		.loc 1 177 10
 149 001e FB68     		ldr	r3, [r7, #12]
 150 0020 1343     		orrs	r3, r3, r2
 151 0022 FB60     		str	r3, [r7, #12]
 178:./Lib/Src/stm32f4xx_wwdg.c **** 
 179:./Lib/Src/stm32f4xx_wwdg.c ****   /* Store the new value */
 180:./Lib/Src/stm32f4xx_wwdg.c ****   WWDG->CFR = tmpreg;
 152              		.loc 1 180 7
 153 0024 044A     		ldr	r2, .L6
 154              		.loc 1 180 13
 155 0026 FB68     		ldr	r3, [r7, #12]
 156 0028 5360     		str	r3, [r2, #4]
 181:./Lib/Src/stm32f4xx_wwdg.c **** }
 157              		.loc 1 181 1
 158 002a 00BF     		nop
 159 002c 1437     		adds	r7, r7, #20
 160              		.cfi_def_cfa_offset 4
 161 002e BD46     		mov	sp, r7
 162              		.cfi_def_cfa_register 13
 163              		@ sp needed
 164 0030 5DF8047B 		ldr	r7, [sp], #4
 165              		.cfi_restore 7
 166              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc5CzIw8.s 			page 7


 167 0034 7047     		bx	lr
 168              	.L7:
 169 0036 00BF     		.align	2
 170              	.L6:
 171 0038 002C0040 		.word	1073753088
 172              		.cfi_endproc
 173              	.LFE125:
 175              		.section	.text.WWDG_EnableIT,"ax",%progbits
 176              		.align	1
 177              		.global	WWDG_EnableIT
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 182              	WWDG_EnableIT:
 183              	.LFB126:
 182:./Lib/Src/stm32f4xx_wwdg.c **** 
 183:./Lib/Src/stm32f4xx_wwdg.c **** /**
 184:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
 185:./Lib/Src/stm32f4xx_wwdg.c ****   * @note   Once enabled this interrupt cannot be disabled except by a system reset.
 186:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  None
 187:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval None
 188:./Lib/Src/stm32f4xx_wwdg.c ****   */
 189:./Lib/Src/stm32f4xx_wwdg.c **** void WWDG_EnableIT(void)
 190:./Lib/Src/stm32f4xx_wwdg.c **** {
 184              		.loc 1 190 1
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189 0000 80B4     		push	{r7}
 190              		.cfi_def_cfa_offset 4
 191              		.cfi_offset 7, -4
 192 0002 00AF     		add	r7, sp, #0
 193              		.cfi_def_cfa_register 7
 191:./Lib/Src/stm32f4xx_wwdg.c ****   *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 194              		.loc 1 191 3
 195 0004 034B     		ldr	r3, .L9
 196              		.loc 1 191 33
 197 0006 0122     		movs	r2, #1
 198 0008 1A60     		str	r2, [r3]
 192:./Lib/Src/stm32f4xx_wwdg.c **** }
 199              		.loc 1 192 1
 200 000a 00BF     		nop
 201 000c BD46     		mov	sp, r7
 202              		.cfi_def_cfa_register 13
 203              		@ sp needed
 204 000e 5DF8047B 		ldr	r7, [sp], #4
 205              		.cfi_restore 7
 206              		.cfi_def_cfa_offset 0
 207 0012 7047     		bx	lr
 208              	.L10:
 209              		.align	2
 210              	.L9:
 211 0014 A4800542 		.word	1107656868
 212              		.cfi_endproc
 213              	.LFE126:
 215              		.section	.text.WWDG_SetCounter,"ax",%progbits
ARM GAS  /tmp/cc5CzIw8.s 			page 8


 216              		.align	1
 217              		.global	WWDG_SetCounter
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 222              	WWDG_SetCounter:
 223              	.LFB127:
 193:./Lib/Src/stm32f4xx_wwdg.c **** 
 194:./Lib/Src/stm32f4xx_wwdg.c **** /**
 195:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Sets the WWDG counter value.
 196:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 197:./Lib/Src/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 198:./Lib/Src/stm32f4xx_wwdg.c ****   *   an immediate reset) 
 199:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval None
 200:./Lib/Src/stm32f4xx_wwdg.c ****   */
 201:./Lib/Src/stm32f4xx_wwdg.c **** void WWDG_SetCounter(uint8_t Counter)
 202:./Lib/Src/stm32f4xx_wwdg.c **** {
 224              		.loc 1 202 1
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 1, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229 0000 80B4     		push	{r7}
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 7, -4
 232 0002 83B0     		sub	sp, sp, #12
 233              		.cfi_def_cfa_offset 16
 234 0004 00AF     		add	r7, sp, #0
 235              		.cfi_def_cfa_register 7
 236 0006 0346     		mov	r3, r0
 237 0008 FB71     		strb	r3, [r7, #7]
 203:./Lib/Src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 204:./Lib/Src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 205:./Lib/Src/stm32f4xx_wwdg.c ****   /* Write to T[6:0] bits to configure the counter value, no need to do
 206:./Lib/Src/stm32f4xx_wwdg.c ****      a read-modify-write; writing a 0 to WDGA bit does nothing */
 207:./Lib/Src/stm32f4xx_wwdg.c ****   WWDG->CR = Counter & BIT_MASK;
 238              		.loc 1 207 22
 239 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 240              		.loc 1 207 7
 241 000c 044A     		ldr	r2, .L12
 242              		.loc 1 207 22
 243 000e 03F07F03 		and	r3, r3, #127
 244              		.loc 1 207 12
 245 0012 1360     		str	r3, [r2]
 208:./Lib/Src/stm32f4xx_wwdg.c **** }
 246              		.loc 1 208 1
 247 0014 00BF     		nop
 248 0016 0C37     		adds	r7, r7, #12
 249              		.cfi_def_cfa_offset 4
 250 0018 BD46     		mov	sp, r7
 251              		.cfi_def_cfa_register 13
 252              		@ sp needed
 253 001a 5DF8047B 		ldr	r7, [sp], #4
 254              		.cfi_restore 7
 255              		.cfi_def_cfa_offset 0
 256 001e 7047     		bx	lr
 257              	.L13:
ARM GAS  /tmp/cc5CzIw8.s 			page 9


 258              		.align	2
 259              	.L12:
 260 0020 002C0040 		.word	1073753088
 261              		.cfi_endproc
 262              	.LFE127:
 264              		.section	.text.WWDG_Enable,"ax",%progbits
 265              		.align	1
 266              		.global	WWDG_Enable
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 271              	WWDG_Enable:
 272              	.LFB128:
 209:./Lib/Src/stm32f4xx_wwdg.c **** /**
 210:./Lib/Src/stm32f4xx_wwdg.c ****   * @}
 211:./Lib/Src/stm32f4xx_wwdg.c ****   */
 212:./Lib/Src/stm32f4xx_wwdg.c **** 
 213:./Lib/Src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group2 WWDG activation functions
 214:./Lib/Src/stm32f4xx_wwdg.c ****  *  @brief   WWDG activation functions 
 215:./Lib/Src/stm32f4xx_wwdg.c ****  *
 216:./Lib/Src/stm32f4xx_wwdg.c **** @verbatim   
 217:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================
 218:./Lib/Src/stm32f4xx_wwdg.c ****                     ##### WWDG activation function #####
 219:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================  
 220:./Lib/Src/stm32f4xx_wwdg.c **** 
 221:./Lib/Src/stm32f4xx_wwdg.c **** @endverbatim
 222:./Lib/Src/stm32f4xx_wwdg.c ****   * @{
 223:./Lib/Src/stm32f4xx_wwdg.c ****   */
 224:./Lib/Src/stm32f4xx_wwdg.c **** 
 225:./Lib/Src/stm32f4xx_wwdg.c **** /**
 226:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Enables WWDG and load the counter value.                  
 227:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  Counter: specifies the watchdog counter value.
 228:./Lib/Src/stm32f4xx_wwdg.c ****   *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
 229:./Lib/Src/stm32f4xx_wwdg.c ****   *   an immediate reset)
 230:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval None
 231:./Lib/Src/stm32f4xx_wwdg.c ****   */
 232:./Lib/Src/stm32f4xx_wwdg.c **** void WWDG_Enable(uint8_t Counter)
 233:./Lib/Src/stm32f4xx_wwdg.c **** {
 273              		.loc 1 233 1
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 8
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0000 80B4     		push	{r7}
 279              		.cfi_def_cfa_offset 4
 280              		.cfi_offset 7, -4
 281 0002 83B0     		sub	sp, sp, #12
 282              		.cfi_def_cfa_offset 16
 283 0004 00AF     		add	r7, sp, #0
 284              		.cfi_def_cfa_register 7
 285 0006 0346     		mov	r3, r0
 286 0008 FB71     		strb	r3, [r7, #7]
 234:./Lib/Src/stm32f4xx_wwdg.c ****   /* Check the parameters */
 235:./Lib/Src/stm32f4xx_wwdg.c ****   assert_param(IS_WWDG_COUNTER(Counter));
 236:./Lib/Src/stm32f4xx_wwdg.c ****   WWDG->CR = WWDG_CR_WDGA | Counter;
 287              		.loc 1 236 27
 288 000a FB79     		ldrb	r3, [r7, #7]
ARM GAS  /tmp/cc5CzIw8.s 			page 10


 289 000c 63F07F03 		orn	r3, r3, #127
 290 0010 DAB2     		uxtb	r2, r3
 291              		.loc 1 236 7
 292 0012 044B     		ldr	r3, .L15
 293              		.loc 1 236 12
 294 0014 1A60     		str	r2, [r3]
 237:./Lib/Src/stm32f4xx_wwdg.c **** }
 295              		.loc 1 237 1
 296 0016 00BF     		nop
 297 0018 0C37     		adds	r7, r7, #12
 298              		.cfi_def_cfa_offset 4
 299 001a BD46     		mov	sp, r7
 300              		.cfi_def_cfa_register 13
 301              		@ sp needed
 302 001c 5DF8047B 		ldr	r7, [sp], #4
 303              		.cfi_restore 7
 304              		.cfi_def_cfa_offset 0
 305 0020 7047     		bx	lr
 306              	.L16:
 307 0022 00BF     		.align	2
 308              	.L15:
 309 0024 002C0040 		.word	1073753088
 310              		.cfi_endproc
 311              	.LFE128:
 313              		.section	.text.WWDG_GetFlagStatus,"ax",%progbits
 314              		.align	1
 315              		.global	WWDG_GetFlagStatus
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 320              	WWDG_GetFlagStatus:
 321              	.LFB129:
 238:./Lib/Src/stm32f4xx_wwdg.c **** /**
 239:./Lib/Src/stm32f4xx_wwdg.c ****   * @}
 240:./Lib/Src/stm32f4xx_wwdg.c ****   */
 241:./Lib/Src/stm32f4xx_wwdg.c **** 
 242:./Lib/Src/stm32f4xx_wwdg.c **** /** @defgroup WWDG_Group3 Interrupts and flags management functions
 243:./Lib/Src/stm32f4xx_wwdg.c ****  *  @brief   Interrupts and flags management functions 
 244:./Lib/Src/stm32f4xx_wwdg.c ****  *
 245:./Lib/Src/stm32f4xx_wwdg.c **** @verbatim   
 246:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================
 247:./Lib/Src/stm32f4xx_wwdg.c ****             ##### Interrupts and flags management functions #####
 248:./Lib/Src/stm32f4xx_wwdg.c ****  ===============================================================================  
 249:./Lib/Src/stm32f4xx_wwdg.c **** 
 250:./Lib/Src/stm32f4xx_wwdg.c **** @endverbatim
 251:./Lib/Src/stm32f4xx_wwdg.c ****   * @{
 252:./Lib/Src/stm32f4xx_wwdg.c ****   */
 253:./Lib/Src/stm32f4xx_wwdg.c **** 
 254:./Lib/Src/stm32f4xx_wwdg.c **** /**
 255:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
 256:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  None
 257:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
 258:./Lib/Src/stm32f4xx_wwdg.c ****   */
 259:./Lib/Src/stm32f4xx_wwdg.c **** FlagStatus WWDG_GetFlagStatus(void)
 260:./Lib/Src/stm32f4xx_wwdg.c **** {
 322              		.loc 1 260 1
 323              		.cfi_startproc
ARM GAS  /tmp/cc5CzIw8.s 			page 11


 324              		@ args = 0, pretend = 0, frame = 8
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 0000 80B4     		push	{r7}
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 7, -4
 330 0002 83B0     		sub	sp, sp, #12
 331              		.cfi_def_cfa_offset 16
 332 0004 00AF     		add	r7, sp, #0
 333              		.cfi_def_cfa_register 7
 261:./Lib/Src/stm32f4xx_wwdg.c ****   FlagStatus bitstatus = RESET;
 334              		.loc 1 261 14
 335 0006 0023     		movs	r3, #0
 336 0008 FB71     		strb	r3, [r7, #7]
 262:./Lib/Src/stm32f4xx_wwdg.c ****     
 263:./Lib/Src/stm32f4xx_wwdg.c ****   if ((WWDG->SR) != (uint32_t)RESET)
 337              		.loc 1 263 12
 338 000a 084B     		ldr	r3, .L21
 339 000c 9B68     		ldr	r3, [r3, #8]
 340              		.loc 1 263 6
 341 000e 002B     		cmp	r3, #0
 342 0010 02D0     		beq	.L18
 264:./Lib/Src/stm32f4xx_wwdg.c ****   {
 265:./Lib/Src/stm32f4xx_wwdg.c ****     bitstatus = SET;
 343              		.loc 1 265 15
 344 0012 0123     		movs	r3, #1
 345 0014 FB71     		strb	r3, [r7, #7]
 346 0016 01E0     		b	.L19
 347              	.L18:
 266:./Lib/Src/stm32f4xx_wwdg.c ****   }
 267:./Lib/Src/stm32f4xx_wwdg.c ****   else
 268:./Lib/Src/stm32f4xx_wwdg.c ****   {
 269:./Lib/Src/stm32f4xx_wwdg.c ****     bitstatus = RESET;
 348              		.loc 1 269 15
 349 0018 0023     		movs	r3, #0
 350 001a FB71     		strb	r3, [r7, #7]
 351              	.L19:
 270:./Lib/Src/stm32f4xx_wwdg.c ****   }
 271:./Lib/Src/stm32f4xx_wwdg.c ****   return bitstatus;
 352              		.loc 1 271 10
 353 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 272:./Lib/Src/stm32f4xx_wwdg.c **** }
 354              		.loc 1 272 1
 355 001e 1846     		mov	r0, r3
 356 0020 0C37     		adds	r7, r7, #12
 357              		.cfi_def_cfa_offset 4
 358 0022 BD46     		mov	sp, r7
 359              		.cfi_def_cfa_register 13
 360              		@ sp needed
 361 0024 5DF8047B 		ldr	r7, [sp], #4
 362              		.cfi_restore 7
 363              		.cfi_def_cfa_offset 0
 364 0028 7047     		bx	lr
 365              	.L22:
 366 002a 00BF     		.align	2
 367              	.L21:
 368 002c 002C0040 		.word	1073753088
ARM GAS  /tmp/cc5CzIw8.s 			page 12


 369              		.cfi_endproc
 370              	.LFE129:
 372              		.section	.text.WWDG_ClearFlag,"ax",%progbits
 373              		.align	1
 374              		.global	WWDG_ClearFlag
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 379              	WWDG_ClearFlag:
 380              	.LFB130:
 273:./Lib/Src/stm32f4xx_wwdg.c **** 
 274:./Lib/Src/stm32f4xx_wwdg.c **** /**
 275:./Lib/Src/stm32f4xx_wwdg.c ****   * @brief  Clears Early Wakeup interrupt flag.
 276:./Lib/Src/stm32f4xx_wwdg.c ****   * @param  None
 277:./Lib/Src/stm32f4xx_wwdg.c ****   * @retval None
 278:./Lib/Src/stm32f4xx_wwdg.c ****   */
 279:./Lib/Src/stm32f4xx_wwdg.c **** void WWDG_ClearFlag(void)
 280:./Lib/Src/stm32f4xx_wwdg.c **** {
 381              		.loc 1 280 1
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386 0000 80B4     		push	{r7}
 387              		.cfi_def_cfa_offset 4
 388              		.cfi_offset 7, -4
 389 0002 00AF     		add	r7, sp, #0
 390              		.cfi_def_cfa_register 7
 281:./Lib/Src/stm32f4xx_wwdg.c ****   WWDG->SR = (uint32_t)RESET;
 391              		.loc 1 281 7
 392 0004 034B     		ldr	r3, .L24
 393              		.loc 1 281 12
 394 0006 0022     		movs	r2, #0
 395 0008 9A60     		str	r2, [r3, #8]
 282:./Lib/Src/stm32f4xx_wwdg.c **** }
 396              		.loc 1 282 1
 397 000a 00BF     		nop
 398 000c BD46     		mov	sp, r7
 399              		.cfi_def_cfa_register 13
 400              		@ sp needed
 401 000e 5DF8047B 		ldr	r7, [sp], #4
 402              		.cfi_restore 7
 403              		.cfi_def_cfa_offset 0
 404 0012 7047     		bx	lr
 405              	.L25:
 406              		.align	2
 407              	.L24:
 408 0014 002C0040 		.word	1073753088
 409              		.cfi_endproc
 410              	.LFE130:
 412              		.text
 413              	.Letext0:
 414              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 415              		.file 3 "./Start/stm32f4xx.h"
 416              		.file 4 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cc5CzIw8.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_wwdg.c
     /tmp/cc5CzIw8.s:21     .text.WWDG_DeInit:0000000000000000 $t
     /tmp/cc5CzIw8.s:27     .text.WWDG_DeInit:0000000000000000 WWDG_DeInit
     /tmp/cc5CzIw8.s:54     .text.WWDG_SetPrescaler:0000000000000000 $t
     /tmp/cc5CzIw8.s:60     .text.WWDG_SetPrescaler:0000000000000000 WWDG_SetPrescaler
     /tmp/cc5CzIw8.s:108    .text.WWDG_SetPrescaler:0000000000000030 $d
     /tmp/cc5CzIw8.s:113    .text.WWDG_SetWindowValue:0000000000000000 $t
     /tmp/cc5CzIw8.s:119    .text.WWDG_SetWindowValue:0000000000000000 WWDG_SetWindowValue
     /tmp/cc5CzIw8.s:171    .text.WWDG_SetWindowValue:0000000000000038 $d
     /tmp/cc5CzIw8.s:176    .text.WWDG_EnableIT:0000000000000000 $t
     /tmp/cc5CzIw8.s:182    .text.WWDG_EnableIT:0000000000000000 WWDG_EnableIT
     /tmp/cc5CzIw8.s:211    .text.WWDG_EnableIT:0000000000000014 $d
     /tmp/cc5CzIw8.s:216    .text.WWDG_SetCounter:0000000000000000 $t
     /tmp/cc5CzIw8.s:222    .text.WWDG_SetCounter:0000000000000000 WWDG_SetCounter
     /tmp/cc5CzIw8.s:260    .text.WWDG_SetCounter:0000000000000020 $d
     /tmp/cc5CzIw8.s:265    .text.WWDG_Enable:0000000000000000 $t
     /tmp/cc5CzIw8.s:271    .text.WWDG_Enable:0000000000000000 WWDG_Enable
     /tmp/cc5CzIw8.s:309    .text.WWDG_Enable:0000000000000024 $d
     /tmp/cc5CzIw8.s:314    .text.WWDG_GetFlagStatus:0000000000000000 $t
     /tmp/cc5CzIw8.s:320    .text.WWDG_GetFlagStatus:0000000000000000 WWDG_GetFlagStatus
     /tmp/cc5CzIw8.s:368    .text.WWDG_GetFlagStatus:000000000000002c $d
     /tmp/cc5CzIw8.s:373    .text.WWDG_ClearFlag:0000000000000000 $t
     /tmp/cc5CzIw8.s:379    .text.WWDG_ClearFlag:0000000000000000 WWDG_ClearFlag
     /tmp/cc5CzIw8.s:408    .text.WWDG_ClearFlag:0000000000000014 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
