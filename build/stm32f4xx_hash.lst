ARM GAS  /tmp/ccaog1Lp.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_hash.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_hash.c"
  20              		.section	.text.HASH_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	HASH_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HASH_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_hash.c **** /**
   2:./Lib/Src/stm32f4xx_hash.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_hash.c ****   * @file    stm32f4xx_hash.c
   4:./Lib/Src/stm32f4xx_hash.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_hash.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_hash.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_hash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_hash.c ****   *          functionalities of the HASH / HMAC Processor (HASH) peripheral:           
   9:./Lib/Src/stm32f4xx_hash.c ****   *           - Initialization and Configuration functions
  10:./Lib/Src/stm32f4xx_hash.c ****   *           - Message Digest generation functions
  11:./Lib/Src/stm32f4xx_hash.c ****   *           - context swapping functions   
  12:./Lib/Src/stm32f4xx_hash.c ****   *           - DMA interface function       
  13:./Lib/Src/stm32f4xx_hash.c ****   *           - Interrupts and flags management       
  14:./Lib/Src/stm32f4xx_hash.c ****   *         
  15:./Lib/Src/stm32f4xx_hash.c **** @verbatim
  16:./Lib/Src/stm32f4xx_hash.c ****  ===================================================================      
  17:./Lib/Src/stm32f4xx_hash.c ****                  ##### How to use this driver #####
  18:./Lib/Src/stm32f4xx_hash.c ****  ===================================================================
  19:./Lib/Src/stm32f4xx_hash.c ****             
  20:./Lib/Src/stm32f4xx_hash.c ****  *** HASH operation : *** 
  21:./Lib/Src/stm32f4xx_hash.c ****  ========================                 
  22:./Lib/Src/stm32f4xx_hash.c ****  [..]
  23:./Lib/Src/stm32f4xx_hash.c ****    (#) Enable the HASH controller clock using 
  24:./Lib/Src/stm32f4xx_hash.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE) function.
  25:./Lib/Src/stm32f4xx_hash.c ****              
  26:./Lib/Src/stm32f4xx_hash.c ****    (#) Initialize the HASH using HASH_Init() function. 
  27:./Lib/Src/stm32f4xx_hash.c ****                  
  28:./Lib/Src/stm32f4xx_hash.c ****    (#) Reset the HASH processor core, so that the HASH will be ready 
  29:./Lib/Src/stm32f4xx_hash.c ****        to compute he message digest of a new message by using HASH_Reset() function.
  30:./Lib/Src/stm32f4xx_hash.c ****   
ARM GAS  /tmp/ccaog1Lp.s 			page 2


  31:./Lib/Src/stm32f4xx_hash.c ****    (#) Enable the HASH controller using the HASH_Cmd() function. 
  32:./Lib/Src/stm32f4xx_hash.c ****                   
  33:./Lib/Src/stm32f4xx_hash.c ****    (#) if using DMA for Data input transfer, Activate the DMA Request 
  34:./Lib/Src/stm32f4xx_hash.c ****        using HASH_DMACmd() function 
  35:./Lib/Src/stm32f4xx_hash.c ****                       
  36:./Lib/Src/stm32f4xx_hash.c ****    (#) if DMA is not used for data transfer, use HASH_DataIn() function 
  37:./Lib/Src/stm32f4xx_hash.c ****        to enter data to IN FIFO.
  38:./Lib/Src/stm32f4xx_hash.c ****                
  39:./Lib/Src/stm32f4xx_hash.c ****             
  40:./Lib/Src/stm32f4xx_hash.c ****    (#) Configure the Number of valid bits in last word of the message 
  41:./Lib/Src/stm32f4xx_hash.c ****        using HASH_SetLastWordValidBitsNbr() function.
  42:./Lib/Src/stm32f4xx_hash.c ****                
  43:./Lib/Src/stm32f4xx_hash.c ****    (#) if the message length is not an exact multiple of 512 bits, 
  44:./Lib/Src/stm32f4xx_hash.c ****        then the function HASH_StartDigest() must be called to launch the computation
  45:./Lib/Src/stm32f4xx_hash.c ****        of the final digest.     
  46:./Lib/Src/stm32f4xx_hash.c ****                
  47:./Lib/Src/stm32f4xx_hash.c ****    (#) Once computed, the digest can be read using HASH_GetDigest() function.         
  48:./Lib/Src/stm32f4xx_hash.c ****                      
  49:./Lib/Src/stm32f4xx_hash.c ****    (#) To control HASH events you can use one of the following wo methods:
  50:./Lib/Src/stm32f4xx_hash.c ****        (++) Check on HASH flags using the HASH_GetFlagStatus() function.  
  51:./Lib/Src/stm32f4xx_hash.c ****        (++) Use HASH interrupts through the function HASH_ITConfig() at 
  52:./Lib/Src/stm32f4xx_hash.c ****             initialization phase and HASH_GetITStatus() function into 
  53:./Lib/Src/stm32f4xx_hash.c ****             interrupt routines in hashing phase.
  54:./Lib/Src/stm32f4xx_hash.c ****             After checking on a flag you should clear it using HASH_ClearFlag()
  55:./Lib/Src/stm32f4xx_hash.c ****             function. And after checking on an interrupt event you should 
  56:./Lib/Src/stm32f4xx_hash.c ****             clear it using HASH_ClearITPendingBit() function.     
  57:./Lib/Src/stm32f4xx_hash.c ****                        
  58:./Lib/Src/stm32f4xx_hash.c ****    (#) Save and restore hash processor context using 
  59:./Lib/Src/stm32f4xx_hash.c ****        HASH_SaveContext() and HASH_RestoreContext() functions.     
  60:./Lib/Src/stm32f4xx_hash.c ****                 
  61:./Lib/Src/stm32f4xx_hash.c ****   
  62:./Lib/Src/stm32f4xx_hash.c ****               
  63:./Lib/Src/stm32f4xx_hash.c ****  *** HMAC operation : *** 
  64:./Lib/Src/stm32f4xx_hash.c ****  ========================
  65:./Lib/Src/stm32f4xx_hash.c ****  [..] The HMAC algorithm is used for message authentication, by 
  66:./Lib/Src/stm32f4xx_hash.c ****       irreversibly binding the message being processed to a key chosen 
  67:./Lib/Src/stm32f4xx_hash.c ****       by the user. 
  68:./Lib/Src/stm32f4xx_hash.c ****       For HMAC specifications, refer to "HMAC: keyed-hashing for message 
  69:./Lib/Src/stm32f4xx_hash.c ****       authentication, H. Krawczyk, M. Bellare, R. Canetti, February 1997"
  70:./Lib/Src/stm32f4xx_hash.c ****             
  71:./Lib/Src/stm32f4xx_hash.c ****  [..] Basically, the HMAC algorithm consists of two nested hash operations:
  72:./Lib/Src/stm32f4xx_hash.c ****       HMAC(message) = Hash[((key | pad) XOR 0x5C) | Hash(((key | pad) XOR 0x36) | message)]
  73:./Lib/Src/stm32f4xx_hash.c ****       where:
  74:./Lib/Src/stm32f4xx_hash.c ****       (+) "pad" is a sequence of zeroes needed to extend the key to the 
  75:./Lib/Src/stm32f4xx_hash.c ****           length of the underlying hash function data block (that is 
  76:./Lib/Src/stm32f4xx_hash.c ****           512 bits for both the SHA-1 and MD5 hash algorithms)
  77:./Lib/Src/stm32f4xx_hash.c ****       (+) "|"   represents the concatenation operator 
  78:./Lib/Src/stm32f4xx_hash.c ****             
  79:./Lib/Src/stm32f4xx_hash.c ****            
  80:./Lib/Src/stm32f4xx_hash.c ****  [..]To compute the HMAC, four different phases are required:                  
  81:./Lib/Src/stm32f4xx_hash.c ****    (#) Initialize the HASH using HASH_Init() function to do HMAC 
  82:./Lib/Src/stm32f4xx_hash.c ****        operation. 
  83:./Lib/Src/stm32f4xx_hash.c ****                   
  84:./Lib/Src/stm32f4xx_hash.c ****    (#) The key (to be used for the inner hash function) is then given to the core. 
  85:./Lib/Src/stm32f4xx_hash.c ****        This operation follows the same mechanism as the one used to send the 
  86:./Lib/Src/stm32f4xx_hash.c ****        message in the hash operation (that is, by HASH_DataIn() function and, 
  87:./Lib/Src/stm32f4xx_hash.c ****        finally, HASH_StartDigest() function.
ARM GAS  /tmp/ccaog1Lp.s 			page 3


  88:./Lib/Src/stm32f4xx_hash.c ****             
  89:./Lib/Src/stm32f4xx_hash.c ****    (#) Once the last word has been entered and computation has started, 
  90:./Lib/Src/stm32f4xx_hash.c ****        the hash processor elaborates the key. It is then ready to accept the message
  91:./Lib/Src/stm32f4xx_hash.c ****        text using the same mechanism as the one used to send the message in the
  92:./Lib/Src/stm32f4xx_hash.c ****        hash operation.
  93:./Lib/Src/stm32f4xx_hash.c ****          
  94:./Lib/Src/stm32f4xx_hash.c ****    (#) After the first hash round, the hash processor returns "ready" to indicate 
  95:./Lib/Src/stm32f4xx_hash.c ****        that it is ready to receive the key to be used for the outer hash function 
  96:./Lib/Src/stm32f4xx_hash.c ****        (normally, this key is the same as the one used for the inner hash function). 
  97:./Lib/Src/stm32f4xx_hash.c ****        When the last word of the key is entered and computation starts, the HMAC 
  98:./Lib/Src/stm32f4xx_hash.c ****        result is made available using HASH_GetDigest() function.
  99:./Lib/Src/stm32f4xx_hash.c **** 
 100:./Lib/Src/stm32f4xx_hash.c **** @endverbatim
 101:./Lib/Src/stm32f4xx_hash.c ****   *         
 102:./Lib/Src/stm32f4xx_hash.c ****   ******************************************************************************
 103:./Lib/Src/stm32f4xx_hash.c ****   * @attention
 104:./Lib/Src/stm32f4xx_hash.c ****   *
 105:./Lib/Src/stm32f4xx_hash.c ****   * Copyright (c) 2016 STMicroelectronics.
 106:./Lib/Src/stm32f4xx_hash.c ****   * All rights reserved.
 107:./Lib/Src/stm32f4xx_hash.c ****   *
 108:./Lib/Src/stm32f4xx_hash.c ****   * This software is licensed under terms that can be found in the LICENSE file
 109:./Lib/Src/stm32f4xx_hash.c ****   * in the root directory of this software component.
 110:./Lib/Src/stm32f4xx_hash.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 111:./Lib/Src/stm32f4xx_hash.c ****   *
 112:./Lib/Src/stm32f4xx_hash.c ****   ******************************************************************************
 113:./Lib/Src/stm32f4xx_hash.c ****   */
 114:./Lib/Src/stm32f4xx_hash.c **** 
 115:./Lib/Src/stm32f4xx_hash.c **** /* Includes ------------------------------------------------------------------*/
 116:./Lib/Src/stm32f4xx_hash.c **** #include "stm32f4xx_hash.h"
 117:./Lib/Src/stm32f4xx_hash.c **** #include "stm32f4xx_rcc.h"
 118:./Lib/Src/stm32f4xx_hash.c **** 
 119:./Lib/Src/stm32f4xx_hash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:./Lib/Src/stm32f4xx_hash.c ****   * @{
 121:./Lib/Src/stm32f4xx_hash.c ****   */
 122:./Lib/Src/stm32f4xx_hash.c **** 
 123:./Lib/Src/stm32f4xx_hash.c **** /** @defgroup HASH 
 124:./Lib/Src/stm32f4xx_hash.c ****   * @brief HASH driver modules
 125:./Lib/Src/stm32f4xx_hash.c ****   * @{
 126:./Lib/Src/stm32f4xx_hash.c ****   */ 
 127:./Lib/Src/stm32f4xx_hash.c **** 
 128:./Lib/Src/stm32f4xx_hash.c **** /* Private typedef -----------------------------------------------------------*/
 129:./Lib/Src/stm32f4xx_hash.c **** /* Private define ------------------------------------------------------------*/
 130:./Lib/Src/stm32f4xx_hash.c **** /* Private macro -------------------------------------------------------------*/
 131:./Lib/Src/stm32f4xx_hash.c **** /* Private variables ---------------------------------------------------------*/
 132:./Lib/Src/stm32f4xx_hash.c **** /* Private function prototypes -----------------------------------------------*/
 133:./Lib/Src/stm32f4xx_hash.c **** /* Private functions ---------------------------------------------------------*/ 
 134:./Lib/Src/stm32f4xx_hash.c **** 
 135:./Lib/Src/stm32f4xx_hash.c **** /** @defgroup HASH_Private_Functions
 136:./Lib/Src/stm32f4xx_hash.c ****   * @{
 137:./Lib/Src/stm32f4xx_hash.c ****   */ 
 138:./Lib/Src/stm32f4xx_hash.c **** 
 139:./Lib/Src/stm32f4xx_hash.c **** /** @defgroup HASH_Group1 Initialization and Configuration functions
 140:./Lib/Src/stm32f4xx_hash.c ****  *  @brief    Initialization and Configuration functions 
 141:./Lib/Src/stm32f4xx_hash.c ****  *
 142:./Lib/Src/stm32f4xx_hash.c **** @verbatim    
 143:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================
 144:./Lib/Src/stm32f4xx_hash.c ****               ##### Initialization and Configuration functions #####
ARM GAS  /tmp/ccaog1Lp.s 			page 4


 145:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================  
 146:./Lib/Src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to 
 147:./Lib/Src/stm32f4xx_hash.c ****    (+) Initialize the HASH peripheral
 148:./Lib/Src/stm32f4xx_hash.c ****    (+) Configure the HASH Processor 
 149:./Lib/Src/stm32f4xx_hash.c ****    (+) MD5/SHA1, 
 150:./Lib/Src/stm32f4xx_hash.c ****    (+) HASH/HMAC, 
 151:./Lib/Src/stm32f4xx_hash.c ****    (+) datatype 
 152:./Lib/Src/stm32f4xx_hash.c ****    (+) HMAC Key (if mode = HMAC)
 153:./Lib/Src/stm32f4xx_hash.c ****    (+) Reset the HASH Processor 
 154:./Lib/Src/stm32f4xx_hash.c ****    
 155:./Lib/Src/stm32f4xx_hash.c **** @endverbatim
 156:./Lib/Src/stm32f4xx_hash.c ****   * @{
 157:./Lib/Src/stm32f4xx_hash.c ****   */
 158:./Lib/Src/stm32f4xx_hash.c ****   
 159:./Lib/Src/stm32f4xx_hash.c **** /**
 160:./Lib/Src/stm32f4xx_hash.c ****   * @brief  De-initializes the HASH peripheral registers to their default reset values
 161:./Lib/Src/stm32f4xx_hash.c ****   * @param  None
 162:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 163:./Lib/Src/stm32f4xx_hash.c ****   */
 164:./Lib/Src/stm32f4xx_hash.c **** void HASH_DeInit(void)
 165:./Lib/Src/stm32f4xx_hash.c **** {
  29              		.loc 1 165 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
 166:./Lib/Src/stm32f4xx_hash.c ****   /* Enable HASH reset state */
 167:./Lib/Src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
  39              		.loc 1 167 3
  40 0004 0121     		movs	r1, #1
  41 0006 2020     		movs	r0, #32
  42 0008 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 168:./Lib/Src/stm32f4xx_hash.c ****   /* Release HASH from reset state */
 169:./Lib/Src/stm32f4xx_hash.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
  43              		.loc 1 169 3
  44 000c 0021     		movs	r1, #0
  45 000e 2020     		movs	r0, #32
  46 0010 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 170:./Lib/Src/stm32f4xx_hash.c **** }
  47              		.loc 1 170 1
  48 0014 00BF     		nop
  49 0016 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.HASH_Init,"ax",%progbits
  54              		.align	1
  55              		.global	HASH_Init
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	HASH_Init:
  61              	.LFB124:
ARM GAS  /tmp/ccaog1Lp.s 			page 5


 171:./Lib/Src/stm32f4xx_hash.c **** 
 172:./Lib/Src/stm32f4xx_hash.c **** /**
 173:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Initializes the HASH peripheral according to the specified parameters
 174:./Lib/Src/stm32f4xx_hash.c ****   *         in the HASH_InitStruct structure.
 175:./Lib/Src/stm32f4xx_hash.c ****   * @note   the hash processor is reset when calling this function so that the
 176:./Lib/Src/stm32f4xx_hash.c ****   *         HASH will be ready to compute the message digest of a new message.
 177:./Lib/Src/stm32f4xx_hash.c ****   *         There is no need to call HASH_Reset() function.           
 178:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct: pointer to a HASH_InitTypeDef structure that contains
 179:./Lib/Src/stm32f4xx_hash.c ****   *         the configuration information for the HASH peripheral.
 180:./Lib/Src/stm32f4xx_hash.c ****   * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
 181:./Lib/Src/stm32f4xx_hash.c ****   *          if the algorithm mode is HMAC.       
 182:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 183:./Lib/Src/stm32f4xx_hash.c ****   */
 184:./Lib/Src/stm32f4xx_hash.c **** void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
 185:./Lib/Src/stm32f4xx_hash.c **** {
  62              		.loc 1 185 1
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 83B0     		sub	sp, sp, #12
  71              		.cfi_def_cfa_offset 16
  72 0004 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
 186:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 187:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
 188:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
 189:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
 190:./Lib/Src/stm32f4xx_hash.c ****   
 191:./Lib/Src/stm32f4xx_hash.c ****   /* Configure the Algorithm used, algorithm mode and the datatype */
 192:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  75              		.loc 1 192 7
  76 0008 184B     		ldr	r3, .L4
  77 000a 1B68     		ldr	r3, [r3]
  78 000c 174A     		ldr	r2, .L4
  79              		.loc 1 192 12
  80 000e 23F48023 		bic	r3, r3, #262144
  81 0012 23F0F003 		bic	r3, r3, #240
  82 0016 1360     		str	r3, [r2]
 193:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  83              		.loc 1 193 7
  84 0018 144B     		ldr	r3, .L4
  85 001a 1A68     		ldr	r2, [r3]
  86              		.loc 1 193 31
  87 001c 7B68     		ldr	r3, [r7, #4]
  88 001e 1968     		ldr	r1, [r3]
 194:./Lib/Src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
  89              		.loc 1 194 31
  90 0020 7B68     		ldr	r3, [r7, #4]
  91 0022 9B68     		ldr	r3, [r3, #8]
 193:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  92              		.loc 1 193 52
  93 0024 1943     		orrs	r1, r1, r3
ARM GAS  /tmp/ccaog1Lp.s 			page 6


 195:./Lib/Src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_AlgoMode);
  94              		.loc 1 195 31
  95 0026 7B68     		ldr	r3, [r7, #4]
  96 0028 5B68     		ldr	r3, [r3, #4]
 194:./Lib/Src/stm32f4xx_hash.c ****                HASH_InitStruct->HASH_DataType | \
  97              		.loc 1 194 47
  98 002a 0B43     		orrs	r3, r3, r1
 193:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
  99              		.loc 1 193 7
 100 002c 0F49     		ldr	r1, .L4
 193:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 101              		.loc 1 193 12
 102 002e 1343     		orrs	r3, r3, r2
 103 0030 0B60     		str	r3, [r1]
 196:./Lib/Src/stm32f4xx_hash.c ****   
 197:./Lib/Src/stm32f4xx_hash.c ****   /* if algorithm mode is HMAC, set the Key */  
 198:./Lib/Src/stm32f4xx_hash.c ****   if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 104              		.loc 1 198 21
 105 0032 7B68     		ldr	r3, [r7, #4]
 106 0034 5B68     		ldr	r3, [r3, #4]
 107              		.loc 1 198 5
 108 0036 402B     		cmp	r3, #64
 109 0038 0CD1     		bne	.L3
 199:./Lib/Src/stm32f4xx_hash.c ****   {
 200:./Lib/Src/stm32f4xx_hash.c ****     assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
 201:./Lib/Src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_LKEY;
 110              		.loc 1 201 9
 111 003a 0C4B     		ldr	r3, .L4
 112 003c 1B68     		ldr	r3, [r3]
 113 003e 0B4A     		ldr	r2, .L4
 114              		.loc 1 201 14
 115 0040 23F48033 		bic	r3, r3, #65536
 116 0044 1360     		str	r3, [r2]
 202:./Lib/Src/stm32f4xx_hash.c ****     HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 117              		.loc 1 202 9
 118 0046 094B     		ldr	r3, .L4
 119 0048 1A68     		ldr	r2, [r3]
 120              		.loc 1 202 32
 121 004a 7B68     		ldr	r3, [r7, #4]
 122 004c DB68     		ldr	r3, [r3, #12]
 123              		.loc 1 202 9
 124 004e 0749     		ldr	r1, .L4
 125              		.loc 1 202 14
 126 0050 1343     		orrs	r3, r3, r2
 127 0052 0B60     		str	r3, [r1]
 128              	.L3:
 203:./Lib/Src/stm32f4xx_hash.c ****   }
 204:./Lib/Src/stm32f4xx_hash.c **** 
 205:./Lib/Src/stm32f4xx_hash.c ****   /* Reset the HASH processor core, so that the HASH will be ready to compute 
 206:./Lib/Src/stm32f4xx_hash.c ****      the message digest of a new message */
 207:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;  
 129              		.loc 1 207 7
 130 0054 054B     		ldr	r3, .L4
 131 0056 1B68     		ldr	r3, [r3]
 132 0058 044A     		ldr	r2, .L4
 133              		.loc 1 207 12
 134 005a 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/ccaog1Lp.s 			page 7


 135 005e 1360     		str	r3, [r2]
 208:./Lib/Src/stm32f4xx_hash.c **** }
 136              		.loc 1 208 1
 137 0060 00BF     		nop
 138 0062 0C37     		adds	r7, r7, #12
 139              		.cfi_def_cfa_offset 4
 140 0064 BD46     		mov	sp, r7
 141              		.cfi_def_cfa_register 13
 142              		@ sp needed
 143 0066 5DF8047B 		ldr	r7, [sp], #4
 144              		.cfi_restore 7
 145              		.cfi_def_cfa_offset 0
 146 006a 7047     		bx	lr
 147              	.L5:
 148              		.align	2
 149              	.L4:
 150 006c 00040650 		.word	1342571520
 151              		.cfi_endproc
 152              	.LFE124:
 154              		.section	.text.HASH_StructInit,"ax",%progbits
 155              		.align	1
 156              		.global	HASH_StructInit
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
 161              	HASH_StructInit:
 162              	.LFB125:
 209:./Lib/Src/stm32f4xx_hash.c **** 
 210:./Lib/Src/stm32f4xx_hash.c **** /**
 211:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Fills each HASH_InitStruct member with its default value.
 212:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_InitStruct : pointer to a HASH_InitTypeDef structure which will
 213:./Lib/Src/stm32f4xx_hash.c ****   *          be initialized.  
 214:./Lib/Src/stm32f4xx_hash.c ****   *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
 215:./Lib/Src/stm32f4xx_hash.c ****   *          Data type selected is 32b and HMAC Key Type is short key.  
 216:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 217:./Lib/Src/stm32f4xx_hash.c ****   */
 218:./Lib/Src/stm32f4xx_hash.c **** void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
 219:./Lib/Src/stm32f4xx_hash.c **** {
 163              		.loc 1 219 1
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 8
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168 0000 80B4     		push	{r7}
 169              		.cfi_def_cfa_offset 4
 170              		.cfi_offset 7, -4
 171 0002 83B0     		sub	sp, sp, #12
 172              		.cfi_def_cfa_offset 16
 173 0004 00AF     		add	r7, sp, #0
 174              		.cfi_def_cfa_register 7
 175 0006 7860     		str	r0, [r7, #4]
 220:./Lib/Src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoSelection member */
 221:./Lib/Src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 176              		.loc 1 221 39
 177 0008 7B68     		ldr	r3, [r7, #4]
 178 000a 0022     		movs	r2, #0
 179 000c 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccaog1Lp.s 			page 8


 222:./Lib/Src/stm32f4xx_hash.c **** 
 223:./Lib/Src/stm32f4xx_hash.c ****   /* Initialize the HASH_AlgoMode member */
 224:./Lib/Src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 180              		.loc 1 224 34
 181 000e 7B68     		ldr	r3, [r7, #4]
 182 0010 0022     		movs	r2, #0
 183 0012 5A60     		str	r2, [r3, #4]
 225:./Lib/Src/stm32f4xx_hash.c **** 
 226:./Lib/Src/stm32f4xx_hash.c ****   /* Initialize the HASH_DataType member */
 227:./Lib/Src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 184              		.loc 1 227 34
 185 0014 7B68     		ldr	r3, [r7, #4]
 186 0016 0022     		movs	r2, #0
 187 0018 9A60     		str	r2, [r3, #8]
 228:./Lib/Src/stm32f4xx_hash.c **** 
 229:./Lib/Src/stm32f4xx_hash.c ****   /* Initialize the HASH_HMACKeyType member */
 230:./Lib/Src/stm32f4xx_hash.c ****   HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 188              		.loc 1 230 37
 189 001a 7B68     		ldr	r3, [r7, #4]
 190 001c 0022     		movs	r2, #0
 191 001e DA60     		str	r2, [r3, #12]
 231:./Lib/Src/stm32f4xx_hash.c **** }
 192              		.loc 1 231 1
 193 0020 00BF     		nop
 194 0022 0C37     		adds	r7, r7, #12
 195              		.cfi_def_cfa_offset 4
 196 0024 BD46     		mov	sp, r7
 197              		.cfi_def_cfa_register 13
 198              		@ sp needed
 199 0026 5DF8047B 		ldr	r7, [sp], #4
 200              		.cfi_restore 7
 201              		.cfi_def_cfa_offset 0
 202 002a 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE125:
 206              		.section	.text.HASH_Reset,"ax",%progbits
 207              		.align	1
 208              		.global	HASH_Reset
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 213              	HASH_Reset:
 214              	.LFB126:
 232:./Lib/Src/stm32f4xx_hash.c **** 
 233:./Lib/Src/stm32f4xx_hash.c **** /**
 234:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Resets the HASH processor core, so that the HASH will be ready
 235:./Lib/Src/stm32f4xx_hash.c ****   *         to compute the message digest of a new message.
 236:./Lib/Src/stm32f4xx_hash.c ****   * @note   Calling this function will clear the HASH_SR_DCIS (Digest calculation 
 237:./Lib/Src/stm32f4xx_hash.c ****   *         completion interrupt status) bit corresponding to HASH_IT_DCI 
 238:./Lib/Src/stm32f4xx_hash.c ****   *         interrupt and HASH_FLAG_DCIS flag. 
 239:./Lib/Src/stm32f4xx_hash.c ****   * @param  None
 240:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 241:./Lib/Src/stm32f4xx_hash.c ****   */
 242:./Lib/Src/stm32f4xx_hash.c **** void HASH_Reset(void)
 243:./Lib/Src/stm32f4xx_hash.c **** {
 215              		.loc 1 243 1
 216              		.cfi_startproc
ARM GAS  /tmp/ccaog1Lp.s 			page 9


 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220 0000 80B4     		push	{r7}
 221              		.cfi_def_cfa_offset 4
 222              		.cfi_offset 7, -4
 223 0002 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 244:./Lib/Src/stm32f4xx_hash.c ****   /* Reset the HASH processor core */
 245:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT;
 225              		.loc 1 245 7
 226 0004 054B     		ldr	r3, .L8
 227 0006 1B68     		ldr	r3, [r3]
 228 0008 044A     		ldr	r2, .L8
 229              		.loc 1 245 12
 230 000a 43F00403 		orr	r3, r3, #4
 231 000e 1360     		str	r3, [r2]
 246:./Lib/Src/stm32f4xx_hash.c **** }
 232              		.loc 1 246 1
 233 0010 00BF     		nop
 234 0012 BD46     		mov	sp, r7
 235              		.cfi_def_cfa_register 13
 236              		@ sp needed
 237 0014 5DF8047B 		ldr	r7, [sp], #4
 238              		.cfi_restore 7
 239              		.cfi_def_cfa_offset 0
 240 0018 7047     		bx	lr
 241              	.L9:
 242 001a 00BF     		.align	2
 243              	.L8:
 244 001c 00040650 		.word	1342571520
 245              		.cfi_endproc
 246              	.LFE126:
 248              		.section	.text.HASH_SetLastWordValidBitsNbr,"ax",%progbits
 249              		.align	1
 250              		.global	HASH_SetLastWordValidBitsNbr
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 255              	HASH_SetLastWordValidBitsNbr:
 256              	.LFB127:
 247:./Lib/Src/stm32f4xx_hash.c **** /**
 248:./Lib/Src/stm32f4xx_hash.c ****   * @}
 249:./Lib/Src/stm32f4xx_hash.c ****   */
 250:./Lib/Src/stm32f4xx_hash.c ****  
 251:./Lib/Src/stm32f4xx_hash.c **** /** @defgroup HASH_Group2 Message Digest generation functions
 252:./Lib/Src/stm32f4xx_hash.c ****  *  @brief    Message Digest generation functions
 253:./Lib/Src/stm32f4xx_hash.c ****  *
 254:./Lib/Src/stm32f4xx_hash.c **** @verbatim    
 255:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================
 256:./Lib/Src/stm32f4xx_hash.c ****                   ##### Message Digest generation functions #####
 257:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================  
 258:./Lib/Src/stm32f4xx_hash.c ****  [..] This section provides functions allowing the generation of message digest: 
 259:./Lib/Src/stm32f4xx_hash.c ****    (+) Push data in the IN FIFO : using HASH_DataIn()
 260:./Lib/Src/stm32f4xx_hash.c ****    (+) Get the number of words set in IN FIFO, use HASH_GetInFIFOWordsNbr()  
 261:./Lib/Src/stm32f4xx_hash.c ****    (+) set the last word valid bits number using HASH_SetLastWordValidBitsNbr() 
 262:./Lib/Src/stm32f4xx_hash.c ****    (+) start digest calculation : using HASH_StartDigest()
ARM GAS  /tmp/ccaog1Lp.s 			page 10


 263:./Lib/Src/stm32f4xx_hash.c ****    (+) Get the Digest message : using HASH_GetDigest()
 264:./Lib/Src/stm32f4xx_hash.c ****  
 265:./Lib/Src/stm32f4xx_hash.c **** @endverbatim
 266:./Lib/Src/stm32f4xx_hash.c ****   * @{
 267:./Lib/Src/stm32f4xx_hash.c ****   */
 268:./Lib/Src/stm32f4xx_hash.c **** 
 269:./Lib/Src/stm32f4xx_hash.c **** 
 270:./Lib/Src/stm32f4xx_hash.c **** /**
 271:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Configure the Number of valid bits in last word of the message
 272:./Lib/Src/stm32f4xx_hash.c ****   * @param  ValidNumber: Number of valid bits in last word of the message.
 273:./Lib/Src/stm32f4xx_hash.c ****   *           This parameter must be a number between 0 and 0x1F.
 274:./Lib/Src/stm32f4xx_hash.c ****   *             - 0x00: All 32 bits of the last data written are valid
 275:./Lib/Src/stm32f4xx_hash.c ****   *             - 0x01: Only bit [0] of the last data written is valid
 276:./Lib/Src/stm32f4xx_hash.c ****   *             - 0x02: Only bits[1:0] of the last data written are valid
 277:./Lib/Src/stm32f4xx_hash.c ****   *             - 0x03: Only bits[2:0] of the last data written are valid
 278:./Lib/Src/stm32f4xx_hash.c ****   *             - ...
 279:./Lib/Src/stm32f4xx_hash.c ****   *             - 0x1F: Only bits[30:0] of the last data written are valid    
 280:./Lib/Src/stm32f4xx_hash.c ****   * @note   The Number of valid bits must be set before to start the message 
 281:./Lib/Src/stm32f4xx_hash.c ****   *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
 282:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 283:./Lib/Src/stm32f4xx_hash.c ****   */
 284:./Lib/Src/stm32f4xx_hash.c **** void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
 285:./Lib/Src/stm32f4xx_hash.c **** {
 257              		.loc 1 285 1
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 8
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262 0000 80B4     		push	{r7}
 263              		.cfi_def_cfa_offset 4
 264              		.cfi_offset 7, -4
 265 0002 83B0     		sub	sp, sp, #12
 266              		.cfi_def_cfa_offset 16
 267 0004 00AF     		add	r7, sp, #0
 268              		.cfi_def_cfa_register 7
 269 0006 0346     		mov	r3, r0
 270 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 286:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 287:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
 288:./Lib/Src/stm32f4xx_hash.c ****   
 289:./Lib/Src/stm32f4xx_hash.c ****   /* Configure the Number of valid bits in last word of the message */
 290:./Lib/Src/stm32f4xx_hash.c ****   HASH->STR &= ~(HASH_STR_NBW);
 271              		.loc 1 290 7
 272 000a 094B     		ldr	r3, .L11
 273 000c 9B68     		ldr	r3, [r3, #8]
 274 000e 084A     		ldr	r2, .L11
 275              		.loc 1 290 13
 276 0010 23F01F03 		bic	r3, r3, #31
 277 0014 9360     		str	r3, [r2, #8]
 291:./Lib/Src/stm32f4xx_hash.c ****   HASH->STR |= ValidNumber;
 278              		.loc 1 291 7
 279 0016 064B     		ldr	r3, .L11
 280 0018 9A68     		ldr	r2, [r3, #8]
 281              		.loc 1 291 13
 282 001a FB88     		ldrh	r3, [r7, #6]
 283              		.loc 1 291 7
 284 001c 0449     		ldr	r1, .L11
ARM GAS  /tmp/ccaog1Lp.s 			page 11


 285              		.loc 1 291 13
 286 001e 1343     		orrs	r3, r3, r2
 287 0020 8B60     		str	r3, [r1, #8]
 292:./Lib/Src/stm32f4xx_hash.c **** }
 288              		.loc 1 292 1
 289 0022 00BF     		nop
 290 0024 0C37     		adds	r7, r7, #12
 291              		.cfi_def_cfa_offset 4
 292 0026 BD46     		mov	sp, r7
 293              		.cfi_def_cfa_register 13
 294              		@ sp needed
 295 0028 5DF8047B 		ldr	r7, [sp], #4
 296              		.cfi_restore 7
 297              		.cfi_def_cfa_offset 0
 298 002c 7047     		bx	lr
 299              	.L12:
 300 002e 00BF     		.align	2
 301              	.L11:
 302 0030 00040650 		.word	1342571520
 303              		.cfi_endproc
 304              	.LFE127:
 306              		.section	.text.HASH_DataIn,"ax",%progbits
 307              		.align	1
 308              		.global	HASH_DataIn
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 313              	HASH_DataIn:
 314              	.LFB128:
 293:./Lib/Src/stm32f4xx_hash.c **** 
 294:./Lib/Src/stm32f4xx_hash.c **** /**
 295:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Writes data in the Data Input FIFO
 296:./Lib/Src/stm32f4xx_hash.c ****   * @param  Data: new data of the message to be processed.
 297:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 298:./Lib/Src/stm32f4xx_hash.c ****   */
 299:./Lib/Src/stm32f4xx_hash.c **** void HASH_DataIn(uint32_t Data)
 300:./Lib/Src/stm32f4xx_hash.c **** {
 315              		.loc 1 300 1
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 8
 318              		@ frame_needed = 1, uses_anonymous_args = 0
 319              		@ link register save eliminated.
 320 0000 80B4     		push	{r7}
 321              		.cfi_def_cfa_offset 4
 322              		.cfi_offset 7, -4
 323 0002 83B0     		sub	sp, sp, #12
 324              		.cfi_def_cfa_offset 16
 325 0004 00AF     		add	r7, sp, #0
 326              		.cfi_def_cfa_register 7
 327 0006 7860     		str	r0, [r7, #4]
 301:./Lib/Src/stm32f4xx_hash.c ****   /* Write in the DIN register a new data */
 302:./Lib/Src/stm32f4xx_hash.c ****   HASH->DIN = Data;
 328              		.loc 1 302 7
 329 0008 044A     		ldr	r2, .L14
 330              		.loc 1 302 13
 331 000a 7B68     		ldr	r3, [r7, #4]
 332 000c 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccaog1Lp.s 			page 12


 303:./Lib/Src/stm32f4xx_hash.c **** }
 333              		.loc 1 303 1
 334 000e 00BF     		nop
 335 0010 0C37     		adds	r7, r7, #12
 336              		.cfi_def_cfa_offset 4
 337 0012 BD46     		mov	sp, r7
 338              		.cfi_def_cfa_register 13
 339              		@ sp needed
 340 0014 5DF8047B 		ldr	r7, [sp], #4
 341              		.cfi_restore 7
 342              		.cfi_def_cfa_offset 0
 343 0018 7047     		bx	lr
 344              	.L15:
 345 001a 00BF     		.align	2
 346              	.L14:
 347 001c 00040650 		.word	1342571520
 348              		.cfi_endproc
 349              	.LFE128:
 351              		.section	.text.HASH_GetInFIFOWordsNbr,"ax",%progbits
 352              		.align	1
 353              		.global	HASH_GetInFIFOWordsNbr
 354              		.syntax unified
 355              		.thumb
 356              		.thumb_func
 358              	HASH_GetInFIFOWordsNbr:
 359              	.LFB129:
 304:./Lib/Src/stm32f4xx_hash.c **** 
 305:./Lib/Src/stm32f4xx_hash.c **** /**
 306:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Returns the number of words already pushed into the IN FIFO.
 307:./Lib/Src/stm32f4xx_hash.c ****   * @param  None
 308:./Lib/Src/stm32f4xx_hash.c ****   * @retval The value of words already pushed into the IN FIFO.
 309:./Lib/Src/stm32f4xx_hash.c ****   */
 310:./Lib/Src/stm32f4xx_hash.c **** uint8_t HASH_GetInFIFOWordsNbr(void)
 311:./Lib/Src/stm32f4xx_hash.c **** {
 360              		.loc 1 311 1
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 0000 80B4     		push	{r7}
 366              		.cfi_def_cfa_offset 4
 367              		.cfi_offset 7, -4
 368 0002 00AF     		add	r7, sp, #0
 369              		.cfi_def_cfa_register 7
 312:./Lib/Src/stm32f4xx_hash.c ****   /* Return the value of NBW bits */
 313:./Lib/Src/stm32f4xx_hash.c ****   return ((HASH->CR & HASH_CR_NBW) >> 8);
 370              		.loc 1 313 16
 371 0004 054B     		ldr	r3, .L18
 372 0006 1B68     		ldr	r3, [r3]
 373              		.loc 1 313 36
 374 0008 1B0A     		lsrs	r3, r3, #8
 375 000a DBB2     		uxtb	r3, r3
 376 000c 03F00F03 		and	r3, r3, #15
 377 0010 DBB2     		uxtb	r3, r3
 314:./Lib/Src/stm32f4xx_hash.c **** }
 378              		.loc 1 314 1
 379 0012 1846     		mov	r0, r3
ARM GAS  /tmp/ccaog1Lp.s 			page 13


 380 0014 BD46     		mov	sp, r7
 381              		.cfi_def_cfa_register 13
 382              		@ sp needed
 383 0016 5DF8047B 		ldr	r7, [sp], #4
 384              		.cfi_restore 7
 385              		.cfi_def_cfa_offset 0
 386 001a 7047     		bx	lr
 387              	.L19:
 388              		.align	2
 389              	.L18:
 390 001c 00040650 		.word	1342571520
 391              		.cfi_endproc
 392              	.LFE129:
 394              		.section	.text.HASH_GetDigest,"ax",%progbits
 395              		.align	1
 396              		.global	HASH_GetDigest
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 401              	HASH_GetDigest:
 402              	.LFB130:
 315:./Lib/Src/stm32f4xx_hash.c **** 
 316:./Lib/Src/stm32f4xx_hash.c **** /**
 317:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Provides the message digest result.
 318:./Lib/Src/stm32f4xx_hash.c ****   * @note   In MD5 mode, Data[7] to Data[4] filed of HASH_MsgDigest structure is not used
 319:./Lib/Src/stm32f4xx_hash.c ****   *         and is read as zero.
 320:./Lib/Src/stm32f4xx_hash.c ****   *         In SHA-1 mode, Data[7] to Data[5] filed of HASH_MsgDigest structure is not used
 321:./Lib/Src/stm32f4xx_hash.c ****   *         and is read as zero.    
 322:./Lib/Src/stm32f4xx_hash.c ****   *         In SHA-224 mode, Data[7] filed of HASH_MsgDigest structure is not used
 323:./Lib/Src/stm32f4xx_hash.c ****   *         and is read as zero.  
 324:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
 325:./Lib/Src/stm32f4xx_hash.c ****   *         hold the message digest result 
 326:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 327:./Lib/Src/stm32f4xx_hash.c ****   */
 328:./Lib/Src/stm32f4xx_hash.c **** void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
 329:./Lib/Src/stm32f4xx_hash.c **** {
 403              		.loc 1 329 1
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 8
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 80B4     		push	{r7}
 409              		.cfi_def_cfa_offset 4
 410              		.cfi_offset 7, -4
 411 0002 83B0     		sub	sp, sp, #12
 412              		.cfi_def_cfa_offset 16
 413 0004 00AF     		add	r7, sp, #0
 414              		.cfi_def_cfa_register 7
 415 0006 7860     		str	r0, [r7, #4]
 330:./Lib/Src/stm32f4xx_hash.c ****   /* Get the data field */
 331:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[0] = HASH->HR[0];
 416              		.loc 1 331 37
 417 0008 124B     		ldr	r3, .L21
 418              		.loc 1 331 41
 419 000a DA68     		ldr	r2, [r3, #12]
 420              		.loc 1 331 31
 421 000c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccaog1Lp.s 			page 14


 422 000e 1A60     		str	r2, [r3]
 332:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[1] = HASH->HR[1];
 423              		.loc 1 332 37
 424 0010 104B     		ldr	r3, .L21
 425              		.loc 1 332 41
 426 0012 1A69     		ldr	r2, [r3, #16]
 427              		.loc 1 332 31
 428 0014 7B68     		ldr	r3, [r7, #4]
 429 0016 5A60     		str	r2, [r3, #4]
 333:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[2] = HASH->HR[2];
 430              		.loc 1 333 37
 431 0018 0E4B     		ldr	r3, .L21
 432              		.loc 1 333 41
 433 001a 5A69     		ldr	r2, [r3, #20]
 434              		.loc 1 333 31
 435 001c 7B68     		ldr	r3, [r7, #4]
 436 001e 9A60     		str	r2, [r3, #8]
 334:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[3] = HASH->HR[3];
 437              		.loc 1 334 37
 438 0020 0C4B     		ldr	r3, .L21
 439              		.loc 1 334 41
 440 0022 9A69     		ldr	r2, [r3, #24]
 441              		.loc 1 334 31
 442 0024 7B68     		ldr	r3, [r7, #4]
 443 0026 DA60     		str	r2, [r3, #12]
 335:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[4] = HASH->HR[4];
 444              		.loc 1 335 37
 445 0028 0A4B     		ldr	r3, .L21
 446              		.loc 1 335 41
 447 002a DA69     		ldr	r2, [r3, #28]
 448              		.loc 1 335 31
 449 002c 7B68     		ldr	r3, [r7, #4]
 450 002e 1A61     		str	r2, [r3, #16]
 336:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 451              		.loc 1 336 44
 452 0030 094B     		ldr	r3, .L21+4
 453              		.loc 1 336 48
 454 0032 5A69     		ldr	r2, [r3, #20]
 455              		.loc 1 336 31
 456 0034 7B68     		ldr	r3, [r7, #4]
 457 0036 5A61     		str	r2, [r3, #20]
 337:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 458              		.loc 1 337 44
 459 0038 074B     		ldr	r3, .L21+4
 460              		.loc 1 337 48
 461 003a 9A69     		ldr	r2, [r3, #24]
 462              		.loc 1 337 31
 463 003c 7B68     		ldr	r3, [r7, #4]
 464 003e 9A61     		str	r2, [r3, #24]
 338:./Lib/Src/stm32f4xx_hash.c ****   HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 465              		.loc 1 338 44
 466 0040 054B     		ldr	r3, .L21+4
 467              		.loc 1 338 48
 468 0042 DA69     		ldr	r2, [r3, #28]
 469              		.loc 1 338 31
 470 0044 7B68     		ldr	r3, [r7, #4]
 471 0046 DA61     		str	r2, [r3, #28]
ARM GAS  /tmp/ccaog1Lp.s 			page 15


 339:./Lib/Src/stm32f4xx_hash.c **** }
 472              		.loc 1 339 1
 473 0048 00BF     		nop
 474 004a 0C37     		adds	r7, r7, #12
 475              		.cfi_def_cfa_offset 4
 476 004c BD46     		mov	sp, r7
 477              		.cfi_def_cfa_register 13
 478              		@ sp needed
 479 004e 5DF8047B 		ldr	r7, [sp], #4
 480              		.cfi_restore 7
 481              		.cfi_def_cfa_offset 0
 482 0052 7047     		bx	lr
 483              	.L22:
 484              		.align	2
 485              	.L21:
 486 0054 00040650 		.word	1342571520
 487 0058 10070650 		.word	1342572304
 488              		.cfi_endproc
 489              	.LFE130:
 491              		.section	.text.HASH_StartDigest,"ax",%progbits
 492              		.align	1
 493              		.global	HASH_StartDigest
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 498              	HASH_StartDigest:
 499              	.LFB131:
 340:./Lib/Src/stm32f4xx_hash.c **** 
 341:./Lib/Src/stm32f4xx_hash.c **** /**
 342:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Starts the message padding and calculation of the final message     
 343:./Lib/Src/stm32f4xx_hash.c ****   * @param  None
 344:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 345:./Lib/Src/stm32f4xx_hash.c ****   */
 346:./Lib/Src/stm32f4xx_hash.c **** void HASH_StartDigest(void)
 347:./Lib/Src/stm32f4xx_hash.c **** {
 500              		.loc 1 347 1
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 0
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504              		@ link register save eliminated.
 505 0000 80B4     		push	{r7}
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
 508 0002 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 348:./Lib/Src/stm32f4xx_hash.c ****   /* Start the Digest calculation */
 349:./Lib/Src/stm32f4xx_hash.c ****   HASH->STR |= HASH_STR_DCAL;
 510              		.loc 1 349 7
 511 0004 054B     		ldr	r3, .L24
 512 0006 9B68     		ldr	r3, [r3, #8]
 513 0008 044A     		ldr	r2, .L24
 514              		.loc 1 349 13
 515 000a 43F48073 		orr	r3, r3, #256
 516 000e 9360     		str	r3, [r2, #8]
 350:./Lib/Src/stm32f4xx_hash.c **** }
 517              		.loc 1 350 1
 518 0010 00BF     		nop
ARM GAS  /tmp/ccaog1Lp.s 			page 16


 519 0012 BD46     		mov	sp, r7
 520              		.cfi_def_cfa_register 13
 521              		@ sp needed
 522 0014 5DF8047B 		ldr	r7, [sp], #4
 523              		.cfi_restore 7
 524              		.cfi_def_cfa_offset 0
 525 0018 7047     		bx	lr
 526              	.L25:
 527 001a 00BF     		.align	2
 528              	.L24:
 529 001c 00040650 		.word	1342571520
 530              		.cfi_endproc
 531              	.LFE131:
 533              		.section	.text.HASH_SaveContext,"ax",%progbits
 534              		.align	1
 535              		.global	HASH_SaveContext
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 540              	HASH_SaveContext:
 541              	.LFB132:
 351:./Lib/Src/stm32f4xx_hash.c **** /**
 352:./Lib/Src/stm32f4xx_hash.c ****   * @}
 353:./Lib/Src/stm32f4xx_hash.c ****   */
 354:./Lib/Src/stm32f4xx_hash.c **** 
 355:./Lib/Src/stm32f4xx_hash.c **** /** @defgroup HASH_Group3 Context swapping functions
 356:./Lib/Src/stm32f4xx_hash.c ****  *  @brief   Context swapping functions
 357:./Lib/Src/stm32f4xx_hash.c ****  *
 358:./Lib/Src/stm32f4xx_hash.c **** @verbatim   
 359:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================
 360:./Lib/Src/stm32f4xx_hash.c ****                       ##### Context swapping functions #####
 361:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================  
 362:./Lib/Src/stm32f4xx_hash.c ****  
 363:./Lib/Src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to save and store HASH Context
 364:./Lib/Src/stm32f4xx_hash.c ****   
 365:./Lib/Src/stm32f4xx_hash.c ****  [..] It is possible to interrupt a HASH/HMAC process to perform another processing 
 366:./Lib/Src/stm32f4xx_hash.c ****       with a higher priority, and to complete the interrupted process later on, when 
 367:./Lib/Src/stm32f4xx_hash.c ****       the higher priority task is complete. To do so, the context of the interrupted 
 368:./Lib/Src/stm32f4xx_hash.c ****       task must be saved from the HASH registers to memory, and then be restored 
 369:./Lib/Src/stm32f4xx_hash.c ****       from memory to the HASH registers.
 370:./Lib/Src/stm32f4xx_hash.c ****   
 371:./Lib/Src/stm32f4xx_hash.c ****    (#) To save the current context, use HASH_SaveContext() function
 372:./Lib/Src/stm32f4xx_hash.c ****    (#) To restore the saved context, use HASH_RestoreContext() function 
 373:./Lib/Src/stm32f4xx_hash.c ****   
 374:./Lib/Src/stm32f4xx_hash.c **** 
 375:./Lib/Src/stm32f4xx_hash.c **** @endverbatim
 376:./Lib/Src/stm32f4xx_hash.c ****   * @{
 377:./Lib/Src/stm32f4xx_hash.c ****   */
 378:./Lib/Src/stm32f4xx_hash.c ****   
 379:./Lib/Src/stm32f4xx_hash.c **** /**
 380:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Save the Hash peripheral Context. 
 381:./Lib/Src/stm32f4xx_hash.c ****   * @note   The context can be saved only when no block is currently being 
 382:./Lib/Src/stm32f4xx_hash.c ****   *         processed. So user must wait for DINIS = 1 (the last block has been 
 383:./Lib/Src/stm32f4xx_hash.c ****   *         processed and the input FIFO is empty) or NBW != 0 (the FIFO is not 
 384:./Lib/Src/stm32f4xx_hash.c ****   *         full and no processing is ongoing).   
 385:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
 386:./Lib/Src/stm32f4xx_hash.c ****   *         the repository for current context.
ARM GAS  /tmp/ccaog1Lp.s 			page 17


 387:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 388:./Lib/Src/stm32f4xx_hash.c ****   */
 389:./Lib/Src/stm32f4xx_hash.c **** void HASH_SaveContext(HASH_Context* HASH_ContextSave)
 390:./Lib/Src/stm32f4xx_hash.c **** {
 542              		.loc 1 390 1
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 16
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546              		@ link register save eliminated.
 547 0000 80B4     		push	{r7}
 548              		.cfi_def_cfa_offset 4
 549              		.cfi_offset 7, -4
 550 0002 85B0     		sub	sp, sp, #20
 551              		.cfi_def_cfa_offset 24
 552 0004 00AF     		add	r7, sp, #0
 553              		.cfi_def_cfa_register 7
 554 0006 7860     		str	r0, [r7, #4]
 391:./Lib/Src/stm32f4xx_hash.c ****   uint8_t i = 0;
 555              		.loc 1 391 11
 556 0008 0023     		movs	r3, #0
 557 000a FB73     		strb	r3, [r7, #15]
 392:./Lib/Src/stm32f4xx_hash.c ****   
 393:./Lib/Src/stm32f4xx_hash.c ****   /* save context registers */
 394:./Lib/Src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_IMR = HASH->IMR;  
 558              		.loc 1 394 36
 559 000c 134B     		ldr	r3, .L29
 560 000e 1A6A     		ldr	r2, [r3, #32]
 561              		.loc 1 394 30
 562 0010 7B68     		ldr	r3, [r7, #4]
 563 0012 1A60     		str	r2, [r3]
 395:./Lib/Src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_STR = HASH->STR;      
 564              		.loc 1 395 36
 565 0014 114B     		ldr	r3, .L29
 566 0016 9A68     		ldr	r2, [r3, #8]
 567              		.loc 1 395 30
 568 0018 7B68     		ldr	r3, [r7, #4]
 569 001a 5A60     		str	r2, [r3, #4]
 396:./Lib/Src/stm32f4xx_hash.c ****   HASH_ContextSave->HASH_CR  = HASH->CR;     
 570              		.loc 1 396 36
 571 001c 0F4B     		ldr	r3, .L29
 572 001e 1A68     		ldr	r2, [r3]
 573              		.loc 1 396 30
 574 0020 7B68     		ldr	r3, [r7, #4]
 575 0022 9A60     		str	r2, [r3, #8]
 397:./Lib/Src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 576              		.loc 1 397 8
 577 0024 0023     		movs	r3, #0
 578 0026 FB73     		strb	r3, [r7, #15]
 579              		.loc 1 397 3
 580 0028 0DE0     		b	.L27
 581              	.L28:
 398:./Lib/Src/stm32f4xx_hash.c ****   {
 399:./Lib/Src/stm32f4xx_hash.c ****      HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 582              		.loc 1 399 42 discriminator 3
 583 002a 0C49     		ldr	r1, .L29
 584              		.loc 1 399 47 discriminator 3
 585 002c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/ccaog1Lp.s 			page 18


 586              		.loc 1 399 32 discriminator 3
 587 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 588              		.loc 1 399 47 discriminator 3
 589 0030 3E32     		adds	r2, r2, #62
 590 0032 51F82220 		ldr	r2, [r1, r2, lsl #2]
 591              		.loc 1 399 36 discriminator 3
 592 0036 7968     		ldr	r1, [r7, #4]
 593 0038 0233     		adds	r3, r3, #2
 594 003a 9B00     		lsls	r3, r3, #2
 595 003c 0B44     		add	r3, r3, r1
 596 003e 5A60     		str	r2, [r3, #4]
 397:./Lib/Src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 597              		.loc 1 397 19 discriminator 3
 598 0040 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 599 0042 0133     		adds	r3, r3, #1
 600 0044 FB73     		strb	r3, [r7, #15]
 601              	.L27:
 397:./Lib/Src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 602              		.loc 1 397 13 discriminator 1
 603 0046 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 604 0048 352B     		cmp	r3, #53
 605 004a EED9     		bls	.L28
 400:./Lib/Src/stm32f4xx_hash.c ****   }   
 401:./Lib/Src/stm32f4xx_hash.c **** }
 606              		.loc 1 401 1
 607 004c 00BF     		nop
 608 004e 00BF     		nop
 609 0050 1437     		adds	r7, r7, #20
 610              		.cfi_def_cfa_offset 4
 611 0052 BD46     		mov	sp, r7
 612              		.cfi_def_cfa_register 13
 613              		@ sp needed
 614 0054 5DF8047B 		ldr	r7, [sp], #4
 615              		.cfi_restore 7
 616              		.cfi_def_cfa_offset 0
 617 0058 7047     		bx	lr
 618              	.L30:
 619 005a 00BF     		.align	2
 620              	.L29:
 621 005c 00040650 		.word	1342571520
 622              		.cfi_endproc
 623              	.LFE132:
 625              		.section	.text.HASH_RestoreContext,"ax",%progbits
 626              		.align	1
 627              		.global	HASH_RestoreContext
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 632              	HASH_RestoreContext:
 633              	.LFB133:
 402:./Lib/Src/stm32f4xx_hash.c **** 
 403:./Lib/Src/stm32f4xx_hash.c **** /**
 404:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Restore the Hash peripheral Context.  
 405:./Lib/Src/stm32f4xx_hash.c ****   * @note   After calling this function, user can restart the processing from the
 406:./Lib/Src/stm32f4xx_hash.c ****   *         point where it has been interrupted.  
 407:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
 408:./Lib/Src/stm32f4xx_hash.c ****   *         the repository for saved context.
ARM GAS  /tmp/ccaog1Lp.s 			page 19


 409:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 410:./Lib/Src/stm32f4xx_hash.c ****   */
 411:./Lib/Src/stm32f4xx_hash.c **** void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
 412:./Lib/Src/stm32f4xx_hash.c **** {
 634              		.loc 1 412 1
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 16
 637              		@ frame_needed = 1, uses_anonymous_args = 0
 638              		@ link register save eliminated.
 639 0000 80B4     		push	{r7}
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 7, -4
 642 0002 85B0     		sub	sp, sp, #20
 643              		.cfi_def_cfa_offset 24
 644 0004 00AF     		add	r7, sp, #0
 645              		.cfi_def_cfa_register 7
 646 0006 7860     		str	r0, [r7, #4]
 413:./Lib/Src/stm32f4xx_hash.c ****   uint8_t i = 0;
 647              		.loc 1 413 11
 648 0008 0023     		movs	r3, #0
 649 000a FB73     		strb	r3, [r7, #15]
 414:./Lib/Src/stm32f4xx_hash.c ****   
 415:./Lib/Src/stm32f4xx_hash.c ****   /* restore context registers */
 416:./Lib/Src/stm32f4xx_hash.c ****   HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 650              		.loc 1 416 7
 651 000c 164A     		ldr	r2, .L34
 652              		.loc 1 416 34
 653 000e 7B68     		ldr	r3, [r7, #4]
 654 0010 1B68     		ldr	r3, [r3]
 655              		.loc 1 416 13
 656 0012 1362     		str	r3, [r2, #32]
 417:./Lib/Src/stm32f4xx_hash.c ****   HASH->STR = HASH_ContextRestore->HASH_STR;     
 657              		.loc 1 417 7
 658 0014 144A     		ldr	r2, .L34
 659              		.loc 1 417 34
 660 0016 7B68     		ldr	r3, [r7, #4]
 661 0018 5B68     		ldr	r3, [r3, #4]
 662              		.loc 1 417 13
 663 001a 9360     		str	r3, [r2, #8]
 418:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR = HASH_ContextRestore->HASH_CR;
 664              		.loc 1 418 7
 665 001c 124A     		ldr	r2, .L34
 666              		.loc 1 418 33
 667 001e 7B68     		ldr	r3, [r7, #4]
 668 0020 9B68     		ldr	r3, [r3, #8]
 669              		.loc 1 418 12
 670 0022 1360     		str	r3, [r2]
 419:./Lib/Src/stm32f4xx_hash.c ****   
 420:./Lib/Src/stm32f4xx_hash.c ****   /* Initialize the hash processor */
 421:./Lib/Src/stm32f4xx_hash.c ****   HASH->CR |= HASH_CR_INIT; 
 671              		.loc 1 421 7
 672 0024 104B     		ldr	r3, .L34
 673 0026 1B68     		ldr	r3, [r3]
 674 0028 0F4A     		ldr	r2, .L34
 675              		.loc 1 421 12
 676 002a 43F00403 		orr	r3, r3, #4
 677 002e 1360     		str	r3, [r2]
ARM GAS  /tmp/ccaog1Lp.s 			page 20


 422:./Lib/Src/stm32f4xx_hash.c ****   
 423:./Lib/Src/stm32f4xx_hash.c ****    /* continue restoring context registers */     
 424:./Lib/Src/stm32f4xx_hash.c ****   for(i=0; i<=53;i++)
 678              		.loc 1 424 8
 679 0030 0023     		movs	r3, #0
 680 0032 FB73     		strb	r3, [r7, #15]
 681              		.loc 1 424 3
 682 0034 0EE0     		b	.L32
 683              	.L33:
 425:./Lib/Src/stm32f4xx_hash.c ****   {
 426:./Lib/Src/stm32f4xx_hash.c ****      HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 684              		.loc 1 426 50 discriminator 3
 685 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 686              		.loc 1 426 10 discriminator 3
 687 0038 0B48     		ldr	r0, .L34
 688              		.loc 1 426 15 discriminator 3
 689 003a F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 690              		.loc 1 426 50 discriminator 3
 691 003c 7A68     		ldr	r2, [r7, #4]
 692 003e 0233     		adds	r3, r3, #2
 693 0040 9B00     		lsls	r3, r3, #2
 694 0042 1344     		add	r3, r3, r2
 695 0044 5A68     		ldr	r2, [r3, #4]
 696              		.loc 1 426 19 discriminator 3
 697 0046 01F13E03 		add	r3, r1, #62
 698 004a 40F82320 		str	r2, [r0, r3, lsl #2]
 424:./Lib/Src/stm32f4xx_hash.c ****   {
 699              		.loc 1 424 19 discriminator 3
 700 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 701 0050 0133     		adds	r3, r3, #1
 702 0052 FB73     		strb	r3, [r7, #15]
 703              	.L32:
 424:./Lib/Src/stm32f4xx_hash.c ****   {
 704              		.loc 1 424 13 discriminator 1
 705 0054 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 706 0056 352B     		cmp	r3, #53
 707 0058 EDD9     		bls	.L33
 427:./Lib/Src/stm32f4xx_hash.c ****   }   
 428:./Lib/Src/stm32f4xx_hash.c **** }
 708              		.loc 1 428 1
 709 005a 00BF     		nop
 710 005c 00BF     		nop
 711 005e 1437     		adds	r7, r7, #20
 712              		.cfi_def_cfa_offset 4
 713 0060 BD46     		mov	sp, r7
 714              		.cfi_def_cfa_register 13
 715              		@ sp needed
 716 0062 5DF8047B 		ldr	r7, [sp], #4
 717              		.cfi_restore 7
 718              		.cfi_def_cfa_offset 0
 719 0066 7047     		bx	lr
 720              	.L35:
 721              		.align	2
 722              	.L34:
 723 0068 00040650 		.word	1342571520
 724              		.cfi_endproc
 725              	.LFE133:
ARM GAS  /tmp/ccaog1Lp.s 			page 21


 727              		.section	.text.HASH_AutoStartDigest,"ax",%progbits
 728              		.align	1
 729              		.global	HASH_AutoStartDigest
 730              		.syntax unified
 731              		.thumb
 732              		.thumb_func
 734              	HASH_AutoStartDigest:
 735              	.LFB134:
 429:./Lib/Src/stm32f4xx_hash.c **** /**
 430:./Lib/Src/stm32f4xx_hash.c ****   * @}
 431:./Lib/Src/stm32f4xx_hash.c ****   */
 432:./Lib/Src/stm32f4xx_hash.c **** 
 433:./Lib/Src/stm32f4xx_hash.c **** /** @defgroup HASH_Group4 HASH's DMA interface Configuration function
 434:./Lib/Src/stm32f4xx_hash.c ****  *  @brief   HASH's DMA interface Configuration function 
 435:./Lib/Src/stm32f4xx_hash.c ****  *
 436:./Lib/Src/stm32f4xx_hash.c **** @verbatim   
 437:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================
 438:./Lib/Src/stm32f4xx_hash.c ****                ##### HASH's DMA interface Configuration function #####
 439:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================  
 440:./Lib/Src/stm32f4xx_hash.c **** 
 441:./Lib/Src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to configure the DMA interface for 
 442:./Lib/Src/stm32f4xx_hash.c ****       HASH/ HMAC data input transfer.
 443:./Lib/Src/stm32f4xx_hash.c ****    
 444:./Lib/Src/stm32f4xx_hash.c ****  [..] When the DMA mode is enabled (using the HASH_DMACmd() function), data can be 
 445:./Lib/Src/stm32f4xx_hash.c ****       sent to the IN FIFO using the DMA peripheral.
 446:./Lib/Src/stm32f4xx_hash.c **** 
 447:./Lib/Src/stm32f4xx_hash.c **** @endverbatim
 448:./Lib/Src/stm32f4xx_hash.c ****   * @{
 449:./Lib/Src/stm32f4xx_hash.c ****   */
 450:./Lib/Src/stm32f4xx_hash.c **** 
 451:./Lib/Src/stm32f4xx_hash.c **** /**
 452:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Enables or disables auto-start message padding and
 453:./Lib/Src/stm32f4xx_hash.c ****   *         calculation of the final message digest at the end of DMA transfer.
 454:./Lib/Src/stm32f4xx_hash.c ****   * @param  NewState: new state of the selected HASH DMA transfer request.
 455:./Lib/Src/stm32f4xx_hash.c ****   *          This parameter can be: ENABLE or DISABLE.
 456:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 457:./Lib/Src/stm32f4xx_hash.c ****   */
 458:./Lib/Src/stm32f4xx_hash.c **** void HASH_AutoStartDigest(FunctionalState NewState)
 459:./Lib/Src/stm32f4xx_hash.c **** {
 736              		.loc 1 459 1
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 8
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741 0000 80B4     		push	{r7}
 742              		.cfi_def_cfa_offset 4
 743              		.cfi_offset 7, -4
 744 0002 83B0     		sub	sp, sp, #12
 745              		.cfi_def_cfa_offset 16
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 0346     		mov	r3, r0
 749 0008 FB71     		strb	r3, [r7, #7]
 460:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 461:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 462:./Lib/Src/stm32f4xx_hash.c **** 
 463:./Lib/Src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
ARM GAS  /tmp/ccaog1Lp.s 			page 22


 750              		.loc 1 463 6
 751 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 752 000c 002B     		cmp	r3, #0
 753 000e 06D0     		beq	.L37
 464:./Lib/Src/stm32f4xx_hash.c ****   {
 465:./Lib/Src/stm32f4xx_hash.c ****     /* Enable the auto start of the final message digest at the end of DMA transfer */
 466:./Lib/Src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_MDMAT;
 754              		.loc 1 466 9
 755 0010 094B     		ldr	r3, .L40
 756 0012 1B68     		ldr	r3, [r3]
 757 0014 084A     		ldr	r2, .L40
 758              		.loc 1 466 14
 759 0016 23F40053 		bic	r3, r3, #8192
 760 001a 1360     		str	r3, [r2]
 467:./Lib/Src/stm32f4xx_hash.c ****   }
 468:./Lib/Src/stm32f4xx_hash.c ****   else
 469:./Lib/Src/stm32f4xx_hash.c ****   {
 470:./Lib/Src/stm32f4xx_hash.c ****     /* Disable the auto start of the final message digest at the end of DMA transfer */
 471:./Lib/Src/stm32f4xx_hash.c ****     HASH->CR |= HASH_CR_MDMAT;
 472:./Lib/Src/stm32f4xx_hash.c ****   }
 473:./Lib/Src/stm32f4xx_hash.c **** }
 761              		.loc 1 473 1
 762 001c 05E0     		b	.L39
 763              	.L37:
 471:./Lib/Src/stm32f4xx_hash.c ****   }
 764              		.loc 1 471 9
 765 001e 064B     		ldr	r3, .L40
 766 0020 1B68     		ldr	r3, [r3]
 767 0022 054A     		ldr	r2, .L40
 471:./Lib/Src/stm32f4xx_hash.c ****   }
 768              		.loc 1 471 14
 769 0024 43F40053 		orr	r3, r3, #8192
 770 0028 1360     		str	r3, [r2]
 771              	.L39:
 772              		.loc 1 473 1
 773 002a 00BF     		nop
 774 002c 0C37     		adds	r7, r7, #12
 775              		.cfi_def_cfa_offset 4
 776 002e BD46     		mov	sp, r7
 777              		.cfi_def_cfa_register 13
 778              		@ sp needed
 779 0030 5DF8047B 		ldr	r7, [sp], #4
 780              		.cfi_restore 7
 781              		.cfi_def_cfa_offset 0
 782 0034 7047     		bx	lr
 783              	.L41:
 784 0036 00BF     		.align	2
 785              	.L40:
 786 0038 00040650 		.word	1342571520
 787              		.cfi_endproc
 788              	.LFE134:
 790              		.section	.text.HASH_DMACmd,"ax",%progbits
 791              		.align	1
 792              		.global	HASH_DMACmd
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
ARM GAS  /tmp/ccaog1Lp.s 			page 23


 797              	HASH_DMACmd:
 798              	.LFB135:
 474:./Lib/Src/stm32f4xx_hash.c ****   
 475:./Lib/Src/stm32f4xx_hash.c **** /**
 476:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Enables or disables the HASH DMA interface.
 477:./Lib/Src/stm32f4xx_hash.c ****   * @note   The DMA is disabled by hardware after the end of transfer.
 478:./Lib/Src/stm32f4xx_hash.c ****   * @param  NewState: new state of the selected HASH DMA transfer request.
 479:./Lib/Src/stm32f4xx_hash.c ****   *          This parameter can be: ENABLE or DISABLE.
 480:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 481:./Lib/Src/stm32f4xx_hash.c ****   */
 482:./Lib/Src/stm32f4xx_hash.c **** void HASH_DMACmd(FunctionalState NewState)
 483:./Lib/Src/stm32f4xx_hash.c **** {
 799              		.loc 1 483 1
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 8
 802              		@ frame_needed = 1, uses_anonymous_args = 0
 803              		@ link register save eliminated.
 804 0000 80B4     		push	{r7}
 805              		.cfi_def_cfa_offset 4
 806              		.cfi_offset 7, -4
 807 0002 83B0     		sub	sp, sp, #12
 808              		.cfi_def_cfa_offset 16
 809 0004 00AF     		add	r7, sp, #0
 810              		.cfi_def_cfa_register 7
 811 0006 0346     		mov	r3, r0
 812 0008 FB71     		strb	r3, [r7, #7]
 484:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 485:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:./Lib/Src/stm32f4xx_hash.c **** 
 487:./Lib/Src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 813              		.loc 1 487 6
 814 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 815 000c 002B     		cmp	r3, #0
 816 000e 06D0     		beq	.L43
 488:./Lib/Src/stm32f4xx_hash.c ****   {
 489:./Lib/Src/stm32f4xx_hash.c ****     /* Enable the HASH DMA request */
 490:./Lib/Src/stm32f4xx_hash.c ****     HASH->CR |= HASH_CR_DMAE;
 817              		.loc 1 490 9
 818 0010 094B     		ldr	r3, .L46
 819 0012 1B68     		ldr	r3, [r3]
 820 0014 084A     		ldr	r2, .L46
 821              		.loc 1 490 14
 822 0016 43F00803 		orr	r3, r3, #8
 823 001a 1360     		str	r3, [r2]
 491:./Lib/Src/stm32f4xx_hash.c ****   }
 492:./Lib/Src/stm32f4xx_hash.c ****   else
 493:./Lib/Src/stm32f4xx_hash.c ****   {
 494:./Lib/Src/stm32f4xx_hash.c ****     /* Disable the HASH DMA request */
 495:./Lib/Src/stm32f4xx_hash.c ****     HASH->CR &= ~HASH_CR_DMAE;
 496:./Lib/Src/stm32f4xx_hash.c ****   }
 497:./Lib/Src/stm32f4xx_hash.c **** }
 824              		.loc 1 497 1
 825 001c 05E0     		b	.L45
 826              	.L43:
 495:./Lib/Src/stm32f4xx_hash.c ****   }
 827              		.loc 1 495 9
 828 001e 064B     		ldr	r3, .L46
ARM GAS  /tmp/ccaog1Lp.s 			page 24


 829 0020 1B68     		ldr	r3, [r3]
 830 0022 054A     		ldr	r2, .L46
 495:./Lib/Src/stm32f4xx_hash.c ****   }
 831              		.loc 1 495 14
 832 0024 23F00803 		bic	r3, r3, #8
 833 0028 1360     		str	r3, [r2]
 834              	.L45:
 835              		.loc 1 497 1
 836 002a 00BF     		nop
 837 002c 0C37     		adds	r7, r7, #12
 838              		.cfi_def_cfa_offset 4
 839 002e BD46     		mov	sp, r7
 840              		.cfi_def_cfa_register 13
 841              		@ sp needed
 842 0030 5DF8047B 		ldr	r7, [sp], #4
 843              		.cfi_restore 7
 844              		.cfi_def_cfa_offset 0
 845 0034 7047     		bx	lr
 846              	.L47:
 847 0036 00BF     		.align	2
 848              	.L46:
 849 0038 00040650 		.word	1342571520
 850              		.cfi_endproc
 851              	.LFE135:
 853              		.section	.text.HASH_ITConfig,"ax",%progbits
 854              		.align	1
 855              		.global	HASH_ITConfig
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 860              	HASH_ITConfig:
 861              	.LFB136:
 498:./Lib/Src/stm32f4xx_hash.c **** /**
 499:./Lib/Src/stm32f4xx_hash.c ****   * @}
 500:./Lib/Src/stm32f4xx_hash.c ****   */
 501:./Lib/Src/stm32f4xx_hash.c **** 
 502:./Lib/Src/stm32f4xx_hash.c **** /** @defgroup HASH_Group5 Interrupts and flags management functions
 503:./Lib/Src/stm32f4xx_hash.c ****  *  @brief   Interrupts and flags management functions
 504:./Lib/Src/stm32f4xx_hash.c ****  *
 505:./Lib/Src/stm32f4xx_hash.c **** @verbatim   
 506:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================
 507:./Lib/Src/stm32f4xx_hash.c ****                ##### Interrupts and flags management functions #####
 508:./Lib/Src/stm32f4xx_hash.c ****  ===============================================================================  
 509:./Lib/Src/stm32f4xx_hash.c **** 
 510:./Lib/Src/stm32f4xx_hash.c ****  [..] This section provides functions allowing to configure the HASH Interrupts and 
 511:./Lib/Src/stm32f4xx_hash.c ****       to get the status and clear flags and Interrupts pending bits.
 512:./Lib/Src/stm32f4xx_hash.c ****   
 513:./Lib/Src/stm32f4xx_hash.c ****  [..] The HASH provides 2 Interrupts sources and 5 Flags:
 514:./Lib/Src/stm32f4xx_hash.c ****   
 515:./Lib/Src/stm32f4xx_hash.c ****  *** Flags : ***
 516:./Lib/Src/stm32f4xx_hash.c ****  =============== 
 517:./Lib/Src/stm32f4xx_hash.c ****  [..]
 518:./Lib/Src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DINIS : set when 16 locations are free in the Data IN FIFO 
 519:./Lib/Src/stm32f4xx_hash.c ****       which means that a  new block (512 bit) can be entered into the input buffer.
 520:./Lib/Src/stm32f4xx_hash.c ****                           
 521:./Lib/Src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DCIS :  set when Digest calculation is complete
 522:./Lib/Src/stm32f4xx_hash.c ****       
ARM GAS  /tmp/ccaog1Lp.s 			page 25


 523:./Lib/Src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DMAS :  set when HASH's DMA interface is enabled (DMAE=1) or 
 524:./Lib/Src/stm32f4xx_hash.c ****        a transfer is ongoing. This Flag is cleared only by hardware.
 525:./Lib/Src/stm32f4xx_hash.c ****                            
 526:./Lib/Src/stm32f4xx_hash.c ****    (#) HASH_FLAG_BUSY :  set when The hash core is processing a block of data
 527:./Lib/Src/stm32f4xx_hash.c ****        This Flag is cleared only by hardware. 
 528:./Lib/Src/stm32f4xx_hash.c ****                            
 529:./Lib/Src/stm32f4xx_hash.c ****    (#) HASH_FLAG_DINNE : set when Data IN FIFO is not empty which means that 
 530:./Lib/Src/stm32f4xx_hash.c ****        the Data IN FIFO contains at least one word of data. This Flag is cleared 
 531:./Lib/Src/stm32f4xx_hash.c ****        only by hardware.
 532:./Lib/Src/stm32f4xx_hash.c ****      
 533:./Lib/Src/stm32f4xx_hash.c ****  *** Interrupts : ***
 534:./Lib/Src/stm32f4xx_hash.c ****  ====================
 535:./Lib/Src/stm32f4xx_hash.c ****  [..]   
 536:./Lib/Src/stm32f4xx_hash.c ****    (#) HASH_IT_DINI  : if enabled, this interrupt source is pending when 16 
 537:./Lib/Src/stm32f4xx_hash.c ****        locations are free in the Data IN FIFO  which means that a new block (512 bit)
 538:./Lib/Src/stm32f4xx_hash.c ****        can be entered into the input buffer. This interrupt source is cleared using 
 539:./Lib/Src/stm32f4xx_hash.c ****        HASH_ClearITPendingBit(HASH_IT_DINI) function.
 540:./Lib/Src/stm32f4xx_hash.c ****    
 541:./Lib/Src/stm32f4xx_hash.c ****    (#) HASH_IT_DCI   : if enabled, this interrupt source is pending when Digest 
 542:./Lib/Src/stm32f4xx_hash.c ****        calculation is complete. This interrupt source is cleared using 
 543:./Lib/Src/stm32f4xx_hash.c ****        HASH_ClearITPendingBit(HASH_IT_DCI) function.
 544:./Lib/Src/stm32f4xx_hash.c **** 
 545:./Lib/Src/stm32f4xx_hash.c ****  *** Managing the HASH controller events : ***
 546:./Lib/Src/stm32f4xx_hash.c ****  =============================================
 547:./Lib/Src/stm32f4xx_hash.c ****  [..] The user should identify which mode will be used in his application to manage 
 548:./Lib/Src/stm32f4xx_hash.c ****       the HASH controller events: Polling mode or Interrupt mode.
 549:./Lib/Src/stm32f4xx_hash.c ****   
 550:./Lib/Src/stm32f4xx_hash.c ****    (#) In the Polling Mode it is advised to use the following functions:
 551:./Lib/Src/stm32f4xx_hash.c ****        (++) HASH_GetFlagStatus() : to check if flags events occur. 
 552:./Lib/Src/stm32f4xx_hash.c ****        (++) HASH_ClearFlag()     : to clear the flags events.
 553:./Lib/Src/stm32f4xx_hash.c ****     
 554:./Lib/Src/stm32f4xx_hash.c ****    (#)  In the Interrupt Mode it is advised to use the following functions:
 555:./Lib/Src/stm32f4xx_hash.c ****        (++) HASH_ITConfig()       : to enable or disable the interrupt source.
 556:./Lib/Src/stm32f4xx_hash.c ****        (++) HASH_GetITStatus()    : to check if Interrupt occurs.
 557:./Lib/Src/stm32f4xx_hash.c ****        (++) HASH_ClearITPendingBit() : to clear the Interrupt pending Bit 
 558:./Lib/Src/stm32f4xx_hash.c ****             (corresponding Flag). 
 559:./Lib/Src/stm32f4xx_hash.c **** 
 560:./Lib/Src/stm32f4xx_hash.c **** @endverbatim
 561:./Lib/Src/stm32f4xx_hash.c ****   * @{
 562:./Lib/Src/stm32f4xx_hash.c ****   */ 
 563:./Lib/Src/stm32f4xx_hash.c ****   
 564:./Lib/Src/stm32f4xx_hash.c **** /**
 565:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Enables or disables the specified HASH interrupts.
 566:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to be enabled or disabled.
 567:./Lib/Src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 568:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 569:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 570:./Lib/Src/stm32f4xx_hash.c ****   * @param  NewState: new state of the specified HASH interrupt.
 571:./Lib/Src/stm32f4xx_hash.c ****   *           This parameter can be: ENABLE or DISABLE.
 572:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 573:./Lib/Src/stm32f4xx_hash.c ****   */
 574:./Lib/Src/stm32f4xx_hash.c **** void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
 575:./Lib/Src/stm32f4xx_hash.c **** {
 862              		.loc 1 575 1
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 8
 865              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccaog1Lp.s 			page 26


 866              		@ link register save eliminated.
 867 0000 80B4     		push	{r7}
 868              		.cfi_def_cfa_offset 4
 869              		.cfi_offset 7, -4
 870 0002 83B0     		sub	sp, sp, #12
 871              		.cfi_def_cfa_offset 16
 872 0004 00AF     		add	r7, sp, #0
 873              		.cfi_def_cfa_register 7
 874 0006 7860     		str	r0, [r7, #4]
 875 0008 0B46     		mov	r3, r1
 876 000a FB70     		strb	r3, [r7, #3]
 576:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 577:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 578:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 579:./Lib/Src/stm32f4xx_hash.c **** 
 580:./Lib/Src/stm32f4xx_hash.c ****   if (NewState != DISABLE)
 877              		.loc 1 580 6
 878 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 879 000e 002B     		cmp	r3, #0
 880 0010 06D0     		beq	.L49
 581:./Lib/Src/stm32f4xx_hash.c ****   {
 582:./Lib/Src/stm32f4xx_hash.c ****     /* Enable the selected HASH interrupt */
 583:./Lib/Src/stm32f4xx_hash.c ****     HASH->IMR |= HASH_IT;
 881              		.loc 1 583 9
 882 0012 0A4B     		ldr	r3, .L52
 883 0014 1A6A     		ldr	r2, [r3, #32]
 884 0016 0949     		ldr	r1, .L52
 885              		.loc 1 583 15
 886 0018 7B68     		ldr	r3, [r7, #4]
 887 001a 1343     		orrs	r3, r3, r2
 888 001c 0B62     		str	r3, [r1, #32]
 584:./Lib/Src/stm32f4xx_hash.c ****   }
 585:./Lib/Src/stm32f4xx_hash.c ****   else
 586:./Lib/Src/stm32f4xx_hash.c ****   {
 587:./Lib/Src/stm32f4xx_hash.c ****     /* Disable the selected HASH interrupt */
 588:./Lib/Src/stm32f4xx_hash.c ****     HASH->IMR &= (uint32_t)(~HASH_IT);
 589:./Lib/Src/stm32f4xx_hash.c ****   }
 590:./Lib/Src/stm32f4xx_hash.c **** }
 889              		.loc 1 590 1
 890 001e 06E0     		b	.L51
 891              	.L49:
 588:./Lib/Src/stm32f4xx_hash.c ****   }
 892              		.loc 1 588 9
 893 0020 064B     		ldr	r3, .L52
 894 0022 1A6A     		ldr	r2, [r3, #32]
 588:./Lib/Src/stm32f4xx_hash.c ****   }
 895              		.loc 1 588 29
 896 0024 7B68     		ldr	r3, [r7, #4]
 897 0026 DB43     		mvns	r3, r3
 588:./Lib/Src/stm32f4xx_hash.c ****   }
 898              		.loc 1 588 9
 899 0028 0449     		ldr	r1, .L52
 588:./Lib/Src/stm32f4xx_hash.c ****   }
 900              		.loc 1 588 15
 901 002a 1340     		ands	r3, r3, r2
 902 002c 0B62     		str	r3, [r1, #32]
 903              	.L51:
ARM GAS  /tmp/ccaog1Lp.s 			page 27


 904              		.loc 1 590 1
 905 002e 00BF     		nop
 906 0030 0C37     		adds	r7, r7, #12
 907              		.cfi_def_cfa_offset 4
 908 0032 BD46     		mov	sp, r7
 909              		.cfi_def_cfa_register 13
 910              		@ sp needed
 911 0034 5DF8047B 		ldr	r7, [sp], #4
 912              		.cfi_restore 7
 913              		.cfi_def_cfa_offset 0
 914 0038 7047     		bx	lr
 915              	.L53:
 916 003a 00BF     		.align	2
 917              	.L52:
 918 003c 00040650 		.word	1342571520
 919              		.cfi_endproc
 920              	.LFE136:
 922              		.section	.text.HASH_GetFlagStatus,"ax",%progbits
 923              		.align	1
 924              		.global	HASH_GetFlagStatus
 925              		.syntax unified
 926              		.thumb
 927              		.thumb_func
 929              	HASH_GetFlagStatus:
 930              	.LFB137:
 591:./Lib/Src/stm32f4xx_hash.c **** 
 592:./Lib/Src/stm32f4xx_hash.c **** /**
 593:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH flag is set or not.
 594:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the HASH flag to check.
 595:./Lib/Src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 596:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data input interrupt status flag
 597:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest calculation completion interrupt status flag
 598:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_BUSY: Busy flag
 599:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DMAS: DMAS Status flag
 600:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
 601:./Lib/Src/stm32f4xx_hash.c ****   * @retval The new state of HASH_FLAG (SET or RESET)
 602:./Lib/Src/stm32f4xx_hash.c ****   */
 603:./Lib/Src/stm32f4xx_hash.c **** FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
 604:./Lib/Src/stm32f4xx_hash.c **** {
 931              		.loc 1 604 1
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 16
 934              		@ frame_needed = 1, uses_anonymous_args = 0
 935              		@ link register save eliminated.
 936 0000 80B4     		push	{r7}
 937              		.cfi_def_cfa_offset 4
 938              		.cfi_offset 7, -4
 939 0002 85B0     		sub	sp, sp, #20
 940              		.cfi_def_cfa_offset 24
 941 0004 00AF     		add	r7, sp, #0
 942              		.cfi_def_cfa_register 7
 943 0006 7860     		str	r0, [r7, #4]
 605:./Lib/Src/stm32f4xx_hash.c ****   FlagStatus bitstatus = RESET;
 944              		.loc 1 605 14
 945 0008 0023     		movs	r3, #0
 946 000a FB73     		strb	r3, [r7, #15]
 606:./Lib/Src/stm32f4xx_hash.c ****   uint32_t tempreg = 0;
ARM GAS  /tmp/ccaog1Lp.s 			page 28


 947              		.loc 1 606 12
 948 000c 0023     		movs	r3, #0
 949 000e BB60     		str	r3, [r7, #8]
 607:./Lib/Src/stm32f4xx_hash.c **** 
 608:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 609:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_FLAG(HASH_FLAG));
 610:./Lib/Src/stm32f4xx_hash.c **** 
 611:./Lib/Src/stm32f4xx_hash.c ****   /* check if the FLAG is in CR register */
 612:./Lib/Src/stm32f4xx_hash.c ****   if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 950              		.loc 1 612 18
 951 0010 7B68     		ldr	r3, [r7, #4]
 952 0012 03F48053 		and	r3, r3, #4096
 953              		.loc 1 612 6
 954 0016 002B     		cmp	r3, #0
 955 0018 03D0     		beq	.L55
 613:./Lib/Src/stm32f4xx_hash.c ****   {
 614:./Lib/Src/stm32f4xx_hash.c ****     tempreg = HASH->CR;
 956              		.loc 1 614 19
 957 001a 0C4B     		ldr	r3, .L60
 958              		.loc 1 614 13
 959 001c 1B68     		ldr	r3, [r3]
 960 001e BB60     		str	r3, [r7, #8]
 961 0020 02E0     		b	.L56
 962              	.L55:
 615:./Lib/Src/stm32f4xx_hash.c ****   }
 616:./Lib/Src/stm32f4xx_hash.c ****   else /* The FLAG is in SR register */
 617:./Lib/Src/stm32f4xx_hash.c ****   {
 618:./Lib/Src/stm32f4xx_hash.c ****     tempreg = HASH->SR;
 963              		.loc 1 618 19
 964 0022 0A4B     		ldr	r3, .L60
 965              		.loc 1 618 13
 966 0024 5B6A     		ldr	r3, [r3, #36]
 967 0026 BB60     		str	r3, [r7, #8]
 968              	.L56:
 619:./Lib/Src/stm32f4xx_hash.c ****   }
 620:./Lib/Src/stm32f4xx_hash.c **** 
 621:./Lib/Src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH flag */
 622:./Lib/Src/stm32f4xx_hash.c ****   if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 969              		.loc 1 622 16
 970 0028 BA68     		ldr	r2, [r7, #8]
 971 002a 7B68     		ldr	r3, [r7, #4]
 972 002c 1340     		ands	r3, r3, r2
 973              		.loc 1 622 6
 974 002e 002B     		cmp	r3, #0
 975 0030 02D0     		beq	.L57
 623:./Lib/Src/stm32f4xx_hash.c ****   {
 624:./Lib/Src/stm32f4xx_hash.c ****     /* HASH is set */
 625:./Lib/Src/stm32f4xx_hash.c ****     bitstatus = SET;
 976              		.loc 1 625 15
 977 0032 0123     		movs	r3, #1
 978 0034 FB73     		strb	r3, [r7, #15]
 979 0036 01E0     		b	.L58
 980              	.L57:
 626:./Lib/Src/stm32f4xx_hash.c ****   }
 627:./Lib/Src/stm32f4xx_hash.c ****   else
 628:./Lib/Src/stm32f4xx_hash.c ****   {
 629:./Lib/Src/stm32f4xx_hash.c ****     /* HASH_FLAG is reset */
ARM GAS  /tmp/ccaog1Lp.s 			page 29


 630:./Lib/Src/stm32f4xx_hash.c ****     bitstatus = RESET;
 981              		.loc 1 630 15
 982 0038 0023     		movs	r3, #0
 983 003a FB73     		strb	r3, [r7, #15]
 984              	.L58:
 631:./Lib/Src/stm32f4xx_hash.c ****   }
 632:./Lib/Src/stm32f4xx_hash.c **** 
 633:./Lib/Src/stm32f4xx_hash.c ****   /* Return the HASH_FLAG status */
 634:./Lib/Src/stm32f4xx_hash.c ****   return  bitstatus;
 985              		.loc 1 634 11
 986 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 635:./Lib/Src/stm32f4xx_hash.c **** }
 987              		.loc 1 635 1
 988 003e 1846     		mov	r0, r3
 989 0040 1437     		adds	r7, r7, #20
 990              		.cfi_def_cfa_offset 4
 991 0042 BD46     		mov	sp, r7
 992              		.cfi_def_cfa_register 13
 993              		@ sp needed
 994 0044 5DF8047B 		ldr	r7, [sp], #4
 995              		.cfi_restore 7
 996              		.cfi_def_cfa_offset 0
 997 0048 7047     		bx	lr
 998              	.L61:
 999 004a 00BF     		.align	2
 1000              	.L60:
 1001 004c 00040650 		.word	1342571520
 1002              		.cfi_endproc
 1003              	.LFE137:
 1005              		.section	.text.HASH_ClearFlag,"ax",%progbits
 1006              		.align	1
 1007              		.global	HASH_ClearFlag
 1008              		.syntax unified
 1009              		.thumb
 1010              		.thumb_func
 1012              	HASH_ClearFlag:
 1013              	.LFB138:
 636:./Lib/Src/stm32f4xx_hash.c **** /**
 637:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Clears the HASH flags.
 638:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_FLAG: specifies the flag to clear. 
 639:./Lib/Src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 640:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DINIS: Data Input Flag
 641:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
 642:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 643:./Lib/Src/stm32f4xx_hash.c ****   */
 644:./Lib/Src/stm32f4xx_hash.c **** void HASH_ClearFlag(uint32_t HASH_FLAG)
 645:./Lib/Src/stm32f4xx_hash.c **** {
 1014              		.loc 1 645 1
 1015              		.cfi_startproc
 1016              		@ args = 0, pretend = 0, frame = 8
 1017              		@ frame_needed = 1, uses_anonymous_args = 0
 1018              		@ link register save eliminated.
 1019 0000 80B4     		push	{r7}
 1020              		.cfi_def_cfa_offset 4
 1021              		.cfi_offset 7, -4
 1022 0002 83B0     		sub	sp, sp, #12
 1023              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccaog1Lp.s 			page 30


 1024 0004 00AF     		add	r7, sp, #0
 1025              		.cfi_def_cfa_register 7
 1026 0006 7860     		str	r0, [r7, #4]
 646:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 647:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
 648:./Lib/Src/stm32f4xx_hash.c ****   
 649:./Lib/Src/stm32f4xx_hash.c ****   /* Clear the selected HASH flags */
 650:./Lib/Src/stm32f4xx_hash.c ****   HASH->SR = ~(uint32_t)HASH_FLAG;
 1027              		.loc 1 650 7
 1028 0008 044A     		ldr	r2, .L63
 1029              		.loc 1 650 14
 1030 000a 7B68     		ldr	r3, [r7, #4]
 1031 000c DB43     		mvns	r3, r3
 1032              		.loc 1 650 12
 1033 000e 5362     		str	r3, [r2, #36]
 651:./Lib/Src/stm32f4xx_hash.c **** }
 1034              		.loc 1 651 1
 1035 0010 00BF     		nop
 1036 0012 0C37     		adds	r7, r7, #12
 1037              		.cfi_def_cfa_offset 4
 1038 0014 BD46     		mov	sp, r7
 1039              		.cfi_def_cfa_register 13
 1040              		@ sp needed
 1041 0016 5DF8047B 		ldr	r7, [sp], #4
 1042              		.cfi_restore 7
 1043              		.cfi_def_cfa_offset 0
 1044 001a 7047     		bx	lr
 1045              	.L64:
 1046              		.align	2
 1047              	.L63:
 1048 001c 00040650 		.word	1342571520
 1049              		.cfi_endproc
 1050              	.LFE138:
 1052              		.section	.text.HASH_GetITStatus,"ax",%progbits
 1053              		.align	1
 1054              		.global	HASH_GetITStatus
 1055              		.syntax unified
 1056              		.thumb
 1057              		.thumb_func
 1059              	HASH_GetITStatus:
 1060              	.LFB139:
 652:./Lib/Src/stm32f4xx_hash.c **** /**
 653:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Checks whether the specified HASH interrupt has occurred or not.
 654:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt source to check.
 655:./Lib/Src/stm32f4xx_hash.c ****   *          This parameter can be one of the following values:
 656:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 657:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 658:./Lib/Src/stm32f4xx_hash.c ****   * @retval The new state of HASH_IT (SET or RESET).
 659:./Lib/Src/stm32f4xx_hash.c ****   */
 660:./Lib/Src/stm32f4xx_hash.c **** ITStatus HASH_GetITStatus(uint32_t HASH_IT)
 661:./Lib/Src/stm32f4xx_hash.c **** {
 1061              		.loc 1 661 1
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 16
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 1066 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccaog1Lp.s 			page 31


 1067              		.cfi_def_cfa_offset 4
 1068              		.cfi_offset 7, -4
 1069 0002 85B0     		sub	sp, sp, #20
 1070              		.cfi_def_cfa_offset 24
 1071 0004 00AF     		add	r7, sp, #0
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
 662:./Lib/Src/stm32f4xx_hash.c ****   ITStatus bitstatus = RESET;
 1074              		.loc 1 662 12
 1075 0008 0023     		movs	r3, #0
 1076 000a FB73     		strb	r3, [r7, #15]
 663:./Lib/Src/stm32f4xx_hash.c ****   uint32_t tmpreg = 0;
 1077              		.loc 1 663 12
 1078 000c 0023     		movs	r3, #0
 1079 000e BB60     		str	r3, [r7, #8]
 664:./Lib/Src/stm32f4xx_hash.c **** 
 665:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
 666:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_GET_IT(HASH_IT));  
 667:./Lib/Src/stm32f4xx_hash.c **** 
 668:./Lib/Src/stm32f4xx_hash.c **** 
 669:./Lib/Src/stm32f4xx_hash.c ****   /* Check the status of the specified HASH interrupt */
 670:./Lib/Src/stm32f4xx_hash.c ****   tmpreg =  HASH->SR;
 1080              		.loc 1 670 17
 1081 0010 0B4B     		ldr	r3, .L69
 1082              		.loc 1 670 10
 1083 0012 5B6A     		ldr	r3, [r3, #36]
 1084 0014 BB60     		str	r3, [r7, #8]
 671:./Lib/Src/stm32f4xx_hash.c **** 
 672:./Lib/Src/stm32f4xx_hash.c ****   if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 1085              		.loc 1 672 13
 1086 0016 0A4B     		ldr	r3, .L69
 1087 0018 1A6A     		ldr	r2, [r3, #32]
 1088              		.loc 1 672 19
 1089 001a BB68     		ldr	r3, [r7, #8]
 1090 001c 1A40     		ands	r2, r2, r3
 1091              		.loc 1 672 29
 1092 001e 7B68     		ldr	r3, [r7, #4]
 1093 0020 1340     		ands	r3, r3, r2
 1094              		.loc 1 672 6
 1095 0022 002B     		cmp	r3, #0
 1096 0024 02D0     		beq	.L66
 673:./Lib/Src/stm32f4xx_hash.c ****   {
 674:./Lib/Src/stm32f4xx_hash.c ****     /* HASH_IT is set */
 675:./Lib/Src/stm32f4xx_hash.c ****     bitstatus = SET;
 1097              		.loc 1 675 15
 1098 0026 0123     		movs	r3, #1
 1099 0028 FB73     		strb	r3, [r7, #15]
 1100 002a 01E0     		b	.L67
 1101              	.L66:
 676:./Lib/Src/stm32f4xx_hash.c ****   }
 677:./Lib/Src/stm32f4xx_hash.c ****   else
 678:./Lib/Src/stm32f4xx_hash.c ****   {
 679:./Lib/Src/stm32f4xx_hash.c ****     /* HASH_IT is reset */
 680:./Lib/Src/stm32f4xx_hash.c ****     bitstatus = RESET;
 1102              		.loc 1 680 15
 1103 002c 0023     		movs	r3, #0
 1104 002e FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccaog1Lp.s 			page 32


 1105              	.L67:
 681:./Lib/Src/stm32f4xx_hash.c ****   }
 682:./Lib/Src/stm32f4xx_hash.c ****   /* Return the HASH_IT status */
 683:./Lib/Src/stm32f4xx_hash.c ****   return bitstatus;
 1106              		.loc 1 683 10
 1107 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 684:./Lib/Src/stm32f4xx_hash.c **** }
 1108              		.loc 1 684 1
 1109 0032 1846     		mov	r0, r3
 1110 0034 1437     		adds	r7, r7, #20
 1111              		.cfi_def_cfa_offset 4
 1112 0036 BD46     		mov	sp, r7
 1113              		.cfi_def_cfa_register 13
 1114              		@ sp needed
 1115 0038 5DF8047B 		ldr	r7, [sp], #4
 1116              		.cfi_restore 7
 1117              		.cfi_def_cfa_offset 0
 1118 003c 7047     		bx	lr
 1119              	.L70:
 1120 003e 00BF     		.align	2
 1121              	.L69:
 1122 0040 00040650 		.word	1342571520
 1123              		.cfi_endproc
 1124              	.LFE139:
 1126              		.section	.text.HASH_ClearITPendingBit,"ax",%progbits
 1127              		.align	1
 1128              		.global	HASH_ClearITPendingBit
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1133              	HASH_ClearITPendingBit:
 1134              	.LFB140:
 685:./Lib/Src/stm32f4xx_hash.c **** 
 686:./Lib/Src/stm32f4xx_hash.c **** /**
 687:./Lib/Src/stm32f4xx_hash.c ****   * @brief  Clears the HASH interrupt pending bit(s).
 688:./Lib/Src/stm32f4xx_hash.c ****   * @param  HASH_IT: specifies the HASH interrupt pending bit(s) to clear.
 689:./Lib/Src/stm32f4xx_hash.c ****   *          This parameter can be any combination of the following values:
 690:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DINI: Data Input interrupt
 691:./Lib/Src/stm32f4xx_hash.c ****   *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
 692:./Lib/Src/stm32f4xx_hash.c ****   * @retval None
 693:./Lib/Src/stm32f4xx_hash.c ****   */
 694:./Lib/Src/stm32f4xx_hash.c **** void HASH_ClearITPendingBit(uint32_t HASH_IT)
 695:./Lib/Src/stm32f4xx_hash.c **** {
 1135              		.loc 1 695 1
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 8
 1138              		@ frame_needed = 1, uses_anonymous_args = 0
 1139              		@ link register save eliminated.
 1140 0000 80B4     		push	{r7}
 1141              		.cfi_def_cfa_offset 4
 1142              		.cfi_offset 7, -4
 1143 0002 83B0     		sub	sp, sp, #12
 1144              		.cfi_def_cfa_offset 16
 1145 0004 00AF     		add	r7, sp, #0
 1146              		.cfi_def_cfa_register 7
 1147 0006 7860     		str	r0, [r7, #4]
 696:./Lib/Src/stm32f4xx_hash.c ****   /* Check the parameters */
ARM GAS  /tmp/ccaog1Lp.s 			page 33


 697:./Lib/Src/stm32f4xx_hash.c ****   assert_param(IS_HASH_IT(HASH_IT));
 698:./Lib/Src/stm32f4xx_hash.c **** 
 699:./Lib/Src/stm32f4xx_hash.c ****   /* Clear the selected HASH interrupt pending bit */
 700:./Lib/Src/stm32f4xx_hash.c ****   HASH->SR = (uint32_t)(~HASH_IT);
 1148              		.loc 1 700 7
 1149 0008 044A     		ldr	r2, .L72
 1150              		.loc 1 700 25
 1151 000a 7B68     		ldr	r3, [r7, #4]
 1152 000c DB43     		mvns	r3, r3
 1153              		.loc 1 700 12
 1154 000e 5362     		str	r3, [r2, #36]
 701:./Lib/Src/stm32f4xx_hash.c **** }
 1155              		.loc 1 701 1
 1156 0010 00BF     		nop
 1157 0012 0C37     		adds	r7, r7, #12
 1158              		.cfi_def_cfa_offset 4
 1159 0014 BD46     		mov	sp, r7
 1160              		.cfi_def_cfa_register 13
 1161              		@ sp needed
 1162 0016 5DF8047B 		ldr	r7, [sp], #4
 1163              		.cfi_restore 7
 1164              		.cfi_def_cfa_offset 0
 1165 001a 7047     		bx	lr
 1166              	.L73:
 1167              		.align	2
 1168              	.L72:
 1169 001c 00040650 		.word	1342571520
 1170              		.cfi_endproc
 1171              	.LFE140:
 1173              		.text
 1174              	.Letext0:
 1175              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 1176              		.file 3 "./Start/stm32f4xx.h"
 1177              		.file 4 "./Lib/inc/stm32f4xx_hash.h"
 1178              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccaog1Lp.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash.c
     /tmp/ccaog1Lp.s:21     .text.HASH_DeInit:0000000000000000 $t
     /tmp/ccaog1Lp.s:27     .text.HASH_DeInit:0000000000000000 HASH_DeInit
     /tmp/ccaog1Lp.s:54     .text.HASH_Init:0000000000000000 $t
     /tmp/ccaog1Lp.s:60     .text.HASH_Init:0000000000000000 HASH_Init
     /tmp/ccaog1Lp.s:150    .text.HASH_Init:000000000000006c $d
     /tmp/ccaog1Lp.s:155    .text.HASH_StructInit:0000000000000000 $t
     /tmp/ccaog1Lp.s:161    .text.HASH_StructInit:0000000000000000 HASH_StructInit
     /tmp/ccaog1Lp.s:207    .text.HASH_Reset:0000000000000000 $t
     /tmp/ccaog1Lp.s:213    .text.HASH_Reset:0000000000000000 HASH_Reset
     /tmp/ccaog1Lp.s:244    .text.HASH_Reset:000000000000001c $d
     /tmp/ccaog1Lp.s:249    .text.HASH_SetLastWordValidBitsNbr:0000000000000000 $t
     /tmp/ccaog1Lp.s:255    .text.HASH_SetLastWordValidBitsNbr:0000000000000000 HASH_SetLastWordValidBitsNbr
     /tmp/ccaog1Lp.s:302    .text.HASH_SetLastWordValidBitsNbr:0000000000000030 $d
     /tmp/ccaog1Lp.s:307    .text.HASH_DataIn:0000000000000000 $t
     /tmp/ccaog1Lp.s:313    .text.HASH_DataIn:0000000000000000 HASH_DataIn
     /tmp/ccaog1Lp.s:347    .text.HASH_DataIn:000000000000001c $d
     /tmp/ccaog1Lp.s:352    .text.HASH_GetInFIFOWordsNbr:0000000000000000 $t
     /tmp/ccaog1Lp.s:358    .text.HASH_GetInFIFOWordsNbr:0000000000000000 HASH_GetInFIFOWordsNbr
     /tmp/ccaog1Lp.s:390    .text.HASH_GetInFIFOWordsNbr:000000000000001c $d
     /tmp/ccaog1Lp.s:395    .text.HASH_GetDigest:0000000000000000 $t
     /tmp/ccaog1Lp.s:401    .text.HASH_GetDigest:0000000000000000 HASH_GetDigest
     /tmp/ccaog1Lp.s:486    .text.HASH_GetDigest:0000000000000054 $d
     /tmp/ccaog1Lp.s:492    .text.HASH_StartDigest:0000000000000000 $t
     /tmp/ccaog1Lp.s:498    .text.HASH_StartDigest:0000000000000000 HASH_StartDigest
     /tmp/ccaog1Lp.s:529    .text.HASH_StartDigest:000000000000001c $d
     /tmp/ccaog1Lp.s:534    .text.HASH_SaveContext:0000000000000000 $t
     /tmp/ccaog1Lp.s:540    .text.HASH_SaveContext:0000000000000000 HASH_SaveContext
     /tmp/ccaog1Lp.s:621    .text.HASH_SaveContext:000000000000005c $d
     /tmp/ccaog1Lp.s:626    .text.HASH_RestoreContext:0000000000000000 $t
     /tmp/ccaog1Lp.s:632    .text.HASH_RestoreContext:0000000000000000 HASH_RestoreContext
     /tmp/ccaog1Lp.s:723    .text.HASH_RestoreContext:0000000000000068 $d
     /tmp/ccaog1Lp.s:728    .text.HASH_AutoStartDigest:0000000000000000 $t
     /tmp/ccaog1Lp.s:734    .text.HASH_AutoStartDigest:0000000000000000 HASH_AutoStartDigest
     /tmp/ccaog1Lp.s:786    .text.HASH_AutoStartDigest:0000000000000038 $d
     /tmp/ccaog1Lp.s:791    .text.HASH_DMACmd:0000000000000000 $t
     /tmp/ccaog1Lp.s:797    .text.HASH_DMACmd:0000000000000000 HASH_DMACmd
     /tmp/ccaog1Lp.s:849    .text.HASH_DMACmd:0000000000000038 $d
     /tmp/ccaog1Lp.s:854    .text.HASH_ITConfig:0000000000000000 $t
     /tmp/ccaog1Lp.s:860    .text.HASH_ITConfig:0000000000000000 HASH_ITConfig
     /tmp/ccaog1Lp.s:918    .text.HASH_ITConfig:000000000000003c $d
     /tmp/ccaog1Lp.s:923    .text.HASH_GetFlagStatus:0000000000000000 $t
     /tmp/ccaog1Lp.s:929    .text.HASH_GetFlagStatus:0000000000000000 HASH_GetFlagStatus
     /tmp/ccaog1Lp.s:1001   .text.HASH_GetFlagStatus:000000000000004c $d
     /tmp/ccaog1Lp.s:1006   .text.HASH_ClearFlag:0000000000000000 $t
     /tmp/ccaog1Lp.s:1012   .text.HASH_ClearFlag:0000000000000000 HASH_ClearFlag
     /tmp/ccaog1Lp.s:1048   .text.HASH_ClearFlag:000000000000001c $d
     /tmp/ccaog1Lp.s:1053   .text.HASH_GetITStatus:0000000000000000 $t
     /tmp/ccaog1Lp.s:1059   .text.HASH_GetITStatus:0000000000000000 HASH_GetITStatus
     /tmp/ccaog1Lp.s:1122   .text.HASH_GetITStatus:0000000000000040 $d
     /tmp/ccaog1Lp.s:1127   .text.HASH_ClearITPendingBit:0000000000000000 $t
     /tmp/ccaog1Lp.s:1133   .text.HASH_ClearITPendingBit:0000000000000000 HASH_ClearITPendingBit
     /tmp/ccaog1Lp.s:1169   .text.HASH_ClearITPendingBit:000000000000001c $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
ARM GAS  /tmp/ccaog1Lp.s 			page 35


