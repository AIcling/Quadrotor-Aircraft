ARM GAS  /tmp/ccOaESyR.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_tim.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_tim.c"
  20              		.section	.text.TIM_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	TIM_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	TIM_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_tim.c **** /**
   2:./Lib/Src/stm32f4xx_tim.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_tim.c ****   * @file    stm32f4xx_tim.c
   4:./Lib/Src/stm32f4xx_tim.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_tim.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_tim.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_tim.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_tim.c ****   *          functionalities of the TIM peripheral:
   9:./Lib/Src/stm32f4xx_tim.c ****   *            + TimeBase management
  10:./Lib/Src/stm32f4xx_tim.c ****   *            + Output Compare management
  11:./Lib/Src/stm32f4xx_tim.c ****   *            + Input Capture management
  12:./Lib/Src/stm32f4xx_tim.c ****   *            + Advanced-control timers (TIM1 and TIM8) specific features  
  13:./Lib/Src/stm32f4xx_tim.c ****   *            + Interrupts, DMA and flags management
  14:./Lib/Src/stm32f4xx_tim.c ****   *            + Clocks management
  15:./Lib/Src/stm32f4xx_tim.c ****   *            + Synchronization management
  16:./Lib/Src/stm32f4xx_tim.c ****   *            + Specific interface management
  17:./Lib/Src/stm32f4xx_tim.c ****   *            + Specific remapping management      
  18:./Lib/Src/stm32f4xx_tim.c ****   *              
  19:./Lib/Src/stm32f4xx_tim.c ****   @verbatim   
  20:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
  21:./Lib/Src/stm32f4xx_tim.c ****                    #####  How to use this driver #####
  22:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
  23:./Lib/Src/stm32f4xx_tim.c ****     [..]
  24:./Lib/Src/stm32f4xx_tim.c ****     This driver provides functions to configure and program the TIM 
  25:./Lib/Src/stm32f4xx_tim.c ****     of all STM32F4xx devices.
  26:./Lib/Src/stm32f4xx_tim.c ****     These functions are split in 9 groups: 
  27:./Lib/Src/stm32f4xx_tim.c ****      
  28:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM TimeBase management: this group includes all needed functions 
  29:./Lib/Src/stm32f4xx_tim.c ****           to configure the TM Timebase unit:
  30:./Lib/Src/stm32f4xx_tim.c ****         (++) Set/Get Prescaler
ARM GAS  /tmp/ccOaESyR.s 			page 2


  31:./Lib/Src/stm32f4xx_tim.c ****         (++) Set/Get Autoreload  
  32:./Lib/Src/stm32f4xx_tim.c ****         (++) Counter modes configuration
  33:./Lib/Src/stm32f4xx_tim.c ****         (++) Set Clock division  
  34:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the One Pulse mode
  35:./Lib/Src/stm32f4xx_tim.c ****         (++) Update Request Configuration
  36:./Lib/Src/stm32f4xx_tim.c ****         (++) Update Disable Configuration
  37:./Lib/Src/stm32f4xx_tim.c ****         (++) Auto-Preload Configuration 
  38:./Lib/Src/stm32f4xx_tim.c ****         (++) Enable/Disable the counter     
  39:./Lib/Src/stm32f4xx_tim.c ****                    
  40:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM Output Compare management: this group includes all needed 
  41:./Lib/Src/stm32f4xx_tim.c ****           functions to configure the Capture/Compare unit used in Output 
  42:./Lib/Src/stm32f4xx_tim.c ****           compare mode: 
  43:./Lib/Src/stm32f4xx_tim.c ****         (++) Configure each channel, independently, in Output Compare mode
  44:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the output compare modes
  45:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the Polarities of each channel
  46:./Lib/Src/stm32f4xx_tim.c ****         (++) Set/Get the Capture/Compare register values
  47:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the Output Compare Fast mode 
  48:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the Output Compare Forced mode  
  49:./Lib/Src/stm32f4xx_tim.c ****         (++) Output Compare-Preload Configuration 
  50:./Lib/Src/stm32f4xx_tim.c ****         (++) Clear Output Compare Reference
  51:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the OCREF Clear signal
  52:./Lib/Src/stm32f4xx_tim.c ****         (++) Enable/Disable the Capture/Compare Channels    
  53:./Lib/Src/stm32f4xx_tim.c ****                      
  54:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM Input Capture management: this group includes all needed 
  55:./Lib/Src/stm32f4xx_tim.c ****           functions to configure the Capture/Compare unit used in 
  56:./Lib/Src/stm32f4xx_tim.c ****           Input Capture mode:
  57:./Lib/Src/stm32f4xx_tim.c ****         (++) Configure each channel in input capture mode
  58:./Lib/Src/stm32f4xx_tim.c ****         (++) Configure Channel1/2 in PWM Input mode
  59:./Lib/Src/stm32f4xx_tim.c ****         (++) Set the Input Capture Prescaler
  60:./Lib/Src/stm32f4xx_tim.c ****         (++) Get the Capture/Compare values      
  61:./Lib/Src/stm32f4xx_tim.c ****                      
  62:./Lib/Src/stm32f4xx_tim.c ****       (#) Advanced-control timers (TIM1 and TIM8) specific features
  63:./Lib/Src/stm32f4xx_tim.c ****         (++) Configures the Break input, dead time, Lock level, the OSSI,
  64:./Lib/Src/stm32f4xx_tim.c ****              the OSSR State and the AOE(automatic output enable)
  65:./Lib/Src/stm32f4xx_tim.c ****         (++) Enable/Disable the TIM peripheral Main Outputs
  66:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the Commutation event
  67:./Lib/Src/stm32f4xx_tim.c ****         (++) Set/Reset the Capture Compare Preload Control bit
  68:./Lib/Src/stm32f4xx_tim.c ****                                 
  69:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM interrupts, DMA and flags management
  70:./Lib/Src/stm32f4xx_tim.c ****         (++) Enable/Disable interrupt sources
  71:./Lib/Src/stm32f4xx_tim.c ****         (++) Get flags status
  72:./Lib/Src/stm32f4xx_tim.c ****         (++) Clear flags/ Pending bits
  73:./Lib/Src/stm32f4xx_tim.c ****         (++) Enable/Disable DMA requests 
  74:./Lib/Src/stm32f4xx_tim.c ****         (++) Configure DMA burst mode
  75:./Lib/Src/stm32f4xx_tim.c ****         (++) Select CaptureCompare DMA request  
  76:./Lib/Src/stm32f4xx_tim.c ****                 
  77:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM clocks management: this group includes all needed functions 
  78:./Lib/Src/stm32f4xx_tim.c ****           to configure the clock controller unit:
  79:./Lib/Src/stm32f4xx_tim.c ****         (++) Select internal/External clock
  80:./Lib/Src/stm32f4xx_tim.c ****         (++) Select the external clock mode: ETR(Mode1/Mode2), TIx or ITRx
  81:./Lib/Src/stm32f4xx_tim.c ****            
  82:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM synchronization management: this group includes all needed 
  83:./Lib/Src/stm32f4xx_tim.c ****           functions to configure the Synchronization unit:
  84:./Lib/Src/stm32f4xx_tim.c ****         (++) Select Input Trigger  
  85:./Lib/Src/stm32f4xx_tim.c ****         (++) Select Output Trigger  
  86:./Lib/Src/stm32f4xx_tim.c ****         (++) Select Master Slave Mode 
  87:./Lib/Src/stm32f4xx_tim.c ****         (++) ETR Configuration when used as external trigger   
ARM GAS  /tmp/ccOaESyR.s 			page 3


  88:./Lib/Src/stm32f4xx_tim.c ****        
  89:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM specific interface management, this group includes all 
  90:./Lib/Src/stm32f4xx_tim.c ****           needed functions to use the specific TIM interface:
  91:./Lib/Src/stm32f4xx_tim.c ****         (++) Encoder Interface Configuration
  92:./Lib/Src/stm32f4xx_tim.c ****         (++) Select Hall Sensor   
  93:./Lib/Src/stm32f4xx_tim.c ****            
  94:./Lib/Src/stm32f4xx_tim.c ****       (#) TIM specific remapping management includes the Remapping 
  95:./Lib/Src/stm32f4xx_tim.c ****           configuration of specific timers               
  96:./Lib/Src/stm32f4xx_tim.c ****      
  97:./Lib/Src/stm32f4xx_tim.c ****   @endverbatim    
  98:./Lib/Src/stm32f4xx_tim.c ****   ******************************************************************************
  99:./Lib/Src/stm32f4xx_tim.c ****   * @attention
 100:./Lib/Src/stm32f4xx_tim.c ****   *
 101:./Lib/Src/stm32f4xx_tim.c ****   * Copyright (c) 2016 STMicroelectronics.
 102:./Lib/Src/stm32f4xx_tim.c ****   * All rights reserved.
 103:./Lib/Src/stm32f4xx_tim.c ****   *
 104:./Lib/Src/stm32f4xx_tim.c ****   * This software is licensed under terms that can be found in the LICENSE file
 105:./Lib/Src/stm32f4xx_tim.c ****   * in the root directory of this software component.
 106:./Lib/Src/stm32f4xx_tim.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 107:./Lib/Src/stm32f4xx_tim.c ****   *
 108:./Lib/Src/stm32f4xx_tim.c ****   ******************************************************************************
 109:./Lib/Src/stm32f4xx_tim.c ****   */
 110:./Lib/Src/stm32f4xx_tim.c **** 
 111:./Lib/Src/stm32f4xx_tim.c **** /* Includes ------------------------------------------------------------------*/
 112:./Lib/Src/stm32f4xx_tim.c **** #include "stm32f4xx_tim.h"
 113:./Lib/Src/stm32f4xx_tim.c **** #include "stm32f4xx_rcc.h"
 114:./Lib/Src/stm32f4xx_tim.c **** 
 115:./Lib/Src/stm32f4xx_tim.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 116:./Lib/Src/stm32f4xx_tim.c ****   * @{
 117:./Lib/Src/stm32f4xx_tim.c ****   */
 118:./Lib/Src/stm32f4xx_tim.c **** 
 119:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM 
 120:./Lib/Src/stm32f4xx_tim.c ****   * @brief TIM driver modules
 121:./Lib/Src/stm32f4xx_tim.c ****   * @{
 122:./Lib/Src/stm32f4xx_tim.c ****   */
 123:./Lib/Src/stm32f4xx_tim.c **** 
 124:./Lib/Src/stm32f4xx_tim.c **** /* Private typedef -----------------------------------------------------------*/
 125:./Lib/Src/stm32f4xx_tim.c **** /* Private define ------------------------------------------------------------*/
 126:./Lib/Src/stm32f4xx_tim.c **** 
 127:./Lib/Src/stm32f4xx_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
 128:./Lib/Src/stm32f4xx_tim.c **** #define SMCR_ETR_MASK      ((uint16_t)0x00FF) 
 129:./Lib/Src/stm32f4xx_tim.c **** #define CCMR_OFFSET        ((uint16_t)0x0018)
 130:./Lib/Src/stm32f4xx_tim.c **** #define CCER_CCE_SET       ((uint16_t)0x0001)  
 131:./Lib/Src/stm32f4xx_tim.c **** #define	CCER_CCNE_SET      ((uint16_t)0x0004) 
 132:./Lib/Src/stm32f4xx_tim.c **** #define CCMR_OC13M_MASK    ((uint16_t)0xFF8F)
 133:./Lib/Src/stm32f4xx_tim.c **** #define CCMR_OC24M_MASK    ((uint16_t)0x8FFF) 
 134:./Lib/Src/stm32f4xx_tim.c **** 
 135:./Lib/Src/stm32f4xx_tim.c **** /* Private macro -------------------------------------------------------------*/
 136:./Lib/Src/stm32f4xx_tim.c **** /* Private variables ---------------------------------------------------------*/
 137:./Lib/Src/stm32f4xx_tim.c **** /* Private function prototypes -----------------------------------------------*/
 138:./Lib/Src/stm32f4xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 139:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 140:./Lib/Src/stm32f4xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 141:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 142:./Lib/Src/stm32f4xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
 143:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 144:./Lib/Src/stm32f4xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
ARM GAS  /tmp/ccOaESyR.s 			page 4


 145:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter);
 146:./Lib/Src/stm32f4xx_tim.c **** 
 147:./Lib/Src/stm32f4xx_tim.c **** /* Private functions ---------------------------------------------------------*/
 148:./Lib/Src/stm32f4xx_tim.c **** 
 149:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Private_Functions
 150:./Lib/Src/stm32f4xx_tim.c ****   * @{
 151:./Lib/Src/stm32f4xx_tim.c ****   */
 152:./Lib/Src/stm32f4xx_tim.c **** 
 153:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group1 TimeBase management functions
 154:./Lib/Src/stm32f4xx_tim.c ****  *  @brief   TimeBase management functions 
 155:./Lib/Src/stm32f4xx_tim.c ****  *
 156:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
 157:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
 158:./Lib/Src/stm32f4xx_tim.c ****                      ##### TimeBase management functions #####
 159:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
 160:./Lib/Src/stm32f4xx_tim.c ****   
 161:./Lib/Src/stm32f4xx_tim.c ****      
 162:./Lib/Src/stm32f4xx_tim.c ****             ##### TIM Driver: how to use it in Timing(Time base) Mode #####
 163:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
 164:./Lib/Src/stm32f4xx_tim.c ****     [..] 
 165:./Lib/Src/stm32f4xx_tim.c ****     To use the Timer in Timing(Time base) mode, the following steps are mandatory:
 166:./Lib/Src/stm32f4xx_tim.c ****        
 167:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) function
 168:./Lib/Src/stm32f4xx_tim.c ****                     
 169:./Lib/Src/stm32f4xx_tim.c ****       (#) Fill the TIM_TimeBaseInitStruct with the desired parameters.
 170:./Lib/Src/stm32f4xx_tim.c ****        
 171:./Lib/Src/stm32f4xx_tim.c ****       (#) Call TIM_TimeBaseInit(TIMx, &TIM_TimeBaseInitStruct) to configure the Time Base unit
 172:./Lib/Src/stm32f4xx_tim.c ****           with the corresponding configuration
 173:./Lib/Src/stm32f4xx_tim.c ****           
 174:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable the NVIC if you need to generate the update interrupt. 
 175:./Lib/Src/stm32f4xx_tim.c ****           
 176:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable the corresponding interrupt using the function TIM_ITConfig(TIMx, TIM_IT_Update) 
 177:./Lib/Src/stm32f4xx_tim.c ****        
 178:./Lib/Src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 179:./Lib/Src/stm32f4xx_tim.c ****              
 180:./Lib/Src/stm32f4xx_tim.c ****        -@- All other functions can be used separately to modify, if needed,
 181:./Lib/Src/stm32f4xx_tim.c ****            a specific feature of the Timer. 
 182:./Lib/Src/stm32f4xx_tim.c **** 
 183:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
 184:./Lib/Src/stm32f4xx_tim.c ****   * @{
 185:./Lib/Src/stm32f4xx_tim.c ****   */
 186:./Lib/Src/stm32f4xx_tim.c ****   
 187:./Lib/Src/stm32f4xx_tim.c **** /**
 188:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 189:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 190:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 191:./Lib/Src/stm32f4xx_tim.c **** 
 192:./Lib/Src/stm32f4xx_tim.c ****   */
 193:./Lib/Src/stm32f4xx_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 194:./Lib/Src/stm32f4xx_tim.c **** {
  29              		.loc 1 194 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
ARM GAS  /tmp/ccOaESyR.s 			page 5


  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 195:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 196:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 197:./Lib/Src/stm32f4xx_tim.c ****  
 198:./Lib/Src/stm32f4xx_tim.c ****   if (TIMx == TIM1)
  42              		.loc 1 198 6
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 604A     		ldr	r2, .L17
  45 000c 9342     		cmp	r3, r2
  46 000e 08D1     		bne	.L2
 199:./Lib/Src/stm32f4xx_tim.c ****   {
 200:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
  47              		.loc 1 200 5
  48 0010 0121     		movs	r1, #1
  49 0012 0120     		movs	r0, #1
  50 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 201:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  51              		.loc 1 201 5
  52 0018 0021     		movs	r1, #0
  53 001a 0120     		movs	r0, #1
  54 001c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 202:./Lib/Src/stm32f4xx_tim.c ****   } 
 203:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM2) 
 204:./Lib/Src/stm32f4xx_tim.c ****   {     
 205:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 206:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 207:./Lib/Src/stm32f4xx_tim.c ****   }  
 208:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM3)
 209:./Lib/Src/stm32f4xx_tim.c ****   { 
 210:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 211:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 212:./Lib/Src/stm32f4xx_tim.c ****   }  
 213:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM4)
 214:./Lib/Src/stm32f4xx_tim.c ****   { 
 215:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 216:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 217:./Lib/Src/stm32f4xx_tim.c ****   }  
 218:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM5)
 219:./Lib/Src/stm32f4xx_tim.c ****   {      
 220:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 221:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 222:./Lib/Src/stm32f4xx_tim.c ****   }  
 223:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM6)  
 224:./Lib/Src/stm32f4xx_tim.c ****   {    
 225:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 226:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 227:./Lib/Src/stm32f4xx_tim.c ****   }  
 228:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM7)
 229:./Lib/Src/stm32f4xx_tim.c ****   {      
 230:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 231:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 232:./Lib/Src/stm32f4xx_tim.c ****   }  
ARM GAS  /tmp/ccOaESyR.s 			page 6


 233:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM8)
 234:./Lib/Src/stm32f4xx_tim.c ****   {      
 235:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 236:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 237:./Lib/Src/stm32f4xx_tim.c ****   }  
 238:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM9)
 239:./Lib/Src/stm32f4xx_tim.c ****   {      
 240:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 241:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 242:./Lib/Src/stm32f4xx_tim.c ****    }  
 243:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM10)
 244:./Lib/Src/stm32f4xx_tim.c ****   {      
 245:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 246:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 247:./Lib/Src/stm32f4xx_tim.c ****   }  
 248:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM11) 
 249:./Lib/Src/stm32f4xx_tim.c ****   {     
 250:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 251:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 252:./Lib/Src/stm32f4xx_tim.c ****   }  
 253:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM12)
 254:./Lib/Src/stm32f4xx_tim.c ****   {      
 255:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 256:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 257:./Lib/Src/stm32f4xx_tim.c ****   }  
 258:./Lib/Src/stm32f4xx_tim.c ****   else if (TIMx == TIM13) 
 259:./Lib/Src/stm32f4xx_tim.c ****   {       
 260:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 261:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 262:./Lib/Src/stm32f4xx_tim.c ****   }  
 263:./Lib/Src/stm32f4xx_tim.c ****   else
 264:./Lib/Src/stm32f4xx_tim.c ****   { 
 265:./Lib/Src/stm32f4xx_tim.c ****     if (TIMx == TIM14) 
 266:./Lib/Src/stm32f4xx_tim.c ****     {     
 267:./Lib/Src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 268:./Lib/Src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 269:./Lib/Src/stm32f4xx_tim.c ****     }   
 270:./Lib/Src/stm32f4xx_tim.c ****   }
 271:./Lib/Src/stm32f4xx_tim.c **** }
  55              		.loc 1 271 1
  56 0020 AFE0     		b	.L16
  57              	.L2:
 203:./Lib/Src/stm32f4xx_tim.c ****   {     
  58              		.loc 1 203 11
  59 0022 7B68     		ldr	r3, [r7, #4]
  60 0024 B3F1804F 		cmp	r3, #1073741824
  61 0028 08D1     		bne	.L4
 205:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  62              		.loc 1 205 5
  63 002a 0121     		movs	r1, #1
  64 002c 0120     		movs	r0, #1
  65 002e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:./Lib/Src/stm32f4xx_tim.c ****   }  
  66              		.loc 1 206 5
  67 0032 0021     		movs	r1, #0
  68 0034 0120     		movs	r0, #1
  69 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/ccOaESyR.s 			page 7


  70              		.loc 1 271 1
  71 003a A2E0     		b	.L16
  72              	.L4:
 208:./Lib/Src/stm32f4xx_tim.c ****   { 
  73              		.loc 1 208 11
  74 003c 7B68     		ldr	r3, [r7, #4]
  75 003e 544A     		ldr	r2, .L17+4
  76 0040 9342     		cmp	r3, r2
  77 0042 08D1     		bne	.L5
 210:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  78              		.loc 1 210 5
  79 0044 0121     		movs	r1, #1
  80 0046 0220     		movs	r0, #2
  81 0048 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 211:./Lib/Src/stm32f4xx_tim.c ****   }  
  82              		.loc 1 211 5
  83 004c 0021     		movs	r1, #0
  84 004e 0220     		movs	r0, #2
  85 0050 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  86              		.loc 1 271 1
  87 0054 95E0     		b	.L16
  88              	.L5:
 213:./Lib/Src/stm32f4xx_tim.c ****   { 
  89              		.loc 1 213 11
  90 0056 7B68     		ldr	r3, [r7, #4]
  91 0058 4E4A     		ldr	r2, .L17+8
  92 005a 9342     		cmp	r3, r2
  93 005c 08D1     		bne	.L6
 215:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  94              		.loc 1 215 5
  95 005e 0121     		movs	r1, #1
  96 0060 0420     		movs	r0, #4
  97 0062 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 216:./Lib/Src/stm32f4xx_tim.c ****   }  
  98              		.loc 1 216 5
  99 0066 0021     		movs	r1, #0
 100 0068 0420     		movs	r0, #4
 101 006a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 102              		.loc 1 271 1
 103 006e 88E0     		b	.L16
 104              	.L6:
 218:./Lib/Src/stm32f4xx_tim.c ****   {      
 105              		.loc 1 218 11
 106 0070 7B68     		ldr	r3, [r7, #4]
 107 0072 494A     		ldr	r2, .L17+12
 108 0074 9342     		cmp	r3, r2
 109 0076 08D1     		bne	.L7
 220:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 110              		.loc 1 220 5
 111 0078 0121     		movs	r1, #1
 112 007a 0820     		movs	r0, #8
 113 007c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 221:./Lib/Src/stm32f4xx_tim.c ****   }  
 114              		.loc 1 221 5
 115 0080 0021     		movs	r1, #0
 116 0082 0820     		movs	r0, #8
 117 0084 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/ccOaESyR.s 			page 8


 118              		.loc 1 271 1
 119 0088 7BE0     		b	.L16
 120              	.L7:
 223:./Lib/Src/stm32f4xx_tim.c ****   {    
 121              		.loc 1 223 11
 122 008a 7B68     		ldr	r3, [r7, #4]
 123 008c 434A     		ldr	r2, .L17+16
 124 008e 9342     		cmp	r3, r2
 125 0090 08D1     		bne	.L8
 225:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 126              		.loc 1 225 5
 127 0092 0121     		movs	r1, #1
 128 0094 1020     		movs	r0, #16
 129 0096 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 226:./Lib/Src/stm32f4xx_tim.c ****   }  
 130              		.loc 1 226 5
 131 009a 0021     		movs	r1, #0
 132 009c 1020     		movs	r0, #16
 133 009e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 134              		.loc 1 271 1
 135 00a2 6EE0     		b	.L16
 136              	.L8:
 228:./Lib/Src/stm32f4xx_tim.c ****   {      
 137              		.loc 1 228 11
 138 00a4 7B68     		ldr	r3, [r7, #4]
 139 00a6 3E4A     		ldr	r2, .L17+20
 140 00a8 9342     		cmp	r3, r2
 141 00aa 08D1     		bne	.L9
 230:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 142              		.loc 1 230 5
 143 00ac 0121     		movs	r1, #1
 144 00ae 2020     		movs	r0, #32
 145 00b0 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 231:./Lib/Src/stm32f4xx_tim.c ****   }  
 146              		.loc 1 231 5
 147 00b4 0021     		movs	r1, #0
 148 00b6 2020     		movs	r0, #32
 149 00b8 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 150              		.loc 1 271 1
 151 00bc 61E0     		b	.L16
 152              	.L9:
 233:./Lib/Src/stm32f4xx_tim.c ****   {      
 153              		.loc 1 233 11
 154 00be 7B68     		ldr	r3, [r7, #4]
 155 00c0 384A     		ldr	r2, .L17+24
 156 00c2 9342     		cmp	r3, r2
 157 00c4 08D1     		bne	.L10
 235:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 158              		.loc 1 235 5
 159 00c6 0121     		movs	r1, #1
 160 00c8 0220     		movs	r0, #2
 161 00ca FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 236:./Lib/Src/stm32f4xx_tim.c ****   }  
 162              		.loc 1 236 5
 163 00ce 0021     		movs	r1, #0
 164 00d0 0220     		movs	r0, #2
 165 00d2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
ARM GAS  /tmp/ccOaESyR.s 			page 9


 166              		.loc 1 271 1
 167 00d6 54E0     		b	.L16
 168              	.L10:
 238:./Lib/Src/stm32f4xx_tim.c ****   {      
 169              		.loc 1 238 11
 170 00d8 7B68     		ldr	r3, [r7, #4]
 171 00da 334A     		ldr	r2, .L17+28
 172 00dc 9342     		cmp	r3, r2
 173 00de 0AD1     		bne	.L11
 240:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 174              		.loc 1 240 5
 175 00e0 0121     		movs	r1, #1
 176 00e2 4FF48030 		mov	r0, #65536
 177 00e6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 241:./Lib/Src/stm32f4xx_tim.c ****    }  
 178              		.loc 1 241 5
 179 00ea 0021     		movs	r1, #0
 180 00ec 4FF48030 		mov	r0, #65536
 181 00f0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 182              		.loc 1 271 1
 183 00f4 45E0     		b	.L16
 184              	.L11:
 243:./Lib/Src/stm32f4xx_tim.c ****   {      
 185              		.loc 1 243 11
 186 00f6 7B68     		ldr	r3, [r7, #4]
 187 00f8 2C4A     		ldr	r2, .L17+32
 188 00fa 9342     		cmp	r3, r2
 189 00fc 0AD1     		bne	.L12
 245:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 190              		.loc 1 245 5
 191 00fe 0121     		movs	r1, #1
 192 0100 4FF40030 		mov	r0, #131072
 193 0104 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 246:./Lib/Src/stm32f4xx_tim.c ****   }  
 194              		.loc 1 246 5
 195 0108 0021     		movs	r1, #0
 196 010a 4FF40030 		mov	r0, #131072
 197 010e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 198              		.loc 1 271 1
 199 0112 36E0     		b	.L16
 200              	.L12:
 248:./Lib/Src/stm32f4xx_tim.c ****   {     
 201              		.loc 1 248 11
 202 0114 7B68     		ldr	r3, [r7, #4]
 203 0116 264A     		ldr	r2, .L17+36
 204 0118 9342     		cmp	r3, r2
 205 011a 0AD1     		bne	.L13
 250:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 206              		.loc 1 250 5
 207 011c 0121     		movs	r1, #1
 208 011e 4FF48020 		mov	r0, #262144
 209 0122 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 251:./Lib/Src/stm32f4xx_tim.c ****   }  
 210              		.loc 1 251 5
 211 0126 0021     		movs	r1, #0
 212 0128 4FF48020 		mov	r0, #262144
 213 012c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
ARM GAS  /tmp/ccOaESyR.s 			page 10


 214              		.loc 1 271 1
 215 0130 27E0     		b	.L16
 216              	.L13:
 253:./Lib/Src/stm32f4xx_tim.c ****   {      
 217              		.loc 1 253 11
 218 0132 7B68     		ldr	r3, [r7, #4]
 219 0134 1F4A     		ldr	r2, .L17+40
 220 0136 9342     		cmp	r3, r2
 221 0138 08D1     		bne	.L14
 255:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 222              		.loc 1 255 5
 223 013a 0121     		movs	r1, #1
 224 013c 4020     		movs	r0, #64
 225 013e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 256:./Lib/Src/stm32f4xx_tim.c ****   }  
 226              		.loc 1 256 5
 227 0142 0021     		movs	r1, #0
 228 0144 4020     		movs	r0, #64
 229 0146 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 230              		.loc 1 271 1
 231 014a 1AE0     		b	.L16
 232              	.L14:
 258:./Lib/Src/stm32f4xx_tim.c ****   {       
 233              		.loc 1 258 11
 234 014c 7B68     		ldr	r3, [r7, #4]
 235 014e 1A4A     		ldr	r2, .L17+44
 236 0150 9342     		cmp	r3, r2
 237 0152 08D1     		bne	.L15
 260:./Lib/Src/stm32f4xx_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 238              		.loc 1 260 5
 239 0154 0121     		movs	r1, #1
 240 0156 8020     		movs	r0, #128
 241 0158 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 261:./Lib/Src/stm32f4xx_tim.c ****   }  
 242              		.loc 1 261 5
 243 015c 0021     		movs	r1, #0
 244 015e 8020     		movs	r0, #128
 245 0160 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 246              		.loc 1 271 1
 247 0164 0DE0     		b	.L16
 248              	.L15:
 265:./Lib/Src/stm32f4xx_tim.c ****     {     
 249              		.loc 1 265 8
 250 0166 7B68     		ldr	r3, [r7, #4]
 251 0168 144A     		ldr	r2, .L17+48
 252 016a 9342     		cmp	r3, r2
 253 016c 09D1     		bne	.L16
 267:./Lib/Src/stm32f4xx_tim.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 254              		.loc 1 267 7
 255 016e 0121     		movs	r1, #1
 256 0170 4FF48070 		mov	r0, #256
 257 0174 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 268:./Lib/Src/stm32f4xx_tim.c ****     }   
 258              		.loc 1 268 7
 259 0178 0021     		movs	r1, #0
 260 017a 4FF48070 		mov	r0, #256
 261 017e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/ccOaESyR.s 			page 11


 262              	.L16:
 263              		.loc 1 271 1
 264 0182 00BF     		nop
 265 0184 0837     		adds	r7, r7, #8
 266              		.cfi_def_cfa_offset 8
 267 0186 BD46     		mov	sp, r7
 268              		.cfi_def_cfa_register 13
 269              		@ sp needed
 270 0188 80BD     		pop	{r7, pc}
 271              	.L18:
 272 018a 00BF     		.align	2
 273              	.L17:
 274 018c 00000140 		.word	1073807360
 275 0190 00040040 		.word	1073742848
 276 0194 00080040 		.word	1073743872
 277 0198 000C0040 		.word	1073744896
 278 019c 00100040 		.word	1073745920
 279 01a0 00140040 		.word	1073746944
 280 01a4 00040140 		.word	1073808384
 281 01a8 00400140 		.word	1073823744
 282 01ac 00440140 		.word	1073824768
 283 01b0 00480140 		.word	1073825792
 284 01b4 00180040 		.word	1073747968
 285 01b8 001C0040 		.word	1073748992
 286 01bc 00200040 		.word	1073750016
 287              		.cfi_endproc
 288              	.LFE123:
 290              		.section	.text.TIM_TimeBaseInit,"ax",%progbits
 291              		.align	1
 292              		.global	TIM_TimeBaseInit
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 297              	TIM_TimeBaseInit:
 298              	.LFB124:
 272:./Lib/Src/stm32f4xx_tim.c **** 
 273:./Lib/Src/stm32f4xx_tim.c **** /**
 274:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 275:./Lib/Src/stm32f4xx_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 276:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
 277:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
 278:./Lib/Src/stm32f4xx_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 279:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 280:./Lib/Src/stm32f4xx_tim.c ****   */
 281:./Lib/Src/stm32f4xx_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 282:./Lib/Src/stm32f4xx_tim.c **** {
 299              		.loc 1 282 1
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 16
 302              		@ frame_needed = 1, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 304 0000 80B4     		push	{r7}
 305              		.cfi_def_cfa_offset 4
 306              		.cfi_offset 7, -4
 307 0002 85B0     		sub	sp, sp, #20
 308              		.cfi_def_cfa_offset 24
 309 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccOaESyR.s 			page 12


 310              		.cfi_def_cfa_register 7
 311 0006 7860     		str	r0, [r7, #4]
 312 0008 3960     		str	r1, [r7]
 283:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 313              		.loc 1 283 12
 314 000a 0023     		movs	r3, #0
 315 000c FB81     		strh	r3, [r7, #14]	@ movhi
 284:./Lib/Src/stm32f4xx_tim.c **** 
 285:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 286:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 287:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 288:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 289:./Lib/Src/stm32f4xx_tim.c **** 
 290:./Lib/Src/stm32f4xx_tim.c ****   tmpcr1 = TIMx->CR1;  
 316              		.loc 1 290 10
 317 000e 7B68     		ldr	r3, [r7, #4]
 318 0010 1B88     		ldrh	r3, [r3]	@ movhi
 319 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 291:./Lib/Src/stm32f4xx_tim.c **** 
 292:./Lib/Src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8)||
 320              		.loc 1 292 5
 321 0014 7B68     		ldr	r3, [r7, #4]
 322 0016 294A     		ldr	r2, .L25
 323 0018 9342     		cmp	r3, r2
 324 001a 13D0     		beq	.L20
 325              		.loc 1 292 21 discriminator 1
 326 001c 7B68     		ldr	r3, [r7, #4]
 327 001e 284A     		ldr	r2, .L25+4
 328 0020 9342     		cmp	r3, r2
 329 0022 0FD0     		beq	.L20
 330              		.loc 1 292 38 discriminator 2
 331 0024 7B68     		ldr	r3, [r7, #4]
 332 0026 B3F1804F 		cmp	r3, #1073741824
 333 002a 0BD0     		beq	.L20
 293:./Lib/Src/stm32f4xx_tim.c ****      (TIMx == TIM2) || (TIMx == TIM3)||
 334              		.loc 1 293 21
 335 002c 7B68     		ldr	r3, [r7, #4]
 336 002e 254A     		ldr	r2, .L25+8
 337 0030 9342     		cmp	r3, r2
 338 0032 07D0     		beq	.L20
 339              		.loc 1 293 38 discriminator 1
 340 0034 7B68     		ldr	r3, [r7, #4]
 341 0036 244A     		ldr	r2, .L25+12
 342 0038 9342     		cmp	r3, r2
 343 003a 03D0     		beq	.L20
 294:./Lib/Src/stm32f4xx_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 344              		.loc 1 294 21
 345 003c 7B68     		ldr	r3, [r7, #4]
 346 003e 234A     		ldr	r2, .L25+16
 347 0040 9342     		cmp	r3, r2
 348 0042 08D1     		bne	.L21
 349              	.L20:
 295:./Lib/Src/stm32f4xx_tim.c ****   {
 296:./Lib/Src/stm32f4xx_tim.c ****     /* Select the Counter Mode */
 297:./Lib/Src/stm32f4xx_tim.c ****     tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 350              		.loc 1 297 12
 351 0044 FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 13


 352 0046 23F07003 		bic	r3, r3, #112
 353 004a FB81     		strh	r3, [r7, #14]	@ movhi
 298:./Lib/Src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 354              		.loc 1 298 47
 355 004c 3B68     		ldr	r3, [r7]
 356 004e 5A88     		ldrh	r2, [r3, #2]
 357              		.loc 1 298 12
 358 0050 FB89     		ldrh	r3, [r7, #14]	@ movhi
 359 0052 1343     		orrs	r3, r3, r2
 360 0054 FB81     		strh	r3, [r7, #14]	@ movhi
 361              	.L21:
 299:./Lib/Src/stm32f4xx_tim.c ****   }
 300:./Lib/Src/stm32f4xx_tim.c ****  
 301:./Lib/Src/stm32f4xx_tim.c ****   if((TIMx != TIM6) && (TIMx != TIM7))
 362              		.loc 1 301 5
 363 0056 7B68     		ldr	r3, [r7, #4]
 364 0058 1D4A     		ldr	r2, .L25+20
 365 005a 9342     		cmp	r3, r2
 366 005c 0CD0     		beq	.L22
 367              		.loc 1 301 21 discriminator 1
 368 005e 7B68     		ldr	r3, [r7, #4]
 369 0060 1C4A     		ldr	r2, .L25+24
 370 0062 9342     		cmp	r3, r2
 371 0064 08D0     		beq	.L22
 302:./Lib/Src/stm32f4xx_tim.c ****   {
 303:./Lib/Src/stm32f4xx_tim.c ****     /* Set the clock division */
 304:./Lib/Src/stm32f4xx_tim.c ****     tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 372              		.loc 1 304 12
 373 0066 FB89     		ldrh	r3, [r7, #14]	@ movhi
 374 0068 23F44073 		bic	r3, r3, #768
 375 006c FB81     		strh	r3, [r7, #14]	@ movhi
 305:./Lib/Src/stm32f4xx_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 376              		.loc 1 305 47
 377 006e 3B68     		ldr	r3, [r7]
 378 0070 1A89     		ldrh	r2, [r3, #8]
 379              		.loc 1 305 12
 380 0072 FB89     		ldrh	r3, [r7, #14]	@ movhi
 381 0074 1343     		orrs	r3, r3, r2
 382 0076 FB81     		strh	r3, [r7, #14]	@ movhi
 383              	.L22:
 306:./Lib/Src/stm32f4xx_tim.c ****   }
 307:./Lib/Src/stm32f4xx_tim.c **** 
 308:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR1 = tmpcr1;
 384              		.loc 1 308 13
 385 0078 7B68     		ldr	r3, [r7, #4]
 386 007a FA89     		ldrh	r2, [r7, #14]	@ movhi
 387 007c 1A80     		strh	r2, [r3]	@ movhi
 309:./Lib/Src/stm32f4xx_tim.c **** 
 310:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Autoreload value */
 311:./Lib/Src/stm32f4xx_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 388              		.loc 1 311 37
 389 007e 3B68     		ldr	r3, [r7]
 390 0080 5A68     		ldr	r2, [r3, #4]
 391              		.loc 1 311 13
 392 0082 7B68     		ldr	r3, [r7, #4]
 393 0084 DA62     		str	r2, [r3, #44]
 312:./Lib/Src/stm32f4xx_tim.c ****  
ARM GAS  /tmp/ccOaESyR.s 			page 14


 313:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Prescaler value */
 314:./Lib/Src/stm32f4xx_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 394              		.loc 1 314 37
 395 0086 3B68     		ldr	r3, [r7]
 396 0088 1A88     		ldrh	r2, [r3]
 397              		.loc 1 314 13
 398 008a 7B68     		ldr	r3, [r7, #4]
 399 008c 1A85     		strh	r2, [r3, #40]	@ movhi
 315:./Lib/Src/stm32f4xx_tim.c ****     
 316:./Lib/Src/stm32f4xx_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM8))  
 400              		.loc 1 316 6
 401 008e 7B68     		ldr	r3, [r7, #4]
 402 0090 0A4A     		ldr	r2, .L25
 403 0092 9342     		cmp	r3, r2
 404 0094 03D0     		beq	.L23
 405              		.loc 1 316 22 discriminator 1
 406 0096 7B68     		ldr	r3, [r7, #4]
 407 0098 094A     		ldr	r2, .L25+4
 408 009a 9342     		cmp	r3, r2
 409 009c 04D1     		bne	.L24
 410              	.L23:
 317:./Lib/Src/stm32f4xx_tim.c ****   {
 318:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Repetition Counter value */
 319:./Lib/Src/stm32f4xx_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 411              		.loc 1 319 39
 412 009e 3B68     		ldr	r3, [r7]
 413 00a0 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 414 00a2 1A46     		mov	r2, r3
 415              		.loc 1 319 15
 416 00a4 7B68     		ldr	r3, [r7, #4]
 417 00a6 1A86     		strh	r2, [r3, #48]	@ movhi
 418              	.L24:
 320:./Lib/Src/stm32f4xx_tim.c ****   }
 321:./Lib/Src/stm32f4xx_tim.c **** 
 322:./Lib/Src/stm32f4xx_tim.c ****   /* Generate an update event to reload the Prescaler 
 323:./Lib/Src/stm32f4xx_tim.c ****      and the repetition counter(only for TIM1 and TIM8) value immediately */
 324:./Lib/Src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 419              		.loc 1 324 13
 420 00a8 7B68     		ldr	r3, [r7, #4]
 421 00aa 0122     		movs	r2, #1
 422 00ac 9A82     		strh	r2, [r3, #20]	@ movhi
 325:./Lib/Src/stm32f4xx_tim.c **** }
 423              		.loc 1 325 1
 424 00ae 00BF     		nop
 425 00b0 1437     		adds	r7, r7, #20
 426              		.cfi_def_cfa_offset 4
 427 00b2 BD46     		mov	sp, r7
 428              		.cfi_def_cfa_register 13
 429              		@ sp needed
 430 00b4 5DF8047B 		ldr	r7, [sp], #4
 431              		.cfi_restore 7
 432              		.cfi_def_cfa_offset 0
 433 00b8 7047     		bx	lr
 434              	.L26:
 435 00ba 00BF     		.align	2
 436              	.L25:
 437 00bc 00000140 		.word	1073807360
ARM GAS  /tmp/ccOaESyR.s 			page 15


 438 00c0 00040140 		.word	1073808384
 439 00c4 00040040 		.word	1073742848
 440 00c8 00080040 		.word	1073743872
 441 00cc 000C0040 		.word	1073744896
 442 00d0 00100040 		.word	1073745920
 443 00d4 00140040 		.word	1073746944
 444              		.cfi_endproc
 445              	.LFE124:
 447              		.section	.text.TIM_TimeBaseStructInit,"ax",%progbits
 448              		.align	1
 449              		.global	TIM_TimeBaseStructInit
 450              		.syntax unified
 451              		.thumb
 452              		.thumb_func
 454              	TIM_TimeBaseStructInit:
 455              	.LFB125:
 326:./Lib/Src/stm32f4xx_tim.c **** 
 327:./Lib/Src/stm32f4xx_tim.c **** /**
 328:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 329:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
 330:./Lib/Src/stm32f4xx_tim.c ****   *         structure which will be initialized.
 331:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 332:./Lib/Src/stm32f4xx_tim.c ****   */
 333:./Lib/Src/stm32f4xx_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 334:./Lib/Src/stm32f4xx_tim.c **** {
 456              		.loc 1 334 1
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 8
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460              		@ link register save eliminated.
 461 0000 80B4     		push	{r7}
 462              		.cfi_def_cfa_offset 4
 463              		.cfi_offset 7, -4
 464 0002 83B0     		sub	sp, sp, #12
 465              		.cfi_def_cfa_offset 16
 466 0004 00AF     		add	r7, sp, #0
 467              		.cfi_def_cfa_register 7
 468 0006 7860     		str	r0, [r7, #4]
 335:./Lib/Src/stm32f4xx_tim.c ****   /* Set the default configuration */
 336:./Lib/Src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 469              		.loc 1 336 38
 470 0008 7B68     		ldr	r3, [r7, #4]
 471 000a 4FF0FF32 		mov	r2, #-1
 472 000e 5A60     		str	r2, [r3, #4]
 337:./Lib/Src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 473              		.loc 1 337 41
 474 0010 7B68     		ldr	r3, [r7, #4]
 475 0012 0022     		movs	r2, #0
 476 0014 1A80     		strh	r2, [r3]	@ movhi
 338:./Lib/Src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 477              		.loc 1 338 45
 478 0016 7B68     		ldr	r3, [r7, #4]
 479 0018 0022     		movs	r2, #0
 480 001a 1A81     		strh	r2, [r3, #8]	@ movhi
 339:./Lib/Src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 481              		.loc 1 339 43
 482 001c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccOaESyR.s 			page 16


 483 001e 0022     		movs	r2, #0
 484 0020 5A80     		strh	r2, [r3, #2]	@ movhi
 340:./Lib/Src/stm32f4xx_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 485              		.loc 1 340 49
 486 0022 7B68     		ldr	r3, [r7, #4]
 487 0024 0022     		movs	r2, #0
 488 0026 9A72     		strb	r2, [r3, #10]
 341:./Lib/Src/stm32f4xx_tim.c **** }
 489              		.loc 1 341 1
 490 0028 00BF     		nop
 491 002a 0C37     		adds	r7, r7, #12
 492              		.cfi_def_cfa_offset 4
 493 002c BD46     		mov	sp, r7
 494              		.cfi_def_cfa_register 13
 495              		@ sp needed
 496 002e 5DF8047B 		ldr	r7, [sp], #4
 497              		.cfi_restore 7
 498              		.cfi_def_cfa_offset 0
 499 0032 7047     		bx	lr
 500              		.cfi_endproc
 501              	.LFE125:
 503              		.section	.text.TIM_PrescalerConfig,"ax",%progbits
 504              		.align	1
 505              		.global	TIM_PrescalerConfig
 506              		.syntax unified
 507              		.thumb
 508              		.thumb_func
 510              	TIM_PrescalerConfig:
 511              	.LFB126:
 342:./Lib/Src/stm32f4xx_tim.c **** 
 343:./Lib/Src/stm32f4xx_tim.c **** /**
 344:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Prescaler.
 345:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 to 14 to select the TIM peripheral.
 346:./Lib/Src/stm32f4xx_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
 347:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
 348:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 349:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
 350:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
 351:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 352:./Lib/Src/stm32f4xx_tim.c ****   */
 353:./Lib/Src/stm32f4xx_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
 354:./Lib/Src/stm32f4xx_tim.c **** {
 512              		.loc 1 354 1
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 8
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517 0000 80B4     		push	{r7}
 518              		.cfi_def_cfa_offset 4
 519              		.cfi_offset 7, -4
 520 0002 83B0     		sub	sp, sp, #12
 521              		.cfi_def_cfa_offset 16
 522 0004 00AF     		add	r7, sp, #0
 523              		.cfi_def_cfa_register 7
 524 0006 7860     		str	r0, [r7, #4]
 525 0008 0B46     		mov	r3, r1
 526 000a 7B80     		strh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 17


 527 000c 1346     		mov	r3, r2	@ movhi
 528 000e 3B80     		strh	r3, [r7]	@ movhi
 355:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 356:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 357:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
 358:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Prescaler value */
 359:./Lib/Src/stm32f4xx_tim.c ****   TIMx->PSC = Prescaler;
 529              		.loc 1 359 13
 530 0010 7B68     		ldr	r3, [r7, #4]
 531 0012 7A88     		ldrh	r2, [r7, #2]	@ movhi
 532 0014 1A85     		strh	r2, [r3, #40]	@ movhi
 360:./Lib/Src/stm32f4xx_tim.c ****   /* Set or reset the UG Bit */
 361:./Lib/Src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 533              		.loc 1 361 13
 534 0016 7B68     		ldr	r3, [r7, #4]
 535 0018 3A88     		ldrh	r2, [r7]	@ movhi
 536 001a 9A82     		strh	r2, [r3, #20]	@ movhi
 362:./Lib/Src/stm32f4xx_tim.c **** }
 537              		.loc 1 362 1
 538 001c 00BF     		nop
 539 001e 0C37     		adds	r7, r7, #12
 540              		.cfi_def_cfa_offset 4
 541 0020 BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 0022 5DF8047B 		ldr	r7, [sp], #4
 545              		.cfi_restore 7
 546              		.cfi_def_cfa_offset 0
 547 0026 7047     		bx	lr
 548              		.cfi_endproc
 549              	.LFE126:
 551              		.section	.text.TIM_CounterModeConfig,"ax",%progbits
 552              		.align	1
 553              		.global	TIM_CounterModeConfig
 554              		.syntax unified
 555              		.thumb
 556              		.thumb_func
 558              	TIM_CounterModeConfig:
 559              	.LFB127:
 363:./Lib/Src/stm32f4xx_tim.c **** 
 364:./Lib/Src/stm32f4xx_tim.c **** /**
 365:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
 366:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 367:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
 368:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 369:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_Up: TIM Up Counting Mode
 370:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_Down: TIM Down Counting Mode
 371:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
 372:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
 373:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
 374:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 375:./Lib/Src/stm32f4xx_tim.c ****   */
 376:./Lib/Src/stm32f4xx_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
 377:./Lib/Src/stm32f4xx_tim.c **** {
 560              		.loc 1 377 1
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccOaESyR.s 			page 18


 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565 0000 80B4     		push	{r7}
 566              		.cfi_def_cfa_offset 4
 567              		.cfi_offset 7, -4
 568 0002 85B0     		sub	sp, sp, #20
 569              		.cfi_def_cfa_offset 24
 570 0004 00AF     		add	r7, sp, #0
 571              		.cfi_def_cfa_register 7
 572 0006 7860     		str	r0, [r7, #4]
 573 0008 0B46     		mov	r3, r1
 574 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 378:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpcr1 = 0;
 575              		.loc 1 378 12
 576 000c 0023     		movs	r3, #0
 577 000e FB81     		strh	r3, [r7, #14]	@ movhi
 379:./Lib/Src/stm32f4xx_tim.c **** 
 380:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 381:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 382:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
 383:./Lib/Src/stm32f4xx_tim.c **** 
 384:./Lib/Src/stm32f4xx_tim.c ****   tmpcr1 = TIMx->CR1;
 578              		.loc 1 384 10
 579 0010 7B68     		ldr	r3, [r7, #4]
 580 0012 1B88     		ldrh	r3, [r3]	@ movhi
 581 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 385:./Lib/Src/stm32f4xx_tim.c **** 
 386:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the CMS and DIR Bits */
 387:./Lib/Src/stm32f4xx_tim.c ****   tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 582              		.loc 1 387 10
 583 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 584 0018 23F07003 		bic	r3, r3, #112
 585 001c FB81     		strh	r3, [r7, #14]	@ movhi
 388:./Lib/Src/stm32f4xx_tim.c **** 
 389:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Counter Mode */
 390:./Lib/Src/stm32f4xx_tim.c ****   tmpcr1 |= TIM_CounterMode;
 586              		.loc 1 390 10
 587 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 588 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 589 0022 1343     		orrs	r3, r3, r2
 590 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 391:./Lib/Src/stm32f4xx_tim.c **** 
 392:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CR1 register */
 393:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR1 = tmpcr1;
 591              		.loc 1 393 13
 592 0026 7B68     		ldr	r3, [r7, #4]
 593 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 594 002a 1A80     		strh	r2, [r3]	@ movhi
 394:./Lib/Src/stm32f4xx_tim.c **** }
 595              		.loc 1 394 1
 596 002c 00BF     		nop
 597 002e 1437     		adds	r7, r7, #20
 598              		.cfi_def_cfa_offset 4
 599 0030 BD46     		mov	sp, r7
 600              		.cfi_def_cfa_register 13
 601              		@ sp needed
 602 0032 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccOaESyR.s 			page 19


 603              		.cfi_restore 7
 604              		.cfi_def_cfa_offset 0
 605 0036 7047     		bx	lr
 606              		.cfi_endproc
 607              	.LFE127:
 609              		.section	.text.TIM_SetCounter,"ax",%progbits
 610              		.align	1
 611              		.global	TIM_SetCounter
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 616              	TIM_SetCounter:
 617              	.LFB128:
 395:./Lib/Src/stm32f4xx_tim.c **** 
 396:./Lib/Src/stm32f4xx_tim.c **** /**
 397:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Counter Register value
 398:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 399:./Lib/Src/stm32f4xx_tim.c ****   * @param  Counter: specifies the Counter register new value.
 400:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 401:./Lib/Src/stm32f4xx_tim.c ****   */
 402:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
 403:./Lib/Src/stm32f4xx_tim.c **** {
 618              		.loc 1 403 1
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 8
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622              		@ link register save eliminated.
 623 0000 80B4     		push	{r7}
 624              		.cfi_def_cfa_offset 4
 625              		.cfi_offset 7, -4
 626 0002 83B0     		sub	sp, sp, #12
 627              		.cfi_def_cfa_offset 16
 628 0004 00AF     		add	r7, sp, #0
 629              		.cfi_def_cfa_register 7
 630 0006 7860     		str	r0, [r7, #4]
 631 0008 3960     		str	r1, [r7]
 404:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 405:./Lib/Src/stm32f4xx_tim.c ****    assert_param(IS_TIM_ALL_PERIPH(TIMx));
 406:./Lib/Src/stm32f4xx_tim.c **** 
 407:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Counter Register value */
 408:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CNT = Counter;
 632              		.loc 1 408 13
 633 000a 7B68     		ldr	r3, [r7, #4]
 634 000c 3A68     		ldr	r2, [r7]
 635 000e 5A62     		str	r2, [r3, #36]
 409:./Lib/Src/stm32f4xx_tim.c **** }
 636              		.loc 1 409 1
 637 0010 00BF     		nop
 638 0012 0C37     		adds	r7, r7, #12
 639              		.cfi_def_cfa_offset 4
 640 0014 BD46     		mov	sp, r7
 641              		.cfi_def_cfa_register 13
 642              		@ sp needed
 643 0016 5DF8047B 		ldr	r7, [sp], #4
 644              		.cfi_restore 7
 645              		.cfi_def_cfa_offset 0
 646 001a 7047     		bx	lr
ARM GAS  /tmp/ccOaESyR.s 			page 20


 647              		.cfi_endproc
 648              	.LFE128:
 650              		.section	.text.TIM_SetAutoreload,"ax",%progbits
 651              		.align	1
 652              		.global	TIM_SetAutoreload
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 657              	TIM_SetAutoreload:
 658              	.LFB129:
 410:./Lib/Src/stm32f4xx_tim.c **** 
 411:./Lib/Src/stm32f4xx_tim.c **** /**
 412:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
 413:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 414:./Lib/Src/stm32f4xx_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
 415:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 416:./Lib/Src/stm32f4xx_tim.c ****   */
 417:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
 418:./Lib/Src/stm32f4xx_tim.c **** {
 659              		.loc 1 418 1
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664 0000 80B4     		push	{r7}
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 0002 83B0     		sub	sp, sp, #12
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 671 0006 7860     		str	r0, [r7, #4]
 672 0008 3960     		str	r1, [r7]
 419:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 420:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 421:./Lib/Src/stm32f4xx_tim.c ****   
 422:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Autoreload Register value */
 423:./Lib/Src/stm32f4xx_tim.c ****   TIMx->ARR = Autoreload;
 673              		.loc 1 423 13
 674 000a 7B68     		ldr	r3, [r7, #4]
 675 000c 3A68     		ldr	r2, [r7]
 676 000e DA62     		str	r2, [r3, #44]
 424:./Lib/Src/stm32f4xx_tim.c **** }
 677              		.loc 1 424 1
 678 0010 00BF     		nop
 679 0012 0C37     		adds	r7, r7, #12
 680              		.cfi_def_cfa_offset 4
 681 0014 BD46     		mov	sp, r7
 682              		.cfi_def_cfa_register 13
 683              		@ sp needed
 684 0016 5DF8047B 		ldr	r7, [sp], #4
 685              		.cfi_restore 7
 686              		.cfi_def_cfa_offset 0
 687 001a 7047     		bx	lr
 688              		.cfi_endproc
 689              	.LFE129:
 691              		.section	.text.TIM_GetCounter,"ax",%progbits
ARM GAS  /tmp/ccOaESyR.s 			page 21


 692              		.align	1
 693              		.global	TIM_GetCounter
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 698              	TIM_GetCounter:
 699              	.LFB130:
 425:./Lib/Src/stm32f4xx_tim.c **** 
 426:./Lib/Src/stm32f4xx_tim.c **** /**
 427:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Counter value.
 428:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 429:./Lib/Src/stm32f4xx_tim.c ****   * @retval Counter Register value
 430:./Lib/Src/stm32f4xx_tim.c ****   */
 431:./Lib/Src/stm32f4xx_tim.c **** uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
 432:./Lib/Src/stm32f4xx_tim.c **** {
 700              		.loc 1 432 1
 701              		.cfi_startproc
 702              		@ args = 0, pretend = 0, frame = 8
 703              		@ frame_needed = 1, uses_anonymous_args = 0
 704              		@ link register save eliminated.
 705 0000 80B4     		push	{r7}
 706              		.cfi_def_cfa_offset 4
 707              		.cfi_offset 7, -4
 708 0002 83B0     		sub	sp, sp, #12
 709              		.cfi_def_cfa_offset 16
 710 0004 00AF     		add	r7, sp, #0
 711              		.cfi_def_cfa_register 7
 712 0006 7860     		str	r0, [r7, #4]
 433:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 434:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 435:./Lib/Src/stm32f4xx_tim.c **** 
 436:./Lib/Src/stm32f4xx_tim.c ****   /* Get the Counter Register value */
 437:./Lib/Src/stm32f4xx_tim.c ****   return TIMx->CNT;
 713              		.loc 1 437 14
 714 0008 7B68     		ldr	r3, [r7, #4]
 715 000a 5B6A     		ldr	r3, [r3, #36]
 438:./Lib/Src/stm32f4xx_tim.c **** }
 716              		.loc 1 438 1
 717 000c 1846     		mov	r0, r3
 718 000e 0C37     		adds	r7, r7, #12
 719              		.cfi_def_cfa_offset 4
 720 0010 BD46     		mov	sp, r7
 721              		.cfi_def_cfa_register 13
 722              		@ sp needed
 723 0012 5DF8047B 		ldr	r7, [sp], #4
 724              		.cfi_restore 7
 725              		.cfi_def_cfa_offset 0
 726 0016 7047     		bx	lr
 727              		.cfi_endproc
 728              	.LFE130:
 730              		.section	.text.TIM_GetPrescaler,"ax",%progbits
 731              		.align	1
 732              		.global	TIM_GetPrescaler
 733              		.syntax unified
 734              		.thumb
 735              		.thumb_func
 737              	TIM_GetPrescaler:
ARM GAS  /tmp/ccOaESyR.s 			page 22


 738              	.LFB131:
 439:./Lib/Src/stm32f4xx_tim.c **** 
 440:./Lib/Src/stm32f4xx_tim.c **** /**
 441:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Prescaler value.
 442:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 443:./Lib/Src/stm32f4xx_tim.c ****   * @retval Prescaler Register value.
 444:./Lib/Src/stm32f4xx_tim.c ****   */
 445:./Lib/Src/stm32f4xx_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
 446:./Lib/Src/stm32f4xx_tim.c **** {
 739              		.loc 1 446 1
 740              		.cfi_startproc
 741              		@ args = 0, pretend = 0, frame = 8
 742              		@ frame_needed = 1, uses_anonymous_args = 0
 743              		@ link register save eliminated.
 744 0000 80B4     		push	{r7}
 745              		.cfi_def_cfa_offset 4
 746              		.cfi_offset 7, -4
 747 0002 83B0     		sub	sp, sp, #12
 748              		.cfi_def_cfa_offset 16
 749 0004 00AF     		add	r7, sp, #0
 750              		.cfi_def_cfa_register 7
 751 0006 7860     		str	r0, [r7, #4]
 447:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 448:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 449:./Lib/Src/stm32f4xx_tim.c **** 
 450:./Lib/Src/stm32f4xx_tim.c ****   /* Get the Prescaler Register value */
 451:./Lib/Src/stm32f4xx_tim.c ****   return TIMx->PSC;
 752              		.loc 1 451 14
 753 0008 7B68     		ldr	r3, [r7, #4]
 754 000a 1B8D     		ldrh	r3, [r3, #40]	@ movhi
 755 000c 9BB2     		uxth	r3, r3
 452:./Lib/Src/stm32f4xx_tim.c **** }
 756              		.loc 1 452 1
 757 000e 1846     		mov	r0, r3
 758 0010 0C37     		adds	r7, r7, #12
 759              		.cfi_def_cfa_offset 4
 760 0012 BD46     		mov	sp, r7
 761              		.cfi_def_cfa_register 13
 762              		@ sp needed
 763 0014 5DF8047B 		ldr	r7, [sp], #4
 764              		.cfi_restore 7
 765              		.cfi_def_cfa_offset 0
 766 0018 7047     		bx	lr
 767              		.cfi_endproc
 768              	.LFE131:
 770              		.section	.text.TIM_UpdateDisableConfig,"ax",%progbits
 771              		.align	1
 772              		.global	TIM_UpdateDisableConfig
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 777              	TIM_UpdateDisableConfig:
 778              	.LFB132:
 453:./Lib/Src/stm32f4xx_tim.c **** 
 454:./Lib/Src/stm32f4xx_tim.c **** /**
 455:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
 456:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
ARM GAS  /tmp/ccOaESyR.s 			page 23


 457:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
 458:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 460:./Lib/Src/stm32f4xx_tim.c ****   */
 461:./Lib/Src/stm32f4xx_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 462:./Lib/Src/stm32f4xx_tim.c **** {
 779              		.loc 1 462 1
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 8
 782              		@ frame_needed = 1, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 784 0000 80B4     		push	{r7}
 785              		.cfi_def_cfa_offset 4
 786              		.cfi_offset 7, -4
 787 0002 83B0     		sub	sp, sp, #12
 788              		.cfi_def_cfa_offset 16
 789 0004 00AF     		add	r7, sp, #0
 790              		.cfi_def_cfa_register 7
 791 0006 7860     		str	r0, [r7, #4]
 792 0008 0B46     		mov	r3, r1
 793 000a FB70     		strb	r3, [r7, #3]
 463:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 464:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 465:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:./Lib/Src/stm32f4xx_tim.c **** 
 467:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 794              		.loc 1 467 6
 795 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 796 000e 002B     		cmp	r3, #0
 797 0010 08D0     		beq	.L37
 468:./Lib/Src/stm32f4xx_tim.c ****   {
 469:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Update Disable Bit */
 470:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 798              		.loc 1 470 9
 799 0012 7B68     		ldr	r3, [r7, #4]
 800 0014 1B88     		ldrh	r3, [r3]	@ movhi
 801 0016 9BB2     		uxth	r3, r3
 802              		.loc 1 470 15
 803 0018 43F00203 		orr	r3, r3, #2
 804 001c 9AB2     		uxth	r2, r3
 805 001e 7B68     		ldr	r3, [r7, #4]
 806 0020 1A80     		strh	r2, [r3]	@ movhi
 471:./Lib/Src/stm32f4xx_tim.c ****   }
 472:./Lib/Src/stm32f4xx_tim.c ****   else
 473:./Lib/Src/stm32f4xx_tim.c ****   {
 474:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Update Disable Bit */
 475:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 476:./Lib/Src/stm32f4xx_tim.c ****   }
 477:./Lib/Src/stm32f4xx_tim.c **** }
 807              		.loc 1 477 1
 808 0022 07E0     		b	.L39
 809              	.L37:
 475:./Lib/Src/stm32f4xx_tim.c ****   }
 810              		.loc 1 475 9
 811 0024 7B68     		ldr	r3, [r7, #4]
 812 0026 1B88     		ldrh	r3, [r3]	@ movhi
 813 0028 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccOaESyR.s 			page 24


 475:./Lib/Src/stm32f4xx_tim.c ****   }
 814              		.loc 1 475 15
 815 002a 23F00203 		bic	r3, r3, #2
 816 002e 9AB2     		uxth	r2, r3
 817 0030 7B68     		ldr	r3, [r7, #4]
 818 0032 1A80     		strh	r2, [r3]	@ movhi
 819              	.L39:
 820              		.loc 1 477 1
 821 0034 00BF     		nop
 822 0036 0C37     		adds	r7, r7, #12
 823              		.cfi_def_cfa_offset 4
 824 0038 BD46     		mov	sp, r7
 825              		.cfi_def_cfa_register 13
 826              		@ sp needed
 827 003a 5DF8047B 		ldr	r7, [sp], #4
 828              		.cfi_restore 7
 829              		.cfi_def_cfa_offset 0
 830 003e 7047     		bx	lr
 831              		.cfi_endproc
 832              	.LFE132:
 834              		.section	.text.TIM_UpdateRequestConfig,"ax",%progbits
 835              		.align	1
 836              		.global	TIM_UpdateRequestConfig
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 841              	TIM_UpdateRequestConfig:
 842              	.LFB133:
 478:./Lib/Src/stm32f4xx_tim.c **** 
 479:./Lib/Src/stm32f4xx_tim.c **** /**
 480:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
 481:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 482:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
 483:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 484:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_UpdateSource_Global: Source of update is the counter
 485:./Lib/Src/stm32f4xx_tim.c ****   *                 overflow/underflow or the setting of UG bit, or an update
 486:./Lib/Src/stm32f4xx_tim.c ****   *                 generation through the slave mode controller.
 487:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
 488:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 489:./Lib/Src/stm32f4xx_tim.c ****   */
 490:./Lib/Src/stm32f4xx_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
 491:./Lib/Src/stm32f4xx_tim.c **** {
 843              		.loc 1 491 1
 844              		.cfi_startproc
 845              		@ args = 0, pretend = 0, frame = 8
 846              		@ frame_needed = 1, uses_anonymous_args = 0
 847              		@ link register save eliminated.
 848 0000 80B4     		push	{r7}
 849              		.cfi_def_cfa_offset 4
 850              		.cfi_offset 7, -4
 851 0002 83B0     		sub	sp, sp, #12
 852              		.cfi_def_cfa_offset 16
 853 0004 00AF     		add	r7, sp, #0
 854              		.cfi_def_cfa_register 7
 855 0006 7860     		str	r0, [r7, #4]
 856 0008 0B46     		mov	r3, r1
 857 000a 7B80     		strh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 25


 492:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 493:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 494:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
 495:./Lib/Src/stm32f4xx_tim.c **** 
 496:./Lib/Src/stm32f4xx_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 858              		.loc 1 496 6
 859 000c 7B88     		ldrh	r3, [r7, #2]
 860 000e 002B     		cmp	r3, #0
 861 0010 08D0     		beq	.L41
 497:./Lib/Src/stm32f4xx_tim.c ****   {
 498:./Lib/Src/stm32f4xx_tim.c ****     /* Set the URS Bit */
 499:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 862              		.loc 1 499 9
 863 0012 7B68     		ldr	r3, [r7, #4]
 864 0014 1B88     		ldrh	r3, [r3]	@ movhi
 865 0016 9BB2     		uxth	r3, r3
 866              		.loc 1 499 15
 867 0018 43F00403 		orr	r3, r3, #4
 868 001c 9AB2     		uxth	r2, r3
 869 001e 7B68     		ldr	r3, [r7, #4]
 870 0020 1A80     		strh	r2, [r3]	@ movhi
 500:./Lib/Src/stm32f4xx_tim.c ****   }
 501:./Lib/Src/stm32f4xx_tim.c ****   else
 502:./Lib/Src/stm32f4xx_tim.c ****   {
 503:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the URS Bit */
 504:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 505:./Lib/Src/stm32f4xx_tim.c ****   }
 506:./Lib/Src/stm32f4xx_tim.c **** }
 871              		.loc 1 506 1
 872 0022 07E0     		b	.L43
 873              	.L41:
 504:./Lib/Src/stm32f4xx_tim.c ****   }
 874              		.loc 1 504 9
 875 0024 7B68     		ldr	r3, [r7, #4]
 876 0026 1B88     		ldrh	r3, [r3]	@ movhi
 877 0028 9BB2     		uxth	r3, r3
 504:./Lib/Src/stm32f4xx_tim.c ****   }
 878              		.loc 1 504 15
 879 002a 23F00403 		bic	r3, r3, #4
 880 002e 9AB2     		uxth	r2, r3
 881 0030 7B68     		ldr	r3, [r7, #4]
 882 0032 1A80     		strh	r2, [r3]	@ movhi
 883              	.L43:
 884              		.loc 1 506 1
 885 0034 00BF     		nop
 886 0036 0C37     		adds	r7, r7, #12
 887              		.cfi_def_cfa_offset 4
 888 0038 BD46     		mov	sp, r7
 889              		.cfi_def_cfa_register 13
 890              		@ sp needed
 891 003a 5DF8047B 		ldr	r7, [sp], #4
 892              		.cfi_restore 7
 893              		.cfi_def_cfa_offset 0
 894 003e 7047     		bx	lr
 895              		.cfi_endproc
 896              	.LFE133:
 898              		.section	.text.TIM_ARRPreloadConfig,"ax",%progbits
ARM GAS  /tmp/ccOaESyR.s 			page 26


 899              		.align	1
 900              		.global	TIM_ARRPreloadConfig
 901              		.syntax unified
 902              		.thumb
 903              		.thumb_func
 905              	TIM_ARRPreloadConfig:
 906              	.LFB134:
 507:./Lib/Src/stm32f4xx_tim.c **** 
 508:./Lib/Src/stm32f4xx_tim.c **** /**
 509:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
 510:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 511:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
 512:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 513:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 514:./Lib/Src/stm32f4xx_tim.c ****   */
 515:./Lib/Src/stm32f4xx_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
 516:./Lib/Src/stm32f4xx_tim.c **** {
 907              		.loc 1 516 1
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 8
 910              		@ frame_needed = 1, uses_anonymous_args = 0
 911              		@ link register save eliminated.
 912 0000 80B4     		push	{r7}
 913              		.cfi_def_cfa_offset 4
 914              		.cfi_offset 7, -4
 915 0002 83B0     		sub	sp, sp, #12
 916              		.cfi_def_cfa_offset 16
 917 0004 00AF     		add	r7, sp, #0
 918              		.cfi_def_cfa_register 7
 919 0006 7860     		str	r0, [r7, #4]
 920 0008 0B46     		mov	r3, r1
 921 000a FB70     		strb	r3, [r7, #3]
 517:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 518:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 519:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 520:./Lib/Src/stm32f4xx_tim.c **** 
 521:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 922              		.loc 1 521 6
 923 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 924 000e 002B     		cmp	r3, #0
 925 0010 08D0     		beq	.L45
 522:./Lib/Src/stm32f4xx_tim.c ****   {
 523:./Lib/Src/stm32f4xx_tim.c ****     /* Set the ARR Preload Bit */
 524:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 926              		.loc 1 524 9
 927 0012 7B68     		ldr	r3, [r7, #4]
 928 0014 1B88     		ldrh	r3, [r3]	@ movhi
 929 0016 9BB2     		uxth	r3, r3
 930              		.loc 1 524 15
 931 0018 43F08003 		orr	r3, r3, #128
 932 001c 9AB2     		uxth	r2, r3
 933 001e 7B68     		ldr	r3, [r7, #4]
 934 0020 1A80     		strh	r2, [r3]	@ movhi
 525:./Lib/Src/stm32f4xx_tim.c ****   }
 526:./Lib/Src/stm32f4xx_tim.c ****   else
 527:./Lib/Src/stm32f4xx_tim.c ****   {
 528:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the ARR Preload Bit */
ARM GAS  /tmp/ccOaESyR.s 			page 27


 529:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 530:./Lib/Src/stm32f4xx_tim.c ****   }
 531:./Lib/Src/stm32f4xx_tim.c **** }
 935              		.loc 1 531 1
 936 0022 07E0     		b	.L47
 937              	.L45:
 529:./Lib/Src/stm32f4xx_tim.c ****   }
 938              		.loc 1 529 9
 939 0024 7B68     		ldr	r3, [r7, #4]
 940 0026 1B88     		ldrh	r3, [r3]	@ movhi
 941 0028 9BB2     		uxth	r3, r3
 529:./Lib/Src/stm32f4xx_tim.c ****   }
 942              		.loc 1 529 15
 943 002a 23F08003 		bic	r3, r3, #128
 944 002e 9AB2     		uxth	r2, r3
 945 0030 7B68     		ldr	r3, [r7, #4]
 946 0032 1A80     		strh	r2, [r3]	@ movhi
 947              	.L47:
 948              		.loc 1 531 1
 949 0034 00BF     		nop
 950 0036 0C37     		adds	r7, r7, #12
 951              		.cfi_def_cfa_offset 4
 952 0038 BD46     		mov	sp, r7
 953              		.cfi_def_cfa_register 13
 954              		@ sp needed
 955 003a 5DF8047B 		ldr	r7, [sp], #4
 956              		.cfi_restore 7
 957              		.cfi_def_cfa_offset 0
 958 003e 7047     		bx	lr
 959              		.cfi_endproc
 960              	.LFE134:
 962              		.section	.text.TIM_SelectOnePulseMode,"ax",%progbits
 963              		.align	1
 964              		.global	TIM_SelectOnePulseMode
 965              		.syntax unified
 966              		.thumb
 967              		.thumb_func
 969              	TIM_SelectOnePulseMode:
 970              	.LFB135:
 532:./Lib/Src/stm32f4xx_tim.c **** 
 533:./Lib/Src/stm32f4xx_tim.c **** /**
 534:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
 535:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
 536:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
 537:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 538:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OPMode_Single
 539:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OPMode_Repetitive
 540:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 541:./Lib/Src/stm32f4xx_tim.c ****   */
 542:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
 543:./Lib/Src/stm32f4xx_tim.c **** {
 971              		.loc 1 543 1
 972              		.cfi_startproc
 973              		@ args = 0, pretend = 0, frame = 8
 974              		@ frame_needed = 1, uses_anonymous_args = 0
 975              		@ link register save eliminated.
 976 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccOaESyR.s 			page 28


 977              		.cfi_def_cfa_offset 4
 978              		.cfi_offset 7, -4
 979 0002 83B0     		sub	sp, sp, #12
 980              		.cfi_def_cfa_offset 16
 981 0004 00AF     		add	r7, sp, #0
 982              		.cfi_def_cfa_register 7
 983 0006 7860     		str	r0, [r7, #4]
 984 0008 0B46     		mov	r3, r1
 985 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 544:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 545:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 546:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
 547:./Lib/Src/stm32f4xx_tim.c **** 
 548:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OPM Bit */
 549:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 986              		.loc 1 549 7
 987 000c 7B68     		ldr	r3, [r7, #4]
 988 000e 1B88     		ldrh	r3, [r3]	@ movhi
 989 0010 9BB2     		uxth	r3, r3
 990              		.loc 1 549 13
 991 0012 23F00803 		bic	r3, r3, #8
 992 0016 9AB2     		uxth	r2, r3
 993 0018 7B68     		ldr	r3, [r7, #4]
 994 001a 1A80     		strh	r2, [r3]	@ movhi
 550:./Lib/Src/stm32f4xx_tim.c **** 
 551:./Lib/Src/stm32f4xx_tim.c ****   /* Configure the OPM Mode */
 552:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 995              		.loc 1 552 7
 996 001c 7B68     		ldr	r3, [r7, #4]
 997 001e 1B88     		ldrh	r3, [r3]	@ movhi
 998 0020 9AB2     		uxth	r2, r3
 999              		.loc 1 552 13
 1000 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1001 0024 1343     		orrs	r3, r3, r2
 1002 0026 9AB2     		uxth	r2, r3
 1003 0028 7B68     		ldr	r3, [r7, #4]
 1004 002a 1A80     		strh	r2, [r3]	@ movhi
 553:./Lib/Src/stm32f4xx_tim.c **** }
 1005              		.loc 1 553 1
 1006 002c 00BF     		nop
 1007 002e 0C37     		adds	r7, r7, #12
 1008              		.cfi_def_cfa_offset 4
 1009 0030 BD46     		mov	sp, r7
 1010              		.cfi_def_cfa_register 13
 1011              		@ sp needed
 1012 0032 5DF8047B 		ldr	r7, [sp], #4
 1013              		.cfi_restore 7
 1014              		.cfi_def_cfa_offset 0
 1015 0036 7047     		bx	lr
 1016              		.cfi_endproc
 1017              	.LFE135:
 1019              		.section	.text.TIM_SetClockDivision,"ax",%progbits
 1020              		.align	1
 1021              		.global	TIM_SetClockDivision
 1022              		.syntax unified
 1023              		.thumb
 1024              		.thumb_func
ARM GAS  /tmp/ccOaESyR.s 			page 29


 1026              	TIM_SetClockDivision:
 1027              	.LFB136:
 554:./Lib/Src/stm32f4xx_tim.c **** 
 555:./Lib/Src/stm32f4xx_tim.c **** /**
 556:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Clock Division value.
 557:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 558:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
 559:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following value:
 560:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV1: TDTS = Tck_tim
 561:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
 562:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
 563:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 564:./Lib/Src/stm32f4xx_tim.c ****   */
 565:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
 566:./Lib/Src/stm32f4xx_tim.c **** {
 1028              		.loc 1 566 1
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 8
 1031              		@ frame_needed = 1, uses_anonymous_args = 0
 1032              		@ link register save eliminated.
 1033 0000 80B4     		push	{r7}
 1034              		.cfi_def_cfa_offset 4
 1035              		.cfi_offset 7, -4
 1036 0002 83B0     		sub	sp, sp, #12
 1037              		.cfi_def_cfa_offset 16
 1038 0004 00AF     		add	r7, sp, #0
 1039              		.cfi_def_cfa_register 7
 1040 0006 7860     		str	r0, [r7, #4]
 1041 0008 0B46     		mov	r3, r1
 1042 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 567:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 568:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
 569:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
 570:./Lib/Src/stm32f4xx_tim.c **** 
 571:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the CKD Bits */
 572:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 1043              		.loc 1 572 7
 1044 000c 7B68     		ldr	r3, [r7, #4]
 1045 000e 1B88     		ldrh	r3, [r3]	@ movhi
 1046 0010 9BB2     		uxth	r3, r3
 1047              		.loc 1 572 13
 1048 0012 23F44073 		bic	r3, r3, #768
 1049 0016 9AB2     		uxth	r2, r3
 1050 0018 7B68     		ldr	r3, [r7, #4]
 1051 001a 1A80     		strh	r2, [r3]	@ movhi
 573:./Lib/Src/stm32f4xx_tim.c **** 
 574:./Lib/Src/stm32f4xx_tim.c ****   /* Set the CKD value */
 575:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR1 |= TIM_CKD;
 1052              		.loc 1 575 7
 1053 001c 7B68     		ldr	r3, [r7, #4]
 1054 001e 1B88     		ldrh	r3, [r3]	@ movhi
 1055 0020 9AB2     		uxth	r2, r3
 1056              		.loc 1 575 13
 1057 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1058 0024 1343     		orrs	r3, r3, r2
 1059 0026 9AB2     		uxth	r2, r3
 1060 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccOaESyR.s 			page 30


 1061 002a 1A80     		strh	r2, [r3]	@ movhi
 576:./Lib/Src/stm32f4xx_tim.c **** }
 1062              		.loc 1 576 1
 1063 002c 00BF     		nop
 1064 002e 0C37     		adds	r7, r7, #12
 1065              		.cfi_def_cfa_offset 4
 1066 0030 BD46     		mov	sp, r7
 1067              		.cfi_def_cfa_register 13
 1068              		@ sp needed
 1069 0032 5DF8047B 		ldr	r7, [sp], #4
 1070              		.cfi_restore 7
 1071              		.cfi_def_cfa_offset 0
 1072 0036 7047     		bx	lr
 1073              		.cfi_endproc
 1074              	.LFE136:
 1076              		.section	.text.TIM_Cmd,"ax",%progbits
 1077              		.align	1
 1078              		.global	TIM_Cmd
 1079              		.syntax unified
 1080              		.thumb
 1081              		.thumb_func
 1083              	TIM_Cmd:
 1084              	.LFB137:
 577:./Lib/Src/stm32f4xx_tim.c **** 
 578:./Lib/Src/stm32f4xx_tim.c **** /**
 579:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 580:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
 581:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 582:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 584:./Lib/Src/stm32f4xx_tim.c ****   */
 585:./Lib/Src/stm32f4xx_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 586:./Lib/Src/stm32f4xx_tim.c **** {
 1085              		.loc 1 586 1
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 8
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 1090 0000 80B4     		push	{r7}
 1091              		.cfi_def_cfa_offset 4
 1092              		.cfi_offset 7, -4
 1093 0002 83B0     		sub	sp, sp, #12
 1094              		.cfi_def_cfa_offset 16
 1095 0004 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 1097 0006 7860     		str	r0, [r7, #4]
 1098 0008 0B46     		mov	r3, r1
 1099 000a FB70     		strb	r3, [r7, #3]
 587:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 588:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 589:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 590:./Lib/Src/stm32f4xx_tim.c ****   
 591:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 1100              		.loc 1 591 6
 1101 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1102 000e 002B     		cmp	r3, #0
 1103 0010 08D0     		beq	.L51
ARM GAS  /tmp/ccOaESyR.s 			page 31


 592:./Lib/Src/stm32f4xx_tim.c ****   {
 593:./Lib/Src/stm32f4xx_tim.c ****     /* Enable the TIM Counter */
 594:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 1104              		.loc 1 594 9
 1105 0012 7B68     		ldr	r3, [r7, #4]
 1106 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1107 0016 9BB2     		uxth	r3, r3
 1108              		.loc 1 594 15
 1109 0018 43F00103 		orr	r3, r3, #1
 1110 001c 9AB2     		uxth	r2, r3
 1111 001e 7B68     		ldr	r3, [r7, #4]
 1112 0020 1A80     		strh	r2, [r3]	@ movhi
 595:./Lib/Src/stm32f4xx_tim.c ****   }
 596:./Lib/Src/stm32f4xx_tim.c ****   else
 597:./Lib/Src/stm32f4xx_tim.c ****   {
 598:./Lib/Src/stm32f4xx_tim.c ****     /* Disable the TIM Counter */
 599:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 600:./Lib/Src/stm32f4xx_tim.c ****   }
 601:./Lib/Src/stm32f4xx_tim.c **** }
 1113              		.loc 1 601 1
 1114 0022 07E0     		b	.L53
 1115              	.L51:
 599:./Lib/Src/stm32f4xx_tim.c ****   }
 1116              		.loc 1 599 9
 1117 0024 7B68     		ldr	r3, [r7, #4]
 1118 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1119 0028 9BB2     		uxth	r3, r3
 599:./Lib/Src/stm32f4xx_tim.c ****   }
 1120              		.loc 1 599 15
 1121 002a 23F00103 		bic	r3, r3, #1
 1122 002e 9AB2     		uxth	r2, r3
 1123 0030 7B68     		ldr	r3, [r7, #4]
 1124 0032 1A80     		strh	r2, [r3]	@ movhi
 1125              	.L53:
 1126              		.loc 1 601 1
 1127 0034 00BF     		nop
 1128 0036 0C37     		adds	r7, r7, #12
 1129              		.cfi_def_cfa_offset 4
 1130 0038 BD46     		mov	sp, r7
 1131              		.cfi_def_cfa_register 13
 1132              		@ sp needed
 1133 003a 5DF8047B 		ldr	r7, [sp], #4
 1134              		.cfi_restore 7
 1135              		.cfi_def_cfa_offset 0
 1136 003e 7047     		bx	lr
 1137              		.cfi_endproc
 1138              	.LFE137:
 1140              		.section	.text.TIM_OC1Init,"ax",%progbits
 1141              		.align	1
 1142              		.global	TIM_OC1Init
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1147              	TIM_OC1Init:
 1148              	.LFB138:
 602:./Lib/Src/stm32f4xx_tim.c **** /**
 603:./Lib/Src/stm32f4xx_tim.c ****   * @}
ARM GAS  /tmp/ccOaESyR.s 			page 32


 604:./Lib/Src/stm32f4xx_tim.c ****   */
 605:./Lib/Src/stm32f4xx_tim.c **** 
 606:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group2 Output Compare management functions
 607:./Lib/Src/stm32f4xx_tim.c ****  *  @brief    Output Compare management functions 
 608:./Lib/Src/stm32f4xx_tim.c ****  *
 609:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
 610:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
 611:./Lib/Src/stm32f4xx_tim.c ****               ##### Output Compare management functions #####
 612:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
 613:./Lib/Src/stm32f4xx_tim.c ****    
 614:./Lib/Src/stm32f4xx_tim.c ****       
 615:./Lib/Src/stm32f4xx_tim.c ****         ##### TIM Driver: how to use it in Output Compare Mode #####
 616:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
 617:./Lib/Src/stm32f4xx_tim.c ****     [..] 
 618:./Lib/Src/stm32f4xx_tim.c ****     To use the Timer in Output Compare mode, the following steps are mandatory:
 619:./Lib/Src/stm32f4xx_tim.c ****        
 620:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
 621:./Lib/Src/stm32f4xx_tim.c ****           function
 622:./Lib/Src/stm32f4xx_tim.c ****        
 623:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the TIM pins by configuring the corresponding GPIO pins
 624:./Lib/Src/stm32f4xx_tim.c ****        
 625:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the Time base unit as described in the first part of this driver, 
 626:./Lib/Src/stm32f4xx_tim.c ****         (++) if needed, else the Timer will run with the default configuration:
 627:./Lib/Src/stm32f4xx_tim.c ****             Autoreload value = 0xFFFF
 628:./Lib/Src/stm32f4xx_tim.c ****         (++) Prescaler value = 0x0000
 629:./Lib/Src/stm32f4xx_tim.c ****         (++) Counter mode = Up counting
 630:./Lib/Src/stm32f4xx_tim.c ****         (++) Clock Division = TIM_CKD_DIV1
 631:./Lib/Src/stm32f4xx_tim.c ****           
 632:./Lib/Src/stm32f4xx_tim.c ****       (#) Fill the TIM_OCInitStruct with the desired parameters including:
 633:./Lib/Src/stm32f4xx_tim.c ****         (++) The TIM Output Compare mode: TIM_OCMode
 634:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Output State: TIM_OutputState
 635:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Pulse value: TIM_Pulse
 636:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Output Compare Polarity : TIM_OCPolarity
 637:./Lib/Src/stm32f4xx_tim.c ****        
 638:./Lib/Src/stm32f4xx_tim.c ****       (#) Call TIM_OCxInit(TIMx, &TIM_OCInitStruct) to configure the desired 
 639:./Lib/Src/stm32f4xx_tim.c ****           channel with the corresponding configuration
 640:./Lib/Src/stm32f4xx_tim.c ****        
 641:./Lib/Src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
 642:./Lib/Src/stm32f4xx_tim.c ****        
 643:./Lib/Src/stm32f4xx_tim.c ****       -@- All other functions can be used separately to modify, if needed,
 644:./Lib/Src/stm32f4xx_tim.c ****           a specific feature of the Timer. 
 645:./Lib/Src/stm32f4xx_tim.c ****           
 646:./Lib/Src/stm32f4xx_tim.c ****       -@- In case of PWM mode, this function is mandatory:
 647:./Lib/Src/stm32f4xx_tim.c ****           TIM_OCxPreloadConfig(TIMx, TIM_OCPreload_ENABLE); 
 648:./Lib/Src/stm32f4xx_tim.c ****               
 649:./Lib/Src/stm32f4xx_tim.c ****       -@- If the corresponding interrupt or DMA request are needed, the user should:
 650:./Lib/Src/stm32f4xx_tim.c ****         (+@) Enable the NVIC (or the DMA) to use the TIM interrupts (or DMA requests). 
 651:./Lib/Src/stm32f4xx_tim.c ****         (+@) Enable the corresponding interrupt (or DMA request) using the function 
 652:./Lib/Src/stm32f4xx_tim.c ****              TIM_ITConfig(TIMx, TIM_IT_CCx) (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx))   
 653:./Lib/Src/stm32f4xx_tim.c **** 
 654:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
 655:./Lib/Src/stm32f4xx_tim.c ****   * @{
 656:./Lib/Src/stm32f4xx_tim.c ****   */
 657:./Lib/Src/stm32f4xx_tim.c **** 
 658:./Lib/Src/stm32f4xx_tim.c **** /**
 659:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified parameters in
 660:./Lib/Src/stm32f4xx_tim.c ****   *         the TIM_OCInitStruct.
ARM GAS  /tmp/ccOaESyR.s 			page 33


 661:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 662:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 663:./Lib/Src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 664:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 665:./Lib/Src/stm32f4xx_tim.c ****   */
 666:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 667:./Lib/Src/stm32f4xx_tim.c **** {
 1149              		.loc 1 667 1
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 16
 1152              		@ frame_needed = 1, uses_anonymous_args = 0
 1153              		@ link register save eliminated.
 1154 0000 80B4     		push	{r7}
 1155              		.cfi_def_cfa_offset 4
 1156              		.cfi_offset 7, -4
 1157 0002 85B0     		sub	sp, sp, #20
 1158              		.cfi_def_cfa_offset 24
 1159 0004 00AF     		add	r7, sp, #0
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
 1162 0008 3960     		str	r1, [r7]
 668:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1163              		.loc 1 668 12
 1164 000a 0023     		movs	r3, #0
 1165 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 1166              		.loc 1 668 26
 1167 000e 0023     		movs	r3, #0
 1168 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 1169              		.loc 1 668 39
 1170 0012 0023     		movs	r3, #0
 1171 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 669:./Lib/Src/stm32f4xx_tim.c ****    
 670:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 671:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
 672:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 673:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 674:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 675:./Lib/Src/stm32f4xx_tim.c **** 
 676:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
 677:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 1172              		.loc 1 677 7
 1173 0016 7B68     		ldr	r3, [r7, #4]
 1174 0018 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1175 001a 9BB2     		uxth	r3, r3
 1176              		.loc 1 677 14
 1177 001c 23F00103 		bic	r3, r3, #1
 1178 0020 9AB2     		uxth	r2, r3
 1179 0022 7B68     		ldr	r3, [r7, #4]
 1180 0024 1A84     		strh	r2, [r3, #32]	@ movhi
 678:./Lib/Src/stm32f4xx_tim.c ****   
 679:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 680:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 1181              		.loc 1 680 11
 1182 0026 7B68     		ldr	r3, [r7, #4]
 1183 0028 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1184 002a FB81     		strh	r3, [r7, #14]	@ movhi
 681:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
ARM GAS  /tmp/ccOaESyR.s 			page 34


 682:./Lib/Src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1185              		.loc 1 682 10
 1186 002c 7B68     		ldr	r3, [r7, #4]
 1187 002e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1188 0030 BB81     		strh	r3, [r7, #12]	@ movhi
 683:./Lib/Src/stm32f4xx_tim.c ****   
 684:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 685:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 1189              		.loc 1 685 12
 1190 0032 7B68     		ldr	r3, [r7, #4]
 1191 0034 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1192 0036 7B81     		strh	r3, [r7, #10]	@ movhi
 686:./Lib/Src/stm32f4xx_tim.c ****     
 687:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Compare Mode Bits */
 688:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 1193              		.loc 1 688 12
 1194 0038 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1195 003a 23F07003 		bic	r3, r3, #112
 1196 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 689:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 1197              		.loc 1 689 12
 1198 0040 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1199 0042 23F00303 		bic	r3, r3, #3
 1200 0046 7B81     		strh	r3, [r7, #10]	@ movhi
 690:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 691:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 1201              		.loc 1 691 31
 1202 0048 3B68     		ldr	r3, [r7]
 1203 004a 1A88     		ldrh	r2, [r3]
 1204              		.loc 1 691 12
 1205 004c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1206 004e 1343     		orrs	r3, r3, r2
 1207 0050 7B81     		strh	r3, [r7, #10]	@ movhi
 692:./Lib/Src/stm32f4xx_tim.c ****   
 693:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 694:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 1208              		.loc 1 694 11
 1209 0052 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1210 0054 23F00203 		bic	r3, r3, #2
 1211 0058 FB81     		strh	r3, [r7, #14]	@ movhi
 695:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 696:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 1212              		.loc 1 696 30
 1213 005a 3B68     		ldr	r3, [r7]
 1214 005c 9A89     		ldrh	r2, [r3, #12]
 1215              		.loc 1 696 11
 1216 005e FB89     		ldrh	r3, [r7, #14]	@ movhi
 1217 0060 1343     		orrs	r3, r3, r2
 1218 0062 FB81     		strh	r3, [r7, #14]	@ movhi
 697:./Lib/Src/stm32f4xx_tim.c ****   
 698:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output State */
 699:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 1219              		.loc 1 699 30
 1220 0064 3B68     		ldr	r3, [r7]
 1221 0066 5A88     		ldrh	r2, [r3, #2]
 1222              		.loc 1 699 11
 1223 0068 FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 35


 1224 006a 1343     		orrs	r3, r3, r2
 1225 006c FB81     		strh	r3, [r7, #14]	@ movhi
 700:./Lib/Src/stm32f4xx_tim.c ****     
 701:./Lib/Src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 1226              		.loc 1 701 5
 1227 006e 7B68     		ldr	r3, [r7, #4]
 1228 0070 1E4A     		ldr	r2, .L57
 1229 0072 9342     		cmp	r3, r2
 1230 0074 03D0     		beq	.L55
 1231              		.loc 1 701 21 discriminator 1
 1232 0076 7B68     		ldr	r3, [r7, #4]
 1233 0078 1D4A     		ldr	r2, .L57+4
 1234 007a 9342     		cmp	r3, r2
 1235 007c 23D1     		bne	.L56
 1236              	.L55:
 702:./Lib/Src/stm32f4xx_tim.c ****   {
 703:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 704:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 705:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 706:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 707:./Lib/Src/stm32f4xx_tim.c ****     
 708:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 709:./Lib/Src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 1237              		.loc 1 709 13
 1238 007e FB89     		ldrh	r3, [r7, #14]	@ movhi
 1239 0080 23F00803 		bic	r3, r3, #8
 1240 0084 FB81     		strh	r3, [r7, #14]	@ movhi
 710:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 711:./Lib/Src/stm32f4xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 1241              		.loc 1 711 32
 1242 0086 3B68     		ldr	r3, [r7]
 1243 0088 DA89     		ldrh	r2, [r3, #14]
 1244              		.loc 1 711 13
 1245 008a FB89     		ldrh	r3, [r7, #14]	@ movhi
 1246 008c 1343     		orrs	r3, r3, r2
 1247 008e FB81     		strh	r3, [r7, #14]	@ movhi
 712:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 713:./Lib/Src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 1248              		.loc 1 713 13
 1249 0090 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1250 0092 23F00403 		bic	r3, r3, #4
 1251 0096 FB81     		strh	r3, [r7, #14]	@ movhi
 714:./Lib/Src/stm32f4xx_tim.c ****     
 715:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N State */
 716:./Lib/Src/stm32f4xx_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 1252              		.loc 1 716 32
 1253 0098 3B68     		ldr	r3, [r7]
 1254 009a 9A88     		ldrh	r2, [r3, #4]
 1255              		.loc 1 716 13
 1256 009c FB89     		ldrh	r3, [r7, #14]	@ movhi
 1257 009e 1343     		orrs	r3, r3, r2
 1258 00a0 FB81     		strh	r3, [r7, #14]	@ movhi
 717:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 718:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 1259              		.loc 1 718 12
 1260 00a2 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1261 00a4 23F48073 		bic	r3, r3, #256
ARM GAS  /tmp/ccOaESyR.s 			page 36


 1262 00a8 BB81     		strh	r3, [r7, #12]	@ movhi
 719:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 1263              		.loc 1 719 12
 1264 00aa BB89     		ldrh	r3, [r7, #12]	@ movhi
 1265 00ac 23F40073 		bic	r3, r3, #512
 1266 00b0 BB81     		strh	r3, [r7, #12]	@ movhi
 720:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 721:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 1267              		.loc 1 721 31
 1268 00b2 3B68     		ldr	r3, [r7]
 1269 00b4 1A8A     		ldrh	r2, [r3, #16]
 1270              		.loc 1 721 12
 1271 00b6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1272 00b8 1343     		orrs	r3, r3, r2
 1273 00ba BB81     		strh	r3, [r7, #12]	@ movhi
 722:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 723:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 1274              		.loc 1 723 31
 1275 00bc 3B68     		ldr	r3, [r7]
 1276 00be 5A8A     		ldrh	r2, [r3, #18]
 1277              		.loc 1 723 12
 1278 00c0 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1279 00c2 1343     		orrs	r3, r3, r2
 1280 00c4 BB81     		strh	r3, [r7, #12]	@ movhi
 1281              	.L56:
 724:./Lib/Src/stm32f4xx_tim.c ****   }
 725:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 726:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1282              		.loc 1 726 13
 1283 00c6 7B68     		ldr	r3, [r7, #4]
 1284 00c8 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1285 00ca 9A80     		strh	r2, [r3, #4]	@ movhi
 727:./Lib/Src/stm32f4xx_tim.c ****   
 728:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
 729:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 1286              		.loc 1 729 15
 1287 00cc 7B68     		ldr	r3, [r7, #4]
 1288 00ce 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1289 00d0 1A83     		strh	r2, [r3, #24]	@ movhi
 730:./Lib/Src/stm32f4xx_tim.c ****   
 731:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 732:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 1290              		.loc 1 732 32
 1291 00d2 3B68     		ldr	r3, [r7]
 1292 00d4 9A68     		ldr	r2, [r3, #8]
 1293              		.loc 1 732 14
 1294 00d6 7B68     		ldr	r3, [r7, #4]
 1295 00d8 5A63     		str	r2, [r3, #52]
 733:./Lib/Src/stm32f4xx_tim.c ****   
 734:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 735:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 1296              		.loc 1 735 14
 1297 00da 7B68     		ldr	r3, [r7, #4]
 1298 00dc FA89     		ldrh	r2, [r7, #14]	@ movhi
 1299 00de 1A84     		strh	r2, [r3, #32]	@ movhi
 736:./Lib/Src/stm32f4xx_tim.c **** }
 1300              		.loc 1 736 1
ARM GAS  /tmp/ccOaESyR.s 			page 37


 1301 00e0 00BF     		nop
 1302 00e2 1437     		adds	r7, r7, #20
 1303              		.cfi_def_cfa_offset 4
 1304 00e4 BD46     		mov	sp, r7
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 00e6 5DF8047B 		ldr	r7, [sp], #4
 1308              		.cfi_restore 7
 1309              		.cfi_def_cfa_offset 0
 1310 00ea 7047     		bx	lr
 1311              	.L58:
 1312              		.align	2
 1313              	.L57:
 1314 00ec 00000140 		.word	1073807360
 1315 00f0 00040140 		.word	1073808384
 1316              		.cfi_endproc
 1317              	.LFE138:
 1319              		.section	.text.TIM_OC2Init,"ax",%progbits
 1320              		.align	1
 1321              		.global	TIM_OC2Init
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1326              	TIM_OC2Init:
 1327              	.LFB139:
 737:./Lib/Src/stm32f4xx_tim.c **** 
 738:./Lib/Src/stm32f4xx_tim.c **** /**
 739:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified parameters 
 740:./Lib/Src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 741:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
 742:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
 743:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 744:./Lib/Src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 745:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 746:./Lib/Src/stm32f4xx_tim.c ****   */
 747:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 748:./Lib/Src/stm32f4xx_tim.c **** {
 1328              		.loc 1 748 1
 1329              		.cfi_startproc
 1330              		@ args = 0, pretend = 0, frame = 16
 1331              		@ frame_needed = 1, uses_anonymous_args = 0
 1332              		@ link register save eliminated.
 1333 0000 80B4     		push	{r7}
 1334              		.cfi_def_cfa_offset 4
 1335              		.cfi_offset 7, -4
 1336 0002 85B0     		sub	sp, sp, #20
 1337              		.cfi_def_cfa_offset 24
 1338 0004 00AF     		add	r7, sp, #0
 1339              		.cfi_def_cfa_register 7
 1340 0006 7860     		str	r0, [r7, #4]
 1341 0008 3960     		str	r1, [r7]
 749:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1342              		.loc 1 749 12
 1343 000a 0023     		movs	r3, #0
 1344 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 1345              		.loc 1 749 26
 1346 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccOaESyR.s 			page 38


 1347 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 1348              		.loc 1 749 39
 1349 0012 0023     		movs	r3, #0
 1350 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 750:./Lib/Src/stm32f4xx_tim.c ****    
 751:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 752:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx)); 
 753:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 754:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 755:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 756:./Lib/Src/stm32f4xx_tim.c **** 
 757:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 758:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 1351              		.loc 1 758 7
 1352 0016 7B68     		ldr	r3, [r7, #4]
 1353 0018 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1354 001a 9BB2     		uxth	r3, r3
 1355              		.loc 1 758 14
 1356 001c 23F01003 		bic	r3, r3, #16
 1357 0020 9AB2     		uxth	r2, r3
 1358 0022 7B68     		ldr	r3, [r7, #4]
 1359 0024 1A84     		strh	r2, [r3, #32]	@ movhi
 759:./Lib/Src/stm32f4xx_tim.c ****   
 760:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */  
 761:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 1360              		.loc 1 761 11
 1361 0026 7B68     		ldr	r3, [r7, #4]
 1362 0028 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1363 002a FB81     		strh	r3, [r7, #14]	@ movhi
 762:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 763:./Lib/Src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1364              		.loc 1 763 10
 1365 002c 7B68     		ldr	r3, [r7, #4]
 1366 002e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1367 0030 BB81     		strh	r3, [r7, #12]	@ movhi
 764:./Lib/Src/stm32f4xx_tim.c ****   
 765:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
 766:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR1;
 1368              		.loc 1 766 12
 1369 0032 7B68     		ldr	r3, [r7, #4]
 1370 0034 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1371 0036 7B81     		strh	r3, [r7, #10]	@ movhi
 767:./Lib/Src/stm32f4xx_tim.c ****     
 768:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 769:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 1372              		.loc 1 769 12
 1373 0038 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1374 003a 23F4E043 		bic	r3, r3, #28672
 1375 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 770:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 1376              		.loc 1 770 12
 1377 0040 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1378 0042 23F44073 		bic	r3, r3, #768
 1379 0046 7B81     		strh	r3, [r7, #10]	@ movhi
 771:./Lib/Src/stm32f4xx_tim.c ****   
 772:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 773:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
ARM GAS  /tmp/ccOaESyR.s 			page 39


 1380              		.loc 1 773 42
 1381 0048 3B68     		ldr	r3, [r7]
 1382 004a 1B88     		ldrh	r3, [r3]
 1383              		.loc 1 773 15
 1384 004c 1B02     		lsls	r3, r3, #8
 1385 004e 9AB2     		uxth	r2, r3
 1386              		.loc 1 773 12
 1387 0050 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1388 0052 1343     		orrs	r3, r3, r2
 1389 0054 7B81     		strh	r3, [r7, #10]	@ movhi
 774:./Lib/Src/stm32f4xx_tim.c ****   
 775:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 776:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 1390              		.loc 1 776 11
 1391 0056 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1392 0058 23F02003 		bic	r3, r3, #32
 1393 005c FB81     		strh	r3, [r7, #14]	@ movhi
 777:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 778:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 1394              		.loc 1 778 41
 1395 005e 3B68     		ldr	r3, [r7]
 1396 0060 9B89     		ldrh	r3, [r3, #12]
 1397              		.loc 1 778 14
 1398 0062 1B01     		lsls	r3, r3, #4
 1399 0064 9AB2     		uxth	r2, r3
 1400              		.loc 1 778 11
 1401 0066 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1402 0068 1343     		orrs	r3, r3, r2
 1403 006a FB81     		strh	r3, [r7, #14]	@ movhi
 779:./Lib/Src/stm32f4xx_tim.c ****   
 780:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output State */
 781:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 1404              		.loc 1 781 41
 1405 006c 3B68     		ldr	r3, [r7]
 1406 006e 5B88     		ldrh	r3, [r3, #2]
 1407              		.loc 1 781 14
 1408 0070 1B01     		lsls	r3, r3, #4
 1409 0072 9AB2     		uxth	r2, r3
 1410              		.loc 1 781 11
 1411 0074 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1412 0076 1343     		orrs	r3, r3, r2
 1413 0078 FB81     		strh	r3, [r7, #14]	@ movhi
 782:./Lib/Src/stm32f4xx_tim.c ****     
 783:./Lib/Src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 1414              		.loc 1 783 5
 1415 007a 7B68     		ldr	r3, [r7, #4]
 1416 007c 224A     		ldr	r2, .L62
 1417 007e 9342     		cmp	r3, r2
 1418 0080 03D0     		beq	.L60
 1419              		.loc 1 783 21 discriminator 1
 1420 0082 7B68     		ldr	r3, [r7, #4]
 1421 0084 214A     		ldr	r2, .L62+4
 1422 0086 9342     		cmp	r3, r2
 1423 0088 2BD1     		bne	.L61
 1424              	.L60:
 784:./Lib/Src/stm32f4xx_tim.c ****   {
 785:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
ARM GAS  /tmp/ccOaESyR.s 			page 40


 786:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 787:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 788:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 789:./Lib/Src/stm32f4xx_tim.c ****     
 790:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 791:./Lib/Src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 1425              		.loc 1 791 13
 1426 008a FB89     		ldrh	r3, [r7, #14]	@ movhi
 1427 008c 23F08003 		bic	r3, r3, #128
 1428 0090 FB81     		strh	r3, [r7, #14]	@ movhi
 792:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 793:./Lib/Src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 1429              		.loc 1 793 43
 1430 0092 3B68     		ldr	r3, [r7]
 1431 0094 DB89     		ldrh	r3, [r3, #14]
 1432              		.loc 1 793 16
 1433 0096 1B01     		lsls	r3, r3, #4
 1434 0098 9AB2     		uxth	r2, r3
 1435              		.loc 1 793 13
 1436 009a FB89     		ldrh	r3, [r7, #14]	@ movhi
 1437 009c 1343     		orrs	r3, r3, r2
 1438 009e FB81     		strh	r3, [r7, #14]	@ movhi
 794:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 795:./Lib/Src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 1439              		.loc 1 795 13
 1440 00a0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1441 00a2 23F04003 		bic	r3, r3, #64
 1442 00a6 FB81     		strh	r3, [r7, #14]	@ movhi
 796:./Lib/Src/stm32f4xx_tim.c ****     
 797:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N State */
 798:./Lib/Src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 1443              		.loc 1 798 43
 1444 00a8 3B68     		ldr	r3, [r7]
 1445 00aa 9B88     		ldrh	r3, [r3, #4]
 1446              		.loc 1 798 16
 1447 00ac 1B01     		lsls	r3, r3, #4
 1448 00ae 9AB2     		uxth	r2, r3
 1449              		.loc 1 798 13
 1450 00b0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1451 00b2 1343     		orrs	r3, r3, r2
 1452 00b4 FB81     		strh	r3, [r7, #14]	@ movhi
 799:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 800:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 1453              		.loc 1 800 12
 1454 00b6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1455 00b8 23F48063 		bic	r3, r3, #1024
 1456 00bc BB81     		strh	r3, [r7, #12]	@ movhi
 801:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 1457              		.loc 1 801 12
 1458 00be BB89     		ldrh	r3, [r7, #12]	@ movhi
 1459 00c0 23F40063 		bic	r3, r3, #2048
 1460 00c4 BB81     		strh	r3, [r7, #12]	@ movhi
 802:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 803:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 1461              		.loc 1 803 42
 1462 00c6 3B68     		ldr	r3, [r7]
 1463 00c8 1B8A     		ldrh	r3, [r3, #16]
ARM GAS  /tmp/ccOaESyR.s 			page 41


 1464              		.loc 1 803 15
 1465 00ca 9B00     		lsls	r3, r3, #2
 1466 00cc 9AB2     		uxth	r2, r3
 1467              		.loc 1 803 12
 1468 00ce BB89     		ldrh	r3, [r7, #12]	@ movhi
 1469 00d0 1343     		orrs	r3, r3, r2
 1470 00d2 BB81     		strh	r3, [r7, #12]	@ movhi
 804:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 805:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 1471              		.loc 1 805 42
 1472 00d4 3B68     		ldr	r3, [r7]
 1473 00d6 5B8A     		ldrh	r3, [r3, #18]
 1474              		.loc 1 805 15
 1475 00d8 9B00     		lsls	r3, r3, #2
 1476 00da 9AB2     		uxth	r2, r3
 1477              		.loc 1 805 12
 1478 00dc BB89     		ldrh	r3, [r7, #12]	@ movhi
 1479 00de 1343     		orrs	r3, r3, r2
 1480 00e0 BB81     		strh	r3, [r7, #12]	@ movhi
 1481              	.L61:
 806:./Lib/Src/stm32f4xx_tim.c ****   }
 807:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 808:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1482              		.loc 1 808 13
 1483 00e2 7B68     		ldr	r3, [r7, #4]
 1484 00e4 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1485 00e6 9A80     		strh	r2, [r3, #4]	@ movhi
 809:./Lib/Src/stm32f4xx_tim.c ****   
 810:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
 811:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 1486              		.loc 1 811 15
 1487 00e8 7B68     		ldr	r3, [r7, #4]
 1488 00ea 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1489 00ec 1A83     		strh	r2, [r3, #24]	@ movhi
 812:./Lib/Src/stm32f4xx_tim.c ****   
 813:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 814:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 1490              		.loc 1 814 32
 1491 00ee 3B68     		ldr	r3, [r7]
 1492 00f0 9A68     		ldr	r2, [r3, #8]
 1493              		.loc 1 814 14
 1494 00f2 7B68     		ldr	r3, [r7, #4]
 1495 00f4 9A63     		str	r2, [r3, #56]
 815:./Lib/Src/stm32f4xx_tim.c ****   
 816:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 817:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 1496              		.loc 1 817 14
 1497 00f6 7B68     		ldr	r3, [r7, #4]
 1498 00f8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1499 00fa 1A84     		strh	r2, [r3, #32]	@ movhi
 818:./Lib/Src/stm32f4xx_tim.c **** }
 1500              		.loc 1 818 1
 1501 00fc 00BF     		nop
 1502 00fe 1437     		adds	r7, r7, #20
 1503              		.cfi_def_cfa_offset 4
 1504 0100 BD46     		mov	sp, r7
 1505              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccOaESyR.s 			page 42


 1506              		@ sp needed
 1507 0102 5DF8047B 		ldr	r7, [sp], #4
 1508              		.cfi_restore 7
 1509              		.cfi_def_cfa_offset 0
 1510 0106 7047     		bx	lr
 1511              	.L63:
 1512              		.align	2
 1513              	.L62:
 1514 0108 00000140 		.word	1073807360
 1515 010c 00040140 		.word	1073808384
 1516              		.cfi_endproc
 1517              	.LFE139:
 1519              		.section	.text.TIM_OC3Init,"ax",%progbits
 1520              		.align	1
 1521              		.global	TIM_OC3Init
 1522              		.syntax unified
 1523              		.thumb
 1524              		.thumb_func
 1526              	TIM_OC3Init:
 1527              	.LFB140:
 819:./Lib/Src/stm32f4xx_tim.c **** 
 820:./Lib/Src/stm32f4xx_tim.c **** /**
 821:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified parameters
 822:./Lib/Src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 823:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 824:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 825:./Lib/Src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 826:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 827:./Lib/Src/stm32f4xx_tim.c ****   */
 828:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 829:./Lib/Src/stm32f4xx_tim.c **** {
 1528              		.loc 1 829 1
 1529              		.cfi_startproc
 1530              		@ args = 0, pretend = 0, frame = 16
 1531              		@ frame_needed = 1, uses_anonymous_args = 0
 1532              		@ link register save eliminated.
 1533 0000 80B4     		push	{r7}
 1534              		.cfi_def_cfa_offset 4
 1535              		.cfi_offset 7, -4
 1536 0002 85B0     		sub	sp, sp, #20
 1537              		.cfi_def_cfa_offset 24
 1538 0004 00AF     		add	r7, sp, #0
 1539              		.cfi_def_cfa_register 7
 1540 0006 7860     		str	r0, [r7, #4]
 1541 0008 3960     		str	r1, [r7]
 830:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1542              		.loc 1 830 12
 1543 000a 0023     		movs	r3, #0
 1544 000c 7B81     		strh	r3, [r7, #10]	@ movhi
 1545              		.loc 1 830 26
 1546 000e 0023     		movs	r3, #0
 1547 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 1548              		.loc 1 830 39
 1549 0012 0023     		movs	r3, #0
 1550 0014 BB81     		strh	r3, [r7, #12]	@ movhi
 831:./Lib/Src/stm32f4xx_tim.c ****    
 832:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
ARM GAS  /tmp/ccOaESyR.s 			page 43


 833:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 834:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 835:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 836:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 837:./Lib/Src/stm32f4xx_tim.c **** 
 838:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 3: Reset the CC2E Bit */
 839:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 1551              		.loc 1 839 7
 1552 0016 7B68     		ldr	r3, [r7, #4]
 1553 0018 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1554 001a 9BB2     		uxth	r3, r3
 1555              		.loc 1 839 14
 1556 001c 23F48073 		bic	r3, r3, #256
 1557 0020 9AB2     		uxth	r2, r3
 1558 0022 7B68     		ldr	r3, [r7, #4]
 1559 0024 1A84     		strh	r2, [r3, #32]	@ movhi
 840:./Lib/Src/stm32f4xx_tim.c ****   
 841:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 842:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 1560              		.loc 1 842 11
 1561 0026 7B68     		ldr	r3, [r7, #4]
 1562 0028 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1563 002a FB81     		strh	r3, [r7, #14]	@ movhi
 843:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 844:./Lib/Src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1564              		.loc 1 844 10
 1565 002c 7B68     		ldr	r3, [r7, #4]
 1566 002e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1567 0030 BB81     		strh	r3, [r7, #12]	@ movhi
 845:./Lib/Src/stm32f4xx_tim.c ****   
 846:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 847:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1568              		.loc 1 847 12
 1569 0032 7B68     		ldr	r3, [r7, #4]
 1570 0034 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1571 0036 7B81     		strh	r3, [r7, #10]	@ movhi
 848:./Lib/Src/stm32f4xx_tim.c ****     
 849:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 850:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 1572              		.loc 1 850 12
 1573 0038 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1574 003a 23F07003 		bic	r3, r3, #112
 1575 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 851:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 1576              		.loc 1 851 12
 1577 0040 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1578 0042 23F00303 		bic	r3, r3, #3
 1579 0046 7B81     		strh	r3, [r7, #10]	@ movhi
 852:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 853:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 1580              		.loc 1 853 31
 1581 0048 3B68     		ldr	r3, [r7]
 1582 004a 1A88     		ldrh	r2, [r3]
 1583              		.loc 1 853 12
 1584 004c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1585 004e 1343     		orrs	r3, r3, r2
 1586 0050 7B81     		strh	r3, [r7, #10]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 44


 854:./Lib/Src/stm32f4xx_tim.c ****   
 855:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 856:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 1587              		.loc 1 856 11
 1588 0052 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1589 0054 23F40073 		bic	r3, r3, #512
 1590 0058 FB81     		strh	r3, [r7, #14]	@ movhi
 857:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 858:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 1591              		.loc 1 858 41
 1592 005a 3B68     		ldr	r3, [r7]
 1593 005c 9B89     		ldrh	r3, [r3, #12]
 1594              		.loc 1 858 14
 1595 005e 1B02     		lsls	r3, r3, #8
 1596 0060 9AB2     		uxth	r2, r3
 1597              		.loc 1 858 11
 1598 0062 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1599 0064 1343     		orrs	r3, r3, r2
 1600 0066 FB81     		strh	r3, [r7, #14]	@ movhi
 859:./Lib/Src/stm32f4xx_tim.c ****   
 860:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output State */
 861:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 1601              		.loc 1 861 41
 1602 0068 3B68     		ldr	r3, [r7]
 1603 006a 5B88     		ldrh	r3, [r3, #2]
 1604              		.loc 1 861 14
 1605 006c 1B02     		lsls	r3, r3, #8
 1606 006e 9AB2     		uxth	r2, r3
 1607              		.loc 1 861 11
 1608 0070 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1609 0072 1343     		orrs	r3, r3, r2
 1610 0074 FB81     		strh	r3, [r7, #14]	@ movhi
 862:./Lib/Src/stm32f4xx_tim.c ****     
 863:./Lib/Src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 1611              		.loc 1 863 5
 1612 0076 7B68     		ldr	r3, [r7, #4]
 1613 0078 224A     		ldr	r2, .L67
 1614 007a 9342     		cmp	r3, r2
 1615 007c 03D0     		beq	.L65
 1616              		.loc 1 863 21 discriminator 1
 1617 007e 7B68     		ldr	r3, [r7, #4]
 1618 0080 214A     		ldr	r2, .L67+4
 1619 0082 9342     		cmp	r3, r2
 1620 0084 2BD1     		bne	.L66
 1621              	.L65:
 864:./Lib/Src/stm32f4xx_tim.c ****   {
 865:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 866:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 867:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 868:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 869:./Lib/Src/stm32f4xx_tim.c ****     
 870:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output N Polarity level */
 871:./Lib/Src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 1622              		.loc 1 871 13
 1623 0086 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1624 0088 23F40063 		bic	r3, r3, #2048
 1625 008c FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 45


 872:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N Polarity */
 873:./Lib/Src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 1626              		.loc 1 873 43
 1627 008e 3B68     		ldr	r3, [r7]
 1628 0090 DB89     		ldrh	r3, [r3, #14]
 1629              		.loc 1 873 16
 1630 0092 1B02     		lsls	r3, r3, #8
 1631 0094 9AB2     		uxth	r2, r3
 1632              		.loc 1 873 13
 1633 0096 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1634 0098 1343     		orrs	r3, r3, r2
 1635 009a FB81     		strh	r3, [r7, #14]	@ movhi
 874:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output N State */
 875:./Lib/Src/stm32f4xx_tim.c ****     tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 1636              		.loc 1 875 13
 1637 009c FB89     		ldrh	r3, [r7, #14]	@ movhi
 1638 009e 23F48063 		bic	r3, r3, #1024
 1639 00a2 FB81     		strh	r3, [r7, #14]	@ movhi
 876:./Lib/Src/stm32f4xx_tim.c ****     
 877:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N State */
 878:./Lib/Src/stm32f4xx_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 1640              		.loc 1 878 43
 1641 00a4 3B68     		ldr	r3, [r7]
 1642 00a6 9B88     		ldrh	r3, [r3, #4]
 1643              		.loc 1 878 16
 1644 00a8 1B02     		lsls	r3, r3, #8
 1645 00aa 9AB2     		uxth	r2, r3
 1646              		.loc 1 878 13
 1647 00ac FB89     		ldrh	r3, [r7, #14]	@ movhi
 1648 00ae 1343     		orrs	r3, r3, r2
 1649 00b0 FB81     		strh	r3, [r7, #14]	@ movhi
 879:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 880:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 1650              		.loc 1 880 12
 1651 00b2 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1652 00b4 23F48053 		bic	r3, r3, #4096
 1653 00b8 BB81     		strh	r3, [r7, #12]	@ movhi
 881:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 1654              		.loc 1 881 12
 1655 00ba BB89     		ldrh	r3, [r7, #12]	@ movhi
 1656 00bc 23F40053 		bic	r3, r3, #8192
 1657 00c0 BB81     		strh	r3, [r7, #12]	@ movhi
 882:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 883:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 1658              		.loc 1 883 42
 1659 00c2 3B68     		ldr	r3, [r7]
 1660 00c4 1B8A     		ldrh	r3, [r3, #16]
 1661              		.loc 1 883 15
 1662 00c6 1B01     		lsls	r3, r3, #4
 1663 00c8 9AB2     		uxth	r2, r3
 1664              		.loc 1 883 12
 1665 00ca BB89     		ldrh	r3, [r7, #12]	@ movhi
 1666 00cc 1343     		orrs	r3, r3, r2
 1667 00ce BB81     		strh	r3, [r7, #12]	@ movhi
 884:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output N Idle state */
 885:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 1668              		.loc 1 885 42
ARM GAS  /tmp/ccOaESyR.s 			page 46


 1669 00d0 3B68     		ldr	r3, [r7]
 1670 00d2 5B8A     		ldrh	r3, [r3, #18]
 1671              		.loc 1 885 15
 1672 00d4 1B01     		lsls	r3, r3, #4
 1673 00d6 9AB2     		uxth	r2, r3
 1674              		.loc 1 885 12
 1675 00d8 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1676 00da 1343     		orrs	r3, r3, r2
 1677 00dc BB81     		strh	r3, [r7, #12]	@ movhi
 1678              	.L66:
 886:./Lib/Src/stm32f4xx_tim.c ****   }
 887:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 888:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1679              		.loc 1 888 13
 1680 00de 7B68     		ldr	r3, [r7, #4]
 1681 00e0 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1682 00e2 9A80     		strh	r2, [r3, #4]	@ movhi
 889:./Lib/Src/stm32f4xx_tim.c ****   
 890:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
 891:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1683              		.loc 1 891 15
 1684 00e4 7B68     		ldr	r3, [r7, #4]
 1685 00e6 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1686 00e8 9A83     		strh	r2, [r3, #28]	@ movhi
 892:./Lib/Src/stm32f4xx_tim.c ****   
 893:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 894:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 1687              		.loc 1 894 32
 1688 00ea 3B68     		ldr	r3, [r7]
 1689 00ec 9A68     		ldr	r2, [r3, #8]
 1690              		.loc 1 894 14
 1691 00ee 7B68     		ldr	r3, [r7, #4]
 1692 00f0 DA63     		str	r2, [r3, #60]
 895:./Lib/Src/stm32f4xx_tim.c ****   
 896:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 897:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 1693              		.loc 1 897 14
 1694 00f2 7B68     		ldr	r3, [r7, #4]
 1695 00f4 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1696 00f6 1A84     		strh	r2, [r3, #32]	@ movhi
 898:./Lib/Src/stm32f4xx_tim.c **** }
 1697              		.loc 1 898 1
 1698 00f8 00BF     		nop
 1699 00fa 1437     		adds	r7, r7, #20
 1700              		.cfi_def_cfa_offset 4
 1701 00fc BD46     		mov	sp, r7
 1702              		.cfi_def_cfa_register 13
 1703              		@ sp needed
 1704 00fe 5DF8047B 		ldr	r7, [sp], #4
 1705              		.cfi_restore 7
 1706              		.cfi_def_cfa_offset 0
 1707 0102 7047     		bx	lr
 1708              	.L68:
 1709              		.align	2
 1710              	.L67:
 1711 0104 00000140 		.word	1073807360
 1712 0108 00040140 		.word	1073808384
ARM GAS  /tmp/ccOaESyR.s 			page 47


 1713              		.cfi_endproc
 1714              	.LFE140:
 1716              		.section	.text.TIM_OC4Init,"ax",%progbits
 1717              		.align	1
 1718              		.global	TIM_OC4Init
 1719              		.syntax unified
 1720              		.thumb
 1721              		.thumb_func
 1723              	TIM_OC4Init:
 1724              	.LFB141:
 899:./Lib/Src/stm32f4xx_tim.c **** 
 900:./Lib/Src/stm32f4xx_tim.c **** /**
 901:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified parameters
 902:./Lib/Src/stm32f4xx_tim.c ****   *         in the TIM_OCInitStruct.
 903:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 904:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
 905:./Lib/Src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
 906:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 907:./Lib/Src/stm32f4xx_tim.c ****   */
 908:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 909:./Lib/Src/stm32f4xx_tim.c **** {
 1725              		.loc 1 909 1
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 16
 1728              		@ frame_needed = 1, uses_anonymous_args = 0
 1729              		@ link register save eliminated.
 1730 0000 80B4     		push	{r7}
 1731              		.cfi_def_cfa_offset 4
 1732              		.cfi_offset 7, -4
 1733 0002 85B0     		sub	sp, sp, #20
 1734              		.cfi_def_cfa_offset 24
 1735 0004 00AF     		add	r7, sp, #0
 1736              		.cfi_def_cfa_register 7
 1737 0006 7860     		str	r0, [r7, #4]
 1738 0008 3960     		str	r1, [r7]
 910:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1739              		.loc 1 910 12
 1740 000a 0023     		movs	r3, #0
 1741 000c BB81     		strh	r3, [r7, #12]	@ movhi
 1742              		.loc 1 910 26
 1743 000e 0023     		movs	r3, #0
 1744 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 1745              		.loc 1 910 39
 1746 0012 0023     		movs	r3, #0
 1747 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 911:./Lib/Src/stm32f4xx_tim.c ****    
 912:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
 913:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 914:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 915:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 916:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 917:./Lib/Src/stm32f4xx_tim.c **** 
 918:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
 919:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 1748              		.loc 1 919 7
 1749 0016 7B68     		ldr	r3, [r7, #4]
 1750 0018 1B8C     		ldrh	r3, [r3, #32]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 48


 1751 001a 9BB2     		uxth	r3, r3
 1752              		.loc 1 919 14
 1753 001c 23F48053 		bic	r3, r3, #4096
 1754 0020 9AB2     		uxth	r2, r3
 1755 0022 7B68     		ldr	r3, [r7, #4]
 1756 0024 1A84     		strh	r2, [r3, #32]	@ movhi
 920:./Lib/Src/stm32f4xx_tim.c ****   
 921:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
 922:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 1757              		.loc 1 922 11
 1758 0026 7B68     		ldr	r3, [r7, #4]
 1759 0028 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1760 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 923:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CR2 register value */
 924:./Lib/Src/stm32f4xx_tim.c ****   tmpcr2 =  TIMx->CR2;
 1761              		.loc 1 924 10
 1762 002c 7B68     		ldr	r3, [r7, #4]
 1763 002e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1764 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 925:./Lib/Src/stm32f4xx_tim.c ****   
 926:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
 927:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1765              		.loc 1 927 12
 1766 0032 7B68     		ldr	r3, [r7, #4]
 1767 0034 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1768 0036 BB81     		strh	r3, [r7, #12]	@ movhi
 928:./Lib/Src/stm32f4xx_tim.c ****     
 929:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 930:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 1769              		.loc 1 930 12
 1770 0038 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1771 003a 23F4E043 		bic	r3, r3, #28672
 1772 003e BB81     		strh	r3, [r7, #12]	@ movhi
 931:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 1773              		.loc 1 931 12
 1774 0040 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1775 0042 23F44073 		bic	r3, r3, #768
 1776 0046 BB81     		strh	r3, [r7, #12]	@ movhi
 932:./Lib/Src/stm32f4xx_tim.c ****   
 933:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Output Compare Mode */
 934:./Lib/Src/stm32f4xx_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1777              		.loc 1 934 42
 1778 0048 3B68     		ldr	r3, [r7]
 1779 004a 1B88     		ldrh	r3, [r3]
 1780              		.loc 1 934 15
 1781 004c 1B02     		lsls	r3, r3, #8
 1782 004e 9AB2     		uxth	r2, r3
 1783              		.loc 1 934 12
 1784 0050 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1785 0052 1343     		orrs	r3, r3, r2
 1786 0054 BB81     		strh	r3, [r7, #12]	@ movhi
 935:./Lib/Src/stm32f4xx_tim.c ****   
 936:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the Output Polarity level */
 937:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 1787              		.loc 1 937 11
 1788 0056 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1789 0058 23F40053 		bic	r3, r3, #8192
ARM GAS  /tmp/ccOaESyR.s 			page 49


 1790 005c 7B81     		strh	r3, [r7, #10]	@ movhi
 938:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output Compare Polarity */
 939:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 1791              		.loc 1 939 41
 1792 005e 3B68     		ldr	r3, [r7]
 1793 0060 9B89     		ldrh	r3, [r3, #12]
 1794              		.loc 1 939 14
 1795 0062 1B03     		lsls	r3, r3, #12
 1796 0064 9AB2     		uxth	r2, r3
 1797              		.loc 1 939 11
 1798 0066 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1799 0068 1343     		orrs	r3, r3, r2
 1800 006a 7B81     		strh	r3, [r7, #10]	@ movhi
 940:./Lib/Src/stm32f4xx_tim.c ****   
 941:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Output State */
 942:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 1801              		.loc 1 942 41
 1802 006c 3B68     		ldr	r3, [r7]
 1803 006e 5B88     		ldrh	r3, [r3, #2]
 1804              		.loc 1 942 14
 1805 0070 1B03     		lsls	r3, r3, #12
 1806 0072 9AB2     		uxth	r2, r3
 1807              		.loc 1 942 11
 1808 0074 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1809 0076 1343     		orrs	r3, r3, r2
 1810 0078 7B81     		strh	r3, [r7, #10]	@ movhi
 943:./Lib/Src/stm32f4xx_tim.c ****   
 944:./Lib/Src/stm32f4xx_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 1811              		.loc 1 944 5
 1812 007a 7B68     		ldr	r3, [r7, #4]
 1813 007c 124A     		ldr	r2, .L72
 1814 007e 9342     		cmp	r3, r2
 1815 0080 03D0     		beq	.L70
 1816              		.loc 1 944 21 discriminator 1
 1817 0082 7B68     		ldr	r3, [r7, #4]
 1818 0084 114A     		ldr	r2, .L72+4
 1819 0086 9342     		cmp	r3, r2
 1820 0088 0AD1     		bne	.L71
 1821              	.L70:
 945:./Lib/Src/stm32f4xx_tim.c ****   {
 946:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 947:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the Output Compare IDLE State */
 948:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 1822              		.loc 1 948 12
 1823 008a FB89     		ldrh	r3, [r7, #14]	@ movhi
 1824 008c 23F48043 		bic	r3, r3, #16384
 1825 0090 FB81     		strh	r3, [r7, #14]	@ movhi
 949:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Output Idle state */
 950:./Lib/Src/stm32f4xx_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 1826              		.loc 1 950 42
 1827 0092 3B68     		ldr	r3, [r7]
 1828 0094 1B8A     		ldrh	r3, [r3, #16]
 1829              		.loc 1 950 15
 1830 0096 9B01     		lsls	r3, r3, #6
 1831 0098 9AB2     		uxth	r2, r3
 1832              		.loc 1 950 12
 1833 009a FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 50


 1834 009c 1343     		orrs	r3, r3, r2
 1835 009e FB81     		strh	r3, [r7, #14]	@ movhi
 1836              	.L71:
 951:./Lib/Src/stm32f4xx_tim.c ****   }
 952:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CR2 */
 953:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR2 = tmpcr2;
 1837              		.loc 1 953 13
 1838 00a0 7B68     		ldr	r3, [r7, #4]
 1839 00a2 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1840 00a4 9A80     		strh	r2, [r3, #4]	@ movhi
 954:./Lib/Src/stm32f4xx_tim.c ****   
 955:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */  
 956:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1841              		.loc 1 956 15
 1842 00a6 7B68     		ldr	r3, [r7, #4]
 1843 00a8 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1844 00aa 9A83     		strh	r2, [r3, #28]	@ movhi
 957:./Lib/Src/stm32f4xx_tim.c ****     
 958:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare Register value */
 959:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 1845              		.loc 1 959 32
 1846 00ac 3B68     		ldr	r3, [r7]
 1847 00ae 9A68     		ldr	r2, [r3, #8]
 1848              		.loc 1 959 14
 1849 00b0 7B68     		ldr	r3, [r7, #4]
 1850 00b2 1A64     		str	r2, [r3, #64]
 960:./Lib/Src/stm32f4xx_tim.c ****   
 961:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
 962:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 1851              		.loc 1 962 14
 1852 00b4 7B68     		ldr	r3, [r7, #4]
 1853 00b6 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1854 00b8 1A84     		strh	r2, [r3, #32]	@ movhi
 963:./Lib/Src/stm32f4xx_tim.c **** }
 1855              		.loc 1 963 1
 1856 00ba 00BF     		nop
 1857 00bc 1437     		adds	r7, r7, #20
 1858              		.cfi_def_cfa_offset 4
 1859 00be BD46     		mov	sp, r7
 1860              		.cfi_def_cfa_register 13
 1861              		@ sp needed
 1862 00c0 5DF8047B 		ldr	r7, [sp], #4
 1863              		.cfi_restore 7
 1864              		.cfi_def_cfa_offset 0
 1865 00c4 7047     		bx	lr
 1866              	.L73:
 1867 00c6 00BF     		.align	2
 1868              	.L72:
 1869 00c8 00000140 		.word	1073807360
 1870 00cc 00040140 		.word	1073808384
 1871              		.cfi_endproc
 1872              	.LFE141:
 1874              		.section	.text.TIM_OCStructInit,"ax",%progbits
 1875              		.align	1
 1876              		.global	TIM_OCStructInit
 1877              		.syntax unified
 1878              		.thumb
ARM GAS  /tmp/ccOaESyR.s 			page 51


 1879              		.thumb_func
 1881              	TIM_OCStructInit:
 1882              	.LFB142:
 964:./Lib/Src/stm32f4xx_tim.c **** 
 965:./Lib/Src/stm32f4xx_tim.c **** /**
 966:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
 967:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
 968:./Lib/Src/stm32f4xx_tim.c ****   *         be initialized.
 969:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
 970:./Lib/Src/stm32f4xx_tim.c ****   */
 971:./Lib/Src/stm32f4xx_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
 972:./Lib/Src/stm32f4xx_tim.c **** {
 1883              		.loc 1 972 1
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 8
 1886              		@ frame_needed = 1, uses_anonymous_args = 0
 1887              		@ link register save eliminated.
 1888 0000 80B4     		push	{r7}
 1889              		.cfi_def_cfa_offset 4
 1890              		.cfi_offset 7, -4
 1891 0002 83B0     		sub	sp, sp, #12
 1892              		.cfi_def_cfa_offset 16
 1893 0004 00AF     		add	r7, sp, #0
 1894              		.cfi_def_cfa_register 7
 1895 0006 7860     		str	r0, [r7, #4]
 973:./Lib/Src/stm32f4xx_tim.c ****   /* Set the default configuration */
 974:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 1896              		.loc 1 974 32
 1897 0008 7B68     		ldr	r3, [r7, #4]
 1898 000a 0022     		movs	r2, #0
 1899 000c 1A80     		strh	r2, [r3]	@ movhi
 975:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1900              		.loc 1 975 37
 1901 000e 7B68     		ldr	r3, [r7, #4]
 1902 0010 0022     		movs	r2, #0
 1903 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 976:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1904              		.loc 1 976 38
 1905 0014 7B68     		ldr	r3, [r7, #4]
 1906 0016 0022     		movs	r2, #0
 1907 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 977:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 1908              		.loc 1 977 31
 1909 001a 7B68     		ldr	r3, [r7, #4]
 1910 001c 0022     		movs	r2, #0
 1911 001e 9A60     		str	r2, [r3, #8]
 978:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1912              		.loc 1 978 36
 1913 0020 7B68     		ldr	r3, [r7, #4]
 1914 0022 0022     		movs	r2, #0
 1915 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 979:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1916              		.loc 1 979 37
 1917 0026 7B68     		ldr	r3, [r7, #4]
 1918 0028 0022     		movs	r2, #0
 1919 002a DA81     		strh	r2, [r3, #14]	@ movhi
 980:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
ARM GAS  /tmp/ccOaESyR.s 			page 52


 1920              		.loc 1 980 37
 1921 002c 7B68     		ldr	r3, [r7, #4]
 1922 002e 0022     		movs	r2, #0
 1923 0030 1A82     		strh	r2, [r3, #16]	@ movhi
 981:./Lib/Src/stm32f4xx_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1924              		.loc 1 981 38
 1925 0032 7B68     		ldr	r3, [r7, #4]
 1926 0034 0022     		movs	r2, #0
 1927 0036 5A82     		strh	r2, [r3, #18]	@ movhi
 982:./Lib/Src/stm32f4xx_tim.c **** }
 1928              		.loc 1 982 1
 1929 0038 00BF     		nop
 1930 003a 0C37     		adds	r7, r7, #12
 1931              		.cfi_def_cfa_offset 4
 1932 003c BD46     		mov	sp, r7
 1933              		.cfi_def_cfa_register 13
 1934              		@ sp needed
 1935 003e 5DF8047B 		ldr	r7, [sp], #4
 1936              		.cfi_restore 7
 1937              		.cfi_def_cfa_offset 0
 1938 0042 7047     		bx	lr
 1939              		.cfi_endproc
 1940              	.LFE142:
 1942              		.section	.text.TIM_SelectOCxM,"ax",%progbits
 1943              		.align	1
 1944              		.global	TIM_SelectOCxM
 1945              		.syntax unified
 1946              		.thumb
 1947              		.thumb_func
 1949              	TIM_SelectOCxM:
 1950              	.LFB143:
 983:./Lib/Src/stm32f4xx_tim.c **** 
 984:./Lib/Src/stm32f4xx_tim.c **** /**
 985:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
 986:./Lib/Src/stm32f4xx_tim.c ****   * @note   This function disables the selected channel before changing the Output
 987:./Lib/Src/stm32f4xx_tim.c ****   *         Compare Mode. If needed, user has to enable this channel using
 988:./Lib/Src/stm32f4xx_tim.c ****   *         TIM_CCxCmd() and TIM_CCxNCmd() functions.
 989:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
 990:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
 991:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
 992:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
 993:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
 994:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
 995:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
 996:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
 997:./Lib/Src/stm32f4xx_tim.c ****   *           This parameter can be one of the following values:
 998:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Timing
 999:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Active
1000:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_Toggle
1001:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_PWM1
1002:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCMode_PWM2
1003:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active
1004:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive
1005:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1006:./Lib/Src/stm32f4xx_tim.c ****   */
1007:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
1008:./Lib/Src/stm32f4xx_tim.c **** {
ARM GAS  /tmp/ccOaESyR.s 			page 53


 1951              		.loc 1 1008 1
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 16
 1954              		@ frame_needed = 1, uses_anonymous_args = 0
 1955              		@ link register save eliminated.
 1956 0000 80B4     		push	{r7}
 1957              		.cfi_def_cfa_offset 4
 1958              		.cfi_offset 7, -4
 1959 0002 85B0     		sub	sp, sp, #20
 1960              		.cfi_def_cfa_offset 24
 1961 0004 00AF     		add	r7, sp, #0
 1962              		.cfi_def_cfa_register 7
 1963 0006 7860     		str	r0, [r7, #4]
 1964 0008 0B46     		mov	r3, r1
 1965 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 1966 000c 1346     		mov	r3, r2	@ movhi
 1967 000e 3B80     		strh	r3, [r7]	@ movhi
1009:./Lib/Src/stm32f4xx_tim.c ****   uint32_t tmp = 0;
 1968              		.loc 1 1009 12
 1969 0010 0023     		movs	r3, #0
 1970 0012 FB60     		str	r3, [r7, #12]
1010:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmp1 = 0;
 1971              		.loc 1 1010 12
 1972 0014 0023     		movs	r3, #0
 1973 0016 7B81     		strh	r3, [r7, #10]	@ movhi
1011:./Lib/Src/stm32f4xx_tim.c **** 
1012:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1013:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1014:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1015:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
1016:./Lib/Src/stm32f4xx_tim.c **** 
1017:./Lib/Src/stm32f4xx_tim.c ****   tmp = (uint32_t) TIMx;
 1974              		.loc 1 1017 7
 1975 0018 7B68     		ldr	r3, [r7, #4]
 1976 001a FB60     		str	r3, [r7, #12]
1018:./Lib/Src/stm32f4xx_tim.c ****   tmp += CCMR_OFFSET;
 1977              		.loc 1 1018 7
 1978 001c FB68     		ldr	r3, [r7, #12]
 1979 001e 1833     		adds	r3, r3, #24
 1980 0020 FB60     		str	r3, [r7, #12]
1019:./Lib/Src/stm32f4xx_tim.c **** 
1020:./Lib/Src/stm32f4xx_tim.c ****   tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 1981              		.loc 1 1020 26
 1982 0022 7B88     		ldrh	r3, [r7, #2]
 1983              		.loc 1 1020 23
 1984 0024 0122     		movs	r2, #1
 1985 0026 02FA03F3 		lsl	r3, r2, r3
 1986              		.loc 1 1020 8
 1987 002a 7B81     		strh	r3, [r7, #10]	@ movhi
1021:./Lib/Src/stm32f4xx_tim.c **** 
1022:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
1023:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 1988              		.loc 1 1023 7
 1989 002c 7B68     		ldr	r3, [r7, #4]
 1990 002e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1991 0030 9AB2     		uxth	r2, r3
 1992              		.loc 1 1023 17
ARM GAS  /tmp/ccOaESyR.s 			page 54


 1993 0032 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1994 0034 DB43     		mvns	r3, r3
 1995 0036 9BB2     		uxth	r3, r3
 1996              		.loc 1 1023 14
 1997 0038 1340     		ands	r3, r3, r2
 1998 003a 9AB2     		uxth	r2, r3
 1999 003c 7B68     		ldr	r3, [r7, #4]
 2000 003e 1A84     		strh	r2, [r3, #32]	@ movhi
1024:./Lib/Src/stm32f4xx_tim.c **** 
1025:./Lib/Src/stm32f4xx_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 2001              		.loc 1 1025 5
 2002 0040 7B88     		ldrh	r3, [r7, #2]
 2003 0042 002B     		cmp	r3, #0
 2004 0044 02D0     		beq	.L76
 2005              		.loc 1 1025 37 discriminator 1
 2006 0046 7B88     		ldrh	r3, [r7, #2]
 2007 0048 082B     		cmp	r3, #8
 2008 004a 14D1     		bne	.L77
 2009              	.L76:
1026:./Lib/Src/stm32f4xx_tim.c ****   {
1027:./Lib/Src/stm32f4xx_tim.c ****     tmp += (TIM_Channel>>1);
 2010              		.loc 1 1027 24
 2011 004c 7B88     		ldrh	r3, [r7, #2]
 2012 004e 5B08     		lsrs	r3, r3, #1
 2013 0050 9BB2     		uxth	r3, r3
 2014 0052 1A46     		mov	r2, r3
 2015              		.loc 1 1027 9
 2016 0054 FB68     		ldr	r3, [r7, #12]
 2017 0056 1344     		add	r3, r3, r2
 2018 0058 FB60     		str	r3, [r7, #12]
1028:./Lib/Src/stm32f4xx_tim.c **** 
1029:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1030:./Lib/Src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 2019              		.loc 1 1030 5
 2020 005a FB68     		ldr	r3, [r7, #12]
 2021 005c 1968     		ldr	r1, [r3]
 2022 005e FA68     		ldr	r2, [r7, #12]
 2023              		.loc 1 1030 28
 2024 0060 4FF68F73 		movw	r3, #65423
 2025 0064 0B40     		ands	r3, r3, r1
 2026 0066 1360     		str	r3, [r2]
1031:./Lib/Src/stm32f4xx_tim.c ****    
1032:./Lib/Src/stm32f4xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1033:./Lib/Src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
 2027              		.loc 1 1033 5
 2028 0068 FB68     		ldr	r3, [r7, #12]
 2029 006a 1968     		ldr	r1, [r3]
 2030              		.loc 1 1033 28
 2031 006c 3A88     		ldrh	r2, [r7]
 2032              		.loc 1 1033 5
 2033 006e FB68     		ldr	r3, [r7, #12]
 2034              		.loc 1 1033 28
 2035 0070 0A43     		orrs	r2, r2, r1
 2036 0072 1A60     		str	r2, [r3]
 2037 0074 19E0     		b	.L78
 2038              	.L77:
1034:./Lib/Src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccOaESyR.s 			page 55


1035:./Lib/Src/stm32f4xx_tim.c ****   else
1036:./Lib/Src/stm32f4xx_tim.c ****   {
1037:./Lib/Src/stm32f4xx_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 2039              		.loc 1 1037 12
 2040 0076 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2041 0078 043B     		subs	r3, r3, #4
 2042 007a 9BB2     		uxth	r3, r3
 2043              		.loc 1 1037 49
 2044 007c 5B08     		lsrs	r3, r3, #1
 2045 007e 9BB2     		uxth	r3, r3
 2046 0080 1A46     		mov	r2, r3
 2047              		.loc 1 1037 9
 2048 0082 FB68     		ldr	r3, [r7, #12]
 2049 0084 1344     		add	r3, r3, r2
 2050 0086 FB60     		str	r3, [r7, #12]
1038:./Lib/Src/stm32f4xx_tim.c **** 
1039:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
1040:./Lib/Src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 2051              		.loc 1 1040 5
 2052 0088 FB68     		ldr	r3, [r7, #12]
 2053 008a 1968     		ldr	r1, [r3]
 2054 008c FA68     		ldr	r2, [r7, #12]
 2055              		.loc 1 1040 28
 2056 008e 48F6FF73 		movw	r3, #36863
 2057 0092 0B40     		ands	r3, r3, r1
 2058 0094 1360     		str	r3, [r2]
1041:./Lib/Src/stm32f4xx_tim.c ****     
1042:./Lib/Src/stm32f4xx_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
1043:./Lib/Src/stm32f4xx_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 2059              		.loc 1 1043 5
 2060 0096 FB68     		ldr	r3, [r7, #12]
 2061 0098 1A68     		ldr	r2, [r3]
 2062              		.loc 1 1043 31
 2063 009a 3B88     		ldrh	r3, [r7]	@ movhi
 2064 009c 1B02     		lsls	r3, r3, #8
 2065 009e 9BB2     		uxth	r3, r3
 2066 00a0 1946     		mov	r1, r3
 2067              		.loc 1 1043 5
 2068 00a2 FB68     		ldr	r3, [r7, #12]
 2069              		.loc 1 1043 28
 2070 00a4 0A43     		orrs	r2, r2, r1
 2071 00a6 1A60     		str	r2, [r3]
1044:./Lib/Src/stm32f4xx_tim.c ****   }
1045:./Lib/Src/stm32f4xx_tim.c **** }
 2072              		.loc 1 1045 1
 2073 00a8 00BF     		nop
 2074              	.L78:
 2075 00aa 00BF     		nop
 2076 00ac 1437     		adds	r7, r7, #20
 2077              		.cfi_def_cfa_offset 4
 2078 00ae BD46     		mov	sp, r7
 2079              		.cfi_def_cfa_register 13
 2080              		@ sp needed
 2081 00b0 5DF8047B 		ldr	r7, [sp], #4
 2082              		.cfi_restore 7
 2083              		.cfi_def_cfa_offset 0
 2084 00b4 7047     		bx	lr
ARM GAS  /tmp/ccOaESyR.s 			page 56


 2085              		.cfi_endproc
 2086              	.LFE143:
 2088              		.section	.text.TIM_SetCompare1,"ax",%progbits
 2089              		.align	1
 2090              		.global	TIM_SetCompare1
 2091              		.syntax unified
 2092              		.thumb
 2093              		.thumb_func
 2095              	TIM_SetCompare1:
 2096              	.LFB144:
1046:./Lib/Src/stm32f4xx_tim.c **** 
1047:./Lib/Src/stm32f4xx_tim.c **** /**
1048:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
1049:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1050:./Lib/Src/stm32f4xx_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
1051:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1052:./Lib/Src/stm32f4xx_tim.c ****   */
1053:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
1054:./Lib/Src/stm32f4xx_tim.c **** {
 2097              		.loc 1 1054 1
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 8
 2100              		@ frame_needed = 1, uses_anonymous_args = 0
 2101              		@ link register save eliminated.
 2102 0000 80B4     		push	{r7}
 2103              		.cfi_def_cfa_offset 4
 2104              		.cfi_offset 7, -4
 2105 0002 83B0     		sub	sp, sp, #12
 2106              		.cfi_def_cfa_offset 16
 2107 0004 00AF     		add	r7, sp, #0
 2108              		.cfi_def_cfa_register 7
 2109 0006 7860     		str	r0, [r7, #4]
 2110 0008 3960     		str	r1, [r7]
1055:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1056:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1057:./Lib/Src/stm32f4xx_tim.c **** 
1058:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare1 Register value */
1059:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR1 = Compare1;
 2111              		.loc 1 1059 14
 2112 000a 7B68     		ldr	r3, [r7, #4]
 2113 000c 3A68     		ldr	r2, [r7]
 2114 000e 5A63     		str	r2, [r3, #52]
1060:./Lib/Src/stm32f4xx_tim.c **** }
 2115              		.loc 1 1060 1
 2116 0010 00BF     		nop
 2117 0012 0C37     		adds	r7, r7, #12
 2118              		.cfi_def_cfa_offset 4
 2119 0014 BD46     		mov	sp, r7
 2120              		.cfi_def_cfa_register 13
 2121              		@ sp needed
 2122 0016 5DF8047B 		ldr	r7, [sp], #4
 2123              		.cfi_restore 7
 2124              		.cfi_def_cfa_offset 0
 2125 001a 7047     		bx	lr
 2126              		.cfi_endproc
 2127              	.LFE144:
 2129              		.section	.text.TIM_SetCompare2,"ax",%progbits
ARM GAS  /tmp/ccOaESyR.s 			page 57


 2130              		.align	1
 2131              		.global	TIM_SetCompare2
 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2136              	TIM_SetCompare2:
 2137              	.LFB145:
1061:./Lib/Src/stm32f4xx_tim.c **** 
1062:./Lib/Src/stm32f4xx_tim.c **** /**
1063:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
1064:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1065:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
1066:./Lib/Src/stm32f4xx_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
1067:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1068:./Lib/Src/stm32f4xx_tim.c ****   */
1069:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
1070:./Lib/Src/stm32f4xx_tim.c **** {
 2138              		.loc 1 1070 1
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 8
 2141              		@ frame_needed = 1, uses_anonymous_args = 0
 2142              		@ link register save eliminated.
 2143 0000 80B4     		push	{r7}
 2144              		.cfi_def_cfa_offset 4
 2145              		.cfi_offset 7, -4
 2146 0002 83B0     		sub	sp, sp, #12
 2147              		.cfi_def_cfa_offset 16
 2148 0004 00AF     		add	r7, sp, #0
 2149              		.cfi_def_cfa_register 7
 2150 0006 7860     		str	r0, [r7, #4]
 2151 0008 3960     		str	r1, [r7]
1071:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1072:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1073:./Lib/Src/stm32f4xx_tim.c **** 
1074:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare2 Register value */
1075:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR2 = Compare2;
 2152              		.loc 1 1075 14
 2153 000a 7B68     		ldr	r3, [r7, #4]
 2154 000c 3A68     		ldr	r2, [r7]
 2155 000e 9A63     		str	r2, [r3, #56]
1076:./Lib/Src/stm32f4xx_tim.c **** }
 2156              		.loc 1 1076 1
 2157 0010 00BF     		nop
 2158 0012 0C37     		adds	r7, r7, #12
 2159              		.cfi_def_cfa_offset 4
 2160 0014 BD46     		mov	sp, r7
 2161              		.cfi_def_cfa_register 13
 2162              		@ sp needed
 2163 0016 5DF8047B 		ldr	r7, [sp], #4
 2164              		.cfi_restore 7
 2165              		.cfi_def_cfa_offset 0
 2166 001a 7047     		bx	lr
 2167              		.cfi_endproc
 2168              	.LFE145:
 2170              		.section	.text.TIM_SetCompare3,"ax",%progbits
 2171              		.align	1
 2172              		.global	TIM_SetCompare3
ARM GAS  /tmp/ccOaESyR.s 			page 58


 2173              		.syntax unified
 2174              		.thumb
 2175              		.thumb_func
 2177              	TIM_SetCompare3:
 2178              	.LFB146:
1077:./Lib/Src/stm32f4xx_tim.c **** 
1078:./Lib/Src/stm32f4xx_tim.c **** /**
1079:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
1080:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1081:./Lib/Src/stm32f4xx_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
1082:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1083:./Lib/Src/stm32f4xx_tim.c ****   */
1084:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
1085:./Lib/Src/stm32f4xx_tim.c **** {
 2179              		.loc 1 1085 1
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 8
 2182              		@ frame_needed = 1, uses_anonymous_args = 0
 2183              		@ link register save eliminated.
 2184 0000 80B4     		push	{r7}
 2185              		.cfi_def_cfa_offset 4
 2186              		.cfi_offset 7, -4
 2187 0002 83B0     		sub	sp, sp, #12
 2188              		.cfi_def_cfa_offset 16
 2189 0004 00AF     		add	r7, sp, #0
 2190              		.cfi_def_cfa_register 7
 2191 0006 7860     		str	r0, [r7, #4]
 2192 0008 3960     		str	r1, [r7]
1086:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1087:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1088:./Lib/Src/stm32f4xx_tim.c **** 
1089:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare3 Register value */
1090:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR3 = Compare3;
 2193              		.loc 1 1090 14
 2194 000a 7B68     		ldr	r3, [r7, #4]
 2195 000c 3A68     		ldr	r2, [r7]
 2196 000e DA63     		str	r2, [r3, #60]
1091:./Lib/Src/stm32f4xx_tim.c **** }
 2197              		.loc 1 1091 1
 2198 0010 00BF     		nop
 2199 0012 0C37     		adds	r7, r7, #12
 2200              		.cfi_def_cfa_offset 4
 2201 0014 BD46     		mov	sp, r7
 2202              		.cfi_def_cfa_register 13
 2203              		@ sp needed
 2204 0016 5DF8047B 		ldr	r7, [sp], #4
 2205              		.cfi_restore 7
 2206              		.cfi_def_cfa_offset 0
 2207 001a 7047     		bx	lr
 2208              		.cfi_endproc
 2209              	.LFE146:
 2211              		.section	.text.TIM_SetCompare4,"ax",%progbits
 2212              		.align	1
 2213              		.global	TIM_SetCompare4
 2214              		.syntax unified
 2215              		.thumb
 2216              		.thumb_func
ARM GAS  /tmp/ccOaESyR.s 			page 59


 2218              	TIM_SetCompare4:
 2219              	.LFB147:
1092:./Lib/Src/stm32f4xx_tim.c **** 
1093:./Lib/Src/stm32f4xx_tim.c **** /**
1094:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
1095:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1096:./Lib/Src/stm32f4xx_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
1097:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1098:./Lib/Src/stm32f4xx_tim.c ****   */
1099:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
1100:./Lib/Src/stm32f4xx_tim.c **** {
 2220              		.loc 1 1100 1
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 8
 2223              		@ frame_needed = 1, uses_anonymous_args = 0
 2224              		@ link register save eliminated.
 2225 0000 80B4     		push	{r7}
 2226              		.cfi_def_cfa_offset 4
 2227              		.cfi_offset 7, -4
 2228 0002 83B0     		sub	sp, sp, #12
 2229              		.cfi_def_cfa_offset 16
 2230 0004 00AF     		add	r7, sp, #0
 2231              		.cfi_def_cfa_register 7
 2232 0006 7860     		str	r0, [r7, #4]
 2233 0008 3960     		str	r1, [r7]
1101:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1102:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1103:./Lib/Src/stm32f4xx_tim.c **** 
1104:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Capture Compare4 Register value */
1105:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCR4 = Compare4;
 2234              		.loc 1 1105 14
 2235 000a 7B68     		ldr	r3, [r7, #4]
 2236 000c 3A68     		ldr	r2, [r7]
 2237 000e 1A64     		str	r2, [r3, #64]
1106:./Lib/Src/stm32f4xx_tim.c **** }
 2238              		.loc 1 1106 1
 2239 0010 00BF     		nop
 2240 0012 0C37     		adds	r7, r7, #12
 2241              		.cfi_def_cfa_offset 4
 2242 0014 BD46     		mov	sp, r7
 2243              		.cfi_def_cfa_register 13
 2244              		@ sp needed
 2245 0016 5DF8047B 		ldr	r7, [sp], #4
 2246              		.cfi_restore 7
 2247              		.cfi_def_cfa_offset 0
 2248 001a 7047     		bx	lr
 2249              		.cfi_endproc
 2250              	.LFE147:
 2252              		.section	.text.TIM_ForcedOC1Config,"ax",%progbits
 2253              		.align	1
 2254              		.global	TIM_ForcedOC1Config
 2255              		.syntax unified
 2256              		.thumb
 2257              		.thumb_func
 2259              	TIM_ForcedOC1Config:
 2260              	.LFB148:
1107:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 60


1108:./Lib/Src/stm32f4xx_tim.c **** /**
1109:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1110:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1111:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1112:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1113:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
1114:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1115:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1116:./Lib/Src/stm32f4xx_tim.c ****   */
1117:./Lib/Src/stm32f4xx_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1118:./Lib/Src/stm32f4xx_tim.c **** {
 2261              		.loc 1 1118 1
 2262              		.cfi_startproc
 2263              		@ args = 0, pretend = 0, frame = 16
 2264              		@ frame_needed = 1, uses_anonymous_args = 0
 2265              		@ link register save eliminated.
 2266 0000 80B4     		push	{r7}
 2267              		.cfi_def_cfa_offset 4
 2268              		.cfi_offset 7, -4
 2269 0002 85B0     		sub	sp, sp, #20
 2270              		.cfi_def_cfa_offset 24
 2271 0004 00AF     		add	r7, sp, #0
 2272              		.cfi_def_cfa_register 7
 2273 0006 7860     		str	r0, [r7, #4]
 2274 0008 0B46     		mov	r3, r1
 2275 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1119:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2276              		.loc 1 1119 12
 2277 000c 0023     		movs	r3, #0
 2278 000e FB81     		strh	r3, [r7, #14]	@ movhi
1120:./Lib/Src/stm32f4xx_tim.c **** 
1121:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1122:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1123:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1124:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2279              		.loc 1 1124 12
 2280 0010 7B68     		ldr	r3, [r7, #4]
 2281 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2282 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1125:./Lib/Src/stm32f4xx_tim.c **** 
1126:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC1M Bits */
1127:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 2283              		.loc 1 1127 12
 2284 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2285 0018 23F07003 		bic	r3, r3, #112
 2286 001c FB81     		strh	r3, [r7, #14]	@ movhi
1128:./Lib/Src/stm32f4xx_tim.c **** 
1129:./Lib/Src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1130:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
 2287              		.loc 1 1130 12
 2288 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2289 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2290 0022 1343     		orrs	r3, r3, r2
 2291 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1131:./Lib/Src/stm32f4xx_tim.c **** 
1132:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1133:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
ARM GAS  /tmp/ccOaESyR.s 			page 61


 2292              		.loc 1 1133 15
 2293 0026 7B68     		ldr	r3, [r7, #4]
 2294 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2295 002a 1A83     		strh	r2, [r3, #24]	@ movhi
1134:./Lib/Src/stm32f4xx_tim.c **** }
 2296              		.loc 1 1134 1
 2297 002c 00BF     		nop
 2298 002e 1437     		adds	r7, r7, #20
 2299              		.cfi_def_cfa_offset 4
 2300 0030 BD46     		mov	sp, r7
 2301              		.cfi_def_cfa_register 13
 2302              		@ sp needed
 2303 0032 5DF8047B 		ldr	r7, [sp], #4
 2304              		.cfi_restore 7
 2305              		.cfi_def_cfa_offset 0
 2306 0036 7047     		bx	lr
 2307              		.cfi_endproc
 2308              	.LFE148:
 2310              		.section	.text.TIM_ForcedOC2Config,"ax",%progbits
 2311              		.align	1
 2312              		.global	TIM_ForcedOC2Config
 2313              		.syntax unified
 2314              		.thumb
 2315              		.thumb_func
 2317              	TIM_ForcedOC2Config:
 2318              	.LFB149:
1135:./Lib/Src/stm32f4xx_tim.c **** 
1136:./Lib/Src/stm32f4xx_tim.c **** /**
1137:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1138:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1139:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
1140:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1141:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1142:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
1143:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1144:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1145:./Lib/Src/stm32f4xx_tim.c ****   */
1146:./Lib/Src/stm32f4xx_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1147:./Lib/Src/stm32f4xx_tim.c **** {
 2319              		.loc 1 1147 1
 2320              		.cfi_startproc
 2321              		@ args = 0, pretend = 0, frame = 16
 2322              		@ frame_needed = 1, uses_anonymous_args = 0
 2323              		@ link register save eliminated.
 2324 0000 80B4     		push	{r7}
 2325              		.cfi_def_cfa_offset 4
 2326              		.cfi_offset 7, -4
 2327 0002 85B0     		sub	sp, sp, #20
 2328              		.cfi_def_cfa_offset 24
 2329 0004 00AF     		add	r7, sp, #0
 2330              		.cfi_def_cfa_register 7
 2331 0006 7860     		str	r0, [r7, #4]
 2332 0008 0B46     		mov	r3, r1
 2333 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1148:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2334              		.loc 1 1148 12
 2335 000c 0023     		movs	r3, #0
ARM GAS  /tmp/ccOaESyR.s 			page 62


 2336 000e FB81     		strh	r3, [r7, #14]	@ movhi
1149:./Lib/Src/stm32f4xx_tim.c **** 
1150:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1151:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1152:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1153:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2337              		.loc 1 1153 12
 2338 0010 7B68     		ldr	r3, [r7, #4]
 2339 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2340 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1154:./Lib/Src/stm32f4xx_tim.c **** 
1155:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC2M Bits */
1156:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 2341              		.loc 1 1156 12
 2342 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2343 0018 23F4E043 		bic	r3, r3, #28672
 2344 001c FB81     		strh	r3, [r7, #14]	@ movhi
1157:./Lib/Src/stm32f4xx_tim.c **** 
1158:./Lib/Src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1159:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 2345              		.loc 1 1159 15
 2346 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2347 0020 1B02     		lsls	r3, r3, #8
 2348 0022 9AB2     		uxth	r2, r3
 2349              		.loc 1 1159 12
 2350 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2351 0026 1343     		orrs	r3, r3, r2
 2352 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1160:./Lib/Src/stm32f4xx_tim.c **** 
1161:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1162:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2353              		.loc 1 1162 15
 2354 002a 7B68     		ldr	r3, [r7, #4]
 2355 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2356 002e 1A83     		strh	r2, [r3, #24]	@ movhi
1163:./Lib/Src/stm32f4xx_tim.c **** }
 2357              		.loc 1 1163 1
 2358 0030 00BF     		nop
 2359 0032 1437     		adds	r7, r7, #20
 2360              		.cfi_def_cfa_offset 4
 2361 0034 BD46     		mov	sp, r7
 2362              		.cfi_def_cfa_register 13
 2363              		@ sp needed
 2364 0036 5DF8047B 		ldr	r7, [sp], #4
 2365              		.cfi_restore 7
 2366              		.cfi_def_cfa_offset 0
 2367 003a 7047     		bx	lr
 2368              		.cfi_endproc
 2369              	.LFE149:
 2371              		.section	.text.TIM_ForcedOC3Config,"ax",%progbits
 2372              		.align	1
 2373              		.global	TIM_ForcedOC3Config
 2374              		.syntax unified
 2375              		.thumb
 2376              		.thumb_func
 2378              	TIM_ForcedOC3Config:
 2379              	.LFB150:
ARM GAS  /tmp/ccOaESyR.s 			page 63


1164:./Lib/Src/stm32f4xx_tim.c **** 
1165:./Lib/Src/stm32f4xx_tim.c **** /**
1166:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1167:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1168:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1169:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1170:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
1171:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1172:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1173:./Lib/Src/stm32f4xx_tim.c ****   */
1174:./Lib/Src/stm32f4xx_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1175:./Lib/Src/stm32f4xx_tim.c **** {
 2380              		.loc 1 1175 1
 2381              		.cfi_startproc
 2382              		@ args = 0, pretend = 0, frame = 16
 2383              		@ frame_needed = 1, uses_anonymous_args = 0
 2384              		@ link register save eliminated.
 2385 0000 80B4     		push	{r7}
 2386              		.cfi_def_cfa_offset 4
 2387              		.cfi_offset 7, -4
 2388 0002 85B0     		sub	sp, sp, #20
 2389              		.cfi_def_cfa_offset 24
 2390 0004 00AF     		add	r7, sp, #0
 2391              		.cfi_def_cfa_register 7
 2392 0006 7860     		str	r0, [r7, #4]
 2393 0008 0B46     		mov	r3, r1
 2394 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1176:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2395              		.loc 1 1176 12
 2396 000c 0023     		movs	r3, #0
 2397 000e FB81     		strh	r3, [r7, #14]	@ movhi
1177:./Lib/Src/stm32f4xx_tim.c **** 
1178:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1179:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1180:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1181:./Lib/Src/stm32f4xx_tim.c **** 
1182:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2398              		.loc 1 1182 12
 2399 0010 7B68     		ldr	r3, [r7, #4]
 2400 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2401 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1183:./Lib/Src/stm32f4xx_tim.c **** 
1184:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC1M Bits */
1185:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 2402              		.loc 1 1185 12
 2403 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2404 0018 23F07003 		bic	r3, r3, #112
 2405 001c FB81     		strh	r3, [r7, #14]	@ movhi
1186:./Lib/Src/stm32f4xx_tim.c **** 
1187:./Lib/Src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1188:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
 2406              		.loc 1 1188 12
 2407 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2408 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2409 0022 1343     		orrs	r3, r3, r2
 2410 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1189:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 64


1190:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1191:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2411              		.loc 1 1191 15
 2412 0026 7B68     		ldr	r3, [r7, #4]
 2413 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2414 002a 9A83     		strh	r2, [r3, #28]	@ movhi
1192:./Lib/Src/stm32f4xx_tim.c **** }
 2415              		.loc 1 1192 1
 2416 002c 00BF     		nop
 2417 002e 1437     		adds	r7, r7, #20
 2418              		.cfi_def_cfa_offset 4
 2419 0030 BD46     		mov	sp, r7
 2420              		.cfi_def_cfa_register 13
 2421              		@ sp needed
 2422 0032 5DF8047B 		ldr	r7, [sp], #4
 2423              		.cfi_restore 7
 2424              		.cfi_def_cfa_offset 0
 2425 0036 7047     		bx	lr
 2426              		.cfi_endproc
 2427              	.LFE150:
 2429              		.section	.text.TIM_ForcedOC4Config,"ax",%progbits
 2430              		.align	1
 2431              		.global	TIM_ForcedOC4Config
 2432              		.syntax unified
 2433              		.thumb
 2434              		.thumb_func
 2436              	TIM_ForcedOC4Config:
 2437              	.LFB151:
1193:./Lib/Src/stm32f4xx_tim.c **** 
1194:./Lib/Src/stm32f4xx_tim.c **** /**
1195:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1196:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1197:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1198:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1199:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
1200:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1201:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1202:./Lib/Src/stm32f4xx_tim.c ****   */
1203:./Lib/Src/stm32f4xx_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1204:./Lib/Src/stm32f4xx_tim.c **** {
 2438              		.loc 1 1204 1
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 16
 2441              		@ frame_needed = 1, uses_anonymous_args = 0
 2442              		@ link register save eliminated.
 2443 0000 80B4     		push	{r7}
 2444              		.cfi_def_cfa_offset 4
 2445              		.cfi_offset 7, -4
 2446 0002 85B0     		sub	sp, sp, #20
 2447              		.cfi_def_cfa_offset 24
 2448 0004 00AF     		add	r7, sp, #0
 2449              		.cfi_def_cfa_register 7
 2450 0006 7860     		str	r0, [r7, #4]
 2451 0008 0B46     		mov	r3, r1
 2452 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1205:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2453              		.loc 1 1205 12
ARM GAS  /tmp/ccOaESyR.s 			page 65


 2454 000c 0023     		movs	r3, #0
 2455 000e FB81     		strh	r3, [r7, #14]	@ movhi
1206:./Lib/Src/stm32f4xx_tim.c **** 
1207:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1208:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1209:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1210:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2456              		.loc 1 1210 12
 2457 0010 7B68     		ldr	r3, [r7, #4]
 2458 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2459 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1211:./Lib/Src/stm32f4xx_tim.c **** 
1212:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC2M Bits */
1213:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 2460              		.loc 1 1213 12
 2461 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2462 0018 23F4E043 		bic	r3, r3, #28672
 2463 001c FB81     		strh	r3, [r7, #14]	@ movhi
1214:./Lib/Src/stm32f4xx_tim.c **** 
1215:./Lib/Src/stm32f4xx_tim.c ****   /* Configure The Forced output Mode */
1216:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 2464              		.loc 1 1216 15
 2465 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2466 0020 1B02     		lsls	r3, r3, #8
 2467 0022 9AB2     		uxth	r2, r3
 2468              		.loc 1 1216 12
 2469 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2470 0026 1343     		orrs	r3, r3, r2
 2471 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1217:./Lib/Src/stm32f4xx_tim.c **** 
1218:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1219:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2472              		.loc 1 1219 15
 2473 002a 7B68     		ldr	r3, [r7, #4]
 2474 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2475 002e 9A83     		strh	r2, [r3, #28]	@ movhi
1220:./Lib/Src/stm32f4xx_tim.c **** }
 2476              		.loc 1 1220 1
 2477 0030 00BF     		nop
 2478 0032 1437     		adds	r7, r7, #20
 2479              		.cfi_def_cfa_offset 4
 2480 0034 BD46     		mov	sp, r7
 2481              		.cfi_def_cfa_register 13
 2482              		@ sp needed
 2483 0036 5DF8047B 		ldr	r7, [sp], #4
 2484              		.cfi_restore 7
 2485              		.cfi_def_cfa_offset 0
 2486 003a 7047     		bx	lr
 2487              		.cfi_endproc
 2488              	.LFE151:
 2490              		.section	.text.TIM_OC1PreloadConfig,"ax",%progbits
 2491              		.align	1
 2492              		.global	TIM_OC1PreloadConfig
 2493              		.syntax unified
 2494              		.thumb
 2495              		.thumb_func
 2497              	TIM_OC1PreloadConfig:
ARM GAS  /tmp/ccOaESyR.s 			page 66


 2498              	.LFB152:
1221:./Lib/Src/stm32f4xx_tim.c **** 
1222:./Lib/Src/stm32f4xx_tim.c **** /**
1223:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1224:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1225:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1226:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1227:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1228:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1229:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1230:./Lib/Src/stm32f4xx_tim.c ****   */
1231:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1232:./Lib/Src/stm32f4xx_tim.c **** {
 2499              		.loc 1 1232 1
 2500              		.cfi_startproc
 2501              		@ args = 0, pretend = 0, frame = 16
 2502              		@ frame_needed = 1, uses_anonymous_args = 0
 2503              		@ link register save eliminated.
 2504 0000 80B4     		push	{r7}
 2505              		.cfi_def_cfa_offset 4
 2506              		.cfi_offset 7, -4
 2507 0002 85B0     		sub	sp, sp, #20
 2508              		.cfi_def_cfa_offset 24
 2509 0004 00AF     		add	r7, sp, #0
 2510              		.cfi_def_cfa_register 7
 2511 0006 7860     		str	r0, [r7, #4]
 2512 0008 0B46     		mov	r3, r1
 2513 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1233:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2514              		.loc 1 1233 12
 2515 000c 0023     		movs	r3, #0
 2516 000e FB81     		strh	r3, [r7, #14]	@ movhi
1234:./Lib/Src/stm32f4xx_tim.c **** 
1235:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1236:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1237:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1238:./Lib/Src/stm32f4xx_tim.c **** 
1239:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2517              		.loc 1 1239 12
 2518 0010 7B68     		ldr	r3, [r7, #4]
 2519 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2520 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1240:./Lib/Src/stm32f4xx_tim.c **** 
1241:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC1PE Bit */
1242:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 2521              		.loc 1 1242 12
 2522 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2523 0018 23F00803 		bic	r3, r3, #8
 2524 001c FB81     		strh	r3, [r7, #14]	@ movhi
1243:./Lib/Src/stm32f4xx_tim.c **** 
1244:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1245:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCPreload;
 2525              		.loc 1 1245 12
 2526 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2527 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2528 0022 1343     		orrs	r3, r3, r2
 2529 0024 FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 67


1246:./Lib/Src/stm32f4xx_tim.c **** 
1247:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1248:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2530              		.loc 1 1248 15
 2531 0026 7B68     		ldr	r3, [r7, #4]
 2532 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2533 002a 1A83     		strh	r2, [r3, #24]	@ movhi
1249:./Lib/Src/stm32f4xx_tim.c **** }
 2534              		.loc 1 1249 1
 2535 002c 00BF     		nop
 2536 002e 1437     		adds	r7, r7, #20
 2537              		.cfi_def_cfa_offset 4
 2538 0030 BD46     		mov	sp, r7
 2539              		.cfi_def_cfa_register 13
 2540              		@ sp needed
 2541 0032 5DF8047B 		ldr	r7, [sp], #4
 2542              		.cfi_restore 7
 2543              		.cfi_def_cfa_offset 0
 2544 0036 7047     		bx	lr
 2545              		.cfi_endproc
 2546              	.LFE152:
 2548              		.section	.text.TIM_OC2PreloadConfig,"ax",%progbits
 2549              		.align	1
 2550              		.global	TIM_OC2PreloadConfig
 2551              		.syntax unified
 2552              		.thumb
 2553              		.thumb_func
 2555              	TIM_OC2PreloadConfig:
 2556              	.LFB153:
1250:./Lib/Src/stm32f4xx_tim.c **** 
1251:./Lib/Src/stm32f4xx_tim.c **** /**
1252:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1253:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1254:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
1255:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1256:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1257:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1258:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1259:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1260:./Lib/Src/stm32f4xx_tim.c ****   */
1261:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1262:./Lib/Src/stm32f4xx_tim.c **** {
 2557              		.loc 1 1262 1
 2558              		.cfi_startproc
 2559              		@ args = 0, pretend = 0, frame = 16
 2560              		@ frame_needed = 1, uses_anonymous_args = 0
 2561              		@ link register save eliminated.
 2562 0000 80B4     		push	{r7}
 2563              		.cfi_def_cfa_offset 4
 2564              		.cfi_offset 7, -4
 2565 0002 85B0     		sub	sp, sp, #20
 2566              		.cfi_def_cfa_offset 24
 2567 0004 00AF     		add	r7, sp, #0
 2568              		.cfi_def_cfa_register 7
 2569 0006 7860     		str	r0, [r7, #4]
 2570 0008 0B46     		mov	r3, r1
 2571 000a 7B80     		strh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 68


1263:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2572              		.loc 1 1263 12
 2573 000c 0023     		movs	r3, #0
 2574 000e FB81     		strh	r3, [r7, #14]	@ movhi
1264:./Lib/Src/stm32f4xx_tim.c **** 
1265:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1266:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1267:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1268:./Lib/Src/stm32f4xx_tim.c **** 
1269:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2575              		.loc 1 1269 12
 2576 0010 7B68     		ldr	r3, [r7, #4]
 2577 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2578 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1270:./Lib/Src/stm32f4xx_tim.c **** 
1271:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC2PE Bit */
1272:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 2579              		.loc 1 1272 12
 2580 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2581 0018 23F40063 		bic	r3, r3, #2048
 2582 001c FB81     		strh	r3, [r7, #14]	@ movhi
1273:./Lib/Src/stm32f4xx_tim.c **** 
1274:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1275:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 2583              		.loc 1 1275 15
 2584 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2585 0020 1B02     		lsls	r3, r3, #8
 2586 0022 9AB2     		uxth	r2, r3
 2587              		.loc 1 1275 12
 2588 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2589 0026 1343     		orrs	r3, r3, r2
 2590 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1276:./Lib/Src/stm32f4xx_tim.c **** 
1277:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1278:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2591              		.loc 1 1278 15
 2592 002a 7B68     		ldr	r3, [r7, #4]
 2593 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2594 002e 1A83     		strh	r2, [r3, #24]	@ movhi
1279:./Lib/Src/stm32f4xx_tim.c **** }
 2595              		.loc 1 1279 1
 2596 0030 00BF     		nop
 2597 0032 1437     		adds	r7, r7, #20
 2598              		.cfi_def_cfa_offset 4
 2599 0034 BD46     		mov	sp, r7
 2600              		.cfi_def_cfa_register 13
 2601              		@ sp needed
 2602 0036 5DF8047B 		ldr	r7, [sp], #4
 2603              		.cfi_restore 7
 2604              		.cfi_def_cfa_offset 0
 2605 003a 7047     		bx	lr
 2606              		.cfi_endproc
 2607              	.LFE153:
 2609              		.section	.text.TIM_OC3PreloadConfig,"ax",%progbits
 2610              		.align	1
 2611              		.global	TIM_OC3PreloadConfig
 2612              		.syntax unified
ARM GAS  /tmp/ccOaESyR.s 			page 69


 2613              		.thumb
 2614              		.thumb_func
 2616              	TIM_OC3PreloadConfig:
 2617              	.LFB154:
1280:./Lib/Src/stm32f4xx_tim.c **** 
1281:./Lib/Src/stm32f4xx_tim.c **** /**
1282:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1283:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1284:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1285:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1286:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1287:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1288:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1289:./Lib/Src/stm32f4xx_tim.c ****   */
1290:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1291:./Lib/Src/stm32f4xx_tim.c **** {
 2618              		.loc 1 1291 1
 2619              		.cfi_startproc
 2620              		@ args = 0, pretend = 0, frame = 16
 2621              		@ frame_needed = 1, uses_anonymous_args = 0
 2622              		@ link register save eliminated.
 2623 0000 80B4     		push	{r7}
 2624              		.cfi_def_cfa_offset 4
 2625              		.cfi_offset 7, -4
 2626 0002 85B0     		sub	sp, sp, #20
 2627              		.cfi_def_cfa_offset 24
 2628 0004 00AF     		add	r7, sp, #0
 2629              		.cfi_def_cfa_register 7
 2630 0006 7860     		str	r0, [r7, #4]
 2631 0008 0B46     		mov	r3, r1
 2632 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1292:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2633              		.loc 1 1292 12
 2634 000c 0023     		movs	r3, #0
 2635 000e FB81     		strh	r3, [r7, #14]	@ movhi
1293:./Lib/Src/stm32f4xx_tim.c **** 
1294:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1295:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1296:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1297:./Lib/Src/stm32f4xx_tim.c **** 
1298:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2636              		.loc 1 1298 12
 2637 0010 7B68     		ldr	r3, [r7, #4]
 2638 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2639 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1299:./Lib/Src/stm32f4xx_tim.c **** 
1300:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC3PE Bit */
1301:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 2640              		.loc 1 1301 12
 2641 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2642 0018 23F00803 		bic	r3, r3, #8
 2643 001c FB81     		strh	r3, [r7, #14]	@ movhi
1302:./Lib/Src/stm32f4xx_tim.c **** 
1303:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1304:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCPreload;
 2644              		.loc 1 1304 12
 2645 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 70


 2646 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2647 0022 1343     		orrs	r3, r3, r2
 2648 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1305:./Lib/Src/stm32f4xx_tim.c **** 
1306:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1307:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2649              		.loc 1 1307 15
 2650 0026 7B68     		ldr	r3, [r7, #4]
 2651 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2652 002a 9A83     		strh	r2, [r3, #28]	@ movhi
1308:./Lib/Src/stm32f4xx_tim.c **** }
 2653              		.loc 1 1308 1
 2654 002c 00BF     		nop
 2655 002e 1437     		adds	r7, r7, #20
 2656              		.cfi_def_cfa_offset 4
 2657 0030 BD46     		mov	sp, r7
 2658              		.cfi_def_cfa_register 13
 2659              		@ sp needed
 2660 0032 5DF8047B 		ldr	r7, [sp], #4
 2661              		.cfi_restore 7
 2662              		.cfi_def_cfa_offset 0
 2663 0036 7047     		bx	lr
 2664              		.cfi_endproc
 2665              	.LFE154:
 2667              		.section	.text.TIM_OC4PreloadConfig,"ax",%progbits
 2668              		.align	1
 2669              		.global	TIM_OC4PreloadConfig
 2670              		.syntax unified
 2671              		.thumb
 2672              		.thumb_func
 2674              	TIM_OC4PreloadConfig:
 2675              	.LFB155:
1309:./Lib/Src/stm32f4xx_tim.c **** 
1310:./Lib/Src/stm32f4xx_tim.c **** /**
1311:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1312:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1313:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1314:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1315:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Enable
1316:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPreload_Disable
1317:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1318:./Lib/Src/stm32f4xx_tim.c ****   */
1319:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1320:./Lib/Src/stm32f4xx_tim.c **** {
 2676              		.loc 1 1320 1
 2677              		.cfi_startproc
 2678              		@ args = 0, pretend = 0, frame = 16
 2679              		@ frame_needed = 1, uses_anonymous_args = 0
 2680              		@ link register save eliminated.
 2681 0000 80B4     		push	{r7}
 2682              		.cfi_def_cfa_offset 4
 2683              		.cfi_offset 7, -4
 2684 0002 85B0     		sub	sp, sp, #20
 2685              		.cfi_def_cfa_offset 24
 2686 0004 00AF     		add	r7, sp, #0
 2687              		.cfi_def_cfa_register 7
 2688 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccOaESyR.s 			page 71


 2689 0008 0B46     		mov	r3, r1
 2690 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1321:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2691              		.loc 1 1321 12
 2692 000c 0023     		movs	r3, #0
 2693 000e FB81     		strh	r3, [r7, #14]	@ movhi
1322:./Lib/Src/stm32f4xx_tim.c **** 
1323:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1324:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1325:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1326:./Lib/Src/stm32f4xx_tim.c **** 
1327:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2694              		.loc 1 1327 12
 2695 0010 7B68     		ldr	r3, [r7, #4]
 2696 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2697 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1328:./Lib/Src/stm32f4xx_tim.c **** 
1329:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC4PE Bit */
1330:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 2698              		.loc 1 1330 12
 2699 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2700 0018 23F40063 		bic	r3, r3, #2048
 2701 001c FB81     		strh	r3, [r7, #14]	@ movhi
1331:./Lib/Src/stm32f4xx_tim.c **** 
1332:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1333:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 2702              		.loc 1 1333 15
 2703 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2704 0020 1B02     		lsls	r3, r3, #8
 2705 0022 9AB2     		uxth	r2, r3
 2706              		.loc 1 1333 12
 2707 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2708 0026 1343     		orrs	r3, r3, r2
 2709 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1334:./Lib/Src/stm32f4xx_tim.c **** 
1335:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1336:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2710              		.loc 1 1336 15
 2711 002a 7B68     		ldr	r3, [r7, #4]
 2712 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2713 002e 9A83     		strh	r2, [r3, #28]	@ movhi
1337:./Lib/Src/stm32f4xx_tim.c **** }
 2714              		.loc 1 1337 1
 2715 0030 00BF     		nop
 2716 0032 1437     		adds	r7, r7, #20
 2717              		.cfi_def_cfa_offset 4
 2718 0034 BD46     		mov	sp, r7
 2719              		.cfi_def_cfa_register 13
 2720              		@ sp needed
 2721 0036 5DF8047B 		ldr	r7, [sp], #4
 2722              		.cfi_restore 7
 2723              		.cfi_def_cfa_offset 0
 2724 003a 7047     		bx	lr
 2725              		.cfi_endproc
 2726              	.LFE155:
 2728              		.section	.text.TIM_OC1FastConfig,"ax",%progbits
 2729              		.align	1
ARM GAS  /tmp/ccOaESyR.s 			page 72


 2730              		.global	TIM_OC1FastConfig
 2731              		.syntax unified
 2732              		.thumb
 2733              		.thumb_func
 2735              	TIM_OC1FastConfig:
 2736              	.LFB156:
1338:./Lib/Src/stm32f4xx_tim.c **** 
1339:./Lib/Src/stm32f4xx_tim.c **** /**
1340:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1341:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1342:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1343:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1344:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1345:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1346:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1347:./Lib/Src/stm32f4xx_tim.c ****   */
1348:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1349:./Lib/Src/stm32f4xx_tim.c **** {
 2737              		.loc 1 1349 1
 2738              		.cfi_startproc
 2739              		@ args = 0, pretend = 0, frame = 16
 2740              		@ frame_needed = 1, uses_anonymous_args = 0
 2741              		@ link register save eliminated.
 2742 0000 80B4     		push	{r7}
 2743              		.cfi_def_cfa_offset 4
 2744              		.cfi_offset 7, -4
 2745 0002 85B0     		sub	sp, sp, #20
 2746              		.cfi_def_cfa_offset 24
 2747 0004 00AF     		add	r7, sp, #0
 2748              		.cfi_def_cfa_register 7
 2749 0006 7860     		str	r0, [r7, #4]
 2750 0008 0B46     		mov	r3, r1
 2751 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1350:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2752              		.loc 1 1350 12
 2753 000c 0023     		movs	r3, #0
 2754 000e FB81     		strh	r3, [r7, #14]	@ movhi
1351:./Lib/Src/stm32f4xx_tim.c **** 
1352:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1353:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1354:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1355:./Lib/Src/stm32f4xx_tim.c **** 
1356:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1357:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2755              		.loc 1 1357 12
 2756 0010 7B68     		ldr	r3, [r7, #4]
 2757 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2758 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1358:./Lib/Src/stm32f4xx_tim.c **** 
1359:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC1FE Bit */
1360:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 2759              		.loc 1 1360 12
 2760 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2761 0018 23F00403 		bic	r3, r3, #4
 2762 001c FB81     		strh	r3, [r7, #14]	@ movhi
1361:./Lib/Src/stm32f4xx_tim.c **** 
1362:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
ARM GAS  /tmp/ccOaESyR.s 			page 73


1363:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCFast;
 2763              		.loc 1 1363 12
 2764 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2765 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2766 0022 1343     		orrs	r3, r3, r2
 2767 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1364:./Lib/Src/stm32f4xx_tim.c **** 
1365:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
1366:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2768              		.loc 1 1366 15
 2769 0026 7B68     		ldr	r3, [r7, #4]
 2770 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2771 002a 1A83     		strh	r2, [r3, #24]	@ movhi
1367:./Lib/Src/stm32f4xx_tim.c **** }
 2772              		.loc 1 1367 1
 2773 002c 00BF     		nop
 2774 002e 1437     		adds	r7, r7, #20
 2775              		.cfi_def_cfa_offset 4
 2776 0030 BD46     		mov	sp, r7
 2777              		.cfi_def_cfa_register 13
 2778              		@ sp needed
 2779 0032 5DF8047B 		ldr	r7, [sp], #4
 2780              		.cfi_restore 7
 2781              		.cfi_def_cfa_offset 0
 2782 0036 7047     		bx	lr
 2783              		.cfi_endproc
 2784              	.LFE156:
 2786              		.section	.text.TIM_OC2FastConfig,"ax",%progbits
 2787              		.align	1
 2788              		.global	TIM_OC2FastConfig
 2789              		.syntax unified
 2790              		.thumb
 2791              		.thumb_func
 2793              	TIM_OC2FastConfig:
 2794              	.LFB157:
1368:./Lib/Src/stm32f4xx_tim.c **** 
1369:./Lib/Src/stm32f4xx_tim.c **** /**
1370:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1371:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1372:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
1373:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1374:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1375:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1376:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1377:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1378:./Lib/Src/stm32f4xx_tim.c ****   */
1379:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1380:./Lib/Src/stm32f4xx_tim.c **** {
 2795              		.loc 1 1380 1
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 16
 2798              		@ frame_needed = 1, uses_anonymous_args = 0
 2799              		@ link register save eliminated.
 2800 0000 80B4     		push	{r7}
 2801              		.cfi_def_cfa_offset 4
 2802              		.cfi_offset 7, -4
 2803 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccOaESyR.s 			page 74


 2804              		.cfi_def_cfa_offset 24
 2805 0004 00AF     		add	r7, sp, #0
 2806              		.cfi_def_cfa_register 7
 2807 0006 7860     		str	r0, [r7, #4]
 2808 0008 0B46     		mov	r3, r1
 2809 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1381:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2810              		.loc 1 1381 12
 2811 000c 0023     		movs	r3, #0
 2812 000e FB81     		strh	r3, [r7, #14]	@ movhi
1382:./Lib/Src/stm32f4xx_tim.c **** 
1383:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1384:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1385:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1386:./Lib/Src/stm32f4xx_tim.c **** 
1387:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
1388:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2813              		.loc 1 1388 12
 2814 0010 7B68     		ldr	r3, [r7, #4]
 2815 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2816 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1389:./Lib/Src/stm32f4xx_tim.c **** 
1390:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC2FE Bit */
1391:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 2817              		.loc 1 1391 12
 2818 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2819 0018 23F48063 		bic	r3, r3, #1024
 2820 001c FB81     		strh	r3, [r7, #14]	@ movhi
1392:./Lib/Src/stm32f4xx_tim.c **** 
1393:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1394:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 2821              		.loc 1 1394 15
 2822 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2823 0020 1B02     		lsls	r3, r3, #8
 2824 0022 9AB2     		uxth	r2, r3
 2825              		.loc 1 1394 12
 2826 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2827 0026 1343     		orrs	r3, r3, r2
 2828 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1395:./Lib/Src/stm32f4xx_tim.c **** 
1396:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
1397:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2829              		.loc 1 1397 15
 2830 002a 7B68     		ldr	r3, [r7, #4]
 2831 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2832 002e 1A83     		strh	r2, [r3, #24]	@ movhi
1398:./Lib/Src/stm32f4xx_tim.c **** }
 2833              		.loc 1 1398 1
 2834 0030 00BF     		nop
 2835 0032 1437     		adds	r7, r7, #20
 2836              		.cfi_def_cfa_offset 4
 2837 0034 BD46     		mov	sp, r7
 2838              		.cfi_def_cfa_register 13
 2839              		@ sp needed
 2840 0036 5DF8047B 		ldr	r7, [sp], #4
 2841              		.cfi_restore 7
 2842              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccOaESyR.s 			page 75


 2843 003a 7047     		bx	lr
 2844              		.cfi_endproc
 2845              	.LFE157:
 2847              		.section	.text.TIM_OC3FastConfig,"ax",%progbits
 2848              		.align	1
 2849              		.global	TIM_OC3FastConfig
 2850              		.syntax unified
 2851              		.thumb
 2852              		.thumb_func
 2854              	TIM_OC3FastConfig:
 2855              	.LFB158:
1399:./Lib/Src/stm32f4xx_tim.c **** 
1400:./Lib/Src/stm32f4xx_tim.c **** /**
1401:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1402:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1403:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1404:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1405:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1406:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1407:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1408:./Lib/Src/stm32f4xx_tim.c ****   */
1409:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1410:./Lib/Src/stm32f4xx_tim.c **** {
 2856              		.loc 1 1410 1
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 16
 2859              		@ frame_needed = 1, uses_anonymous_args = 0
 2860              		@ link register save eliminated.
 2861 0000 80B4     		push	{r7}
 2862              		.cfi_def_cfa_offset 4
 2863              		.cfi_offset 7, -4
 2864 0002 85B0     		sub	sp, sp, #20
 2865              		.cfi_def_cfa_offset 24
 2866 0004 00AF     		add	r7, sp, #0
 2867              		.cfi_def_cfa_register 7
 2868 0006 7860     		str	r0, [r7, #4]
 2869 0008 0B46     		mov	r3, r1
 2870 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1411:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2871              		.loc 1 1411 12
 2872 000c 0023     		movs	r3, #0
 2873 000e FB81     		strh	r3, [r7, #14]	@ movhi
1412:./Lib/Src/stm32f4xx_tim.c ****   
1413:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1414:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1415:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1416:./Lib/Src/stm32f4xx_tim.c **** 
1417:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1418:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2874              		.loc 1 1418 12
 2875 0010 7B68     		ldr	r3, [r7, #4]
 2876 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2877 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1419:./Lib/Src/stm32f4xx_tim.c **** 
1420:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC3FE Bit */
1421:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 2878              		.loc 1 1421 12
ARM GAS  /tmp/ccOaESyR.s 			page 76


 2879 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2880 0018 23F00403 		bic	r3, r3, #4
 2881 001c FB81     		strh	r3, [r7, #14]	@ movhi
1422:./Lib/Src/stm32f4xx_tim.c **** 
1423:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1424:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCFast;
 2882              		.loc 1 1424 12
 2883 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2884 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2885 0022 1343     		orrs	r3, r3, r2
 2886 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1425:./Lib/Src/stm32f4xx_tim.c **** 
1426:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
1427:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2887              		.loc 1 1427 15
 2888 0026 7B68     		ldr	r3, [r7, #4]
 2889 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2890 002a 9A83     		strh	r2, [r3, #28]	@ movhi
1428:./Lib/Src/stm32f4xx_tim.c **** }
 2891              		.loc 1 1428 1
 2892 002c 00BF     		nop
 2893 002e 1437     		adds	r7, r7, #20
 2894              		.cfi_def_cfa_offset 4
 2895 0030 BD46     		mov	sp, r7
 2896              		.cfi_def_cfa_register 13
 2897              		@ sp needed
 2898 0032 5DF8047B 		ldr	r7, [sp], #4
 2899              		.cfi_restore 7
 2900              		.cfi_def_cfa_offset 0
 2901 0036 7047     		bx	lr
 2902              		.cfi_endproc
 2903              	.LFE158:
 2905              		.section	.text.TIM_OC4FastConfig,"ax",%progbits
 2906              		.align	1
 2907              		.global	TIM_OC4FastConfig
 2908              		.syntax unified
 2909              		.thumb
 2910              		.thumb_func
 2912              	TIM_OC4FastConfig:
 2913              	.LFB159:
1429:./Lib/Src/stm32f4xx_tim.c **** 
1430:./Lib/Src/stm32f4xx_tim.c **** /**
1431:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1432:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1433:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1434:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1435:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Enable: TIM output compare fast enable
1436:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCFast_Disable: TIM output compare fast disable
1437:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1438:./Lib/Src/stm32f4xx_tim.c ****   */
1439:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1440:./Lib/Src/stm32f4xx_tim.c **** {
 2914              		.loc 1 1440 1
 2915              		.cfi_startproc
 2916              		@ args = 0, pretend = 0, frame = 16
 2917              		@ frame_needed = 1, uses_anonymous_args = 0
 2918              		@ link register save eliminated.
ARM GAS  /tmp/ccOaESyR.s 			page 77


 2919 0000 80B4     		push	{r7}
 2920              		.cfi_def_cfa_offset 4
 2921              		.cfi_offset 7, -4
 2922 0002 85B0     		sub	sp, sp, #20
 2923              		.cfi_def_cfa_offset 24
 2924 0004 00AF     		add	r7, sp, #0
 2925              		.cfi_def_cfa_register 7
 2926 0006 7860     		str	r0, [r7, #4]
 2927 0008 0B46     		mov	r3, r1
 2928 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1441:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 2929              		.loc 1 1441 12
 2930 000c 0023     		movs	r3, #0
 2931 000e FB81     		strh	r3, [r7, #14]	@ movhi
1442:./Lib/Src/stm32f4xx_tim.c **** 
1443:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1444:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1445:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1446:./Lib/Src/stm32f4xx_tim.c **** 
1447:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR2 register value */
1448:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2932              		.loc 1 1448 12
 2933 0010 7B68     		ldr	r3, [r7, #4]
 2934 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2935 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1449:./Lib/Src/stm32f4xx_tim.c **** 
1450:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC4FE Bit */
1451:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 2936              		.loc 1 1451 12
 2937 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2938 0018 23F48063 		bic	r3, r3, #1024
 2939 001c FB81     		strh	r3, [r7, #14]	@ movhi
1452:./Lib/Src/stm32f4xx_tim.c **** 
1453:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1454:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 2940              		.loc 1 1454 15
 2941 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2942 0020 1B02     		lsls	r3, r3, #8
 2943 0022 9AB2     		uxth	r2, r3
 2944              		.loc 1 1454 12
 2945 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2946 0026 1343     		orrs	r3, r3, r2
 2947 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1455:./Lib/Src/stm32f4xx_tim.c **** 
1456:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 */
1457:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2948              		.loc 1 1457 15
 2949 002a 7B68     		ldr	r3, [r7, #4]
 2950 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2951 002e 9A83     		strh	r2, [r3, #28]	@ movhi
1458:./Lib/Src/stm32f4xx_tim.c **** }
 2952              		.loc 1 1458 1
 2953 0030 00BF     		nop
 2954 0032 1437     		adds	r7, r7, #20
 2955              		.cfi_def_cfa_offset 4
 2956 0034 BD46     		mov	sp, r7
 2957              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccOaESyR.s 			page 78


 2958              		@ sp needed
 2959 0036 5DF8047B 		ldr	r7, [sp], #4
 2960              		.cfi_restore 7
 2961              		.cfi_def_cfa_offset 0
 2962 003a 7047     		bx	lr
 2963              		.cfi_endproc
 2964              	.LFE159:
 2966              		.section	.text.TIM_ClearOC1Ref,"ax",%progbits
 2967              		.align	1
 2968              		.global	TIM_ClearOC1Ref
 2969              		.syntax unified
 2970              		.thumb
 2971              		.thumb_func
 2973              	TIM_ClearOC1Ref:
 2974              	.LFB160:
1459:./Lib/Src/stm32f4xx_tim.c **** 
1460:./Lib/Src/stm32f4xx_tim.c **** /**
1461:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1462:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1463:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1464:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1465:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1466:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1467:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1468:./Lib/Src/stm32f4xx_tim.c ****   */
1469:./Lib/Src/stm32f4xx_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1470:./Lib/Src/stm32f4xx_tim.c **** {
 2975              		.loc 1 1470 1
 2976              		.cfi_startproc
 2977              		@ args = 0, pretend = 0, frame = 16
 2978              		@ frame_needed = 1, uses_anonymous_args = 0
 2979              		@ link register save eliminated.
 2980 0000 80B4     		push	{r7}
 2981              		.cfi_def_cfa_offset 4
 2982              		.cfi_offset 7, -4
 2983 0002 85B0     		sub	sp, sp, #20
 2984              		.cfi_def_cfa_offset 24
 2985 0004 00AF     		add	r7, sp, #0
 2986              		.cfi_def_cfa_register 7
 2987 0006 7860     		str	r0, [r7, #4]
 2988 0008 0B46     		mov	r3, r1
 2989 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1471:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 2990              		.loc 1 1471 12
 2991 000c 0023     		movs	r3, #0
 2992 000e FB81     		strh	r3, [r7, #14]	@ movhi
1472:./Lib/Src/stm32f4xx_tim.c **** 
1473:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1474:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1475:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1476:./Lib/Src/stm32f4xx_tim.c **** 
1477:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2993              		.loc 1 1477 12
 2994 0010 7B68     		ldr	r3, [r7, #4]
 2995 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2996 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1478:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 79


1479:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC1CE Bit */
1480:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 2997              		.loc 1 1480 12
 2998 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2999 0018 23F08003 		bic	r3, r3, #128
 3000 001c FB81     		strh	r3, [r7, #14]	@ movhi
1481:./Lib/Src/stm32f4xx_tim.c **** 
1482:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1483:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_OCClear;
 3001              		.loc 1 1483 12
 3002 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 3003 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3004 0022 1343     		orrs	r3, r3, r2
 3005 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1484:./Lib/Src/stm32f4xx_tim.c **** 
1485:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1486:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3006              		.loc 1 1486 15
 3007 0026 7B68     		ldr	r3, [r7, #4]
 3008 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3009 002a 1A83     		strh	r2, [r3, #24]	@ movhi
1487:./Lib/Src/stm32f4xx_tim.c **** }
 3010              		.loc 1 1487 1
 3011 002c 00BF     		nop
 3012 002e 1437     		adds	r7, r7, #20
 3013              		.cfi_def_cfa_offset 4
 3014 0030 BD46     		mov	sp, r7
 3015              		.cfi_def_cfa_register 13
 3016              		@ sp needed
 3017 0032 5DF8047B 		ldr	r7, [sp], #4
 3018              		.cfi_restore 7
 3019              		.cfi_def_cfa_offset 0
 3020 0036 7047     		bx	lr
 3021              		.cfi_endproc
 3022              	.LFE160:
 3024              		.section	.text.TIM_ClearOC2Ref,"ax",%progbits
 3025              		.align	1
 3026              		.global	TIM_ClearOC2Ref
 3027              		.syntax unified
 3028              		.thumb
 3029              		.thumb_func
 3031              	TIM_ClearOC2Ref:
 3032              	.LFB161:
1488:./Lib/Src/stm32f4xx_tim.c **** 
1489:./Lib/Src/stm32f4xx_tim.c **** /**
1490:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1491:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1492:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
1493:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1494:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1495:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1496:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1497:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1498:./Lib/Src/stm32f4xx_tim.c ****   */
1499:./Lib/Src/stm32f4xx_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1500:./Lib/Src/stm32f4xx_tim.c **** {
 3033              		.loc 1 1500 1
ARM GAS  /tmp/ccOaESyR.s 			page 80


 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 16
 3036              		@ frame_needed = 1, uses_anonymous_args = 0
 3037              		@ link register save eliminated.
 3038 0000 80B4     		push	{r7}
 3039              		.cfi_def_cfa_offset 4
 3040              		.cfi_offset 7, -4
 3041 0002 85B0     		sub	sp, sp, #20
 3042              		.cfi_def_cfa_offset 24
 3043 0004 00AF     		add	r7, sp, #0
 3044              		.cfi_def_cfa_register 7
 3045 0006 7860     		str	r0, [r7, #4]
 3046 0008 0B46     		mov	r3, r1
 3047 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1501:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 3048              		.loc 1 1501 12
 3049 000c 0023     		movs	r3, #0
 3050 000e FB81     		strh	r3, [r7, #14]	@ movhi
1502:./Lib/Src/stm32f4xx_tim.c **** 
1503:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1504:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1505:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1506:./Lib/Src/stm32f4xx_tim.c **** 
1507:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3051              		.loc 1 1507 12
 3052 0010 7B68     		ldr	r3, [r7, #4]
 3053 0012 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3054 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1508:./Lib/Src/stm32f4xx_tim.c **** 
1509:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC2CE Bit */
1510:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 3055              		.loc 1 1510 12
 3056 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3057 0018 C3F30E03 		ubfx	r3, r3, #0, #15
 3058 001c FB81     		strh	r3, [r7, #14]	@ movhi
1511:./Lib/Src/stm32f4xx_tim.c **** 
1512:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1513:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 3059              		.loc 1 1513 15
 3060 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3061 0020 1B02     		lsls	r3, r3, #8
 3062 0022 9AB2     		uxth	r2, r3
 3063              		.loc 1 1513 12
 3064 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3065 0026 1343     		orrs	r3, r3, r2
 3066 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1514:./Lib/Src/stm32f4xx_tim.c **** 
1515:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 register */
1516:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3067              		.loc 1 1516 15
 3068 002a 7B68     		ldr	r3, [r7, #4]
 3069 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 3070 002e 1A83     		strh	r2, [r3, #24]	@ movhi
1517:./Lib/Src/stm32f4xx_tim.c **** }
 3071              		.loc 1 1517 1
 3072 0030 00BF     		nop
 3073 0032 1437     		adds	r7, r7, #20
ARM GAS  /tmp/ccOaESyR.s 			page 81


 3074              		.cfi_def_cfa_offset 4
 3075 0034 BD46     		mov	sp, r7
 3076              		.cfi_def_cfa_register 13
 3077              		@ sp needed
 3078 0036 5DF8047B 		ldr	r7, [sp], #4
 3079              		.cfi_restore 7
 3080              		.cfi_def_cfa_offset 0
 3081 003a 7047     		bx	lr
 3082              		.cfi_endproc
 3083              	.LFE161:
 3085              		.section	.text.TIM_ClearOC3Ref,"ax",%progbits
 3086              		.align	1
 3087              		.global	TIM_ClearOC3Ref
 3088              		.syntax unified
 3089              		.thumb
 3090              		.thumb_func
 3092              	TIM_ClearOC3Ref:
 3093              	.LFB162:
1518:./Lib/Src/stm32f4xx_tim.c **** 
1519:./Lib/Src/stm32f4xx_tim.c **** /**
1520:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1521:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1522:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1523:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1524:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1525:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1526:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1527:./Lib/Src/stm32f4xx_tim.c ****   */
1528:./Lib/Src/stm32f4xx_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1529:./Lib/Src/stm32f4xx_tim.c **** {
 3094              		.loc 1 1529 1
 3095              		.cfi_startproc
 3096              		@ args = 0, pretend = 0, frame = 16
 3097              		@ frame_needed = 1, uses_anonymous_args = 0
 3098              		@ link register save eliminated.
 3099 0000 80B4     		push	{r7}
 3100              		.cfi_def_cfa_offset 4
 3101              		.cfi_offset 7, -4
 3102 0002 85B0     		sub	sp, sp, #20
 3103              		.cfi_def_cfa_offset 24
 3104 0004 00AF     		add	r7, sp, #0
 3105              		.cfi_def_cfa_register 7
 3106 0006 7860     		str	r0, [r7, #4]
 3107 0008 0B46     		mov	r3, r1
 3108 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1530:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 3109              		.loc 1 1530 12
 3110 000c 0023     		movs	r3, #0
 3111 000e FB81     		strh	r3, [r7, #14]	@ movhi
1531:./Lib/Src/stm32f4xx_tim.c **** 
1532:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1533:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1534:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1535:./Lib/Src/stm32f4xx_tim.c **** 
1536:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3112              		.loc 1 1536 12
 3113 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccOaESyR.s 			page 82


 3114 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3115 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1537:./Lib/Src/stm32f4xx_tim.c **** 
1538:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC3CE Bit */
1539:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 3116              		.loc 1 1539 12
 3117 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3118 0018 23F08003 		bic	r3, r3, #128
 3119 001c FB81     		strh	r3, [r7, #14]	@ movhi
1540:./Lib/Src/stm32f4xx_tim.c **** 
1541:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1542:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= TIM_OCClear;
 3120              		.loc 1 1542 12
 3121 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 3122 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3123 0022 1343     		orrs	r3, r3, r2
 3124 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1543:./Lib/Src/stm32f4xx_tim.c **** 
1544:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1545:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3125              		.loc 1 1545 15
 3126 0026 7B68     		ldr	r3, [r7, #4]
 3127 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3128 002a 9A83     		strh	r2, [r3, #28]	@ movhi
1546:./Lib/Src/stm32f4xx_tim.c **** }
 3129              		.loc 1 1546 1
 3130 002c 00BF     		nop
 3131 002e 1437     		adds	r7, r7, #20
 3132              		.cfi_def_cfa_offset 4
 3133 0030 BD46     		mov	sp, r7
 3134              		.cfi_def_cfa_register 13
 3135              		@ sp needed
 3136 0032 5DF8047B 		ldr	r7, [sp], #4
 3137              		.cfi_restore 7
 3138              		.cfi_def_cfa_offset 0
 3139 0036 7047     		bx	lr
 3140              		.cfi_endproc
 3141              	.LFE162:
 3143              		.section	.text.TIM_ClearOC4Ref,"ax",%progbits
 3144              		.align	1
 3145              		.global	TIM_ClearOC4Ref
 3146              		.syntax unified
 3147              		.thumb
 3148              		.thumb_func
 3150              	TIM_ClearOC4Ref:
 3151              	.LFB163:
1547:./Lib/Src/stm32f4xx_tim.c **** 
1548:./Lib/Src/stm32f4xx_tim.c **** /**
1549:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1550:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1551:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1552:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1553:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Enable: TIM Output clear enable
1554:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCClear_Disable: TIM Output clear disable
1555:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1556:./Lib/Src/stm32f4xx_tim.c ****   */
1557:./Lib/Src/stm32f4xx_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
ARM GAS  /tmp/ccOaESyR.s 			page 83


1558:./Lib/Src/stm32f4xx_tim.c **** {
 3152              		.loc 1 1558 1
 3153              		.cfi_startproc
 3154              		@ args = 0, pretend = 0, frame = 16
 3155              		@ frame_needed = 1, uses_anonymous_args = 0
 3156              		@ link register save eliminated.
 3157 0000 80B4     		push	{r7}
 3158              		.cfi_def_cfa_offset 4
 3159              		.cfi_offset 7, -4
 3160 0002 85B0     		sub	sp, sp, #20
 3161              		.cfi_def_cfa_offset 24
 3162 0004 00AF     		add	r7, sp, #0
 3163              		.cfi_def_cfa_register 7
 3164 0006 7860     		str	r0, [r7, #4]
 3165 0008 0B46     		mov	r3, r1
 3166 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1559:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0;
 3167              		.loc 1 1559 12
 3168 000c 0023     		movs	r3, #0
 3169 000e FB81     		strh	r3, [r7, #14]	@ movhi
1560:./Lib/Src/stm32f4xx_tim.c **** 
1561:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1562:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1563:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1564:./Lib/Src/stm32f4xx_tim.c **** 
1565:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3170              		.loc 1 1565 12
 3171 0010 7B68     		ldr	r3, [r7, #4]
 3172 0012 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3173 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1566:./Lib/Src/stm32f4xx_tim.c **** 
1567:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the OC4CE Bit */
1568:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 3174              		.loc 1 1568 12
 3175 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3176 0018 C3F30E03 		ubfx	r3, r3, #0, #15
 3177 001c FB81     		strh	r3, [r7, #14]	@ movhi
1569:./Lib/Src/stm32f4xx_tim.c **** 
1570:./Lib/Src/stm32f4xx_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1571:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 3178              		.loc 1 1571 15
 3179 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3180 0020 1B02     		lsls	r3, r3, #8
 3181 0022 9AB2     		uxth	r2, r3
 3182              		.loc 1 1571 12
 3183 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3184 0026 1343     		orrs	r3, r3, r2
 3185 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1572:./Lib/Src/stm32f4xx_tim.c **** 
1573:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 register */
1574:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3186              		.loc 1 1574 15
 3187 002a 7B68     		ldr	r3, [r7, #4]
 3188 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 3189 002e 9A83     		strh	r2, [r3, #28]	@ movhi
1575:./Lib/Src/stm32f4xx_tim.c **** }
 3190              		.loc 1 1575 1
ARM GAS  /tmp/ccOaESyR.s 			page 84


 3191 0030 00BF     		nop
 3192 0032 1437     		adds	r7, r7, #20
 3193              		.cfi_def_cfa_offset 4
 3194 0034 BD46     		mov	sp, r7
 3195              		.cfi_def_cfa_register 13
 3196              		@ sp needed
 3197 0036 5DF8047B 		ldr	r7, [sp], #4
 3198              		.cfi_restore 7
 3199              		.cfi_def_cfa_offset 0
 3200 003a 7047     		bx	lr
 3201              		.cfi_endproc
 3202              	.LFE163:
 3204              		.section	.text.TIM_OC1PolarityConfig,"ax",%progbits
 3205              		.align	1
 3206              		.global	TIM_OC1PolarityConfig
 3207              		.syntax unified
 3208              		.thumb
 3209              		.thumb_func
 3211              	TIM_OC1PolarityConfig:
 3212              	.LFB164:
1576:./Lib/Src/stm32f4xx_tim.c **** 
1577:./Lib/Src/stm32f4xx_tim.c **** /**
1578:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1579:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1580:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1581:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1582:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1583:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1584:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1585:./Lib/Src/stm32f4xx_tim.c ****   */
1586:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1587:./Lib/Src/stm32f4xx_tim.c **** {
 3213              		.loc 1 1587 1
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 16
 3216              		@ frame_needed = 1, uses_anonymous_args = 0
 3217              		@ link register save eliminated.
 3218 0000 80B4     		push	{r7}
 3219              		.cfi_def_cfa_offset 4
 3220              		.cfi_offset 7, -4
 3221 0002 85B0     		sub	sp, sp, #20
 3222              		.cfi_def_cfa_offset 24
 3223 0004 00AF     		add	r7, sp, #0
 3224              		.cfi_def_cfa_register 7
 3225 0006 7860     		str	r0, [r7, #4]
 3226 0008 0B46     		mov	r3, r1
 3227 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1588:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 3228              		.loc 1 1588 12
 3229 000c 0023     		movs	r3, #0
 3230 000e FB81     		strh	r3, [r7, #14]	@ movhi
1589:./Lib/Src/stm32f4xx_tim.c **** 
1590:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1591:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1592:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1593:./Lib/Src/stm32f4xx_tim.c **** 
1594:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
ARM GAS  /tmp/ccOaESyR.s 			page 85


 3231              		.loc 1 1594 11
 3232 0010 7B68     		ldr	r3, [r7, #4]
 3233 0012 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3234 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1595:./Lib/Src/stm32f4xx_tim.c **** 
1596:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the CC1P Bit */
1597:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 3235              		.loc 1 1597 11
 3236 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3237 0018 23F00203 		bic	r3, r3, #2
 3238 001c FB81     		strh	r3, [r7, #14]	@ movhi
1598:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCPolarity;
 3239              		.loc 1 1598 11
 3240 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 3241 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3242 0022 1343     		orrs	r3, r3, r2
 3243 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1599:./Lib/Src/stm32f4xx_tim.c **** 
1600:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1601:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 3244              		.loc 1 1601 14
 3245 0026 7B68     		ldr	r3, [r7, #4]
 3246 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3247 002a 1A84     		strh	r2, [r3, #32]	@ movhi
1602:./Lib/Src/stm32f4xx_tim.c **** }
 3248              		.loc 1 1602 1
 3249 002c 00BF     		nop
 3250 002e 1437     		adds	r7, r7, #20
 3251              		.cfi_def_cfa_offset 4
 3252 0030 BD46     		mov	sp, r7
 3253              		.cfi_def_cfa_register 13
 3254              		@ sp needed
 3255 0032 5DF8047B 		ldr	r7, [sp], #4
 3256              		.cfi_restore 7
 3257              		.cfi_def_cfa_offset 0
 3258 0036 7047     		bx	lr
 3259              		.cfi_endproc
 3260              	.LFE164:
 3262              		.section	.text.TIM_OC1NPolarityConfig,"ax",%progbits
 3263              		.align	1
 3264              		.global	TIM_OC1NPolarityConfig
 3265              		.syntax unified
 3266              		.thumb
 3267              		.thumb_func
 3269              	TIM_OC1NPolarityConfig:
 3270              	.LFB165:
1603:./Lib/Src/stm32f4xx_tim.c **** 
1604:./Lib/Src/stm32f4xx_tim.c **** /**
1605:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1606:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1607:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1608:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1609:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1610:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1611:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1612:./Lib/Src/stm32f4xx_tim.c ****   */
1613:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
ARM GAS  /tmp/ccOaESyR.s 			page 86


1614:./Lib/Src/stm32f4xx_tim.c **** {
 3271              		.loc 1 1614 1
 3272              		.cfi_startproc
 3273              		@ args = 0, pretend = 0, frame = 16
 3274              		@ frame_needed = 1, uses_anonymous_args = 0
 3275              		@ link register save eliminated.
 3276 0000 80B4     		push	{r7}
 3277              		.cfi_def_cfa_offset 4
 3278              		.cfi_offset 7, -4
 3279 0002 85B0     		sub	sp, sp, #20
 3280              		.cfi_def_cfa_offset 24
 3281 0004 00AF     		add	r7, sp, #0
 3282              		.cfi_def_cfa_register 7
 3283 0006 7860     		str	r0, [r7, #4]
 3284 0008 0B46     		mov	r3, r1
 3285 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1615:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 3286              		.loc 1 1615 12
 3287 000c 0023     		movs	r3, #0
 3288 000e FB81     		strh	r3, [r7, #14]	@ movhi
1616:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1617:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1618:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1619:./Lib/Src/stm32f4xx_tim.c ****    
1620:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 3289              		.loc 1 1620 11
 3290 0010 7B68     		ldr	r3, [r7, #4]
 3291 0012 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3292 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1621:./Lib/Src/stm32f4xx_tim.c **** 
1622:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the CC1NP Bit */
1623:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 3293              		.loc 1 1623 11
 3294 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3295 0018 23F00803 		bic	r3, r3, #8
 3296 001c FB81     		strh	r3, [r7, #14]	@ movhi
1624:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= TIM_OCNPolarity;
 3297              		.loc 1 1624 11
 3298 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 3299 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3300 0022 1343     		orrs	r3, r3, r2
 3301 0024 FB81     		strh	r3, [r7, #14]	@ movhi
1625:./Lib/Src/stm32f4xx_tim.c **** 
1626:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1627:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 3302              		.loc 1 1627 14
 3303 0026 7B68     		ldr	r3, [r7, #4]
 3304 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3305 002a 1A84     		strh	r2, [r3, #32]	@ movhi
1628:./Lib/Src/stm32f4xx_tim.c **** }
 3306              		.loc 1 1628 1
 3307 002c 00BF     		nop
 3308 002e 1437     		adds	r7, r7, #20
 3309              		.cfi_def_cfa_offset 4
 3310 0030 BD46     		mov	sp, r7
 3311              		.cfi_def_cfa_register 13
 3312              		@ sp needed
ARM GAS  /tmp/ccOaESyR.s 			page 87


 3313 0032 5DF8047B 		ldr	r7, [sp], #4
 3314              		.cfi_restore 7
 3315              		.cfi_def_cfa_offset 0
 3316 0036 7047     		bx	lr
 3317              		.cfi_endproc
 3318              	.LFE165:
 3320              		.section	.text.TIM_OC2PolarityConfig,"ax",%progbits
 3321              		.align	1
 3322              		.global	TIM_OC2PolarityConfig
 3323              		.syntax unified
 3324              		.thumb
 3325              		.thumb_func
 3327              	TIM_OC2PolarityConfig:
 3328              	.LFB166:
1629:./Lib/Src/stm32f4xx_tim.c **** 
1630:./Lib/Src/stm32f4xx_tim.c **** /**
1631:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1632:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
1633:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
1634:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1635:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1636:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1637:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1638:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1639:./Lib/Src/stm32f4xx_tim.c ****   */
1640:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1641:./Lib/Src/stm32f4xx_tim.c **** {
 3329              		.loc 1 1641 1
 3330              		.cfi_startproc
 3331              		@ args = 0, pretend = 0, frame = 16
 3332              		@ frame_needed = 1, uses_anonymous_args = 0
 3333              		@ link register save eliminated.
 3334 0000 80B4     		push	{r7}
 3335              		.cfi_def_cfa_offset 4
 3336              		.cfi_offset 7, -4
 3337 0002 85B0     		sub	sp, sp, #20
 3338              		.cfi_def_cfa_offset 24
 3339 0004 00AF     		add	r7, sp, #0
 3340              		.cfi_def_cfa_register 7
 3341 0006 7860     		str	r0, [r7, #4]
 3342 0008 0B46     		mov	r3, r1
 3343 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1642:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 3344              		.loc 1 1642 12
 3345 000c 0023     		movs	r3, #0
 3346 000e FB81     		strh	r3, [r7, #14]	@ movhi
1643:./Lib/Src/stm32f4xx_tim.c **** 
1644:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1645:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1646:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1647:./Lib/Src/stm32f4xx_tim.c **** 
1648:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 3347              		.loc 1 1648 11
 3348 0010 7B68     		ldr	r3, [r7, #4]
 3349 0012 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3350 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1649:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 88


1650:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the CC2P Bit */
1651:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 3351              		.loc 1 1651 11
 3352 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3353 0018 23F02003 		bic	r3, r3, #32
 3354 001c FB81     		strh	r3, [r7, #14]	@ movhi
1652:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 3355              		.loc 1 1652 14
 3356 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3357 0020 1B01     		lsls	r3, r3, #4
 3358 0022 9AB2     		uxth	r2, r3
 3359              		.loc 1 1652 11
 3360 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3361 0026 1343     		orrs	r3, r3, r2
 3362 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1653:./Lib/Src/stm32f4xx_tim.c **** 
1654:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1655:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 3363              		.loc 1 1655 14
 3364 002a 7B68     		ldr	r3, [r7, #4]
 3365 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 3366 002e 1A84     		strh	r2, [r3, #32]	@ movhi
1656:./Lib/Src/stm32f4xx_tim.c **** }
 3367              		.loc 1 1656 1
 3368 0030 00BF     		nop
 3369 0032 1437     		adds	r7, r7, #20
 3370              		.cfi_def_cfa_offset 4
 3371 0034 BD46     		mov	sp, r7
 3372              		.cfi_def_cfa_register 13
 3373              		@ sp needed
 3374 0036 5DF8047B 		ldr	r7, [sp], #4
 3375              		.cfi_restore 7
 3376              		.cfi_def_cfa_offset 0
 3377 003a 7047     		bx	lr
 3378              		.cfi_endproc
 3379              	.LFE166:
 3381              		.section	.text.TIM_OC2NPolarityConfig,"ax",%progbits
 3382              		.align	1
 3383              		.global	TIM_OC2NPolarityConfig
 3384              		.syntax unified
 3385              		.thumb
 3386              		.thumb_func
 3388              	TIM_OC2NPolarityConfig:
 3389              	.LFB167:
1657:./Lib/Src/stm32f4xx_tim.c **** 
1658:./Lib/Src/stm32f4xx_tim.c **** /**
1659:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1660:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1661:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1662:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1663:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1664:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1665:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1666:./Lib/Src/stm32f4xx_tim.c ****   */
1667:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1668:./Lib/Src/stm32f4xx_tim.c **** {
 3390              		.loc 1 1668 1
ARM GAS  /tmp/ccOaESyR.s 			page 89


 3391              		.cfi_startproc
 3392              		@ args = 0, pretend = 0, frame = 16
 3393              		@ frame_needed = 1, uses_anonymous_args = 0
 3394              		@ link register save eliminated.
 3395 0000 80B4     		push	{r7}
 3396              		.cfi_def_cfa_offset 4
 3397              		.cfi_offset 7, -4
 3398 0002 85B0     		sub	sp, sp, #20
 3399              		.cfi_def_cfa_offset 24
 3400 0004 00AF     		add	r7, sp, #0
 3401              		.cfi_def_cfa_register 7
 3402 0006 7860     		str	r0, [r7, #4]
 3403 0008 0B46     		mov	r3, r1
 3404 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1669:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 3405              		.loc 1 1669 12
 3406 000c 0023     		movs	r3, #0
 3407 000e FB81     		strh	r3, [r7, #14]	@ movhi
1670:./Lib/Src/stm32f4xx_tim.c **** 
1671:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1672:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1673:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1674:./Lib/Src/stm32f4xx_tim.c ****   
1675:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 3408              		.loc 1 1675 11
 3409 0010 7B68     		ldr	r3, [r7, #4]
 3410 0012 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3411 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1676:./Lib/Src/stm32f4xx_tim.c **** 
1677:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the CC2NP Bit */
1678:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 3412              		.loc 1 1678 11
 3413 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3414 0018 23F08003 		bic	r3, r3, #128
 3415 001c FB81     		strh	r3, [r7, #14]	@ movhi
1679:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 3416              		.loc 1 1679 14
 3417 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3418 0020 1B01     		lsls	r3, r3, #4
 3419 0022 9AB2     		uxth	r2, r3
 3420              		.loc 1 1679 11
 3421 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3422 0026 1343     		orrs	r3, r3, r2
 3423 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1680:./Lib/Src/stm32f4xx_tim.c **** 
1681:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1682:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 3424              		.loc 1 1682 14
 3425 002a 7B68     		ldr	r3, [r7, #4]
 3426 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 3427 002e 1A84     		strh	r2, [r3, #32]	@ movhi
1683:./Lib/Src/stm32f4xx_tim.c **** }
 3428              		.loc 1 1683 1
 3429 0030 00BF     		nop
 3430 0032 1437     		adds	r7, r7, #20
 3431              		.cfi_def_cfa_offset 4
 3432 0034 BD46     		mov	sp, r7
ARM GAS  /tmp/ccOaESyR.s 			page 90


 3433              		.cfi_def_cfa_register 13
 3434              		@ sp needed
 3435 0036 5DF8047B 		ldr	r7, [sp], #4
 3436              		.cfi_restore 7
 3437              		.cfi_def_cfa_offset 0
 3438 003a 7047     		bx	lr
 3439              		.cfi_endproc
 3440              	.LFE167:
 3442              		.section	.text.TIM_OC3PolarityConfig,"ax",%progbits
 3443              		.align	1
 3444              		.global	TIM_OC3PolarityConfig
 3445              		.syntax unified
 3446              		.thumb
 3447              		.thumb_func
 3449              	TIM_OC3PolarityConfig:
 3450              	.LFB168:
1684:./Lib/Src/stm32f4xx_tim.c **** 
1685:./Lib/Src/stm32f4xx_tim.c **** /**
1686:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1687:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1688:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1689:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1690:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1691:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1692:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1693:./Lib/Src/stm32f4xx_tim.c ****   */
1694:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1695:./Lib/Src/stm32f4xx_tim.c **** {
 3451              		.loc 1 1695 1
 3452              		.cfi_startproc
 3453              		@ args = 0, pretend = 0, frame = 16
 3454              		@ frame_needed = 1, uses_anonymous_args = 0
 3455              		@ link register save eliminated.
 3456 0000 80B4     		push	{r7}
 3457              		.cfi_def_cfa_offset 4
 3458              		.cfi_offset 7, -4
 3459 0002 85B0     		sub	sp, sp, #20
 3460              		.cfi_def_cfa_offset 24
 3461 0004 00AF     		add	r7, sp, #0
 3462              		.cfi_def_cfa_register 7
 3463 0006 7860     		str	r0, [r7, #4]
 3464 0008 0B46     		mov	r3, r1
 3465 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1696:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 3466              		.loc 1 1696 12
 3467 000c 0023     		movs	r3, #0
 3468 000e FB81     		strh	r3, [r7, #14]	@ movhi
1697:./Lib/Src/stm32f4xx_tim.c **** 
1698:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1699:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1700:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1701:./Lib/Src/stm32f4xx_tim.c **** 
1702:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 3469              		.loc 1 1702 11
 3470 0010 7B68     		ldr	r3, [r7, #4]
 3471 0012 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3472 0014 FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 91


1703:./Lib/Src/stm32f4xx_tim.c **** 
1704:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the CC3P Bit */
1705:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 3473              		.loc 1 1705 11
 3474 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3475 0018 23F40073 		bic	r3, r3, #512
 3476 001c FB81     		strh	r3, [r7, #14]	@ movhi
1706:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 3477              		.loc 1 1706 14
 3478 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3479 0020 1B02     		lsls	r3, r3, #8
 3480 0022 9AB2     		uxth	r2, r3
 3481              		.loc 1 1706 11
 3482 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3483 0026 1343     		orrs	r3, r3, r2
 3484 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1707:./Lib/Src/stm32f4xx_tim.c **** 
1708:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1709:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 3485              		.loc 1 1709 14
 3486 002a 7B68     		ldr	r3, [r7, #4]
 3487 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 3488 002e 1A84     		strh	r2, [r3, #32]	@ movhi
1710:./Lib/Src/stm32f4xx_tim.c **** }
 3489              		.loc 1 1710 1
 3490 0030 00BF     		nop
 3491 0032 1437     		adds	r7, r7, #20
 3492              		.cfi_def_cfa_offset 4
 3493 0034 BD46     		mov	sp, r7
 3494              		.cfi_def_cfa_register 13
 3495              		@ sp needed
 3496 0036 5DF8047B 		ldr	r7, [sp], #4
 3497              		.cfi_restore 7
 3498              		.cfi_def_cfa_offset 0
 3499 003a 7047     		bx	lr
 3500              		.cfi_endproc
 3501              	.LFE168:
 3503              		.section	.text.TIM_OC3NPolarityConfig,"ax",%progbits
 3504              		.align	1
 3505              		.global	TIM_OC3NPolarityConfig
 3506              		.syntax unified
 3507              		.thumb
 3508              		.thumb_func
 3510              	TIM_OC3NPolarityConfig:
 3511              	.LFB169:
1711:./Lib/Src/stm32f4xx_tim.c **** 
1712:./Lib/Src/stm32f4xx_tim.c **** /**
1713:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1714:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1715:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1716:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1717:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_High: Output Compare active high
1718:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCNPolarity_Low: Output Compare active low
1719:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1720:./Lib/Src/stm32f4xx_tim.c ****   */
1721:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1722:./Lib/Src/stm32f4xx_tim.c **** {
ARM GAS  /tmp/ccOaESyR.s 			page 92


 3512              		.loc 1 1722 1
 3513              		.cfi_startproc
 3514              		@ args = 0, pretend = 0, frame = 16
 3515              		@ frame_needed = 1, uses_anonymous_args = 0
 3516              		@ link register save eliminated.
 3517 0000 80B4     		push	{r7}
 3518              		.cfi_def_cfa_offset 4
 3519              		.cfi_offset 7, -4
 3520 0002 85B0     		sub	sp, sp, #20
 3521              		.cfi_def_cfa_offset 24
 3522 0004 00AF     		add	r7, sp, #0
 3523              		.cfi_def_cfa_register 7
 3524 0006 7860     		str	r0, [r7, #4]
 3525 0008 0B46     		mov	r3, r1
 3526 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1723:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 3527              		.loc 1 1723 12
 3528 000c 0023     		movs	r3, #0
 3529 000e FB81     		strh	r3, [r7, #14]	@ movhi
1724:./Lib/Src/stm32f4xx_tim.c ****  
1725:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1726:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1727:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1728:./Lib/Src/stm32f4xx_tim.c ****     
1729:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 3530              		.loc 1 1729 11
 3531 0010 7B68     		ldr	r3, [r7, #4]
 3532 0012 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3533 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1730:./Lib/Src/stm32f4xx_tim.c **** 
1731:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the CC3NP Bit */
1732:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 3534              		.loc 1 1732 11
 3535 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3536 0018 23F40063 		bic	r3, r3, #2048
 3537 001c FB81     		strh	r3, [r7, #14]	@ movhi
1733:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 3538              		.loc 1 1733 14
 3539 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3540 0020 1B02     		lsls	r3, r3, #8
 3541 0022 9AB2     		uxth	r2, r3
 3542              		.loc 1 1733 11
 3543 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3544 0026 1343     		orrs	r3, r3, r2
 3545 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1734:./Lib/Src/stm32f4xx_tim.c **** 
1735:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1736:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 3546              		.loc 1 1736 14
 3547 002a 7B68     		ldr	r3, [r7, #4]
 3548 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 3549 002e 1A84     		strh	r2, [r3, #32]	@ movhi
1737:./Lib/Src/stm32f4xx_tim.c **** }
 3550              		.loc 1 1737 1
 3551 0030 00BF     		nop
 3552 0032 1437     		adds	r7, r7, #20
 3553              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccOaESyR.s 			page 93


 3554 0034 BD46     		mov	sp, r7
 3555              		.cfi_def_cfa_register 13
 3556              		@ sp needed
 3557 0036 5DF8047B 		ldr	r7, [sp], #4
 3558              		.cfi_restore 7
 3559              		.cfi_def_cfa_offset 0
 3560 003a 7047     		bx	lr
 3561              		.cfi_endproc
 3562              	.LFE169:
 3564              		.section	.text.TIM_OC4PolarityConfig,"ax",%progbits
 3565              		.align	1
 3566              		.global	TIM_OC4PolarityConfig
 3567              		.syntax unified
 3568              		.thumb
 3569              		.thumb_func
 3571              	TIM_OC4PolarityConfig:
 3572              	.LFB170:
1738:./Lib/Src/stm32f4xx_tim.c **** 
1739:./Lib/Src/stm32f4xx_tim.c **** /**
1740:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1741:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1742:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1743:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1744:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_High: Output Compare active high
1745:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_OCPolarity_Low: Output Compare active low
1746:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1747:./Lib/Src/stm32f4xx_tim.c ****   */
1748:./Lib/Src/stm32f4xx_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1749:./Lib/Src/stm32f4xx_tim.c **** {
 3573              		.loc 1 1749 1
 3574              		.cfi_startproc
 3575              		@ args = 0, pretend = 0, frame = 16
 3576              		@ frame_needed = 1, uses_anonymous_args = 0
 3577              		@ link register save eliminated.
 3578 0000 80B4     		push	{r7}
 3579              		.cfi_def_cfa_offset 4
 3580              		.cfi_offset 7, -4
 3581 0002 85B0     		sub	sp, sp, #20
 3582              		.cfi_def_cfa_offset 24
 3583 0004 00AF     		add	r7, sp, #0
 3584              		.cfi_def_cfa_register 7
 3585 0006 7860     		str	r0, [r7, #4]
 3586 0008 0B46     		mov	r3, r1
 3587 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1750:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 3588              		.loc 1 1750 12
 3589 000c 0023     		movs	r3, #0
 3590 000e FB81     		strh	r3, [r7, #14]	@ movhi
1751:./Lib/Src/stm32f4xx_tim.c **** 
1752:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1753:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1754:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1755:./Lib/Src/stm32f4xx_tim.c **** 
1756:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 3591              		.loc 1 1756 11
 3592 0010 7B68     		ldr	r3, [r7, #4]
 3593 0012 1B8C     		ldrh	r3, [r3, #32]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 94


 3594 0014 FB81     		strh	r3, [r7, #14]	@ movhi
1757:./Lib/Src/stm32f4xx_tim.c **** 
1758:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the CC4P Bit */
1759:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 3595              		.loc 1 1759 11
 3596 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3597 0018 23F40053 		bic	r3, r3, #8192
 3598 001c FB81     		strh	r3, [r7, #14]	@ movhi
1760:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 3599              		.loc 1 1760 14
 3600 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3601 0020 1B03     		lsls	r3, r3, #12
 3602 0022 9AB2     		uxth	r2, r3
 3603              		.loc 1 1760 11
 3604 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3605 0026 1343     		orrs	r3, r3, r2
 3606 0028 FB81     		strh	r3, [r7, #14]	@ movhi
1761:./Lib/Src/stm32f4xx_tim.c **** 
1762:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER register */
1763:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 3607              		.loc 1 1763 14
 3608 002a 7B68     		ldr	r3, [r7, #4]
 3609 002c FA89     		ldrh	r2, [r7, #14]	@ movhi
 3610 002e 1A84     		strh	r2, [r3, #32]	@ movhi
1764:./Lib/Src/stm32f4xx_tim.c **** }
 3611              		.loc 1 1764 1
 3612 0030 00BF     		nop
 3613 0032 1437     		adds	r7, r7, #20
 3614              		.cfi_def_cfa_offset 4
 3615 0034 BD46     		mov	sp, r7
 3616              		.cfi_def_cfa_register 13
 3617              		@ sp needed
 3618 0036 5DF8047B 		ldr	r7, [sp], #4
 3619              		.cfi_restore 7
 3620              		.cfi_def_cfa_offset 0
 3621 003a 7047     		bx	lr
 3622              		.cfi_endproc
 3623              	.LFE170:
 3625              		.section	.text.TIM_CCxCmd,"ax",%progbits
 3626              		.align	1
 3627              		.global	TIM_CCxCmd
 3628              		.syntax unified
 3629              		.thumb
 3630              		.thumb_func
 3632              	TIM_CCxCmd:
 3633              	.LFB171:
1765:./Lib/Src/stm32f4xx_tim.c **** 
1766:./Lib/Src/stm32f4xx_tim.c **** /**
1767:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1768:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1769:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1770:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1771:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1772:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1773:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1774:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_4: TIM Channel 4
1775:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
ARM GAS  /tmp/ccOaESyR.s 			page 95


1776:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1777:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1778:./Lib/Src/stm32f4xx_tim.c ****   */
1779:./Lib/Src/stm32f4xx_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1780:./Lib/Src/stm32f4xx_tim.c **** {
 3634              		.loc 1 1780 1
 3635              		.cfi_startproc
 3636              		@ args = 0, pretend = 0, frame = 16
 3637              		@ frame_needed = 1, uses_anonymous_args = 0
 3638              		@ link register save eliminated.
 3639 0000 80B4     		push	{r7}
 3640              		.cfi_def_cfa_offset 4
 3641              		.cfi_offset 7, -4
 3642 0002 85B0     		sub	sp, sp, #20
 3643              		.cfi_def_cfa_offset 24
 3644 0004 00AF     		add	r7, sp, #0
 3645              		.cfi_def_cfa_register 7
 3646 0006 7860     		str	r0, [r7, #4]
 3647 0008 0B46     		mov	r3, r1
 3648 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3649 000c 1346     		mov	r3, r2	@ movhi
 3650 000e 3B80     		strh	r3, [r7]	@ movhi
1781:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
 3651              		.loc 1 1781 12
 3652 0010 0023     		movs	r3, #0
 3653 0012 FB81     		strh	r3, [r7, #14]	@ movhi
1782:./Lib/Src/stm32f4xx_tim.c **** 
1783:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1784:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
1785:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1786:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1787:./Lib/Src/stm32f4xx_tim.c **** 
1788:./Lib/Src/stm32f4xx_tim.c ****   tmp = CCER_CCE_SET << TIM_Channel;
 3654              		.loc 1 1788 22
 3655 0014 7B88     		ldrh	r3, [r7, #2]
 3656 0016 0122     		movs	r2, #1
 3657 0018 02FA03F3 		lsl	r3, r2, r3
 3658              		.loc 1 1788 7
 3659 001c FB81     		strh	r3, [r7, #14]	@ movhi
1789:./Lib/Src/stm32f4xx_tim.c **** 
1790:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the CCxE Bit */
1791:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
 3660              		.loc 1 1791 7
 3661 001e 7B68     		ldr	r3, [r7, #4]
 3662 0020 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3663 0022 9AB2     		uxth	r2, r3
 3664              		.loc 1 1791 17
 3665 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3666 0026 DB43     		mvns	r3, r3
 3667 0028 9BB2     		uxth	r3, r3
 3668              		.loc 1 1791 14
 3669 002a 1340     		ands	r3, r3, r2
 3670 002c 9AB2     		uxth	r2, r3
 3671 002e 7B68     		ldr	r3, [r7, #4]
 3672 0030 1A84     		strh	r2, [r3, #32]	@ movhi
1792:./Lib/Src/stm32f4xx_tim.c **** 
1793:./Lib/Src/stm32f4xx_tim.c ****   /* Set or reset the CCxE Bit */ 
ARM GAS  /tmp/ccOaESyR.s 			page 96


1794:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 3673              		.loc 1 1794 7
 3674 0032 7B68     		ldr	r3, [r7, #4]
 3675 0034 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3676 0036 9AB2     		uxth	r2, r3
 3677              		.loc 1 1794 37
 3678 0038 3988     		ldrh	r1, [r7]
 3679 003a 7B88     		ldrh	r3, [r7, #2]
 3680 003c 01FA03F3 		lsl	r3, r1, r3
 3681              		.loc 1 1794 18
 3682 0040 9BB2     		uxth	r3, r3
 3683              		.loc 1 1794 14
 3684 0042 1343     		orrs	r3, r3, r2
 3685 0044 9AB2     		uxth	r2, r3
 3686 0046 7B68     		ldr	r3, [r7, #4]
 3687 0048 1A84     		strh	r2, [r3, #32]	@ movhi
1795:./Lib/Src/stm32f4xx_tim.c **** }
 3688              		.loc 1 1795 1
 3689 004a 00BF     		nop
 3690 004c 1437     		adds	r7, r7, #20
 3691              		.cfi_def_cfa_offset 4
 3692 004e BD46     		mov	sp, r7
 3693              		.cfi_def_cfa_register 13
 3694              		@ sp needed
 3695 0050 5DF8047B 		ldr	r7, [sp], #4
 3696              		.cfi_restore 7
 3697              		.cfi_def_cfa_offset 0
 3698 0054 7047     		bx	lr
 3699              		.cfi_endproc
 3700              	.LFE171:
 3702              		.section	.text.TIM_CCxNCmd,"ax",%progbits
 3703              		.align	1
 3704              		.global	TIM_CCxNCmd
 3705              		.syntax unified
 3706              		.thumb
 3707              		.thumb_func
 3709              	TIM_CCxNCmd:
 3710              	.LFB172:
1796:./Lib/Src/stm32f4xx_tim.c **** 
1797:./Lib/Src/stm32f4xx_tim.c **** /**
1798:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1799:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1800:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1801:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
1802:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_1: TIM Channel 1
1803:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_2: TIM Channel 2
1804:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_Channel_3: TIM Channel 3
1805:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
1806:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
1807:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1808:./Lib/Src/stm32f4xx_tim.c ****   */
1809:./Lib/Src/stm32f4xx_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
1810:./Lib/Src/stm32f4xx_tim.c **** {
 3711              		.loc 1 1810 1
 3712              		.cfi_startproc
 3713              		@ args = 0, pretend = 0, frame = 16
 3714              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccOaESyR.s 			page 97


 3715              		@ link register save eliminated.
 3716 0000 80B4     		push	{r7}
 3717              		.cfi_def_cfa_offset 4
 3718              		.cfi_offset 7, -4
 3719 0002 85B0     		sub	sp, sp, #20
 3720              		.cfi_def_cfa_offset 24
 3721 0004 00AF     		add	r7, sp, #0
 3722              		.cfi_def_cfa_register 7
 3723 0006 7860     		str	r0, [r7, #4]
 3724 0008 0B46     		mov	r3, r1
 3725 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 3726 000c 1346     		mov	r3, r2	@ movhi
 3727 000e 3B80     		strh	r3, [r7]	@ movhi
1811:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmp = 0;
 3728              		.loc 1 1811 12
 3729 0010 0023     		movs	r3, #0
 3730 0012 FB81     		strh	r3, [r7, #14]	@ movhi
1812:./Lib/Src/stm32f4xx_tim.c **** 
1813:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1814:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1815:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
1816:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
1817:./Lib/Src/stm32f4xx_tim.c **** 
1818:./Lib/Src/stm32f4xx_tim.c ****   tmp = CCER_CCNE_SET << TIM_Channel;
 3731              		.loc 1 1818 23
 3732 0014 7B88     		ldrh	r3, [r7, #2]
 3733 0016 0422     		movs	r2, #4
 3734 0018 02FA03F3 		lsl	r3, r2, r3
 3735              		.loc 1 1818 7
 3736 001c FB81     		strh	r3, [r7, #14]	@ movhi
1819:./Lib/Src/stm32f4xx_tim.c **** 
1820:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the CCxNE Bit */
1821:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
 3737              		.loc 1 1821 7
 3738 001e 7B68     		ldr	r3, [r7, #4]
 3739 0020 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3740 0022 9AB2     		uxth	r2, r3
 3741              		.loc 1 1821 17
 3742 0024 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3743 0026 DB43     		mvns	r3, r3
 3744 0028 9BB2     		uxth	r3, r3
 3745              		.loc 1 1821 14
 3746 002a 1340     		ands	r3, r3, r2
 3747 002c 9AB2     		uxth	r2, r3
 3748 002e 7B68     		ldr	r3, [r7, #4]
 3749 0030 1A84     		strh	r2, [r3, #32]	@ movhi
1822:./Lib/Src/stm32f4xx_tim.c **** 
1823:./Lib/Src/stm32f4xx_tim.c ****   /* Set or reset the CCxNE Bit */ 
1824:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 3750              		.loc 1 1824 7
 3751 0032 7B68     		ldr	r3, [r7, #4]
 3752 0034 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3753 0036 9AB2     		uxth	r2, r3
 3754              		.loc 1 1824 38
 3755 0038 3988     		ldrh	r1, [r7]
 3756 003a 7B88     		ldrh	r3, [r7, #2]
 3757 003c 01FA03F3 		lsl	r3, r1, r3
ARM GAS  /tmp/ccOaESyR.s 			page 98


 3758              		.loc 1 1824 18
 3759 0040 9BB2     		uxth	r3, r3
 3760              		.loc 1 1824 14
 3761 0042 1343     		orrs	r3, r3, r2
 3762 0044 9AB2     		uxth	r2, r3
 3763 0046 7B68     		ldr	r3, [r7, #4]
 3764 0048 1A84     		strh	r2, [r3, #32]	@ movhi
1825:./Lib/Src/stm32f4xx_tim.c **** }
 3765              		.loc 1 1825 1
 3766 004a 00BF     		nop
 3767 004c 1437     		adds	r7, r7, #20
 3768              		.cfi_def_cfa_offset 4
 3769 004e BD46     		mov	sp, r7
 3770              		.cfi_def_cfa_register 13
 3771              		@ sp needed
 3772 0050 5DF8047B 		ldr	r7, [sp], #4
 3773              		.cfi_restore 7
 3774              		.cfi_def_cfa_offset 0
 3775 0054 7047     		bx	lr
 3776              		.cfi_endproc
 3777              	.LFE172:
 3779              		.section	.text.TIM_ICInit,"ax",%progbits
 3780              		.align	1
 3781              		.global	TIM_ICInit
 3782              		.syntax unified
 3783              		.thumb
 3784              		.thumb_func
 3786              	TIM_ICInit:
 3787              	.LFB173:
1826:./Lib/Src/stm32f4xx_tim.c **** /**
1827:./Lib/Src/stm32f4xx_tim.c ****   * @}
1828:./Lib/Src/stm32f4xx_tim.c ****   */
1829:./Lib/Src/stm32f4xx_tim.c **** 
1830:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group3 Input Capture management functions
1831:./Lib/Src/stm32f4xx_tim.c ****  *  @brief    Input Capture management functions 
1832:./Lib/Src/stm32f4xx_tim.c ****  *
1833:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
1834:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
1835:./Lib/Src/stm32f4xx_tim.c ****                   ##### Input Capture management functions #####
1836:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
1837:./Lib/Src/stm32f4xx_tim.c ****          
1838:./Lib/Src/stm32f4xx_tim.c ****             ##### TIM Driver: how to use it in Input Capture Mode #####
1839:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
1840:./Lib/Src/stm32f4xx_tim.c ****     [..]    
1841:./Lib/Src/stm32f4xx_tim.c ****     To use the Timer in Input Capture mode, the following steps are mandatory:
1842:./Lib/Src/stm32f4xx_tim.c ****        
1843:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable TIM clock using RCC_APBxPeriphClockCmd(RCC_APBxPeriph_TIMx, ENABLE) 
1844:./Lib/Src/stm32f4xx_tim.c ****           function
1845:./Lib/Src/stm32f4xx_tim.c ****        
1846:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the TIM pins by configuring the corresponding GPIO pins
1847:./Lib/Src/stm32f4xx_tim.c ****        
1848:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the Time base unit as described in the first part of this driver,
1849:./Lib/Src/stm32f4xx_tim.c ****           if needed, else the Timer will run with the default configuration:
1850:./Lib/Src/stm32f4xx_tim.c ****         (++) Autoreload value = 0xFFFF
1851:./Lib/Src/stm32f4xx_tim.c ****         (++) Prescaler value = 0x0000
1852:./Lib/Src/stm32f4xx_tim.c ****         (++) Counter mode = Up counting
1853:./Lib/Src/stm32f4xx_tim.c ****         (++) Clock Division = TIM_CKD_DIV1
ARM GAS  /tmp/ccOaESyR.s 			page 99


1854:./Lib/Src/stm32f4xx_tim.c ****           
1855:./Lib/Src/stm32f4xx_tim.c ****       (#) Fill the TIM_ICInitStruct with the desired parameters including:
1856:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Channel: TIM_Channel
1857:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Input Capture polarity: TIM_ICPolarity
1858:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Input Capture selection: TIM_ICSelection
1859:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Input Capture Prescaler: TIM_ICPrescaler
1860:./Lib/Src/stm32f4xx_tim.c ****         (++) TIM Input Capture filter value: TIM_ICFilter
1861:./Lib/Src/stm32f4xx_tim.c ****        
1862:./Lib/Src/stm32f4xx_tim.c ****       (#) Call TIM_ICInit(TIMx, &TIM_ICInitStruct) to configure the desired channel 
1863:./Lib/Src/stm32f4xx_tim.c ****           with the corresponding configuration and to measure only frequency 
1864:./Lib/Src/stm32f4xx_tim.c ****           or duty cycle of the input signal, or, Call TIM_PWMIConfig(TIMx, &TIM_ICInitStruct) 
1865:./Lib/Src/stm32f4xx_tim.c ****           to configure the desired channels with the corresponding configuration 
1866:./Lib/Src/stm32f4xx_tim.c ****           and to measure the frequency and the duty cycle of the input signal
1867:./Lib/Src/stm32f4xx_tim.c ****           
1868:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable the NVIC or the DMA to read the measured frequency. 
1869:./Lib/Src/stm32f4xx_tim.c ****           
1870:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable the corresponding interrupt (or DMA request) to read the Captured 
1871:./Lib/Src/stm32f4xx_tim.c ****           value, using the function TIM_ITConfig(TIMx, TIM_IT_CCx) 
1872:./Lib/Src/stm32f4xx_tim.c ****           (or TIM_DMA_Cmd(TIMx, TIM_DMA_CCx)) 
1873:./Lib/Src/stm32f4xx_tim.c ****        
1874:./Lib/Src/stm32f4xx_tim.c ****       (#) Call the TIM_Cmd(ENABLE) function to enable the TIM counter.
1875:./Lib/Src/stm32f4xx_tim.c ****        
1876:./Lib/Src/stm32f4xx_tim.c ****       (#) Use TIM_GetCapturex(TIMx); to read the captured value.
1877:./Lib/Src/stm32f4xx_tim.c ****        
1878:./Lib/Src/stm32f4xx_tim.c ****       -@- All other functions can be used separately to modify, if needed,
1879:./Lib/Src/stm32f4xx_tim.c ****           a specific feature of the Timer. 
1880:./Lib/Src/stm32f4xx_tim.c **** 
1881:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
1882:./Lib/Src/stm32f4xx_tim.c ****   * @{
1883:./Lib/Src/stm32f4xx_tim.c ****   */
1884:./Lib/Src/stm32f4xx_tim.c **** 
1885:./Lib/Src/stm32f4xx_tim.c **** /**
1886:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified parameters
1887:./Lib/Src/stm32f4xx_tim.c ****   *         in the TIM_ICInitStruct.
1888:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
1889:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
1890:./Lib/Src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
1891:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1892:./Lib/Src/stm32f4xx_tim.c ****   */
1893:./Lib/Src/stm32f4xx_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
1894:./Lib/Src/stm32f4xx_tim.c **** {
 3788              		.loc 1 1894 1
 3789              		.cfi_startproc
 3790              		@ args = 0, pretend = 0, frame = 8
 3791              		@ frame_needed = 1, uses_anonymous_args = 0
 3792 0000 80B5     		push	{r7, lr}
 3793              		.cfi_def_cfa_offset 8
 3794              		.cfi_offset 7, -8
 3795              		.cfi_offset 14, -4
 3796 0002 82B0     		sub	sp, sp, #8
 3797              		.cfi_def_cfa_offset 16
 3798 0004 00AF     		add	r7, sp, #0
 3799              		.cfi_def_cfa_register 7
 3800 0006 7860     		str	r0, [r7, #4]
 3801 0008 3960     		str	r1, [r7]
1895:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1896:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
ARM GAS  /tmp/ccOaESyR.s 			page 100


1897:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
1898:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
1899:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
1900:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
1901:./Lib/Src/stm32f4xx_tim.c ****   
1902:./Lib/Src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 3802              		.loc 1 1902 23
 3803 000a 3B68     		ldr	r3, [r7]
 3804 000c 1B88     		ldrh	r3, [r3]
 3805              		.loc 1 1902 6
 3806 000e 002B     		cmp	r3, #0
 3807 0010 0FD1     		bne	.L109
1903:./Lib/Src/stm32f4xx_tim.c ****   {
1904:./Lib/Src/stm32f4xx_tim.c ****     /* TI1 Configuration */
1905:./Lib/Src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 3808              		.loc 1 1905 5
 3809 0012 3B68     		ldr	r3, [r7]
 3810 0014 5988     		ldrh	r1, [r3, #2]
 3811 0016 3B68     		ldr	r3, [r7]
 3812 0018 9A88     		ldrh	r2, [r3, #4]
 3813 001a 3B68     		ldr	r3, [r7]
 3814 001c 1B89     		ldrh	r3, [r3, #8]
 3815 001e 7868     		ldr	r0, [r7, #4]
 3816 0020 FFF7FEFF 		bl	TI1_Config
1906:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1907:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1908:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1909:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 3817              		.loc 1 1909 5
 3818 0024 3B68     		ldr	r3, [r7]
 3819 0026 DB88     		ldrh	r3, [r3, #6]
 3820 0028 1946     		mov	r1, r3
 3821 002a 7868     		ldr	r0, [r7, #4]
 3822 002c FFF7FEFF 		bl	TIM_SetIC1Prescaler
1910:./Lib/Src/stm32f4xx_tim.c ****   }
1911:./Lib/Src/stm32f4xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
1912:./Lib/Src/stm32f4xx_tim.c ****   {
1913:./Lib/Src/stm32f4xx_tim.c ****     /* TI2 Configuration */
1914:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1915:./Lib/Src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1916:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1917:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1918:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1919:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1920:./Lib/Src/stm32f4xx_tim.c ****   }
1921:./Lib/Src/stm32f4xx_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
1922:./Lib/Src/stm32f4xx_tim.c ****   {
1923:./Lib/Src/stm32f4xx_tim.c ****     /* TI3 Configuration */
1924:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1925:./Lib/Src/stm32f4xx_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
1926:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1927:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1928:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1929:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1930:./Lib/Src/stm32f4xx_tim.c ****   }
1931:./Lib/Src/stm32f4xx_tim.c ****   else
1932:./Lib/Src/stm32f4xx_tim.c ****   {
ARM GAS  /tmp/ccOaESyR.s 			page 101


1933:./Lib/Src/stm32f4xx_tim.c ****     /* TI4 Configuration */
1934:./Lib/Src/stm32f4xx_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1935:./Lib/Src/stm32f4xx_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
1936:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
1937:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1938:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
1939:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
1940:./Lib/Src/stm32f4xx_tim.c ****   }
1941:./Lib/Src/stm32f4xx_tim.c **** }
 3823              		.loc 1 1941 1
 3824 0030 36E0     		b	.L113
 3825              	.L109:
1911:./Lib/Src/stm32f4xx_tim.c ****   {
 3826              		.loc 1 1911 28
 3827 0032 3B68     		ldr	r3, [r7]
 3828 0034 1B88     		ldrh	r3, [r3]
1911:./Lib/Src/stm32f4xx_tim.c ****   {
 3829              		.loc 1 1911 11
 3830 0036 042B     		cmp	r3, #4
 3831 0038 0FD1     		bne	.L111
1915:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3832              		.loc 1 1915 5
 3833 003a 3B68     		ldr	r3, [r7]
 3834 003c 5988     		ldrh	r1, [r3, #2]
 3835 003e 3B68     		ldr	r3, [r7]
 3836 0040 9A88     		ldrh	r2, [r3, #4]
 3837 0042 3B68     		ldr	r3, [r7]
 3838 0044 1B89     		ldrh	r3, [r3, #8]
 3839 0046 7868     		ldr	r0, [r7, #4]
 3840 0048 FFF7FEFF 		bl	TI2_Config
1919:./Lib/Src/stm32f4xx_tim.c ****   }
 3841              		.loc 1 1919 5
 3842 004c 3B68     		ldr	r3, [r7]
 3843 004e DB88     		ldrh	r3, [r3, #6]
 3844 0050 1946     		mov	r1, r3
 3845 0052 7868     		ldr	r0, [r7, #4]
 3846 0054 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 3847              		.loc 1 1941 1
 3848 0058 22E0     		b	.L113
 3849              	.L111:
1921:./Lib/Src/stm32f4xx_tim.c ****   {
 3850              		.loc 1 1921 28
 3851 005a 3B68     		ldr	r3, [r7]
 3852 005c 1B88     		ldrh	r3, [r3]
1921:./Lib/Src/stm32f4xx_tim.c ****   {
 3853              		.loc 1 1921 11
 3854 005e 082B     		cmp	r3, #8
 3855 0060 0FD1     		bne	.L112
1925:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3856              		.loc 1 1925 5
 3857 0062 3B68     		ldr	r3, [r7]
 3858 0064 5988     		ldrh	r1, [r3, #2]
 3859 0066 3B68     		ldr	r3, [r7]
 3860 0068 9A88     		ldrh	r2, [r3, #4]
 3861 006a 3B68     		ldr	r3, [r7]
 3862 006c 1B89     		ldrh	r3, [r3, #8]
 3863 006e 7868     		ldr	r0, [r7, #4]
ARM GAS  /tmp/ccOaESyR.s 			page 102


 3864 0070 FFF7FEFF 		bl	TI3_Config
1929:./Lib/Src/stm32f4xx_tim.c ****   }
 3865              		.loc 1 1929 5
 3866 0074 3B68     		ldr	r3, [r7]
 3867 0076 DB88     		ldrh	r3, [r3, #6]
 3868 0078 1946     		mov	r1, r3
 3869 007a 7868     		ldr	r0, [r7, #4]
 3870 007c FFF7FEFF 		bl	TIM_SetIC3Prescaler
 3871              		.loc 1 1941 1
 3872 0080 0EE0     		b	.L113
 3873              	.L112:
1935:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 3874              		.loc 1 1935 5
 3875 0082 3B68     		ldr	r3, [r7]
 3876 0084 5988     		ldrh	r1, [r3, #2]
 3877 0086 3B68     		ldr	r3, [r7]
 3878 0088 9A88     		ldrh	r2, [r3, #4]
 3879 008a 3B68     		ldr	r3, [r7]
 3880 008c 1B89     		ldrh	r3, [r3, #8]
 3881 008e 7868     		ldr	r0, [r7, #4]
 3882 0090 FFF7FEFF 		bl	TI4_Config
1939:./Lib/Src/stm32f4xx_tim.c ****   }
 3883              		.loc 1 1939 5
 3884 0094 3B68     		ldr	r3, [r7]
 3885 0096 DB88     		ldrh	r3, [r3, #6]
 3886 0098 1946     		mov	r1, r3
 3887 009a 7868     		ldr	r0, [r7, #4]
 3888 009c FFF7FEFF 		bl	TIM_SetIC4Prescaler
 3889              	.L113:
 3890              		.loc 1 1941 1
 3891 00a0 00BF     		nop
 3892 00a2 0837     		adds	r7, r7, #8
 3893              		.cfi_def_cfa_offset 8
 3894 00a4 BD46     		mov	sp, r7
 3895              		.cfi_def_cfa_register 13
 3896              		@ sp needed
 3897 00a6 80BD     		pop	{r7, pc}
 3898              		.cfi_endproc
 3899              	.LFE173:
 3901              		.section	.text.TIM_ICStructInit,"ax",%progbits
 3902              		.align	1
 3903              		.global	TIM_ICStructInit
 3904              		.syntax unified
 3905              		.thumb
 3906              		.thumb_func
 3908              	TIM_ICStructInit:
 3909              	.LFB174:
1942:./Lib/Src/stm32f4xx_tim.c **** 
1943:./Lib/Src/stm32f4xx_tim.c **** /**
1944:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
1945:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
1946:./Lib/Src/stm32f4xx_tim.c ****   *         be initialized.
1947:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1948:./Lib/Src/stm32f4xx_tim.c ****   */
1949:./Lib/Src/stm32f4xx_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
1950:./Lib/Src/stm32f4xx_tim.c **** {
 3910              		.loc 1 1950 1
ARM GAS  /tmp/ccOaESyR.s 			page 103


 3911              		.cfi_startproc
 3912              		@ args = 0, pretend = 0, frame = 8
 3913              		@ frame_needed = 1, uses_anonymous_args = 0
 3914              		@ link register save eliminated.
 3915 0000 80B4     		push	{r7}
 3916              		.cfi_def_cfa_offset 4
 3917              		.cfi_offset 7, -4
 3918 0002 83B0     		sub	sp, sp, #12
 3919              		.cfi_def_cfa_offset 16
 3920 0004 00AF     		add	r7, sp, #0
 3921              		.cfi_def_cfa_register 7
 3922 0006 7860     		str	r0, [r7, #4]
1951:./Lib/Src/stm32f4xx_tim.c ****   /* Set the default configuration */
1952:./Lib/Src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 3923              		.loc 1 1952 33
 3924 0008 7B68     		ldr	r3, [r7, #4]
 3925 000a 0022     		movs	r2, #0
 3926 000c 1A80     		strh	r2, [r3]	@ movhi
1953:./Lib/Src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 3927              		.loc 1 1953 36
 3928 000e 7B68     		ldr	r3, [r7, #4]
 3929 0010 0022     		movs	r2, #0
 3930 0012 5A80     		strh	r2, [r3, #2]	@ movhi
1954:./Lib/Src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 3931              		.loc 1 1954 37
 3932 0014 7B68     		ldr	r3, [r7, #4]
 3933 0016 0122     		movs	r2, #1
 3934 0018 9A80     		strh	r2, [r3, #4]	@ movhi
1955:./Lib/Src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 3935              		.loc 1 1955 37
 3936 001a 7B68     		ldr	r3, [r7, #4]
 3937 001c 0022     		movs	r2, #0
 3938 001e DA80     		strh	r2, [r3, #6]	@ movhi
1956:./Lib/Src/stm32f4xx_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 3939              		.loc 1 1956 34
 3940 0020 7B68     		ldr	r3, [r7, #4]
 3941 0022 0022     		movs	r2, #0
 3942 0024 1A81     		strh	r2, [r3, #8]	@ movhi
1957:./Lib/Src/stm32f4xx_tim.c **** }
 3943              		.loc 1 1957 1
 3944 0026 00BF     		nop
 3945 0028 0C37     		adds	r7, r7, #12
 3946              		.cfi_def_cfa_offset 4
 3947 002a BD46     		mov	sp, r7
 3948              		.cfi_def_cfa_register 13
 3949              		@ sp needed
 3950 002c 5DF8047B 		ldr	r7, [sp], #4
 3951              		.cfi_restore 7
 3952              		.cfi_def_cfa_offset 0
 3953 0030 7047     		bx	lr
 3954              		.cfi_endproc
 3955              	.LFE174:
 3957              		.section	.text.TIM_PWMIConfig,"ax",%progbits
 3958              		.align	1
 3959              		.global	TIM_PWMIConfig
 3960              		.syntax unified
 3961              		.thumb
ARM GAS  /tmp/ccOaESyR.s 			page 104


 3962              		.thumb_func
 3964              	TIM_PWMIConfig:
 3965              	.LFB175:
1958:./Lib/Src/stm32f4xx_tim.c **** 
1959:./Lib/Src/stm32f4xx_tim.c **** /**
1960:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIM peripheral according to the specified parameters
1961:./Lib/Src/stm32f4xx_tim.c ****   *         in the TIM_ICInitStruct to measure an external PWM signal.
1962:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5,8, 9 or 12 to select the TIM 
1963:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
1964:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
1965:./Lib/Src/stm32f4xx_tim.c ****   *         the configuration information for the specified TIM peripheral.
1966:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
1967:./Lib/Src/stm32f4xx_tim.c ****   */
1968:./Lib/Src/stm32f4xx_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
1969:./Lib/Src/stm32f4xx_tim.c **** {
 3966              		.loc 1 1969 1
 3967              		.cfi_startproc
 3968              		@ args = 0, pretend = 0, frame = 16
 3969              		@ frame_needed = 1, uses_anonymous_args = 0
 3970 0000 80B5     		push	{r7, lr}
 3971              		.cfi_def_cfa_offset 8
 3972              		.cfi_offset 7, -8
 3973              		.cfi_offset 14, -4
 3974 0002 84B0     		sub	sp, sp, #16
 3975              		.cfi_def_cfa_offset 24
 3976 0004 00AF     		add	r7, sp, #0
 3977              		.cfi_def_cfa_register 7
 3978 0006 7860     		str	r0, [r7, #4]
 3979 0008 3960     		str	r1, [r7]
1970:./Lib/Src/stm32f4xx_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 3980              		.loc 1 1970 12
 3981 000a 0023     		movs	r3, #0
 3982 000c FB81     		strh	r3, [r7, #14]	@ movhi
1971:./Lib/Src/stm32f4xx_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 3983              		.loc 1 1971 12
 3984 000e 0123     		movs	r3, #1
 3985 0010 BB81     		strh	r3, [r7, #12]	@ movhi
1972:./Lib/Src/stm32f4xx_tim.c **** 
1973:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
1974:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1975:./Lib/Src/stm32f4xx_tim.c **** 
1976:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Opposite Input Polarity */
1977:./Lib/Src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 3986              		.loc 1 1977 23
 3987 0012 3B68     		ldr	r3, [r7]
 3988 0014 5B88     		ldrh	r3, [r3, #2]
 3989              		.loc 1 1977 6
 3990 0016 002B     		cmp	r3, #0
 3991 0018 02D1     		bne	.L116
1978:./Lib/Src/stm32f4xx_tim.c ****   {
1979:./Lib/Src/stm32f4xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
 3992              		.loc 1 1979 24
 3993 001a 0223     		movs	r3, #2
 3994 001c FB81     		strh	r3, [r7, #14]	@ movhi
 3995 001e 01E0     		b	.L117
 3996              	.L116:
1980:./Lib/Src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccOaESyR.s 			page 105


1981:./Lib/Src/stm32f4xx_tim.c ****   else
1982:./Lib/Src/stm32f4xx_tim.c ****   {
1983:./Lib/Src/stm32f4xx_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
 3997              		.loc 1 1983 24
 3998 0020 0023     		movs	r3, #0
 3999 0022 FB81     		strh	r3, [r7, #14]	@ movhi
 4000              	.L117:
1984:./Lib/Src/stm32f4xx_tim.c ****   }
1985:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Opposite Input */
1986:./Lib/Src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 4001              		.loc 1 1986 23
 4002 0024 3B68     		ldr	r3, [r7]
 4003 0026 9B88     		ldrh	r3, [r3, #4]
 4004              		.loc 1 1986 6
 4005 0028 012B     		cmp	r3, #1
 4006 002a 02D1     		bne	.L118
1987:./Lib/Src/stm32f4xx_tim.c ****   {
1988:./Lib/Src/stm32f4xx_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
 4007              		.loc 1 1988 25
 4008 002c 0223     		movs	r3, #2
 4009 002e BB81     		strh	r3, [r7, #12]	@ movhi
 4010 0030 01E0     		b	.L119
 4011              	.L118:
1989:./Lib/Src/stm32f4xx_tim.c ****   }
1990:./Lib/Src/stm32f4xx_tim.c ****   else
1991:./Lib/Src/stm32f4xx_tim.c ****   {
1992:./Lib/Src/stm32f4xx_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
 4012              		.loc 1 1992 25
 4013 0032 0123     		movs	r3, #1
 4014 0034 BB81     		strh	r3, [r7, #12]	@ movhi
 4015              	.L119:
1993:./Lib/Src/stm32f4xx_tim.c ****   }
1994:./Lib/Src/stm32f4xx_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 4016              		.loc 1 1994 23
 4017 0036 3B68     		ldr	r3, [r7]
 4018 0038 1B88     		ldrh	r3, [r3]
 4019              		.loc 1 1994 6
 4020 003a 002B     		cmp	r3, #0
 4021 003c 1CD1     		bne	.L120
1995:./Lib/Src/stm32f4xx_tim.c ****   {
1996:./Lib/Src/stm32f4xx_tim.c ****     /* TI1 Configuration */
1997:./Lib/Src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 4022              		.loc 1 1997 5
 4023 003e 3B68     		ldr	r3, [r7]
 4024 0040 5988     		ldrh	r1, [r3, #2]
 4025 0042 3B68     		ldr	r3, [r7]
 4026 0044 9A88     		ldrh	r2, [r3, #4]
 4027 0046 3B68     		ldr	r3, [r7]
 4028 0048 1B89     		ldrh	r3, [r3, #8]
 4029 004a 7868     		ldr	r0, [r7, #4]
 4030 004c FFF7FEFF 		bl	TI1_Config
1998:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
1999:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2000:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 4031              		.loc 1 2000 5
 4032 0050 3B68     		ldr	r3, [r7]
 4033 0052 DB88     		ldrh	r3, [r3, #6]
ARM GAS  /tmp/ccOaESyR.s 			page 106


 4034 0054 1946     		mov	r1, r3
 4035 0056 7868     		ldr	r0, [r7, #4]
 4036 0058 FFF7FEFF 		bl	TIM_SetIC1Prescaler
2001:./Lib/Src/stm32f4xx_tim.c ****     /* TI2 Configuration */
2002:./Lib/Src/stm32f4xx_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 4037              		.loc 1 2002 5
 4038 005c 3B68     		ldr	r3, [r7]
 4039 005e 1B89     		ldrh	r3, [r3, #8]
 4040 0060 BA89     		ldrh	r2, [r7, #12]
 4041 0062 F989     		ldrh	r1, [r7, #14]
 4042 0064 7868     		ldr	r0, [r7, #4]
 4043 0066 FFF7FEFF 		bl	TI2_Config
2003:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2004:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 4044              		.loc 1 2004 5
 4045 006a 3B68     		ldr	r3, [r7]
 4046 006c DB88     		ldrh	r3, [r3, #6]
 4047 006e 1946     		mov	r1, r3
 4048 0070 7868     		ldr	r0, [r7, #4]
 4049 0072 FFF7FEFF 		bl	TIM_SetIC2Prescaler
2005:./Lib/Src/stm32f4xx_tim.c ****   }
2006:./Lib/Src/stm32f4xx_tim.c ****   else
2007:./Lib/Src/stm32f4xx_tim.c ****   { 
2008:./Lib/Src/stm32f4xx_tim.c ****     /* TI2 Configuration */
2009:./Lib/Src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
2010:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
2011:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2012:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2013:./Lib/Src/stm32f4xx_tim.c ****     /* TI1 Configuration */
2014:./Lib/Src/stm32f4xx_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
2015:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
2016:./Lib/Src/stm32f4xx_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
2017:./Lib/Src/stm32f4xx_tim.c ****   }
2018:./Lib/Src/stm32f4xx_tim.c **** }
 4050              		.loc 1 2018 1
 4051 0076 1BE0     		b	.L122
 4052              	.L120:
2009:./Lib/Src/stm32f4xx_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 4053              		.loc 1 2009 5
 4054 0078 3B68     		ldr	r3, [r7]
 4055 007a 5988     		ldrh	r1, [r3, #2]
 4056 007c 3B68     		ldr	r3, [r7]
 4057 007e 9A88     		ldrh	r2, [r3, #4]
 4058 0080 3B68     		ldr	r3, [r7]
 4059 0082 1B89     		ldrh	r3, [r3, #8]
 4060 0084 7868     		ldr	r0, [r7, #4]
 4061 0086 FFF7FEFF 		bl	TI2_Config
2012:./Lib/Src/stm32f4xx_tim.c ****     /* TI1 Configuration */
 4062              		.loc 1 2012 5
 4063 008a 3B68     		ldr	r3, [r7]
 4064 008c DB88     		ldrh	r3, [r3, #6]
 4065 008e 1946     		mov	r1, r3
 4066 0090 7868     		ldr	r0, [r7, #4]
 4067 0092 FFF7FEFF 		bl	TIM_SetIC2Prescaler
2014:./Lib/Src/stm32f4xx_tim.c ****     /* Set the Input Capture Prescaler value */
 4068              		.loc 1 2014 5
 4069 0096 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccOaESyR.s 			page 107


 4070 0098 1B89     		ldrh	r3, [r3, #8]
 4071 009a BA89     		ldrh	r2, [r7, #12]
 4072 009c F989     		ldrh	r1, [r7, #14]
 4073 009e 7868     		ldr	r0, [r7, #4]
 4074 00a0 FFF7FEFF 		bl	TI1_Config
2016:./Lib/Src/stm32f4xx_tim.c ****   }
 4075              		.loc 1 2016 5
 4076 00a4 3B68     		ldr	r3, [r7]
 4077 00a6 DB88     		ldrh	r3, [r3, #6]
 4078 00a8 1946     		mov	r1, r3
 4079 00aa 7868     		ldr	r0, [r7, #4]
 4080 00ac FFF7FEFF 		bl	TIM_SetIC1Prescaler
 4081              	.L122:
 4082              		.loc 1 2018 1
 4083 00b0 00BF     		nop
 4084 00b2 1037     		adds	r7, r7, #16
 4085              		.cfi_def_cfa_offset 8
 4086 00b4 BD46     		mov	sp, r7
 4087              		.cfi_def_cfa_register 13
 4088              		@ sp needed
 4089 00b6 80BD     		pop	{r7, pc}
 4090              		.cfi_endproc
 4091              	.LFE175:
 4093              		.section	.text.TIM_GetCapture1,"ax",%progbits
 4094              		.align	1
 4095              		.global	TIM_GetCapture1
 4096              		.syntax unified
 4097              		.thumb
 4098              		.thumb_func
 4100              	TIM_GetCapture1:
 4101              	.LFB176:
2019:./Lib/Src/stm32f4xx_tim.c **** 
2020:./Lib/Src/stm32f4xx_tim.c **** /**
2021:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2022:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
2023:./Lib/Src/stm32f4xx_tim.c ****   * @retval Capture Compare 1 Register value.
2024:./Lib/Src/stm32f4xx_tim.c ****   */
2025:./Lib/Src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2026:./Lib/Src/stm32f4xx_tim.c **** {
 4102              		.loc 1 2026 1
 4103              		.cfi_startproc
 4104              		@ args = 0, pretend = 0, frame = 8
 4105              		@ frame_needed = 1, uses_anonymous_args = 0
 4106              		@ link register save eliminated.
 4107 0000 80B4     		push	{r7}
 4108              		.cfi_def_cfa_offset 4
 4109              		.cfi_offset 7, -4
 4110 0002 83B0     		sub	sp, sp, #12
 4111              		.cfi_def_cfa_offset 16
 4112 0004 00AF     		add	r7, sp, #0
 4113              		.cfi_def_cfa_register 7
 4114 0006 7860     		str	r0, [r7, #4]
2027:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2028:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2029:./Lib/Src/stm32f4xx_tim.c **** 
2030:./Lib/Src/stm32f4xx_tim.c ****   /* Get the Capture 1 Register value */
2031:./Lib/Src/stm32f4xx_tim.c ****   return TIMx->CCR1;
ARM GAS  /tmp/ccOaESyR.s 			page 108


 4115              		.loc 1 2031 14
 4116 0008 7B68     		ldr	r3, [r7, #4]
 4117 000a 5B6B     		ldr	r3, [r3, #52]
2032:./Lib/Src/stm32f4xx_tim.c **** }
 4118              		.loc 1 2032 1
 4119 000c 1846     		mov	r0, r3
 4120 000e 0C37     		adds	r7, r7, #12
 4121              		.cfi_def_cfa_offset 4
 4122 0010 BD46     		mov	sp, r7
 4123              		.cfi_def_cfa_register 13
 4124              		@ sp needed
 4125 0012 5DF8047B 		ldr	r7, [sp], #4
 4126              		.cfi_restore 7
 4127              		.cfi_def_cfa_offset 0
 4128 0016 7047     		bx	lr
 4129              		.cfi_endproc
 4130              	.LFE176:
 4132              		.section	.text.TIM_GetCapture2,"ax",%progbits
 4133              		.align	1
 4134              		.global	TIM_GetCapture2
 4135              		.syntax unified
 4136              		.thumb
 4137              		.thumb_func
 4139              	TIM_GetCapture2:
 4140              	.LFB177:
2033:./Lib/Src/stm32f4xx_tim.c **** 
2034:./Lib/Src/stm32f4xx_tim.c **** /**
2035:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2036:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2037:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
2038:./Lib/Src/stm32f4xx_tim.c ****   * @retval Capture Compare 2 Register value.
2039:./Lib/Src/stm32f4xx_tim.c ****   */
2040:./Lib/Src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2041:./Lib/Src/stm32f4xx_tim.c **** {
 4141              		.loc 1 2041 1
 4142              		.cfi_startproc
 4143              		@ args = 0, pretend = 0, frame = 8
 4144              		@ frame_needed = 1, uses_anonymous_args = 0
 4145              		@ link register save eliminated.
 4146 0000 80B4     		push	{r7}
 4147              		.cfi_def_cfa_offset 4
 4148              		.cfi_offset 7, -4
 4149 0002 83B0     		sub	sp, sp, #12
 4150              		.cfi_def_cfa_offset 16
 4151 0004 00AF     		add	r7, sp, #0
 4152              		.cfi_def_cfa_register 7
 4153 0006 7860     		str	r0, [r7, #4]
2042:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2043:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2044:./Lib/Src/stm32f4xx_tim.c **** 
2045:./Lib/Src/stm32f4xx_tim.c ****   /* Get the Capture 2 Register value */
2046:./Lib/Src/stm32f4xx_tim.c ****   return TIMx->CCR2;
 4154              		.loc 1 2046 14
 4155 0008 7B68     		ldr	r3, [r7, #4]
 4156 000a 9B6B     		ldr	r3, [r3, #56]
2047:./Lib/Src/stm32f4xx_tim.c **** }
 4157              		.loc 1 2047 1
ARM GAS  /tmp/ccOaESyR.s 			page 109


 4158 000c 1846     		mov	r0, r3
 4159 000e 0C37     		adds	r7, r7, #12
 4160              		.cfi_def_cfa_offset 4
 4161 0010 BD46     		mov	sp, r7
 4162              		.cfi_def_cfa_register 13
 4163              		@ sp needed
 4164 0012 5DF8047B 		ldr	r7, [sp], #4
 4165              		.cfi_restore 7
 4166              		.cfi_def_cfa_offset 0
 4167 0016 7047     		bx	lr
 4168              		.cfi_endproc
 4169              	.LFE177:
 4171              		.section	.text.TIM_GetCapture3,"ax",%progbits
 4172              		.align	1
 4173              		.global	TIM_GetCapture3
 4174              		.syntax unified
 4175              		.thumb
 4176              		.thumb_func
 4178              	TIM_GetCapture3:
 4179              	.LFB178:
2048:./Lib/Src/stm32f4xx_tim.c **** 
2049:./Lib/Src/stm32f4xx_tim.c **** /**
2050:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2051:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2052:./Lib/Src/stm32f4xx_tim.c ****   * @retval Capture Compare 3 Register value.
2053:./Lib/Src/stm32f4xx_tim.c ****   */
2054:./Lib/Src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2055:./Lib/Src/stm32f4xx_tim.c **** {
 4180              		.loc 1 2055 1
 4181              		.cfi_startproc
 4182              		@ args = 0, pretend = 0, frame = 8
 4183              		@ frame_needed = 1, uses_anonymous_args = 0
 4184              		@ link register save eliminated.
 4185 0000 80B4     		push	{r7}
 4186              		.cfi_def_cfa_offset 4
 4187              		.cfi_offset 7, -4
 4188 0002 83B0     		sub	sp, sp, #12
 4189              		.cfi_def_cfa_offset 16
 4190 0004 00AF     		add	r7, sp, #0
 4191              		.cfi_def_cfa_register 7
 4192 0006 7860     		str	r0, [r7, #4]
2056:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2057:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2058:./Lib/Src/stm32f4xx_tim.c **** 
2059:./Lib/Src/stm32f4xx_tim.c ****   /* Get the Capture 3 Register value */
2060:./Lib/Src/stm32f4xx_tim.c ****   return TIMx->CCR3;
 4193              		.loc 1 2060 14
 4194 0008 7B68     		ldr	r3, [r7, #4]
 4195 000a DB6B     		ldr	r3, [r3, #60]
2061:./Lib/Src/stm32f4xx_tim.c **** }
 4196              		.loc 1 2061 1
 4197 000c 1846     		mov	r0, r3
 4198 000e 0C37     		adds	r7, r7, #12
 4199              		.cfi_def_cfa_offset 4
 4200 0010 BD46     		mov	sp, r7
 4201              		.cfi_def_cfa_register 13
 4202              		@ sp needed
ARM GAS  /tmp/ccOaESyR.s 			page 110


 4203 0012 5DF8047B 		ldr	r7, [sp], #4
 4204              		.cfi_restore 7
 4205              		.cfi_def_cfa_offset 0
 4206 0016 7047     		bx	lr
 4207              		.cfi_endproc
 4208              	.LFE178:
 4210              		.section	.text.TIM_GetCapture4,"ax",%progbits
 4211              		.align	1
 4212              		.global	TIM_GetCapture4
 4213              		.syntax unified
 4214              		.thumb
 4215              		.thumb_func
 4217              	TIM_GetCapture4:
 4218              	.LFB179:
2062:./Lib/Src/stm32f4xx_tim.c **** 
2063:./Lib/Src/stm32f4xx_tim.c **** /**
2064:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2065:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2066:./Lib/Src/stm32f4xx_tim.c ****   * @retval Capture Compare 4 Register value.
2067:./Lib/Src/stm32f4xx_tim.c ****   */
2068:./Lib/Src/stm32f4xx_tim.c **** uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2069:./Lib/Src/stm32f4xx_tim.c **** {
 4219              		.loc 1 2069 1
 4220              		.cfi_startproc
 4221              		@ args = 0, pretend = 0, frame = 8
 4222              		@ frame_needed = 1, uses_anonymous_args = 0
 4223              		@ link register save eliminated.
 4224 0000 80B4     		push	{r7}
 4225              		.cfi_def_cfa_offset 4
 4226              		.cfi_offset 7, -4
 4227 0002 83B0     		sub	sp, sp, #12
 4228              		.cfi_def_cfa_offset 16
 4229 0004 00AF     		add	r7, sp, #0
 4230              		.cfi_def_cfa_register 7
 4231 0006 7860     		str	r0, [r7, #4]
2070:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2071:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2072:./Lib/Src/stm32f4xx_tim.c **** 
2073:./Lib/Src/stm32f4xx_tim.c ****   /* Get the Capture 4 Register value */
2074:./Lib/Src/stm32f4xx_tim.c ****   return TIMx->CCR4;
 4232              		.loc 1 2074 14
 4233 0008 7B68     		ldr	r3, [r7, #4]
 4234 000a 1B6C     		ldr	r3, [r3, #64]
2075:./Lib/Src/stm32f4xx_tim.c **** }
 4235              		.loc 1 2075 1
 4236 000c 1846     		mov	r0, r3
 4237 000e 0C37     		adds	r7, r7, #12
 4238              		.cfi_def_cfa_offset 4
 4239 0010 BD46     		mov	sp, r7
 4240              		.cfi_def_cfa_register 13
 4241              		@ sp needed
 4242 0012 5DF8047B 		ldr	r7, [sp], #4
 4243              		.cfi_restore 7
 4244              		.cfi_def_cfa_offset 0
 4245 0016 7047     		bx	lr
 4246              		.cfi_endproc
 4247              	.LFE179:
ARM GAS  /tmp/ccOaESyR.s 			page 111


 4249              		.section	.text.TIM_SetIC1Prescaler,"ax",%progbits
 4250              		.align	1
 4251              		.global	TIM_SetIC1Prescaler
 4252              		.syntax unified
 4253              		.thumb
 4254              		.thumb_func
 4256              	TIM_SetIC1Prescaler:
 4257              	.LFB180:
2076:./Lib/Src/stm32f4xx_tim.c **** 
2077:./Lib/Src/stm32f4xx_tim.c **** /**
2078:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2079:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
2080:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2081:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2082:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2083:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2084:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2085:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2086:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2087:./Lib/Src/stm32f4xx_tim.c ****   */
2088:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2089:./Lib/Src/stm32f4xx_tim.c **** {
 4258              		.loc 1 2089 1
 4259              		.cfi_startproc
 4260              		@ args = 0, pretend = 0, frame = 8
 4261              		@ frame_needed = 1, uses_anonymous_args = 0
 4262              		@ link register save eliminated.
 4263 0000 80B4     		push	{r7}
 4264              		.cfi_def_cfa_offset 4
 4265              		.cfi_offset 7, -4
 4266 0002 83B0     		sub	sp, sp, #12
 4267              		.cfi_def_cfa_offset 16
 4268 0004 00AF     		add	r7, sp, #0
 4269              		.cfi_def_cfa_register 7
 4270 0006 7860     		str	r0, [r7, #4]
 4271 0008 0B46     		mov	r3, r1
 4272 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2090:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2091:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2092:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2093:./Lib/Src/stm32f4xx_tim.c **** 
2094:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the IC1PSC Bits */
2095:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 4273              		.loc 1 2095 7
 4274 000c 7B68     		ldr	r3, [r7, #4]
 4275 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 4276 0010 9BB2     		uxth	r3, r3
 4277              		.loc 1 2095 15
 4278 0012 23F00C03 		bic	r3, r3, #12
 4279 0016 9AB2     		uxth	r2, r3
 4280 0018 7B68     		ldr	r3, [r7, #4]
 4281 001a 1A83     		strh	r2, [r3, #24]	@ movhi
2096:./Lib/Src/stm32f4xx_tim.c **** 
2097:./Lib/Src/stm32f4xx_tim.c ****   /* Set the IC1PSC value */
2098:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
 4282              		.loc 1 2098 7
 4283 001c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccOaESyR.s 			page 112


 4284 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 4285 0020 9AB2     		uxth	r2, r3
 4286              		.loc 1 2098 15
 4287 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4288 0024 1343     		orrs	r3, r3, r2
 4289 0026 9AB2     		uxth	r2, r3
 4290 0028 7B68     		ldr	r3, [r7, #4]
 4291 002a 1A83     		strh	r2, [r3, #24]	@ movhi
2099:./Lib/Src/stm32f4xx_tim.c **** }
 4292              		.loc 1 2099 1
 4293 002c 00BF     		nop
 4294 002e 0C37     		adds	r7, r7, #12
 4295              		.cfi_def_cfa_offset 4
 4296 0030 BD46     		mov	sp, r7
 4297              		.cfi_def_cfa_register 13
 4298              		@ sp needed
 4299 0032 5DF8047B 		ldr	r7, [sp], #4
 4300              		.cfi_restore 7
 4301              		.cfi_def_cfa_offset 0
 4302 0036 7047     		bx	lr
 4303              		.cfi_endproc
 4304              	.LFE180:
 4306              		.section	.text.TIM_SetIC2Prescaler,"ax",%progbits
 4307              		.align	1
 4308              		.global	TIM_SetIC2Prescaler
 4309              		.syntax unified
 4310              		.thumb
 4311              		.thumb_func
 4313              	TIM_SetIC2Prescaler:
 4314              	.LFB181:
2100:./Lib/Src/stm32f4xx_tim.c **** 
2101:./Lib/Src/stm32f4xx_tim.c **** /**
2102:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2103:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2104:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
2105:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2106:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2107:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2108:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2109:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2110:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2111:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2112:./Lib/Src/stm32f4xx_tim.c ****   */
2113:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2114:./Lib/Src/stm32f4xx_tim.c **** {
 4315              		.loc 1 2114 1
 4316              		.cfi_startproc
 4317              		@ args = 0, pretend = 0, frame = 8
 4318              		@ frame_needed = 1, uses_anonymous_args = 0
 4319              		@ link register save eliminated.
 4320 0000 80B4     		push	{r7}
 4321              		.cfi_def_cfa_offset 4
 4322              		.cfi_offset 7, -4
 4323 0002 83B0     		sub	sp, sp, #12
 4324              		.cfi_def_cfa_offset 16
 4325 0004 00AF     		add	r7, sp, #0
 4326              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccOaESyR.s 			page 113


 4327 0006 7860     		str	r0, [r7, #4]
 4328 0008 0B46     		mov	r3, r1
 4329 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2115:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2116:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2117:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2118:./Lib/Src/stm32f4xx_tim.c **** 
2119:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the IC2PSC Bits */
2120:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 4330              		.loc 1 2120 7
 4331 000c 7B68     		ldr	r3, [r7, #4]
 4332 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 4333 0010 9BB2     		uxth	r3, r3
 4334              		.loc 1 2120 15
 4335 0012 23F44063 		bic	r3, r3, #3072
 4336 0016 9AB2     		uxth	r2, r3
 4337 0018 7B68     		ldr	r3, [r7, #4]
 4338 001a 1A83     		strh	r2, [r3, #24]	@ movhi
2121:./Lib/Src/stm32f4xx_tim.c **** 
2122:./Lib/Src/stm32f4xx_tim.c ****   /* Set the IC2PSC value */
2123:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 4339              		.loc 1 2123 7
 4340 001c 7B68     		ldr	r3, [r7, #4]
 4341 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 4342 0020 9AB2     		uxth	r2, r3
 4343              		.loc 1 2123 18
 4344 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4345 0024 1B02     		lsls	r3, r3, #8
 4346 0026 9BB2     		uxth	r3, r3
 4347              		.loc 1 2123 15
 4348 0028 1343     		orrs	r3, r3, r2
 4349 002a 9AB2     		uxth	r2, r3
 4350 002c 7B68     		ldr	r3, [r7, #4]
 4351 002e 1A83     		strh	r2, [r3, #24]	@ movhi
2124:./Lib/Src/stm32f4xx_tim.c **** }
 4352              		.loc 1 2124 1
 4353 0030 00BF     		nop
 4354 0032 0C37     		adds	r7, r7, #12
 4355              		.cfi_def_cfa_offset 4
 4356 0034 BD46     		mov	sp, r7
 4357              		.cfi_def_cfa_register 13
 4358              		@ sp needed
 4359 0036 5DF8047B 		ldr	r7, [sp], #4
 4360              		.cfi_restore 7
 4361              		.cfi_def_cfa_offset 0
 4362 003a 7047     		bx	lr
 4363              		.cfi_endproc
 4364              	.LFE181:
 4366              		.section	.text.TIM_SetIC3Prescaler,"ax",%progbits
 4367              		.align	1
 4368              		.global	TIM_SetIC3Prescaler
 4369              		.syntax unified
 4370              		.thumb
 4371              		.thumb_func
 4373              	TIM_SetIC3Prescaler:
 4374              	.LFB182:
2125:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 114


2126:./Lib/Src/stm32f4xx_tim.c **** /**
2127:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2128:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2129:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2130:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2131:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2132:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2133:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2134:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2135:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2136:./Lib/Src/stm32f4xx_tim.c ****   */
2137:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2138:./Lib/Src/stm32f4xx_tim.c **** {
 4375              		.loc 1 2138 1
 4376              		.cfi_startproc
 4377              		@ args = 0, pretend = 0, frame = 8
 4378              		@ frame_needed = 1, uses_anonymous_args = 0
 4379              		@ link register save eliminated.
 4380 0000 80B4     		push	{r7}
 4381              		.cfi_def_cfa_offset 4
 4382              		.cfi_offset 7, -4
 4383 0002 83B0     		sub	sp, sp, #12
 4384              		.cfi_def_cfa_offset 16
 4385 0004 00AF     		add	r7, sp, #0
 4386              		.cfi_def_cfa_register 7
 4387 0006 7860     		str	r0, [r7, #4]
 4388 0008 0B46     		mov	r3, r1
 4389 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2139:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2140:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2141:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2142:./Lib/Src/stm32f4xx_tim.c **** 
2143:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the IC3PSC Bits */
2144:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 4390              		.loc 1 2144 7
 4391 000c 7B68     		ldr	r3, [r7, #4]
 4392 000e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 4393 0010 9BB2     		uxth	r3, r3
 4394              		.loc 1 2144 15
 4395 0012 23F00C03 		bic	r3, r3, #12
 4396 0016 9AB2     		uxth	r2, r3
 4397 0018 7B68     		ldr	r3, [r7, #4]
 4398 001a 9A83     		strh	r2, [r3, #28]	@ movhi
2145:./Lib/Src/stm32f4xx_tim.c **** 
2146:./Lib/Src/stm32f4xx_tim.c ****   /* Set the IC3PSC value */
2147:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
 4399              		.loc 1 2147 7
 4400 001c 7B68     		ldr	r3, [r7, #4]
 4401 001e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 4402 0020 9AB2     		uxth	r2, r3
 4403              		.loc 1 2147 15
 4404 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4405 0024 1343     		orrs	r3, r3, r2
 4406 0026 9AB2     		uxth	r2, r3
 4407 0028 7B68     		ldr	r3, [r7, #4]
 4408 002a 9A83     		strh	r2, [r3, #28]	@ movhi
2148:./Lib/Src/stm32f4xx_tim.c **** }
ARM GAS  /tmp/ccOaESyR.s 			page 115


 4409              		.loc 1 2148 1
 4410 002c 00BF     		nop
 4411 002e 0C37     		adds	r7, r7, #12
 4412              		.cfi_def_cfa_offset 4
 4413 0030 BD46     		mov	sp, r7
 4414              		.cfi_def_cfa_register 13
 4415              		@ sp needed
 4416 0032 5DF8047B 		ldr	r7, [sp], #4
 4417              		.cfi_restore 7
 4418              		.cfi_def_cfa_offset 0
 4419 0036 7047     		bx	lr
 4420              		.cfi_endproc
 4421              	.LFE182:
 4423              		.section	.text.TIM_SetIC4Prescaler,"ax",%progbits
 4424              		.align	1
 4425              		.global	TIM_SetIC4Prescaler
 4426              		.syntax unified
 4427              		.thumb
 4428              		.thumb_func
 4430              	TIM_SetIC4Prescaler:
 4431              	.LFB183:
2149:./Lib/Src/stm32f4xx_tim.c **** 
2150:./Lib/Src/stm32f4xx_tim.c **** /**
2151:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2152:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2153:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2154:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2155:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV1: no prescaler
2156:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2157:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2158:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2159:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2160:./Lib/Src/stm32f4xx_tim.c ****   */
2161:./Lib/Src/stm32f4xx_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2162:./Lib/Src/stm32f4xx_tim.c **** {  
 4432              		.loc 1 2162 1
 4433              		.cfi_startproc
 4434              		@ args = 0, pretend = 0, frame = 8
 4435              		@ frame_needed = 1, uses_anonymous_args = 0
 4436              		@ link register save eliminated.
 4437 0000 80B4     		push	{r7}
 4438              		.cfi_def_cfa_offset 4
 4439              		.cfi_offset 7, -4
 4440 0002 83B0     		sub	sp, sp, #12
 4441              		.cfi_def_cfa_offset 16
 4442 0004 00AF     		add	r7, sp, #0
 4443              		.cfi_def_cfa_register 7
 4444 0006 7860     		str	r0, [r7, #4]
 4445 0008 0B46     		mov	r3, r1
 4446 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2163:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2164:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2165:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2166:./Lib/Src/stm32f4xx_tim.c **** 
2167:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the IC4PSC Bits */
2168:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 4447              		.loc 1 2168 7
ARM GAS  /tmp/ccOaESyR.s 			page 116


 4448 000c 7B68     		ldr	r3, [r7, #4]
 4449 000e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 4450 0010 9BB2     		uxth	r3, r3
 4451              		.loc 1 2168 15
 4452 0012 23F44063 		bic	r3, r3, #3072
 4453 0016 9AB2     		uxth	r2, r3
 4454 0018 7B68     		ldr	r3, [r7, #4]
 4455 001a 9A83     		strh	r2, [r3, #28]	@ movhi
2169:./Lib/Src/stm32f4xx_tim.c **** 
2170:./Lib/Src/stm32f4xx_tim.c ****   /* Set the IC4PSC value */
2171:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 4456              		.loc 1 2171 7
 4457 001c 7B68     		ldr	r3, [r7, #4]
 4458 001e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 4459 0020 9AB2     		uxth	r2, r3
 4460              		.loc 1 2171 18
 4461 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4462 0024 1B02     		lsls	r3, r3, #8
 4463 0026 9BB2     		uxth	r3, r3
 4464              		.loc 1 2171 15
 4465 0028 1343     		orrs	r3, r3, r2
 4466 002a 9AB2     		uxth	r2, r3
 4467 002c 7B68     		ldr	r3, [r7, #4]
 4468 002e 9A83     		strh	r2, [r3, #28]	@ movhi
2172:./Lib/Src/stm32f4xx_tim.c **** }
 4469              		.loc 1 2172 1
 4470 0030 00BF     		nop
 4471 0032 0C37     		adds	r7, r7, #12
 4472              		.cfi_def_cfa_offset 4
 4473 0034 BD46     		mov	sp, r7
 4474              		.cfi_def_cfa_register 13
 4475              		@ sp needed
 4476 0036 5DF8047B 		ldr	r7, [sp], #4
 4477              		.cfi_restore 7
 4478              		.cfi_def_cfa_offset 0
 4479 003a 7047     		bx	lr
 4480              		.cfi_endproc
 4481              	.LFE183:
 4483              		.section	.text.TIM_BDTRConfig,"ax",%progbits
 4484              		.align	1
 4485              		.global	TIM_BDTRConfig
 4486              		.syntax unified
 4487              		.thumb
 4488              		.thumb_func
 4490              	TIM_BDTRConfig:
 4491              	.LFB184:
2173:./Lib/Src/stm32f4xx_tim.c **** /**
2174:./Lib/Src/stm32f4xx_tim.c ****   * @}
2175:./Lib/Src/stm32f4xx_tim.c ****   */
2176:./Lib/Src/stm32f4xx_tim.c **** 
2177:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group4 Advanced-control timers (TIM1 and TIM8) specific features
2178:./Lib/Src/stm32f4xx_tim.c ****  *  @brief   Advanced-control timers (TIM1 and TIM8) specific features
2179:./Lib/Src/stm32f4xx_tim.c ****  *
2180:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
2181:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
2182:./Lib/Src/stm32f4xx_tim.c ****       ##### Advanced-control timers (TIM1 and TIM8) specific features #####
2183:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
ARM GAS  /tmp/ccOaESyR.s 			page 117


2184:./Lib/Src/stm32f4xx_tim.c ****         
2185:./Lib/Src/stm32f4xx_tim.c ****              ##### TIM Driver: how to use the Break feature #####
2186:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
2187:./Lib/Src/stm32f4xx_tim.c ****     [..] 
2188:./Lib/Src/stm32f4xx_tim.c ****     After configuring the Timer channel(s) in the appropriate Output Compare mode: 
2189:./Lib/Src/stm32f4xx_tim.c ****                          
2190:./Lib/Src/stm32f4xx_tim.c ****       (#) Fill the TIM_BDTRInitStruct with the desired parameters for the Timer
2191:./Lib/Src/stm32f4xx_tim.c ****           Break Polarity, dead time, Lock level, the OSSI/OSSR State and the 
2192:./Lib/Src/stm32f4xx_tim.c ****           AOE(automatic output enable).
2193:./Lib/Src/stm32f4xx_tim.c ****                
2194:./Lib/Src/stm32f4xx_tim.c ****       (#) Call TIM_BDTRConfig(TIMx, &TIM_BDTRInitStruct) to configure the Timer
2195:./Lib/Src/stm32f4xx_tim.c ****           
2196:./Lib/Src/stm32f4xx_tim.c ****       (#) Enable the Main Output using TIM_CtrlPWMOutputs(TIM1, ENABLE) 
2197:./Lib/Src/stm32f4xx_tim.c ****           
2198:./Lib/Src/stm32f4xx_tim.c ****       (#) Once the break even occurs, the Timer's output signals are put in reset
2199:./Lib/Src/stm32f4xx_tim.c ****           state or in a known state (according to the configuration made in
2200:./Lib/Src/stm32f4xx_tim.c ****           TIM_BDTRConfig() function).
2201:./Lib/Src/stm32f4xx_tim.c **** 
2202:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
2203:./Lib/Src/stm32f4xx_tim.c ****   * @{
2204:./Lib/Src/stm32f4xx_tim.c ****   */
2205:./Lib/Src/stm32f4xx_tim.c **** 
2206:./Lib/Src/stm32f4xx_tim.c **** /**
2207:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the Break feature, dead time, Lock level, OSSI/OSSR State
2208:./Lib/Src/stm32f4xx_tim.c ****   *         and the AOE(automatic output enable).
2209:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIM 
2210:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
2211:./Lib/Src/stm32f4xx_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
2212:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2213:./Lib/Src/stm32f4xx_tim.c ****   */
2214:./Lib/Src/stm32f4xx_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
2215:./Lib/Src/stm32f4xx_tim.c **** {
 4492              		.loc 1 2215 1
 4493              		.cfi_startproc
 4494              		@ args = 0, pretend = 0, frame = 8
 4495              		@ frame_needed = 1, uses_anonymous_args = 0
 4496              		@ link register save eliminated.
 4497 0000 80B4     		push	{r7}
 4498              		.cfi_def_cfa_offset 4
 4499              		.cfi_offset 7, -4
 4500 0002 83B0     		sub	sp, sp, #12
 4501              		.cfi_def_cfa_offset 16
 4502 0004 00AF     		add	r7, sp, #0
 4503              		.cfi_def_cfa_register 7
 4504 0006 7860     		str	r0, [r7, #4]
 4505 0008 3960     		str	r1, [r7]
2216:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2217:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2218:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
2219:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
2220:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
2221:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
2222:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
2223:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
2224:./Lib/Src/stm32f4xx_tim.c **** 
2225:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
2226:./Lib/Src/stm32f4xx_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
ARM GAS  /tmp/ccOaESyR.s 			page 118


2227:./Lib/Src/stm32f4xx_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 4506              		.loc 1 2227 44
 4507 000a 3B68     		ldr	r3, [r7]
 4508 000c 1A88     		ldrh	r2, [r3]
 4509              		.loc 1 2227 80
 4510 000e 3B68     		ldr	r3, [r7]
 4511 0010 5B88     		ldrh	r3, [r3, #2]
 4512              		.loc 1 2227 14
 4513 0012 1343     		orrs	r3, r3, r2
 4514 0014 9AB2     		uxth	r2, r3
2228:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 4515              		.loc 1 2228 32
 4516 0016 3B68     		ldr	r3, [r7]
 4517 0018 9B88     		ldrh	r3, [r3, #4]
2227:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 4518              		.loc 1 2227 14
 4519 001a 1343     		orrs	r3, r3, r2
 4520 001c 9AB2     		uxth	r2, r3
 4521              		.loc 1 2228 68
 4522 001e 3B68     		ldr	r3, [r7]
 4523 0020 DB88     		ldrh	r3, [r3, #6]
2227:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 4524              		.loc 1 2227 14
 4525 0022 1343     		orrs	r3, r3, r2
 4526 0024 9AB2     		uxth	r2, r3
2229:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 4527              		.loc 1 2229 32
 4528 0026 3B68     		ldr	r3, [r7]
 4529 0028 1B89     		ldrh	r3, [r3, #8]
2227:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 4530              		.loc 1 2227 14
 4531 002a 1343     		orrs	r3, r3, r2
 4532 002c 9AB2     		uxth	r2, r3
 4533              		.loc 1 2229 64
 4534 002e 3B68     		ldr	r3, [r7]
 4535 0030 5B89     		ldrh	r3, [r3, #10]
2227:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 4536              		.loc 1 2227 14
 4537 0032 1343     		orrs	r3, r3, r2
 4538 0034 9AB2     		uxth	r2, r3
2230:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
 4539              		.loc 1 2230 32
 4540 0036 3B68     		ldr	r3, [r7]
 4541 0038 9B89     		ldrh	r3, [r3, #12]
2227:./Lib/Src/stm32f4xx_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 4542              		.loc 1 2227 14
 4543 003a 1343     		orrs	r3, r3, r2
 4544 003c 9AB2     		uxth	r2, r3
 4545 003e 7B68     		ldr	r3, [r7, #4]
 4546 0040 A3F84420 		strh	r2, [r3, #68]	@ movhi
2231:./Lib/Src/stm32f4xx_tim.c **** }
 4547              		.loc 1 2231 1
 4548 0044 00BF     		nop
 4549 0046 0C37     		adds	r7, r7, #12
 4550              		.cfi_def_cfa_offset 4
 4551 0048 BD46     		mov	sp, r7
 4552              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccOaESyR.s 			page 119


 4553              		@ sp needed
 4554 004a 5DF8047B 		ldr	r7, [sp], #4
 4555              		.cfi_restore 7
 4556              		.cfi_def_cfa_offset 0
 4557 004e 7047     		bx	lr
 4558              		.cfi_endproc
 4559              	.LFE184:
 4561              		.section	.text.TIM_BDTRStructInit,"ax",%progbits
 4562              		.align	1
 4563              		.global	TIM_BDTRStructInit
 4564              		.syntax unified
 4565              		.thumb
 4566              		.thumb_func
 4568              	TIM_BDTRStructInit:
 4569              	.LFB185:
2232:./Lib/Src/stm32f4xx_tim.c **** 
2233:./Lib/Src/stm32f4xx_tim.c **** /**
2234:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
2235:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
2236:./Lib/Src/stm32f4xx_tim.c ****   *         will be initialized.
2237:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2238:./Lib/Src/stm32f4xx_tim.c ****   */
2239:./Lib/Src/stm32f4xx_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
2240:./Lib/Src/stm32f4xx_tim.c **** {
 4570              		.loc 1 2240 1
 4571              		.cfi_startproc
 4572              		@ args = 0, pretend = 0, frame = 8
 4573              		@ frame_needed = 1, uses_anonymous_args = 0
 4574              		@ link register save eliminated.
 4575 0000 80B4     		push	{r7}
 4576              		.cfi_def_cfa_offset 4
 4577              		.cfi_offset 7, -4
 4578 0002 83B0     		sub	sp, sp, #12
 4579              		.cfi_def_cfa_offset 16
 4580 0004 00AF     		add	r7, sp, #0
 4581              		.cfi_def_cfa_register 7
 4582 0006 7860     		str	r0, [r7, #4]
2241:./Lib/Src/stm32f4xx_tim.c ****   /* Set the default configuration */
2242:./Lib/Src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 4583              		.loc 1 2242 37
 4584 0008 7B68     		ldr	r3, [r7, #4]
 4585 000a 0022     		movs	r2, #0
 4586 000c 1A80     		strh	r2, [r3]	@ movhi
2243:./Lib/Src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 4587              		.loc 1 2243 37
 4588 000e 7B68     		ldr	r3, [r7, #4]
 4589 0010 0022     		movs	r2, #0
 4590 0012 5A80     		strh	r2, [r3, #2]	@ movhi
2244:./Lib/Src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 4591              		.loc 1 2244 37
 4592 0014 7B68     		ldr	r3, [r7, #4]
 4593 0016 0022     		movs	r2, #0
 4594 0018 9A80     		strh	r2, [r3, #4]	@ movhi
2245:./Lib/Src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 4595              		.loc 1 2245 36
 4596 001a 7B68     		ldr	r3, [r7, #4]
 4597 001c 0022     		movs	r2, #0
ARM GAS  /tmp/ccOaESyR.s 			page 120


 4598 001e DA80     		strh	r2, [r3, #6]	@ movhi
2246:./Lib/Src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 4599              		.loc 1 2246 33
 4600 0020 7B68     		ldr	r3, [r7, #4]
 4601 0022 0022     		movs	r2, #0
 4602 0024 1A81     		strh	r2, [r3, #8]	@ movhi
2247:./Lib/Src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 4603              		.loc 1 2247 41
 4604 0026 7B68     		ldr	r3, [r7, #4]
 4605 0028 0022     		movs	r2, #0
 4606 002a 5A81     		strh	r2, [r3, #10]	@ movhi
2248:./Lib/Src/stm32f4xx_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 4607              		.loc 1 2248 43
 4608 002c 7B68     		ldr	r3, [r7, #4]
 4609 002e 0022     		movs	r2, #0
 4610 0030 9A81     		strh	r2, [r3, #12]	@ movhi
2249:./Lib/Src/stm32f4xx_tim.c **** }
 4611              		.loc 1 2249 1
 4612 0032 00BF     		nop
 4613 0034 0C37     		adds	r7, r7, #12
 4614              		.cfi_def_cfa_offset 4
 4615 0036 BD46     		mov	sp, r7
 4616              		.cfi_def_cfa_register 13
 4617              		@ sp needed
 4618 0038 5DF8047B 		ldr	r7, [sp], #4
 4619              		.cfi_restore 7
 4620              		.cfi_def_cfa_offset 0
 4621 003c 7047     		bx	lr
 4622              		.cfi_endproc
 4623              	.LFE185:
 4625              		.section	.text.TIM_CtrlPWMOutputs,"ax",%progbits
 4626              		.align	1
 4627              		.global	TIM_CtrlPWMOutputs
 4628              		.syntax unified
 4629              		.thumb
 4630              		.thumb_func
 4632              	TIM_CtrlPWMOutputs:
 4633              	.LFB186:
2250:./Lib/Src/stm32f4xx_tim.c **** 
2251:./Lib/Src/stm32f4xx_tim.c **** /**
2252:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
2253:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIMx peripheral.
2254:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
2255:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2256:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2257:./Lib/Src/stm32f4xx_tim.c ****   */
2258:./Lib/Src/stm32f4xx_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
2259:./Lib/Src/stm32f4xx_tim.c **** {
 4634              		.loc 1 2259 1
 4635              		.cfi_startproc
 4636              		@ args = 0, pretend = 0, frame = 8
 4637              		@ frame_needed = 1, uses_anonymous_args = 0
 4638              		@ link register save eliminated.
 4639 0000 80B4     		push	{r7}
 4640              		.cfi_def_cfa_offset 4
 4641              		.cfi_offset 7, -4
 4642 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccOaESyR.s 			page 121


 4643              		.cfi_def_cfa_offset 16
 4644 0004 00AF     		add	r7, sp, #0
 4645              		.cfi_def_cfa_register 7
 4646 0006 7860     		str	r0, [r7, #4]
 4647 0008 0B46     		mov	r3, r1
 4648 000a FB70     		strb	r3, [r7, #3]
2260:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2261:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2262:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2263:./Lib/Src/stm32f4xx_tim.c **** 
2264:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 4649              		.loc 1 2264 6
 4650 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4651 000e 002B     		cmp	r3, #0
 4652 0010 0CD0     		beq	.L138
2265:./Lib/Src/stm32f4xx_tim.c ****   {
2266:./Lib/Src/stm32f4xx_tim.c ****     /* Enable the TIM Main Output */
2267:./Lib/Src/stm32f4xx_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 4653              		.loc 1 2267 9
 4654 0012 7B68     		ldr	r3, [r7, #4]
 4655 0014 B3F84430 		ldrh	r3, [r3, #68]	@ movhi
 4656 0018 9BB2     		uxth	r3, r3
 4657              		.loc 1 2267 16
 4658 001a 6FEA4343 		mvn	r3, r3, lsl #17
 4659 001e 6FEA5343 		mvn	r3, r3, lsr #17
 4660 0022 9AB2     		uxth	r2, r3
 4661 0024 7B68     		ldr	r3, [r7, #4]
 4662 0026 A3F84420 		strh	r2, [r3, #68]	@ movhi
2268:./Lib/Src/stm32f4xx_tim.c ****   }
2269:./Lib/Src/stm32f4xx_tim.c ****   else
2270:./Lib/Src/stm32f4xx_tim.c ****   {
2271:./Lib/Src/stm32f4xx_tim.c ****     /* Disable the TIM Main Output */
2272:./Lib/Src/stm32f4xx_tim.c ****     TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
2273:./Lib/Src/stm32f4xx_tim.c ****   }  
2274:./Lib/Src/stm32f4xx_tim.c **** }
 4663              		.loc 1 2274 1
 4664 002a 09E0     		b	.L140
 4665              	.L138:
2272:./Lib/Src/stm32f4xx_tim.c ****   }  
 4666              		.loc 1 2272 9
 4667 002c 7B68     		ldr	r3, [r7, #4]
 4668 002e B3F84430 		ldrh	r3, [r3, #68]	@ movhi
 4669 0032 9BB2     		uxth	r3, r3
2272:./Lib/Src/stm32f4xx_tim.c ****   }  
 4670              		.loc 1 2272 16
 4671 0034 C3F30E03 		ubfx	r3, r3, #0, #15
 4672 0038 9AB2     		uxth	r2, r3
 4673 003a 7B68     		ldr	r3, [r7, #4]
 4674 003c A3F84420 		strh	r2, [r3, #68]	@ movhi
 4675              	.L140:
 4676              		.loc 1 2274 1
 4677 0040 00BF     		nop
 4678 0042 0C37     		adds	r7, r7, #12
 4679              		.cfi_def_cfa_offset 4
 4680 0044 BD46     		mov	sp, r7
 4681              		.cfi_def_cfa_register 13
 4682              		@ sp needed
ARM GAS  /tmp/ccOaESyR.s 			page 122


 4683 0046 5DF8047B 		ldr	r7, [sp], #4
 4684              		.cfi_restore 7
 4685              		.cfi_def_cfa_offset 0
 4686 004a 7047     		bx	lr
 4687              		.cfi_endproc
 4688              	.LFE186:
 4690              		.section	.text.TIM_SelectCOM,"ax",%progbits
 4691              		.align	1
 4692              		.global	TIM_SelectCOM
 4693              		.syntax unified
 4694              		.thumb
 4695              		.thumb_func
 4697              	TIM_SelectCOM:
 4698              	.LFB187:
2275:./Lib/Src/stm32f4xx_tim.c **** 
2276:./Lib/Src/stm32f4xx_tim.c **** /**
2277:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
2278:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
2279:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Commutation event.
2280:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2281:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2282:./Lib/Src/stm32f4xx_tim.c ****   */
2283:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
2284:./Lib/Src/stm32f4xx_tim.c **** {
 4699              		.loc 1 2284 1
 4700              		.cfi_startproc
 4701              		@ args = 0, pretend = 0, frame = 8
 4702              		@ frame_needed = 1, uses_anonymous_args = 0
 4703              		@ link register save eliminated.
 4704 0000 80B4     		push	{r7}
 4705              		.cfi_def_cfa_offset 4
 4706              		.cfi_offset 7, -4
 4707 0002 83B0     		sub	sp, sp, #12
 4708              		.cfi_def_cfa_offset 16
 4709 0004 00AF     		add	r7, sp, #0
 4710              		.cfi_def_cfa_register 7
 4711 0006 7860     		str	r0, [r7, #4]
 4712 0008 0B46     		mov	r3, r1
 4713 000a FB70     		strb	r3, [r7, #3]
2285:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2286:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2287:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2288:./Lib/Src/stm32f4xx_tim.c **** 
2289:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 4714              		.loc 1 2289 6
 4715 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4716 000e 002B     		cmp	r3, #0
 4717 0010 08D0     		beq	.L142
2290:./Lib/Src/stm32f4xx_tim.c ****   {
2291:./Lib/Src/stm32f4xx_tim.c ****     /* Set the COM Bit */
2292:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
 4718              		.loc 1 2292 9
 4719 0012 7B68     		ldr	r3, [r7, #4]
 4720 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4721 0016 9BB2     		uxth	r3, r3
 4722              		.loc 1 2292 15
 4723 0018 43F00403 		orr	r3, r3, #4
ARM GAS  /tmp/ccOaESyR.s 			page 123


 4724 001c 9AB2     		uxth	r2, r3
 4725 001e 7B68     		ldr	r3, [r7, #4]
 4726 0020 9A80     		strh	r2, [r3, #4]	@ movhi
2293:./Lib/Src/stm32f4xx_tim.c ****   }
2294:./Lib/Src/stm32f4xx_tim.c ****   else
2295:./Lib/Src/stm32f4xx_tim.c ****   {
2296:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the COM Bit */
2297:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
2298:./Lib/Src/stm32f4xx_tim.c ****   }
2299:./Lib/Src/stm32f4xx_tim.c **** }
 4727              		.loc 1 2299 1
 4728 0022 07E0     		b	.L144
 4729              	.L142:
2297:./Lib/Src/stm32f4xx_tim.c ****   }
 4730              		.loc 1 2297 9
 4731 0024 7B68     		ldr	r3, [r7, #4]
 4732 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4733 0028 9BB2     		uxth	r3, r3
2297:./Lib/Src/stm32f4xx_tim.c ****   }
 4734              		.loc 1 2297 15
 4735 002a 23F00403 		bic	r3, r3, #4
 4736 002e 9AB2     		uxth	r2, r3
 4737 0030 7B68     		ldr	r3, [r7, #4]
 4738 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 4739              	.L144:
 4740              		.loc 1 2299 1
 4741 0034 00BF     		nop
 4742 0036 0C37     		adds	r7, r7, #12
 4743              		.cfi_def_cfa_offset 4
 4744 0038 BD46     		mov	sp, r7
 4745              		.cfi_def_cfa_register 13
 4746              		@ sp needed
 4747 003a 5DF8047B 		ldr	r7, [sp], #4
 4748              		.cfi_restore 7
 4749              		.cfi_def_cfa_offset 0
 4750 003e 7047     		bx	lr
 4751              		.cfi_endproc
 4752              	.LFE187:
 4754              		.section	.text.TIM_CCPreloadControl,"ax",%progbits
 4755              		.align	1
 4756              		.global	TIM_CCPreloadControl
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
 4761              	TIM_CCPreloadControl:
 4762              	.LFB188:
2300:./Lib/Src/stm32f4xx_tim.c **** 
2301:./Lib/Src/stm32f4xx_tim.c **** /**
2302:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
2303:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIMx peripheral
2304:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
2305:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2306:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2307:./Lib/Src/stm32f4xx_tim.c ****   */
2308:./Lib/Src/stm32f4xx_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
2309:./Lib/Src/stm32f4xx_tim.c **** { 
 4763              		.loc 1 2309 1
ARM GAS  /tmp/ccOaESyR.s 			page 124


 4764              		.cfi_startproc
 4765              		@ args = 0, pretend = 0, frame = 8
 4766              		@ frame_needed = 1, uses_anonymous_args = 0
 4767              		@ link register save eliminated.
 4768 0000 80B4     		push	{r7}
 4769              		.cfi_def_cfa_offset 4
 4770              		.cfi_offset 7, -4
 4771 0002 83B0     		sub	sp, sp, #12
 4772              		.cfi_def_cfa_offset 16
 4773 0004 00AF     		add	r7, sp, #0
 4774              		.cfi_def_cfa_register 7
 4775 0006 7860     		str	r0, [r7, #4]
 4776 0008 0B46     		mov	r3, r1
 4777 000a FB70     		strb	r3, [r7, #3]
2310:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2311:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
2312:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2313:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 4778              		.loc 1 2313 6
 4779 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4780 000e 002B     		cmp	r3, #0
 4781 0010 08D0     		beq	.L146
2314:./Lib/Src/stm32f4xx_tim.c ****   {
2315:./Lib/Src/stm32f4xx_tim.c ****     /* Set the CCPC Bit */
2316:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
 4782              		.loc 1 2316 9
 4783 0012 7B68     		ldr	r3, [r7, #4]
 4784 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4785 0016 9BB2     		uxth	r3, r3
 4786              		.loc 1 2316 15
 4787 0018 43F00103 		orr	r3, r3, #1
 4788 001c 9AB2     		uxth	r2, r3
 4789 001e 7B68     		ldr	r3, [r7, #4]
 4790 0020 9A80     		strh	r2, [r3, #4]	@ movhi
2317:./Lib/Src/stm32f4xx_tim.c ****   }
2318:./Lib/Src/stm32f4xx_tim.c ****   else
2319:./Lib/Src/stm32f4xx_tim.c ****   {
2320:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the CCPC Bit */
2321:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
2322:./Lib/Src/stm32f4xx_tim.c ****   }
2323:./Lib/Src/stm32f4xx_tim.c **** }
 4791              		.loc 1 2323 1
 4792 0022 07E0     		b	.L148
 4793              	.L146:
2321:./Lib/Src/stm32f4xx_tim.c ****   }
 4794              		.loc 1 2321 9
 4795 0024 7B68     		ldr	r3, [r7, #4]
 4796 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4797 0028 9BB2     		uxth	r3, r3
2321:./Lib/Src/stm32f4xx_tim.c ****   }
 4798              		.loc 1 2321 15
 4799 002a 23F00103 		bic	r3, r3, #1
 4800 002e 9AB2     		uxth	r2, r3
 4801 0030 7B68     		ldr	r3, [r7, #4]
 4802 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 4803              	.L148:
 4804              		.loc 1 2323 1
ARM GAS  /tmp/ccOaESyR.s 			page 125


 4805 0034 00BF     		nop
 4806 0036 0C37     		adds	r7, r7, #12
 4807              		.cfi_def_cfa_offset 4
 4808 0038 BD46     		mov	sp, r7
 4809              		.cfi_def_cfa_register 13
 4810              		@ sp needed
 4811 003a 5DF8047B 		ldr	r7, [sp], #4
 4812              		.cfi_restore 7
 4813              		.cfi_def_cfa_offset 0
 4814 003e 7047     		bx	lr
 4815              		.cfi_endproc
 4816              	.LFE188:
 4818              		.section	.text.TIM_ITConfig,"ax",%progbits
 4819              		.align	1
 4820              		.global	TIM_ITConfig
 4821              		.syntax unified
 4822              		.thumb
 4823              		.thumb_func
 4825              	TIM_ITConfig:
 4826              	.LFB189:
2324:./Lib/Src/stm32f4xx_tim.c **** /**
2325:./Lib/Src/stm32f4xx_tim.c ****   * @}
2326:./Lib/Src/stm32f4xx_tim.c ****   */
2327:./Lib/Src/stm32f4xx_tim.c **** 
2328:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group5 Interrupts DMA and flags management functions
2329:./Lib/Src/stm32f4xx_tim.c ****  *  @brief    Interrupts, DMA and flags management functions 
2330:./Lib/Src/stm32f4xx_tim.c ****  *
2331:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
2332:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
2333:./Lib/Src/stm32f4xx_tim.c ****           ##### Interrupts, DMA and flags management functions #####
2334:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
2335:./Lib/Src/stm32f4xx_tim.c **** 
2336:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
2337:./Lib/Src/stm32f4xx_tim.c ****   * @{
2338:./Lib/Src/stm32f4xx_tim.c ****   */
2339:./Lib/Src/stm32f4xx_tim.c **** 
2340:./Lib/Src/stm32f4xx_tim.c **** /**
2341:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
2342:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIMx peripheral.
2343:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
2344:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2345:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2346:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2347:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2348:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2349:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2350:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2351:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2352:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2353:./Lib/Src/stm32f4xx_tim.c ****   *  
2354:./Lib/Src/stm32f4xx_tim.c ****   * @note   For TIM6 and TIM7 only the parameter TIM_IT_Update can be used
2355:./Lib/Src/stm32f4xx_tim.c ****   * @note   For TIM9 and TIM12 only one of the following parameters can be used: TIM_IT_Update,
2356:./Lib/Src/stm32f4xx_tim.c ****   *          TIM_IT_CC1, TIM_IT_CC2 or TIM_IT_Trigger. 
2357:./Lib/Src/stm32f4xx_tim.c ****   * @note   For TIM10, TIM11, TIM13 and TIM14 only one of the following parameters can
2358:./Lib/Src/stm32f4xx_tim.c ****   *          be used: TIM_IT_Update or TIM_IT_CC1   
2359:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break can be used only with TIM1 and TIM8 
2360:./Lib/Src/stm32f4xx_tim.c ****   *        
ARM GAS  /tmp/ccOaESyR.s 			page 126


2361:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIM interrupts.
2362:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2363:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2364:./Lib/Src/stm32f4xx_tim.c ****   */
2365:./Lib/Src/stm32f4xx_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
2366:./Lib/Src/stm32f4xx_tim.c **** {  
 4827              		.loc 1 2366 1
 4828              		.cfi_startproc
 4829              		@ args = 0, pretend = 0, frame = 8
 4830              		@ frame_needed = 1, uses_anonymous_args = 0
 4831              		@ link register save eliminated.
 4832 0000 80B4     		push	{r7}
 4833              		.cfi_def_cfa_offset 4
 4834              		.cfi_offset 7, -4
 4835 0002 83B0     		sub	sp, sp, #12
 4836              		.cfi_def_cfa_offset 16
 4837 0004 00AF     		add	r7, sp, #0
 4838              		.cfi_def_cfa_register 7
 4839 0006 7860     		str	r0, [r7, #4]
 4840 0008 0B46     		mov	r3, r1
 4841 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 4842 000c 1346     		mov	r3, r2
 4843 000e 7B70     		strb	r3, [r7, #1]
2367:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2368:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2369:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2370:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2371:./Lib/Src/stm32f4xx_tim.c ****   
2372:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 4844              		.loc 1 2372 6
 4845 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4846 0012 002B     		cmp	r3, #0
 4847 0014 08D0     		beq	.L150
2373:./Lib/Src/stm32f4xx_tim.c ****   {
2374:./Lib/Src/stm32f4xx_tim.c ****     /* Enable the Interrupt sources */
2375:./Lib/Src/stm32f4xx_tim.c ****     TIMx->DIER |= TIM_IT;
 4848              		.loc 1 2375 9
 4849 0016 7B68     		ldr	r3, [r7, #4]
 4850 0018 9B89     		ldrh	r3, [r3, #12]	@ movhi
 4851 001a 9AB2     		uxth	r2, r3
 4852              		.loc 1 2375 16
 4853 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4854 001e 1343     		orrs	r3, r3, r2
 4855 0020 9AB2     		uxth	r2, r3
 4856 0022 7B68     		ldr	r3, [r7, #4]
 4857 0024 9A81     		strh	r2, [r3, #12]	@ movhi
2376:./Lib/Src/stm32f4xx_tim.c ****   }
2377:./Lib/Src/stm32f4xx_tim.c ****   else
2378:./Lib/Src/stm32f4xx_tim.c ****   {
2379:./Lib/Src/stm32f4xx_tim.c ****     /* Disable the Interrupt sources */
2380:./Lib/Src/stm32f4xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
2381:./Lib/Src/stm32f4xx_tim.c ****   }
2382:./Lib/Src/stm32f4xx_tim.c **** }
 4858              		.loc 1 2382 1
 4859 0026 09E0     		b	.L152
 4860              	.L150:
2380:./Lib/Src/stm32f4xx_tim.c ****   }
ARM GAS  /tmp/ccOaESyR.s 			page 127


 4861              		.loc 1 2380 9
 4862 0028 7B68     		ldr	r3, [r7, #4]
 4863 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 4864 002c 9AB2     		uxth	r2, r3
2380:./Lib/Src/stm32f4xx_tim.c ****   }
 4865              		.loc 1 2380 19
 4866 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4867 0030 DB43     		mvns	r3, r3
 4868 0032 9BB2     		uxth	r3, r3
2380:./Lib/Src/stm32f4xx_tim.c ****   }
 4869              		.loc 1 2380 16
 4870 0034 1340     		ands	r3, r3, r2
 4871 0036 9AB2     		uxth	r2, r3
 4872 0038 7B68     		ldr	r3, [r7, #4]
 4873 003a 9A81     		strh	r2, [r3, #12]	@ movhi
 4874              	.L152:
 4875              		.loc 1 2382 1
 4876 003c 00BF     		nop
 4877 003e 0C37     		adds	r7, r7, #12
 4878              		.cfi_def_cfa_offset 4
 4879 0040 BD46     		mov	sp, r7
 4880              		.cfi_def_cfa_register 13
 4881              		@ sp needed
 4882 0042 5DF8047B 		ldr	r7, [sp], #4
 4883              		.cfi_restore 7
 4884              		.cfi_def_cfa_offset 0
 4885 0046 7047     		bx	lr
 4886              		.cfi_endproc
 4887              	.LFE189:
 4889              		.section	.text.TIM_GenerateEvent,"ax",%progbits
 4890              		.align	1
 4891              		.global	TIM_GenerateEvent
 4892              		.syntax unified
 4893              		.thumb
 4894              		.thumb_func
 4896              	TIM_GenerateEvent:
 4897              	.LFB190:
2383:./Lib/Src/stm32f4xx_tim.c **** 
2384:./Lib/Src/stm32f4xx_tim.c **** /**
2385:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
2386:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2387:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_EventSource: specifies the event source.
2388:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one or more of the following values:	   
2389:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Update: Timer update Event source
2390:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
2391:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
2392:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
2393:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
2394:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_COM: Timer COM event source  
2395:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Trigger: Timer Trigger Event source
2396:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EventSource_Break: Timer Break event source
2397:./Lib/Src/stm32f4xx_tim.c ****   * 
2398:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can only generate an update event. 
2399:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
2400:./Lib/Src/stm32f4xx_tim.c ****   *        
2401:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2402:./Lib/Src/stm32f4xx_tim.c ****   */
ARM GAS  /tmp/ccOaESyR.s 			page 128


2403:./Lib/Src/stm32f4xx_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
2404:./Lib/Src/stm32f4xx_tim.c **** { 
 4898              		.loc 1 2404 1
 4899              		.cfi_startproc
 4900              		@ args = 0, pretend = 0, frame = 8
 4901              		@ frame_needed = 1, uses_anonymous_args = 0
 4902              		@ link register save eliminated.
 4903 0000 80B4     		push	{r7}
 4904              		.cfi_def_cfa_offset 4
 4905              		.cfi_offset 7, -4
 4906 0002 83B0     		sub	sp, sp, #12
 4907              		.cfi_def_cfa_offset 16
 4908 0004 00AF     		add	r7, sp, #0
 4909              		.cfi_def_cfa_register 7
 4910 0006 7860     		str	r0, [r7, #4]
 4911 0008 0B46     		mov	r3, r1
 4912 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2405:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2406:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2407:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
2408:./Lib/Src/stm32f4xx_tim.c ****  
2409:./Lib/Src/stm32f4xx_tim.c ****   /* Set the event sources */
2410:./Lib/Src/stm32f4xx_tim.c ****   TIMx->EGR = TIM_EventSource;
 4913              		.loc 1 2410 13
 4914 000c 7B68     		ldr	r3, [r7, #4]
 4915 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 4916 0010 9A82     		strh	r2, [r3, #20]	@ movhi
2411:./Lib/Src/stm32f4xx_tim.c **** }
 4917              		.loc 1 2411 1
 4918 0012 00BF     		nop
 4919 0014 0C37     		adds	r7, r7, #12
 4920              		.cfi_def_cfa_offset 4
 4921 0016 BD46     		mov	sp, r7
 4922              		.cfi_def_cfa_register 13
 4923              		@ sp needed
 4924 0018 5DF8047B 		ldr	r7, [sp], #4
 4925              		.cfi_restore 7
 4926              		.cfi_def_cfa_offset 0
 4927 001c 7047     		bx	lr
 4928              		.cfi_endproc
 4929              	.LFE190:
 4931              		.section	.text.TIM_GetFlagStatus,"ax",%progbits
 4932              		.align	1
 4933              		.global	TIM_GetFlagStatus
 4934              		.syntax unified
 4935              		.thumb
 4936              		.thumb_func
 4938              	TIM_GetFlagStatus:
 4939              	.LFB191:
2412:./Lib/Src/stm32f4xx_tim.c **** 
2413:./Lib/Src/stm32f4xx_tim.c **** /**
2414:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2415:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2416:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2417:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2418:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2419:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
ARM GAS  /tmp/ccOaESyR.s 			page 129


2420:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2421:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2422:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2423:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2424:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2425:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2426:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
2427:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
2428:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
2429:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
2430:./Lib/Src/stm32f4xx_tim.c ****   *
2431:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2432:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
2433:./Lib/Src/stm32f4xx_tim.c ****   *
2434:./Lib/Src/stm32f4xx_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2435:./Lib/Src/stm32f4xx_tim.c ****   */
2436:./Lib/Src/stm32f4xx_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2437:./Lib/Src/stm32f4xx_tim.c **** { 
 4940              		.loc 1 2437 1
 4941              		.cfi_startproc
 4942              		@ args = 0, pretend = 0, frame = 16
 4943              		@ frame_needed = 1, uses_anonymous_args = 0
 4944              		@ link register save eliminated.
 4945 0000 80B4     		push	{r7}
 4946              		.cfi_def_cfa_offset 4
 4947              		.cfi_offset 7, -4
 4948 0002 85B0     		sub	sp, sp, #20
 4949              		.cfi_def_cfa_offset 24
 4950 0004 00AF     		add	r7, sp, #0
 4951              		.cfi_def_cfa_register 7
 4952 0006 7860     		str	r0, [r7, #4]
 4953 0008 0B46     		mov	r3, r1
 4954 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2438:./Lib/Src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
 4955              		.loc 1 2438 12
 4956 000c 0023     		movs	r3, #0
 4957 000e FB73     		strb	r3, [r7, #15]
2439:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2440:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2441:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2442:./Lib/Src/stm32f4xx_tim.c **** 
2443:./Lib/Src/stm32f4xx_tim.c ****   
2444:./Lib/Src/stm32f4xx_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 4958              		.loc 1 2444 12
 4959 0010 7B68     		ldr	r3, [r7, #4]
 4960 0012 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 4961 0014 9AB2     		uxth	r2, r3
 4962              		.loc 1 2444 29
 4963 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4964 0018 1340     		ands	r3, r3, r2
 4965 001a 9BB2     		uxth	r3, r3
 4966              		.loc 1 2444 6
 4967 001c 002B     		cmp	r3, #0
 4968 001e 02D0     		beq	.L155
2445:./Lib/Src/stm32f4xx_tim.c ****   {
2446:./Lib/Src/stm32f4xx_tim.c ****     bitstatus = SET;
 4969              		.loc 1 2446 15
ARM GAS  /tmp/ccOaESyR.s 			page 130


 4970 0020 0123     		movs	r3, #1
 4971 0022 FB73     		strb	r3, [r7, #15]
 4972 0024 01E0     		b	.L156
 4973              	.L155:
2447:./Lib/Src/stm32f4xx_tim.c ****   }
2448:./Lib/Src/stm32f4xx_tim.c ****   else
2449:./Lib/Src/stm32f4xx_tim.c ****   {
2450:./Lib/Src/stm32f4xx_tim.c ****     bitstatus = RESET;
 4974              		.loc 1 2450 15
 4975 0026 0023     		movs	r3, #0
 4976 0028 FB73     		strb	r3, [r7, #15]
 4977              	.L156:
2451:./Lib/Src/stm32f4xx_tim.c ****   }
2452:./Lib/Src/stm32f4xx_tim.c ****   return bitstatus;
 4978              		.loc 1 2452 10
 4979 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2453:./Lib/Src/stm32f4xx_tim.c **** }
 4980              		.loc 1 2453 1
 4981 002c 1846     		mov	r0, r3
 4982 002e 1437     		adds	r7, r7, #20
 4983              		.cfi_def_cfa_offset 4
 4984 0030 BD46     		mov	sp, r7
 4985              		.cfi_def_cfa_register 13
 4986              		@ sp needed
 4987 0032 5DF8047B 		ldr	r7, [sp], #4
 4988              		.cfi_restore 7
 4989              		.cfi_def_cfa_offset 0
 4990 0036 7047     		bx	lr
 4991              		.cfi_endproc
 4992              	.LFE191:
 4994              		.section	.text.TIM_ClearFlag,"ax",%progbits
 4995              		.align	1
 4996              		.global	TIM_ClearFlag
 4997              		.syntax unified
 4998              		.thumb
 4999              		.thumb_func
 5001              	TIM_ClearFlag:
 5002              	.LFB192:
2454:./Lib/Src/stm32f4xx_tim.c **** 
2455:./Lib/Src/stm32f4xx_tim.c **** /**
2456:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Clears the TIMx's pending flags.
2457:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2458:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2459:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2460:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Update: TIM update Flag
2461:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2462:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2463:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2464:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2465:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_COM: TIM Commutation Flag
2466:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Trigger: TIM Trigger Flag
2467:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_Break: TIM Break Flag
2468:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 over capture Flag
2469:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 over capture Flag
2470:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 over capture Flag
2471:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 over capture Flag
2472:./Lib/Src/stm32f4xx_tim.c ****   *
ARM GAS  /tmp/ccOaESyR.s 			page 131


2473:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can have only one update flag. 
2474:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
2475:./Lib/Src/stm32f4xx_tim.c ****   *    
2476:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2477:./Lib/Src/stm32f4xx_tim.c ****   */
2478:./Lib/Src/stm32f4xx_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2479:./Lib/Src/stm32f4xx_tim.c **** {  
 5003              		.loc 1 2479 1
 5004              		.cfi_startproc
 5005              		@ args = 0, pretend = 0, frame = 8
 5006              		@ frame_needed = 1, uses_anonymous_args = 0
 5007              		@ link register save eliminated.
 5008 0000 80B4     		push	{r7}
 5009              		.cfi_def_cfa_offset 4
 5010              		.cfi_offset 7, -4
 5011 0002 83B0     		sub	sp, sp, #12
 5012              		.cfi_def_cfa_offset 16
 5013 0004 00AF     		add	r7, sp, #0
 5014              		.cfi_def_cfa_register 7
 5015 0006 7860     		str	r0, [r7, #4]
 5016 0008 0B46     		mov	r3, r1
 5017 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2480:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2481:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2482:./Lib/Src/stm32f4xx_tim.c ****    
2483:./Lib/Src/stm32f4xx_tim.c ****   /* Clear the flags */
2484:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
 5018              		.loc 1 2484 14
 5019 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5020 000e DB43     		mvns	r3, r3
 5021 0010 9AB2     		uxth	r2, r3
 5022              		.loc 1 2484 12
 5023 0012 7B68     		ldr	r3, [r7, #4]
 5024 0014 1A82     		strh	r2, [r3, #16]	@ movhi
2485:./Lib/Src/stm32f4xx_tim.c **** }
 5025              		.loc 1 2485 1
 5026 0016 00BF     		nop
 5027 0018 0C37     		adds	r7, r7, #12
 5028              		.cfi_def_cfa_offset 4
 5029 001a BD46     		mov	sp, r7
 5030              		.cfi_def_cfa_register 13
 5031              		@ sp needed
 5032 001c 5DF8047B 		ldr	r7, [sp], #4
 5033              		.cfi_restore 7
 5034              		.cfi_def_cfa_offset 0
 5035 0020 7047     		bx	lr
 5036              		.cfi_endproc
 5037              	.LFE192:
 5039              		.section	.text.TIM_GetITStatus,"ax",%progbits
 5040              		.align	1
 5041              		.global	TIM_GetITStatus
 5042              		.syntax unified
 5043              		.thumb
 5044              		.thumb_func
 5046              	TIM_GetITStatus:
 5047              	.LFB193:
2486:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 132


2487:./Lib/Src/stm32f4xx_tim.c **** /**
2488:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2489:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2490:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2491:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2492:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM update Interrupt source
2493:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2494:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2495:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2496:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2497:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2498:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2499:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2500:./Lib/Src/stm32f4xx_tim.c ****   *
2501:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2502:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
2503:./Lib/Src/stm32f4xx_tim.c ****   *     
2504:./Lib/Src/stm32f4xx_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2505:./Lib/Src/stm32f4xx_tim.c ****   */
2506:./Lib/Src/stm32f4xx_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2507:./Lib/Src/stm32f4xx_tim.c **** {
 5048              		.loc 1 2507 1
 5049              		.cfi_startproc
 5050              		@ args = 0, pretend = 0, frame = 16
 5051              		@ frame_needed = 1, uses_anonymous_args = 0
 5052              		@ link register save eliminated.
 5053 0000 80B4     		push	{r7}
 5054              		.cfi_def_cfa_offset 4
 5055              		.cfi_offset 7, -4
 5056 0002 85B0     		sub	sp, sp, #20
 5057              		.cfi_def_cfa_offset 24
 5058 0004 00AF     		add	r7, sp, #0
 5059              		.cfi_def_cfa_register 7
 5060 0006 7860     		str	r0, [r7, #4]
 5061 0008 0B46     		mov	r3, r1
 5062 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2508:./Lib/Src/stm32f4xx_tim.c ****   ITStatus bitstatus = RESET;  
 5063              		.loc 1 2508 12
 5064 000c 0023     		movs	r3, #0
 5065 000e FB73     		strb	r3, [r7, #15]
2509:./Lib/Src/stm32f4xx_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
 5066              		.loc 1 2509 12
 5067 0010 0023     		movs	r3, #0
 5068 0012 BB81     		strh	r3, [r7, #12]	@ movhi
 5069              		.loc 1 2509 28
 5070 0014 0023     		movs	r3, #0
 5071 0016 7B81     		strh	r3, [r7, #10]	@ movhi
2510:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2511:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2512:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2513:./Lib/Src/stm32f4xx_tim.c ****    
2514:./Lib/Src/stm32f4xx_tim.c ****   itstatus = TIMx->SR & TIM_IT;
 5072              		.loc 1 2514 18
 5073 0018 7B68     		ldr	r3, [r7, #4]
 5074 001a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 5075 001c 9AB2     		uxth	r2, r3
 5076              		.loc 1 2514 12
ARM GAS  /tmp/ccOaESyR.s 			page 133


 5077 001e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5078 0020 1340     		ands	r3, r3, r2
 5079 0022 BB81     		strh	r3, [r7, #12]	@ movhi
2515:./Lib/Src/stm32f4xx_tim.c ****   
2516:./Lib/Src/stm32f4xx_tim.c ****   itenable = TIMx->DIER & TIM_IT;
 5080              		.loc 1 2516 18
 5081 0024 7B68     		ldr	r3, [r7, #4]
 5082 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 5083 0028 9AB2     		uxth	r2, r3
 5084              		.loc 1 2516 12
 5085 002a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5086 002c 1340     		ands	r3, r3, r2
 5087 002e 7B81     		strh	r3, [r7, #10]	@ movhi
2517:./Lib/Src/stm32f4xx_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 5088              		.loc 1 2517 6
 5089 0030 BB89     		ldrh	r3, [r7, #12]
 5090 0032 002B     		cmp	r3, #0
 5091 0034 05D0     		beq	.L160
 5092              		.loc 1 2517 37 discriminator 1
 5093 0036 7B89     		ldrh	r3, [r7, #10]
 5094 0038 002B     		cmp	r3, #0
 5095 003a 02D0     		beq	.L160
2518:./Lib/Src/stm32f4xx_tim.c ****   {
2519:./Lib/Src/stm32f4xx_tim.c ****     bitstatus = SET;
 5096              		.loc 1 2519 15
 5097 003c 0123     		movs	r3, #1
 5098 003e FB73     		strb	r3, [r7, #15]
 5099 0040 01E0     		b	.L161
 5100              	.L160:
2520:./Lib/Src/stm32f4xx_tim.c ****   }
2521:./Lib/Src/stm32f4xx_tim.c ****   else
2522:./Lib/Src/stm32f4xx_tim.c ****   {
2523:./Lib/Src/stm32f4xx_tim.c ****     bitstatus = RESET;
 5101              		.loc 1 2523 15
 5102 0042 0023     		movs	r3, #0
 5103 0044 FB73     		strb	r3, [r7, #15]
 5104              	.L161:
2524:./Lib/Src/stm32f4xx_tim.c ****   }
2525:./Lib/Src/stm32f4xx_tim.c ****   return bitstatus;
 5105              		.loc 1 2525 10
 5106 0046 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2526:./Lib/Src/stm32f4xx_tim.c **** }
 5107              		.loc 1 2526 1
 5108 0048 1846     		mov	r0, r3
 5109 004a 1437     		adds	r7, r7, #20
 5110              		.cfi_def_cfa_offset 4
 5111 004c BD46     		mov	sp, r7
 5112              		.cfi_def_cfa_register 13
 5113              		@ sp needed
 5114 004e 5DF8047B 		ldr	r7, [sp], #4
 5115              		.cfi_restore 7
 5116              		.cfi_def_cfa_offset 0
 5117 0052 7047     		bx	lr
 5118              		.cfi_endproc
 5119              	.LFE193:
 5121              		.section	.text.TIM_ClearITPendingBit,"ax",%progbits
 5122              		.align	1
ARM GAS  /tmp/ccOaESyR.s 			page 134


 5123              		.global	TIM_ClearITPendingBit
 5124              		.syntax unified
 5125              		.thumb
 5126              		.thumb_func
 5128              	TIM_ClearITPendingBit:
 5129              	.LFB194:
2527:./Lib/Src/stm32f4xx_tim.c **** 
2528:./Lib/Src/stm32f4xx_tim.c **** /**
2529:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2530:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
2531:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2532:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2533:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Update: TIM1 update Interrupt source
2534:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2535:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2536:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2537:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2538:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_COM: TIM Commutation Interrupt source
2539:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2540:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_IT_Break: TIM Break Interrupt source
2541:./Lib/Src/stm32f4xx_tim.c ****   *
2542:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM6 and TIM7 can generate only an update interrupt.
2543:./Lib/Src/stm32f4xx_tim.c ****   * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
2544:./Lib/Src/stm32f4xx_tim.c ****   *      
2545:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2546:./Lib/Src/stm32f4xx_tim.c ****   */
2547:./Lib/Src/stm32f4xx_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2548:./Lib/Src/stm32f4xx_tim.c **** {
 5130              		.loc 1 2548 1
 5131              		.cfi_startproc
 5132              		@ args = 0, pretend = 0, frame = 8
 5133              		@ frame_needed = 1, uses_anonymous_args = 0
 5134              		@ link register save eliminated.
 5135 0000 80B4     		push	{r7}
 5136              		.cfi_def_cfa_offset 4
 5137              		.cfi_offset 7, -4
 5138 0002 83B0     		sub	sp, sp, #12
 5139              		.cfi_def_cfa_offset 16
 5140 0004 00AF     		add	r7, sp, #0
 5141              		.cfi_def_cfa_register 7
 5142 0006 7860     		str	r0, [r7, #4]
 5143 0008 0B46     		mov	r3, r1
 5144 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2549:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2550:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2551:./Lib/Src/stm32f4xx_tim.c **** 
2552:./Lib/Src/stm32f4xx_tim.c ****   /* Clear the IT pending Bit */
2553:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
 5145              		.loc 1 2553 14
 5146 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5147 000e DB43     		mvns	r3, r3
 5148 0010 9AB2     		uxth	r2, r3
 5149              		.loc 1 2553 12
 5150 0012 7B68     		ldr	r3, [r7, #4]
 5151 0014 1A82     		strh	r2, [r3, #16]	@ movhi
2554:./Lib/Src/stm32f4xx_tim.c **** }
 5152              		.loc 1 2554 1
ARM GAS  /tmp/ccOaESyR.s 			page 135


 5153 0016 00BF     		nop
 5154 0018 0C37     		adds	r7, r7, #12
 5155              		.cfi_def_cfa_offset 4
 5156 001a BD46     		mov	sp, r7
 5157              		.cfi_def_cfa_register 13
 5158              		@ sp needed
 5159 001c 5DF8047B 		ldr	r7, [sp], #4
 5160              		.cfi_restore 7
 5161              		.cfi_def_cfa_offset 0
 5162 0020 7047     		bx	lr
 5163              		.cfi_endproc
 5164              	.LFE194:
 5166              		.section	.text.TIM_DMAConfig,"ax",%progbits
 5167              		.align	1
 5168              		.global	TIM_DMAConfig
 5169              		.syntax unified
 5170              		.thumb
 5171              		.thumb_func
 5173              	TIM_DMAConfig:
 5174              	.LFB195:
2555:./Lib/Src/stm32f4xx_tim.c **** 
2556:./Lib/Src/stm32f4xx_tim.c **** /**
2557:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx's DMA interface.
2558:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2559:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_DMABase: DMA Base address.
2560:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2561:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CR1  
2562:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CR2
2563:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_SMCR
2564:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_DIER
2565:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM1_DMABase_SR
2566:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_EGR
2567:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCMR1
2568:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCMR2
2569:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCER
2570:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CNT   
2571:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_PSC   
2572:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_ARR
2573:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_RCR
2574:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR1
2575:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR2
2576:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR3  
2577:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_CCR4
2578:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_BDTR
2579:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMABase_DCR
2580:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
2581:./Lib/Src/stm32f4xx_tim.c ****   *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
2582:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2583:./Lib/Src/stm32f4xx_tim.c ****   */
2584:./Lib/Src/stm32f4xx_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
2585:./Lib/Src/stm32f4xx_tim.c **** {
 5175              		.loc 1 2585 1
 5176              		.cfi_startproc
 5177              		@ args = 0, pretend = 0, frame = 8
 5178              		@ frame_needed = 1, uses_anonymous_args = 0
 5179              		@ link register save eliminated.
 5180 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccOaESyR.s 			page 136


 5181              		.cfi_def_cfa_offset 4
 5182              		.cfi_offset 7, -4
 5183 0002 83B0     		sub	sp, sp, #12
 5184              		.cfi_def_cfa_offset 16
 5185 0004 00AF     		add	r7, sp, #0
 5186              		.cfi_def_cfa_register 7
 5187 0006 7860     		str	r0, [r7, #4]
 5188 0008 0B46     		mov	r3, r1
 5189 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 5190 000c 1346     		mov	r3, r2	@ movhi
 5191 000e 3B80     		strh	r3, [r7]	@ movhi
2586:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2587:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2588:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
2589:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
2590:./Lib/Src/stm32f4xx_tim.c **** 
2591:./Lib/Src/stm32f4xx_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
2592:./Lib/Src/stm32f4xx_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 5192              		.loc 1 2592 13
 5193 0010 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5194 0012 3B88     		ldrh	r3, [r7]	@ movhi
 5195 0014 1343     		orrs	r3, r3, r2
 5196 0016 9AB2     		uxth	r2, r3
 5197 0018 7B68     		ldr	r3, [r7, #4]
 5198 001a A3F84820 		strh	r2, [r3, #72]	@ movhi
2593:./Lib/Src/stm32f4xx_tim.c **** }
 5199              		.loc 1 2593 1
 5200 001e 00BF     		nop
 5201 0020 0C37     		adds	r7, r7, #12
 5202              		.cfi_def_cfa_offset 4
 5203 0022 BD46     		mov	sp, r7
 5204              		.cfi_def_cfa_register 13
 5205              		@ sp needed
 5206 0024 5DF8047B 		ldr	r7, [sp], #4
 5207              		.cfi_restore 7
 5208              		.cfi_def_cfa_offset 0
 5209 0028 7047     		bx	lr
 5210              		.cfi_endproc
 5211              	.LFE195:
 5213              		.section	.text.TIM_DMACmd,"ax",%progbits
 5214              		.align	1
 5215              		.global	TIM_DMACmd
 5216              		.syntax unified
 5217              		.thumb
 5218              		.thumb_func
 5220              	TIM_DMACmd:
 5221              	.LFB196:
2594:./Lib/Src/stm32f4xx_tim.c **** 
2595:./Lib/Src/stm32f4xx_tim.c **** /**
2596:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
2597:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
2598:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
2599:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be any combination of the following values:
2600:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_Update: TIM update Interrupt source
2601:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
2602:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
2603:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
ARM GAS  /tmp/ccOaESyR.s 			page 137


2604:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
2605:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_COM: TIM Commutation DMA source
2606:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_DMA_Trigger: TIM Trigger DMA source
2607:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the DMA Request sources.
2608:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2609:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2610:./Lib/Src/stm32f4xx_tim.c ****   */
2611:./Lib/Src/stm32f4xx_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
2612:./Lib/Src/stm32f4xx_tim.c **** { 
 5222              		.loc 1 2612 1
 5223              		.cfi_startproc
 5224              		@ args = 0, pretend = 0, frame = 8
 5225              		@ frame_needed = 1, uses_anonymous_args = 0
 5226              		@ link register save eliminated.
 5227 0000 80B4     		push	{r7}
 5228              		.cfi_def_cfa_offset 4
 5229              		.cfi_offset 7, -4
 5230 0002 83B0     		sub	sp, sp, #12
 5231              		.cfi_def_cfa_offset 16
 5232 0004 00AF     		add	r7, sp, #0
 5233              		.cfi_def_cfa_register 7
 5234 0006 7860     		str	r0, [r7, #4]
 5235 0008 0B46     		mov	r3, r1
 5236 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 5237 000c 1346     		mov	r3, r2
 5238 000e 7B70     		strb	r3, [r7, #1]
2613:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2614:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
2615:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
2616:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2617:./Lib/Src/stm32f4xx_tim.c ****   
2618:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 5239              		.loc 1 2618 6
 5240 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 5241 0012 002B     		cmp	r3, #0
 5242 0014 08D0     		beq	.L166
2619:./Lib/Src/stm32f4xx_tim.c ****   {
2620:./Lib/Src/stm32f4xx_tim.c ****     /* Enable the DMA sources */
2621:./Lib/Src/stm32f4xx_tim.c ****     TIMx->DIER |= TIM_DMASource; 
 5243              		.loc 1 2621 9
 5244 0016 7B68     		ldr	r3, [r7, #4]
 5245 0018 9B89     		ldrh	r3, [r3, #12]	@ movhi
 5246 001a 9AB2     		uxth	r2, r3
 5247              		.loc 1 2621 16
 5248 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5249 001e 1343     		orrs	r3, r3, r2
 5250 0020 9AB2     		uxth	r2, r3
 5251 0022 7B68     		ldr	r3, [r7, #4]
 5252 0024 9A81     		strh	r2, [r3, #12]	@ movhi
2622:./Lib/Src/stm32f4xx_tim.c ****   }
2623:./Lib/Src/stm32f4xx_tim.c ****   else
2624:./Lib/Src/stm32f4xx_tim.c ****   {
2625:./Lib/Src/stm32f4xx_tim.c ****     /* Disable the DMA sources */
2626:./Lib/Src/stm32f4xx_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
2627:./Lib/Src/stm32f4xx_tim.c ****   }
2628:./Lib/Src/stm32f4xx_tim.c **** }
 5253              		.loc 1 2628 1
ARM GAS  /tmp/ccOaESyR.s 			page 138


 5254 0026 09E0     		b	.L168
 5255              	.L166:
2626:./Lib/Src/stm32f4xx_tim.c ****   }
 5256              		.loc 1 2626 9
 5257 0028 7B68     		ldr	r3, [r7, #4]
 5258 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 5259 002c 9AB2     		uxth	r2, r3
2626:./Lib/Src/stm32f4xx_tim.c ****   }
 5260              		.loc 1 2626 19
 5261 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5262 0030 DB43     		mvns	r3, r3
 5263 0032 9BB2     		uxth	r3, r3
2626:./Lib/Src/stm32f4xx_tim.c ****   }
 5264              		.loc 1 2626 16
 5265 0034 1340     		ands	r3, r3, r2
 5266 0036 9AB2     		uxth	r2, r3
 5267 0038 7B68     		ldr	r3, [r7, #4]
 5268 003a 9A81     		strh	r2, [r3, #12]	@ movhi
 5269              	.L168:
 5270              		.loc 1 2628 1
 5271 003c 00BF     		nop
 5272 003e 0C37     		adds	r7, r7, #12
 5273              		.cfi_def_cfa_offset 4
 5274 0040 BD46     		mov	sp, r7
 5275              		.cfi_def_cfa_register 13
 5276              		@ sp needed
 5277 0042 5DF8047B 		ldr	r7, [sp], #4
 5278              		.cfi_restore 7
 5279              		.cfi_def_cfa_offset 0
 5280 0046 7047     		bx	lr
 5281              		.cfi_endproc
 5282              	.LFE196:
 5284              		.section	.text.TIM_SelectCCDMA,"ax",%progbits
 5285              		.align	1
 5286              		.global	TIM_SelectCCDMA
 5287              		.syntax unified
 5288              		.thumb
 5289              		.thumb_func
 5291              	TIM_SelectCCDMA:
 5292              	.LFB197:
2629:./Lib/Src/stm32f4xx_tim.c **** 
2630:./Lib/Src/stm32f4xx_tim.c **** /**
2631:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
2632:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2633:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
2634:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
2635:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2636:./Lib/Src/stm32f4xx_tim.c ****   */
2637:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
2638:./Lib/Src/stm32f4xx_tim.c **** {
 5293              		.loc 1 2638 1
 5294              		.cfi_startproc
 5295              		@ args = 0, pretend = 0, frame = 8
 5296              		@ frame_needed = 1, uses_anonymous_args = 0
 5297              		@ link register save eliminated.
 5298 0000 80B4     		push	{r7}
 5299              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccOaESyR.s 			page 139


 5300              		.cfi_offset 7, -4
 5301 0002 83B0     		sub	sp, sp, #12
 5302              		.cfi_def_cfa_offset 16
 5303 0004 00AF     		add	r7, sp, #0
 5304              		.cfi_def_cfa_register 7
 5305 0006 7860     		str	r0, [r7, #4]
 5306 0008 0B46     		mov	r3, r1
 5307 000a FB70     		strb	r3, [r7, #3]
2639:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2640:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2641:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2642:./Lib/Src/stm32f4xx_tim.c **** 
2643:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 5308              		.loc 1 2643 6
 5309 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5310 000e 002B     		cmp	r3, #0
 5311 0010 08D0     		beq	.L170
2644:./Lib/Src/stm32f4xx_tim.c ****   {
2645:./Lib/Src/stm32f4xx_tim.c ****     /* Set the CCDS Bit */
2646:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
 5312              		.loc 1 2646 9
 5313 0012 7B68     		ldr	r3, [r7, #4]
 5314 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 5315 0016 9BB2     		uxth	r3, r3
 5316              		.loc 1 2646 15
 5317 0018 43F00803 		orr	r3, r3, #8
 5318 001c 9AB2     		uxth	r2, r3
 5319 001e 7B68     		ldr	r3, [r7, #4]
 5320 0020 9A80     		strh	r2, [r3, #4]	@ movhi
2647:./Lib/Src/stm32f4xx_tim.c ****   }
2648:./Lib/Src/stm32f4xx_tim.c ****   else
2649:./Lib/Src/stm32f4xx_tim.c ****   {
2650:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the CCDS Bit */
2651:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
2652:./Lib/Src/stm32f4xx_tim.c ****   }
2653:./Lib/Src/stm32f4xx_tim.c **** }
 5321              		.loc 1 2653 1
 5322 0022 07E0     		b	.L172
 5323              	.L170:
2651:./Lib/Src/stm32f4xx_tim.c ****   }
 5324              		.loc 1 2651 9
 5325 0024 7B68     		ldr	r3, [r7, #4]
 5326 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 5327 0028 9BB2     		uxth	r3, r3
2651:./Lib/Src/stm32f4xx_tim.c ****   }
 5328              		.loc 1 2651 15
 5329 002a 23F00803 		bic	r3, r3, #8
 5330 002e 9AB2     		uxth	r2, r3
 5331 0030 7B68     		ldr	r3, [r7, #4]
 5332 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 5333              	.L172:
 5334              		.loc 1 2653 1
 5335 0034 00BF     		nop
 5336 0036 0C37     		adds	r7, r7, #12
 5337              		.cfi_def_cfa_offset 4
 5338 0038 BD46     		mov	sp, r7
 5339              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccOaESyR.s 			page 140


 5340              		@ sp needed
 5341 003a 5DF8047B 		ldr	r7, [sp], #4
 5342              		.cfi_restore 7
 5343              		.cfi_def_cfa_offset 0
 5344 003e 7047     		bx	lr
 5345              		.cfi_endproc
 5346              	.LFE197:
 5348              		.section	.text.TIM_InternalClockConfig,"ax",%progbits
 5349              		.align	1
 5350              		.global	TIM_InternalClockConfig
 5351              		.syntax unified
 5352              		.thumb
 5353              		.thumb_func
 5355              	TIM_InternalClockConfig:
 5356              	.LFB198:
2654:./Lib/Src/stm32f4xx_tim.c **** /**
2655:./Lib/Src/stm32f4xx_tim.c ****   * @}
2656:./Lib/Src/stm32f4xx_tim.c ****   */
2657:./Lib/Src/stm32f4xx_tim.c **** 
2658:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group6 Clocks management functions
2659:./Lib/Src/stm32f4xx_tim.c ****  *  @brief    Clocks management functions
2660:./Lib/Src/stm32f4xx_tim.c ****  *
2661:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
2662:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
2663:./Lib/Src/stm32f4xx_tim.c ****                   ##### Clocks management functions #####
2664:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
2665:./Lib/Src/stm32f4xx_tim.c **** 
2666:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
2667:./Lib/Src/stm32f4xx_tim.c ****   * @{
2668:./Lib/Src/stm32f4xx_tim.c ****   */
2669:./Lib/Src/stm32f4xx_tim.c **** 
2670:./Lib/Src/stm32f4xx_tim.c **** /**
2671:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx internal Clock
2672:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2673:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
2674:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2675:./Lib/Src/stm32f4xx_tim.c ****   */
2676:./Lib/Src/stm32f4xx_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
2677:./Lib/Src/stm32f4xx_tim.c **** {
 5357              		.loc 1 2677 1
 5358              		.cfi_startproc
 5359              		@ args = 0, pretend = 0, frame = 8
 5360              		@ frame_needed = 1, uses_anonymous_args = 0
 5361              		@ link register save eliminated.
 5362 0000 80B4     		push	{r7}
 5363              		.cfi_def_cfa_offset 4
 5364              		.cfi_offset 7, -4
 5365 0002 83B0     		sub	sp, sp, #12
 5366              		.cfi_def_cfa_offset 16
 5367 0004 00AF     		add	r7, sp, #0
 5368              		.cfi_def_cfa_register 7
 5369 0006 7860     		str	r0, [r7, #4]
2678:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2679:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2680:./Lib/Src/stm32f4xx_tim.c **** 
2681:./Lib/Src/stm32f4xx_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
2682:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
ARM GAS  /tmp/ccOaESyR.s 			page 141


 5370              		.loc 1 2682 7
 5371 0008 7B68     		ldr	r3, [r7, #4]
 5372 000a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5373 000c 9BB2     		uxth	r3, r3
 5374              		.loc 1 2682 14
 5375 000e 23F00703 		bic	r3, r3, #7
 5376 0012 9AB2     		uxth	r2, r3
 5377 0014 7B68     		ldr	r3, [r7, #4]
 5378 0016 1A81     		strh	r2, [r3, #8]	@ movhi
2683:./Lib/Src/stm32f4xx_tim.c **** }
 5379              		.loc 1 2683 1
 5380 0018 00BF     		nop
 5381 001a 0C37     		adds	r7, r7, #12
 5382              		.cfi_def_cfa_offset 4
 5383 001c BD46     		mov	sp, r7
 5384              		.cfi_def_cfa_register 13
 5385              		@ sp needed
 5386 001e 5DF8047B 		ldr	r7, [sp], #4
 5387              		.cfi_restore 7
 5388              		.cfi_def_cfa_offset 0
 5389 0022 7047     		bx	lr
 5390              		.cfi_endproc
 5391              	.LFE198:
 5393              		.section	.text.TIM_ITRxExternalClockConfig,"ax",%progbits
 5394              		.align	1
 5395              		.global	TIM_ITRxExternalClockConfig
 5396              		.syntax unified
 5397              		.thumb
 5398              		.thumb_func
 5400              	TIM_ITRxExternalClockConfig:
 5401              	.LFB199:
2684:./Lib/Src/stm32f4xx_tim.c **** 
2685:./Lib/Src/stm32f4xx_tim.c **** /**
2686:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
2687:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
2688:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
2689:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_InputTriggerSource: Trigger source.
2690:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2691:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2692:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2693:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2694:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2695:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2696:./Lib/Src/stm32f4xx_tim.c ****   */
2697:./Lib/Src/stm32f4xx_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2698:./Lib/Src/stm32f4xx_tim.c **** {
 5402              		.loc 1 2698 1
 5403              		.cfi_startproc
 5404              		@ args = 0, pretend = 0, frame = 8
 5405              		@ frame_needed = 1, uses_anonymous_args = 0
 5406 0000 80B5     		push	{r7, lr}
 5407              		.cfi_def_cfa_offset 8
 5408              		.cfi_offset 7, -8
 5409              		.cfi_offset 14, -4
 5410 0002 82B0     		sub	sp, sp, #8
 5411              		.cfi_def_cfa_offset 16
 5412 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccOaESyR.s 			page 142


 5413              		.cfi_def_cfa_register 7
 5414 0006 7860     		str	r0, [r7, #4]
 5415 0008 0B46     		mov	r3, r1
 5416 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2699:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2700:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2701:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
2702:./Lib/Src/stm32f4xx_tim.c **** 
2703:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Internal Trigger */
2704:./Lib/Src/stm32f4xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 5417              		.loc 1 2704 3
 5418 000c 7B88     		ldrh	r3, [r7, #2]
 5419 000e 1946     		mov	r1, r3
 5420 0010 7868     		ldr	r0, [r7, #4]
 5421 0012 FFF7FEFF 		bl	TIM_SelectInputTrigger
2705:./Lib/Src/stm32f4xx_tim.c **** 
2706:./Lib/Src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2707:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 5422              		.loc 1 2707 7
 5423 0016 7B68     		ldr	r3, [r7, #4]
 5424 0018 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5425 001a 9BB2     		uxth	r3, r3
 5426              		.loc 1 2707 14
 5427 001c 43F00703 		orr	r3, r3, #7
 5428 0020 9AB2     		uxth	r2, r3
 5429 0022 7B68     		ldr	r3, [r7, #4]
 5430 0024 1A81     		strh	r2, [r3, #8]	@ movhi
2708:./Lib/Src/stm32f4xx_tim.c **** }
 5431              		.loc 1 2708 1
 5432 0026 00BF     		nop
 5433 0028 0837     		adds	r7, r7, #8
 5434              		.cfi_def_cfa_offset 8
 5435 002a BD46     		mov	sp, r7
 5436              		.cfi_def_cfa_register 13
 5437              		@ sp needed
 5438 002c 80BD     		pop	{r7, pc}
 5439              		.cfi_endproc
 5440              	.LFE199:
 5442              		.section	.text.TIM_TIxExternalClockConfig,"ax",%progbits
 5443              		.align	1
 5444              		.global	TIM_TIxExternalClockConfig
 5445              		.syntax unified
 5446              		.thumb
 5447              		.thumb_func
 5449              	TIM_TIxExternalClockConfig:
 5450              	.LFB200:
2709:./Lib/Src/stm32f4xx_tim.c **** 
2710:./Lib/Src/stm32f4xx_tim.c **** /**
2711:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
2712:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
2713:./Lib/Src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
2714:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
2715:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2716:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
2717:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
2718:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
2719:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
ARM GAS  /tmp/ccOaESyR.s 			page 143


2720:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2721:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
2722:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
2723:./Lib/Src/stm32f4xx_tim.c ****   * @param  ICFilter: specifies the filter value.
2724:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x0 and 0xF.
2725:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2726:./Lib/Src/stm32f4xx_tim.c ****   */
2727:./Lib/Src/stm32f4xx_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
2728:./Lib/Src/stm32f4xx_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
2729:./Lib/Src/stm32f4xx_tim.c **** {
 5451              		.loc 1 2729 1
 5452              		.cfi_startproc
 5453              		@ args = 0, pretend = 0, frame = 16
 5454              		@ frame_needed = 1, uses_anonymous_args = 0
 5455 0000 80B5     		push	{r7, lr}
 5456              		.cfi_def_cfa_offset 8
 5457              		.cfi_offset 7, -8
 5458              		.cfi_offset 14, -4
 5459 0002 84B0     		sub	sp, sp, #16
 5460              		.cfi_def_cfa_offset 24
 5461 0004 00AF     		add	r7, sp, #0
 5462              		.cfi_def_cfa_register 7
 5463 0006 F860     		str	r0, [r7, #12]
 5464 0008 0846     		mov	r0, r1
 5465 000a 1146     		mov	r1, r2
 5466 000c 1A46     		mov	r2, r3
 5467 000e 0346     		mov	r3, r0	@ movhi
 5468 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 5469 0012 0B46     		mov	r3, r1	@ movhi
 5470 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 5471 0016 1346     		mov	r3, r2	@ movhi
 5472 0018 FB80     		strh	r3, [r7, #6]	@ movhi
2730:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2731:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
2732:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
2733:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
2734:./Lib/Src/stm32f4xx_tim.c **** 
2735:./Lib/Src/stm32f4xx_tim.c ****   /* Configure the Timer Input Clock Source */
2736:./Lib/Src/stm32f4xx_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 5473              		.loc 1 2736 6
 5474 001a 7B89     		ldrh	r3, [r7, #10]
 5475 001c 602B     		cmp	r3, #96
 5476 001e 06D1     		bne	.L176
2737:./Lib/Src/stm32f4xx_tim.c ****   {
2738:./Lib/Src/stm32f4xx_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 5477              		.loc 1 2738 5
 5478 0020 FB88     		ldrh	r3, [r7, #6]
 5479 0022 3989     		ldrh	r1, [r7, #8]
 5480 0024 0122     		movs	r2, #1
 5481 0026 F868     		ldr	r0, [r7, #12]
 5482 0028 FFF7FEFF 		bl	TI2_Config
 5483 002c 05E0     		b	.L177
 5484              	.L176:
2739:./Lib/Src/stm32f4xx_tim.c ****   }
2740:./Lib/Src/stm32f4xx_tim.c ****   else
2741:./Lib/Src/stm32f4xx_tim.c ****   {
2742:./Lib/Src/stm32f4xx_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
ARM GAS  /tmp/ccOaESyR.s 			page 144


 5485              		.loc 1 2742 5
 5486 002e FB88     		ldrh	r3, [r7, #6]
 5487 0030 3989     		ldrh	r1, [r7, #8]
 5488 0032 0122     		movs	r2, #1
 5489 0034 F868     		ldr	r0, [r7, #12]
 5490 0036 FFF7FEFF 		bl	TI1_Config
 5491              	.L177:
2743:./Lib/Src/stm32f4xx_tim.c ****   }
2744:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Trigger source */
2745:./Lib/Src/stm32f4xx_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 5492              		.loc 1 2745 3
 5493 003a 7B89     		ldrh	r3, [r7, #10]
 5494 003c 1946     		mov	r1, r3
 5495 003e F868     		ldr	r0, [r7, #12]
 5496 0040 FFF7FEFF 		bl	TIM_SelectInputTrigger
2746:./Lib/Src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2747:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 5497              		.loc 1 2747 7
 5498 0044 FB68     		ldr	r3, [r7, #12]
 5499 0046 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5500 0048 9BB2     		uxth	r3, r3
 5501              		.loc 1 2747 14
 5502 004a 43F00703 		orr	r3, r3, #7
 5503 004e 9AB2     		uxth	r2, r3
 5504 0050 FB68     		ldr	r3, [r7, #12]
 5505 0052 1A81     		strh	r2, [r3, #8]	@ movhi
2748:./Lib/Src/stm32f4xx_tim.c **** }
 5506              		.loc 1 2748 1
 5507 0054 00BF     		nop
 5508 0056 1037     		adds	r7, r7, #16
 5509              		.cfi_def_cfa_offset 8
 5510 0058 BD46     		mov	sp, r7
 5511              		.cfi_def_cfa_register 13
 5512              		@ sp needed
 5513 005a 80BD     		pop	{r7, pc}
 5514              		.cfi_endproc
 5515              	.LFE200:
 5517              		.section	.text.TIM_ETRClockMode1Config,"ax",%progbits
 5518              		.align	1
 5519              		.global	TIM_ETRClockMode1Config
 5520              		.syntax unified
 5521              		.thumb
 5522              		.thumb_func
 5524              	TIM_ETRClockMode1Config:
 5525              	.LFB201:
2749:./Lib/Src/stm32f4xx_tim.c **** 
2750:./Lib/Src/stm32f4xx_tim.c **** /**
2751:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the External clock Mode1
2752:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2753:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2754:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2755:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2756:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2757:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2758:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2759:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2760:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccOaESyR.s 			page 145


2761:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2762:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2763:./Lib/Src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2764:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2765:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2766:./Lib/Src/stm32f4xx_tim.c ****   */
2767:./Lib/Src/stm32f4xx_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
2768:./Lib/Src/stm32f4xx_tim.c ****                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2769:./Lib/Src/stm32f4xx_tim.c **** {
 5526              		.loc 1 2769 1
 5527              		.cfi_startproc
 5528              		@ args = 0, pretend = 0, frame = 24
 5529              		@ frame_needed = 1, uses_anonymous_args = 0
 5530 0000 80B5     		push	{r7, lr}
 5531              		.cfi_def_cfa_offset 8
 5532              		.cfi_offset 7, -8
 5533              		.cfi_offset 14, -4
 5534 0002 86B0     		sub	sp, sp, #24
 5535              		.cfi_def_cfa_offset 32
 5536 0004 00AF     		add	r7, sp, #0
 5537              		.cfi_def_cfa_register 7
 5538 0006 F860     		str	r0, [r7, #12]
 5539 0008 0846     		mov	r0, r1
 5540 000a 1146     		mov	r1, r2
 5541 000c 1A46     		mov	r2, r3
 5542 000e 0346     		mov	r3, r0	@ movhi
 5543 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 5544 0012 0B46     		mov	r3, r1	@ movhi
 5545 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 5546 0016 1346     		mov	r3, r2	@ movhi
 5547 0018 FB80     		strh	r3, [r7, #6]	@ movhi
2770:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 5548              		.loc 1 2770 12
 5549 001a 0023     		movs	r3, #0
 5550 001c FB82     		strh	r3, [r7, #22]	@ movhi
2771:./Lib/Src/stm32f4xx_tim.c **** 
2772:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2773:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2774:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2775:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2776:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2777:./Lib/Src/stm32f4xx_tim.c ****   /* Configure the ETR Clock source */
2778:./Lib/Src/stm32f4xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 5551              		.loc 1 2778 3
 5552 001e FB88     		ldrh	r3, [r7, #6]
 5553 0020 3A89     		ldrh	r2, [r7, #8]
 5554 0022 7989     		ldrh	r1, [r7, #10]
 5555 0024 F868     		ldr	r0, [r7, #12]
 5556 0026 FFF7FEFF 		bl	TIM_ETRConfig
2779:./Lib/Src/stm32f4xx_tim.c ****   
2780:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
2781:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 5557              		.loc 1 2781 11
 5558 002a FB68     		ldr	r3, [r7, #12]
 5559 002c 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5560 002e FB82     		strh	r3, [r7, #22]	@ movhi
2782:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 146


2783:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the SMS Bits */
2784:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 5561              		.loc 1 2784 11
 5562 0030 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 5563 0032 23F00703 		bic	r3, r3, #7
 5564 0036 FB82     		strh	r3, [r7, #22]	@ movhi
2785:./Lib/Src/stm32f4xx_tim.c **** 
2786:./Lib/Src/stm32f4xx_tim.c ****   /* Select the External clock mode1 */
2787:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
 5565              		.loc 1 2787 11
 5566 0038 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 5567 003a 43F00703 		orr	r3, r3, #7
 5568 003e FB82     		strh	r3, [r7, #22]	@ movhi
2788:./Lib/Src/stm32f4xx_tim.c **** 
2789:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Trigger selection : ETRF */
2790:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 5569              		.loc 1 2790 11
 5570 0040 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 5571 0042 23F07003 		bic	r3, r3, #112
 5572 0046 FB82     		strh	r3, [r7, #22]	@ movhi
2791:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
 5573              		.loc 1 2791 11
 5574 0048 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 5575 004a 43F07003 		orr	r3, r3, #112
 5576 004e FB82     		strh	r3, [r7, #22]	@ movhi
2792:./Lib/Src/stm32f4xx_tim.c **** 
2793:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
2794:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 5577              		.loc 1 2794 14
 5578 0050 FB68     		ldr	r3, [r7, #12]
 5579 0052 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 5580 0054 1A81     		strh	r2, [r3, #8]	@ movhi
2795:./Lib/Src/stm32f4xx_tim.c **** }
 5581              		.loc 1 2795 1
 5582 0056 00BF     		nop
 5583 0058 1837     		adds	r7, r7, #24
 5584              		.cfi_def_cfa_offset 8
 5585 005a BD46     		mov	sp, r7
 5586              		.cfi_def_cfa_register 13
 5587              		@ sp needed
 5588 005c 80BD     		pop	{r7, pc}
 5589              		.cfi_endproc
 5590              	.LFE201:
 5592              		.section	.text.TIM_ETRClockMode2Config,"ax",%progbits
 5593              		.align	1
 5594              		.global	TIM_ETRClockMode2Config
 5595              		.syntax unified
 5596              		.thumb
 5597              		.thumb_func
 5599              	TIM_ETRClockMode2Config:
 5600              	.LFB202:
2796:./Lib/Src/stm32f4xx_tim.c **** 
2797:./Lib/Src/stm32f4xx_tim.c **** /**
2798:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the External clock Mode2
2799:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2800:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2801:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccOaESyR.s 			page 147


2802:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2803:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2804:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2805:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2806:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2807:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2808:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
2809:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
2810:./Lib/Src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
2811:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
2812:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2813:./Lib/Src/stm32f4xx_tim.c ****   */
2814:./Lib/Src/stm32f4xx_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
2815:./Lib/Src/stm32f4xx_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
2816:./Lib/Src/stm32f4xx_tim.c **** {
 5601              		.loc 1 2816 1
 5602              		.cfi_startproc
 5603              		@ args = 0, pretend = 0, frame = 16
 5604              		@ frame_needed = 1, uses_anonymous_args = 0
 5605 0000 80B5     		push	{r7, lr}
 5606              		.cfi_def_cfa_offset 8
 5607              		.cfi_offset 7, -8
 5608              		.cfi_offset 14, -4
 5609 0002 84B0     		sub	sp, sp, #16
 5610              		.cfi_def_cfa_offset 24
 5611 0004 00AF     		add	r7, sp, #0
 5612              		.cfi_def_cfa_register 7
 5613 0006 F860     		str	r0, [r7, #12]
 5614 0008 0846     		mov	r0, r1
 5615 000a 1146     		mov	r1, r2
 5616 000c 1A46     		mov	r2, r3
 5617 000e 0346     		mov	r3, r0	@ movhi
 5618 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 5619 0012 0B46     		mov	r3, r1	@ movhi
 5620 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 5621 0016 1346     		mov	r3, r2	@ movhi
 5622 0018 FB80     		strh	r3, [r7, #6]	@ movhi
2817:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2818:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2819:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
2820:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
2821:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
2822:./Lib/Src/stm32f4xx_tim.c **** 
2823:./Lib/Src/stm32f4xx_tim.c ****   /* Configure the ETR Clock source */
2824:./Lib/Src/stm32f4xx_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 5623              		.loc 1 2824 3
 5624 001a FB88     		ldrh	r3, [r7, #6]
 5625 001c 3A89     		ldrh	r2, [r7, #8]
 5626 001e 7989     		ldrh	r1, [r7, #10]
 5627 0020 F868     		ldr	r0, [r7, #12]
 5628 0022 FFF7FEFF 		bl	TIM_ETRConfig
2825:./Lib/Src/stm32f4xx_tim.c **** 
2826:./Lib/Src/stm32f4xx_tim.c ****   /* Enable the External clock mode2 */
2827:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
 5629              		.loc 1 2827 7
 5630 0026 FB68     		ldr	r3, [r7, #12]
 5631 0028 1B89     		ldrh	r3, [r3, #8]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 148


 5632 002a 9BB2     		uxth	r3, r3
 5633              		.loc 1 2827 14
 5634 002c 43F48043 		orr	r3, r3, #16384
 5635 0030 9AB2     		uxth	r2, r3
 5636 0032 FB68     		ldr	r3, [r7, #12]
 5637 0034 1A81     		strh	r2, [r3, #8]	@ movhi
2828:./Lib/Src/stm32f4xx_tim.c **** }
 5638              		.loc 1 2828 1
 5639 0036 00BF     		nop
 5640 0038 1037     		adds	r7, r7, #16
 5641              		.cfi_def_cfa_offset 8
 5642 003a BD46     		mov	sp, r7
 5643              		.cfi_def_cfa_register 13
 5644              		@ sp needed
 5645 003c 80BD     		pop	{r7, pc}
 5646              		.cfi_endproc
 5647              	.LFE202:
 5649              		.section	.text.TIM_SelectInputTrigger,"ax",%progbits
 5650              		.align	1
 5651              		.global	TIM_SelectInputTrigger
 5652              		.syntax unified
 5653              		.thumb
 5654              		.thumb_func
 5656              	TIM_SelectInputTrigger:
 5657              	.LFB203:
2829:./Lib/Src/stm32f4xx_tim.c **** /**
2830:./Lib/Src/stm32f4xx_tim.c ****   * @}
2831:./Lib/Src/stm32f4xx_tim.c ****   */
2832:./Lib/Src/stm32f4xx_tim.c **** 
2833:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group7 Synchronization management functions
2834:./Lib/Src/stm32f4xx_tim.c ****  *  @brief    Synchronization management functions 
2835:./Lib/Src/stm32f4xx_tim.c ****  *
2836:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
2837:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
2838:./Lib/Src/stm32f4xx_tim.c ****                 ##### Synchronization management functions #####
2839:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
2840:./Lib/Src/stm32f4xx_tim.c ****                          
2841:./Lib/Src/stm32f4xx_tim.c ****           ##### TIM Driver: how to use it in synchronization Mode #####
2842:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
2843:./Lib/Src/stm32f4xx_tim.c ****     [..] 
2844:./Lib/Src/stm32f4xx_tim.c ****     
2845:./Lib/Src/stm32f4xx_tim.c ****     *** Case of two/several Timers ***
2846:./Lib/Src/stm32f4xx_tim.c ****     ==================================
2847:./Lib/Src/stm32f4xx_tim.c ****     [..]
2848:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the Master Timers using the following functions:
2849:./Lib/Src/stm32f4xx_tim.c ****         (++) void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource); 
2850:./Lib/Src/stm32f4xx_tim.c ****         (++) void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode);  
2851:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the Slave Timers using the following functions: 
2852:./Lib/Src/stm32f4xx_tim.c ****         (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
2853:./Lib/Src/stm32f4xx_tim.c ****         (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
2854:./Lib/Src/stm32f4xx_tim.c ****           
2855:./Lib/Src/stm32f4xx_tim.c ****     *** Case of Timers and external trigger(ETR pin) ***
2856:./Lib/Src/stm32f4xx_tim.c ****     ====================================================
2857:./Lib/Src/stm32f4xx_tim.c ****     [..]           
2858:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the External trigger using this function:
2859:./Lib/Src/stm32f4xx_tim.c ****         (++) void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTR
2860:./Lib/Src/stm32f4xx_tim.c ****                                uint16_t ExtTRGFilter);
ARM GAS  /tmp/ccOaESyR.s 			page 149


2861:./Lib/Src/stm32f4xx_tim.c ****       (#) Configure the Slave Timers using the following functions: 
2862:./Lib/Src/stm32f4xx_tim.c ****         (++) void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource);  
2863:./Lib/Src/stm32f4xx_tim.c ****         (++) void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode); 
2864:./Lib/Src/stm32f4xx_tim.c **** 
2865:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
2866:./Lib/Src/stm32f4xx_tim.c ****   * @{
2867:./Lib/Src/stm32f4xx_tim.c ****   */
2868:./Lib/Src/stm32f4xx_tim.c **** 
2869:./Lib/Src/stm32f4xx_tim.c **** /**
2870:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Selects the Input Trigger source
2871:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14  
2872:./Lib/Src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
2873:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
2874:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2875:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR0: Internal Trigger 0
2876:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR1: Internal Trigger 1
2877:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR2: Internal Trigger 2
2878:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ITR3: Internal Trigger 3
2879:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI1F_ED: TI1 Edge Detector
2880:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
2881:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
2882:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TS_ETRF: External Trigger input
2883:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2884:./Lib/Src/stm32f4xx_tim.c ****   */
2885:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
2886:./Lib/Src/stm32f4xx_tim.c **** {
 5658              		.loc 1 2886 1
 5659              		.cfi_startproc
 5660              		@ args = 0, pretend = 0, frame = 16
 5661              		@ frame_needed = 1, uses_anonymous_args = 0
 5662              		@ link register save eliminated.
 5663 0000 80B4     		push	{r7}
 5664              		.cfi_def_cfa_offset 4
 5665              		.cfi_offset 7, -4
 5666 0002 85B0     		sub	sp, sp, #20
 5667              		.cfi_def_cfa_offset 24
 5668 0004 00AF     		add	r7, sp, #0
 5669              		.cfi_def_cfa_register 7
 5670 0006 7860     		str	r0, [r7, #4]
 5671 0008 0B46     		mov	r3, r1
 5672 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2887:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 5673              		.loc 1 2887 12
 5674 000c 0023     		movs	r3, #0
 5675 000e FB81     		strh	r3, [r7, #14]	@ movhi
2888:./Lib/Src/stm32f4xx_tim.c **** 
2889:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2890:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
2891:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
2892:./Lib/Src/stm32f4xx_tim.c **** 
2893:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
2894:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 5676              		.loc 1 2894 11
 5677 0010 7B68     		ldr	r3, [r7, #4]
 5678 0012 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5679 0014 FB81     		strh	r3, [r7, #14]	@ movhi
2895:./Lib/Src/stm32f4xx_tim.c **** 
ARM GAS  /tmp/ccOaESyR.s 			page 150


2896:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the TS Bits */
2897:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 5680              		.loc 1 2897 11
 5681 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 5682 0018 23F07003 		bic	r3, r3, #112
 5683 001c FB81     		strh	r3, [r7, #14]	@ movhi
2898:./Lib/Src/stm32f4xx_tim.c **** 
2899:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Input Trigger source */
2900:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
 5684              		.loc 1 2900 11
 5685 001e FA89     		ldrh	r2, [r7, #14]	@ movhi
 5686 0020 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5687 0022 1343     		orrs	r3, r3, r2
 5688 0024 FB81     		strh	r3, [r7, #14]	@ movhi
2901:./Lib/Src/stm32f4xx_tim.c **** 
2902:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
2903:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 5689              		.loc 1 2903 14
 5690 0026 7B68     		ldr	r3, [r7, #4]
 5691 0028 FA89     		ldrh	r2, [r7, #14]	@ movhi
 5692 002a 1A81     		strh	r2, [r3, #8]	@ movhi
2904:./Lib/Src/stm32f4xx_tim.c **** }
 5693              		.loc 1 2904 1
 5694 002c 00BF     		nop
 5695 002e 1437     		adds	r7, r7, #20
 5696              		.cfi_def_cfa_offset 4
 5697 0030 BD46     		mov	sp, r7
 5698              		.cfi_def_cfa_register 13
 5699              		@ sp needed
 5700 0032 5DF8047B 		ldr	r7, [sp], #4
 5701              		.cfi_restore 7
 5702              		.cfi_def_cfa_offset 0
 5703 0036 7047     		bx	lr
 5704              		.cfi_endproc
 5705              	.LFE203:
 5707              		.section	.text.TIM_SelectOutputTrigger,"ax",%progbits
 5708              		.align	1
 5709              		.global	TIM_SelectOutputTrigger
 5710              		.syntax unified
 5711              		.thumb
 5712              		.thumb_func
 5714              	TIM_SelectOutputTrigger:
 5715              	.LFB204:
2905:./Lib/Src/stm32f4xx_tim.c **** 
2906:./Lib/Src/stm32f4xx_tim.c **** /**
2907:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2908:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the TIM peripheral.
2909:./Lib/Src/stm32f4xx_tim.c ****   *     
2910:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2911:./Lib/Src/stm32f4xx_tim.c ****   *   This parameter can be one of the following values:
2912:./Lib/Src/stm32f4xx_tim.c ****   *
2913:./Lib/Src/stm32f4xx_tim.c ****   *  - For all TIMx
2914:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigge
2915:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output(TRG
2916:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_Update: The update event is selected as the trigger output(TRGO)
2917:./Lib/Src/stm32f4xx_tim.c ****   *
2918:./Lib/Src/stm32f4xx_tim.c ****   *  - For all TIMx except TIM6 and TIM7
ARM GAS  /tmp/ccOaESyR.s 			page 151


2919:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF fl
2920:./Lib/Src/stm32f4xx_tim.c ****   *                                     is to be set, as soon as a capture or compare match occurs(
2921:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output(TRGO)
2922:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output(TRGO)
2923:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output(TRGO)
2924:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
2925:./Lib/Src/stm32f4xx_tim.c ****   *
2926:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2927:./Lib/Src/stm32f4xx_tim.c ****   */
2928:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2929:./Lib/Src/stm32f4xx_tim.c **** {
 5716              		.loc 1 2929 1
 5717              		.cfi_startproc
 5718              		@ args = 0, pretend = 0, frame = 8
 5719              		@ frame_needed = 1, uses_anonymous_args = 0
 5720              		@ link register save eliminated.
 5721 0000 80B4     		push	{r7}
 5722              		.cfi_def_cfa_offset 4
 5723              		.cfi_offset 7, -4
 5724 0002 83B0     		sub	sp, sp, #12
 5725              		.cfi_def_cfa_offset 16
 5726 0004 00AF     		add	r7, sp, #0
 5727              		.cfi_def_cfa_register 7
 5728 0006 7860     		str	r0, [r7, #4]
 5729 0008 0B46     		mov	r3, r1
 5730 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2930:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2931:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
2932:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
2933:./Lib/Src/stm32f4xx_tim.c **** 
2934:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the MMS Bits */
2935:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 5731              		.loc 1 2935 7
 5732 000c 7B68     		ldr	r3, [r7, #4]
 5733 000e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 5734 0010 9BB2     		uxth	r3, r3
 5735              		.loc 1 2935 13
 5736 0012 23F07003 		bic	r3, r3, #112
 5737 0016 9AB2     		uxth	r2, r3
 5738 0018 7B68     		ldr	r3, [r7, #4]
 5739 001a 9A80     		strh	r2, [r3, #4]	@ movhi
2936:./Lib/Src/stm32f4xx_tim.c ****   /* Select the TRGO source */
2937:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
 5740              		.loc 1 2937 7
 5741 001c 7B68     		ldr	r3, [r7, #4]
 5742 001e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 5743 0020 9AB2     		uxth	r2, r3
 5744              		.loc 1 2937 13
 5745 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5746 0024 1343     		orrs	r3, r3, r2
 5747 0026 9AB2     		uxth	r2, r3
 5748 0028 7B68     		ldr	r3, [r7, #4]
 5749 002a 9A80     		strh	r2, [r3, #4]	@ movhi
2938:./Lib/Src/stm32f4xx_tim.c **** }
 5750              		.loc 1 2938 1
 5751 002c 00BF     		nop
 5752 002e 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccOaESyR.s 			page 152


 5753              		.cfi_def_cfa_offset 4
 5754 0030 BD46     		mov	sp, r7
 5755              		.cfi_def_cfa_register 13
 5756              		@ sp needed
 5757 0032 5DF8047B 		ldr	r7, [sp], #4
 5758              		.cfi_restore 7
 5759              		.cfi_def_cfa_offset 0
 5760 0036 7047     		bx	lr
 5761              		.cfi_endproc
 5762              	.LFE204:
 5764              		.section	.text.TIM_SelectSlaveMode,"ax",%progbits
 5765              		.align	1
 5766              		.global	TIM_SelectSlaveMode
 5767              		.syntax unified
 5768              		.thumb
 5769              		.thumb_func
 5771              	TIM_SelectSlaveMode:
 5772              	.LFB205:
2939:./Lib/Src/stm32f4xx_tim.c **** 
2940:./Lib/Src/stm32f4xx_tim.c **** /**
2941:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2942:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
2943:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2944:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2945:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal(TRGI) reinitial
2946:./Lib/Src/stm32f4xx_tim.c ****   *                                      the counter and triggers an update of the registers
2947:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (
2948:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRG
2949:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the 
2950:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2951:./Lib/Src/stm32f4xx_tim.c ****   */
2952:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2953:./Lib/Src/stm32f4xx_tim.c **** {
 5773              		.loc 1 2953 1
 5774              		.cfi_startproc
 5775              		@ args = 0, pretend = 0, frame = 8
 5776              		@ frame_needed = 1, uses_anonymous_args = 0
 5777              		@ link register save eliminated.
 5778 0000 80B4     		push	{r7}
 5779              		.cfi_def_cfa_offset 4
 5780              		.cfi_offset 7, -4
 5781 0002 83B0     		sub	sp, sp, #12
 5782              		.cfi_def_cfa_offset 16
 5783 0004 00AF     		add	r7, sp, #0
 5784              		.cfi_def_cfa_register 7
 5785 0006 7860     		str	r0, [r7, #4]
 5786 0008 0B46     		mov	r3, r1
 5787 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2954:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2955:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2956:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2957:./Lib/Src/stm32f4xx_tim.c **** 
2958:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the SMS Bits */
2959:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 5788              		.loc 1 2959 7
 5789 000c 7B68     		ldr	r3, [r7, #4]
 5790 000e 1B89     		ldrh	r3, [r3, #8]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 153


 5791 0010 9BB2     		uxth	r3, r3
 5792              		.loc 1 2959 14
 5793 0012 23F00703 		bic	r3, r3, #7
 5794 0016 9AB2     		uxth	r2, r3
 5795 0018 7B68     		ldr	r3, [r7, #4]
 5796 001a 1A81     		strh	r2, [r3, #8]	@ movhi
2960:./Lib/Src/stm32f4xx_tim.c **** 
2961:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Slave Mode */
2962:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
 5797              		.loc 1 2962 7
 5798 001c 7B68     		ldr	r3, [r7, #4]
 5799 001e 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5800 0020 9AB2     		uxth	r2, r3
 5801              		.loc 1 2962 14
 5802 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5803 0024 1343     		orrs	r3, r3, r2
 5804 0026 9AB2     		uxth	r2, r3
 5805 0028 7B68     		ldr	r3, [r7, #4]
 5806 002a 1A81     		strh	r2, [r3, #8]	@ movhi
2963:./Lib/Src/stm32f4xx_tim.c **** }
 5807              		.loc 1 2963 1
 5808 002c 00BF     		nop
 5809 002e 0C37     		adds	r7, r7, #12
 5810              		.cfi_def_cfa_offset 4
 5811 0030 BD46     		mov	sp, r7
 5812              		.cfi_def_cfa_register 13
 5813              		@ sp needed
 5814 0032 5DF8047B 		ldr	r7, [sp], #4
 5815              		.cfi_restore 7
 5816              		.cfi_def_cfa_offset 0
 5817 0036 7047     		bx	lr
 5818              		.cfi_endproc
 5819              	.LFE205:
 5821              		.section	.text.TIM_SelectMasterSlaveMode,"ax",%progbits
 5822              		.align	1
 5823              		.global	TIM_SelectMasterSlaveMode
 5824              		.syntax unified
 5825              		.thumb
 5826              		.thumb_func
 5828              	TIM_SelectMasterSlaveMode:
 5829              	.LFB206:
2964:./Lib/Src/stm32f4xx_tim.c **** 
2965:./Lib/Src/stm32f4xx_tim.c **** /**
2966:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2967:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM peripheral.
2968:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2969:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2970:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2971:./Lib/Src/stm32f4xx_tim.c ****   *                                             and its slaves (through TRGO)
2972:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_MasterSlaveMode_Disable: No action
2973:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
2974:./Lib/Src/stm32f4xx_tim.c ****   */
2975:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2976:./Lib/Src/stm32f4xx_tim.c **** {
 5830              		.loc 1 2976 1
 5831              		.cfi_startproc
 5832              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccOaESyR.s 			page 154


 5833              		@ frame_needed = 1, uses_anonymous_args = 0
 5834              		@ link register save eliminated.
 5835 0000 80B4     		push	{r7}
 5836              		.cfi_def_cfa_offset 4
 5837              		.cfi_offset 7, -4
 5838 0002 83B0     		sub	sp, sp, #12
 5839              		.cfi_def_cfa_offset 16
 5840 0004 00AF     		add	r7, sp, #0
 5841              		.cfi_def_cfa_register 7
 5842 0006 7860     		str	r0, [r7, #4]
 5843 0008 0B46     		mov	r3, r1
 5844 000a 7B80     		strh	r3, [r7, #2]	@ movhi
2977:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
2978:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2979:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
2980:./Lib/Src/stm32f4xx_tim.c **** 
2981:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the MSM Bit */
2982:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 5845              		.loc 1 2982 7
 5846 000c 7B68     		ldr	r3, [r7, #4]
 5847 000e 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5848 0010 9BB2     		uxth	r3, r3
 5849              		.loc 1 2982 14
 5850 0012 23F08003 		bic	r3, r3, #128
 5851 0016 9AB2     		uxth	r2, r3
 5852 0018 7B68     		ldr	r3, [r7, #4]
 5853 001a 1A81     		strh	r2, [r3, #8]	@ movhi
2983:./Lib/Src/stm32f4xx_tim.c ****   
2984:./Lib/Src/stm32f4xx_tim.c ****   /* Set or Reset the MSM Bit */
2985:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
 5854              		.loc 1 2985 7
 5855 001c 7B68     		ldr	r3, [r7, #4]
 5856 001e 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5857 0020 9AB2     		uxth	r2, r3
 5858              		.loc 1 2985 14
 5859 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5860 0024 1343     		orrs	r3, r3, r2
 5861 0026 9AB2     		uxth	r2, r3
 5862 0028 7B68     		ldr	r3, [r7, #4]
 5863 002a 1A81     		strh	r2, [r3, #8]	@ movhi
2986:./Lib/Src/stm32f4xx_tim.c **** }
 5864              		.loc 1 2986 1
 5865 002c 00BF     		nop
 5866 002e 0C37     		adds	r7, r7, #12
 5867              		.cfi_def_cfa_offset 4
 5868 0030 BD46     		mov	sp, r7
 5869              		.cfi_def_cfa_register 13
 5870              		@ sp needed
 5871 0032 5DF8047B 		ldr	r7, [sp], #4
 5872              		.cfi_restore 7
 5873              		.cfi_def_cfa_offset 0
 5874 0036 7047     		bx	lr
 5875              		.cfi_endproc
 5876              	.LFE206:
 5878              		.section	.text.TIM_ETRConfig,"ax",%progbits
 5879              		.align	1
 5880              		.global	TIM_ETRConfig
ARM GAS  /tmp/ccOaESyR.s 			page 155


 5881              		.syntax unified
 5882              		.thumb
 5883              		.thumb_func
 5885              	TIM_ETRConfig:
 5886              	.LFB207:
2987:./Lib/Src/stm32f4xx_tim.c **** 
2988:./Lib/Src/stm32f4xx_tim.c **** /**
2989:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
2990:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2991:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
2992:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2993:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
2994:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
2995:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
2996:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
2997:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
2998:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
2999:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
3000:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
3001:./Lib/Src/stm32f4xx_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
3002:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F
3003:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
3004:./Lib/Src/stm32f4xx_tim.c ****   */
3005:./Lib/Src/stm32f4xx_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
3006:./Lib/Src/stm32f4xx_tim.c ****                    uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
3007:./Lib/Src/stm32f4xx_tim.c **** {
 5887              		.loc 1 3007 1
 5888              		.cfi_startproc
 5889              		@ args = 0, pretend = 0, frame = 24
 5890              		@ frame_needed = 1, uses_anonymous_args = 0
 5891              		@ link register save eliminated.
 5892 0000 80B4     		push	{r7}
 5893              		.cfi_def_cfa_offset 4
 5894              		.cfi_offset 7, -4
 5895 0002 87B0     		sub	sp, sp, #28
 5896              		.cfi_def_cfa_offset 32
 5897 0004 00AF     		add	r7, sp, #0
 5898              		.cfi_def_cfa_register 7
 5899 0006 F860     		str	r0, [r7, #12]
 5900 0008 0846     		mov	r0, r1
 5901 000a 1146     		mov	r1, r2
 5902 000c 1A46     		mov	r2, r3
 5903 000e 0346     		mov	r3, r0	@ movhi
 5904 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 5905 0012 0B46     		mov	r3, r1	@ movhi
 5906 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 5907 0016 1346     		mov	r3, r2	@ movhi
 5908 0018 FB80     		strh	r3, [r7, #6]	@ movhi
3008:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 5909              		.loc 1 3008 12
 5910 001a 0023     		movs	r3, #0
 5911 001c FB82     		strh	r3, [r7, #22]	@ movhi
3009:./Lib/Src/stm32f4xx_tim.c **** 
3010:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
3011:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
3012:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
3013:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
ARM GAS  /tmp/ccOaESyR.s 			page 156


3014:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
3015:./Lib/Src/stm32f4xx_tim.c **** 
3016:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 5912              		.loc 1 3016 11
 5913 001e FB68     		ldr	r3, [r7, #12]
 5914 0020 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5915 0022 FB82     		strh	r3, [r7, #22]	@ movhi
3017:./Lib/Src/stm32f4xx_tim.c **** 
3018:./Lib/Src/stm32f4xx_tim.c ****   /* Reset the ETR Bits */
3019:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr &= SMCR_ETR_MASK;
 5916              		.loc 1 3019 11
 5917 0024 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 5918 0026 DBB2     		uxtb	r3, r3
 5919 0028 FB82     		strh	r3, [r7, #22]	@ movhi
3020:./Lib/Src/stm32f4xx_tim.c **** 
3021:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
3022:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
 5920              		.loc 1 3022 79
 5921 002a FB88     		ldrh	r3, [r7, #6]	@ movhi
 5922 002c 1B02     		lsls	r3, r3, #8
 5923 002e 9AB2     		uxth	r2, r3
 5924              		.loc 1 3022 47
 5925 0030 3B89     		ldrh	r3, [r7, #8]	@ movhi
 5926 0032 1343     		orrs	r3, r3, r2
 5927 0034 9AB2     		uxth	r2, r3
 5928              		.loc 1 3022 14
 5929 0036 7B89     		ldrh	r3, [r7, #10]	@ movhi
 5930 0038 1343     		orrs	r3, r3, r2
 5931 003a 9AB2     		uxth	r2, r3
 5932              		.loc 1 3022 11
 5933 003c FB8A     		ldrh	r3, [r7, #22]	@ movhi
 5934 003e 1343     		orrs	r3, r3, r2
 5935 0040 FB82     		strh	r3, [r7, #22]	@ movhi
3023:./Lib/Src/stm32f4xx_tim.c **** 
3024:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
3025:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 5936              		.loc 1 3025 14
 5937 0042 FB68     		ldr	r3, [r7, #12]
 5938 0044 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 5939 0046 1A81     		strh	r2, [r3, #8]	@ movhi
3026:./Lib/Src/stm32f4xx_tim.c **** }
 5940              		.loc 1 3026 1
 5941 0048 00BF     		nop
 5942 004a 1C37     		adds	r7, r7, #28
 5943              		.cfi_def_cfa_offset 4
 5944 004c BD46     		mov	sp, r7
 5945              		.cfi_def_cfa_register 13
 5946              		@ sp needed
 5947 004e 5DF8047B 		ldr	r7, [sp], #4
 5948              		.cfi_restore 7
 5949              		.cfi_def_cfa_offset 0
 5950 0052 7047     		bx	lr
 5951              		.cfi_endproc
 5952              	.LFE207:
 5954              		.section	.text.TIM_EncoderInterfaceConfig,"ax",%progbits
 5955              		.align	1
 5956              		.global	TIM_EncoderInterfaceConfig
ARM GAS  /tmp/ccOaESyR.s 			page 157


 5957              		.syntax unified
 5958              		.thumb
 5959              		.thumb_func
 5961              	TIM_EncoderInterfaceConfig:
 5962              	.LFB208:
3027:./Lib/Src/stm32f4xx_tim.c **** /**
3028:./Lib/Src/stm32f4xx_tim.c ****   * @}
3029:./Lib/Src/stm32f4xx_tim.c ****   */
3030:./Lib/Src/stm32f4xx_tim.c **** 
3031:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group8 Specific interface management functions
3032:./Lib/Src/stm32f4xx_tim.c ****  *  @brief    Specific interface management functions 
3033:./Lib/Src/stm32f4xx_tim.c ****  *
3034:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
3035:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
3036:./Lib/Src/stm32f4xx_tim.c ****             ##### Specific interface management functions #####
3037:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
3038:./Lib/Src/stm32f4xx_tim.c **** 
3039:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
3040:./Lib/Src/stm32f4xx_tim.c ****   * @{
3041:./Lib/Src/stm32f4xx_tim.c ****   */
3042:./Lib/Src/stm32f4xx_tim.c **** 
3043:./Lib/Src/stm32f4xx_tim.c **** /**
3044:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
3045:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3046:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
3047:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
3048:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3049:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
3050:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
3051:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
3052:./Lib/Src/stm32f4xx_tim.c ****   *                                       on the level of the other input.
3053:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
3054:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3055:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3056:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3057:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
3058:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3059:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling: IC Falling edge.
3060:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising: IC Rising edge.
3061:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
3062:./Lib/Src/stm32f4xx_tim.c ****   */
3063:./Lib/Src/stm32f4xx_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
3064:./Lib/Src/stm32f4xx_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
3065:./Lib/Src/stm32f4xx_tim.c **** {
 5963              		.loc 1 3065 1
 5964              		.cfi_startproc
 5965              		@ args = 0, pretend = 0, frame = 24
 5966              		@ frame_needed = 1, uses_anonymous_args = 0
 5967              		@ link register save eliminated.
 5968 0000 80B4     		push	{r7}
 5969              		.cfi_def_cfa_offset 4
 5970              		.cfi_offset 7, -4
 5971 0002 87B0     		sub	sp, sp, #28
 5972              		.cfi_def_cfa_offset 32
 5973 0004 00AF     		add	r7, sp, #0
 5974              		.cfi_def_cfa_register 7
 5975 0006 F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccOaESyR.s 			page 158


 5976 0008 0846     		mov	r0, r1
 5977 000a 1146     		mov	r1, r2
 5978 000c 1A46     		mov	r2, r3
 5979 000e 0346     		mov	r3, r0	@ movhi
 5980 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 5981 0012 0B46     		mov	r3, r1	@ movhi
 5982 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 5983 0016 1346     		mov	r3, r2	@ movhi
 5984 0018 FB80     		strh	r3, [r7, #6]	@ movhi
3066:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpsmcr = 0;
 5985              		.loc 1 3066 12
 5986 001a 0023     		movs	r3, #0
 5987 001c FB82     		strh	r3, [r7, #22]	@ movhi
3067:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0;
 5988              		.loc 1 3067 12
 5989 001e 0023     		movs	r3, #0
 5990 0020 BB82     		strh	r3, [r7, #20]	@ movhi
3068:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccer = 0;
 5991              		.loc 1 3068 12
 5992 0022 0023     		movs	r3, #0
 5993 0024 7B82     		strh	r3, [r7, #18]	@ movhi
3069:./Lib/Src/stm32f4xx_tim.c ****     
3070:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
3071:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
3072:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
3073:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
3074:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
3075:./Lib/Src/stm32f4xx_tim.c **** 
3076:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx SMCR register value */
3077:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr = TIMx->SMCR;
 5994              		.loc 1 3077 11
 5995 0026 FB68     		ldr	r3, [r7, #12]
 5996 0028 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5997 002a FB82     		strh	r3, [r7, #22]	@ movhi
3078:./Lib/Src/stm32f4xx_tim.c **** 
3079:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCMR1 register value */
3080:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 5998              		.loc 1 3080 12
 5999 002c FB68     		ldr	r3, [r7, #12]
 6000 002e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 6001 0030 BB82     		strh	r3, [r7, #20]	@ movhi
3081:./Lib/Src/stm32f4xx_tim.c **** 
3082:./Lib/Src/stm32f4xx_tim.c ****   /* Get the TIMx CCER register value */
3083:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 6002              		.loc 1 3083 11
 6003 0032 FB68     		ldr	r3, [r7, #12]
 6004 0034 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6005 0036 7B82     		strh	r3, [r7, #18]	@ movhi
3084:./Lib/Src/stm32f4xx_tim.c **** 
3085:./Lib/Src/stm32f4xx_tim.c ****   /* Set the encoder Mode */
3086:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 6006              		.loc 1 3086 11
 6007 0038 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6008 003a 23F00703 		bic	r3, r3, #7
 6009 003e FB82     		strh	r3, [r7, #22]	@ movhi
3087:./Lib/Src/stm32f4xx_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 6010              		.loc 1 3087 11
ARM GAS  /tmp/ccOaESyR.s 			page 159


 6011 0040 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6012 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6013 0044 1343     		orrs	r3, r3, r2
 6014 0046 FB82     		strh	r3, [r7, #22]	@ movhi
3088:./Lib/Src/stm32f4xx_tim.c **** 
3089:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
3090:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 6015              		.loc 1 3090 12
 6016 0048 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6017 004a 23F44073 		bic	r3, r3, #768
 6018 004e 23F00303 		bic	r3, r3, #3
 6019 0052 BB82     		strh	r3, [r7, #20]	@ movhi
3091:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 6020              		.loc 1 3091 12
 6021 0054 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6022 0056 43F48073 		orr	r3, r3, #256
 6023 005a 43F00103 		orr	r3, r3, #1
 6024 005e BB82     		strh	r3, [r7, #20]	@ movhi
3092:./Lib/Src/stm32f4xx_tim.c **** 
3093:./Lib/Src/stm32f4xx_tim.c ****   /* Set the TI1 and the TI2 Polarities */
3094:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 6025              		.loc 1 3094 11
 6026 0060 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 6027 0062 23F02203 		bic	r3, r3, #34
 6028 0066 7B82     		strh	r3, [r7, #18]	@ movhi
3095:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 6029              		.loc 1 3095 43
 6030 0068 FB88     		ldrh	r3, [r7, #6]	@ movhi
 6031 006a 1B01     		lsls	r3, r3, #4
 6032 006c 9AB2     		uxth	r2, r3
 6033              		.loc 1 3095 14
 6034 006e 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6035 0070 1343     		orrs	r3, r3, r2
 6036 0072 9AB2     		uxth	r2, r3
 6037              		.loc 1 3095 11
 6038 0074 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 6039 0076 1343     		orrs	r3, r3, r2
 6040 0078 7B82     		strh	r3, [r7, #18]	@ movhi
3096:./Lib/Src/stm32f4xx_tim.c **** 
3097:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx SMCR */
3098:./Lib/Src/stm32f4xx_tim.c ****   TIMx->SMCR = tmpsmcr;
 6041              		.loc 1 3098 14
 6042 007a FB68     		ldr	r3, [r7, #12]
 6043 007c FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6044 007e 1A81     		strh	r2, [r3, #8]	@ movhi
3099:./Lib/Src/stm32f4xx_tim.c **** 
3100:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 */
3101:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 6045              		.loc 1 3101 15
 6046 0080 FB68     		ldr	r3, [r7, #12]
 6047 0082 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6048 0084 1A83     		strh	r2, [r3, #24]	@ movhi
3102:./Lib/Src/stm32f4xx_tim.c **** 
3103:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCER */
3104:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 6049              		.loc 1 3104 14
 6050 0086 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccOaESyR.s 			page 160


 6051 0088 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6052 008a 1A84     		strh	r2, [r3, #32]	@ movhi
3105:./Lib/Src/stm32f4xx_tim.c **** }
 6053              		.loc 1 3105 1
 6054 008c 00BF     		nop
 6055 008e 1C37     		adds	r7, r7, #28
 6056              		.cfi_def_cfa_offset 4
 6057 0090 BD46     		mov	sp, r7
 6058              		.cfi_def_cfa_register 13
 6059              		@ sp needed
 6060 0092 5DF8047B 		ldr	r7, [sp], #4
 6061              		.cfi_restore 7
 6062              		.cfi_def_cfa_offset 0
 6063 0096 7047     		bx	lr
 6064              		.cfi_endproc
 6065              	.LFE208:
 6067              		.section	.text.TIM_SelectHallSensor,"ax",%progbits
 6068              		.align	1
 6069              		.global	TIM_SelectHallSensor
 6070              		.syntax unified
 6071              		.thumb
 6072              		.thumb_func
 6074              	TIM_SelectHallSensor:
 6075              	.LFB209:
3106:./Lib/Src/stm32f4xx_tim.c **** 
3107:./Lib/Src/stm32f4xx_tim.c **** /**
3108:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
3109:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3110:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
3111:./Lib/Src/stm32f4xx_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
3112:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be: ENABLE or DISABLE.
3113:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
3114:./Lib/Src/stm32f4xx_tim.c ****   */
3115:./Lib/Src/stm32f4xx_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
3116:./Lib/Src/stm32f4xx_tim.c **** {
 6076              		.loc 1 3116 1
 6077              		.cfi_startproc
 6078              		@ args = 0, pretend = 0, frame = 8
 6079              		@ frame_needed = 1, uses_anonymous_args = 0
 6080              		@ link register save eliminated.
 6081 0000 80B4     		push	{r7}
 6082              		.cfi_def_cfa_offset 4
 6083              		.cfi_offset 7, -4
 6084 0002 83B0     		sub	sp, sp, #12
 6085              		.cfi_def_cfa_offset 16
 6086 0004 00AF     		add	r7, sp, #0
 6087              		.cfi_def_cfa_register 7
 6088 0006 7860     		str	r0, [r7, #4]
 6089 0008 0B46     		mov	r3, r1
 6090 000a FB70     		strb	r3, [r7, #3]
3117:./Lib/Src/stm32f4xx_tim.c ****   /* Check the parameters */
3118:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
3119:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3120:./Lib/Src/stm32f4xx_tim.c **** 
3121:./Lib/Src/stm32f4xx_tim.c ****   if (NewState != DISABLE)
 6091              		.loc 1 3121 6
 6092 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccOaESyR.s 			page 161


 6093 000e 002B     		cmp	r3, #0
 6094 0010 08D0     		beq	.L187
3122:./Lib/Src/stm32f4xx_tim.c ****   {
3123:./Lib/Src/stm32f4xx_tim.c ****     /* Set the TI1S Bit */
3124:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
 6095              		.loc 1 3124 9
 6096 0012 7B68     		ldr	r3, [r7, #4]
 6097 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 6098 0016 9BB2     		uxth	r3, r3
 6099              		.loc 1 3124 15
 6100 0018 43F08003 		orr	r3, r3, #128
 6101 001c 9AB2     		uxth	r2, r3
 6102 001e 7B68     		ldr	r3, [r7, #4]
 6103 0020 9A80     		strh	r2, [r3, #4]	@ movhi
3125:./Lib/Src/stm32f4xx_tim.c ****   }
3126:./Lib/Src/stm32f4xx_tim.c ****   else
3127:./Lib/Src/stm32f4xx_tim.c ****   {
3128:./Lib/Src/stm32f4xx_tim.c ****     /* Reset the TI1S Bit */
3129:./Lib/Src/stm32f4xx_tim.c ****     TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
3130:./Lib/Src/stm32f4xx_tim.c ****   }
3131:./Lib/Src/stm32f4xx_tim.c **** }
 6104              		.loc 1 3131 1
 6105 0022 07E0     		b	.L189
 6106              	.L187:
3129:./Lib/Src/stm32f4xx_tim.c ****   }
 6107              		.loc 1 3129 9
 6108 0024 7B68     		ldr	r3, [r7, #4]
 6109 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 6110 0028 9BB2     		uxth	r3, r3
3129:./Lib/Src/stm32f4xx_tim.c ****   }
 6111              		.loc 1 3129 15
 6112 002a 23F08003 		bic	r3, r3, #128
 6113 002e 9AB2     		uxth	r2, r3
 6114 0030 7B68     		ldr	r3, [r7, #4]
 6115 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 6116              	.L189:
 6117              		.loc 1 3131 1
 6118 0034 00BF     		nop
 6119 0036 0C37     		adds	r7, r7, #12
 6120              		.cfi_def_cfa_offset 4
 6121 0038 BD46     		mov	sp, r7
 6122              		.cfi_def_cfa_register 13
 6123              		@ sp needed
 6124 003a 5DF8047B 		ldr	r7, [sp], #4
 6125              		.cfi_restore 7
 6126              		.cfi_def_cfa_offset 0
 6127 003e 7047     		bx	lr
 6128              		.cfi_endproc
 6129              	.LFE209:
 6131              		.section	.text.TIM_RemapConfig,"ax",%progbits
 6132              		.align	1
 6133              		.global	TIM_RemapConfig
 6134              		.syntax unified
 6135              		.thumb
 6136              		.thumb_func
 6138              	TIM_RemapConfig:
 6139              	.LFB210:
ARM GAS  /tmp/ccOaESyR.s 			page 162


3132:./Lib/Src/stm32f4xx_tim.c **** /**
3133:./Lib/Src/stm32f4xx_tim.c ****   * @}
3134:./Lib/Src/stm32f4xx_tim.c ****   */
3135:./Lib/Src/stm32f4xx_tim.c **** 
3136:./Lib/Src/stm32f4xx_tim.c **** /** @defgroup TIM_Group9 Specific remapping management function
3137:./Lib/Src/stm32f4xx_tim.c ****  *  @brief   Specific remapping management function
3138:./Lib/Src/stm32f4xx_tim.c ****  *
3139:./Lib/Src/stm32f4xx_tim.c **** @verbatim   
3140:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================
3141:./Lib/Src/stm32f4xx_tim.c ****               ##### Specific remapping management function #####
3142:./Lib/Src/stm32f4xx_tim.c ****  ===============================================================================  
3143:./Lib/Src/stm32f4xx_tim.c **** 
3144:./Lib/Src/stm32f4xx_tim.c **** @endverbatim
3145:./Lib/Src/stm32f4xx_tim.c ****   * @{
3146:./Lib/Src/stm32f4xx_tim.c ****   */
3147:./Lib/Src/stm32f4xx_tim.c **** 
3148:./Lib/Src/stm32f4xx_tim.c **** /**
3149:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configures the TIM2, TIM5 and TIM11 Remapping input capabilities.
3150:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 2, 5 or 11 to select the TIM peripheral.
3151:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_Remap: specifies the TIM input remapping source.
3152:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3153:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM2_TIM8_TRGO: TIM2 ITR1 input is connected to TIM8 Trigger output(default)
3154:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM2_ETH_PTP:   TIM2 ITR1 input is connected to ETH PTP trigger output.
3155:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM2_USBFS_SOF: TIM2 ITR1 input is connected to USB FS SOF. 
3156:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM2_USBHS_SOF: TIM2 ITR1 input is connected to USB HS SOF. 
3157:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM5_GPIO:      TIM5 CH4 input is connected to dedicated Timer pin(default)
3158:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM5_LSI:       TIM5 CH4 input is connected to LSI clock.
3159:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM5_LSE:       TIM5 CH4 input is connected to LSE clock.
3160:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM5_RTC:       TIM5 CH4 input is connected to RTC Output event.
3161:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM11_GPIO:     TIM11 CH4 input is connected to dedicated Timer pin(default) 
3162:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
3163:./Lib/Src/stm32f4xx_tim.c ****   *                                 (HSE divided by a programmable prescaler)  
3164:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
3165:./Lib/Src/stm32f4xx_tim.c ****   */
3166:./Lib/Src/stm32f4xx_tim.c **** void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
3167:./Lib/Src/stm32f4xx_tim.c **** {
 6140              		.loc 1 3167 1
 6141              		.cfi_startproc
 6142              		@ args = 0, pretend = 0, frame = 8
 6143              		@ frame_needed = 1, uses_anonymous_args = 0
 6144              		@ link register save eliminated.
 6145 0000 80B4     		push	{r7}
 6146              		.cfi_def_cfa_offset 4
 6147              		.cfi_offset 7, -4
 6148 0002 83B0     		sub	sp, sp, #12
 6149              		.cfi_def_cfa_offset 16
 6150 0004 00AF     		add	r7, sp, #0
 6151              		.cfi_def_cfa_register 7
 6152 0006 7860     		str	r0, [r7, #4]
 6153 0008 0B46     		mov	r3, r1
 6154 000a 7B80     		strh	r3, [r7, #2]	@ movhi
3168:./Lib/Src/stm32f4xx_tim.c ****  /* Check the parameters */
3169:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
3170:./Lib/Src/stm32f4xx_tim.c ****   assert_param(IS_TIM_REMAP(TIM_Remap));
3171:./Lib/Src/stm32f4xx_tim.c **** 
3172:./Lib/Src/stm32f4xx_tim.c ****   /* Set the Timer remapping configuration */
3173:./Lib/Src/stm32f4xx_tim.c ****   TIMx->OR =  TIM_Remap;
ARM GAS  /tmp/ccOaESyR.s 			page 163


 6155              		.loc 1 3173 12
 6156 000c 7B68     		ldr	r3, [r7, #4]
 6157 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 6158 0010 A3F85020 		strh	r2, [r3, #80]	@ movhi
3174:./Lib/Src/stm32f4xx_tim.c **** }
 6159              		.loc 1 3174 1
 6160 0014 00BF     		nop
 6161 0016 0C37     		adds	r7, r7, #12
 6162              		.cfi_def_cfa_offset 4
 6163 0018 BD46     		mov	sp, r7
 6164              		.cfi_def_cfa_register 13
 6165              		@ sp needed
 6166 001a 5DF8047B 		ldr	r7, [sp], #4
 6167              		.cfi_restore 7
 6168              		.cfi_def_cfa_offset 0
 6169 001e 7047     		bx	lr
 6170              		.cfi_endproc
 6171              	.LFE210:
 6173              		.section	.text.TI1_Config,"ax",%progbits
 6174              		.align	1
 6175              		.syntax unified
 6176              		.thumb
 6177              		.thumb_func
 6179              	TI1_Config:
 6180              	.LFB211:
3175:./Lib/Src/stm32f4xx_tim.c **** /**
3176:./Lib/Src/stm32f4xx_tim.c ****   * @}
3177:./Lib/Src/stm32f4xx_tim.c ****   */
3178:./Lib/Src/stm32f4xx_tim.c **** 
3179:./Lib/Src/stm32f4xx_tim.c **** /**
3180:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configure the TI1 as Input.
3181:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13 or 14 
3182:./Lib/Src/stm32f4xx_tim.c ****   *         to select the TIM peripheral.
3183:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3184:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3185:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3186:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3187:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge  
3188:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3189:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3190:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
3191:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
3192:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
3193:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3194:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3195:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
3196:./Lib/Src/stm32f4xx_tim.c ****   */
3197:./Lib/Src/stm32f4xx_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3198:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3199:./Lib/Src/stm32f4xx_tim.c **** {
 6181              		.loc 1 3199 1
 6182              		.cfi_startproc
 6183              		@ args = 0, pretend = 0, frame = 24
 6184              		@ frame_needed = 1, uses_anonymous_args = 0
 6185              		@ link register save eliminated.
 6186 0000 80B4     		push	{r7}
 6187              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccOaESyR.s 			page 164


 6188              		.cfi_offset 7, -4
 6189 0002 87B0     		sub	sp, sp, #28
 6190              		.cfi_def_cfa_offset 32
 6191 0004 00AF     		add	r7, sp, #0
 6192              		.cfi_def_cfa_register 7
 6193 0006 F860     		str	r0, [r7, #12]
 6194 0008 0846     		mov	r0, r1
 6195 000a 1146     		mov	r1, r2
 6196 000c 1A46     		mov	r2, r3
 6197 000e 0346     		mov	r3, r0	@ movhi
 6198 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 6199 0012 0B46     		mov	r3, r1	@ movhi
 6200 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 6201 0016 1346     		mov	r3, r2	@ movhi
 6202 0018 FB80     		strh	r3, [r7, #6]	@ movhi
3200:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
 6203              		.loc 1 3200 12
 6204 001a 0023     		movs	r3, #0
 6205 001c FB82     		strh	r3, [r7, #22]	@ movhi
 6206              		.loc 1 3200 26
 6207 001e 0023     		movs	r3, #0
 6208 0020 BB82     		strh	r3, [r7, #20]	@ movhi
3201:./Lib/Src/stm32f4xx_tim.c **** 
3202:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
3203:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 6209              		.loc 1 3203 7
 6210 0022 FB68     		ldr	r3, [r7, #12]
 6211 0024 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6212 0026 9BB2     		uxth	r3, r3
 6213              		.loc 1 3203 14
 6214 0028 23F00103 		bic	r3, r3, #1
 6215 002c 9AB2     		uxth	r2, r3
 6216 002e FB68     		ldr	r3, [r7, #12]
 6217 0030 1A84     		strh	r2, [r3, #32]	@ movhi
3204:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 6218              		.loc 1 3204 12
 6219 0032 FB68     		ldr	r3, [r7, #12]
 6220 0034 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 6221 0036 FB82     		strh	r3, [r7, #22]	@ movhi
3205:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 6222              		.loc 1 3205 11
 6223 0038 FB68     		ldr	r3, [r7, #12]
 6224 003a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6225 003c BB82     		strh	r3, [r7, #20]	@ movhi
3206:./Lib/Src/stm32f4xx_tim.c **** 
3207:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3208:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 6226              		.loc 1 3208 12
 6227 003e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6228 0040 23F0F303 		bic	r3, r3, #243
 6229 0044 FB82     		strh	r3, [r7, #22]	@ movhi
3209:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 6230              		.loc 1 3209 44
 6231 0046 FB88     		ldrh	r3, [r7, #6]	@ movhi
 6232 0048 1B01     		lsls	r3, r3, #4
 6233 004a 9AB2     		uxth	r2, r3
 6234              		.loc 1 3209 15
ARM GAS  /tmp/ccOaESyR.s 			page 165


 6235 004c 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6236 004e 1343     		orrs	r3, r3, r2
 6237 0050 9AB2     		uxth	r2, r3
 6238              		.loc 1 3209 12
 6239 0052 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6240 0054 1343     		orrs	r3, r3, r2
 6241 0056 FB82     		strh	r3, [r7, #22]	@ movhi
3210:./Lib/Src/stm32f4xx_tim.c **** 
3211:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC1E Bit */
3212:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 6242              		.loc 1 3212 11
 6243 0058 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6244 005a 23F00A03 		bic	r3, r3, #10
 6245 005e BB82     		strh	r3, [r7, #20]	@ movhi
3213:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 6246              		.loc 1 3213 11
 6247 0060 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6248 0062 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6249 0064 1343     		orrs	r3, r3, r2
 6250 0066 9BB2     		uxth	r3, r3
 6251 0068 43F00103 		orr	r3, r3, #1
 6252 006c BB82     		strh	r3, [r7, #20]	@ movhi
3214:./Lib/Src/stm32f4xx_tim.c **** 
3215:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3216:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 6253              		.loc 1 3216 15
 6254 006e FB68     		ldr	r3, [r7, #12]
 6255 0070 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6256 0072 1A83     		strh	r2, [r3, #24]	@ movhi
3217:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 6257              		.loc 1 3217 14
 6258 0074 FB68     		ldr	r3, [r7, #12]
 6259 0076 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6260 0078 1A84     		strh	r2, [r3, #32]	@ movhi
3218:./Lib/Src/stm32f4xx_tim.c **** }
 6261              		.loc 1 3218 1
 6262 007a 00BF     		nop
 6263 007c 1C37     		adds	r7, r7, #28
 6264              		.cfi_def_cfa_offset 4
 6265 007e BD46     		mov	sp, r7
 6266              		.cfi_def_cfa_register 13
 6267              		@ sp needed
 6268 0080 5DF8047B 		ldr	r7, [sp], #4
 6269              		.cfi_restore 7
 6270              		.cfi_def_cfa_offset 0
 6271 0084 7047     		bx	lr
 6272              		.cfi_endproc
 6273              	.LFE211:
 6275              		.section	.text.TI2_Config,"ax",%progbits
 6276              		.align	1
 6277              		.syntax unified
 6278              		.thumb
 6279              		.thumb_func
 6281              	TI2_Config:
 6282              	.LFB212:
3219:./Lib/Src/stm32f4xx_tim.c **** 
3220:./Lib/Src/stm32f4xx_tim.c **** /**
ARM GAS  /tmp/ccOaESyR.s 			page 166


3221:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configure the TI2 as Input.
3222:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
3223:./Lib/Src/stm32f4xx_tim.c ****   *         peripheral.
3224:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3225:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3226:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3227:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3228:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge   
3229:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3230:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3231:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
3232:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
3233:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
3234:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3235:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3236:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
3237:./Lib/Src/stm32f4xx_tim.c ****   */
3238:./Lib/Src/stm32f4xx_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3239:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3240:./Lib/Src/stm32f4xx_tim.c **** {
 6283              		.loc 1 3240 1
 6284              		.cfi_startproc
 6285              		@ args = 0, pretend = 0, frame = 24
 6286              		@ frame_needed = 1, uses_anonymous_args = 0
 6287              		@ link register save eliminated.
 6288 0000 80B4     		push	{r7}
 6289              		.cfi_def_cfa_offset 4
 6290              		.cfi_offset 7, -4
 6291 0002 87B0     		sub	sp, sp, #28
 6292              		.cfi_def_cfa_offset 32
 6293 0004 00AF     		add	r7, sp, #0
 6294              		.cfi_def_cfa_register 7
 6295 0006 F860     		str	r0, [r7, #12]
 6296 0008 0846     		mov	r0, r1
 6297 000a 1146     		mov	r1, r2
 6298 000c 1A46     		mov	r2, r3
 6299 000e 0346     		mov	r3, r0	@ movhi
 6300 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 6301 0012 0B46     		mov	r3, r1	@ movhi
 6302 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 6303 0016 1346     		mov	r3, r2	@ movhi
 6304 0018 FB80     		strh	r3, [r7, #6]	@ movhi
3241:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 6305              		.loc 1 3241 12
 6306 001a 0023     		movs	r3, #0
 6307 001c FB82     		strh	r3, [r7, #22]	@ movhi
 6308              		.loc 1 3241 26
 6309 001e 0023     		movs	r3, #0
 6310 0020 BB82     		strh	r3, [r7, #20]	@ movhi
 6311              		.loc 1 3241 39
 6312 0022 0023     		movs	r3, #0
 6313 0024 7B82     		strh	r3, [r7, #18]	@ movhi
3242:./Lib/Src/stm32f4xx_tim.c **** 
3243:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
3244:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 6314              		.loc 1 3244 7
 6315 0026 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccOaESyR.s 			page 167


 6316 0028 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6317 002a 9BB2     		uxth	r3, r3
 6318              		.loc 1 3244 14
 6319 002c 23F01003 		bic	r3, r3, #16
 6320 0030 9AB2     		uxth	r2, r3
 6321 0032 FB68     		ldr	r3, [r7, #12]
 6322 0034 1A84     		strh	r2, [r3, #32]	@ movhi
3245:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 6323              		.loc 1 3245 12
 6324 0036 FB68     		ldr	r3, [r7, #12]
 6325 0038 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 6326 003a FB82     		strh	r3, [r7, #22]	@ movhi
3246:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 6327              		.loc 1 3246 11
 6328 003c FB68     		ldr	r3, [r7, #12]
 6329 003e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6330 0040 BB82     		strh	r3, [r7, #20]	@ movhi
3247:./Lib/Src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
 6331              		.loc 1 3247 7
 6332 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6333 0044 1B01     		lsls	r3, r3, #4
 6334 0046 7B82     		strh	r3, [r7, #18]	@ movhi
3248:./Lib/Src/stm32f4xx_tim.c **** 
3249:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3250:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 6335              		.loc 1 3250 12
 6336 0048 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6337 004a 23F44073 		bic	r3, r3, #768
 6338 004e 1B05     		lsls	r3, r3, #20
 6339 0050 1B0D     		lsrs	r3, r3, #20
 6340 0052 FB82     		strh	r3, [r7, #22]	@ movhi
3251:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 6341              		.loc 1 3251 15
 6342 0054 FB88     		ldrh	r3, [r7, #6]	@ movhi
 6343 0056 1B03     		lsls	r3, r3, #12
 6344 0058 9AB2     		uxth	r2, r3
 6345              		.loc 1 3251 12
 6346 005a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6347 005c 1343     		orrs	r3, r3, r2
 6348 005e FB82     		strh	r3, [r7, #22]	@ movhi
3252:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 6349              		.loc 1 3252 15
 6350 0060 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6351 0062 1B02     		lsls	r3, r3, #8
 6352 0064 9AB2     		uxth	r2, r3
 6353              		.loc 1 3252 12
 6354 0066 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6355 0068 1343     		orrs	r3, r3, r2
 6356 006a FB82     		strh	r3, [r7, #22]	@ movhi
3253:./Lib/Src/stm32f4xx_tim.c **** 
3254:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC2E Bit */
3255:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 6357              		.loc 1 3255 11
 6358 006c BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6359 006e 23F0A003 		bic	r3, r3, #160
 6360 0072 BB82     		strh	r3, [r7, #20]	@ movhi
3256:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
ARM GAS  /tmp/ccOaESyR.s 			page 168


 6361              		.loc 1 3256 11
 6362 0074 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6363 0076 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6364 0078 1343     		orrs	r3, r3, r2
 6365 007a 9BB2     		uxth	r3, r3
 6366 007c 43F01003 		orr	r3, r3, #16
 6367 0080 BB82     		strh	r3, [r7, #20]	@ movhi
3257:./Lib/Src/stm32f4xx_tim.c **** 
3258:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
3259:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 6368              		.loc 1 3259 15
 6369 0082 FB68     		ldr	r3, [r7, #12]
 6370 0084 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6371 0086 1A83     		strh	r2, [r3, #24]	@ movhi
3260:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 6372              		.loc 1 3260 14
 6373 0088 FB68     		ldr	r3, [r7, #12]
 6374 008a BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6375 008c 1A84     		strh	r2, [r3, #32]	@ movhi
3261:./Lib/Src/stm32f4xx_tim.c **** }
 6376              		.loc 1 3261 1
 6377 008e 00BF     		nop
 6378 0090 1C37     		adds	r7, r7, #28
 6379              		.cfi_def_cfa_offset 4
 6380 0092 BD46     		mov	sp, r7
 6381              		.cfi_def_cfa_register 13
 6382              		@ sp needed
 6383 0094 5DF8047B 		ldr	r7, [sp], #4
 6384              		.cfi_restore 7
 6385              		.cfi_def_cfa_offset 0
 6386 0098 7047     		bx	lr
 6387              		.cfi_endproc
 6388              	.LFE212:
 6390              		.section	.text.TI3_Config,"ax",%progbits
 6391              		.align	1
 6392              		.syntax unified
 6393              		.thumb
 6394              		.thumb_func
 6396              	TI3_Config:
 6397              	.LFB213:
3262:./Lib/Src/stm32f4xx_tim.c **** 
3263:./Lib/Src/stm32f4xx_tim.c **** /**
3264:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configure the TI3 as Input.
3265:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
3266:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3267:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3268:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3269:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3270:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge         
3271:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3272:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3273:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
3274:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
3275:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
3276:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3277:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3278:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
ARM GAS  /tmp/ccOaESyR.s 			page 169


3279:./Lib/Src/stm32f4xx_tim.c ****   */
3280:./Lib/Src/stm32f4xx_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3281:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3282:./Lib/Src/stm32f4xx_tim.c **** {
 6398              		.loc 1 3282 1
 6399              		.cfi_startproc
 6400              		@ args = 0, pretend = 0, frame = 24
 6401              		@ frame_needed = 1, uses_anonymous_args = 0
 6402              		@ link register save eliminated.
 6403 0000 80B4     		push	{r7}
 6404              		.cfi_def_cfa_offset 4
 6405              		.cfi_offset 7, -4
 6406 0002 87B0     		sub	sp, sp, #28
 6407              		.cfi_def_cfa_offset 32
 6408 0004 00AF     		add	r7, sp, #0
 6409              		.cfi_def_cfa_register 7
 6410 0006 F860     		str	r0, [r7, #12]
 6411 0008 0846     		mov	r0, r1
 6412 000a 1146     		mov	r1, r2
 6413 000c 1A46     		mov	r2, r3
 6414 000e 0346     		mov	r3, r0	@ movhi
 6415 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 6416 0012 0B46     		mov	r3, r1	@ movhi
 6417 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 6418 0016 1346     		mov	r3, r2	@ movhi
 6419 0018 FB80     		strh	r3, [r7, #6]	@ movhi
3283:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 6420              		.loc 1 3283 12
 6421 001a 0023     		movs	r3, #0
 6422 001c FB82     		strh	r3, [r7, #22]	@ movhi
 6423              		.loc 1 3283 26
 6424 001e 0023     		movs	r3, #0
 6425 0020 BB82     		strh	r3, [r7, #20]	@ movhi
 6426              		.loc 1 3283 39
 6427 0022 0023     		movs	r3, #0
 6428 0024 7B82     		strh	r3, [r7, #18]	@ movhi
3284:./Lib/Src/stm32f4xx_tim.c **** 
3285:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
3286:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 6429              		.loc 1 3286 7
 6430 0026 FB68     		ldr	r3, [r7, #12]
 6431 0028 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6432 002a 9BB2     		uxth	r3, r3
 6433              		.loc 1 3286 14
 6434 002c 23F48073 		bic	r3, r3, #256
 6435 0030 9AB2     		uxth	r2, r3
 6436 0032 FB68     		ldr	r3, [r7, #12]
 6437 0034 1A84     		strh	r2, [r3, #32]	@ movhi
3287:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 6438              		.loc 1 3287 12
 6439 0036 FB68     		ldr	r3, [r7, #12]
 6440 0038 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 6441 003a FB82     		strh	r3, [r7, #22]	@ movhi
3288:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 6442              		.loc 1 3288 11
 6443 003c FB68     		ldr	r3, [r7, #12]
 6444 003e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 170


 6445 0040 BB82     		strh	r3, [r7, #20]	@ movhi
3289:./Lib/Src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 6446              		.loc 1 3289 7
 6447 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6448 0044 1B02     		lsls	r3, r3, #8
 6449 0046 7B82     		strh	r3, [r7, #18]	@ movhi
3290:./Lib/Src/stm32f4xx_tim.c **** 
3291:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3292:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 6450              		.loc 1 3292 12
 6451 0048 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6452 004a 23F0F303 		bic	r3, r3, #243
 6453 004e FB82     		strh	r3, [r7, #22]	@ movhi
3293:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 6454              		.loc 1 3293 44
 6455 0050 FB88     		ldrh	r3, [r7, #6]	@ movhi
 6456 0052 1B01     		lsls	r3, r3, #4
 6457 0054 9AB2     		uxth	r2, r3
 6458              		.loc 1 3293 15
 6459 0056 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6460 0058 1343     		orrs	r3, r3, r2
 6461 005a 9AB2     		uxth	r2, r3
 6462              		.loc 1 3293 12
 6463 005c FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6464 005e 1343     		orrs	r3, r3, r2
 6465 0060 FB82     		strh	r3, [r7, #22]	@ movhi
3294:./Lib/Src/stm32f4xx_tim.c **** 
3295:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC3E Bit */
3296:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 6466              		.loc 1 3296 11
 6467 0062 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6468 0064 23F42063 		bic	r3, r3, #2560
 6469 0068 BB82     		strh	r3, [r7, #20]	@ movhi
3297:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 6470              		.loc 1 3297 11
 6471 006a 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6472 006c BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6473 006e 1343     		orrs	r3, r3, r2
 6474 0070 9BB2     		uxth	r3, r3
 6475 0072 43F48073 		orr	r3, r3, #256
 6476 0076 BB82     		strh	r3, [r7, #20]	@ movhi
3298:./Lib/Src/stm32f4xx_tim.c **** 
3299:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3300:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 6477              		.loc 1 3300 15
 6478 0078 FB68     		ldr	r3, [r7, #12]
 6479 007a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6480 007c 9A83     		strh	r2, [r3, #28]	@ movhi
3301:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer;
 6481              		.loc 1 3301 14
 6482 007e FB68     		ldr	r3, [r7, #12]
 6483 0080 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6484 0082 1A84     		strh	r2, [r3, #32]	@ movhi
3302:./Lib/Src/stm32f4xx_tim.c **** }
 6485              		.loc 1 3302 1
 6486 0084 00BF     		nop
 6487 0086 1C37     		adds	r7, r7, #28
ARM GAS  /tmp/ccOaESyR.s 			page 171


 6488              		.cfi_def_cfa_offset 4
 6489 0088 BD46     		mov	sp, r7
 6490              		.cfi_def_cfa_register 13
 6491              		@ sp needed
 6492 008a 5DF8047B 		ldr	r7, [sp], #4
 6493              		.cfi_restore 7
 6494              		.cfi_def_cfa_offset 0
 6495 008e 7047     		bx	lr
 6496              		.cfi_endproc
 6497              	.LFE213:
 6499              		.section	.text.TI4_Config,"ax",%progbits
 6500              		.align	1
 6501              		.syntax unified
 6502              		.thumb
 6503              		.thumb_func
 6505              	TI4_Config:
 6506              	.LFB214:
3303:./Lib/Src/stm32f4xx_tim.c **** 
3304:./Lib/Src/stm32f4xx_tim.c **** /**
3305:./Lib/Src/stm32f4xx_tim.c ****   * @brief  Configure the TI4 as Input.
3306:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
3307:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
3308:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3309:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Rising
3310:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_Falling
3311:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICPolarity_BothEdge     
3312:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
3313:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter can be one of the following values:
3314:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
3315:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
3316:./Lib/Src/stm32f4xx_tim.c ****   *            @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
3317:./Lib/Src/stm32f4xx_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
3318:./Lib/Src/stm32f4xx_tim.c ****   *          This parameter must be a value between 0x00 and 0x0F.
3319:./Lib/Src/stm32f4xx_tim.c ****   * @retval None
3320:./Lib/Src/stm32f4xx_tim.c ****   */
3321:./Lib/Src/stm32f4xx_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
3322:./Lib/Src/stm32f4xx_tim.c ****                        uint16_t TIM_ICFilter)
3323:./Lib/Src/stm32f4xx_tim.c **** {
 6507              		.loc 1 3323 1
 6508              		.cfi_startproc
 6509              		@ args = 0, pretend = 0, frame = 24
 6510              		@ frame_needed = 1, uses_anonymous_args = 0
 6511              		@ link register save eliminated.
 6512 0000 80B4     		push	{r7}
 6513              		.cfi_def_cfa_offset 4
 6514              		.cfi_offset 7, -4
 6515 0002 87B0     		sub	sp, sp, #28
 6516              		.cfi_def_cfa_offset 32
 6517 0004 00AF     		add	r7, sp, #0
 6518              		.cfi_def_cfa_register 7
 6519 0006 F860     		str	r0, [r7, #12]
 6520 0008 0846     		mov	r0, r1
 6521 000a 1146     		mov	r1, r2
 6522 000c 1A46     		mov	r2, r3
 6523 000e 0346     		mov	r3, r0	@ movhi
 6524 0010 7B81     		strh	r3, [r7, #10]	@ movhi
 6525 0012 0B46     		mov	r3, r1	@ movhi
ARM GAS  /tmp/ccOaESyR.s 			page 172


 6526 0014 3B81     		strh	r3, [r7, #8]	@ movhi
 6527 0016 1346     		mov	r3, r2	@ movhi
 6528 0018 FB80     		strh	r3, [r7, #6]	@ movhi
3324:./Lib/Src/stm32f4xx_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 6529              		.loc 1 3324 12
 6530 001a 0023     		movs	r3, #0
 6531 001c FB82     		strh	r3, [r7, #22]	@ movhi
 6532              		.loc 1 3324 26
 6533 001e 0023     		movs	r3, #0
 6534 0020 BB82     		strh	r3, [r7, #20]	@ movhi
 6535              		.loc 1 3324 39
 6536 0022 0023     		movs	r3, #0
 6537 0024 7B82     		strh	r3, [r7, #18]	@ movhi
3325:./Lib/Src/stm32f4xx_tim.c **** 
3326:./Lib/Src/stm32f4xx_tim.c ****   /* Disable the Channel 4: Reset the CC4E Bit */
3327:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 6538              		.loc 1 3327 7
 6539 0026 FB68     		ldr	r3, [r7, #12]
 6540 0028 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6541 002a 9BB2     		uxth	r3, r3
 6542              		.loc 1 3327 14
 6543 002c 23F48053 		bic	r3, r3, #4096
 6544 0030 9AB2     		uxth	r2, r3
 6545 0032 FB68     		ldr	r3, [r7, #12]
 6546 0034 1A84     		strh	r2, [r3, #32]	@ movhi
3328:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 6547              		.loc 1 3328 12
 6548 0036 FB68     		ldr	r3, [r7, #12]
 6549 0038 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 6550 003a FB82     		strh	r3, [r7, #22]	@ movhi
3329:./Lib/Src/stm32f4xx_tim.c ****   tmpccer = TIMx->CCER;
 6551              		.loc 1 3329 11
 6552 003c FB68     		ldr	r3, [r7, #12]
 6553 003e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6554 0040 BB82     		strh	r3, [r7, #20]	@ movhi
3330:./Lib/Src/stm32f4xx_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 6555              		.loc 1 3330 7
 6556 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6557 0044 1B03     		lsls	r3, r3, #12
 6558 0046 7B82     		strh	r3, [r7, #18]	@ movhi
3331:./Lib/Src/stm32f4xx_tim.c **** 
3332:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Input and set the filter */
3333:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 6559              		.loc 1 3333 12
 6560 0048 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6561 004a 23F44073 		bic	r3, r3, #768
 6562 004e 1B05     		lsls	r3, r3, #20
 6563 0050 1B0D     		lsrs	r3, r3, #20
 6564 0052 FB82     		strh	r3, [r7, #22]	@ movhi
3334:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 6565              		.loc 1 3334 15
 6566 0054 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6567 0056 1B02     		lsls	r3, r3, #8
 6568 0058 9AB2     		uxth	r2, r3
 6569              		.loc 1 3334 12
 6570 005a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6571 005c 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccOaESyR.s 			page 173


 6572 005e FB82     		strh	r3, [r7, #22]	@ movhi
3335:./Lib/Src/stm32f4xx_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 6573              		.loc 1 3335 15
 6574 0060 FB88     		ldrh	r3, [r7, #6]	@ movhi
 6575 0062 1B03     		lsls	r3, r3, #12
 6576 0064 9AB2     		uxth	r2, r3
 6577              		.loc 1 3335 12
 6578 0066 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6579 0068 1343     		orrs	r3, r3, r2
 6580 006a FB82     		strh	r3, [r7, #22]	@ movhi
3336:./Lib/Src/stm32f4xx_tim.c **** 
3337:./Lib/Src/stm32f4xx_tim.c ****   /* Select the Polarity and set the CC4E Bit */
3338:./Lib/Src/stm32f4xx_tim.c ****   tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 6581              		.loc 1 3338 11
 6582 006c BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6583 006e 23F40053 		bic	r3, r3, #8192
 6584 0072 5B04     		lsls	r3, r3, #17
 6585 0074 5B0C     		lsrs	r3, r3, #17
 6586 0076 BB82     		strh	r3, [r7, #20]	@ movhi
3339:./Lib/Src/stm32f4xx_tim.c ****   tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 6587              		.loc 1 3339 11
 6588 0078 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6589 007a BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6590 007c 1343     		orrs	r3, r3, r2
 6591 007e 9BB2     		uxth	r3, r3
 6592 0080 43F48053 		orr	r3, r3, #4096
 6593 0084 BB82     		strh	r3, [r7, #20]	@ movhi
3340:./Lib/Src/stm32f4xx_tim.c **** 
3341:./Lib/Src/stm32f4xx_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
3342:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 6594              		.loc 1 3342 15
 6595 0086 FB68     		ldr	r3, [r7, #12]
 6596 0088 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6597 008a 9A83     		strh	r2, [r3, #28]	@ movhi
3343:./Lib/Src/stm32f4xx_tim.c ****   TIMx->CCER = tmpccer ;
 6598              		.loc 1 3343 14
 6599 008c FB68     		ldr	r3, [r7, #12]
 6600 008e BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6601 0090 1A84     		strh	r2, [r3, #32]	@ movhi
3344:./Lib/Src/stm32f4xx_tim.c **** }
 6602              		.loc 1 3344 1
 6603 0092 00BF     		nop
 6604 0094 1C37     		adds	r7, r7, #28
 6605              		.cfi_def_cfa_offset 4
 6606 0096 BD46     		mov	sp, r7
 6607              		.cfi_def_cfa_register 13
 6608              		@ sp needed
 6609 0098 5DF8047B 		ldr	r7, [sp], #4
 6610              		.cfi_restore 7
 6611              		.cfi_def_cfa_offset 0
 6612 009c 7047     		bx	lr
 6613              		.cfi_endproc
 6614              	.LFE214:
 6616              		.text
 6617              	.Letext0:
 6618              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 6619              		.file 3 "./Start/stm32f4xx.h"
ARM GAS  /tmp/ccOaESyR.s 			page 174


 6620              		.file 4 "./Lib/inc/stm32f4xx_tim.h"
 6621              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccOaESyR.s 			page 175


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_tim.c
     /tmp/ccOaESyR.s:21     .text.TIM_DeInit:0000000000000000 $t
     /tmp/ccOaESyR.s:27     .text.TIM_DeInit:0000000000000000 TIM_DeInit
     /tmp/ccOaESyR.s:274    .text.TIM_DeInit:000000000000018c $d
     /tmp/ccOaESyR.s:291    .text.TIM_TimeBaseInit:0000000000000000 $t
     /tmp/ccOaESyR.s:297    .text.TIM_TimeBaseInit:0000000000000000 TIM_TimeBaseInit
     /tmp/ccOaESyR.s:437    .text.TIM_TimeBaseInit:00000000000000bc $d
     /tmp/ccOaESyR.s:448    .text.TIM_TimeBaseStructInit:0000000000000000 $t
     /tmp/ccOaESyR.s:454    .text.TIM_TimeBaseStructInit:0000000000000000 TIM_TimeBaseStructInit
     /tmp/ccOaESyR.s:504    .text.TIM_PrescalerConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:510    .text.TIM_PrescalerConfig:0000000000000000 TIM_PrescalerConfig
     /tmp/ccOaESyR.s:552    .text.TIM_CounterModeConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:558    .text.TIM_CounterModeConfig:0000000000000000 TIM_CounterModeConfig
     /tmp/ccOaESyR.s:610    .text.TIM_SetCounter:0000000000000000 $t
     /tmp/ccOaESyR.s:616    .text.TIM_SetCounter:0000000000000000 TIM_SetCounter
     /tmp/ccOaESyR.s:651    .text.TIM_SetAutoreload:0000000000000000 $t
     /tmp/ccOaESyR.s:657    .text.TIM_SetAutoreload:0000000000000000 TIM_SetAutoreload
     /tmp/ccOaESyR.s:692    .text.TIM_GetCounter:0000000000000000 $t
     /tmp/ccOaESyR.s:698    .text.TIM_GetCounter:0000000000000000 TIM_GetCounter
     /tmp/ccOaESyR.s:731    .text.TIM_GetPrescaler:0000000000000000 $t
     /tmp/ccOaESyR.s:737    .text.TIM_GetPrescaler:0000000000000000 TIM_GetPrescaler
     /tmp/ccOaESyR.s:771    .text.TIM_UpdateDisableConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:777    .text.TIM_UpdateDisableConfig:0000000000000000 TIM_UpdateDisableConfig
     /tmp/ccOaESyR.s:835    .text.TIM_UpdateRequestConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:841    .text.TIM_UpdateRequestConfig:0000000000000000 TIM_UpdateRequestConfig
     /tmp/ccOaESyR.s:899    .text.TIM_ARRPreloadConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:905    .text.TIM_ARRPreloadConfig:0000000000000000 TIM_ARRPreloadConfig
     /tmp/ccOaESyR.s:963    .text.TIM_SelectOnePulseMode:0000000000000000 $t
     /tmp/ccOaESyR.s:969    .text.TIM_SelectOnePulseMode:0000000000000000 TIM_SelectOnePulseMode
     /tmp/ccOaESyR.s:1020   .text.TIM_SetClockDivision:0000000000000000 $t
     /tmp/ccOaESyR.s:1026   .text.TIM_SetClockDivision:0000000000000000 TIM_SetClockDivision
     /tmp/ccOaESyR.s:1077   .text.TIM_Cmd:0000000000000000 $t
     /tmp/ccOaESyR.s:1083   .text.TIM_Cmd:0000000000000000 TIM_Cmd
     /tmp/ccOaESyR.s:1141   .text.TIM_OC1Init:0000000000000000 $t
     /tmp/ccOaESyR.s:1147   .text.TIM_OC1Init:0000000000000000 TIM_OC1Init
     /tmp/ccOaESyR.s:1314   .text.TIM_OC1Init:00000000000000ec $d
     /tmp/ccOaESyR.s:1320   .text.TIM_OC2Init:0000000000000000 $t
     /tmp/ccOaESyR.s:1326   .text.TIM_OC2Init:0000000000000000 TIM_OC2Init
     /tmp/ccOaESyR.s:1514   .text.TIM_OC2Init:0000000000000108 $d
     /tmp/ccOaESyR.s:1520   .text.TIM_OC3Init:0000000000000000 $t
     /tmp/ccOaESyR.s:1526   .text.TIM_OC3Init:0000000000000000 TIM_OC3Init
     /tmp/ccOaESyR.s:1711   .text.TIM_OC3Init:0000000000000104 $d
     /tmp/ccOaESyR.s:1717   .text.TIM_OC4Init:0000000000000000 $t
     /tmp/ccOaESyR.s:1723   .text.TIM_OC4Init:0000000000000000 TIM_OC4Init
     /tmp/ccOaESyR.s:1869   .text.TIM_OC4Init:00000000000000c8 $d
     /tmp/ccOaESyR.s:1875   .text.TIM_OCStructInit:0000000000000000 $t
     /tmp/ccOaESyR.s:1881   .text.TIM_OCStructInit:0000000000000000 TIM_OCStructInit
     /tmp/ccOaESyR.s:1943   .text.TIM_SelectOCxM:0000000000000000 $t
     /tmp/ccOaESyR.s:1949   .text.TIM_SelectOCxM:0000000000000000 TIM_SelectOCxM
     /tmp/ccOaESyR.s:2089   .text.TIM_SetCompare1:0000000000000000 $t
     /tmp/ccOaESyR.s:2095   .text.TIM_SetCompare1:0000000000000000 TIM_SetCompare1
     /tmp/ccOaESyR.s:2130   .text.TIM_SetCompare2:0000000000000000 $t
     /tmp/ccOaESyR.s:2136   .text.TIM_SetCompare2:0000000000000000 TIM_SetCompare2
     /tmp/ccOaESyR.s:2171   .text.TIM_SetCompare3:0000000000000000 $t
     /tmp/ccOaESyR.s:2177   .text.TIM_SetCompare3:0000000000000000 TIM_SetCompare3
     /tmp/ccOaESyR.s:2212   .text.TIM_SetCompare4:0000000000000000 $t
ARM GAS  /tmp/ccOaESyR.s 			page 176


     /tmp/ccOaESyR.s:2218   .text.TIM_SetCompare4:0000000000000000 TIM_SetCompare4
     /tmp/ccOaESyR.s:2253   .text.TIM_ForcedOC1Config:0000000000000000 $t
     /tmp/ccOaESyR.s:2259   .text.TIM_ForcedOC1Config:0000000000000000 TIM_ForcedOC1Config
     /tmp/ccOaESyR.s:2311   .text.TIM_ForcedOC2Config:0000000000000000 $t
     /tmp/ccOaESyR.s:2317   .text.TIM_ForcedOC2Config:0000000000000000 TIM_ForcedOC2Config
     /tmp/ccOaESyR.s:2372   .text.TIM_ForcedOC3Config:0000000000000000 $t
     /tmp/ccOaESyR.s:2378   .text.TIM_ForcedOC3Config:0000000000000000 TIM_ForcedOC3Config
     /tmp/ccOaESyR.s:2430   .text.TIM_ForcedOC4Config:0000000000000000 $t
     /tmp/ccOaESyR.s:2436   .text.TIM_ForcedOC4Config:0000000000000000 TIM_ForcedOC4Config
     /tmp/ccOaESyR.s:2491   .text.TIM_OC1PreloadConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2497   .text.TIM_OC1PreloadConfig:0000000000000000 TIM_OC1PreloadConfig
     /tmp/ccOaESyR.s:2549   .text.TIM_OC2PreloadConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2555   .text.TIM_OC2PreloadConfig:0000000000000000 TIM_OC2PreloadConfig
     /tmp/ccOaESyR.s:2610   .text.TIM_OC3PreloadConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2616   .text.TIM_OC3PreloadConfig:0000000000000000 TIM_OC3PreloadConfig
     /tmp/ccOaESyR.s:2668   .text.TIM_OC4PreloadConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2674   .text.TIM_OC4PreloadConfig:0000000000000000 TIM_OC4PreloadConfig
     /tmp/ccOaESyR.s:2729   .text.TIM_OC1FastConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2735   .text.TIM_OC1FastConfig:0000000000000000 TIM_OC1FastConfig
     /tmp/ccOaESyR.s:2787   .text.TIM_OC2FastConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2793   .text.TIM_OC2FastConfig:0000000000000000 TIM_OC2FastConfig
     /tmp/ccOaESyR.s:2848   .text.TIM_OC3FastConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2854   .text.TIM_OC3FastConfig:0000000000000000 TIM_OC3FastConfig
     /tmp/ccOaESyR.s:2906   .text.TIM_OC4FastConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:2912   .text.TIM_OC4FastConfig:0000000000000000 TIM_OC4FastConfig
     /tmp/ccOaESyR.s:2967   .text.TIM_ClearOC1Ref:0000000000000000 $t
     /tmp/ccOaESyR.s:2973   .text.TIM_ClearOC1Ref:0000000000000000 TIM_ClearOC1Ref
     /tmp/ccOaESyR.s:3025   .text.TIM_ClearOC2Ref:0000000000000000 $t
     /tmp/ccOaESyR.s:3031   .text.TIM_ClearOC2Ref:0000000000000000 TIM_ClearOC2Ref
     /tmp/ccOaESyR.s:3086   .text.TIM_ClearOC3Ref:0000000000000000 $t
     /tmp/ccOaESyR.s:3092   .text.TIM_ClearOC3Ref:0000000000000000 TIM_ClearOC3Ref
     /tmp/ccOaESyR.s:3144   .text.TIM_ClearOC4Ref:0000000000000000 $t
     /tmp/ccOaESyR.s:3150   .text.TIM_ClearOC4Ref:0000000000000000 TIM_ClearOC4Ref
     /tmp/ccOaESyR.s:3205   .text.TIM_OC1PolarityConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3211   .text.TIM_OC1PolarityConfig:0000000000000000 TIM_OC1PolarityConfig
     /tmp/ccOaESyR.s:3263   .text.TIM_OC1NPolarityConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3269   .text.TIM_OC1NPolarityConfig:0000000000000000 TIM_OC1NPolarityConfig
     /tmp/ccOaESyR.s:3321   .text.TIM_OC2PolarityConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3327   .text.TIM_OC2PolarityConfig:0000000000000000 TIM_OC2PolarityConfig
     /tmp/ccOaESyR.s:3382   .text.TIM_OC2NPolarityConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3388   .text.TIM_OC2NPolarityConfig:0000000000000000 TIM_OC2NPolarityConfig
     /tmp/ccOaESyR.s:3443   .text.TIM_OC3PolarityConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3449   .text.TIM_OC3PolarityConfig:0000000000000000 TIM_OC3PolarityConfig
     /tmp/ccOaESyR.s:3504   .text.TIM_OC3NPolarityConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3510   .text.TIM_OC3NPolarityConfig:0000000000000000 TIM_OC3NPolarityConfig
     /tmp/ccOaESyR.s:3565   .text.TIM_OC4PolarityConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3571   .text.TIM_OC4PolarityConfig:0000000000000000 TIM_OC4PolarityConfig
     /tmp/ccOaESyR.s:3626   .text.TIM_CCxCmd:0000000000000000 $t
     /tmp/ccOaESyR.s:3632   .text.TIM_CCxCmd:0000000000000000 TIM_CCxCmd
     /tmp/ccOaESyR.s:3703   .text.TIM_CCxNCmd:0000000000000000 $t
     /tmp/ccOaESyR.s:3709   .text.TIM_CCxNCmd:0000000000000000 TIM_CCxNCmd
     /tmp/ccOaESyR.s:3780   .text.TIM_ICInit:0000000000000000 $t
     /tmp/ccOaESyR.s:3786   .text.TIM_ICInit:0000000000000000 TIM_ICInit
     /tmp/ccOaESyR.s:6179   .text.TI1_Config:0000000000000000 TI1_Config
     /tmp/ccOaESyR.s:4256   .text.TIM_SetIC1Prescaler:0000000000000000 TIM_SetIC1Prescaler
     /tmp/ccOaESyR.s:6281   .text.TI2_Config:0000000000000000 TI2_Config
     /tmp/ccOaESyR.s:4313   .text.TIM_SetIC2Prescaler:0000000000000000 TIM_SetIC2Prescaler
ARM GAS  /tmp/ccOaESyR.s 			page 177


     /tmp/ccOaESyR.s:6396   .text.TI3_Config:0000000000000000 TI3_Config
     /tmp/ccOaESyR.s:4373   .text.TIM_SetIC3Prescaler:0000000000000000 TIM_SetIC3Prescaler
     /tmp/ccOaESyR.s:6505   .text.TI4_Config:0000000000000000 TI4_Config
     /tmp/ccOaESyR.s:4430   .text.TIM_SetIC4Prescaler:0000000000000000 TIM_SetIC4Prescaler
     /tmp/ccOaESyR.s:3902   .text.TIM_ICStructInit:0000000000000000 $t
     /tmp/ccOaESyR.s:3908   .text.TIM_ICStructInit:0000000000000000 TIM_ICStructInit
     /tmp/ccOaESyR.s:3958   .text.TIM_PWMIConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:3964   .text.TIM_PWMIConfig:0000000000000000 TIM_PWMIConfig
     /tmp/ccOaESyR.s:4094   .text.TIM_GetCapture1:0000000000000000 $t
     /tmp/ccOaESyR.s:4100   .text.TIM_GetCapture1:0000000000000000 TIM_GetCapture1
     /tmp/ccOaESyR.s:4133   .text.TIM_GetCapture2:0000000000000000 $t
     /tmp/ccOaESyR.s:4139   .text.TIM_GetCapture2:0000000000000000 TIM_GetCapture2
     /tmp/ccOaESyR.s:4172   .text.TIM_GetCapture3:0000000000000000 $t
     /tmp/ccOaESyR.s:4178   .text.TIM_GetCapture3:0000000000000000 TIM_GetCapture3
     /tmp/ccOaESyR.s:4211   .text.TIM_GetCapture4:0000000000000000 $t
     /tmp/ccOaESyR.s:4217   .text.TIM_GetCapture4:0000000000000000 TIM_GetCapture4
     /tmp/ccOaESyR.s:4250   .text.TIM_SetIC1Prescaler:0000000000000000 $t
     /tmp/ccOaESyR.s:4307   .text.TIM_SetIC2Prescaler:0000000000000000 $t
     /tmp/ccOaESyR.s:4367   .text.TIM_SetIC3Prescaler:0000000000000000 $t
     /tmp/ccOaESyR.s:4424   .text.TIM_SetIC4Prescaler:0000000000000000 $t
     /tmp/ccOaESyR.s:4484   .text.TIM_BDTRConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:4490   .text.TIM_BDTRConfig:0000000000000000 TIM_BDTRConfig
     /tmp/ccOaESyR.s:4562   .text.TIM_BDTRStructInit:0000000000000000 $t
     /tmp/ccOaESyR.s:4568   .text.TIM_BDTRStructInit:0000000000000000 TIM_BDTRStructInit
     /tmp/ccOaESyR.s:4626   .text.TIM_CtrlPWMOutputs:0000000000000000 $t
     /tmp/ccOaESyR.s:4632   .text.TIM_CtrlPWMOutputs:0000000000000000 TIM_CtrlPWMOutputs
     /tmp/ccOaESyR.s:4691   .text.TIM_SelectCOM:0000000000000000 $t
     /tmp/ccOaESyR.s:4697   .text.TIM_SelectCOM:0000000000000000 TIM_SelectCOM
     /tmp/ccOaESyR.s:4755   .text.TIM_CCPreloadControl:0000000000000000 $t
     /tmp/ccOaESyR.s:4761   .text.TIM_CCPreloadControl:0000000000000000 TIM_CCPreloadControl
     /tmp/ccOaESyR.s:4819   .text.TIM_ITConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:4825   .text.TIM_ITConfig:0000000000000000 TIM_ITConfig
     /tmp/ccOaESyR.s:4890   .text.TIM_GenerateEvent:0000000000000000 $t
     /tmp/ccOaESyR.s:4896   .text.TIM_GenerateEvent:0000000000000000 TIM_GenerateEvent
     /tmp/ccOaESyR.s:4932   .text.TIM_GetFlagStatus:0000000000000000 $t
     /tmp/ccOaESyR.s:4938   .text.TIM_GetFlagStatus:0000000000000000 TIM_GetFlagStatus
     /tmp/ccOaESyR.s:4995   .text.TIM_ClearFlag:0000000000000000 $t
     /tmp/ccOaESyR.s:5001   .text.TIM_ClearFlag:0000000000000000 TIM_ClearFlag
     /tmp/ccOaESyR.s:5040   .text.TIM_GetITStatus:0000000000000000 $t
     /tmp/ccOaESyR.s:5046   .text.TIM_GetITStatus:0000000000000000 TIM_GetITStatus
     /tmp/ccOaESyR.s:5122   .text.TIM_ClearITPendingBit:0000000000000000 $t
     /tmp/ccOaESyR.s:5128   .text.TIM_ClearITPendingBit:0000000000000000 TIM_ClearITPendingBit
     /tmp/ccOaESyR.s:5167   .text.TIM_DMAConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:5173   .text.TIM_DMAConfig:0000000000000000 TIM_DMAConfig
     /tmp/ccOaESyR.s:5214   .text.TIM_DMACmd:0000000000000000 $t
     /tmp/ccOaESyR.s:5220   .text.TIM_DMACmd:0000000000000000 TIM_DMACmd
     /tmp/ccOaESyR.s:5285   .text.TIM_SelectCCDMA:0000000000000000 $t
     /tmp/ccOaESyR.s:5291   .text.TIM_SelectCCDMA:0000000000000000 TIM_SelectCCDMA
     /tmp/ccOaESyR.s:5349   .text.TIM_InternalClockConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:5355   .text.TIM_InternalClockConfig:0000000000000000 TIM_InternalClockConfig
     /tmp/ccOaESyR.s:5394   .text.TIM_ITRxExternalClockConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:5400   .text.TIM_ITRxExternalClockConfig:0000000000000000 TIM_ITRxExternalClockConfig
     /tmp/ccOaESyR.s:5656   .text.TIM_SelectInputTrigger:0000000000000000 TIM_SelectInputTrigger
     /tmp/ccOaESyR.s:5443   .text.TIM_TIxExternalClockConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:5449   .text.TIM_TIxExternalClockConfig:0000000000000000 TIM_TIxExternalClockConfig
     /tmp/ccOaESyR.s:5518   .text.TIM_ETRClockMode1Config:0000000000000000 $t
     /tmp/ccOaESyR.s:5524   .text.TIM_ETRClockMode1Config:0000000000000000 TIM_ETRClockMode1Config
ARM GAS  /tmp/ccOaESyR.s 			page 178


     /tmp/ccOaESyR.s:5885   .text.TIM_ETRConfig:0000000000000000 TIM_ETRConfig
     /tmp/ccOaESyR.s:5593   .text.TIM_ETRClockMode2Config:0000000000000000 $t
     /tmp/ccOaESyR.s:5599   .text.TIM_ETRClockMode2Config:0000000000000000 TIM_ETRClockMode2Config
     /tmp/ccOaESyR.s:5650   .text.TIM_SelectInputTrigger:0000000000000000 $t
     /tmp/ccOaESyR.s:5708   .text.TIM_SelectOutputTrigger:0000000000000000 $t
     /tmp/ccOaESyR.s:5714   .text.TIM_SelectOutputTrigger:0000000000000000 TIM_SelectOutputTrigger
     /tmp/ccOaESyR.s:5765   .text.TIM_SelectSlaveMode:0000000000000000 $t
     /tmp/ccOaESyR.s:5771   .text.TIM_SelectSlaveMode:0000000000000000 TIM_SelectSlaveMode
     /tmp/ccOaESyR.s:5822   .text.TIM_SelectMasterSlaveMode:0000000000000000 $t
     /tmp/ccOaESyR.s:5828   .text.TIM_SelectMasterSlaveMode:0000000000000000 TIM_SelectMasterSlaveMode
     /tmp/ccOaESyR.s:5879   .text.TIM_ETRConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:5955   .text.TIM_EncoderInterfaceConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:5961   .text.TIM_EncoderInterfaceConfig:0000000000000000 TIM_EncoderInterfaceConfig
     /tmp/ccOaESyR.s:6068   .text.TIM_SelectHallSensor:0000000000000000 $t
     /tmp/ccOaESyR.s:6074   .text.TIM_SelectHallSensor:0000000000000000 TIM_SelectHallSensor
     /tmp/ccOaESyR.s:6132   .text.TIM_RemapConfig:0000000000000000 $t
     /tmp/ccOaESyR.s:6138   .text.TIM_RemapConfig:0000000000000000 TIM_RemapConfig
     /tmp/ccOaESyR.s:6174   .text.TI1_Config:0000000000000000 $t
     /tmp/ccOaESyR.s:6276   .text.TI2_Config:0000000000000000 $t
     /tmp/ccOaESyR.s:6391   .text.TI3_Config:0000000000000000 $t
     /tmp/ccOaESyR.s:6500   .text.TI4_Config:0000000000000000 $t

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
