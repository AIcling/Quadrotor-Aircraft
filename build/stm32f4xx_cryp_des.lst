ARM GAS  /tmp/ccEvk2xg.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_cryp_des.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_cryp_des.c"
  20              		.section	.text.CRYP_DES_ECB,"ax",%progbits
  21              		.align	1
  22              		.global	CRYP_DES_ECB
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	CRYP_DES_ECB:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_cryp_des.c **** /**
   2:./Lib/Src/stm32f4xx_cryp_des.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_cryp_des.c ****   * @file    stm32f4xx_cryp_des.c
   4:./Lib/Src/stm32f4xx_cryp_des.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_cryp_des.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_cryp_des.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_cryp_des.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:./Lib/Src/stm32f4xx_cryp_des.c ****   *          input message using DES in ECB/CBC modes.
   9:./Lib/Src/stm32f4xx_cryp_des.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:./Lib/Src/stm32f4xx_cryp_des.c ****   *          peripheral.
  11:./Lib/Src/stm32f4xx_cryp_des.c ****   *
  12:./Lib/Src/stm32f4xx_cryp_des.c **** @verbatim
  13:./Lib/Src/stm32f4xx_cryp_des.c ****   
  14:./Lib/Src/stm32f4xx_cryp_des.c ****  ===================================================================
  15:./Lib/Src/stm32f4xx_cryp_des.c ****                   ##### How to use this driver #####
  16:./Lib/Src/stm32f4xx_cryp_des.c ****  ===================================================================
  17:./Lib/Src/stm32f4xx_cryp_des.c ****  [..] 
  18:./Lib/Src/stm32f4xx_cryp_des.c ****    (#) Enable The CRYP controller clock using 
  19:./Lib/Src/stm32f4xx_cryp_des.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:./Lib/Src/stm32f4xx_cryp_des.c ****   
  21:./Lib/Src/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in ECB Mode using CRYP_DES_ECB() function.
  22:./Lib/Src/stm32f4xx_cryp_des.c ****   
  23:./Lib/Src/stm32f4xx_cryp_des.c ****    (#) Encrypt and decrypt using DES in CBC Mode using CRYP_DES_CBC() function.
  24:./Lib/Src/stm32f4xx_cryp_des.c ****   
  25:./Lib/Src/stm32f4xx_cryp_des.c **** @endverbatim
  26:./Lib/Src/stm32f4xx_cryp_des.c ****   *
  27:./Lib/Src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  28:./Lib/Src/stm32f4xx_cryp_des.c ****   * @attention
  29:./Lib/Src/stm32f4xx_cryp_des.c ****   *
  30:./Lib/Src/stm32f4xx_cryp_des.c ****   * Copyright (c) 2016 STMicroelectronics.
ARM GAS  /tmp/ccEvk2xg.s 			page 2


  31:./Lib/Src/stm32f4xx_cryp_des.c ****   * All rights reserved.
  32:./Lib/Src/stm32f4xx_cryp_des.c ****   *
  33:./Lib/Src/stm32f4xx_cryp_des.c ****   * This software is licensed under terms that can be found in the LICENSE file
  34:./Lib/Src/stm32f4xx_cryp_des.c ****   * in the root directory of this software component.
  35:./Lib/Src/stm32f4xx_cryp_des.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  36:./Lib/Src/stm32f4xx_cryp_des.c ****   *
  37:./Lib/Src/stm32f4xx_cryp_des.c ****   ******************************************************************************
  38:./Lib/Src/stm32f4xx_cryp_des.c ****   */
  39:./Lib/Src/stm32f4xx_cryp_des.c **** 
  40:./Lib/Src/stm32f4xx_cryp_des.c **** /* Includes ------------------------------------------------------------------*/
  41:./Lib/Src/stm32f4xx_cryp_des.c **** #include "stm32f4xx_cryp.h"
  42:./Lib/Src/stm32f4xx_cryp_des.c **** 
  43:./Lib/Src/stm32f4xx_cryp_des.c **** 
  44:./Lib/Src/stm32f4xx_cryp_des.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  45:./Lib/Src/stm32f4xx_cryp_des.c ****   * @{
  46:./Lib/Src/stm32f4xx_cryp_des.c ****   */
  47:./Lib/Src/stm32f4xx_cryp_des.c **** 
  48:./Lib/Src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP 
  49:./Lib/Src/stm32f4xx_cryp_des.c ****   * @brief CRYP driver modules
  50:./Lib/Src/stm32f4xx_cryp_des.c ****   * @{
  51:./Lib/Src/stm32f4xx_cryp_des.c ****   */
  52:./Lib/Src/stm32f4xx_cryp_des.c **** 
  53:./Lib/Src/stm32f4xx_cryp_des.c **** /* Private typedef -----------------------------------------------------------*/
  54:./Lib/Src/stm32f4xx_cryp_des.c **** /* Private define ------------------------------------------------------------*/
  55:./Lib/Src/stm32f4xx_cryp_des.c **** #define DESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  56:./Lib/Src/stm32f4xx_cryp_des.c **** 
  57:./Lib/Src/stm32f4xx_cryp_des.c **** /* Private macro -------------------------------------------------------------*/
  58:./Lib/Src/stm32f4xx_cryp_des.c **** /* Private variables ---------------------------------------------------------*/
  59:./Lib/Src/stm32f4xx_cryp_des.c **** /* Private function prototypes -----------------------------------------------*/
  60:./Lib/Src/stm32f4xx_cryp_des.c **** /* Private functions ---------------------------------------------------------*/
  61:./Lib/Src/stm32f4xx_cryp_des.c **** 
  62:./Lib/Src/stm32f4xx_cryp_des.c **** 
  63:./Lib/Src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Private_Functions
  64:./Lib/Src/stm32f4xx_cryp_des.c ****   * @{
  65:./Lib/Src/stm32f4xx_cryp_des.c ****   */ 
  66:./Lib/Src/stm32f4xx_cryp_des.c **** 
  67:./Lib/Src/stm32f4xx_cryp_des.c **** /** @defgroup CRYP_Group8 High Level DES functions
  68:./Lib/Src/stm32f4xx_cryp_des.c ****  *  @brief   High Level DES functions 
  69:./Lib/Src/stm32f4xx_cryp_des.c ****  *
  70:./Lib/Src/stm32f4xx_cryp_des.c **** @verbatim   
  71:./Lib/Src/stm32f4xx_cryp_des.c ****  ===============================================================================
  72:./Lib/Src/stm32f4xx_cryp_des.c ****                        ##### High Level DES functions #####
  73:./Lib/Src/stm32f4xx_cryp_des.c ****  ===============================================================================
  74:./Lib/Src/stm32f4xx_cryp_des.c **** @endverbatim
  75:./Lib/Src/stm32f4xx_cryp_des.c ****   * @{
  76:./Lib/Src/stm32f4xx_cryp_des.c ****   */
  77:./Lib/Src/stm32f4xx_cryp_des.c **** 
  78:./Lib/Src/stm32f4xx_cryp_des.c **** /**
  79:./Lib/Src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in ECB Mode
  80:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
  81:./Lib/Src/stm32f4xx_cryp_des.c ****   *           This parameter can be one of the following values:
  82:./Lib/Src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
  83:./Lib/Src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
  84:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
  85:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  86:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
  87:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
ARM GAS  /tmp/ccEvk2xg.s 			page 3


  88:./Lib/Src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
  89:./Lib/Src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
  90:./Lib/Src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
  91:./Lib/Src/stm32f4xx_cryp_des.c ****   */
  92:./Lib/Src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
  93:./Lib/Src/stm32f4xx_cryp_des.c ****                          uint32_t Ilength, uint8_t *Output)
  94:./Lib/Src/stm32f4xx_cryp_des.c **** {
  29              		.loc 1 94 1
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 0, frame = 104
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 90B5     		push	{r4, r7, lr}
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 9BB0     		sub	sp, sp, #108
  39              		.cfi_def_cfa_offset 120
  40 0004 00AF     		add	r7, sp, #0
  41              		.cfi_def_cfa_register 7
  42 0006 B960     		str	r1, [r7, #8]
  43 0008 7A60     		str	r2, [r7, #4]
  44 000a 3B60     		str	r3, [r7]
  45 000c 0346     		mov	r3, r0
  46 000e FB73     		strb	r3, [r7, #15]
  95:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
  96:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  97:./Lib/Src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
  47              		.loc 1 97 17
  48 0010 0023     		movs	r3, #0
  49 0012 7B61     		str	r3, [r7, #20]
  98:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
  50              		.loc 1 98 12
  51 0014 0023     		movs	r3, #0
  52 0016 7B65     		str	r3, [r7, #84]
  99:./Lib/Src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
  53              		.loc 1 99 15
  54 0018 0123     		movs	r3, #1
  55 001a 87F86730 		strb	r3, [r7, #103]
 100:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
  56              		.loc 1 100 12
  57 001e BB68     		ldr	r3, [r7, #8]
  58 0020 3B65     		str	r3, [r7, #80]
 101:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
  59              		.loc 1 101 12
  60 0022 7B68     		ldr	r3, [r7, #4]
  61 0024 3B66     		str	r3, [r7, #96]
 102:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
  62              		.loc 1 102 12
  63 0026 BB6F     		ldr	r3, [r7, #120]
  64 0028 FB65     		str	r3, [r7, #92]
 103:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
  65              		.loc 1 103 12
  66 002a 0023     		movs	r3, #0
  67 002c BB65     		str	r3, [r7, #88]
 104:./Lib/Src/stm32f4xx_cryp_des.c **** 
 105:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
ARM GAS  /tmp/ccEvk2xg.s 			page 4


 106:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
  68              		.loc 1 106 3
  69 002e 07F11803 		add	r3, r7, #24
  70 0032 1846     		mov	r0, r3
  71 0034 FFF7FEFF 		bl	CRYP_KeyStructInit
 107:./Lib/Src/stm32f4xx_cryp_des.c **** 
 108:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 109:./Lib/Src/stm32f4xx_cryp_des.c ****   if( Mode == MODE_ENCRYPT ) /* DES encryption */
  72              		.loc 1 109 5
  73 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  74 003a 012B     		cmp	r3, #1
  75 003c 02D1     		bne	.L2
 110:./Lib/Src/stm32f4xx_cryp_des.c ****   {
 111:./Lib/Src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
  76              		.loc 1 111 43
  77 003e 0023     		movs	r3, #0
  78 0040 BB63     		str	r3, [r7, #56]
  79 0042 01E0     		b	.L3
  80              	.L2:
 112:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 113:./Lib/Src/stm32f4xx_cryp_des.c ****   else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
 114:./Lib/Src/stm32f4xx_cryp_des.c ****   {      
 115:./Lib/Src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
  81              		.loc 1 115 43
  82 0044 0423     		movs	r3, #4
  83 0046 BB63     		str	r3, [r7, #56]
  84              	.L3:
 116:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 117:./Lib/Src/stm32f4xx_cryp_des.c **** 
 118:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
  85              		.loc 1 118 40
  86 0048 1023     		movs	r3, #16
  87 004a FB63     		str	r3, [r7, #60]
 119:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  88              		.loc 1 119 40
  89 004c 8023     		movs	r3, #128
  90 004e 3B64     		str	r3, [r7, #64]
 120:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
  91              		.loc 1 120 3
  92 0050 07F13803 		add	r3, r7, #56
  93 0054 1846     		mov	r0, r3
  94 0056 FFF7FEFF 		bl	CRYP_Init
 121:./Lib/Src/stm32f4xx_cryp_des.c **** 
 122:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 123:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  95              		.loc 1 123 52
  96 005a 3B6D     		ldr	r3, [r7, #80]
  97              		.loc 1 123 45
  98 005c 1B68     		ldr	r3, [r3]
  99 005e BB64     		str	r3, [r7, #72]
 100              	.LBB14:
 101              	.LBB15:
 102              		.file 2 "./Start/core_cmInstr.h"
   1:./Start/core_cmInstr.h **** /**************************************************************************//**
   2:./Start/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./Start/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./Start/core_cmInstr.h ****  * @version  V4.10
ARM GAS  /tmp/ccEvk2xg.s 			page 5


   5:./Start/core_cmInstr.h ****  * @date     18. March 2015
   6:./Start/core_cmInstr.h ****  *
   7:./Start/core_cmInstr.h ****  * @note
   8:./Start/core_cmInstr.h ****  *
   9:./Start/core_cmInstr.h ****  ******************************************************************************/
  10:./Start/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./Start/core_cmInstr.h **** 
  12:./Start/core_cmInstr.h ****    All rights reserved.
  13:./Start/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./Start/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./Start/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./Start/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./Start/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./Start/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./Start/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./Start/core_cmInstr.h ****      specific prior written permission.
  23:./Start/core_cmInstr.h ****    *
  24:./Start/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./Start/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./Start/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./Start/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./Start/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./Start/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./Start/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./Start/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./Start/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./Start/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./Start/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./Start/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./Start/core_cmInstr.h **** 
  37:./Start/core_cmInstr.h **** 
  38:./Start/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./Start/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./Start/core_cmInstr.h **** 
  41:./Start/core_cmInstr.h **** 
  42:./Start/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./Start/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./Start/core_cmInstr.h ****   Access to dedicated instructions
  45:./Start/core_cmInstr.h ****   @{
  46:./Start/core_cmInstr.h **** */
  47:./Start/core_cmInstr.h **** 
  48:./Start/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./Start/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./Start/core_cmInstr.h **** 
  51:./Start/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./Start/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./Start/core_cmInstr.h **** #endif
  54:./Start/core_cmInstr.h **** 
  55:./Start/core_cmInstr.h **** 
  56:./Start/core_cmInstr.h **** /** \brief  No Operation
  57:./Start/core_cmInstr.h **** 
  58:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./Start/core_cmInstr.h ****  */
  60:./Start/core_cmInstr.h **** #define __NOP                             __nop
  61:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccEvk2xg.s 			page 6


  62:./Start/core_cmInstr.h **** 
  63:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./Start/core_cmInstr.h **** 
  65:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./Start/core_cmInstr.h ****     until one of a number of events occurs.
  67:./Start/core_cmInstr.h ****  */
  68:./Start/core_cmInstr.h **** #define __WFI                             __wfi
  69:./Start/core_cmInstr.h **** 
  70:./Start/core_cmInstr.h **** 
  71:./Start/core_cmInstr.h **** /** \brief  Wait For Event
  72:./Start/core_cmInstr.h **** 
  73:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./Start/core_cmInstr.h ****  */
  76:./Start/core_cmInstr.h **** #define __WFE                             __wfe
  77:./Start/core_cmInstr.h **** 
  78:./Start/core_cmInstr.h **** 
  79:./Start/core_cmInstr.h **** /** \brief  Send Event
  80:./Start/core_cmInstr.h **** 
  81:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./Start/core_cmInstr.h ****  */
  83:./Start/core_cmInstr.h **** #define __SEV                             __sev
  84:./Start/core_cmInstr.h **** 
  85:./Start/core_cmInstr.h **** 
  86:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./Start/core_cmInstr.h **** 
  88:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./Start/core_cmInstr.h ****  */
  92:./Start/core_cmInstr.h **** #define __ISB() do {\
  93:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  94:./Start/core_cmInstr.h ****                    __isb(0xF);\
  95:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  96:./Start/core_cmInstr.h ****                 } while (0)
  97:./Start/core_cmInstr.h **** 
  98:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:./Start/core_cmInstr.h **** 
 100:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./Start/core_cmInstr.h ****  */
 103:./Start/core_cmInstr.h **** #define __DSB() do {\
 104:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 105:./Start/core_cmInstr.h ****                    __dsb(0xF);\
 106:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 107:./Start/core_cmInstr.h ****                 } while (0)
 108:./Start/core_cmInstr.h **** 
 109:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./Start/core_cmInstr.h **** 
 111:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./Start/core_cmInstr.h ****  */
 114:./Start/core_cmInstr.h **** #define __DMB() do {\
 115:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 116:./Start/core_cmInstr.h ****                    __dmb(0xF);\
 117:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 118:./Start/core_cmInstr.h ****                 } while (0)
ARM GAS  /tmp/ccEvk2xg.s 			page 7


 119:./Start/core_cmInstr.h **** 
 120:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./Start/core_cmInstr.h **** 
 122:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./Start/core_cmInstr.h **** 
 124:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./Start/core_cmInstr.h ****     \return               Reversed value
 126:./Start/core_cmInstr.h ****  */
 127:./Start/core_cmInstr.h **** #define __REV                             __rev
 128:./Start/core_cmInstr.h **** 
 129:./Start/core_cmInstr.h **** 
 130:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./Start/core_cmInstr.h **** 
 132:./Start/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./Start/core_cmInstr.h **** 
 134:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./Start/core_cmInstr.h ****     \return               Reversed value
 136:./Start/core_cmInstr.h ****  */
 137:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./Start/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./Start/core_cmInstr.h **** {
 140:./Start/core_cmInstr.h ****   rev16 r0, r0
 141:./Start/core_cmInstr.h ****   bx lr
 142:./Start/core_cmInstr.h **** }
 143:./Start/core_cmInstr.h **** #endif
 144:./Start/core_cmInstr.h **** 
 145:./Start/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./Start/core_cmInstr.h **** 
 147:./Start/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./Start/core_cmInstr.h **** 
 149:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./Start/core_cmInstr.h ****     \return               Reversed value
 151:./Start/core_cmInstr.h ****  */
 152:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:./Start/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./Start/core_cmInstr.h **** {
 155:./Start/core_cmInstr.h ****   revsh r0, r0
 156:./Start/core_cmInstr.h ****   bx lr
 157:./Start/core_cmInstr.h **** }
 158:./Start/core_cmInstr.h **** #endif
 159:./Start/core_cmInstr.h **** 
 160:./Start/core_cmInstr.h **** 
 161:./Start/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./Start/core_cmInstr.h **** 
 163:./Start/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./Start/core_cmInstr.h **** 
 165:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./Start/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./Start/core_cmInstr.h ****     \return               Rotated value
 168:./Start/core_cmInstr.h ****  */
 169:./Start/core_cmInstr.h **** #define __ROR                             __ror
 170:./Start/core_cmInstr.h **** 
 171:./Start/core_cmInstr.h **** 
 172:./Start/core_cmInstr.h **** /** \brief  Breakpoint
 173:./Start/core_cmInstr.h **** 
 174:./Start/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:./Start/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
ARM GAS  /tmp/ccEvk2xg.s 			page 8


 176:./Start/core_cmInstr.h **** 
 177:./Start/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./Start/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./Start/core_cmInstr.h ****  */
 180:./Start/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./Start/core_cmInstr.h **** 
 182:./Start/core_cmInstr.h **** 
 183:./Start/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./Start/core_cmInstr.h **** 
 185:./Start/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./Start/core_cmInstr.h **** 
 187:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./Start/core_cmInstr.h ****     \return               Reversed value
 189:./Start/core_cmInstr.h ****  */
 190:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./Start/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./Start/core_cmInstr.h **** #else
 193:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./Start/core_cmInstr.h **** {
 195:./Start/core_cmInstr.h ****   uint32_t result;
 196:./Start/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./Start/core_cmInstr.h **** 
 198:./Start/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./Start/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./Start/core_cmInstr.h ****   {
 201:./Start/core_cmInstr.h ****     result <<= 1;
 202:./Start/core_cmInstr.h ****     result |= value & 1;
 203:./Start/core_cmInstr.h ****     s--;
 204:./Start/core_cmInstr.h ****   }
 205:./Start/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./Start/core_cmInstr.h ****   return(result);
 207:./Start/core_cmInstr.h **** }
 208:./Start/core_cmInstr.h **** #endif
 209:./Start/core_cmInstr.h **** 
 210:./Start/core_cmInstr.h **** 
 211:./Start/core_cmInstr.h **** /** \brief  Count leading zeros
 212:./Start/core_cmInstr.h **** 
 213:./Start/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./Start/core_cmInstr.h **** 
 215:./Start/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./Start/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./Start/core_cmInstr.h ****  */
 218:./Start/core_cmInstr.h **** #define __CLZ                             __clz
 219:./Start/core_cmInstr.h **** 
 220:./Start/core_cmInstr.h **** 
 221:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./Start/core_cmInstr.h **** 
 223:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./Start/core_cmInstr.h **** 
 225:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./Start/core_cmInstr.h **** 
 227:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:./Start/core_cmInstr.h ****  */
 230:./Start/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./Start/core_cmInstr.h **** 
 232:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccEvk2xg.s 			page 9


 233:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./Start/core_cmInstr.h **** 
 235:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./Start/core_cmInstr.h **** 
 237:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./Start/core_cmInstr.h ****  */
 240:./Start/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./Start/core_cmInstr.h **** 
 242:./Start/core_cmInstr.h **** 
 243:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./Start/core_cmInstr.h **** 
 245:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./Start/core_cmInstr.h **** 
 247:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./Start/core_cmInstr.h ****  */
 250:./Start/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./Start/core_cmInstr.h **** 
 252:./Start/core_cmInstr.h **** 
 253:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./Start/core_cmInstr.h **** 
 255:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./Start/core_cmInstr.h **** 
 257:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 260:./Start/core_cmInstr.h ****     \return          1  Function failed
 261:./Start/core_cmInstr.h ****  */
 262:./Start/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./Start/core_cmInstr.h **** 
 264:./Start/core_cmInstr.h **** 
 265:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:./Start/core_cmInstr.h **** 
 267:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./Start/core_cmInstr.h **** 
 269:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 270:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 272:./Start/core_cmInstr.h ****     \return          1  Function failed
 273:./Start/core_cmInstr.h ****  */
 274:./Start/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./Start/core_cmInstr.h **** 
 276:./Start/core_cmInstr.h **** 
 277:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./Start/core_cmInstr.h **** 
 279:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./Start/core_cmInstr.h **** 
 281:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 284:./Start/core_cmInstr.h ****     \return          1  Function failed
 285:./Start/core_cmInstr.h ****  */
 286:./Start/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:./Start/core_cmInstr.h **** 
 288:./Start/core_cmInstr.h **** 
 289:./Start/core_cmInstr.h **** /** \brief  Remove the exclusive lock
ARM GAS  /tmp/ccEvk2xg.s 			page 10


 290:./Start/core_cmInstr.h **** 
 291:./Start/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./Start/core_cmInstr.h **** 
 293:./Start/core_cmInstr.h ****  */
 294:./Start/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./Start/core_cmInstr.h **** 
 296:./Start/core_cmInstr.h **** 
 297:./Start/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./Start/core_cmInstr.h **** 
 299:./Start/core_cmInstr.h ****     This function saturates a signed value.
 300:./Start/core_cmInstr.h **** 
 301:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./Start/core_cmInstr.h ****     \return             Saturated value
 304:./Start/core_cmInstr.h ****  */
 305:./Start/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./Start/core_cmInstr.h **** 
 307:./Start/core_cmInstr.h **** 
 308:./Start/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./Start/core_cmInstr.h **** 
 310:./Start/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./Start/core_cmInstr.h **** 
 312:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./Start/core_cmInstr.h ****     \return             Saturated value
 315:./Start/core_cmInstr.h ****  */
 316:./Start/core_cmInstr.h **** #define __USAT                            __usat
 317:./Start/core_cmInstr.h **** 
 318:./Start/core_cmInstr.h **** 
 319:./Start/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./Start/core_cmInstr.h **** 
 321:./Start/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./Start/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:./Start/core_cmInstr.h **** 
 324:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./Start/core_cmInstr.h ****     \return               Rotated value
 326:./Start/core_cmInstr.h ****  */
 327:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./Start/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./Start/core_cmInstr.h **** {
 330:./Start/core_cmInstr.h ****   rrx r0, r0
 331:./Start/core_cmInstr.h ****   bx lr
 332:./Start/core_cmInstr.h **** }
 333:./Start/core_cmInstr.h **** #endif
 334:./Start/core_cmInstr.h **** 
 335:./Start/core_cmInstr.h **** 
 336:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./Start/core_cmInstr.h **** 
 338:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./Start/core_cmInstr.h **** 
 340:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./Start/core_cmInstr.h ****  */
 343:./Start/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:./Start/core_cmInstr.h **** 
 345:./Start/core_cmInstr.h **** 
 346:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
ARM GAS  /tmp/ccEvk2xg.s 			page 11


 347:./Start/core_cmInstr.h **** 
 348:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./Start/core_cmInstr.h **** 
 350:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./Start/core_cmInstr.h ****  */
 353:./Start/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./Start/core_cmInstr.h **** 
 355:./Start/core_cmInstr.h **** 
 356:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./Start/core_cmInstr.h **** 
 358:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./Start/core_cmInstr.h **** 
 360:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./Start/core_cmInstr.h ****  */
 363:./Start/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./Start/core_cmInstr.h **** 
 365:./Start/core_cmInstr.h **** 
 366:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./Start/core_cmInstr.h **** 
 368:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./Start/core_cmInstr.h **** 
 370:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./Start/core_cmInstr.h ****  */
 373:./Start/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./Start/core_cmInstr.h **** 
 375:./Start/core_cmInstr.h **** 
 376:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./Start/core_cmInstr.h **** 
 378:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./Start/core_cmInstr.h **** 
 380:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 381:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./Start/core_cmInstr.h ****  */
 383:./Start/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:./Start/core_cmInstr.h **** 
 385:./Start/core_cmInstr.h **** 
 386:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./Start/core_cmInstr.h **** 
 388:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./Start/core_cmInstr.h **** 
 390:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./Start/core_cmInstr.h ****  */
 393:./Start/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./Start/core_cmInstr.h **** 
 395:./Start/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./Start/core_cmInstr.h **** 
 397:./Start/core_cmInstr.h **** 
 398:./Start/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./Start/core_cmInstr.h **** /* GNU gcc specific functions */
 400:./Start/core_cmInstr.h **** 
 401:./Start/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./Start/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:./Start/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
ARM GAS  /tmp/ccEvk2xg.s 			page 12


 404:./Start/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./Start/core_cmInstr.h **** #else
 408:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./Start/core_cmInstr.h **** #endif
 411:./Start/core_cmInstr.h **** 
 412:./Start/core_cmInstr.h **** /** \brief  No Operation
 413:./Start/core_cmInstr.h **** 
 414:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./Start/core_cmInstr.h ****  */
 416:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./Start/core_cmInstr.h **** {
 418:./Start/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./Start/core_cmInstr.h **** }
 420:./Start/core_cmInstr.h **** 
 421:./Start/core_cmInstr.h **** 
 422:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./Start/core_cmInstr.h **** 
 424:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./Start/core_cmInstr.h ****     until one of a number of events occurs.
 426:./Start/core_cmInstr.h ****  */
 427:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./Start/core_cmInstr.h **** {
 429:./Start/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./Start/core_cmInstr.h **** }
 431:./Start/core_cmInstr.h **** 
 432:./Start/core_cmInstr.h **** 
 433:./Start/core_cmInstr.h **** /** \brief  Wait For Event
 434:./Start/core_cmInstr.h **** 
 435:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:./Start/core_cmInstr.h ****  */
 438:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./Start/core_cmInstr.h **** {
 440:./Start/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:./Start/core_cmInstr.h **** }
 442:./Start/core_cmInstr.h **** 
 443:./Start/core_cmInstr.h **** 
 444:./Start/core_cmInstr.h **** /** \brief  Send Event
 445:./Start/core_cmInstr.h **** 
 446:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./Start/core_cmInstr.h ****  */
 448:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./Start/core_cmInstr.h **** {
 450:./Start/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./Start/core_cmInstr.h **** }
 452:./Start/core_cmInstr.h **** 
 453:./Start/core_cmInstr.h **** 
 454:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./Start/core_cmInstr.h **** 
 456:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./Start/core_cmInstr.h ****  */
 460:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
ARM GAS  /tmp/ccEvk2xg.s 			page 13


 461:./Start/core_cmInstr.h **** {
 462:./Start/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./Start/core_cmInstr.h **** }
 464:./Start/core_cmInstr.h **** 
 465:./Start/core_cmInstr.h **** 
 466:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./Start/core_cmInstr.h **** 
 468:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./Start/core_cmInstr.h ****  */
 471:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./Start/core_cmInstr.h **** {
 473:./Start/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./Start/core_cmInstr.h **** }
 475:./Start/core_cmInstr.h **** 
 476:./Start/core_cmInstr.h **** 
 477:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./Start/core_cmInstr.h **** 
 479:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./Start/core_cmInstr.h ****  */
 482:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./Start/core_cmInstr.h **** {
 484:./Start/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./Start/core_cmInstr.h **** }
 486:./Start/core_cmInstr.h **** 
 487:./Start/core_cmInstr.h **** 
 488:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./Start/core_cmInstr.h **** 
 490:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./Start/core_cmInstr.h **** 
 492:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./Start/core_cmInstr.h ****     \return               Reversed value
 494:./Start/core_cmInstr.h ****  */
 495:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./Start/core_cmInstr.h **** {
 497:./Start/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:./Start/core_cmInstr.h ****   return __builtin_bswap32(value);
 103              		.loc 2 498 10
 104 0060 BB6C     		ldr	r3, [r7, #72]
 105 0062 1BBA     		rev	r3, r3
 106              	.LBE15:
 107              	.LBE14:
 108              		.loc 1 123 43
 109 0064 3B62     		str	r3, [r7, #32]
 124:./Lib/Src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 110              		.loc 1 124 10
 111 0066 3B6D     		ldr	r3, [r7, #80]
 112 0068 0433     		adds	r3, r3, #4
 113 006a 3B65     		str	r3, [r7, #80]
 125:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 114              		.loc 1 125 52
 115 006c 3B6D     		ldr	r3, [r7, #80]
 116              		.loc 1 125 45
 117 006e 1B68     		ldr	r3, [r3]
 118 0070 FB64     		str	r3, [r7, #76]
 119              	.LBB16:
ARM GAS  /tmp/ccEvk2xg.s 			page 14


 120              	.LBB17:
 121              		.loc 2 498 10
 122 0072 FB6C     		ldr	r3, [r7, #76]
 123 0074 1BBA     		rev	r3, r3
 124              	.LBE17:
 125              	.LBE16:
 126              		.loc 1 125 43
 127 0076 7B62     		str	r3, [r7, #36]
 126:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 128              		.loc 1 126 3
 129 0078 07F11803 		add	r3, r7, #24
 130 007c 1846     		mov	r0, r3
 131 007e FFF7FEFF 		bl	CRYP_KeyInit
 127:./Lib/Src/stm32f4xx_cryp_des.c **** 
 128:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 129:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 132              		.loc 1 129 3
 133 0082 FFF7FEFF 		bl	CRYP_FIFOFlush
 130:./Lib/Src/stm32f4xx_cryp_des.c **** 
 131:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 132:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 134              		.loc 1 132 3
 135 0086 0120     		movs	r0, #1
 136 0088 FFF7FEFF 		bl	CRYP_Cmd
 133:./Lib/Src/stm32f4xx_cryp_des.c **** 
 134:./Lib/Src/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 137              		.loc 1 134 6
 138 008c FFF7FEFF 		bl	CRYP_GetCmdStatus
 139 0090 0346     		mov	r3, r0
 140              		.loc 1 134 5
 141 0092 002B     		cmp	r3, #0
 142 0094 03D1     		bne	.L6
 135:./Lib/Src/stm32f4xx_cryp_des.c ****   {
 136:./Lib/Src/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 137:./Lib/Src/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 138:./Lib/Src/stm32f4xx_cryp_des.c ****     status = ERROR;
 143              		.loc 1 138 12
 144 0096 0023     		movs	r3, #0
 145 0098 87F86730 		strb	r3, [r7, #103]
 146 009c 48E0     		b	.L7
 147              	.L6:
 139:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 140:./Lib/Src/stm32f4xx_cryp_des.c ****   else
 141:./Lib/Src/stm32f4xx_cryp_des.c ****   {
 142:./Lib/Src/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 148              		.loc 1 142 10
 149 009e 0023     		movs	r3, #0
 150 00a0 BB65     		str	r3, [r7, #88]
 151              		.loc 1 142 5
 152 00a2 3AE0     		b	.L8
 153              	.L14:
 143:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 144:./Lib/Src/stm32f4xx_cryp_des.c ****       
 145:./Lib/Src/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
 146:./Lib/Src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 154              		.loc 1 146 20
 155 00a4 3B6E     		ldr	r3, [r7, #96]
ARM GAS  /tmp/ccEvk2xg.s 			page 15


 156              		.loc 1 146 7
 157 00a6 1B68     		ldr	r3, [r3]
 158 00a8 1846     		mov	r0, r3
 159 00aa FFF7FEFF 		bl	CRYP_DataIn
 147:./Lib/Src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 160              		.loc 1 147 16
 161 00ae 3B6E     		ldr	r3, [r7, #96]
 162 00b0 0433     		adds	r3, r3, #4
 163 00b2 3B66     		str	r3, [r7, #96]
 148:./Lib/Src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 164              		.loc 1 148 20
 165 00b4 3B6E     		ldr	r3, [r7, #96]
 166              		.loc 1 148 7
 167 00b6 1B68     		ldr	r3, [r3]
 168 00b8 1846     		mov	r0, r3
 169 00ba FFF7FEFF 		bl	CRYP_DataIn
 149:./Lib/Src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 170              		.loc 1 149 16
 171 00be 3B6E     		ldr	r3, [r7, #96]
 172 00c0 0433     		adds	r3, r3, #4
 173 00c2 3B66     		str	r3, [r7, #96]
 150:./Lib/Src/stm32f4xx_cryp_des.c ****       
 151:./Lib/Src/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 152:./Lib/Src/stm32f4xx_cryp_des.c ****       counter = 0;
 174              		.loc 1 152 15
 175 00c4 0023     		movs	r3, #0
 176 00c6 7B61     		str	r3, [r7, #20]
 177              	.L10:
 153:./Lib/Src/stm32f4xx_cryp_des.c ****       do
 154:./Lib/Src/stm32f4xx_cryp_des.c ****       {
 155:./Lib/Src/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 178              		.loc 1 155 22 discriminator 2
 179 00c8 1020     		movs	r0, #16
 180 00ca FFF7FEFF 		bl	CRYP_GetFlagStatus
 181 00ce 0346     		mov	r3, r0
 182              		.loc 1 155 20 discriminator 2
 183 00d0 7B65     		str	r3, [r7, #84]
 156:./Lib/Src/stm32f4xx_cryp_des.c ****         counter++;
 184              		.loc 1 156 16 discriminator 2
 185 00d2 7B69     		ldr	r3, [r7, #20]
 186 00d4 0133     		adds	r3, r3, #1
 187 00d6 7B61     		str	r3, [r7, #20]
 157:./Lib/Src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 188              		.loc 1 157 24 discriminator 2
 189 00d8 7B69     		ldr	r3, [r7, #20]
 190              		.loc 1 157 44 discriminator 2
 191 00da B3F5803F 		cmp	r3, #65536
 192 00de 02D0     		beq	.L9
 193              		.loc 1 157 44 is_stmt 0 discriminator 1
 194 00e0 7B6D     		ldr	r3, [r7, #84]
 195 00e2 002B     		cmp	r3, #0
 196 00e4 F0D1     		bne	.L10
 197              	.L9:
 158:./Lib/Src/stm32f4xx_cryp_des.c ****       
 159:./Lib/Src/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 198              		.loc 1 159 10 is_stmt 1
 199 00e6 7B6D     		ldr	r3, [r7, #84]
ARM GAS  /tmp/ccEvk2xg.s 			page 16


 200 00e8 002B     		cmp	r3, #0
 201 00ea 03D0     		beq	.L11
 160:./Lib/Src/stm32f4xx_cryp_des.c ****       {
 161:./Lib/Src/stm32f4xx_cryp_des.c ****         status = ERROR;
 202              		.loc 1 161 16
 203 00ec 0023     		movs	r3, #0
 204 00ee 87F86730 		strb	r3, [r7, #103]
 205 00f2 0FE0     		b	.L12
 206              	.L11:
 162:./Lib/Src/stm32f4xx_cryp_des.c ****       }
 163:./Lib/Src/stm32f4xx_cryp_des.c ****       else
 164:./Lib/Src/stm32f4xx_cryp_des.c ****       {
 165:./Lib/Src/stm32f4xx_cryp_des.c ****         
 166:./Lib/Src/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 167:./Lib/Src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 207              		.loc 1 167 10
 208 00f4 FC6D     		ldr	r4, [r7, #92]
 209              		.loc 1 167 36
 210 00f6 FFF7FEFF 		bl	CRYP_DataOut
 211 00fa 0346     		mov	r3, r0
 212              		.loc 1 167 34
 213 00fc 2360     		str	r3, [r4]
 168:./Lib/Src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 214              		.loc 1 168 19
 215 00fe FB6D     		ldr	r3, [r7, #92]
 216 0100 0433     		adds	r3, r3, #4
 217 0102 FB65     		str	r3, [r7, #92]
 169:./Lib/Src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 218              		.loc 1 169 10
 219 0104 FC6D     		ldr	r4, [r7, #92]
 220              		.loc 1 169 36
 221 0106 FFF7FEFF 		bl	CRYP_DataOut
 222 010a 0346     		mov	r3, r0
 223              		.loc 1 169 34
 224 010c 2360     		str	r3, [r4]
 170:./Lib/Src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 225              		.loc 1 170 19
 226 010e FB6D     		ldr	r3, [r7, #92]
 227 0110 0433     		adds	r3, r3, #4
 228 0112 FB65     		str	r3, [r7, #92]
 229              	.L12:
 142:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 230              		.loc 1 142 51 discriminator 2
 231 0114 BB6D     		ldr	r3, [r7, #88]
 232 0116 0833     		adds	r3, r3, #8
 233 0118 BB65     		str	r3, [r7, #88]
 234              	.L8:
 142:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 235              		.loc 1 142 27 discriminator 1
 236 011a BA6D     		ldr	r2, [r7, #88]
 237 011c 3B68     		ldr	r3, [r7]
 238 011e 9A42     		cmp	r2, r3
 239 0120 03D2     		bcs	.L13
 142:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 240              		.loc 1 142 27 is_stmt 0 discriminator 3
 241 0122 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 242 0126 002B     		cmp	r3, #0
ARM GAS  /tmp/ccEvk2xg.s 			page 17


 243 0128 BCD1     		bne	.L14
 244              	.L13:
 171:./Lib/Src/stm32f4xx_cryp_des.c ****       }
 172:./Lib/Src/stm32f4xx_cryp_des.c ****     }
 173:./Lib/Src/stm32f4xx_cryp_des.c ****     
 174:./Lib/Src/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 175:./Lib/Src/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 245              		.loc 1 175 5 is_stmt 1
 246 012a 0020     		movs	r0, #0
 247 012c FFF7FEFF 		bl	CRYP_Cmd
 248              	.L7:
 176:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 177:./Lib/Src/stm32f4xx_cryp_des.c ****   return status; 
 249              		.loc 1 177 10
 250 0130 97F86730 		ldrb	r3, [r7, #103]	@ zero_extendqisi2
 178:./Lib/Src/stm32f4xx_cryp_des.c **** }
 251              		.loc 1 178 1
 252 0134 1846     		mov	r0, r3
 253 0136 6C37     		adds	r7, r7, #108
 254              		.cfi_def_cfa_offset 12
 255 0138 BD46     		mov	sp, r7
 256              		.cfi_def_cfa_register 13
 257              		@ sp needed
 258 013a 90BD     		pop	{r4, r7, pc}
 259              		.cfi_endproc
 260              	.LFE123:
 262              		.section	.text.CRYP_DES_CBC,"ax",%progbits
 263              		.align	1
 264              		.global	CRYP_DES_CBC
 265              		.syntax unified
 266              		.thumb
 267              		.thumb_func
 269              	CRYP_DES_CBC:
 270              	.LFB124:
 179:./Lib/Src/stm32f4xx_cryp_des.c **** 
 180:./Lib/Src/stm32f4xx_cryp_des.c **** /**
 181:./Lib/Src/stm32f4xx_cryp_des.c ****   * @brief  Encrypt and decrypt using DES in CBC Mode
 182:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Mode: encryption or decryption Mode.
 183:./Lib/Src/stm32f4xx_cryp_des.c ****   *          This parameter can be one of the following values:
 184:./Lib/Src/stm32f4xx_cryp_des.c ****   *            @arg MODE_ENCRYPT: Encryption
 185:./Lib/Src/stm32f4xx_cryp_des.c ****   *            @arg MODE_DECRYPT: Decryption
 186:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Key: Key used for DES algorithm.
 187:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  InitVectors: Initialisation Vectors used for DES algorithm.
 188:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 189:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Input: pointer to the Input buffer.
 190:./Lib/Src/stm32f4xx_cryp_des.c ****   * @param  Output: pointer to the returned buffer.
 191:./Lib/Src/stm32f4xx_cryp_des.c ****   * @retval An ErrorStatus enumeration value:
 192:./Lib/Src/stm32f4xx_cryp_des.c ****   *          - SUCCESS: Operation done
 193:./Lib/Src/stm32f4xx_cryp_des.c ****   *          - ERROR: Operation failed
 194:./Lib/Src/stm32f4xx_cryp_des.c ****   */
 195:./Lib/Src/stm32f4xx_cryp_des.c **** ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
 196:./Lib/Src/stm32f4xx_cryp_des.c ****                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 197:./Lib/Src/stm32f4xx_cryp_des.c **** {
 271              		.loc 1 197 1
 272              		.cfi_startproc
 273              		@ args = 8, pretend = 0, frame = 128
 274              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccEvk2xg.s 			page 18


 275 0000 90B5     		push	{r4, r7, lr}
 276              		.cfi_def_cfa_offset 12
 277              		.cfi_offset 4, -12
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 A1B0     		sub	sp, sp, #132
 281              		.cfi_def_cfa_offset 144
 282 0004 00AF     		add	r7, sp, #0
 283              		.cfi_def_cfa_register 7
 284 0006 B960     		str	r1, [r7, #8]
 285 0008 7A60     		str	r2, [r7, #4]
 286 000a 3B60     		str	r3, [r7]
 287 000c 0346     		mov	r3, r0
 288 000e FB73     		strb	r3, [r7, #15]
 198:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_InitTypeDef DES_CRYP_InitStructure;
 199:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 200:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 201:./Lib/Src/stm32f4xx_cryp_des.c ****   __IO uint32_t counter = 0;
 289              		.loc 1 201 17
 290 0010 0023     		movs	r3, #0
 291 0012 3B61     		str	r3, [r7, #16]
 202:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t busystatus = 0;
 292              		.loc 1 202 12
 293 0014 0023     		movs	r3, #0
 294 0016 FB66     		str	r3, [r7, #108]
 203:./Lib/Src/stm32f4xx_cryp_des.c ****   ErrorStatus status = SUCCESS;
 295              		.loc 1 203 15
 296 0018 0123     		movs	r3, #1
 297 001a 87F87F30 		strb	r3, [r7, #127]
 204:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t keyaddr    = (uint32_t)Key;
 298              		.loc 1 204 12
 299 001e BB68     		ldr	r3, [r7, #8]
 300 0020 BB66     		str	r3, [r7, #104]
 205:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t inputaddr  = (uint32_t)Input;
 301              		.loc 1 205 12
 302 0022 3B68     		ldr	r3, [r7]
 303 0024 BB67     		str	r3, [r7, #120]
 206:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t outputaddr = (uint32_t)Output;
 304              		.loc 1 206 12
 305 0026 D7F89430 		ldr	r3, [r7, #148]
 306 002a 7B67     		str	r3, [r7, #116]
 207:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 307              		.loc 1 207 12
 308 002c 7B68     		ldr	r3, [r7, #4]
 309 002e 7B66     		str	r3, [r7, #100]
 208:./Lib/Src/stm32f4xx_cryp_des.c ****   uint32_t i = 0;
 310              		.loc 1 208 12
 311 0030 0023     		movs	r3, #0
 312 0032 3B67     		str	r3, [r7, #112]
 209:./Lib/Src/stm32f4xx_cryp_des.c **** 
 210:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Crypto structures initialisation*/
 211:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 313              		.loc 1 211 3
 314 0034 07F12403 		add	r3, r7, #36
 315 0038 1846     		mov	r0, r3
 316 003a FFF7FEFF 		bl	CRYP_KeyStructInit
 212:./Lib/Src/stm32f4xx_cryp_des.c **** 
ARM GAS  /tmp/ccEvk2xg.s 			page 19


 213:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Crypto Init for Encryption process */
 214:./Lib/Src/stm32f4xx_cryp_des.c ****   if(Mode == MODE_ENCRYPT) /* DES encryption */
 317              		.loc 1 214 5
 318 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 319 0040 012B     		cmp	r3, #1
 320 0042 02D1     		bne	.L17
 215:./Lib/Src/stm32f4xx_cryp_des.c ****   {
 216:./Lib/Src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 321              		.loc 1 216 43
 322 0044 0023     		movs	r3, #0
 323 0046 7B64     		str	r3, [r7, #68]
 324 0048 01E0     		b	.L18
 325              	.L17:
 217:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 218:./Lib/Src/stm32f4xx_cryp_des.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
 219:./Lib/Src/stm32f4xx_cryp_des.c ****   {
 220:./Lib/Src/stm32f4xx_cryp_des.c ****      DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 326              		.loc 1 220 43
 327 004a 0423     		movs	r3, #4
 328 004c 7B64     		str	r3, [r7, #68]
 329              	.L18:
 221:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 222:./Lib/Src/stm32f4xx_cryp_des.c **** 
 223:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 330              		.loc 1 223 40
 331 004e 1823     		movs	r3, #24
 332 0050 BB64     		str	r3, [r7, #72]
 224:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 333              		.loc 1 224 40
 334 0052 8023     		movs	r3, #128
 335 0054 FB64     		str	r3, [r7, #76]
 225:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_Init(&DES_CRYP_InitStructure);
 336              		.loc 1 225 3
 337 0056 07F14403 		add	r3, r7, #68
 338 005a 1846     		mov	r0, r3
 339 005c FFF7FEFF 		bl	CRYP_Init
 226:./Lib/Src/stm32f4xx_cryp_des.c **** 
 227:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Key Initialisation */
 228:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 340              		.loc 1 228 52
 341 0060 BB6E     		ldr	r3, [r7, #104]
 342              		.loc 1 228 45
 343 0062 1B68     		ldr	r3, [r3]
 344 0064 7B65     		str	r3, [r7, #84]
 345              	.LBB18:
 346              	.LBB19:
 347              		.loc 2 498 10
 348 0066 7B6D     		ldr	r3, [r7, #84]
 349 0068 1BBA     		rev	r3, r3
 350              	.LBE19:
 351              	.LBE18:
 352              		.loc 1 228 43
 353 006a FB62     		str	r3, [r7, #44]
 229:./Lib/Src/stm32f4xx_cryp_des.c ****   keyaddr+=4;
 354              		.loc 1 229 10
 355 006c BB6E     		ldr	r3, [r7, #104]
 356 006e 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccEvk2xg.s 			page 20


 357 0070 BB66     		str	r3, [r7, #104]
 230:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 358              		.loc 1 230 52
 359 0072 BB6E     		ldr	r3, [r7, #104]
 360              		.loc 1 230 45
 361 0074 1B68     		ldr	r3, [r3]
 362 0076 BB65     		str	r3, [r7, #88]
 363              	.LBB20:
 364              	.LBB21:
 365              		.loc 2 498 10
 366 0078 BB6D     		ldr	r3, [r7, #88]
 367 007a 1BBA     		rev	r3, r3
 368              	.LBE21:
 369              	.LBE20:
 370              		.loc 1 230 43
 371 007c 3B63     		str	r3, [r7, #48]
 231:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 372              		.loc 1 231 3
 373 007e 07F12403 		add	r3, r7, #36
 374 0082 1846     		mov	r0, r3
 375 0084 FFF7FEFF 		bl	CRYP_KeyInit
 232:./Lib/Src/stm32f4xx_cryp_des.c **** 
 233:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Initialization Vectors */
 234:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 376              		.loc 1 234 50
 377 0088 7B6E     		ldr	r3, [r7, #100]
 378              		.loc 1 234 43
 379 008a 1B68     		ldr	r3, [r3]
 380 008c FB65     		str	r3, [r7, #92]
 381              	.LBB22:
 382              	.LBB23:
 383              		.loc 2 498 10
 384 008e FB6D     		ldr	r3, [r7, #92]
 385 0090 1BBA     		rev	r3, r3
 386              	.LBE23:
 387              	.LBE22:
 388              		.loc 1 234 41
 389 0092 7B61     		str	r3, [r7, #20]
 235:./Lib/Src/stm32f4xx_cryp_des.c ****   ivaddr+=4;
 390              		.loc 1 235 9
 391 0094 7B6E     		ldr	r3, [r7, #100]
 392 0096 0433     		adds	r3, r3, #4
 393 0098 7B66     		str	r3, [r7, #100]
 236:./Lib/Src/stm32f4xx_cryp_des.c ****   DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 394              		.loc 1 236 50
 395 009a 7B6E     		ldr	r3, [r7, #100]
 396              		.loc 1 236 43
 397 009c 1B68     		ldr	r3, [r3]
 398 009e 3B66     		str	r3, [r7, #96]
 399              	.LBB24:
 400              	.LBB25:
 401              		.loc 2 498 10
 402 00a0 3B6E     		ldr	r3, [r7, #96]
 403 00a2 1BBA     		rev	r3, r3
 404              	.LBE25:
 405              	.LBE24:
 406              		.loc 1 236 41
ARM GAS  /tmp/ccEvk2xg.s 			page 21


 407 00a4 BB61     		str	r3, [r7, #24]
 237:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_IVInit(&DES_CRYP_IVInitStructure);
 408              		.loc 1 237 3
 409 00a6 07F11403 		add	r3, r7, #20
 410 00aa 1846     		mov	r0, r3
 411 00ac FFF7FEFF 		bl	CRYP_IVInit
 238:./Lib/Src/stm32f4xx_cryp_des.c **** 
 239:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Flush IN/OUT FIFO */
 240:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_FIFOFlush();
 412              		.loc 1 240 3
 413 00b0 FFF7FEFF 		bl	CRYP_FIFOFlush
 241:./Lib/Src/stm32f4xx_cryp_des.c ****   
 242:./Lib/Src/stm32f4xx_cryp_des.c ****   /* Enable Crypto processor */
 243:./Lib/Src/stm32f4xx_cryp_des.c ****   CRYP_Cmd(ENABLE);
 414              		.loc 1 243 3
 415 00b4 0120     		movs	r0, #1
 416 00b6 FFF7FEFF 		bl	CRYP_Cmd
 244:./Lib/Src/stm32f4xx_cryp_des.c **** 
 245:./Lib/Src/stm32f4xx_cryp_des.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 417              		.loc 1 245 6
 418 00ba FFF7FEFF 		bl	CRYP_GetCmdStatus
 419 00be 0346     		mov	r3, r0
 420              		.loc 1 245 5
 421 00c0 002B     		cmp	r3, #0
 422 00c2 03D1     		bne	.L23
 246:./Lib/Src/stm32f4xx_cryp_des.c ****   {
 247:./Lib/Src/stm32f4xx_cryp_des.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 248:./Lib/Src/stm32f4xx_cryp_des.c ****     the CRYP peripheral (please check the device sales type. */
 249:./Lib/Src/stm32f4xx_cryp_des.c ****     status = ERROR;
 423              		.loc 1 249 12
 424 00c4 0023     		movs	r3, #0
 425 00c6 87F87F30 		strb	r3, [r7, #127]
 426 00ca 49E0     		b	.L24
 427              	.L23:
 250:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 251:./Lib/Src/stm32f4xx_cryp_des.c ****   else
 252:./Lib/Src/stm32f4xx_cryp_des.c ****   {
 253:./Lib/Src/stm32f4xx_cryp_des.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 428              		.loc 1 253 10
 429 00cc 0023     		movs	r3, #0
 430 00ce 3B67     		str	r3, [r7, #112]
 431              		.loc 1 253 5
 432 00d0 3AE0     		b	.L25
 433              	.L31:
 254:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 255:./Lib/Src/stm32f4xx_cryp_des.c ****       /* Write the Input block in the Input FIFO */
 256:./Lib/Src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 434              		.loc 1 256 20
 435 00d2 BB6F     		ldr	r3, [r7, #120]
 436              		.loc 1 256 7
 437 00d4 1B68     		ldr	r3, [r3]
 438 00d6 1846     		mov	r0, r3
 439 00d8 FFF7FEFF 		bl	CRYP_DataIn
 257:./Lib/Src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 440              		.loc 1 257 16
 441 00dc BB6F     		ldr	r3, [r7, #120]
 442 00de 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccEvk2xg.s 			page 22


 443 00e0 BB67     		str	r3, [r7, #120]
 258:./Lib/Src/stm32f4xx_cryp_des.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 444              		.loc 1 258 20
 445 00e2 BB6F     		ldr	r3, [r7, #120]
 446              		.loc 1 258 7
 447 00e4 1B68     		ldr	r3, [r3]
 448 00e6 1846     		mov	r0, r3
 449 00e8 FFF7FEFF 		bl	CRYP_DataIn
 259:./Lib/Src/stm32f4xx_cryp_des.c ****       inputaddr+=4;
 450              		.loc 1 259 16
 451 00ec BB6F     		ldr	r3, [r7, #120]
 452 00ee 0433     		adds	r3, r3, #4
 453 00f0 BB67     		str	r3, [r7, #120]
 260:./Lib/Src/stm32f4xx_cryp_des.c ****       
 261:./Lib/Src/stm32f4xx_cryp_des.c ****       /* Wait until the complete message has been processed */
 262:./Lib/Src/stm32f4xx_cryp_des.c ****       counter = 0;
 454              		.loc 1 262 15
 455 00f2 0023     		movs	r3, #0
 456 00f4 3B61     		str	r3, [r7, #16]
 457              	.L27:
 263:./Lib/Src/stm32f4xx_cryp_des.c ****       do
 264:./Lib/Src/stm32f4xx_cryp_des.c ****       {
 265:./Lib/Src/stm32f4xx_cryp_des.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 458              		.loc 1 265 22 discriminator 2
 459 00f6 1020     		movs	r0, #16
 460 00f8 FFF7FEFF 		bl	CRYP_GetFlagStatus
 461 00fc 0346     		mov	r3, r0
 462              		.loc 1 265 20 discriminator 2
 463 00fe FB66     		str	r3, [r7, #108]
 266:./Lib/Src/stm32f4xx_cryp_des.c ****         counter++;
 464              		.loc 1 266 16 discriminator 2
 465 0100 3B69     		ldr	r3, [r7, #16]
 466 0102 0133     		adds	r3, r3, #1
 467 0104 3B61     		str	r3, [r7, #16]
 267:./Lib/Src/stm32f4xx_cryp_des.c ****       }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 468              		.loc 1 267 24 discriminator 2
 469 0106 3B69     		ldr	r3, [r7, #16]
 470              		.loc 1 267 44 discriminator 2
 471 0108 B3F5803F 		cmp	r3, #65536
 472 010c 02D0     		beq	.L26
 473              		.loc 1 267 44 is_stmt 0 discriminator 1
 474 010e FB6E     		ldr	r3, [r7, #108]
 475 0110 002B     		cmp	r3, #0
 476 0112 F0D1     		bne	.L27
 477              	.L26:
 268:./Lib/Src/stm32f4xx_cryp_des.c ****       
 269:./Lib/Src/stm32f4xx_cryp_des.c ****       if (busystatus != RESET)
 478              		.loc 1 269 10 is_stmt 1
 479 0114 FB6E     		ldr	r3, [r7, #108]
 480 0116 002B     		cmp	r3, #0
 481 0118 03D0     		beq	.L28
 270:./Lib/Src/stm32f4xx_cryp_des.c ****       {
 271:./Lib/Src/stm32f4xx_cryp_des.c ****         status = ERROR;
 482              		.loc 1 271 16
 483 011a 0023     		movs	r3, #0
 484 011c 87F87F30 		strb	r3, [r7, #127]
 485 0120 0FE0     		b	.L29
ARM GAS  /tmp/ccEvk2xg.s 			page 23


 486              	.L28:
 272:./Lib/Src/stm32f4xx_cryp_des.c ****       }
 273:./Lib/Src/stm32f4xx_cryp_des.c ****       else
 274:./Lib/Src/stm32f4xx_cryp_des.c ****       {
 275:./Lib/Src/stm32f4xx_cryp_des.c ****         /* Read the Output block from the Output FIFO */
 276:./Lib/Src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 487              		.loc 1 276 10
 488 0122 7C6F     		ldr	r4, [r7, #116]
 489              		.loc 1 276 36
 490 0124 FFF7FEFF 		bl	CRYP_DataOut
 491 0128 0346     		mov	r3, r0
 492              		.loc 1 276 34
 493 012a 2360     		str	r3, [r4]
 277:./Lib/Src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 494              		.loc 1 277 19
 495 012c 7B6F     		ldr	r3, [r7, #116]
 496 012e 0433     		adds	r3, r3, #4
 497 0130 7B67     		str	r3, [r7, #116]
 278:./Lib/Src/stm32f4xx_cryp_des.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 498              		.loc 1 278 10
 499 0132 7C6F     		ldr	r4, [r7, #116]
 500              		.loc 1 278 36
 501 0134 FFF7FEFF 		bl	CRYP_DataOut
 502 0138 0346     		mov	r3, r0
 503              		.loc 1 278 34
 504 013a 2360     		str	r3, [r4]
 279:./Lib/Src/stm32f4xx_cryp_des.c ****         outputaddr+=4;
 505              		.loc 1 279 19
 506 013c 7B6F     		ldr	r3, [r7, #116]
 507 013e 0433     		adds	r3, r3, #4
 508 0140 7B67     		str	r3, [r7, #116]
 509              	.L29:
 253:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 510              		.loc 1 253 51 discriminator 2
 511 0142 3B6F     		ldr	r3, [r7, #112]
 512 0144 0833     		adds	r3, r3, #8
 513 0146 3B67     		str	r3, [r7, #112]
 514              	.L25:
 253:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 515              		.loc 1 253 27 discriminator 1
 516 0148 3A6F     		ldr	r2, [r7, #112]
 517 014a D7F89030 		ldr	r3, [r7, #144]
 518 014e 9A42     		cmp	r2, r3
 519 0150 03D2     		bcs	.L30
 253:./Lib/Src/stm32f4xx_cryp_des.c ****     {
 520              		.loc 1 253 27 is_stmt 0 discriminator 3
 521 0152 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 522 0156 002B     		cmp	r3, #0
 523 0158 BBD1     		bne	.L31
 524              	.L30:
 280:./Lib/Src/stm32f4xx_cryp_des.c ****       }
 281:./Lib/Src/stm32f4xx_cryp_des.c ****     }
 282:./Lib/Src/stm32f4xx_cryp_des.c ****     
 283:./Lib/Src/stm32f4xx_cryp_des.c ****     /* Disable Crypto */
 284:./Lib/Src/stm32f4xx_cryp_des.c ****     CRYP_Cmd(DISABLE);
 525              		.loc 1 284 5 is_stmt 1
 526 015a 0020     		movs	r0, #0
ARM GAS  /tmp/ccEvk2xg.s 			page 24


 527 015c FFF7FEFF 		bl	CRYP_Cmd
 528              	.L24:
 285:./Lib/Src/stm32f4xx_cryp_des.c ****   }
 286:./Lib/Src/stm32f4xx_cryp_des.c ****   return status; 
 529              		.loc 1 286 10
 530 0160 97F87F30 		ldrb	r3, [r7, #127]	@ zero_extendqisi2
 287:./Lib/Src/stm32f4xx_cryp_des.c **** }
 531              		.loc 1 287 1
 532 0164 1846     		mov	r0, r3
 533 0166 8437     		adds	r7, r7, #132
 534              		.cfi_def_cfa_offset 12
 535 0168 BD46     		mov	sp, r7
 536              		.cfi_def_cfa_register 13
 537              		@ sp needed
 538 016a 90BD     		pop	{r4, r7, pc}
 539              		.cfi_endproc
 540              	.LFE124:
 542              		.text
 543              	.Letext0:
 544              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 545              		.file 4 "./Start/stm32f4xx.h"
 546              		.file 5 "./Lib/inc/stm32f4xx_cryp.h"
ARM GAS  /tmp/ccEvk2xg.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_des.c
     /tmp/ccEvk2xg.s:21     .text.CRYP_DES_ECB:0000000000000000 $t
     /tmp/ccEvk2xg.s:27     .text.CRYP_DES_ECB:0000000000000000 CRYP_DES_ECB
     /tmp/ccEvk2xg.s:263    .text.CRYP_DES_CBC:0000000000000000 $t
     /tmp/ccEvk2xg.s:269    .text.CRYP_DES_CBC:0000000000000000 CRYP_DES_CBC

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
