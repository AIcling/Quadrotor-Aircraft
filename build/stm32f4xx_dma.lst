ARM GAS  /tmp/ccIOm5Mq.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_dma.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_dma.c"
  20              		.section	.text.DMA_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	DMA_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	DMA_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_dma.c **** /**
   2:./Lib/Src/stm32f4xx_dma.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:./Lib/Src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_dma.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_dma.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:./Lib/Src/stm32f4xx_dma.c ****   *           + Initialization and Configuration
  10:./Lib/Src/stm32f4xx_dma.c ****   *           + Data Counter
  11:./Lib/Src/stm32f4xx_dma.c ****   *           + Double Buffer mode configuration and command  
  12:./Lib/Src/stm32f4xx_dma.c ****   *           + Interrupts and flags management
  13:./Lib/Src/stm32f4xx_dma.c ****   *           
  14:./Lib/Src/stm32f4xx_dma.c ****   @verbatim      
  15:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================      
  16:./Lib/Src/stm32f4xx_dma.c ****                        ##### How to use this driver #####
  17:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================
  18:./Lib/Src/stm32f4xx_dma.c ****     [..] 
  19:./Lib/Src/stm32f4xx_dma.c ****       (#) Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, ENABLE)
  20:./Lib/Src/stm32f4xx_dma.c ****           function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:./Lib/Src/stm32f4xx_dma.c ****           function for DMA2.
  22:./Lib/Src/stm32f4xx_dma.c ****   
  23:./Lib/Src/stm32f4xx_dma.c ****       (#) Enable and configure the peripheral to be connected to the DMA Stream
  24:./Lib/Src/stm32f4xx_dma.c ****           (except for internal SRAM / FLASH memories: no initialization is 
  25:./Lib/Src/stm32f4xx_dma.c ****           necessary). 
  26:./Lib/Src/stm32f4xx_dma.c ****           
  27:./Lib/Src/stm32f4xx_dma.c ****       (#) For a given Stream, program the required configuration through following parameters:   
  28:./Lib/Src/stm32f4xx_dma.c ****           Source and Destination addresses, Transfer Direction, Transfer size, Source and Destinati
  29:./Lib/Src/stm32f4xx_dma.c ****           data formats, Circular or Normal mode, Stream Priority level, Source and Destination 
  30:./Lib/Src/stm32f4xx_dma.c ****           Incrementation mode, FIFO mode and its Threshold (if needed), Burst 
ARM GAS  /tmp/ccIOm5Mq.s 			page 2


  31:./Lib/Src/stm32f4xx_dma.c ****           mode for Source and/or Destination (if needed) using the DMA_Init() function.
  32:./Lib/Src/stm32f4xx_dma.c ****           To avoid filling unnecessary fields, you can call DMA_StructInit() function
  33:./Lib/Src/stm32f4xx_dma.c ****           to initialize a given structure with default values (reset values), the modify
  34:./Lib/Src/stm32f4xx_dma.c ****           only necessary fields 
  35:./Lib/Src/stm32f4xx_dma.c ****           (ie. Source and Destination addresses, Transfer size and Data Formats).
  36:./Lib/Src/stm32f4xx_dma.c ****   
  37:./Lib/Src/stm32f4xx_dma.c ****       (#) Enable the NVIC and the corresponding interrupt(s) using the function 
  38:./Lib/Src/stm32f4xx_dma.c ****           DMA_ITConfig() if you need to use DMA interrupts. 
  39:./Lib/Src/stm32f4xx_dma.c ****   
  40:./Lib/Src/stm32f4xx_dma.c ****       (#) Optionally, if the Circular mode is enabled, you can use the Double buffer mode by config
  41:./Lib/Src/stm32f4xx_dma.c ****           the second Memory address and the first Memory to be used through the function 
  42:./Lib/Src/stm32f4xx_dma.c ****           DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the function
  43:./Lib/Src/stm32f4xx_dma.c ****           DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  44:./Lib/Src/stm32f4xx_dma.c ****       
  45:./Lib/Src/stm32f4xx_dma.c ****       (#) Enable the DMA stream using the DMA_Cmd() function. 
  46:./Lib/Src/stm32f4xx_dma.c ****                   
  47:./Lib/Src/stm32f4xx_dma.c ****       (#) Activate the needed Stream Request using PPP_DMACmd() function for
  48:./Lib/Src/stm32f4xx_dma.c ****           any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  49:./Lib/Src/stm32f4xx_dma.c ****           The function allowing this operation is provided in each PPP peripheral
  50:./Lib/Src/stm32f4xx_dma.c ****           driver (ie. SPI_DMACmd for SPI peripheral).
  51:./Lib/Src/stm32f4xx_dma.c ****           Once the Stream is enabled, it is not possible to modify its configuration
  52:./Lib/Src/stm32f4xx_dma.c ****           unless the stream is stopped and disabled.
  53:./Lib/Src/stm32f4xx_dma.c ****           After enabling the Stream, it is advised to monitor the EN bit status using
  54:./Lib/Src/stm32f4xx_dma.c ****           the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  55:./Lib/Src/stm32f4xx_dma.c ****           this bit will remain reset and all transfers on this Stream will remain on hold.      
  56:./Lib/Src/stm32f4xx_dma.c ****   
  57:./Lib/Src/stm32f4xx_dma.c ****       (#) Optionally, you can configure the number of data to be transferred
  58:./Lib/Src/stm32f4xx_dma.c ****           when the Stream is disabled (ie. after each Transfer Complete event
  59:./Lib/Src/stm32f4xx_dma.c ****           or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  60:./Lib/Src/stm32f4xx_dma.c ****           And you can get the number of remaining data to be transferred using 
  61:./Lib/Src/stm32f4xx_dma.c ****           the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  62:./Lib/Src/stm32f4xx_dma.c ****           enabled and running).  
  63:./Lib/Src/stm32f4xx_dma.c ****                      
  64:./Lib/Src/stm32f4xx_dma.c ****       (#) To control DMA events you can use one of the following two methods:
  65:./Lib/Src/stm32f4xx_dma.c ****         (##) Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:./Lib/Src/stm32f4xx_dma.c ****         (##) Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:./Lib/Src/stm32f4xx_dma.c ****              phase and DMA_GetITStatus() function into interrupt routines in
  68:./Lib/Src/stm32f4xx_dma.c ****              communication phase.
  69:./Lib/Src/stm32f4xx_dma.c ****     [..]     
  70:./Lib/Src/stm32f4xx_dma.c ****           After checking on a flag you should clear it using DMA_ClearFlag()
  71:./Lib/Src/stm32f4xx_dma.c ****           function. And after checking on an interrupt event you should 
  72:./Lib/Src/stm32f4xx_dma.c ****           clear it using DMA_ClearITPendingBit() function.    
  73:./Lib/Src/stm32f4xx_dma.c ****                 
  74:./Lib/Src/stm32f4xx_dma.c ****       (#) Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  75:./Lib/Src/stm32f4xx_dma.c ****           the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  76:./Lib/Src/stm32f4xx_dma.c ****           the Memory Address to be modified is not the one currently in use by DMA Stream.
  77:./Lib/Src/stm32f4xx_dma.c ****           This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  78:./Lib/Src/stm32f4xx_dma.c ****                 
  79:./Lib/Src/stm32f4xx_dma.c ****       (#) Optionally, Pause-Resume operations may be performed:
  80:./Lib/Src/stm32f4xx_dma.c ****           The DMA_Cmd() function may be used to perform Pause-Resume operation. 
  81:./Lib/Src/stm32f4xx_dma.c ****           When a transfer is ongoing, calling this function to disable the 
  82:./Lib/Src/stm32f4xx_dma.c ****           Stream will cause the transfer to be paused. All configuration registers 
  83:./Lib/Src/stm32f4xx_dma.c ****           and the number of remaining data will be preserved. When calling again 
  84:./Lib/Src/stm32f4xx_dma.c ****           this function to re-enable the Stream, the transfer will be resumed from 
  85:./Lib/Src/stm32f4xx_dma.c ****           the point where it was paused.          
  86:./Lib/Src/stm32f4xx_dma.c ****                    
  87:./Lib/Src/stm32f4xx_dma.c ****       -@- Memory-to-Memory transfer is possible by setting the address of the memory into
ARM GAS  /tmp/ccIOm5Mq.s 			page 3


  88:./Lib/Src/stm32f4xx_dma.c ****            the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  89:./Lib/Src/stm32f4xx_dma.c ****            are not allowed.
  90:./Lib/Src/stm32f4xx_dma.c ****     
  91:./Lib/Src/stm32f4xx_dma.c ****       -@- The FIFO is used mainly to reduce bus usage and to allow data 
  92:./Lib/Src/stm32f4xx_dma.c ****            packing/unpacking: it is possible to set different Data Sizes for 
  93:./Lib/Src/stm32f4xx_dma.c ****            the Peripheral and the Memory (ie. you can set Half-Word data size 
  94:./Lib/Src/stm32f4xx_dma.c ****            for the peripheral to access its data register and set Word data size
  95:./Lib/Src/stm32f4xx_dma.c ****            for the Memory to gain in access time. Each two Half-words will be 
  96:./Lib/Src/stm32f4xx_dma.c ****            packed and written in a single access to a Word in the Memory).
  97:./Lib/Src/stm32f4xx_dma.c ****       
  98:./Lib/Src/stm32f4xx_dma.c ****       -@- When FIFO is disabled, it is not allowed to configure different 
  99:./Lib/Src/stm32f4xx_dma.c ****            Data Sizes for Source and Destination. In this case the Peripheral 
 100:./Lib/Src/stm32f4xx_dma.c ****            Data Size will be applied to both Source and Destination.               
 101:./Lib/Src/stm32f4xx_dma.c ****   
 102:./Lib/Src/stm32f4xx_dma.c ****   @endverbatim
 103:./Lib/Src/stm32f4xx_dma.c ****   ******************************************************************************
 104:./Lib/Src/stm32f4xx_dma.c ****   * @attention
 105:./Lib/Src/stm32f4xx_dma.c ****   *
 106:./Lib/Src/stm32f4xx_dma.c ****   * Copyright (c) 2016 STMicroelectronics.
 107:./Lib/Src/stm32f4xx_dma.c ****   * All rights reserved.
 108:./Lib/Src/stm32f4xx_dma.c ****   *
 109:./Lib/Src/stm32f4xx_dma.c ****   * This software is licensed under terms that can be found in the LICENSE file
 110:./Lib/Src/stm32f4xx_dma.c ****   * in the root directory of this software component.
 111:./Lib/Src/stm32f4xx_dma.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 112:./Lib/Src/stm32f4xx_dma.c ****   *
 113:./Lib/Src/stm32f4xx_dma.c ****   ******************************************************************************
 114:./Lib/Src/stm32f4xx_dma.c ****   */
 115:./Lib/Src/stm32f4xx_dma.c **** 
 116:./Lib/Src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 117:./Lib/Src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 118:./Lib/Src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 119:./Lib/Src/stm32f4xx_dma.c **** 
 120:./Lib/Src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 121:./Lib/Src/stm32f4xx_dma.c ****   * @{
 122:./Lib/Src/stm32f4xx_dma.c ****   */
 123:./Lib/Src/stm32f4xx_dma.c **** 
 124:./Lib/Src/stm32f4xx_dma.c **** /** @defgroup DMA 
 125:./Lib/Src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 126:./Lib/Src/stm32f4xx_dma.c ****   * @{
 127:./Lib/Src/stm32f4xx_dma.c ****   */ 
 128:./Lib/Src/stm32f4xx_dma.c **** 
 129:./Lib/Src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 130:./Lib/Src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 131:./Lib/Src/stm32f4xx_dma.c **** 
 132:./Lib/Src/stm32f4xx_dma.c **** /* Masks Definition */
 133:./Lib/Src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 134:./Lib/Src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 135:./Lib/Src/stm32f4xx_dma.c **** 
 136:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 137:./Lib/Src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 138:./Lib/Src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 139:./Lib/Src/stm32f4xx_dma.c **** 
 140:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 141:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 142:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 143:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 144:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
ARM GAS  /tmp/ccIOm5Mq.s 			page 4


 145:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 146:./Lib/Src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 147:./Lib/Src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 148:./Lib/Src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 149:./Lib/Src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 150:./Lib/Src/stm32f4xx_dma.c **** 
 151:./Lib/Src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 152:./Lib/Src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 153:./Lib/Src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 154:./Lib/Src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 155:./Lib/Src/stm32f4xx_dma.c **** 
 156:./Lib/Src/stm32f4xx_dma.c **** 
 157:./Lib/Src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 158:./Lib/Src/stm32f4xx_dma.c ****   * @{
 159:./Lib/Src/stm32f4xx_dma.c ****   */
 160:./Lib/Src/stm32f4xx_dma.c **** 
 161:./Lib/Src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 162:./Lib/Src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 163:./Lib/Src/stm32f4xx_dma.c ****  *
 164:./Lib/Src/stm32f4xx_dma.c **** @verbatim   
 165:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================
 166:./Lib/Src/stm32f4xx_dma.c ****                 ##### Initialization and Configuration functions #####
 167:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================  
 168:./Lib/Src/stm32f4xx_dma.c ****     [..]
 169:./Lib/Src/stm32f4xx_dma.c ****     This subsection provides functions allowing to initialize the DMA Stream source
 170:./Lib/Src/stm32f4xx_dma.c ****     and destination addresses, incrementation and data sizes, transfer direction, 
 171:./Lib/Src/stm32f4xx_dma.c ****     buffer size, circular/normal mode selection, memory-to-memory mode selection 
 172:./Lib/Src/stm32f4xx_dma.c ****     and Stream priority value.
 173:./Lib/Src/stm32f4xx_dma.c ****     [..]
 174:./Lib/Src/stm32f4xx_dma.c ****     The DMA_Init() function follows the DMA configuration procedures as described in
 175:./Lib/Src/stm32f4xx_dma.c ****     reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 176:./Lib/Src/stm32f4xx_dma.c ****     This condition should be checked by user application using the function DMA_GetCmdStatus()
 177:./Lib/Src/stm32f4xx_dma.c ****     before calling the DMA_Init() function.
 178:./Lib/Src/stm32f4xx_dma.c **** 
 179:./Lib/Src/stm32f4xx_dma.c **** @endverbatim
 180:./Lib/Src/stm32f4xx_dma.c ****   * @{
 181:./Lib/Src/stm32f4xx_dma.c ****   */
 182:./Lib/Src/stm32f4xx_dma.c **** 
 183:./Lib/Src/stm32f4xx_dma.c **** /**
 184:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 185:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 186:./Lib/Src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 187:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 188:./Lib/Src/stm32f4xx_dma.c ****   */
 189:./Lib/Src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 190:./Lib/Src/stm32f4xx_dma.c **** {
  29              		.loc 1 190 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccIOm5Mq.s 			page 5


  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 191:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 192:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 193:./Lib/Src/stm32f4xx_dma.c **** 
 194:./Lib/Src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 195:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  42              		.loc 1 195 15
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 1B68     		ldr	r3, [r3]
  45              		.loc 1 195 20
  46 000c 23F00102 		bic	r2, r3, #1
  47 0010 7B68     		ldr	r3, [r7, #4]
  48 0012 1A60     		str	r2, [r3]
 196:./Lib/Src/stm32f4xx_dma.c **** 
 197:./Lib/Src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 198:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  49              		.loc 1 198 21
  50 0014 7B68     		ldr	r3, [r7, #4]
  51 0016 0022     		movs	r2, #0
  52 0018 1A60     		str	r2, [r3]
 199:./Lib/Src/stm32f4xx_dma.c ****   
 200:./Lib/Src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 201:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  53              		.loc 1 201 22
  54 001a 7B68     		ldr	r3, [r7, #4]
  55 001c 0022     		movs	r2, #0
  56 001e 5A60     		str	r2, [r3, #4]
 202:./Lib/Src/stm32f4xx_dma.c ****   
 203:./Lib/Src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 204:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  57              		.loc 1 204 22
  58 0020 7B68     		ldr	r3, [r7, #4]
  59 0022 0022     		movs	r2, #0
  60 0024 9A60     		str	r2, [r3, #8]
 205:./Lib/Src/stm32f4xx_dma.c ****   
 206:./Lib/Src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 207:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  61              		.loc 1 207 22
  62 0026 7B68     		ldr	r3, [r7, #4]
  63 0028 0022     		movs	r2, #0
  64 002a DA60     		str	r2, [r3, #12]
 208:./Lib/Src/stm32f4xx_dma.c **** 
 209:./Lib/Src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 210:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  65              		.loc 1 210 22
  66 002c 7B68     		ldr	r3, [r7, #4]
  67 002e 0022     		movs	r2, #0
  68 0030 1A61     		str	r2, [r3, #16]
 211:./Lib/Src/stm32f4xx_dma.c **** 
 212:./Lib/Src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 213:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  69              		.loc 1 213 21
  70 0032 7B68     		ldr	r3, [r7, #4]
  71 0034 2122     		movs	r2, #33
  72 0036 5A61     		str	r2, [r3, #20]
 214:./Lib/Src/stm32f4xx_dma.c **** 
ARM GAS  /tmp/ccIOm5Mq.s 			page 6


 215:./Lib/Src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 216:./Lib/Src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  73              		.loc 1 216 6
  74 0038 7B68     		ldr	r3, [r7, #4]
  75 003a 464A     		ldr	r2, .L19
  76 003c 9342     		cmp	r3, r2
  77 003e 03D1     		bne	.L2
 217:./Lib/Src/stm32f4xx_dma.c ****   {
 218:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 219:./Lib/Src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
  78              		.loc 1 219 9
  79 0040 454B     		ldr	r3, .L19+4
  80              		.loc 1 219 17
  81 0042 3D22     		movs	r2, #61
  82 0044 9A60     		str	r2, [r3, #8]
 220:./Lib/Src/stm32f4xx_dma.c ****   }
 221:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
 222:./Lib/Src/stm32f4xx_dma.c ****   {
 223:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 224:./Lib/Src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
 225:./Lib/Src/stm32f4xx_dma.c ****   }
 226:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
 227:./Lib/Src/stm32f4xx_dma.c ****   {
 228:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 229:./Lib/Src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 230:./Lib/Src/stm32f4xx_dma.c ****   }
 231:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 232:./Lib/Src/stm32f4xx_dma.c ****   {
 233:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 234:./Lib/Src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 235:./Lib/Src/stm32f4xx_dma.c ****   }
 236:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 237:./Lib/Src/stm32f4xx_dma.c ****   {
 238:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 239:./Lib/Src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 240:./Lib/Src/stm32f4xx_dma.c ****   }
 241:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 242:./Lib/Src/stm32f4xx_dma.c ****   {
 243:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 244:./Lib/Src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 245:./Lib/Src/stm32f4xx_dma.c ****   }
 246:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 247:./Lib/Src/stm32f4xx_dma.c ****   {
 248:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 249:./Lib/Src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 250:./Lib/Src/stm32f4xx_dma.c ****   }
 251:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 252:./Lib/Src/stm32f4xx_dma.c ****   {
 253:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 254:./Lib/Src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 255:./Lib/Src/stm32f4xx_dma.c ****   }
 256:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 257:./Lib/Src/stm32f4xx_dma.c ****   {
 258:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 259:./Lib/Src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 260:./Lib/Src/stm32f4xx_dma.c ****   }
 261:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
ARM GAS  /tmp/ccIOm5Mq.s 			page 7


 262:./Lib/Src/stm32f4xx_dma.c ****   {
 263:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 264:./Lib/Src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 265:./Lib/Src/stm32f4xx_dma.c ****   }
 266:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 267:./Lib/Src/stm32f4xx_dma.c ****   {
 268:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 269:./Lib/Src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 270:./Lib/Src/stm32f4xx_dma.c ****   }
 271:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 272:./Lib/Src/stm32f4xx_dma.c ****   {
 273:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 274:./Lib/Src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 275:./Lib/Src/stm32f4xx_dma.c ****   }
 276:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 277:./Lib/Src/stm32f4xx_dma.c ****   {
 278:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 279:./Lib/Src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 280:./Lib/Src/stm32f4xx_dma.c ****   }
 281:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 282:./Lib/Src/stm32f4xx_dma.c ****   {
 283:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 284:./Lib/Src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 285:./Lib/Src/stm32f4xx_dma.c ****   }
 286:./Lib/Src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 287:./Lib/Src/stm32f4xx_dma.c ****   {
 288:./Lib/Src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 289:./Lib/Src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 290:./Lib/Src/stm32f4xx_dma.c ****   }
 291:./Lib/Src/stm32f4xx_dma.c ****   else 
 292:./Lib/Src/stm32f4xx_dma.c ****   {
 293:./Lib/Src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 294:./Lib/Src/stm32f4xx_dma.c ****     {
 295:./Lib/Src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 296:./Lib/Src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 297:./Lib/Src/stm32f4xx_dma.c ****     }
 298:./Lib/Src/stm32f4xx_dma.c ****   }
 299:./Lib/Src/stm32f4xx_dma.c **** }
  83              		.loc 1 299 1
  84 0046 7EE0     		b	.L18
  85              	.L2:
 221:./Lib/Src/stm32f4xx_dma.c ****   {
  86              		.loc 1 221 11
  87 0048 7B68     		ldr	r3, [r7, #4]
  88 004a 444A     		ldr	r2, .L19+8
  89 004c 9342     		cmp	r3, r2
  90 004e 04D1     		bne	.L4
 224:./Lib/Src/stm32f4xx_dma.c ****   }
  91              		.loc 1 224 9
  92 0050 414B     		ldr	r3, .L19+4
 224:./Lib/Src/stm32f4xx_dma.c ****   }
  93              		.loc 1 224 17
  94 0052 4FF47462 		mov	r2, #3904
  95 0056 9A60     		str	r2, [r3, #8]
  96              		.loc 1 299 1
  97 0058 75E0     		b	.L18
  98              	.L4:
ARM GAS  /tmp/ccIOm5Mq.s 			page 8


 226:./Lib/Src/stm32f4xx_dma.c ****   {
  99              		.loc 1 226 11
 100 005a 7B68     		ldr	r3, [r7, #4]
 101 005c 404A     		ldr	r2, .L19+12
 102 005e 9342     		cmp	r3, r2
 103 0060 04D1     		bne	.L5
 229:./Lib/Src/stm32f4xx_dma.c ****   }
 104              		.loc 1 229 9
 105 0062 3D4B     		ldr	r3, .L19+4
 229:./Lib/Src/stm32f4xx_dma.c ****   }
 106              		.loc 1 229 17
 107 0064 4FF47412 		mov	r2, #3997696
 108 0068 9A60     		str	r2, [r3, #8]
 109              		.loc 1 299 1
 110 006a 6CE0     		b	.L18
 111              	.L5:
 231:./Lib/Src/stm32f4xx_dma.c ****   {
 112              		.loc 1 231 11
 113 006c 7B68     		ldr	r3, [r7, #4]
 114 006e 3D4A     		ldr	r2, .L19+16
 115 0070 9342     		cmp	r3, r2
 116 0072 04D1     		bne	.L6
 234:./Lib/Src/stm32f4xx_dma.c ****   }
 117              		.loc 1 234 9
 118 0074 384B     		ldr	r3, .L19+4
 234:./Lib/Src/stm32f4xx_dma.c ****   }
 119              		.loc 1 234 17
 120 0076 4FF07462 		mov	r2, #255852544
 121 007a 9A60     		str	r2, [r3, #8]
 122              		.loc 1 299 1
 123 007c 63E0     		b	.L18
 124              	.L6:
 236:./Lib/Src/stm32f4xx_dma.c ****   {
 125              		.loc 1 236 11
 126 007e 7B68     		ldr	r3, [r7, #4]
 127 0080 394A     		ldr	r2, .L19+20
 128 0082 9342     		cmp	r3, r2
 129 0084 03D1     		bne	.L7
 239:./Lib/Src/stm32f4xx_dma.c ****   }
 130              		.loc 1 239 9
 131 0086 344B     		ldr	r3, .L19+4
 239:./Lib/Src/stm32f4xx_dma.c ****   }
 132              		.loc 1 239 17
 133 0088 384A     		ldr	r2, .L19+24
 134 008a DA60     		str	r2, [r3, #12]
 135              		.loc 1 299 1
 136 008c 5BE0     		b	.L18
 137              	.L7:
 241:./Lib/Src/stm32f4xx_dma.c ****   {
 138              		.loc 1 241 11
 139 008e 7B68     		ldr	r3, [r7, #4]
 140 0090 374A     		ldr	r2, .L19+28
 141 0092 9342     		cmp	r3, r2
 142 0094 03D1     		bne	.L8
 244:./Lib/Src/stm32f4xx_dma.c ****   }
 143              		.loc 1 244 9
 144 0096 304B     		ldr	r3, .L19+4
ARM GAS  /tmp/ccIOm5Mq.s 			page 9


 244:./Lib/Src/stm32f4xx_dma.c ****   }
 145              		.loc 1 244 17
 146 0098 364A     		ldr	r2, .L19+32
 147 009a DA60     		str	r2, [r3, #12]
 148              		.loc 1 299 1
 149 009c 53E0     		b	.L18
 150              	.L8:
 246:./Lib/Src/stm32f4xx_dma.c ****   {
 151              		.loc 1 246 11
 152 009e 7B68     		ldr	r3, [r7, #4]
 153 00a0 354A     		ldr	r2, .L19+36
 154 00a2 9342     		cmp	r3, r2
 155 00a4 03D1     		bne	.L9
 249:./Lib/Src/stm32f4xx_dma.c ****   }
 156              		.loc 1 249 9
 157 00a6 2C4B     		ldr	r3, .L19+4
 249:./Lib/Src/stm32f4xx_dma.c ****   }
 158              		.loc 1 249 17
 159 00a8 344A     		ldr	r2, .L19+40
 160 00aa DA60     		str	r2, [r3, #12]
 161              		.loc 1 299 1
 162 00ac 4BE0     		b	.L18
 163              	.L9:
 251:./Lib/Src/stm32f4xx_dma.c ****   {
 164              		.loc 1 251 11
 165 00ae 7B68     		ldr	r3, [r7, #4]
 166 00b0 334A     		ldr	r2, .L19+44
 167 00b2 9342     		cmp	r3, r2
 168 00b4 04D1     		bne	.L10
 254:./Lib/Src/stm32f4xx_dma.c ****   }
 169              		.loc 1 254 9
 170 00b6 284B     		ldr	r3, .L19+4
 254:./Lib/Src/stm32f4xx_dma.c ****   }
 171              		.loc 1 254 17
 172 00b8 4FF03D52 		mov	r2, #792723456
 173 00bc DA60     		str	r2, [r3, #12]
 174              		.loc 1 299 1
 175 00be 42E0     		b	.L18
 176              	.L10:
 256:./Lib/Src/stm32f4xx_dma.c ****   {
 177              		.loc 1 256 11
 178 00c0 7B68     		ldr	r3, [r7, #4]
 179 00c2 304A     		ldr	r2, .L19+48
 180 00c4 9342     		cmp	r3, r2
 181 00c6 03D1     		bne	.L11
 259:./Lib/Src/stm32f4xx_dma.c ****   }
 182              		.loc 1 259 9
 183 00c8 2F4B     		ldr	r3, .L19+52
 259:./Lib/Src/stm32f4xx_dma.c ****   }
 184              		.loc 1 259 17
 185 00ca 3D22     		movs	r2, #61
 186 00cc 9A60     		str	r2, [r3, #8]
 187              		.loc 1 299 1
 188 00ce 3AE0     		b	.L18
 189              	.L11:
 261:./Lib/Src/stm32f4xx_dma.c ****   {
 190              		.loc 1 261 11
ARM GAS  /tmp/ccIOm5Mq.s 			page 10


 191 00d0 7B68     		ldr	r3, [r7, #4]
 192 00d2 2E4A     		ldr	r2, .L19+56
 193 00d4 9342     		cmp	r3, r2
 194 00d6 04D1     		bne	.L12
 264:./Lib/Src/stm32f4xx_dma.c ****   }
 195              		.loc 1 264 9
 196 00d8 2B4B     		ldr	r3, .L19+52
 264:./Lib/Src/stm32f4xx_dma.c ****   }
 197              		.loc 1 264 17
 198 00da 4FF47462 		mov	r2, #3904
 199 00de 9A60     		str	r2, [r3, #8]
 200              		.loc 1 299 1
 201 00e0 31E0     		b	.L18
 202              	.L12:
 266:./Lib/Src/stm32f4xx_dma.c ****   {
 203              		.loc 1 266 11
 204 00e2 7B68     		ldr	r3, [r7, #4]
 205 00e4 2A4A     		ldr	r2, .L19+60
 206 00e6 9342     		cmp	r3, r2
 207 00e8 04D1     		bne	.L13
 269:./Lib/Src/stm32f4xx_dma.c ****   }
 208              		.loc 1 269 9
 209 00ea 274B     		ldr	r3, .L19+52
 269:./Lib/Src/stm32f4xx_dma.c ****   }
 210              		.loc 1 269 17
 211 00ec 4FF47412 		mov	r2, #3997696
 212 00f0 9A60     		str	r2, [r3, #8]
 213              		.loc 1 299 1
 214 00f2 28E0     		b	.L18
 215              	.L13:
 271:./Lib/Src/stm32f4xx_dma.c ****   {
 216              		.loc 1 271 11
 217 00f4 7B68     		ldr	r3, [r7, #4]
 218 00f6 274A     		ldr	r2, .L19+64
 219 00f8 9342     		cmp	r3, r2
 220 00fa 04D1     		bne	.L14
 274:./Lib/Src/stm32f4xx_dma.c ****   }
 221              		.loc 1 274 9
 222 00fc 224B     		ldr	r3, .L19+52
 274:./Lib/Src/stm32f4xx_dma.c ****   }
 223              		.loc 1 274 17
 224 00fe 4FF07462 		mov	r2, #255852544
 225 0102 9A60     		str	r2, [r3, #8]
 226              		.loc 1 299 1
 227 0104 1FE0     		b	.L18
 228              	.L14:
 276:./Lib/Src/stm32f4xx_dma.c ****   {
 229              		.loc 1 276 11
 230 0106 7B68     		ldr	r3, [r7, #4]
 231 0108 234A     		ldr	r2, .L19+68
 232 010a 9342     		cmp	r3, r2
 233 010c 03D1     		bne	.L15
 279:./Lib/Src/stm32f4xx_dma.c ****   }
 234              		.loc 1 279 9
 235 010e 1E4B     		ldr	r3, .L19+52
 279:./Lib/Src/stm32f4xx_dma.c ****   }
 236              		.loc 1 279 17
ARM GAS  /tmp/ccIOm5Mq.s 			page 11


 237 0110 164A     		ldr	r2, .L19+24
 238 0112 DA60     		str	r2, [r3, #12]
 239              		.loc 1 299 1
 240 0114 17E0     		b	.L18
 241              	.L15:
 281:./Lib/Src/stm32f4xx_dma.c ****   {
 242              		.loc 1 281 11
 243 0116 7B68     		ldr	r3, [r7, #4]
 244 0118 204A     		ldr	r2, .L19+72
 245 011a 9342     		cmp	r3, r2
 246 011c 03D1     		bne	.L16
 284:./Lib/Src/stm32f4xx_dma.c ****   }
 247              		.loc 1 284 9
 248 011e 1A4B     		ldr	r3, .L19+52
 284:./Lib/Src/stm32f4xx_dma.c ****   }
 249              		.loc 1 284 17
 250 0120 144A     		ldr	r2, .L19+32
 251 0122 DA60     		str	r2, [r3, #12]
 252              		.loc 1 299 1
 253 0124 0FE0     		b	.L18
 254              	.L16:
 286:./Lib/Src/stm32f4xx_dma.c ****   {
 255              		.loc 1 286 11
 256 0126 7B68     		ldr	r3, [r7, #4]
 257 0128 1D4A     		ldr	r2, .L19+76
 258 012a 9342     		cmp	r3, r2
 259 012c 03D1     		bne	.L17
 289:./Lib/Src/stm32f4xx_dma.c ****   }
 260              		.loc 1 289 9
 261 012e 164B     		ldr	r3, .L19+52
 289:./Lib/Src/stm32f4xx_dma.c ****   }
 262              		.loc 1 289 17
 263 0130 124A     		ldr	r2, .L19+40
 264 0132 DA60     		str	r2, [r3, #12]
 265              		.loc 1 299 1
 266 0134 07E0     		b	.L18
 267              	.L17:
 293:./Lib/Src/stm32f4xx_dma.c ****     {
 268              		.loc 1 293 8
 269 0136 7B68     		ldr	r3, [r7, #4]
 270 0138 1A4A     		ldr	r2, .L19+80
 271 013a 9342     		cmp	r3, r2
 272 013c 03D1     		bne	.L18
 296:./Lib/Src/stm32f4xx_dma.c ****     }
 273              		.loc 1 296 11
 274 013e 124B     		ldr	r3, .L19+52
 296:./Lib/Src/stm32f4xx_dma.c ****     }
 275              		.loc 1 296 19
 276 0140 4FF03D52 		mov	r2, #792723456
 277 0144 DA60     		str	r2, [r3, #12]
 278              	.L18:
 279              		.loc 1 299 1
 280 0146 00BF     		nop
 281 0148 0C37     		adds	r7, r7, #12
 282              		.cfi_def_cfa_offset 4
 283 014a BD46     		mov	sp, r7
 284              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccIOm5Mq.s 			page 12


 285              		@ sp needed
 286 014c 5DF8047B 		ldr	r7, [sp], #4
 287              		.cfi_restore 7
 288              		.cfi_def_cfa_offset 0
 289 0150 7047     		bx	lr
 290              	.L20:
 291 0152 00BF     		.align	2
 292              	.L19:
 293 0154 10600240 		.word	1073897488
 294 0158 00600240 		.word	1073897472
 295 015c 28600240 		.word	1073897512
 296 0160 40600240 		.word	1073897536
 297 0164 58600240 		.word	1073897560
 298 0168 70600240 		.word	1073897584
 299 016c 3D000020 		.word	536870973
 300 0170 88600240 		.word	1073897608
 301 0174 400F0020 		.word	536874816
 302 0178 A0600240 		.word	1073897632
 303 017c 00003D20 		.word	540868608
 304 0180 B8600240 		.word	1073897656
 305 0184 10640240 		.word	1073898512
 306 0188 00640240 		.word	1073898496
 307 018c 28640240 		.word	1073898536
 308 0190 40640240 		.word	1073898560
 309 0194 58640240 		.word	1073898584
 310 0198 70640240 		.word	1073898608
 311 019c 88640240 		.word	1073898632
 312 01a0 A0640240 		.word	1073898656
 313 01a4 B8640240 		.word	1073898680
 314              		.cfi_endproc
 315              	.LFE123:
 317              		.section	.text.DMA_Init,"ax",%progbits
 318              		.align	1
 319              		.global	DMA_Init
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 324              	DMA_Init:
 325              	.LFB124:
 300:./Lib/Src/stm32f4xx_dma.c **** 
 301:./Lib/Src/stm32f4xx_dma.c **** /**
 302:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 303:./Lib/Src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 304:./Lib/Src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 305:./Lib/Src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 306:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 307:./Lib/Src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 308:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 309:./Lib/Src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 310:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 311:./Lib/Src/stm32f4xx_dma.c ****   */
 312:./Lib/Src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 313:./Lib/Src/stm32f4xx_dma.c **** {
 326              		.loc 1 313 1
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 16
 329              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccIOm5Mq.s 			page 13


 330              		@ link register save eliminated.
 331 0000 80B4     		push	{r7}
 332              		.cfi_def_cfa_offset 4
 333              		.cfi_offset 7, -4
 334 0002 85B0     		sub	sp, sp, #20
 335              		.cfi_def_cfa_offset 24
 336 0004 00AF     		add	r7, sp, #0
 337              		.cfi_def_cfa_register 7
 338 0006 7860     		str	r0, [r7, #4]
 339 0008 3960     		str	r1, [r7]
 314:./Lib/Src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 340              		.loc 1 314 12
 341 000a 0023     		movs	r3, #0
 342 000c FB60     		str	r3, [r7, #12]
 315:./Lib/Src/stm32f4xx_dma.c **** 
 316:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 317:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 318:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 319:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 320:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 321:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 322:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 323:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 324:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 325:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 326:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 327:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 328:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 329:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 330:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 331:./Lib/Src/stm32f4xx_dma.c **** 
 332:./Lib/Src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 333:./Lib/Src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 334:./Lib/Src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 343              		.loc 1 334 10
 344 000e 7B68     		ldr	r3, [r7, #4]
 345 0010 1B68     		ldr	r3, [r3]
 346 0012 FB60     		str	r3, [r7, #12]
 335:./Lib/Src/stm32f4xx_dma.c **** 
 336:./Lib/Src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 337:./Lib/Src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 347              		.loc 1 337 10
 348 0014 FA68     		ldr	r2, [r7, #12]
 349 0016 254B     		ldr	r3, .L22
 350 0018 1340     		ands	r3, r3, r2
 351 001a FB60     		str	r3, [r7, #12]
 338:./Lib/Src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 339:./Lib/Src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 340:./Lib/Src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 341:./Lib/Src/stm32f4xx_dma.c **** 
 342:./Lib/Src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 343:./Lib/Src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 344:./Lib/Src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 345:./Lib/Src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 346:./Lib/Src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 347:./Lib/Src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 348:./Lib/Src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
ARM GAS  /tmp/ccIOm5Mq.s 			page 14


 349:./Lib/Src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 350:./Lib/Src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 351:./Lib/Src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 352:./Lib/Src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 353:./Lib/Src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 352              		.loc 1 353 27
 353 001c 3B68     		ldr	r3, [r7]
 354 001e 1A68     		ldr	r2, [r3]
 355              		.loc 1 353 57
 356 0020 3B68     		ldr	r3, [r7]
 357 0022 DB68     		ldr	r3, [r3, #12]
 358              		.loc 1 353 41
 359 0024 1A43     		orrs	r2, r2, r3
 354:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 360              		.loc 1 354 27
 361 0026 3B68     		ldr	r3, [r7]
 362 0028 5B69     		ldr	r3, [r3, #20]
 353:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 363              		.loc 1 353 67
 364 002a 1A43     		orrs	r2, r2, r3
 365              		.loc 1 354 63
 366 002c 3B68     		ldr	r3, [r7]
 367 002e 9B69     		ldr	r3, [r3, #24]
 368              		.loc 1 354 47
 369 0030 1A43     		orrs	r2, r2, r3
 355:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 370              		.loc 1 355 27
 371 0032 3B68     		ldr	r3, [r7]
 372 0034 DB69     		ldr	r3, [r3, #28]
 354:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 373              		.loc 1 354 79
 374 0036 1A43     		orrs	r2, r2, r3
 375              		.loc 1 355 68
 376 0038 3B68     		ldr	r3, [r7]
 377 003a 1B6A     		ldr	r3, [r3, #32]
 378              		.loc 1 355 52
 379 003c 1A43     		orrs	r2, r2, r3
 356:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 380              		.loc 1 356 27
 381 003e 3B68     		ldr	r3, [r7]
 382 0040 5B6A     		ldr	r3, [r3, #36]
 355:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 383              		.loc 1 355 89
 384 0042 1A43     		orrs	r2, r2, r3
 385              		.loc 1 356 54
 386 0044 3B68     		ldr	r3, [r7]
 387 0046 9B6A     		ldr	r3, [r3, #40]
 388              		.loc 1 356 38
 389 0048 1A43     		orrs	r2, r2, r3
 357:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 390              		.loc 1 357 27
 391 004a 3B68     		ldr	r3, [r7]
 392 004c 5B6B     		ldr	r3, [r3, #52]
 356:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 393              		.loc 1 356 69
 394 004e 1A43     		orrs	r2, r2, r3
 395              		.loc 1 357 61
ARM GAS  /tmp/ccIOm5Mq.s 			page 15


 396 0050 3B68     		ldr	r3, [r7]
 397 0052 9B6B     		ldr	r3, [r3, #56]
 398              		.loc 1 357 45
 399 0054 1343     		orrs	r3, r3, r2
 353:./Lib/Src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 400              		.loc 1 353 10
 401 0056 FA68     		ldr	r2, [r7, #12]
 402 0058 1343     		orrs	r3, r3, r2
 403 005a FB60     		str	r3, [r7, #12]
 358:./Lib/Src/stm32f4xx_dma.c **** 
 359:./Lib/Src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 360:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 404              		.loc 1 360 20
 405 005c 7B68     		ldr	r3, [r7, #4]
 406 005e FA68     		ldr	r2, [r7, #12]
 407 0060 1A60     		str	r2, [r3]
 361:./Lib/Src/stm32f4xx_dma.c **** 
 362:./Lib/Src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 363:./Lib/Src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 364:./Lib/Src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 408              		.loc 1 364 10
 409 0062 7B68     		ldr	r3, [r7, #4]
 410 0064 5B69     		ldr	r3, [r3, #20]
 411 0066 FB60     		str	r3, [r7, #12]
 365:./Lib/Src/stm32f4xx_dma.c **** 
 366:./Lib/Src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 367:./Lib/Src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 412              		.loc 1 367 10
 413 0068 FB68     		ldr	r3, [r7, #12]
 414 006a 23F00703 		bic	r3, r3, #7
 415 006e FB60     		str	r3, [r7, #12]
 368:./Lib/Src/stm32f4xx_dma.c **** 
 369:./Lib/Src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 370:./Lib/Src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 371:./Lib/Src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 372:./Lib/Src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 416              		.loc 1 372 27
 417 0070 3B68     		ldr	r3, [r7]
 418 0072 DA6A     		ldr	r2, [r3, #44]
 419              		.loc 1 372 58
 420 0074 3B68     		ldr	r3, [r7]
 421 0076 1B6B     		ldr	r3, [r3, #48]
 422              		.loc 1 372 42
 423 0078 1343     		orrs	r3, r3, r2
 424              		.loc 1 372 10
 425 007a FA68     		ldr	r2, [r7, #12]
 426 007c 1343     		orrs	r3, r3, r2
 427 007e FB60     		str	r3, [r7, #12]
 373:./Lib/Src/stm32f4xx_dma.c **** 
 374:./Lib/Src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 375:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 428              		.loc 1 375 21
 429 0080 7B68     		ldr	r3, [r7, #4]
 430 0082 FA68     		ldr	r2, [r7, #12]
 431 0084 5A61     		str	r2, [r3, #20]
 376:./Lib/Src/stm32f4xx_dma.c **** 
 377:./Lib/Src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
ARM GAS  /tmp/ccIOm5Mq.s 			page 16


 378:./Lib/Src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 379:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 432              		.loc 1 379 38
 433 0086 3B68     		ldr	r3, [r7]
 434 0088 1A69     		ldr	r2, [r3, #16]
 435              		.loc 1 379 22
 436 008a 7B68     		ldr	r3, [r7, #4]
 437 008c 5A60     		str	r2, [r3, #4]
 380:./Lib/Src/stm32f4xx_dma.c **** 
 381:./Lib/Src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 382:./Lib/Src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 383:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 438              		.loc 1 383 37
 439 008e 3B68     		ldr	r3, [r7]
 440 0090 5A68     		ldr	r2, [r3, #4]
 441              		.loc 1 383 21
 442 0092 7B68     		ldr	r3, [r7, #4]
 443 0094 9A60     		str	r2, [r3, #8]
 384:./Lib/Src/stm32f4xx_dma.c **** 
 385:./Lib/Src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 386:./Lib/Src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 387:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 444              		.loc 1 387 38
 445 0096 3B68     		ldr	r3, [r7]
 446 0098 9A68     		ldr	r2, [r3, #8]
 447              		.loc 1 387 22
 448 009a 7B68     		ldr	r3, [r7, #4]
 449 009c DA60     		str	r2, [r3, #12]
 388:./Lib/Src/stm32f4xx_dma.c **** }
 450              		.loc 1 388 1
 451 009e 00BF     		nop
 452 00a0 1437     		adds	r7, r7, #20
 453              		.cfi_def_cfa_offset 4
 454 00a2 BD46     		mov	sp, r7
 455              		.cfi_def_cfa_register 13
 456              		@ sp needed
 457 00a4 5DF8047B 		ldr	r7, [sp], #4
 458              		.cfi_restore 7
 459              		.cfi_def_cfa_offset 0
 460 00a8 7047     		bx	lr
 461              	.L23:
 462 00aa 00BF     		.align	2
 463              	.L22:
 464 00ac 3F801CF0 		.word	-266567617
 465              		.cfi_endproc
 466              	.LFE124:
 468              		.section	.text.DMA_StructInit,"ax",%progbits
 469              		.align	1
 470              		.global	DMA_StructInit
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 475              	DMA_StructInit:
 476              	.LFB125:
 389:./Lib/Src/stm32f4xx_dma.c **** 
 390:./Lib/Src/stm32f4xx_dma.c **** /**
 391:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
ARM GAS  /tmp/ccIOm5Mq.s 			page 17


 392:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 393:./Lib/Src/stm32f4xx_dma.c ****   *         be initialized.
 394:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 395:./Lib/Src/stm32f4xx_dma.c ****   */
 396:./Lib/Src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 397:./Lib/Src/stm32f4xx_dma.c **** {
 477              		.loc 1 397 1
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 8
 480              		@ frame_needed = 1, uses_anonymous_args = 0
 481              		@ link register save eliminated.
 482 0000 80B4     		push	{r7}
 483              		.cfi_def_cfa_offset 4
 484              		.cfi_offset 7, -4
 485 0002 83B0     		sub	sp, sp, #12
 486              		.cfi_def_cfa_offset 16
 487 0004 00AF     		add	r7, sp, #0
 488              		.cfi_def_cfa_register 7
 489 0006 7860     		str	r0, [r7, #4]
 398:./Lib/Src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 399:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 400:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 490              		.loc 1 400 31
 491 0008 7B68     		ldr	r3, [r7, #4]
 492 000a 0022     		movs	r2, #0
 493 000c 1A60     		str	r2, [r3]
 401:./Lib/Src/stm32f4xx_dma.c **** 
 402:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 403:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 494              		.loc 1 403 42
 495 000e 7B68     		ldr	r3, [r7, #4]
 496 0010 0022     		movs	r2, #0
 497 0012 5A60     		str	r2, [r3, #4]
 404:./Lib/Src/stm32f4xx_dma.c **** 
 405:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 406:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 498              		.loc 1 406 39
 499 0014 7B68     		ldr	r3, [r7, #4]
 500 0016 0022     		movs	r2, #0
 501 0018 9A60     		str	r2, [r3, #8]
 407:./Lib/Src/stm32f4xx_dma.c **** 
 408:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 409:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 502              		.loc 1 409 27
 503 001a 7B68     		ldr	r3, [r7, #4]
 504 001c 0022     		movs	r2, #0
 505 001e DA60     		str	r2, [r3, #12]
 410:./Lib/Src/stm32f4xx_dma.c **** 
 411:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 412:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 506              		.loc 1 412 34
 507 0020 7B68     		ldr	r3, [r7, #4]
 508 0022 0022     		movs	r2, #0
 509 0024 1A61     		str	r2, [r3, #16]
 413:./Lib/Src/stm32f4xx_dma.c **** 
 414:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 415:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
ARM GAS  /tmp/ccIOm5Mq.s 			page 18


 510              		.loc 1 415 37
 511 0026 7B68     		ldr	r3, [r7, #4]
 512 0028 0022     		movs	r2, #0
 513 002a 5A61     		str	r2, [r3, #20]
 416:./Lib/Src/stm32f4xx_dma.c **** 
 417:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 418:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 514              		.loc 1 418 33
 515 002c 7B68     		ldr	r3, [r7, #4]
 516 002e 0022     		movs	r2, #0
 517 0030 9A61     		str	r2, [r3, #24]
 419:./Lib/Src/stm32f4xx_dma.c **** 
 420:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 421:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 518              		.loc 1 421 42
 519 0032 7B68     		ldr	r3, [r7, #4]
 520 0034 0022     		movs	r2, #0
 521 0036 DA61     		str	r2, [r3, #28]
 422:./Lib/Src/stm32f4xx_dma.c **** 
 423:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 424:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 522              		.loc 1 424 38
 523 0038 7B68     		ldr	r3, [r7, #4]
 524 003a 0022     		movs	r2, #0
 525 003c 1A62     		str	r2, [r3, #32]
 425:./Lib/Src/stm32f4xx_dma.c **** 
 426:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 427:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 526              		.loc 1 427 28
 527 003e 7B68     		ldr	r3, [r7, #4]
 528 0040 0022     		movs	r2, #0
 529 0042 5A62     		str	r2, [r3, #36]
 428:./Lib/Src/stm32f4xx_dma.c **** 
 429:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 430:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 530              		.loc 1 430 32
 531 0044 7B68     		ldr	r3, [r7, #4]
 532 0046 0022     		movs	r2, #0
 533 0048 9A62     		str	r2, [r3, #40]
 431:./Lib/Src/stm32f4xx_dma.c **** 
 432:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 433:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 534              		.loc 1 433 32
 535 004a 7B68     		ldr	r3, [r7, #4]
 536 004c 0022     		movs	r2, #0
 537 004e DA62     		str	r2, [r3, #44]
 434:./Lib/Src/stm32f4xx_dma.c **** 
 435:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 436:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 538              		.loc 1 436 37
 539 0050 7B68     		ldr	r3, [r7, #4]
 540 0052 0022     		movs	r2, #0
 541 0054 1A63     		str	r2, [r3, #48]
 437:./Lib/Src/stm32f4xx_dma.c **** 
 438:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 439:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 542              		.loc 1 439 35
ARM GAS  /tmp/ccIOm5Mq.s 			page 19


 543 0056 7B68     		ldr	r3, [r7, #4]
 544 0058 0022     		movs	r2, #0
 545 005a 5A63     		str	r2, [r3, #52]
 440:./Lib/Src/stm32f4xx_dma.c **** 
 441:./Lib/Src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 442:./Lib/Src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 546              		.loc 1 442 39
 547 005c 7B68     		ldr	r3, [r7, #4]
 548 005e 0022     		movs	r2, #0
 549 0060 9A63     		str	r2, [r3, #56]
 443:./Lib/Src/stm32f4xx_dma.c **** }
 550              		.loc 1 443 1
 551 0062 00BF     		nop
 552 0064 0C37     		adds	r7, r7, #12
 553              		.cfi_def_cfa_offset 4
 554 0066 BD46     		mov	sp, r7
 555              		.cfi_def_cfa_register 13
 556              		@ sp needed
 557 0068 5DF8047B 		ldr	r7, [sp], #4
 558              		.cfi_restore 7
 559              		.cfi_def_cfa_offset 0
 560 006c 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE125:
 564              		.section	.text.DMA_Cmd,"ax",%progbits
 565              		.align	1
 566              		.global	DMA_Cmd
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 571              	DMA_Cmd:
 572              	.LFB126:
 444:./Lib/Src/stm32f4xx_dma.c **** 
 445:./Lib/Src/stm32f4xx_dma.c **** /**
 446:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 447:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 448:./Lib/Src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 449:./Lib/Src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 450:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 451:./Lib/Src/stm32f4xx_dma.c ****   *
 452:./Lib/Src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 453:./Lib/Src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 454:./Lib/Src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 455:./Lib/Src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 456:./Lib/Src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 457:./Lib/Src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 458:./Lib/Src/stm32f4xx_dma.c ****   *    
 459:./Lib/Src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 460:./Lib/Src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 461:./Lib/Src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 462:./Lib/Src/stm32f4xx_dma.c ****   *        parameter is wrong.
 463:./Lib/Src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 464:./Lib/Src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 465:./Lib/Src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 466:./Lib/Src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 467:./Lib/Src/stm32f4xx_dma.c ****   *        this single data is finished.            
 468:./Lib/Src/stm32f4xx_dma.c ****   *    
ARM GAS  /tmp/ccIOm5Mq.s 			page 20


 469:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 470:./Lib/Src/stm32f4xx_dma.c ****   */
 471:./Lib/Src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 472:./Lib/Src/stm32f4xx_dma.c **** {
 573              		.loc 1 472 1
 574              		.cfi_startproc
 575              		@ args = 0, pretend = 0, frame = 8
 576              		@ frame_needed = 1, uses_anonymous_args = 0
 577              		@ link register save eliminated.
 578 0000 80B4     		push	{r7}
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 83B0     		sub	sp, sp, #12
 582              		.cfi_def_cfa_offset 16
 583 0004 00AF     		add	r7, sp, #0
 584              		.cfi_def_cfa_register 7
 585 0006 7860     		str	r0, [r7, #4]
 586 0008 0B46     		mov	r3, r1
 587 000a FB70     		strb	r3, [r7, #3]
 473:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 474:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 475:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 476:./Lib/Src/stm32f4xx_dma.c **** 
 477:./Lib/Src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 588              		.loc 1 477 6
 589 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 590 000e 002B     		cmp	r3, #0
 591 0010 06D0     		beq	.L26
 478:./Lib/Src/stm32f4xx_dma.c ****   {
 479:./Lib/Src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 480:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 592              		.loc 1 480 17
 593 0012 7B68     		ldr	r3, [r7, #4]
 594 0014 1B68     		ldr	r3, [r3]
 595              		.loc 1 480 22
 596 0016 43F00102 		orr	r2, r3, #1
 597 001a 7B68     		ldr	r3, [r7, #4]
 598 001c 1A60     		str	r2, [r3]
 481:./Lib/Src/stm32f4xx_dma.c ****   }
 482:./Lib/Src/stm32f4xx_dma.c ****   else
 483:./Lib/Src/stm32f4xx_dma.c ****   {
 484:./Lib/Src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 485:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 486:./Lib/Src/stm32f4xx_dma.c ****   }
 487:./Lib/Src/stm32f4xx_dma.c **** }
 599              		.loc 1 487 1
 600 001e 05E0     		b	.L28
 601              	.L26:
 485:./Lib/Src/stm32f4xx_dma.c ****   }
 602              		.loc 1 485 17
 603 0020 7B68     		ldr	r3, [r7, #4]
 604 0022 1B68     		ldr	r3, [r3]
 485:./Lib/Src/stm32f4xx_dma.c ****   }
 605              		.loc 1 485 22
 606 0024 23F00102 		bic	r2, r3, #1
 607 0028 7B68     		ldr	r3, [r7, #4]
 608 002a 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccIOm5Mq.s 			page 21


 609              	.L28:
 610              		.loc 1 487 1
 611 002c 00BF     		nop
 612 002e 0C37     		adds	r7, r7, #12
 613              		.cfi_def_cfa_offset 4
 614 0030 BD46     		mov	sp, r7
 615              		.cfi_def_cfa_register 13
 616              		@ sp needed
 617 0032 5DF8047B 		ldr	r7, [sp], #4
 618              		.cfi_restore 7
 619              		.cfi_def_cfa_offset 0
 620 0036 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE126:
 624              		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 625              		.align	1
 626              		.global	DMA_PeriphIncOffsetSizeConfig
 627              		.syntax unified
 628              		.thumb
 629              		.thumb_func
 631              	DMA_PeriphIncOffsetSizeConfig:
 632              	.LFB127:
 488:./Lib/Src/stm32f4xx_dma.c **** 
 489:./Lib/Src/stm32f4xx_dma.c **** /**
 490:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 491:./Lib/Src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 492:./Lib/Src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 493:./Lib/Src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 494:./Lib/Src/stm32f4xx_dma.c ****   *   
 495:./Lib/Src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 496:./Lib/Src/stm32f4xx_dma.c ****   *     
 497:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 498:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 499:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 500:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 501:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 502:./Lib/Src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 503:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 504:./Lib/Src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 505:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 506:./Lib/Src/stm32f4xx_dma.c ****   */
 507:./Lib/Src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 508:./Lib/Src/stm32f4xx_dma.c **** {
 633              		.loc 1 508 1
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637              		@ link register save eliminated.
 638 0000 80B4     		push	{r7}
 639              		.cfi_def_cfa_offset 4
 640              		.cfi_offset 7, -4
 641 0002 83B0     		sub	sp, sp, #12
 642              		.cfi_def_cfa_offset 16
 643 0004 00AF     		add	r7, sp, #0
 644              		.cfi_def_cfa_register 7
 645 0006 7860     		str	r0, [r7, #4]
 646 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccIOm5Mq.s 			page 22


 509:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 510:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 511:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 512:./Lib/Src/stm32f4xx_dma.c **** 
 513:./Lib/Src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 514:./Lib/Src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 647              		.loc 1 514 5
 648 000a 3B68     		ldr	r3, [r7]
 649 000c 002B     		cmp	r3, #0
 650 000e 06D0     		beq	.L30
 515:./Lib/Src/stm32f4xx_dma.c ****   {
 516:./Lib/Src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 517:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 651              		.loc 1 517 17
 652 0010 7B68     		ldr	r3, [r7, #4]
 653 0012 1B68     		ldr	r3, [r3]
 654              		.loc 1 517 22
 655 0014 43F40042 		orr	r2, r3, #32768
 656 0018 7B68     		ldr	r3, [r7, #4]
 657 001a 1A60     		str	r2, [r3]
 518:./Lib/Src/stm32f4xx_dma.c ****   }
 519:./Lib/Src/stm32f4xx_dma.c ****   else
 520:./Lib/Src/stm32f4xx_dma.c ****   {
 521:./Lib/Src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 522:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 523:./Lib/Src/stm32f4xx_dma.c ****   }
 524:./Lib/Src/stm32f4xx_dma.c **** }
 658              		.loc 1 524 1
 659 001c 05E0     		b	.L32
 660              	.L30:
 522:./Lib/Src/stm32f4xx_dma.c ****   }
 661              		.loc 1 522 17
 662 001e 7B68     		ldr	r3, [r7, #4]
 663 0020 1B68     		ldr	r3, [r3]
 522:./Lib/Src/stm32f4xx_dma.c ****   }
 664              		.loc 1 522 22
 665 0022 23F40042 		bic	r2, r3, #32768
 666 0026 7B68     		ldr	r3, [r7, #4]
 667 0028 1A60     		str	r2, [r3]
 668              	.L32:
 669              		.loc 1 524 1
 670 002a 00BF     		nop
 671 002c 0C37     		adds	r7, r7, #12
 672              		.cfi_def_cfa_offset 4
 673 002e BD46     		mov	sp, r7
 674              		.cfi_def_cfa_register 13
 675              		@ sp needed
 676 0030 5DF8047B 		ldr	r7, [sp], #4
 677              		.cfi_restore 7
 678              		.cfi_def_cfa_offset 0
 679 0034 7047     		bx	lr
 680              		.cfi_endproc
 681              	.LFE127:
 683              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 684              		.align	1
 685              		.global	DMA_FlowControllerConfig
 686              		.syntax unified
ARM GAS  /tmp/ccIOm5Mq.s 			page 23


 687              		.thumb
 688              		.thumb_func
 690              	DMA_FlowControllerConfig:
 691              	.LFB128:
 525:./Lib/Src/stm32f4xx_dma.c **** 
 526:./Lib/Src/stm32f4xx_dma.c **** /**
 527:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 528:./Lib/Src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 529:./Lib/Src/stm32f4xx_dma.c ****   *       
 530:./Lib/Src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 531:./Lib/Src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 532:./Lib/Src/stm32f4xx_dma.c ****   *  
 533:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 534:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 535:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 536:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 537:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 538:./Lib/Src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 539:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 540:./Lib/Src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 541:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 542:./Lib/Src/stm32f4xx_dma.c ****   */
 543:./Lib/Src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 544:./Lib/Src/stm32f4xx_dma.c **** {
 692              		.loc 1 544 1
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 8
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696              		@ link register save eliminated.
 697 0000 80B4     		push	{r7}
 698              		.cfi_def_cfa_offset 4
 699              		.cfi_offset 7, -4
 700 0002 83B0     		sub	sp, sp, #12
 701              		.cfi_def_cfa_offset 16
 702 0004 00AF     		add	r7, sp, #0
 703              		.cfi_def_cfa_register 7
 704 0006 7860     		str	r0, [r7, #4]
 705 0008 3960     		str	r1, [r7]
 545:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 546:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 547:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 548:./Lib/Src/stm32f4xx_dma.c **** 
 549:./Lib/Src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 550:./Lib/Src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 706              		.loc 1 550 5
 707 000a 3B68     		ldr	r3, [r7]
 708 000c 002B     		cmp	r3, #0
 709 000e 06D0     		beq	.L34
 551:./Lib/Src/stm32f4xx_dma.c ****   {
 552:./Lib/Src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 553:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 710              		.loc 1 553 17
 711 0010 7B68     		ldr	r3, [r7, #4]
 712 0012 1B68     		ldr	r3, [r3]
 713              		.loc 1 553 22
 714 0014 43F02002 		orr	r2, r3, #32
 715 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccIOm5Mq.s 			page 24


 716 001a 1A60     		str	r2, [r3]
 554:./Lib/Src/stm32f4xx_dma.c ****   }
 555:./Lib/Src/stm32f4xx_dma.c ****   else
 556:./Lib/Src/stm32f4xx_dma.c ****   {
 557:./Lib/Src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 558:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 559:./Lib/Src/stm32f4xx_dma.c ****   }
 560:./Lib/Src/stm32f4xx_dma.c **** }
 717              		.loc 1 560 1
 718 001c 05E0     		b	.L36
 719              	.L34:
 558:./Lib/Src/stm32f4xx_dma.c ****   }
 720              		.loc 1 558 17
 721 001e 7B68     		ldr	r3, [r7, #4]
 722 0020 1B68     		ldr	r3, [r3]
 558:./Lib/Src/stm32f4xx_dma.c ****   }
 723              		.loc 1 558 22
 724 0022 23F02002 		bic	r2, r3, #32
 725 0026 7B68     		ldr	r3, [r7, #4]
 726 0028 1A60     		str	r2, [r3]
 727              	.L36:
 728              		.loc 1 560 1
 729 002a 00BF     		nop
 730 002c 0C37     		adds	r7, r7, #12
 731              		.cfi_def_cfa_offset 4
 732 002e BD46     		mov	sp, r7
 733              		.cfi_def_cfa_register 13
 734              		@ sp needed
 735 0030 5DF8047B 		ldr	r7, [sp], #4
 736              		.cfi_restore 7
 737              		.cfi_def_cfa_offset 0
 738 0034 7047     		bx	lr
 739              		.cfi_endproc
 740              	.LFE128:
 742              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 743              		.align	1
 744              		.global	DMA_SetCurrDataCounter
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 749              	DMA_SetCurrDataCounter:
 750              	.LFB129:
 561:./Lib/Src/stm32f4xx_dma.c **** /**
 562:./Lib/Src/stm32f4xx_dma.c ****   * @}
 563:./Lib/Src/stm32f4xx_dma.c ****   */
 564:./Lib/Src/stm32f4xx_dma.c **** 
 565:./Lib/Src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 566:./Lib/Src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 567:./Lib/Src/stm32f4xx_dma.c ****  *
 568:./Lib/Src/stm32f4xx_dma.c **** @verbatim   
 569:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================
 570:./Lib/Src/stm32f4xx_dma.c ****                       ##### Data Counter functions #####
 571:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================  
 572:./Lib/Src/stm32f4xx_dma.c ****     [..]
 573:./Lib/Src/stm32f4xx_dma.c ****     This subsection provides function allowing to configure and read the buffer size
 574:./Lib/Src/stm32f4xx_dma.c ****     (number of data to be transferred). 
 575:./Lib/Src/stm32f4xx_dma.c ****     [..]
ARM GAS  /tmp/ccIOm5Mq.s 			page 25


 576:./Lib/Src/stm32f4xx_dma.c ****     The DMA data counter can be written only when the DMA Stream is disabled 
 577:./Lib/Src/stm32f4xx_dma.c ****     (ie. after transfer complete event).
 578:./Lib/Src/stm32f4xx_dma.c ****     [..]
 579:./Lib/Src/stm32f4xx_dma.c ****     The following function can be used to write the Stream data counter value:
 580:./Lib/Src/stm32f4xx_dma.c ****       (+) void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 581:./Lib/Src/stm32f4xx_dma.c ****       -@- It is advised to use this function rather than DMA_Init() in situations 
 582:./Lib/Src/stm32f4xx_dma.c ****           where only the Data buffer needs to be reloaded.
 583:./Lib/Src/stm32f4xx_dma.c ****       -@- If the Source and Destination Data Sizes are different, then the value 
 584:./Lib/Src/stm32f4xx_dma.c ****           written in data counter, expressing the number of transfers, is relative 
 585:./Lib/Src/stm32f4xx_dma.c ****           to the number of transfers from the Peripheral point of view.
 586:./Lib/Src/stm32f4xx_dma.c ****           ie. If Memory data size is Word, Peripheral data size is Half-Words, 
 587:./Lib/Src/stm32f4xx_dma.c ****           then the value to be configured in the data counter is the number 
 588:./Lib/Src/stm32f4xx_dma.c ****           of Half-Words to be transferred from/to the peripheral.
 589:./Lib/Src/stm32f4xx_dma.c ****     [..]
 590:./Lib/Src/stm32f4xx_dma.c ****     The DMA data counter can be read to indicate the number of remaining transfers for
 591:./Lib/Src/stm32f4xx_dma.c ****     the relative DMA Stream. This counter is decremented at the end of each data 
 592:./Lib/Src/stm32f4xx_dma.c ****     transfer and when the transfer is complete: 
 593:./Lib/Src/stm32f4xx_dma.c ****       (+) If Normal mode is selected: the counter is set to 0.
 594:./Lib/Src/stm32f4xx_dma.c ****       (+) If Circular mode is selected: the counter is reloaded with the initial value
 595:./Lib/Src/stm32f4xx_dma.c ****           (configured before enabling the DMA Stream)
 596:./Lib/Src/stm32f4xx_dma.c ****      [..]
 597:./Lib/Src/stm32f4xx_dma.c ****      The following function can be used to read the Stream data counter value:
 598:./Lib/Src/stm32f4xx_dma.c ****        (+) uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 599:./Lib/Src/stm32f4xx_dma.c **** 
 600:./Lib/Src/stm32f4xx_dma.c **** @endverbatim
 601:./Lib/Src/stm32f4xx_dma.c ****   * @{
 602:./Lib/Src/stm32f4xx_dma.c ****   */
 603:./Lib/Src/stm32f4xx_dma.c **** 
 604:./Lib/Src/stm32f4xx_dma.c **** /**
 605:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 606:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 607:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 608:./Lib/Src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 609:./Lib/Src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 610:./Lib/Src/stm32f4xx_dma.c ****   *            
 611:./Lib/Src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 612:./Lib/Src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 613:./Lib/Src/stm32f4xx_dma.c ****   *           
 614:./Lib/Src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 615:./Lib/Src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 616:./Lib/Src/stm32f4xx_dma.c ****   *           
 617:./Lib/Src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 618:./Lib/Src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 619:./Lib/Src/stm32f4xx_dma.c ****   *      
 620:./Lib/Src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 621:./Lib/Src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 622:./Lib/Src/stm32f4xx_dma.c ****   *      
 623:./Lib/Src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 624:./Lib/Src/stm32f4xx_dma.c ****   */
 625:./Lib/Src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 626:./Lib/Src/stm32f4xx_dma.c **** {
 751              		.loc 1 626 1
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 8
 754              		@ frame_needed = 1, uses_anonymous_args = 0
 755              		@ link register save eliminated.
 756 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccIOm5Mq.s 			page 26


 757              		.cfi_def_cfa_offset 4
 758              		.cfi_offset 7, -4
 759 0002 83B0     		sub	sp, sp, #12
 760              		.cfi_def_cfa_offset 16
 761 0004 00AF     		add	r7, sp, #0
 762              		.cfi_def_cfa_register 7
 763 0006 7860     		str	r0, [r7, #4]
 764 0008 0B46     		mov	r3, r1
 765 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 627:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 628:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 629:./Lib/Src/stm32f4xx_dma.c **** 
 630:./Lib/Src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 631:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 766              		.loc 1 631 24
 767 000c 7A88     		ldrh	r2, [r7, #2]
 768              		.loc 1 631 22
 769 000e 7B68     		ldr	r3, [r7, #4]
 770 0010 5A60     		str	r2, [r3, #4]
 632:./Lib/Src/stm32f4xx_dma.c **** }
 771              		.loc 1 632 1
 772 0012 00BF     		nop
 773 0014 0C37     		adds	r7, r7, #12
 774              		.cfi_def_cfa_offset 4
 775 0016 BD46     		mov	sp, r7
 776              		.cfi_def_cfa_register 13
 777              		@ sp needed
 778 0018 5DF8047B 		ldr	r7, [sp], #4
 779              		.cfi_restore 7
 780              		.cfi_def_cfa_offset 0
 781 001c 7047     		bx	lr
 782              		.cfi_endproc
 783              	.LFE129:
 785              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 786              		.align	1
 787              		.global	DMA_GetCurrDataCounter
 788              		.syntax unified
 789              		.thumb
 790              		.thumb_func
 792              	DMA_GetCurrDataCounter:
 793              	.LFB130:
 633:./Lib/Src/stm32f4xx_dma.c **** 
 634:./Lib/Src/stm32f4xx_dma.c **** /**
 635:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 636:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 637:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 638:./Lib/Src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 639:./Lib/Src/stm32f4xx_dma.c ****   */
 640:./Lib/Src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 641:./Lib/Src/stm32f4xx_dma.c **** {
 794              		.loc 1 641 1
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 8
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798              		@ link register save eliminated.
 799 0000 80B4     		push	{r7}
 800              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccIOm5Mq.s 			page 27


 801              		.cfi_offset 7, -4
 802 0002 83B0     		sub	sp, sp, #12
 803              		.cfi_def_cfa_offset 16
 804 0004 00AF     		add	r7, sp, #0
 805              		.cfi_def_cfa_register 7
 806 0006 7860     		str	r0, [r7, #4]
 642:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 643:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 644:./Lib/Src/stm32f4xx_dma.c **** 
 645:./Lib/Src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 646:./Lib/Src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 807              		.loc 1 646 34
 808 0008 7B68     		ldr	r3, [r7, #4]
 809 000a 5B68     		ldr	r3, [r3, #4]
 810              		.loc 1 646 11
 811 000c 9BB2     		uxth	r3, r3
 647:./Lib/Src/stm32f4xx_dma.c **** }
 812              		.loc 1 647 1
 813 000e 1846     		mov	r0, r3
 814 0010 0C37     		adds	r7, r7, #12
 815              		.cfi_def_cfa_offset 4
 816 0012 BD46     		mov	sp, r7
 817              		.cfi_def_cfa_register 13
 818              		@ sp needed
 819 0014 5DF8047B 		ldr	r7, [sp], #4
 820              		.cfi_restore 7
 821              		.cfi_def_cfa_offset 0
 822 0018 7047     		bx	lr
 823              		.cfi_endproc
 824              	.LFE130:
 826              		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 827              		.align	1
 828              		.global	DMA_DoubleBufferModeConfig
 829              		.syntax unified
 830              		.thumb
 831              		.thumb_func
 833              	DMA_DoubleBufferModeConfig:
 834              	.LFB131:
 648:./Lib/Src/stm32f4xx_dma.c **** /**
 649:./Lib/Src/stm32f4xx_dma.c ****   * @}
 650:./Lib/Src/stm32f4xx_dma.c ****   */
 651:./Lib/Src/stm32f4xx_dma.c **** 
 652:./Lib/Src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 653:./Lib/Src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 654:./Lib/Src/stm32f4xx_dma.c ****  *
 655:./Lib/Src/stm32f4xx_dma.c **** @verbatim   
 656:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================
 657:./Lib/Src/stm32f4xx_dma.c ****                     ##### Double Buffer mode functions #####
 658:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================  
 659:./Lib/Src/stm32f4xx_dma.c ****     [..]
 660:./Lib/Src/stm32f4xx_dma.c ****     This subsection provides function allowing to configure and control the double 
 661:./Lib/Src/stm32f4xx_dma.c ****     buffer mode parameters.
 662:./Lib/Src/stm32f4xx_dma.c ****     
 663:./Lib/Src/stm32f4xx_dma.c ****     [..]
 664:./Lib/Src/stm32f4xx_dma.c ****     The Double Buffer mode can be used only when Circular mode is enabled.
 665:./Lib/Src/stm32f4xx_dma.c ****     The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:./Lib/Src/stm32f4xx_dma.c ****     
ARM GAS  /tmp/ccIOm5Mq.s 			page 28


 667:./Lib/Src/stm32f4xx_dma.c ****     [..]
 668:./Lib/Src/stm32f4xx_dma.c ****     The Double Buffer mode allows to set two different Memory addresses from/to which
 669:./Lib/Src/stm32f4xx_dma.c ****     the DMA controller will access alternatively (after completing transfer to/from 
 670:./Lib/Src/stm32f4xx_dma.c ****     target memory 0, it will start transfer to/from target memory 1).
 671:./Lib/Src/stm32f4xx_dma.c ****     This allows to reduce software overhead for double buffering and reduce the CPU
 672:./Lib/Src/stm32f4xx_dma.c ****     access time.
 673:./Lib/Src/stm32f4xx_dma.c ****     
 674:./Lib/Src/stm32f4xx_dma.c ****     [..]
 675:./Lib/Src/stm32f4xx_dma.c ****     Two functions must be called before calling the DMA_Init() function:
 676:./Lib/Src/stm32f4xx_dma.c ****       (+) void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, 
 677:./Lib/Src/stm32f4xx_dma.c ****           uint32_t Memory1BaseAddr, uint32_t DMA_CurrentMemory);
 678:./Lib/Src/stm32f4xx_dma.c ****       (+) void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 679:./Lib/Src/stm32f4xx_dma.c ****       
 680:./Lib/Src/stm32f4xx_dma.c ****     [..]
 681:./Lib/Src/stm32f4xx_dma.c ****     DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address 
 682:./Lib/Src/stm32f4xx_dma.c ****     and the first Memory target from/to which the transfer will start after 
 683:./Lib/Src/stm32f4xx_dma.c ****     enabling the DMA Stream. Then DMA_DoubleBufferModeCmd() must be called 
 684:./Lib/Src/stm32f4xx_dma.c ****     to enable the Double Buffer mode (or disable it when it should not be used).
 685:./Lib/Src/stm32f4xx_dma.c ****   
 686:./Lib/Src/stm32f4xx_dma.c ****     [..]
 687:./Lib/Src/stm32f4xx_dma.c ****     Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is
 688:./Lib/Src/stm32f4xx_dma.c ****     stopped) to modify on of the target Memories addresses or to check which Memory target is curre
 689:./Lib/Src/stm32f4xx_dma.c ****     used:
 690:./Lib/Src/stm32f4xx_dma.c ****       (+) void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, 
 691:./Lib/Src/stm32f4xx_dma.c ****                 uint32_t MemoryBaseAddr, uint32_t DMA_MemoryTarget);
 692:./Lib/Src/stm32f4xx_dma.c ****       (+) uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 693:./Lib/Src/stm32f4xx_dma.c ****       
 694:./Lib/Src/stm32f4xx_dma.c ****     [..]
 695:./Lib/Src/stm32f4xx_dma.c ****     DMA_MemoryTargetConfig() can be called to modify the base address of one of 
 696:./Lib/Src/stm32f4xx_dma.c ****     the two target Memories.
 697:./Lib/Src/stm32f4xx_dma.c ****     The Memory of which the base address will be modified must not be currently 
 698:./Lib/Src/stm32f4xx_dma.c ****     be used by the DMA Stream (ie. if the DMA Stream is currently transferring 
 699:./Lib/Src/stm32f4xx_dma.c ****     from Memory 1 then you can only modify base address of target Memory 0 and vice versa).
 700:./Lib/Src/stm32f4xx_dma.c ****     To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() whi
 701:./Lib/Src/stm32f4xx_dma.c ****     returns the index of the Memory target currently in use by the DMA Stream.
 702:./Lib/Src/stm32f4xx_dma.c **** 
 703:./Lib/Src/stm32f4xx_dma.c **** @endverbatim
 704:./Lib/Src/stm32f4xx_dma.c ****   * @{
 705:./Lib/Src/stm32f4xx_dma.c ****   */
 706:./Lib/Src/stm32f4xx_dma.c ****   
 707:./Lib/Src/stm32f4xx_dma.c **** /**
 708:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 709:./Lib/Src/stm32f4xx_dma.c ****   *         and the current memory target.
 710:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 711:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 712:./Lib/Src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 713:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 714:./Lib/Src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 715:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 716:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 717:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 718:./Lib/Src/stm32f4xx_dma.c ****   *       
 719:./Lib/Src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 720:./Lib/Src/stm32f4xx_dma.c ****   *   
 721:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 722:./Lib/Src/stm32f4xx_dma.c ****   */
 723:./Lib/Src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
ARM GAS  /tmp/ccIOm5Mq.s 			page 29


 724:./Lib/Src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 725:./Lib/Src/stm32f4xx_dma.c **** {  
 835              		.loc 1 725 1
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 16
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839              		@ link register save eliminated.
 840 0000 80B4     		push	{r7}
 841              		.cfi_def_cfa_offset 4
 842              		.cfi_offset 7, -4
 843 0002 85B0     		sub	sp, sp, #20
 844              		.cfi_def_cfa_offset 24
 845 0004 00AF     		add	r7, sp, #0
 846              		.cfi_def_cfa_register 7
 847 0006 F860     		str	r0, [r7, #12]
 848 0008 B960     		str	r1, [r7, #8]
 849 000a 7A60     		str	r2, [r7, #4]
 726:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 727:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 728:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 729:./Lib/Src/stm32f4xx_dma.c **** 
 730:./Lib/Src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 850              		.loc 1 730 6
 851 000c 7B68     		ldr	r3, [r7, #4]
 852 000e 002B     		cmp	r3, #0
 853 0010 06D0     		beq	.L41
 731:./Lib/Src/stm32f4xx_dma.c ****   {
 732:./Lib/Src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 733:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 854              		.loc 1 733 17
 855 0012 FB68     		ldr	r3, [r7, #12]
 856 0014 1B68     		ldr	r3, [r3]
 857              		.loc 1 733 22
 858 0016 43F40022 		orr	r2, r3, #524288
 859 001a FB68     		ldr	r3, [r7, #12]
 860 001c 1A60     		str	r2, [r3]
 861 001e 05E0     		b	.L42
 862              	.L41:
 734:./Lib/Src/stm32f4xx_dma.c ****   }
 735:./Lib/Src/stm32f4xx_dma.c ****   else
 736:./Lib/Src/stm32f4xx_dma.c ****   {
 737:./Lib/Src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 738:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 863              		.loc 1 738 17
 864 0020 FB68     		ldr	r3, [r7, #12]
 865 0022 1B68     		ldr	r3, [r3]
 866              		.loc 1 738 22
 867 0024 23F40022 		bic	r2, r3, #524288
 868 0028 FB68     		ldr	r3, [r7, #12]
 869 002a 1A60     		str	r2, [r3]
 870              	.L42:
 739:./Lib/Src/stm32f4xx_dma.c ****   }
 740:./Lib/Src/stm32f4xx_dma.c **** 
 741:./Lib/Src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 742:./Lib/Src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 871              		.loc 1 742 22
 872 002c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccIOm5Mq.s 			page 30


 873 002e BA68     		ldr	r2, [r7, #8]
 874 0030 1A61     		str	r2, [r3, #16]
 743:./Lib/Src/stm32f4xx_dma.c **** }
 875              		.loc 1 743 1
 876 0032 00BF     		nop
 877 0034 1437     		adds	r7, r7, #20
 878              		.cfi_def_cfa_offset 4
 879 0036 BD46     		mov	sp, r7
 880              		.cfi_def_cfa_register 13
 881              		@ sp needed
 882 0038 5DF8047B 		ldr	r7, [sp], #4
 883              		.cfi_restore 7
 884              		.cfi_def_cfa_offset 0
 885 003c 7047     		bx	lr
 886              		.cfi_endproc
 887              	.LFE131:
 889              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 890              		.align	1
 891              		.global	DMA_DoubleBufferModeCmd
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 896              	DMA_DoubleBufferModeCmd:
 897              	.LFB132:
 744:./Lib/Src/stm32f4xx_dma.c **** 
 745:./Lib/Src/stm32f4xx_dma.c **** /**
 746:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 747:./Lib/Src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 748:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 749:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 750:./Lib/Src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 751:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 752:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 753:./Lib/Src/stm32f4xx_dma.c ****   */
 754:./Lib/Src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 755:./Lib/Src/stm32f4xx_dma.c **** {  
 898              		.loc 1 755 1
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 8
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 903 0000 80B4     		push	{r7}
 904              		.cfi_def_cfa_offset 4
 905              		.cfi_offset 7, -4
 906 0002 83B0     		sub	sp, sp, #12
 907              		.cfi_def_cfa_offset 16
 908 0004 00AF     		add	r7, sp, #0
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 911 0008 0B46     		mov	r3, r1
 912 000a FB70     		strb	r3, [r7, #3]
 756:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 757:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 758:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 759:./Lib/Src/stm32f4xx_dma.c **** 
 760:./Lib/Src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 761:./Lib/Src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
ARM GAS  /tmp/ccIOm5Mq.s 			page 31


 913              		.loc 1 761 6
 914 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 915 000e 002B     		cmp	r3, #0
 916 0010 06D0     		beq	.L44
 762:./Lib/Src/stm32f4xx_dma.c ****   {
 763:./Lib/Src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 764:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 917              		.loc 1 764 17
 918 0012 7B68     		ldr	r3, [r7, #4]
 919 0014 1B68     		ldr	r3, [r3]
 920              		.loc 1 764 22
 921 0016 43F48022 		orr	r2, r3, #262144
 922 001a 7B68     		ldr	r3, [r7, #4]
 923 001c 1A60     		str	r2, [r3]
 765:./Lib/Src/stm32f4xx_dma.c ****   }
 766:./Lib/Src/stm32f4xx_dma.c ****   else
 767:./Lib/Src/stm32f4xx_dma.c ****   {
 768:./Lib/Src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 769:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 770:./Lib/Src/stm32f4xx_dma.c ****   }
 771:./Lib/Src/stm32f4xx_dma.c **** }
 924              		.loc 1 771 1
 925 001e 05E0     		b	.L46
 926              	.L44:
 769:./Lib/Src/stm32f4xx_dma.c ****   }
 927              		.loc 1 769 17
 928 0020 7B68     		ldr	r3, [r7, #4]
 929 0022 1B68     		ldr	r3, [r3]
 769:./Lib/Src/stm32f4xx_dma.c ****   }
 930              		.loc 1 769 22
 931 0024 23F48022 		bic	r2, r3, #262144
 932 0028 7B68     		ldr	r3, [r7, #4]
 933 002a 1A60     		str	r2, [r3]
 934              	.L46:
 935              		.loc 1 771 1
 936 002c 00BF     		nop
 937 002e 0C37     		adds	r7, r7, #12
 938              		.cfi_def_cfa_offset 4
 939 0030 BD46     		mov	sp, r7
 940              		.cfi_def_cfa_register 13
 941              		@ sp needed
 942 0032 5DF8047B 		ldr	r7, [sp], #4
 943              		.cfi_restore 7
 944              		.cfi_def_cfa_offset 0
 945 0036 7047     		bx	lr
 946              		.cfi_endproc
 947              	.LFE132:
 949              		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 950              		.align	1
 951              		.global	DMA_MemoryTargetConfig
 952              		.syntax unified
 953              		.thumb
 954              		.thumb_func
 956              	DMA_MemoryTargetConfig:
 957              	.LFB133:
 772:./Lib/Src/stm32f4xx_dma.c **** 
 773:./Lib/Src/stm32f4xx_dma.c **** /**
ARM GAS  /tmp/ccIOm5Mq.s 			page 32


 774:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 775:./Lib/Src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 776:./Lib/Src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 777:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 778:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 779:./Lib/Src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 780:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 781:./Lib/Src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 782:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 783:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 784:./Lib/Src/stm32f4xx_dma.c ****   * 
 785:./Lib/Src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 786:./Lib/Src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 787:./Lib/Src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 788:./Lib/Src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 789:./Lib/Src/stm32f4xx_dma.c ****   *          address of Memory 0.
 790:./Lib/Src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 791:./Lib/Src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 792:./Lib/Src/stm32f4xx_dma.c ****   *  
 793:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
 794:./Lib/Src/stm32f4xx_dma.c ****   */
 795:./Lib/Src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 796:./Lib/Src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 797:./Lib/Src/stm32f4xx_dma.c **** {
 958              		.loc 1 797 1
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 16
 961              		@ frame_needed = 1, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963 0000 80B4     		push	{r7}
 964              		.cfi_def_cfa_offset 4
 965              		.cfi_offset 7, -4
 966 0002 85B0     		sub	sp, sp, #20
 967              		.cfi_def_cfa_offset 24
 968 0004 00AF     		add	r7, sp, #0
 969              		.cfi_def_cfa_register 7
 970 0006 F860     		str	r0, [r7, #12]
 971 0008 B960     		str	r1, [r7, #8]
 972 000a 7A60     		str	r2, [r7, #4]
 798:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 799:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 800:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 801:./Lib/Src/stm32f4xx_dma.c ****     
 802:./Lib/Src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 803:./Lib/Src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 973              		.loc 1 803 6
 974 000c 7B68     		ldr	r3, [r7, #4]
 975 000e 002B     		cmp	r3, #0
 976 0010 03D0     		beq	.L48
 804:./Lib/Src/stm32f4xx_dma.c ****   {
 805:./Lib/Src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 806:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 977              		.loc 1 806 24
 978 0012 FB68     		ldr	r3, [r7, #12]
 979 0014 BA68     		ldr	r2, [r7, #8]
 980 0016 1A61     		str	r2, [r3, #16]
 807:./Lib/Src/stm32f4xx_dma.c ****   }  
ARM GAS  /tmp/ccIOm5Mq.s 			page 33


 808:./Lib/Src/stm32f4xx_dma.c ****   else
 809:./Lib/Src/stm32f4xx_dma.c ****   {
 810:./Lib/Src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 811:./Lib/Src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 812:./Lib/Src/stm32f4xx_dma.c ****   }
 813:./Lib/Src/stm32f4xx_dma.c **** }
 981              		.loc 1 813 1
 982 0018 02E0     		b	.L50
 983              	.L48:
 811:./Lib/Src/stm32f4xx_dma.c ****   }
 984              		.loc 1 811 24
 985 001a FB68     		ldr	r3, [r7, #12]
 986 001c BA68     		ldr	r2, [r7, #8]
 987 001e DA60     		str	r2, [r3, #12]
 988              	.L50:
 989              		.loc 1 813 1
 990 0020 00BF     		nop
 991 0022 1437     		adds	r7, r7, #20
 992              		.cfi_def_cfa_offset 4
 993 0024 BD46     		mov	sp, r7
 994              		.cfi_def_cfa_register 13
 995              		@ sp needed
 996 0026 5DF8047B 		ldr	r7, [sp], #4
 997              		.cfi_restore 7
 998              		.cfi_def_cfa_offset 0
 999 002a 7047     		bx	lr
 1000              		.cfi_endproc
 1001              	.LFE133:
 1003              		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 1004              		.align	1
 1005              		.global	DMA_GetCurrentMemoryTarget
 1006              		.syntax unified
 1007              		.thumb
 1008              		.thumb_func
 1010              	DMA_GetCurrentMemoryTarget:
 1011              	.LFB134:
 814:./Lib/Src/stm32f4xx_dma.c **** 
 815:./Lib/Src/stm32f4xx_dma.c **** /**
 816:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 817:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 818:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 819:./Lib/Src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 820:./Lib/Src/stm32f4xx_dma.c ****   */
 821:./Lib/Src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 822:./Lib/Src/stm32f4xx_dma.c **** {
 1012              		.loc 1 822 1
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 16
 1015              		@ frame_needed = 1, uses_anonymous_args = 0
 1016              		@ link register save eliminated.
 1017 0000 80B4     		push	{r7}
 1018              		.cfi_def_cfa_offset 4
 1019              		.cfi_offset 7, -4
 1020 0002 85B0     		sub	sp, sp, #20
 1021              		.cfi_def_cfa_offset 24
 1022 0004 00AF     		add	r7, sp, #0
 1023              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccIOm5Mq.s 			page 34


 1024 0006 7860     		str	r0, [r7, #4]
 823:./Lib/Src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 1025              		.loc 1 823 12
 1026 0008 0023     		movs	r3, #0
 1027 000a FB60     		str	r3, [r7, #12]
 824:./Lib/Src/stm32f4xx_dma.c ****   
 825:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 826:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 827:./Lib/Src/stm32f4xx_dma.c **** 
 828:./Lib/Src/stm32f4xx_dma.c ****   /* Get the current memory target */
 829:./Lib/Src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 1028              		.loc 1 829 20
 1029 000c 7B68     		ldr	r3, [r7, #4]
 1030 000e 1B68     		ldr	r3, [r3]
 1031              		.loc 1 829 25
 1032 0010 03F40023 		and	r3, r3, #524288
 1033              		.loc 1 829 6
 1034 0014 002B     		cmp	r3, #0
 1035 0016 02D0     		beq	.L52
 830:./Lib/Src/stm32f4xx_dma.c ****   {
 831:./Lib/Src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 832:./Lib/Src/stm32f4xx_dma.c ****     tmp = 1;
 1036              		.loc 1 832 9
 1037 0018 0123     		movs	r3, #1
 1038 001a FB60     		str	r3, [r7, #12]
 1039 001c 01E0     		b	.L53
 1040              	.L52:
 833:./Lib/Src/stm32f4xx_dma.c ****   }  
 834:./Lib/Src/stm32f4xx_dma.c ****   else
 835:./Lib/Src/stm32f4xx_dma.c ****   {
 836:./Lib/Src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 837:./Lib/Src/stm32f4xx_dma.c ****     tmp = 0;    
 1041              		.loc 1 837 9
 1042 001e 0023     		movs	r3, #0
 1043 0020 FB60     		str	r3, [r7, #12]
 1044              	.L53:
 838:./Lib/Src/stm32f4xx_dma.c ****   }
 839:./Lib/Src/stm32f4xx_dma.c ****   return tmp;
 1045              		.loc 1 839 10
 1046 0022 FB68     		ldr	r3, [r7, #12]
 840:./Lib/Src/stm32f4xx_dma.c **** }
 1047              		.loc 1 840 1
 1048 0024 1846     		mov	r0, r3
 1049 0026 1437     		adds	r7, r7, #20
 1050              		.cfi_def_cfa_offset 4
 1051 0028 BD46     		mov	sp, r7
 1052              		.cfi_def_cfa_register 13
 1053              		@ sp needed
 1054 002a 5DF8047B 		ldr	r7, [sp], #4
 1055              		.cfi_restore 7
 1056              		.cfi_def_cfa_offset 0
 1057 002e 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE134:
 1061              		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 1062              		.align	1
 1063              		.global	DMA_GetCmdStatus
ARM GAS  /tmp/ccIOm5Mq.s 			page 35


 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1068              	DMA_GetCmdStatus:
 1069              	.LFB135:
 841:./Lib/Src/stm32f4xx_dma.c **** /**
 842:./Lib/Src/stm32f4xx_dma.c ****   * @}
 843:./Lib/Src/stm32f4xx_dma.c ****   */
 844:./Lib/Src/stm32f4xx_dma.c **** 
 845:./Lib/Src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 846:./Lib/Src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 847:./Lib/Src/stm32f4xx_dma.c ****  *
 848:./Lib/Src/stm32f4xx_dma.c **** @verbatim   
 849:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================
 850:./Lib/Src/stm32f4xx_dma.c ****               ##### Interrupts and flags management functions #####
 851:./Lib/Src/stm32f4xx_dma.c ****  ===============================================================================  
 852:./Lib/Src/stm32f4xx_dma.c ****     [..]
 853:./Lib/Src/stm32f4xx_dma.c ****     This subsection provides functions allowing to
 854:./Lib/Src/stm32f4xx_dma.c ****       (+) Check the DMA enable status
 855:./Lib/Src/stm32f4xx_dma.c ****       (+) Check the FIFO status 
 856:./Lib/Src/stm32f4xx_dma.c ****       (+) Configure the DMA Interrupts sources and check or clear the flags or 
 857:./Lib/Src/stm32f4xx_dma.c ****           pending bits status.  
 858:./Lib/Src/stm32f4xx_dma.c ****            
 859:./Lib/Src/stm32f4xx_dma.c ****     [..]
 860:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA Enable status:
 861:./Lib/Src/stm32f4xx_dma.c ****           After configuring the DMA Stream (DMA_Init() function) and enabling 
 862:./Lib/Src/stm32f4xx_dma.c ****           the stream, it is recommended to check (or wait until) the DMA Stream 
 863:./Lib/Src/stm32f4xx_dma.c ****           is effectively enabled. A Stream may remain disabled if a configuration 
 864:./Lib/Src/stm32f4xx_dma.c ****           parameter is wrong. After disabling a DMA Stream, it is also recommended 
 865:./Lib/Src/stm32f4xx_dma.c ****           to check (or wait until) the DMA Stream is effectively disabled. 
 866:./Lib/Src/stm32f4xx_dma.c ****           If a Stream is disabled while a data transfer is ongoing, the current 
 867:./Lib/Src/stm32f4xx_dma.c ****           data will be transferred and the Stream will be effectively disabled 
 868:./Lib/Src/stm32f4xx_dma.c ****           only after this data transfer completion.
 869:./Lib/Src/stm32f4xx_dma.c ****           To monitor this state it is possible to use the following function:
 870:./Lib/Src/stm32f4xx_dma.c ****         (++) FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 871:./Lib/Src/stm32f4xx_dma.c ****  
 872:./Lib/Src/stm32f4xx_dma.c ****       (#) FIFO Status:
 873:./Lib/Src/stm32f4xx_dma.c ****           It is possible to monitor the FIFO status when a transfer is ongoing 
 874:./Lib/Src/stm32f4xx_dma.c ****           using the following function:
 875:./Lib/Src/stm32f4xx_dma.c ****         (++) uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 876:./Lib/Src/stm32f4xx_dma.c ****  
 877:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA Interrupts and Flags:
 878:./Lib/Src/stm32f4xx_dma.c ****           The user should identify which mode will be used in his application 
 879:./Lib/Src/stm32f4xx_dma.c ****           to manage the DMA controller events: Polling mode or Interrupt mode. 
 880:./Lib/Src/stm32f4xx_dma.c ****     
 881:./Lib/Src/stm32f4xx_dma.c ****     *** Polling Mode ***
 882:./Lib/Src/stm32f4xx_dma.c ****     ====================
 883:./Lib/Src/stm32f4xx_dma.c ****     [..]
 884:./Lib/Src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 885:./Lib/Src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 886:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 887:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 888:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 889:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 890:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 891:./Lib/Src/stm32f4xx_dma.c ****     [..]
 892:./Lib/Src/stm32f4xx_dma.c ****     In this Mode it is advised to use the following functions:
ARM GAS  /tmp/ccIOm5Mq.s 			page 36


 893:./Lib/Src/stm32f4xx_dma.c ****       (+) FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 894:./Lib/Src/stm32f4xx_dma.c ****       (+) void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 895:./Lib/Src/stm32f4xx_dma.c **** 
 896:./Lib/Src/stm32f4xx_dma.c ****     *** Interrupt Mode ***
 897:./Lib/Src/stm32f4xx_dma.c ****     ======================
 898:./Lib/Src/stm32f4xx_dma.c ****     [..]
 899:./Lib/Src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 900:./Lib/Src/stm32f4xx_dma.c **** 
 901:./Lib/Src/stm32f4xx_dma.c ****     *** Interrupt Source ***
 902:./Lib/Src/stm32f4xx_dma.c ****     ========================
 903:./Lib/Src/stm32f4xx_dma.c ****     [..]
 904:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 905:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 906:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 907:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 908:./Lib/Src/stm32f4xx_dma.c ****       (#) DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 909:./Lib/Src/stm32f4xx_dma.c ****     [..]
 910:./Lib/Src/stm32f4xx_dma.c ****     In this Mode it is advised to use the following functions:
 911:./Lib/Src/stm32f4xx_dma.c ****       (+) void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewS
 912:./Lib/Src/stm32f4xx_dma.c ****       (+) ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 913:./Lib/Src/stm32f4xx_dma.c ****       (+) void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 914:./Lib/Src/stm32f4xx_dma.c **** 
 915:./Lib/Src/stm32f4xx_dma.c **** @endverbatim
 916:./Lib/Src/stm32f4xx_dma.c ****   * @{
 917:./Lib/Src/stm32f4xx_dma.c ****   */
 918:./Lib/Src/stm32f4xx_dma.c **** 
 919:./Lib/Src/stm32f4xx_dma.c **** /**
 920:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 921:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 922:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 923:./Lib/Src/stm32f4xx_dma.c ****   *   
 924:./Lib/Src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 925:./Lib/Src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 926:./Lib/Src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 927:./Lib/Src/stm32f4xx_dma.c ****   *          parameter is wrong.
 928:./Lib/Src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 929:./Lib/Src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 930:./Lib/Src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 931:./Lib/Src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 932:./Lib/Src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 933:./Lib/Src/stm32f4xx_dma.c ****   *      
 934:./Lib/Src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 935:./Lib/Src/stm32f4xx_dma.c ****   */
 936:./Lib/Src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 937:./Lib/Src/stm32f4xx_dma.c **** {
 1070              		.loc 1 937 1
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 16
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075 0000 80B4     		push	{r7}
 1076              		.cfi_def_cfa_offset 4
 1077              		.cfi_offset 7, -4
 1078 0002 85B0     		sub	sp, sp, #20
 1079              		.cfi_def_cfa_offset 24
 1080 0004 00AF     		add	r7, sp, #0
 1081              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccIOm5Mq.s 			page 37


 1082 0006 7860     		str	r0, [r7, #4]
 938:./Lib/Src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 1083              		.loc 1 938 19
 1084 0008 0023     		movs	r3, #0
 1085 000a FB73     		strb	r3, [r7, #15]
 939:./Lib/Src/stm32f4xx_dma.c **** 
 940:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 941:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 942:./Lib/Src/stm32f4xx_dma.c **** 
 943:./Lib/Src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 1086              		.loc 1 943 20
 1087 000c 7B68     		ldr	r3, [r7, #4]
 1088 000e 1B68     		ldr	r3, [r3]
 1089              		.loc 1 943 25
 1090 0010 03F00103 		and	r3, r3, #1
 1091              		.loc 1 943 6
 1092 0014 002B     		cmp	r3, #0
 1093 0016 02D0     		beq	.L56
 944:./Lib/Src/stm32f4xx_dma.c ****   {
 945:./Lib/Src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 946:./Lib/Src/stm32f4xx_dma.c ****     state = ENABLE;
 1094              		.loc 1 946 11
 1095 0018 0123     		movs	r3, #1
 1096 001a FB73     		strb	r3, [r7, #15]
 1097 001c 01E0     		b	.L57
 1098              	.L56:
 947:./Lib/Src/stm32f4xx_dma.c ****   }
 948:./Lib/Src/stm32f4xx_dma.c ****   else
 949:./Lib/Src/stm32f4xx_dma.c ****   {
 950:./Lib/Src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 951:./Lib/Src/stm32f4xx_dma.c ****         all transfers are complete) */
 952:./Lib/Src/stm32f4xx_dma.c ****     state = DISABLE;
 1099              		.loc 1 952 11
 1100 001e 0023     		movs	r3, #0
 1101 0020 FB73     		strb	r3, [r7, #15]
 1102              	.L57:
 953:./Lib/Src/stm32f4xx_dma.c ****   }
 954:./Lib/Src/stm32f4xx_dma.c ****   return state;
 1103              		.loc 1 954 10
 1104 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 955:./Lib/Src/stm32f4xx_dma.c **** }
 1105              		.loc 1 955 1
 1106 0024 1846     		mov	r0, r3
 1107 0026 1437     		adds	r7, r7, #20
 1108              		.cfi_def_cfa_offset 4
 1109 0028 BD46     		mov	sp, r7
 1110              		.cfi_def_cfa_register 13
 1111              		@ sp needed
 1112 002a 5DF8047B 		ldr	r7, [sp], #4
 1113              		.cfi_restore 7
 1114              		.cfi_def_cfa_offset 0
 1115 002e 7047     		bx	lr
 1116              		.cfi_endproc
 1117              	.LFE135:
 1119              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 1120              		.align	1
 1121              		.global	DMA_GetFIFOStatus
ARM GAS  /tmp/ccIOm5Mq.s 			page 38


 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1126              	DMA_GetFIFOStatus:
 1127              	.LFB136:
 956:./Lib/Src/stm32f4xx_dma.c **** 
 957:./Lib/Src/stm32f4xx_dma.c **** /**
 958:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 959:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 960:./Lib/Src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 961:./Lib/Src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 962:./Lib/Src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 963:./Lib/Src/stm32f4xx_dma.c ****   *                                               and not empty.
 964:./Lib/Src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 965:./Lib/Src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 966:./Lib/Src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 967:./Lib/Src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 968:./Lib/Src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 969:./Lib/Src/stm32f4xx_dma.c ****   */
 970:./Lib/Src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 971:./Lib/Src/stm32f4xx_dma.c **** {
 1128              		.loc 1 971 1
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 16
 1131              		@ frame_needed = 1, uses_anonymous_args = 0
 1132              		@ link register save eliminated.
 1133 0000 80B4     		push	{r7}
 1134              		.cfi_def_cfa_offset 4
 1135              		.cfi_offset 7, -4
 1136 0002 85B0     		sub	sp, sp, #20
 1137              		.cfi_def_cfa_offset 24
 1138 0004 00AF     		add	r7, sp, #0
 1139              		.cfi_def_cfa_register 7
 1140 0006 7860     		str	r0, [r7, #4]
 972:./Lib/Src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1141              		.loc 1 972 12
 1142 0008 0023     		movs	r3, #0
 1143 000a FB60     		str	r3, [r7, #12]
 973:./Lib/Src/stm32f4xx_dma.c ****  
 974:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
 975:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 976:./Lib/Src/stm32f4xx_dma.c ****   
 977:./Lib/Src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 978:./Lib/Src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 1144              		.loc 1 978 36
 1145 000c 7B68     		ldr	r3, [r7, #4]
 1146 000e 5B69     		ldr	r3, [r3, #20]
 1147              		.loc 1 978 10
 1148 0010 03F03803 		and	r3, r3, #56
 1149 0014 FB60     		str	r3, [r7, #12]
 979:./Lib/Src/stm32f4xx_dma.c ****   
 980:./Lib/Src/stm32f4xx_dma.c ****   return tmpreg;
 1150              		.loc 1 980 10
 1151 0016 FB68     		ldr	r3, [r7, #12]
 981:./Lib/Src/stm32f4xx_dma.c **** }
 1152              		.loc 1 981 1
 1153 0018 1846     		mov	r0, r3
ARM GAS  /tmp/ccIOm5Mq.s 			page 39


 1154 001a 1437     		adds	r7, r7, #20
 1155              		.cfi_def_cfa_offset 4
 1156 001c BD46     		mov	sp, r7
 1157              		.cfi_def_cfa_register 13
 1158              		@ sp needed
 1159 001e 5DF8047B 		ldr	r7, [sp], #4
 1160              		.cfi_restore 7
 1161              		.cfi_def_cfa_offset 0
 1162 0022 7047     		bx	lr
 1163              		.cfi_endproc
 1164              	.LFE136:
 1166              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 1167              		.align	1
 1168              		.global	DMA_GetFlagStatus
 1169              		.syntax unified
 1170              		.thumb
 1171              		.thumb_func
 1173              	DMA_GetFlagStatus:
 1174              	.LFB137:
 982:./Lib/Src/stm32f4xx_dma.c **** 
 983:./Lib/Src/stm32f4xx_dma.c **** /**
 984:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 985:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 986:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 987:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 988:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 989:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 990:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 991:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 992:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 993:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 994:./Lib/Src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 995:./Lib/Src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 996:./Lib/Src/stm32f4xx_dma.c ****   */
 997:./Lib/Src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 998:./Lib/Src/stm32f4xx_dma.c **** {
 1175              		.loc 1 998 1
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 24
 1178              		@ frame_needed = 1, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
 1180 0000 80B4     		push	{r7}
 1181              		.cfi_def_cfa_offset 4
 1182              		.cfi_offset 7, -4
 1183 0002 87B0     		sub	sp, sp, #28
 1184              		.cfi_def_cfa_offset 32
 1185 0004 00AF     		add	r7, sp, #0
 1186              		.cfi_def_cfa_register 7
 1187 0006 7860     		str	r0, [r7, #4]
 1188 0008 3960     		str	r1, [r7]
 999:./Lib/Src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 1189              		.loc 1 999 14
 1190 000a 0023     		movs	r3, #0
 1191 000c FB75     		strb	r3, [r7, #23]
1000:./Lib/Src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1001:./Lib/Src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1192              		.loc 1 1001 12
ARM GAS  /tmp/ccIOm5Mq.s 			page 40


 1193 000e 0023     		movs	r3, #0
 1194 0010 FB60     		str	r3, [r7, #12]
1002:./Lib/Src/stm32f4xx_dma.c **** 
1003:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
1004:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1005:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
1006:./Lib/Src/stm32f4xx_dma.c **** 
1007:./Lib/Src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1008:./Lib/Src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1195              		.loc 1 1008 6
 1196 0012 7B68     		ldr	r3, [r7, #4]
 1197 0014 154A     		ldr	r2, .L69
 1198 0016 9342     		cmp	r3, r2
 1199 0018 02D8     		bhi	.L62
1009:./Lib/Src/stm32f4xx_dma.c ****   {
1010:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1011:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1200              		.loc 1 1011 10
 1201 001a 154B     		ldr	r3, .L69+4
 1202 001c 3B61     		str	r3, [r7, #16]
 1203 001e 01E0     		b	.L63
 1204              	.L62:
1012:./Lib/Src/stm32f4xx_dma.c ****   } 
1013:./Lib/Src/stm32f4xx_dma.c ****   else 
1014:./Lib/Src/stm32f4xx_dma.c ****   {
1015:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1016:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1205              		.loc 1 1016 10
 1206 0020 144B     		ldr	r3, .L69+8
 1207 0022 3B61     		str	r3, [r7, #16]
 1208              	.L63:
1017:./Lib/Src/stm32f4xx_dma.c ****   }
1018:./Lib/Src/stm32f4xx_dma.c **** 
1019:./Lib/Src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1020:./Lib/Src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1209              		.loc 1 1020 17
 1210 0024 3B68     		ldr	r3, [r7]
 1211 0026 03F00053 		and	r3, r3, #536870912
 1212              		.loc 1 1020 6
 1213 002a 002B     		cmp	r3, #0
 1214 002c 03D0     		beq	.L64
1021:./Lib/Src/stm32f4xx_dma.c ****   {
1022:./Lib/Src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1023:./Lib/Src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 1215              		.loc 1 1023 12
 1216 002e 3B69     		ldr	r3, [r7, #16]
 1217 0030 5B68     		ldr	r3, [r3, #4]
 1218 0032 FB60     		str	r3, [r7, #12]
 1219 0034 02E0     		b	.L65
 1220              	.L64:
1024:./Lib/Src/stm32f4xx_dma.c ****   }
1025:./Lib/Src/stm32f4xx_dma.c ****   else
1026:./Lib/Src/stm32f4xx_dma.c ****   {
1027:./Lib/Src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1028:./Lib/Src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 1221              		.loc 1 1028 12
 1222 0036 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccIOm5Mq.s 			page 41


 1223 0038 1B68     		ldr	r3, [r3]
 1224 003a FB60     		str	r3, [r7, #12]
 1225              	.L65:
1029:./Lib/Src/stm32f4xx_dma.c ****   }   
1030:./Lib/Src/stm32f4xx_dma.c ****  
1031:./Lib/Src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1032:./Lib/Src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1226              		.loc 1 1032 10
 1227 003c FB68     		ldr	r3, [r7, #12]
 1228 003e 23F0F023 		bic	r3, r3, #-268374016
 1229 0042 23F08213 		bic	r3, r3, #8519810
 1230 0046 FB60     		str	r3, [r7, #12]
1033:./Lib/Src/stm32f4xx_dma.c **** 
1034:./Lib/Src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1035:./Lib/Src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 1231              		.loc 1 1035 15
 1232 0048 FA68     		ldr	r2, [r7, #12]
 1233 004a 3B68     		ldr	r3, [r7]
 1234 004c 1340     		ands	r3, r3, r2
 1235              		.loc 1 1035 6
 1236 004e 002B     		cmp	r3, #0
 1237 0050 02D0     		beq	.L66
1036:./Lib/Src/stm32f4xx_dma.c ****   {
1037:./Lib/Src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1038:./Lib/Src/stm32f4xx_dma.c ****     bitstatus = SET;
 1238              		.loc 1 1038 15
 1239 0052 0123     		movs	r3, #1
 1240 0054 FB75     		strb	r3, [r7, #23]
 1241 0056 01E0     		b	.L67
 1242              	.L66:
1039:./Lib/Src/stm32f4xx_dma.c ****   }
1040:./Lib/Src/stm32f4xx_dma.c ****   else
1041:./Lib/Src/stm32f4xx_dma.c ****   {
1042:./Lib/Src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1043:./Lib/Src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1243              		.loc 1 1043 15
 1244 0058 0023     		movs	r3, #0
 1245 005a FB75     		strb	r3, [r7, #23]
 1246              	.L67:
1044:./Lib/Src/stm32f4xx_dma.c ****   }
1045:./Lib/Src/stm32f4xx_dma.c **** 
1046:./Lib/Src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1047:./Lib/Src/stm32f4xx_dma.c ****   return  bitstatus;
 1247              		.loc 1 1047 11
 1248 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1048:./Lib/Src/stm32f4xx_dma.c **** }
 1249              		.loc 1 1048 1
 1250 005e 1846     		mov	r0, r3
 1251 0060 1C37     		adds	r7, r7, #28
 1252              		.cfi_def_cfa_offset 4
 1253 0062 BD46     		mov	sp, r7
 1254              		.cfi_def_cfa_register 13
 1255              		@ sp needed
 1256 0064 5DF8047B 		ldr	r7, [sp], #4
 1257              		.cfi_restore 7
 1258              		.cfi_def_cfa_offset 0
 1259 0068 7047     		bx	lr
ARM GAS  /tmp/ccIOm5Mq.s 			page 42


 1260              	.L70:
 1261 006a 00BF     		.align	2
 1262              	.L69:
 1263 006c 0F640240 		.word	1073898511
 1264 0070 00600240 		.word	1073897472
 1265 0074 00640240 		.word	1073898496
 1266              		.cfi_endproc
 1267              	.LFE137:
 1269              		.section	.text.DMA_ClearFlag,"ax",%progbits
 1270              		.align	1
 1271              		.global	DMA_ClearFlag
 1272              		.syntax unified
 1273              		.thumb
 1274              		.thumb_func
 1276              	DMA_ClearFlag:
 1277              	.LFB138:
1049:./Lib/Src/stm32f4xx_dma.c **** 
1050:./Lib/Src/stm32f4xx_dma.c **** /**
1051:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1052:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1053:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1054:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1055:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1056:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1057:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1058:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1059:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1060:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1061:./Lib/Src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1062:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
1063:./Lib/Src/stm32f4xx_dma.c ****   */
1064:./Lib/Src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1065:./Lib/Src/stm32f4xx_dma.c **** {
 1278              		.loc 1 1065 1
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 16
 1281              		@ frame_needed = 1, uses_anonymous_args = 0
 1282              		@ link register save eliminated.
 1283 0000 80B4     		push	{r7}
 1284              		.cfi_def_cfa_offset 4
 1285              		.cfi_offset 7, -4
 1286 0002 85B0     		sub	sp, sp, #20
 1287              		.cfi_def_cfa_offset 24
 1288 0004 00AF     		add	r7, sp, #0
 1289              		.cfi_def_cfa_register 7
 1290 0006 7860     		str	r0, [r7, #4]
 1291 0008 3960     		str	r1, [r7]
1066:./Lib/Src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1067:./Lib/Src/stm32f4xx_dma.c **** 
1068:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
1069:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1070:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1071:./Lib/Src/stm32f4xx_dma.c **** 
1072:./Lib/Src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1073:./Lib/Src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1292              		.loc 1 1073 6
 1293 000a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccIOm5Mq.s 			page 43


 1294 000c 104A     		ldr	r2, .L77
 1295 000e 9342     		cmp	r3, r2
 1296 0010 02D8     		bhi	.L72
1074:./Lib/Src/stm32f4xx_dma.c ****   {
1075:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1076:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1297              		.loc 1 1076 10
 1298 0012 104B     		ldr	r3, .L77+4
 1299 0014 FB60     		str	r3, [r7, #12]
 1300 0016 01E0     		b	.L73
 1301              	.L72:
1077:./Lib/Src/stm32f4xx_dma.c ****   } 
1078:./Lib/Src/stm32f4xx_dma.c ****   else 
1079:./Lib/Src/stm32f4xx_dma.c ****   {
1080:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1081:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1302              		.loc 1 1081 10
 1303 0018 0F4B     		ldr	r3, .L77+8
 1304 001a FB60     		str	r3, [r7, #12]
 1305              	.L73:
1082:./Lib/Src/stm32f4xx_dma.c ****   }
1083:./Lib/Src/stm32f4xx_dma.c **** 
1084:./Lib/Src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1085:./Lib/Src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1306              		.loc 1 1085 17
 1307 001c 3B68     		ldr	r3, [r7]
 1308 001e 03F00053 		and	r3, r3, #536870912
 1309              		.loc 1 1085 6
 1310 0022 002B     		cmp	r3, #0
 1311 0024 07D0     		beq	.L74
1086:./Lib/Src/stm32f4xx_dma.c ****   {
1087:./Lib/Src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1088:./Lib/Src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1312              		.loc 1 1088 19
 1313 0026 3B68     		ldr	r3, [r7]
 1314 0028 23F0F023 		bic	r3, r3, #-268374016
 1315 002c 23F08213 		bic	r3, r3, #8519810
 1316              		.loc 1 1088 17
 1317 0030 FA68     		ldr	r2, [r7, #12]
 1318 0032 D360     		str	r3, [r2, #12]
1089:./Lib/Src/stm32f4xx_dma.c ****   }
1090:./Lib/Src/stm32f4xx_dma.c ****   else 
1091:./Lib/Src/stm32f4xx_dma.c ****   {
1092:./Lib/Src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1093:./Lib/Src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
1094:./Lib/Src/stm32f4xx_dma.c ****   }    
1095:./Lib/Src/stm32f4xx_dma.c **** }
 1319              		.loc 1 1095 1
 1320 0034 06E0     		b	.L76
 1321              	.L74:
1093:./Lib/Src/stm32f4xx_dma.c ****   }    
 1322              		.loc 1 1093 19
 1323 0036 3B68     		ldr	r3, [r7]
 1324 0038 23F0F023 		bic	r3, r3, #-268374016
 1325 003c 23F08213 		bic	r3, r3, #8519810
1093:./Lib/Src/stm32f4xx_dma.c ****   }    
 1326              		.loc 1 1093 17
ARM GAS  /tmp/ccIOm5Mq.s 			page 44


 1327 0040 FA68     		ldr	r2, [r7, #12]
 1328 0042 9360     		str	r3, [r2, #8]
 1329              	.L76:
 1330              		.loc 1 1095 1
 1331 0044 00BF     		nop
 1332 0046 1437     		adds	r7, r7, #20
 1333              		.cfi_def_cfa_offset 4
 1334 0048 BD46     		mov	sp, r7
 1335              		.cfi_def_cfa_register 13
 1336              		@ sp needed
 1337 004a 5DF8047B 		ldr	r7, [sp], #4
 1338              		.cfi_restore 7
 1339              		.cfi_def_cfa_offset 0
 1340 004e 7047     		bx	lr
 1341              	.L78:
 1342              		.align	2
 1343              	.L77:
 1344 0050 0F640240 		.word	1073898511
 1345 0054 00600240 		.word	1073897472
 1346 0058 00640240 		.word	1073898496
 1347              		.cfi_endproc
 1348              	.LFE138:
 1350              		.section	.text.DMA_ITConfig,"ax",%progbits
 1351              		.align	1
 1352              		.global	DMA_ITConfig
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1357              	DMA_ITConfig:
 1358              	.LFB139:
1096:./Lib/Src/stm32f4xx_dma.c **** 
1097:./Lib/Src/stm32f4xx_dma.c **** /**
1098:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1099:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1100:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1101:./Lib/Src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1102:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1103:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1104:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1105:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1106:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1107:./Lib/Src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1108:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1109:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
1110:./Lib/Src/stm32f4xx_dma.c ****   */
1111:./Lib/Src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1112:./Lib/Src/stm32f4xx_dma.c **** {
 1359              		.loc 1 1112 1
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 16
 1362              		@ frame_needed = 1, uses_anonymous_args = 0
 1363              		@ link register save eliminated.
 1364 0000 80B4     		push	{r7}
 1365              		.cfi_def_cfa_offset 4
 1366              		.cfi_offset 7, -4
 1367 0002 85B0     		sub	sp, sp, #20
 1368              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccIOm5Mq.s 			page 45


 1369 0004 00AF     		add	r7, sp, #0
 1370              		.cfi_def_cfa_register 7
 1371 0006 F860     		str	r0, [r7, #12]
 1372 0008 B960     		str	r1, [r7, #8]
 1373 000a 1346     		mov	r3, r2
 1374 000c FB71     		strb	r3, [r7, #7]
1113:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
1114:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1115:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1116:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1117:./Lib/Src/stm32f4xx_dma.c **** 
1118:./Lib/Src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1119:./Lib/Src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 1375              		.loc 1 1119 15
 1376 000e BB68     		ldr	r3, [r7, #8]
 1377 0010 03F08003 		and	r3, r3, #128
 1378              		.loc 1 1119 6
 1379 0014 002B     		cmp	r3, #0
 1380 0016 0FD0     		beq	.L80
1120:./Lib/Src/stm32f4xx_dma.c ****   {
1121:./Lib/Src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1381              		.loc 1 1121 8
 1382 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1383 001a 002B     		cmp	r3, #0
 1384 001c 06D0     		beq	.L81
1122:./Lib/Src/stm32f4xx_dma.c ****     {
1123:./Lib/Src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1124:./Lib/Src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 1385              		.loc 1 1124 19
 1386 001e FB68     		ldr	r3, [r7, #12]
 1387 0020 5B69     		ldr	r3, [r3, #20]
 1388              		.loc 1 1124 25
 1389 0022 43F08002 		orr	r2, r3, #128
 1390 0026 FB68     		ldr	r3, [r7, #12]
 1391 0028 5A61     		str	r2, [r3, #20]
 1392 002a 05E0     		b	.L80
 1393              	.L81:
1125:./Lib/Src/stm32f4xx_dma.c ****     }    
1126:./Lib/Src/stm32f4xx_dma.c ****     else 
1127:./Lib/Src/stm32f4xx_dma.c ****     {
1128:./Lib/Src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1129:./Lib/Src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 1394              		.loc 1 1129 19
 1395 002c FB68     		ldr	r3, [r7, #12]
 1396 002e 5B69     		ldr	r3, [r3, #20]
 1397              		.loc 1 1129 25
 1398 0030 23F08002 		bic	r2, r3, #128
 1399 0034 FB68     		ldr	r3, [r7, #12]
 1400 0036 5A61     		str	r2, [r3, #20]
 1401              	.L80:
1130:./Lib/Src/stm32f4xx_dma.c ****     }
1131:./Lib/Src/stm32f4xx_dma.c ****   }
1132:./Lib/Src/stm32f4xx_dma.c **** 
1133:./Lib/Src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1134:./Lib/Src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 1402              		.loc 1 1134 6
 1403 0038 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccIOm5Mq.s 			page 46


 1404 003a 802B     		cmp	r3, #128
 1405 003c 14D0     		beq	.L84
1135:./Lib/Src/stm32f4xx_dma.c ****   {
1136:./Lib/Src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1406              		.loc 1 1136 8
 1407 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1408 0040 002B     		cmp	r3, #0
 1409 0042 08D0     		beq	.L83
1137:./Lib/Src/stm32f4xx_dma.c ****     {
1138:./Lib/Src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1139:./Lib/Src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 1410              		.loc 1 1139 19
 1411 0044 FB68     		ldr	r3, [r7, #12]
 1412 0046 1A68     		ldr	r2, [r3]
 1413              		.loc 1 1139 27
 1414 0048 BB68     		ldr	r3, [r7, #8]
 1415 004a 03F01E03 		and	r3, r3, #30
 1416              		.loc 1 1139 24
 1417 004e 1A43     		orrs	r2, r2, r3
 1418 0050 FB68     		ldr	r3, [r7, #12]
 1419 0052 1A60     		str	r2, [r3]
1140:./Lib/Src/stm32f4xx_dma.c ****     }
1141:./Lib/Src/stm32f4xx_dma.c ****     else
1142:./Lib/Src/stm32f4xx_dma.c ****     {
1143:./Lib/Src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1144:./Lib/Src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
1145:./Lib/Src/stm32f4xx_dma.c ****     }    
1146:./Lib/Src/stm32f4xx_dma.c ****   }
1147:./Lib/Src/stm32f4xx_dma.c **** }
 1420              		.loc 1 1147 1
 1421 0054 08E0     		b	.L84
 1422              	.L83:
1144:./Lib/Src/stm32f4xx_dma.c ****     }    
 1423              		.loc 1 1144 19
 1424 0056 FB68     		ldr	r3, [r7, #12]
 1425 0058 1A68     		ldr	r2, [r3]
1144:./Lib/Src/stm32f4xx_dma.c ****     }    
 1426              		.loc 1 1144 28
 1427 005a BB68     		ldr	r3, [r7, #8]
 1428 005c 03F01E03 		and	r3, r3, #30
1144:./Lib/Src/stm32f4xx_dma.c ****     }    
 1429              		.loc 1 1144 27
 1430 0060 DB43     		mvns	r3, r3
1144:./Lib/Src/stm32f4xx_dma.c ****     }    
 1431              		.loc 1 1144 24
 1432 0062 1A40     		ands	r2, r2, r3
 1433 0064 FB68     		ldr	r3, [r7, #12]
 1434 0066 1A60     		str	r2, [r3]
 1435              	.L84:
 1436              		.loc 1 1147 1
 1437 0068 00BF     		nop
 1438 006a 1437     		adds	r7, r7, #20
 1439              		.cfi_def_cfa_offset 4
 1440 006c BD46     		mov	sp, r7
 1441              		.cfi_def_cfa_register 13
 1442              		@ sp needed
 1443 006e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccIOm5Mq.s 			page 47


 1444              		.cfi_restore 7
 1445              		.cfi_def_cfa_offset 0
 1446 0072 7047     		bx	lr
 1447              		.cfi_endproc
 1448              	.LFE139:
 1450              		.section	.text.DMA_GetITStatus,"ax",%progbits
 1451              		.align	1
 1452              		.global	DMA_GetITStatus
 1453              		.syntax unified
 1454              		.thumb
 1455              		.thumb_func
 1457              	DMA_GetITStatus:
 1458              	.LFB140:
1148:./Lib/Src/stm32f4xx_dma.c **** 
1149:./Lib/Src/stm32f4xx_dma.c **** /**
1150:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1151:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1152:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1153:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1154:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1155:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1156:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1157:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1158:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1159:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1160:./Lib/Src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1161:./Lib/Src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1162:./Lib/Src/stm32f4xx_dma.c ****   */
1163:./Lib/Src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1164:./Lib/Src/stm32f4xx_dma.c **** {
 1459              		.loc 1 1164 1
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 24
 1462              		@ frame_needed = 1, uses_anonymous_args = 0
 1463              		@ link register save eliminated.
 1464 0000 80B4     		push	{r7}
 1465              		.cfi_def_cfa_offset 4
 1466              		.cfi_offset 7, -4
 1467 0002 87B0     		sub	sp, sp, #28
 1468              		.cfi_def_cfa_offset 32
 1469 0004 00AF     		add	r7, sp, #0
 1470              		.cfi_def_cfa_register 7
 1471 0006 7860     		str	r0, [r7, #4]
 1472 0008 3960     		str	r1, [r7]
1165:./Lib/Src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 1473              		.loc 1 1165 12
 1474 000a 0023     		movs	r3, #0
 1475 000c FB75     		strb	r3, [r7, #23]
1166:./Lib/Src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1167:./Lib/Src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 1476              		.loc 1 1167 12
 1477 000e 0023     		movs	r3, #0
 1478 0010 FB60     		str	r3, [r7, #12]
 1479              		.loc 1 1167 24
 1480 0012 0023     		movs	r3, #0
 1481 0014 BB60     		str	r3, [r7, #8]
1168:./Lib/Src/stm32f4xx_dma.c **** 
ARM GAS  /tmp/ccIOm5Mq.s 			page 48


1169:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
1170:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1171:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1172:./Lib/Src/stm32f4xx_dma.c ****  
1173:./Lib/Src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1174:./Lib/Src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1482              		.loc 1 1174 6
 1483 0016 7B68     		ldr	r3, [r7, #4]
 1484 0018 224A     		ldr	r2, .L95
 1485 001a 9342     		cmp	r3, r2
 1486 001c 02D8     		bhi	.L86
1175:./Lib/Src/stm32f4xx_dma.c ****   {
1176:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1177:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1487              		.loc 1 1177 10
 1488 001e 224B     		ldr	r3, .L95+4
 1489 0020 3B61     		str	r3, [r7, #16]
 1490 0022 01E0     		b	.L87
 1491              	.L86:
1178:./Lib/Src/stm32f4xx_dma.c ****   } 
1179:./Lib/Src/stm32f4xx_dma.c ****   else 
1180:./Lib/Src/stm32f4xx_dma.c ****   {
1181:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1182:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1492              		.loc 1 1182 10
 1493 0024 214B     		ldr	r3, .L95+8
 1494 0026 3B61     		str	r3, [r7, #16]
 1495              	.L87:
1183:./Lib/Src/stm32f4xx_dma.c ****   }
1184:./Lib/Src/stm32f4xx_dma.c **** 
1185:./Lib/Src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1186:./Lib/Src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 1496              		.loc 1 1186 15
 1497 0028 3B68     		ldr	r3, [r7]
 1498 002a 23F0F023 		bic	r3, r3, #-268374016
 1499 002e 23F0C313 		bic	r3, r3, #12779715
 1500              		.loc 1 1186 6
 1501 0032 002B     		cmp	r3, #0
 1502 0034 0AD0     		beq	.L88
1187:./Lib/Src/stm32f4xx_dma.c ****   {
1188:./Lib/Src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1189:./Lib/Src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 1503              		.loc 1 1189 33
 1504 0036 3B68     		ldr	r3, [r7]
 1505 0038 DB0A     		lsrs	r3, r3, #11
 1506              		.loc 1 1189 12
 1507 003a 03F01E03 		and	r3, r3, #30
 1508 003e FB60     		str	r3, [r7, #12]
1190:./Lib/Src/stm32f4xx_dma.c ****     
1191:./Lib/Src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1192:./Lib/Src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 1509              		.loc 1 1192 43
 1510 0040 7B68     		ldr	r3, [r7, #4]
 1511 0042 1B68     		ldr	r3, [r3]
 1512              		.loc 1 1192 18
 1513 0044 FA68     		ldr	r2, [r7, #12]
 1514 0046 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccIOm5Mq.s 			page 49


 1515 0048 BB60     		str	r3, [r7, #8]
 1516 004a 04E0     		b	.L89
 1517              	.L88:
1193:./Lib/Src/stm32f4xx_dma.c ****   }
1194:./Lib/Src/stm32f4xx_dma.c ****   else 
1195:./Lib/Src/stm32f4xx_dma.c ****   {
1196:./Lib/Src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1197:./Lib/Src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 1518              		.loc 1 1197 43
 1519 004c 7B68     		ldr	r3, [r7, #4]
 1520 004e 5B69     		ldr	r3, [r3, #20]
 1521              		.loc 1 1197 18
 1522 0050 03F08003 		and	r3, r3, #128
 1523 0054 BB60     		str	r3, [r7, #8]
 1524              	.L89:
1198:./Lib/Src/stm32f4xx_dma.c ****   }
1199:./Lib/Src/stm32f4xx_dma.c ****  
1200:./Lib/Src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1201:./Lib/Src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1525              		.loc 1 1201 15
 1526 0056 3B68     		ldr	r3, [r7]
 1527 0058 03F00053 		and	r3, r3, #536870912
 1528              		.loc 1 1201 6
 1529 005c 002B     		cmp	r3, #0
 1530 005e 03D0     		beq	.L90
1202:./Lib/Src/stm32f4xx_dma.c ****   {
1203:./Lib/Src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1204:./Lib/Src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 1531              		.loc 1 1204 12
 1532 0060 3B69     		ldr	r3, [r7, #16]
 1533 0062 5B68     		ldr	r3, [r3, #4]
 1534 0064 FB60     		str	r3, [r7, #12]
 1535 0066 02E0     		b	.L91
 1536              	.L90:
1205:./Lib/Src/stm32f4xx_dma.c ****   }
1206:./Lib/Src/stm32f4xx_dma.c ****   else
1207:./Lib/Src/stm32f4xx_dma.c ****   {
1208:./Lib/Src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1209:./Lib/Src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 1537              		.loc 1 1209 12
 1538 0068 3B69     		ldr	r3, [r7, #16]
 1539 006a 1B68     		ldr	r3, [r3]
 1540 006c FB60     		str	r3, [r7, #12]
 1541              	.L91:
1210:./Lib/Src/stm32f4xx_dma.c ****   } 
1211:./Lib/Src/stm32f4xx_dma.c **** 
1212:./Lib/Src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1213:./Lib/Src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1542              		.loc 1 1213 10
 1543 006e FB68     		ldr	r3, [r7, #12]
 1544 0070 23F0F023 		bic	r3, r3, #-268374016
 1545 0074 23F08213 		bic	r3, r3, #8519810
 1546 0078 FB60     		str	r3, [r7, #12]
1214:./Lib/Src/stm32f4xx_dma.c **** 
1215:./Lib/Src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1216:./Lib/Src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 1547              		.loc 1 1216 16
ARM GAS  /tmp/ccIOm5Mq.s 			page 50


 1548 007a FA68     		ldr	r2, [r7, #12]
 1549 007c 3B68     		ldr	r3, [r7]
 1550 007e 1340     		ands	r3, r3, r2
 1551              		.loc 1 1216 6
 1552 0080 002B     		cmp	r3, #0
 1553 0082 05D0     		beq	.L92
 1554              		.loc 1 1216 46 discriminator 1
 1555 0084 BB68     		ldr	r3, [r7, #8]
 1556 0086 002B     		cmp	r3, #0
 1557 0088 02D0     		beq	.L92
1217:./Lib/Src/stm32f4xx_dma.c ****   {
1218:./Lib/Src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1219:./Lib/Src/stm32f4xx_dma.c ****     bitstatus = SET;
 1558              		.loc 1 1219 15
 1559 008a 0123     		movs	r3, #1
 1560 008c FB75     		strb	r3, [r7, #23]
 1561 008e 01E0     		b	.L93
 1562              	.L92:
1220:./Lib/Src/stm32f4xx_dma.c ****   }
1221:./Lib/Src/stm32f4xx_dma.c ****   else
1222:./Lib/Src/stm32f4xx_dma.c ****   {
1223:./Lib/Src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1224:./Lib/Src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1563              		.loc 1 1224 15
 1564 0090 0023     		movs	r3, #0
 1565 0092 FB75     		strb	r3, [r7, #23]
 1566              	.L93:
1225:./Lib/Src/stm32f4xx_dma.c ****   }
1226:./Lib/Src/stm32f4xx_dma.c **** 
1227:./Lib/Src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1228:./Lib/Src/stm32f4xx_dma.c ****   return  bitstatus;
 1567              		.loc 1 1228 11
 1568 0094 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1229:./Lib/Src/stm32f4xx_dma.c **** }
 1569              		.loc 1 1229 1
 1570 0096 1846     		mov	r0, r3
 1571 0098 1C37     		adds	r7, r7, #28
 1572              		.cfi_def_cfa_offset 4
 1573 009a BD46     		mov	sp, r7
 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 009c 5DF8047B 		ldr	r7, [sp], #4
 1577              		.cfi_restore 7
 1578              		.cfi_def_cfa_offset 0
 1579 00a0 7047     		bx	lr
 1580              	.L96:
 1581 00a2 00BF     		.align	2
 1582              	.L95:
 1583 00a4 0F640240 		.word	1073898511
 1584 00a8 00600240 		.word	1073897472
 1585 00ac 00640240 		.word	1073898496
 1586              		.cfi_endproc
 1587              	.LFE140:
 1589              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 1590              		.align	1
 1591              		.global	DMA_ClearITPendingBit
 1592              		.syntax unified
ARM GAS  /tmp/ccIOm5Mq.s 			page 51


 1593              		.thumb
 1594              		.thumb_func
 1596              	DMA_ClearITPendingBit:
 1597              	.LFB141:
1230:./Lib/Src/stm32f4xx_dma.c **** 
1231:./Lib/Src/stm32f4xx_dma.c **** /**
1232:./Lib/Src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1233:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1234:./Lib/Src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1235:./Lib/Src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1236:./Lib/Src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1237:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1238:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1239:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1240:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1241:./Lib/Src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1242:./Lib/Src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1243:./Lib/Src/stm32f4xx_dma.c ****   * @retval None
1244:./Lib/Src/stm32f4xx_dma.c ****   */
1245:./Lib/Src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1246:./Lib/Src/stm32f4xx_dma.c **** {
 1598              		.loc 1 1246 1
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 16
 1601              		@ frame_needed = 1, uses_anonymous_args = 0
 1602              		@ link register save eliminated.
 1603 0000 80B4     		push	{r7}
 1604              		.cfi_def_cfa_offset 4
 1605              		.cfi_offset 7, -4
 1606 0002 85B0     		sub	sp, sp, #20
 1607              		.cfi_def_cfa_offset 24
 1608 0004 00AF     		add	r7, sp, #0
 1609              		.cfi_def_cfa_register 7
 1610 0006 7860     		str	r0, [r7, #4]
 1611 0008 3960     		str	r1, [r7]
1247:./Lib/Src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1248:./Lib/Src/stm32f4xx_dma.c **** 
1249:./Lib/Src/stm32f4xx_dma.c ****   /* Check the parameters */
1250:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1251:./Lib/Src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1252:./Lib/Src/stm32f4xx_dma.c **** 
1253:./Lib/Src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1254:./Lib/Src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1612              		.loc 1 1254 6
 1613 000a 7B68     		ldr	r3, [r7, #4]
 1614 000c 104A     		ldr	r2, .L103
 1615 000e 9342     		cmp	r3, r2
 1616 0010 02D8     		bhi	.L98
1255:./Lib/Src/stm32f4xx_dma.c ****   {
1256:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1257:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1617              		.loc 1 1257 10
 1618 0012 104B     		ldr	r3, .L103+4
 1619 0014 FB60     		str	r3, [r7, #12]
 1620 0016 01E0     		b	.L99
 1621              	.L98:
1258:./Lib/Src/stm32f4xx_dma.c ****   } 
ARM GAS  /tmp/ccIOm5Mq.s 			page 52


1259:./Lib/Src/stm32f4xx_dma.c ****   else 
1260:./Lib/Src/stm32f4xx_dma.c ****   {
1261:./Lib/Src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1262:./Lib/Src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1622              		.loc 1 1262 10
 1623 0018 0F4B     		ldr	r3, .L103+8
 1624 001a FB60     		str	r3, [r7, #12]
 1625              	.L99:
1263:./Lib/Src/stm32f4xx_dma.c ****   }
1264:./Lib/Src/stm32f4xx_dma.c **** 
1265:./Lib/Src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1266:./Lib/Src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1626              		.loc 1 1266 15
 1627 001c 3B68     		ldr	r3, [r7]
 1628 001e 03F00053 		and	r3, r3, #536870912
 1629              		.loc 1 1266 6
 1630 0022 002B     		cmp	r3, #0
 1631 0024 07D0     		beq	.L100
1267:./Lib/Src/stm32f4xx_dma.c ****   {
1268:./Lib/Src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1269:./Lib/Src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1632              		.loc 1 1269 19
 1633 0026 3B68     		ldr	r3, [r7]
 1634 0028 23F0F023 		bic	r3, r3, #-268374016
 1635 002c 23F08213 		bic	r3, r3, #8519810
 1636              		.loc 1 1269 17
 1637 0030 FA68     		ldr	r2, [r7, #12]
 1638 0032 D360     		str	r3, [r2, #12]
1270:./Lib/Src/stm32f4xx_dma.c ****   }
1271:./Lib/Src/stm32f4xx_dma.c ****   else 
1272:./Lib/Src/stm32f4xx_dma.c ****   {
1273:./Lib/Src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1274:./Lib/Src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
1275:./Lib/Src/stm32f4xx_dma.c ****   }   
1276:./Lib/Src/stm32f4xx_dma.c **** }
 1639              		.loc 1 1276 1
 1640 0034 06E0     		b	.L102
 1641              	.L100:
1274:./Lib/Src/stm32f4xx_dma.c ****   }   
 1642              		.loc 1 1274 19
 1643 0036 3B68     		ldr	r3, [r7]
 1644 0038 23F0F023 		bic	r3, r3, #-268374016
 1645 003c 23F08213 		bic	r3, r3, #8519810
1274:./Lib/Src/stm32f4xx_dma.c ****   }   
 1646              		.loc 1 1274 17
 1647 0040 FA68     		ldr	r2, [r7, #12]
 1648 0042 9360     		str	r3, [r2, #8]
 1649              	.L102:
 1650              		.loc 1 1276 1
 1651 0044 00BF     		nop
 1652 0046 1437     		adds	r7, r7, #20
 1653              		.cfi_def_cfa_offset 4
 1654 0048 BD46     		mov	sp, r7
 1655              		.cfi_def_cfa_register 13
 1656              		@ sp needed
 1657 004a 5DF8047B 		ldr	r7, [sp], #4
 1658              		.cfi_restore 7
ARM GAS  /tmp/ccIOm5Mq.s 			page 53


 1659              		.cfi_def_cfa_offset 0
 1660 004e 7047     		bx	lr
 1661              	.L104:
 1662              		.align	2
 1663              	.L103:
 1664 0050 0F640240 		.word	1073898511
 1665 0054 00600240 		.word	1073897472
 1666 0058 00640240 		.word	1073898496
 1667              		.cfi_endproc
 1668              	.LFE141:
 1670              		.text
 1671              	.Letext0:
 1672              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 1673              		.file 3 "./Start/stm32f4xx.h"
 1674              		.file 4 "./Lib/inc/stm32f4xx_dma.h"
ARM GAS  /tmp/ccIOm5Mq.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dma.c
     /tmp/ccIOm5Mq.s:21     .text.DMA_DeInit:0000000000000000 $t
     /tmp/ccIOm5Mq.s:27     .text.DMA_DeInit:0000000000000000 DMA_DeInit
     /tmp/ccIOm5Mq.s:293    .text.DMA_DeInit:0000000000000154 $d
     /tmp/ccIOm5Mq.s:318    .text.DMA_Init:0000000000000000 $t
     /tmp/ccIOm5Mq.s:324    .text.DMA_Init:0000000000000000 DMA_Init
     /tmp/ccIOm5Mq.s:464    .text.DMA_Init:00000000000000ac $d
     /tmp/ccIOm5Mq.s:469    .text.DMA_StructInit:0000000000000000 $t
     /tmp/ccIOm5Mq.s:475    .text.DMA_StructInit:0000000000000000 DMA_StructInit
     /tmp/ccIOm5Mq.s:565    .text.DMA_Cmd:0000000000000000 $t
     /tmp/ccIOm5Mq.s:571    .text.DMA_Cmd:0000000000000000 DMA_Cmd
     /tmp/ccIOm5Mq.s:625    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 $t
     /tmp/ccIOm5Mq.s:631    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 DMA_PeriphIncOffsetSizeConfig
     /tmp/ccIOm5Mq.s:684    .text.DMA_FlowControllerConfig:0000000000000000 $t
     /tmp/ccIOm5Mq.s:690    .text.DMA_FlowControllerConfig:0000000000000000 DMA_FlowControllerConfig
     /tmp/ccIOm5Mq.s:743    .text.DMA_SetCurrDataCounter:0000000000000000 $t
     /tmp/ccIOm5Mq.s:749    .text.DMA_SetCurrDataCounter:0000000000000000 DMA_SetCurrDataCounter
     /tmp/ccIOm5Mq.s:786    .text.DMA_GetCurrDataCounter:0000000000000000 $t
     /tmp/ccIOm5Mq.s:792    .text.DMA_GetCurrDataCounter:0000000000000000 DMA_GetCurrDataCounter
     /tmp/ccIOm5Mq.s:827    .text.DMA_DoubleBufferModeConfig:0000000000000000 $t
     /tmp/ccIOm5Mq.s:833    .text.DMA_DoubleBufferModeConfig:0000000000000000 DMA_DoubleBufferModeConfig
     /tmp/ccIOm5Mq.s:890    .text.DMA_DoubleBufferModeCmd:0000000000000000 $t
     /tmp/ccIOm5Mq.s:896    .text.DMA_DoubleBufferModeCmd:0000000000000000 DMA_DoubleBufferModeCmd
     /tmp/ccIOm5Mq.s:950    .text.DMA_MemoryTargetConfig:0000000000000000 $t
     /tmp/ccIOm5Mq.s:956    .text.DMA_MemoryTargetConfig:0000000000000000 DMA_MemoryTargetConfig
     /tmp/ccIOm5Mq.s:1004   .text.DMA_GetCurrentMemoryTarget:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1010   .text.DMA_GetCurrentMemoryTarget:0000000000000000 DMA_GetCurrentMemoryTarget
     /tmp/ccIOm5Mq.s:1062   .text.DMA_GetCmdStatus:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1068   .text.DMA_GetCmdStatus:0000000000000000 DMA_GetCmdStatus
     /tmp/ccIOm5Mq.s:1120   .text.DMA_GetFIFOStatus:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1126   .text.DMA_GetFIFOStatus:0000000000000000 DMA_GetFIFOStatus
     /tmp/ccIOm5Mq.s:1167   .text.DMA_GetFlagStatus:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1173   .text.DMA_GetFlagStatus:0000000000000000 DMA_GetFlagStatus
     /tmp/ccIOm5Mq.s:1263   .text.DMA_GetFlagStatus:000000000000006c $d
     /tmp/ccIOm5Mq.s:1270   .text.DMA_ClearFlag:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1276   .text.DMA_ClearFlag:0000000000000000 DMA_ClearFlag
     /tmp/ccIOm5Mq.s:1344   .text.DMA_ClearFlag:0000000000000050 $d
     /tmp/ccIOm5Mq.s:1351   .text.DMA_ITConfig:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1357   .text.DMA_ITConfig:0000000000000000 DMA_ITConfig
     /tmp/ccIOm5Mq.s:1451   .text.DMA_GetITStatus:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1457   .text.DMA_GetITStatus:0000000000000000 DMA_GetITStatus
     /tmp/ccIOm5Mq.s:1583   .text.DMA_GetITStatus:00000000000000a4 $d
     /tmp/ccIOm5Mq.s:1590   .text.DMA_ClearITPendingBit:0000000000000000 $t
     /tmp/ccIOm5Mq.s:1596   .text.DMA_ClearITPendingBit:0000000000000000 DMA_ClearITPendingBit
     /tmp/ccIOm5Mq.s:1664   .text.DMA_ClearITPendingBit:0000000000000050 $d

NO UNDEFINED SYMBOLS
