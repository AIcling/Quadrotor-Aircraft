ARM GAS  /tmp/ccqwdtxy.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_dac.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_dac.c"
  20              		.section	.text.DAC_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	DAC_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	DAC_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_dac.c **** /**
   2:./Lib/Src/stm32f4xx_dac.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_dac.c ****   * @file    stm32f4xx_dac.c
   4:./Lib/Src/stm32f4xx_dac.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_dac.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_dac.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_dac.c ****    * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_dac.c ****   *          functionalities of the Digital-to-Analog Converter (DAC) peripheral: 
   9:./Lib/Src/stm32f4xx_dac.c ****   *           + DAC channels configuration: trigger, output buffer, data format
  10:./Lib/Src/stm32f4xx_dac.c ****   *           + DMA management      
  11:./Lib/Src/stm32f4xx_dac.c ****   *           + Interrupts and flags management
  12:./Lib/Src/stm32f4xx_dac.c ****   *
  13:./Lib/Src/stm32f4xx_dac.c ****  @verbatim      
  14:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================
  15:./Lib/Src/stm32f4xx_dac.c ****                       ##### DAC Peripheral features #####
  16:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================
  17:./Lib/Src/stm32f4xx_dac.c ****     [..]        
  18:./Lib/Src/stm32f4xx_dac.c ****       *** DAC Channels ***
  19:./Lib/Src/stm32f4xx_dac.c ****       ====================  
  20:./Lib/Src/stm32f4xx_dac.c ****     [..]  
  21:./Lib/Src/stm32f4xx_dac.c ****     The device integrates two 12-bit Digital Analog Converters that can 
  22:./Lib/Src/stm32f4xx_dac.c ****     be used independently or simultaneously (dual mode):
  23:./Lib/Src/stm32f4xx_dac.c ****       (#) DAC channel1 with DAC_OUT1 (PA4) as output
  24:./Lib/Src/stm32f4xx_dac.c ****       (#) DAC channel2 with DAC_OUT2 (PA5) as output
  25:./Lib/Src/stm32f4xx_dac.c ****   
  26:./Lib/Src/stm32f4xx_dac.c ****       *** DAC Triggers ***
  27:./Lib/Src/stm32f4xx_dac.c ****       ====================
  28:./Lib/Src/stm32f4xx_dac.c ****     [..]
  29:./Lib/Src/stm32f4xx_dac.c ****     Digital to Analog conversion can be non-triggered using DAC_Trigger_None
  30:./Lib/Src/stm32f4xx_dac.c ****     and DAC_OUT1/DAC_OUT2 is available once writing to DHRx register 
ARM GAS  /tmp/ccqwdtxy.s 			page 2


  31:./Lib/Src/stm32f4xx_dac.c ****     using DAC_SetChannel1Data() / DAC_SetChannel2Data() functions.
  32:./Lib/Src/stm32f4xx_dac.c ****     [..] 
  33:./Lib/Src/stm32f4xx_dac.c ****     Digital to Analog conversion can be triggered by:
  34:./Lib/Src/stm32f4xx_dac.c ****       (#) External event: EXTI Line 9 (any GPIOx_Pin9) using DAC_Trigger_Ext_IT9.
  35:./Lib/Src/stm32f4xx_dac.c ****           The used pin (GPIOx_Pin9) must be configured in input mode.
  36:./Lib/Src/stm32f4xx_dac.c ****   
  37:./Lib/Src/stm32f4xx_dac.c ****       (#) Timers TRGO: TIM2, TIM4, TIM5, TIM6, TIM7 and TIM8 
  38:./Lib/Src/stm32f4xx_dac.c ****           (DAC_Trigger_T2_TRGO, DAC_Trigger_T4_TRGO...)
  39:./Lib/Src/stm32f4xx_dac.c ****           The timer TRGO event should be selected using TIM_SelectOutputTrigger()
  40:./Lib/Src/stm32f4xx_dac.c ****   
  41:./Lib/Src/stm32f4xx_dac.c ****       (#) Software using DAC_Trigger_Software
  42:./Lib/Src/stm32f4xx_dac.c ****   
  43:./Lib/Src/stm32f4xx_dac.c ****       *** DAC Buffer mode feature ***
  44:./Lib/Src/stm32f4xx_dac.c ****       =============================== 
  45:./Lib/Src/stm32f4xx_dac.c ****       [..] 
  46:./Lib/Src/stm32f4xx_dac.c ****       Each DAC channel integrates an output buffer that can be used to 
  47:./Lib/Src/stm32f4xx_dac.c ****       reduce the output impedance, and to drive external loads directly
  48:./Lib/Src/stm32f4xx_dac.c ****       without having to add an external operational amplifier.
  49:./Lib/Src/stm32f4xx_dac.c ****       To enable, the output buffer use  
  50:./Lib/Src/stm32f4xx_dac.c ****       DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
  51:./Lib/Src/stm32f4xx_dac.c ****       [..]           
  52:./Lib/Src/stm32f4xx_dac.c ****       (@) Refer to the device datasheet for more details about output 
  53:./Lib/Src/stm32f4xx_dac.c ****           impedance value with and without output buffer.
  54:./Lib/Src/stm32f4xx_dac.c ****             
  55:./Lib/Src/stm32f4xx_dac.c ****        *** DAC wave generation feature ***
  56:./Lib/Src/stm32f4xx_dac.c ****        =================================== 
  57:./Lib/Src/stm32f4xx_dac.c ****        [..]     
  58:./Lib/Src/stm32f4xx_dac.c ****        Both DAC channels can be used to generate
  59:./Lib/Src/stm32f4xx_dac.c ****          (#) Noise wave using DAC_WaveGeneration_Noise
  60:./Lib/Src/stm32f4xx_dac.c ****          (#) Triangle wave using DAC_WaveGeneration_Triangle
  61:./Lib/Src/stm32f4xx_dac.c ****           
  62:./Lib/Src/stm32f4xx_dac.c ****           -@-  Wave generation can be disabled using DAC_WaveGeneration_None
  63:./Lib/Src/stm32f4xx_dac.c ****   
  64:./Lib/Src/stm32f4xx_dac.c ****        *** DAC data format ***
  65:./Lib/Src/stm32f4xx_dac.c ****        =======================
  66:./Lib/Src/stm32f4xx_dac.c ****        [..]   
  67:./Lib/Src/stm32f4xx_dac.c ****        The DAC data format can be:
  68:./Lib/Src/stm32f4xx_dac.c ****          (#) 8-bit right alignment using DAC_Align_8b_R
  69:./Lib/Src/stm32f4xx_dac.c ****          (#) 12-bit left alignment using DAC_Align_12b_L
  70:./Lib/Src/stm32f4xx_dac.c ****          (#) 12-bit right alignment using DAC_Align_12b_R
  71:./Lib/Src/stm32f4xx_dac.c ****   
  72:./Lib/Src/stm32f4xx_dac.c ****        *** DAC data value to voltage correspondence ***  
  73:./Lib/Src/stm32f4xx_dac.c ****        ================================================ 
  74:./Lib/Src/stm32f4xx_dac.c ****        [..] 
  75:./Lib/Src/stm32f4xx_dac.c ****        The analog output voltage on each DAC channel pin is determined
  76:./Lib/Src/stm32f4xx_dac.c ****        by the following equation: 
  77:./Lib/Src/stm32f4xx_dac.c ****        DAC_OUTx = VREF+ * DOR / 4095
  78:./Lib/Src/stm32f4xx_dac.c ****        with  DOR is the Data Output Register
  79:./Lib/Src/stm32f4xx_dac.c ****           VEF+ is the input voltage reference (refer to the device datasheet)
  80:./Lib/Src/stm32f4xx_dac.c ****         e.g. To set DAC_OUT1 to 0.7V, use
  81:./Lib/Src/stm32f4xx_dac.c ****           DAC_SetChannel1Data(DAC_Align_12b_R, 868);
  82:./Lib/Src/stm32f4xx_dac.c ****           Assuming that VREF+ = 3.3V, DAC_OUT1 = (3.3 * 868) / 4095 = 0.7V
  83:./Lib/Src/stm32f4xx_dac.c ****   
  84:./Lib/Src/stm32f4xx_dac.c ****        *** DMA requests  ***
  85:./Lib/Src/stm32f4xx_dac.c ****        =====================
  86:./Lib/Src/stm32f4xx_dac.c ****        [..]    
  87:./Lib/Src/stm32f4xx_dac.c ****        A DMA1 request can be generated when an external trigger (but not
ARM GAS  /tmp/ccqwdtxy.s 			page 3


  88:./Lib/Src/stm32f4xx_dac.c ****        a software trigger) occurs if DMA1 requests are enabled using
  89:./Lib/Src/stm32f4xx_dac.c ****        DAC_DMACmd()
  90:./Lib/Src/stm32f4xx_dac.c ****        [..]
  91:./Lib/Src/stm32f4xx_dac.c ****        DMA1 requests are mapped as following:
  92:./Lib/Src/stm32f4xx_dac.c ****          (#) DAC channel1 : mapped on DMA1 Stream5 channel7 which must be 
  93:./Lib/Src/stm32f4xx_dac.c ****              already configured
  94:./Lib/Src/stm32f4xx_dac.c ****          (#) DAC channel2 : mapped on DMA1 Stream6 channel7 which must be 
  95:./Lib/Src/stm32f4xx_dac.c ****              already configured
  96:./Lib/Src/stm32f4xx_dac.c ****   
  97:./Lib/Src/stm32f4xx_dac.c ****       
  98:./Lib/Src/stm32f4xx_dac.c ****                       ##### How to use this driver #####
  99:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================
 100:./Lib/Src/stm32f4xx_dac.c ****     [..]          
 101:./Lib/Src/stm32f4xx_dac.c ****       (+) DAC APB clock must be enabled to get write access to DAC
 102:./Lib/Src/stm32f4xx_dac.c ****           registers using
 103:./Lib/Src/stm32f4xx_dac.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE)
 104:./Lib/Src/stm32f4xx_dac.c ****       (+) Configure DAC_OUTx (DAC_OUT1: PA4, DAC_OUT2: PA5) in analog mode.
 105:./Lib/Src/stm32f4xx_dac.c ****       (+) Configure the DAC channel using DAC_Init() function
 106:./Lib/Src/stm32f4xx_dac.c ****       (+) Enable the DAC channel using DAC_Cmd() function
 107:./Lib/Src/stm32f4xx_dac.c ****    
 108:./Lib/Src/stm32f4xx_dac.c ****  @endverbatim    
 109:./Lib/Src/stm32f4xx_dac.c ****   ******************************************************************************
 110:./Lib/Src/stm32f4xx_dac.c ****   * @attention
 111:./Lib/Src/stm32f4xx_dac.c ****   *
 112:./Lib/Src/stm32f4xx_dac.c ****   * Copyright (c) 2016 STMicroelectronics.
 113:./Lib/Src/stm32f4xx_dac.c ****   * All rights reserved.
 114:./Lib/Src/stm32f4xx_dac.c ****   *
 115:./Lib/Src/stm32f4xx_dac.c ****   * This software is licensed under terms that can be found in the LICENSE file
 116:./Lib/Src/stm32f4xx_dac.c ****   * in the root directory of this software component.
 117:./Lib/Src/stm32f4xx_dac.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 118:./Lib/Src/stm32f4xx_dac.c ****   *
 119:./Lib/Src/stm32f4xx_dac.c ****   ******************************************************************************
 120:./Lib/Src/stm32f4xx_dac.c ****   */
 121:./Lib/Src/stm32f4xx_dac.c **** 
 122:./Lib/Src/stm32f4xx_dac.c **** 
 123:./Lib/Src/stm32f4xx_dac.c **** /* Includes ------------------------------------------------------------------*/
 124:./Lib/Src/stm32f4xx_dac.c **** #include "stm32f4xx_dac.h"
 125:./Lib/Src/stm32f4xx_dac.c **** #include "stm32f4xx_rcc.h"
 126:./Lib/Src/stm32f4xx_dac.c **** 
 127:./Lib/Src/stm32f4xx_dac.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 128:./Lib/Src/stm32f4xx_dac.c ****   * @{
 129:./Lib/Src/stm32f4xx_dac.c ****   */
 130:./Lib/Src/stm32f4xx_dac.c **** 
 131:./Lib/Src/stm32f4xx_dac.c **** /** @defgroup DAC 
 132:./Lib/Src/stm32f4xx_dac.c ****   * @brief DAC driver modules
 133:./Lib/Src/stm32f4xx_dac.c ****   * @{
 134:./Lib/Src/stm32f4xx_dac.c ****   */ 
 135:./Lib/Src/stm32f4xx_dac.c **** 
 136:./Lib/Src/stm32f4xx_dac.c **** /* Private typedef -----------------------------------------------------------*/
 137:./Lib/Src/stm32f4xx_dac.c **** /* Private define ------------------------------------------------------------*/
 138:./Lib/Src/stm32f4xx_dac.c **** 
 139:./Lib/Src/stm32f4xx_dac.c **** /* CR register Mask */
 140:./Lib/Src/stm32f4xx_dac.c **** #define CR_CLEAR_MASK              ((uint32_t)0x00000FFE)
 141:./Lib/Src/stm32f4xx_dac.c **** 
 142:./Lib/Src/stm32f4xx_dac.c **** /* DAC Dual Channels SWTRIG masks */
 143:./Lib/Src/stm32f4xx_dac.c **** #define DUAL_SWTRIG_SET            ((uint32_t)0x00000003)
 144:./Lib/Src/stm32f4xx_dac.c **** #define DUAL_SWTRIG_RESET          ((uint32_t)0xFFFFFFFC)
ARM GAS  /tmp/ccqwdtxy.s 			page 4


 145:./Lib/Src/stm32f4xx_dac.c **** 
 146:./Lib/Src/stm32f4xx_dac.c **** /* DHR registers offsets */
 147:./Lib/Src/stm32f4xx_dac.c **** #define DHR12R1_OFFSET             ((uint32_t)0x00000008)
 148:./Lib/Src/stm32f4xx_dac.c **** #define DHR12R2_OFFSET             ((uint32_t)0x00000014)
 149:./Lib/Src/stm32f4xx_dac.c **** #define DHR12RD_OFFSET             ((uint32_t)0x00000020)
 150:./Lib/Src/stm32f4xx_dac.c **** 
 151:./Lib/Src/stm32f4xx_dac.c **** /* DOR register offset */
 152:./Lib/Src/stm32f4xx_dac.c **** #define DOR_OFFSET                 ((uint32_t)0x0000002C)
 153:./Lib/Src/stm32f4xx_dac.c **** 
 154:./Lib/Src/stm32f4xx_dac.c **** /* Private macro -------------------------------------------------------------*/
 155:./Lib/Src/stm32f4xx_dac.c **** /* Private variables ---------------------------------------------------------*/
 156:./Lib/Src/stm32f4xx_dac.c **** /* Private function prototypes -----------------------------------------------*/
 157:./Lib/Src/stm32f4xx_dac.c **** /* Private functions ---------------------------------------------------------*/
 158:./Lib/Src/stm32f4xx_dac.c **** 
 159:./Lib/Src/stm32f4xx_dac.c **** /** @defgroup DAC_Private_Functions
 160:./Lib/Src/stm32f4xx_dac.c ****   * @{
 161:./Lib/Src/stm32f4xx_dac.c ****   */
 162:./Lib/Src/stm32f4xx_dac.c **** 
 163:./Lib/Src/stm32f4xx_dac.c **** /** @defgroup DAC_Group1 DAC channels configuration
 164:./Lib/Src/stm32f4xx_dac.c ****  *  @brief   DAC channels configuration: trigger, output buffer, data format 
 165:./Lib/Src/stm32f4xx_dac.c ****  *
 166:./Lib/Src/stm32f4xx_dac.c **** @verbatim   
 167:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================
 168:./Lib/Src/stm32f4xx_dac.c ****    ##### DAC channels configuration: trigger, output buffer, data format #####
 169:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================  
 170:./Lib/Src/stm32f4xx_dac.c **** 
 171:./Lib/Src/stm32f4xx_dac.c **** @endverbatim
 172:./Lib/Src/stm32f4xx_dac.c ****   * @{
 173:./Lib/Src/stm32f4xx_dac.c ****   */
 174:./Lib/Src/stm32f4xx_dac.c **** 
 175:./Lib/Src/stm32f4xx_dac.c **** /**
 176:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Deinitializes the DAC peripheral registers to their default reset values.
 177:./Lib/Src/stm32f4xx_dac.c ****   * @param  None
 178:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 179:./Lib/Src/stm32f4xx_dac.c ****   */
 180:./Lib/Src/stm32f4xx_dac.c **** void DAC_DeInit(void)
 181:./Lib/Src/stm32f4xx_dac.c **** {
  29              		.loc 1 181 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
 182:./Lib/Src/stm32f4xx_dac.c ****   /* Enable DAC reset state */
 183:./Lib/Src/stm32f4xx_dac.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
  39              		.loc 1 183 3
  40 0004 0121     		movs	r1, #1
  41 0006 4FF00050 		mov	r0, #536870912
  42 000a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 184:./Lib/Src/stm32f4xx_dac.c ****   /* Release DAC from reset state */
 185:./Lib/Src/stm32f4xx_dac.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
  43              		.loc 1 185 3
  44 000e 0021     		movs	r1, #0
ARM GAS  /tmp/ccqwdtxy.s 			page 5


  45 0010 4FF00050 		mov	r0, #536870912
  46 0014 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 186:./Lib/Src/stm32f4xx_dac.c **** }
  47              		.loc 1 186 1
  48 0018 00BF     		nop
  49 001a 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.DAC_Init,"ax",%progbits
  54              		.align	1
  55              		.global	DAC_Init
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	DAC_Init:
  61              	.LFB124:
 187:./Lib/Src/stm32f4xx_dac.c **** 
 188:./Lib/Src/stm32f4xx_dac.c **** /**
 189:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Initializes the DAC peripheral according to the specified parameters
 190:./Lib/Src/stm32f4xx_dac.c ****   *         in the DAC_InitStruct.
 191:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: the selected DAC channel. 
 192:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 193:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 194:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 195:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
 196:./Lib/Src/stm32f4xx_dac.c ****   *         the configuration information for the  specified DAC channel.
 197:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 198:./Lib/Src/stm32f4xx_dac.c ****   */
 199:./Lib/Src/stm32f4xx_dac.c **** void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
 200:./Lib/Src/stm32f4xx_dac.c **** {
  62              		.loc 1 200 1
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 16
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 85B0     		sub	sp, sp, #20
  71              		.cfi_def_cfa_offset 24
  72 0004 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
  75 0008 3960     		str	r1, [r7]
 201:./Lib/Src/stm32f4xx_dac.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
  76              		.loc 1 201 12
  77 000a 0023     		movs	r3, #0
  78 000c FB60     		str	r3, [r7, #12]
  79              		.loc 1 201 25
  80 000e 0023     		movs	r3, #0
  81 0010 BB60     		str	r3, [r7, #8]
 202:./Lib/Src/stm32f4xx_dac.c **** 
 203:./Lib/Src/stm32f4xx_dac.c ****   /* Check the DAC parameters */
 204:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
 205:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
 206:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitu
 207:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
ARM GAS  /tmp/ccqwdtxy.s 			page 6


 208:./Lib/Src/stm32f4xx_dac.c **** 
 209:./Lib/Src/stm32f4xx_dac.c **** /*---------------------------- DAC CR Configuration --------------------------*/
 210:./Lib/Src/stm32f4xx_dac.c ****   /* Get the DAC CR value */
 211:./Lib/Src/stm32f4xx_dac.c ****   tmpreg1 = DAC->CR;
  82              		.loc 1 211 16
  83 0012 144B     		ldr	r3, .L3
  84              		.loc 1 211 11
  85 0014 1B68     		ldr	r3, [r3]
  86 0016 FB60     		str	r3, [r7, #12]
 212:./Lib/Src/stm32f4xx_dac.c ****   /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
 213:./Lib/Src/stm32f4xx_dac.c ****   tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
  87              		.loc 1 213 30
  88 0018 40F6FE72 		movw	r2, #4094
  89 001c 7B68     		ldr	r3, [r7, #4]
  90 001e 02FA03F3 		lsl	r3, r2, r3
  91              		.loc 1 213 14
  92 0022 DB43     		mvns	r3, r3
  93              		.loc 1 213 11
  94 0024 FA68     		ldr	r2, [r7, #12]
  95 0026 1340     		ands	r3, r3, r2
  96 0028 FB60     		str	r3, [r7, #12]
 214:./Lib/Src/stm32f4xx_dac.c ****   /* Configure for the selected DAC channel: buffer output, trigger, 
 215:./Lib/Src/stm32f4xx_dac.c ****      wave generation, mask/amplitude for wave generation */
 216:./Lib/Src/stm32f4xx_dac.c ****   /* Set TSELx and TENx bits according to DAC_Trigger value */
 217:./Lib/Src/stm32f4xx_dac.c ****   /* Set WAVEx bits according to DAC_WaveGeneration value */
 218:./Lib/Src/stm32f4xx_dac.c ****   /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
 219:./Lib/Src/stm32f4xx_dac.c ****   /* Set BOFFx bit according to DAC_OutputBuffer value */   
 220:./Lib/Src/stm32f4xx_dac.c ****   tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
  97              		.loc 1 220 28
  98 002a 3B68     		ldr	r3, [r7]
  99 002c 1A68     		ldr	r2, [r3]
 100              		.loc 1 220 58
 101 002e 3B68     		ldr	r3, [r7]
 102 0030 5B68     		ldr	r3, [r3, #4]
 103              		.loc 1 220 42
 104 0032 1A43     		orrs	r2, r2, r3
 221:./Lib/Src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 105              		.loc 1 221 28
 106 0034 3B68     		ldr	r3, [r7]
 107 0036 9B68     		ldr	r3, [r3, #8]
 220:./Lib/Src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 108              		.loc 1 220 79
 109 0038 1A43     		orrs	r2, r2, r3
 222:./Lib/Src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_OutputBuffer);
 110              		.loc 1 222 28
 111 003a 3B68     		ldr	r3, [r7]
 112 003c DB68     		ldr	r3, [r3, #12]
 220:./Lib/Src/stm32f4xx_dac.c ****              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 113              		.loc 1 220 11
 114 003e 1343     		orrs	r3, r3, r2
 115 0040 BB60     		str	r3, [r7, #8]
 223:./Lib/Src/stm32f4xx_dac.c ****   /* Calculate CR register value depending on DAC_Channel */
 224:./Lib/Src/stm32f4xx_dac.c ****   tmpreg1 |= tmpreg2 << DAC_Channel;
 116              		.loc 1 224 22
 117 0042 BA68     		ldr	r2, [r7, #8]
 118 0044 7B68     		ldr	r3, [r7, #4]
 119 0046 02FA03F3 		lsl	r3, r2, r3
ARM GAS  /tmp/ccqwdtxy.s 			page 7


 120              		.loc 1 224 11
 121 004a FA68     		ldr	r2, [r7, #12]
 122 004c 1343     		orrs	r3, r3, r2
 123 004e FB60     		str	r3, [r7, #12]
 225:./Lib/Src/stm32f4xx_dac.c ****   /* Write to DAC CR */
 226:./Lib/Src/stm32f4xx_dac.c ****   DAC->CR = tmpreg1;
 124              		.loc 1 226 6
 125 0050 044A     		ldr	r2, .L3
 126              		.loc 1 226 11
 127 0052 FB68     		ldr	r3, [r7, #12]
 128 0054 1360     		str	r3, [r2]
 227:./Lib/Src/stm32f4xx_dac.c **** }
 129              		.loc 1 227 1
 130 0056 00BF     		nop
 131 0058 1437     		adds	r7, r7, #20
 132              		.cfi_def_cfa_offset 4
 133 005a BD46     		mov	sp, r7
 134              		.cfi_def_cfa_register 13
 135              		@ sp needed
 136 005c 5DF8047B 		ldr	r7, [sp], #4
 137              		.cfi_restore 7
 138              		.cfi_def_cfa_offset 0
 139 0060 7047     		bx	lr
 140              	.L4:
 141 0062 00BF     		.align	2
 142              	.L3:
 143 0064 00740040 		.word	1073771520
 144              		.cfi_endproc
 145              	.LFE124:
 147              		.section	.text.DAC_StructInit,"ax",%progbits
 148              		.align	1
 149              		.global	DAC_StructInit
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 154              	DAC_StructInit:
 155              	.LFB125:
 228:./Lib/Src/stm32f4xx_dac.c **** 
 229:./Lib/Src/stm32f4xx_dac.c **** /**
 230:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Fills each DAC_InitStruct member with its default value.
 231:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
 232:./Lib/Src/stm32f4xx_dac.c ****   *         be initialized.
 233:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 234:./Lib/Src/stm32f4xx_dac.c ****   */
 235:./Lib/Src/stm32f4xx_dac.c **** void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
 236:./Lib/Src/stm32f4xx_dac.c **** {
 156              		.loc 1 236 1
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 8
 159              		@ frame_needed = 1, uses_anonymous_args = 0
 160              		@ link register save eliminated.
 161 0000 80B4     		push	{r7}
 162              		.cfi_def_cfa_offset 4
 163              		.cfi_offset 7, -4
 164 0002 83B0     		sub	sp, sp, #12
 165              		.cfi_def_cfa_offset 16
 166 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccqwdtxy.s 			page 8


 167              		.cfi_def_cfa_register 7
 168 0006 7860     		str	r0, [r7, #4]
 237:./Lib/Src/stm32f4xx_dac.c **** /*--------------- Reset DAC init structure parameters values -----------------*/
 238:./Lib/Src/stm32f4xx_dac.c ****   /* Initialize the DAC_Trigger member */
 239:./Lib/Src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 169              		.loc 1 239 31
 170 0008 7B68     		ldr	r3, [r7, #4]
 171 000a 0022     		movs	r2, #0
 172 000c 1A60     		str	r2, [r3]
 240:./Lib/Src/stm32f4xx_dac.c ****   /* Initialize the DAC_WaveGeneration member */
 241:./Lib/Src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 173              		.loc 1 241 38
 174 000e 7B68     		ldr	r3, [r7, #4]
 175 0010 0022     		movs	r2, #0
 176 0012 5A60     		str	r2, [r3, #4]
 242:./Lib/Src/stm32f4xx_dac.c ****   /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
 243:./Lib/Src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 177              		.loc 1 243 52
 178 0014 7B68     		ldr	r3, [r7, #4]
 179 0016 0022     		movs	r2, #0
 180 0018 9A60     		str	r2, [r3, #8]
 244:./Lib/Src/stm32f4xx_dac.c ****   /* Initialize the DAC_OutputBuffer member */
 245:./Lib/Src/stm32f4xx_dac.c ****   DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 181              		.loc 1 245 36
 182 001a 7B68     		ldr	r3, [r7, #4]
 183 001c 0022     		movs	r2, #0
 184 001e DA60     		str	r2, [r3, #12]
 246:./Lib/Src/stm32f4xx_dac.c **** }
 185              		.loc 1 246 1
 186 0020 00BF     		nop
 187 0022 0C37     		adds	r7, r7, #12
 188              		.cfi_def_cfa_offset 4
 189 0024 BD46     		mov	sp, r7
 190              		.cfi_def_cfa_register 13
 191              		@ sp needed
 192 0026 5DF8047B 		ldr	r7, [sp], #4
 193              		.cfi_restore 7
 194              		.cfi_def_cfa_offset 0
 195 002a 7047     		bx	lr
 196              		.cfi_endproc
 197              	.LFE125:
 199              		.section	.text.DAC_Cmd,"ax",%progbits
 200              		.align	1
 201              		.global	DAC_Cmd
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	DAC_Cmd:
 207              	.LFB126:
 247:./Lib/Src/stm32f4xx_dac.c **** 
 248:./Lib/Src/stm32f4xx_dac.c **** /**
 249:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Enables or disables the specified DAC channel.
 250:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 251:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 252:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 253:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 254:./Lib/Src/stm32f4xx_dac.c ****   * @param  NewState: new state of the DAC channel. 
ARM GAS  /tmp/ccqwdtxy.s 			page 9


 255:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 256:./Lib/Src/stm32f4xx_dac.c ****   * @note   When the DAC channel is enabled the trigger source can no more be modified.
 257:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 258:./Lib/Src/stm32f4xx_dac.c ****   */
 259:./Lib/Src/stm32f4xx_dac.c **** void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
 260:./Lib/Src/stm32f4xx_dac.c **** {
 208              		.loc 1 260 1
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213 0000 80B4     		push	{r7}
 214              		.cfi_def_cfa_offset 4
 215              		.cfi_offset 7, -4
 216 0002 83B0     		sub	sp, sp, #12
 217              		.cfi_def_cfa_offset 16
 218 0004 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
 220 0006 7860     		str	r0, [r7, #4]
 221 0008 0B46     		mov	r3, r1
 222 000a FB70     		strb	r3, [r7, #3]
 261:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 262:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 263:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 264:./Lib/Src/stm32f4xx_dac.c **** 
 265:./Lib/Src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 223              		.loc 1 265 6
 224 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 225 000e 002B     		cmp	r3, #0
 226 0010 09D0     		beq	.L7
 266:./Lib/Src/stm32f4xx_dac.c ****   {
 267:./Lib/Src/stm32f4xx_dac.c ****     /* Enable the selected DAC channel */
 268:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 227              		.loc 1 268 8
 228 0012 0D4B     		ldr	r3, .L10
 229 0014 1A68     		ldr	r2, [r3]
 230              		.loc 1 268 28
 231 0016 0121     		movs	r1, #1
 232 0018 7B68     		ldr	r3, [r7, #4]
 233 001a 01FA03F3 		lsl	r3, r1, r3
 234              		.loc 1 268 8
 235 001e 0A49     		ldr	r1, .L10
 236              		.loc 1 268 13
 237 0020 1343     		orrs	r3, r3, r2
 238 0022 0B60     		str	r3, [r1]
 269:./Lib/Src/stm32f4xx_dac.c ****   }
 270:./Lib/Src/stm32f4xx_dac.c ****   else
 271:./Lib/Src/stm32f4xx_dac.c ****   {
 272:./Lib/Src/stm32f4xx_dac.c ****     /* Disable the selected DAC channel */
 273:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 274:./Lib/Src/stm32f4xx_dac.c ****   }
 275:./Lib/Src/stm32f4xx_dac.c **** }
 239              		.loc 1 275 1
 240 0024 09E0     		b	.L9
 241              	.L7:
 273:./Lib/Src/stm32f4xx_dac.c ****   }
 242              		.loc 1 273 8
ARM GAS  /tmp/ccqwdtxy.s 			page 10


 243 0026 084B     		ldr	r3, .L10
 244 0028 1A68     		ldr	r2, [r3]
 273:./Lib/Src/stm32f4xx_dac.c ****   }
 245              		.loc 1 273 30
 246 002a 0121     		movs	r1, #1
 247 002c 7B68     		ldr	r3, [r7, #4]
 248 002e 01FA03F3 		lsl	r3, r1, r3
 273:./Lib/Src/stm32f4xx_dac.c ****   }
 249              		.loc 1 273 17
 250 0032 DB43     		mvns	r3, r3
 273:./Lib/Src/stm32f4xx_dac.c ****   }
 251              		.loc 1 273 8
 252 0034 0449     		ldr	r1, .L10
 273:./Lib/Src/stm32f4xx_dac.c ****   }
 253              		.loc 1 273 13
 254 0036 1340     		ands	r3, r3, r2
 255 0038 0B60     		str	r3, [r1]
 256              	.L9:
 257              		.loc 1 275 1
 258 003a 00BF     		nop
 259 003c 0C37     		adds	r7, r7, #12
 260              		.cfi_def_cfa_offset 4
 261 003e BD46     		mov	sp, r7
 262              		.cfi_def_cfa_register 13
 263              		@ sp needed
 264 0040 5DF8047B 		ldr	r7, [sp], #4
 265              		.cfi_restore 7
 266              		.cfi_def_cfa_offset 0
 267 0044 7047     		bx	lr
 268              	.L11:
 269 0046 00BF     		.align	2
 270              	.L10:
 271 0048 00740040 		.word	1073771520
 272              		.cfi_endproc
 273              	.LFE126:
 275              		.section	.text.DAC_SoftwareTriggerCmd,"ax",%progbits
 276              		.align	1
 277              		.global	DAC_SoftwareTriggerCmd
 278              		.syntax unified
 279              		.thumb
 280              		.thumb_func
 282              	DAC_SoftwareTriggerCmd:
 283              	.LFB127:
 276:./Lib/Src/stm32f4xx_dac.c **** 
 277:./Lib/Src/stm32f4xx_dac.c **** /**
 278:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Enables or disables the selected DAC channel software trigger.
 279:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 280:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 281:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 282:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 283:./Lib/Src/stm32f4xx_dac.c ****   * @param  NewState: new state of the selected DAC channel software trigger.
 284:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 285:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 286:./Lib/Src/stm32f4xx_dac.c ****   */
 287:./Lib/Src/stm32f4xx_dac.c **** void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
 288:./Lib/Src/stm32f4xx_dac.c **** {
 284              		.loc 1 288 1
ARM GAS  /tmp/ccqwdtxy.s 			page 11


 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 8
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289 0000 80B4     		push	{r7}
 290              		.cfi_def_cfa_offset 4
 291              		.cfi_offset 7, -4
 292 0002 83B0     		sub	sp, sp, #12
 293              		.cfi_def_cfa_offset 16
 294 0004 00AF     		add	r7, sp, #0
 295              		.cfi_def_cfa_register 7
 296 0006 7860     		str	r0, [r7, #4]
 297 0008 0B46     		mov	r3, r1
 298 000a FB70     		strb	r3, [r7, #3]
 289:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 290:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 291:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 292:./Lib/Src/stm32f4xx_dac.c **** 
 293:./Lib/Src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 299              		.loc 1 293 6
 300 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 301 000e 002B     		cmp	r3, #0
 302 0010 0AD0     		beq	.L13
 294:./Lib/Src/stm32f4xx_dac.c ****   {
 295:./Lib/Src/stm32f4xx_dac.c ****     /* Enable software trigger for the selected DAC channel */
 296:./Lib/Src/stm32f4xx_dac.c ****     DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 303              		.loc 1 296 8
 304 0012 0E4B     		ldr	r3, .L16
 305 0014 5A68     		ldr	r2, [r3, #4]
 306              		.loc 1 296 67
 307 0016 7B68     		ldr	r3, [r7, #4]
 308 0018 1B09     		lsrs	r3, r3, #4
 309              		.loc 1 296 51
 310 001a 0121     		movs	r1, #1
 311 001c 01FA03F3 		lsl	r3, r1, r3
 312              		.loc 1 296 8
 313 0020 0A49     		ldr	r1, .L16
 314              		.loc 1 296 18
 315 0022 1343     		orrs	r3, r3, r2
 316 0024 4B60     		str	r3, [r1, #4]
 297:./Lib/Src/stm32f4xx_dac.c ****   }
 298:./Lib/Src/stm32f4xx_dac.c ****   else
 299:./Lib/Src/stm32f4xx_dac.c ****   {
 300:./Lib/Src/stm32f4xx_dac.c ****     /* Disable software trigger for the selected DAC channel */
 301:./Lib/Src/stm32f4xx_dac.c ****     DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 302:./Lib/Src/stm32f4xx_dac.c ****   }
 303:./Lib/Src/stm32f4xx_dac.c **** }
 317              		.loc 1 303 1
 318 0026 0AE0     		b	.L15
 319              	.L13:
 301:./Lib/Src/stm32f4xx_dac.c ****   }
 320              		.loc 1 301 8
 321 0028 084B     		ldr	r3, .L16
 322 002a 5A68     		ldr	r2, [r3, #4]
 301:./Lib/Src/stm32f4xx_dac.c ****   }
 323              		.loc 1 301 69
 324 002c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqwdtxy.s 			page 12


 325 002e 1B09     		lsrs	r3, r3, #4
 301:./Lib/Src/stm32f4xx_dac.c ****   }
 326              		.loc 1 301 53
 327 0030 0121     		movs	r1, #1
 328 0032 01FA03F3 		lsl	r3, r1, r3
 301:./Lib/Src/stm32f4xx_dac.c ****   }
 329              		.loc 1 301 21
 330 0036 DB43     		mvns	r3, r3
 301:./Lib/Src/stm32f4xx_dac.c ****   }
 331              		.loc 1 301 8
 332 0038 0449     		ldr	r1, .L16
 301:./Lib/Src/stm32f4xx_dac.c ****   }
 333              		.loc 1 301 18
 334 003a 1340     		ands	r3, r3, r2
 335 003c 4B60     		str	r3, [r1, #4]
 336              	.L15:
 337              		.loc 1 303 1
 338 003e 00BF     		nop
 339 0040 0C37     		adds	r7, r7, #12
 340              		.cfi_def_cfa_offset 4
 341 0042 BD46     		mov	sp, r7
 342              		.cfi_def_cfa_register 13
 343              		@ sp needed
 344 0044 5DF8047B 		ldr	r7, [sp], #4
 345              		.cfi_restore 7
 346              		.cfi_def_cfa_offset 0
 347 0048 7047     		bx	lr
 348              	.L17:
 349 004a 00BF     		.align	2
 350              	.L16:
 351 004c 00740040 		.word	1073771520
 352              		.cfi_endproc
 353              	.LFE127:
 355              		.section	.text.DAC_DualSoftwareTriggerCmd,"ax",%progbits
 356              		.align	1
 357              		.global	DAC_DualSoftwareTriggerCmd
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 362              	DAC_DualSoftwareTriggerCmd:
 363              	.LFB128:
 304:./Lib/Src/stm32f4xx_dac.c **** 
 305:./Lib/Src/stm32f4xx_dac.c **** /**
 306:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Enables or disables simultaneously the two DAC channels software triggers.
 307:./Lib/Src/stm32f4xx_dac.c ****   * @param  NewState: new state of the DAC channels software triggers.
 308:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 309:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 310:./Lib/Src/stm32f4xx_dac.c ****   */
 311:./Lib/Src/stm32f4xx_dac.c **** void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
 312:./Lib/Src/stm32f4xx_dac.c **** {
 364              		.loc 1 312 1
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 8
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369 0000 80B4     		push	{r7}
 370              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqwdtxy.s 			page 13


 371              		.cfi_offset 7, -4
 372 0002 83B0     		sub	sp, sp, #12
 373              		.cfi_def_cfa_offset 16
 374 0004 00AF     		add	r7, sp, #0
 375              		.cfi_def_cfa_register 7
 376 0006 0346     		mov	r3, r0
 377 0008 FB71     		strb	r3, [r7, #7]
 313:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 314:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 315:./Lib/Src/stm32f4xx_dac.c **** 
 316:./Lib/Src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 378              		.loc 1 316 6
 379 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 380 000c 002B     		cmp	r3, #0
 381 000e 06D0     		beq	.L19
 317:./Lib/Src/stm32f4xx_dac.c ****   {
 318:./Lib/Src/stm32f4xx_dac.c ****     /* Enable software trigger for both DAC channels */
 319:./Lib/Src/stm32f4xx_dac.c ****     DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 382              		.loc 1 319 8
 383 0010 094B     		ldr	r3, .L22
 384 0012 5B68     		ldr	r3, [r3, #4]
 385 0014 084A     		ldr	r2, .L22
 386              		.loc 1 319 18
 387 0016 43F00303 		orr	r3, r3, #3
 388 001a 5360     		str	r3, [r2, #4]
 320:./Lib/Src/stm32f4xx_dac.c ****   }
 321:./Lib/Src/stm32f4xx_dac.c ****   else
 322:./Lib/Src/stm32f4xx_dac.c ****   {
 323:./Lib/Src/stm32f4xx_dac.c ****     /* Disable software trigger for both DAC channels */
 324:./Lib/Src/stm32f4xx_dac.c ****     DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 325:./Lib/Src/stm32f4xx_dac.c ****   }
 326:./Lib/Src/stm32f4xx_dac.c **** }
 389              		.loc 1 326 1
 390 001c 05E0     		b	.L21
 391              	.L19:
 324:./Lib/Src/stm32f4xx_dac.c ****   }
 392              		.loc 1 324 8
 393 001e 064B     		ldr	r3, .L22
 394 0020 5B68     		ldr	r3, [r3, #4]
 395 0022 054A     		ldr	r2, .L22
 324:./Lib/Src/stm32f4xx_dac.c ****   }
 396              		.loc 1 324 18
 397 0024 23F00303 		bic	r3, r3, #3
 398 0028 5360     		str	r3, [r2, #4]
 399              	.L21:
 400              		.loc 1 326 1
 401 002a 00BF     		nop
 402 002c 0C37     		adds	r7, r7, #12
 403              		.cfi_def_cfa_offset 4
 404 002e BD46     		mov	sp, r7
 405              		.cfi_def_cfa_register 13
 406              		@ sp needed
 407 0030 5DF8047B 		ldr	r7, [sp], #4
 408              		.cfi_restore 7
 409              		.cfi_def_cfa_offset 0
 410 0034 7047     		bx	lr
 411              	.L23:
ARM GAS  /tmp/ccqwdtxy.s 			page 14


 412 0036 00BF     		.align	2
 413              	.L22:
 414 0038 00740040 		.word	1073771520
 415              		.cfi_endproc
 416              	.LFE128:
 418              		.section	.text.DAC_WaveGenerationCmd,"ax",%progbits
 419              		.align	1
 420              		.global	DAC_WaveGenerationCmd
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 425              	DAC_WaveGenerationCmd:
 426              	.LFB129:
 327:./Lib/Src/stm32f4xx_dac.c **** 
 328:./Lib/Src/stm32f4xx_dac.c **** /**
 329:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Enables or disables the selected DAC channel wave generation.
 330:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 331:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 332:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 333:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 334:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Wave: specifies the wave type to enable or disable.
 335:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 336:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Wave_Noise: noise wave generation
 337:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Wave_Triangle: triangle wave generation
 338:./Lib/Src/stm32f4xx_dac.c ****   * @param  NewState: new state of the selected DAC channel wave generation.
 339:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.  
 340:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 341:./Lib/Src/stm32f4xx_dac.c ****   */
 342:./Lib/Src/stm32f4xx_dac.c **** void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
 343:./Lib/Src/stm32f4xx_dac.c **** {
 427              		.loc 1 343 1
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 16
 430              		@ frame_needed = 1, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 432 0000 80B4     		push	{r7}
 433              		.cfi_def_cfa_offset 4
 434              		.cfi_offset 7, -4
 435 0002 85B0     		sub	sp, sp, #20
 436              		.cfi_def_cfa_offset 24
 437 0004 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
 439 0006 F860     		str	r0, [r7, #12]
 440 0008 B960     		str	r1, [r7, #8]
 441 000a 1346     		mov	r3, r2
 442 000c FB71     		strb	r3, [r7, #7]
 344:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 345:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 346:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_WAVE(DAC_Wave)); 
 347:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 348:./Lib/Src/stm32f4xx_dac.c **** 
 349:./Lib/Src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 443              		.loc 1 349 6
 444 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 445 0010 002B     		cmp	r3, #0
 446 0012 09D0     		beq	.L25
 350:./Lib/Src/stm32f4xx_dac.c ****   {
ARM GAS  /tmp/ccqwdtxy.s 			page 15


 351:./Lib/Src/stm32f4xx_dac.c ****     /* Enable the selected wave generation for the selected DAC channel */
 352:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR |= DAC_Wave << DAC_Channel;
 447              		.loc 1 352 8
 448 0014 0C4B     		ldr	r3, .L28
 449 0016 1A68     		ldr	r2, [r3]
 450              		.loc 1 352 25
 451 0018 B968     		ldr	r1, [r7, #8]
 452 001a FB68     		ldr	r3, [r7, #12]
 453 001c 01FA03F3 		lsl	r3, r1, r3
 454              		.loc 1 352 8
 455 0020 0949     		ldr	r1, .L28
 456              		.loc 1 352 13
 457 0022 1343     		orrs	r3, r3, r2
 458 0024 0B60     		str	r3, [r1]
 353:./Lib/Src/stm32f4xx_dac.c ****   }
 354:./Lib/Src/stm32f4xx_dac.c ****   else
 355:./Lib/Src/stm32f4xx_dac.c ****   {
 356:./Lib/Src/stm32f4xx_dac.c ****     /* Disable the selected wave generation for the selected DAC channel */
 357:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR &= ~(DAC_Wave << DAC_Channel);
 358:./Lib/Src/stm32f4xx_dac.c ****   }
 359:./Lib/Src/stm32f4xx_dac.c **** }
 459              		.loc 1 359 1
 460 0026 09E0     		b	.L27
 461              	.L25:
 357:./Lib/Src/stm32f4xx_dac.c ****   }
 462              		.loc 1 357 8
 463 0028 074B     		ldr	r3, .L28
 464 002a 1A68     		ldr	r2, [r3]
 357:./Lib/Src/stm32f4xx_dac.c ****   }
 465              		.loc 1 357 27
 466 002c B968     		ldr	r1, [r7, #8]
 467 002e FB68     		ldr	r3, [r7, #12]
 468 0030 01FA03F3 		lsl	r3, r1, r3
 357:./Lib/Src/stm32f4xx_dac.c ****   }
 469              		.loc 1 357 16
 470 0034 DB43     		mvns	r3, r3
 357:./Lib/Src/stm32f4xx_dac.c ****   }
 471              		.loc 1 357 8
 472 0036 0449     		ldr	r1, .L28
 357:./Lib/Src/stm32f4xx_dac.c ****   }
 473              		.loc 1 357 13
 474 0038 1340     		ands	r3, r3, r2
 475 003a 0B60     		str	r3, [r1]
 476              	.L27:
 477              		.loc 1 359 1
 478 003c 00BF     		nop
 479 003e 1437     		adds	r7, r7, #20
 480              		.cfi_def_cfa_offset 4
 481 0040 BD46     		mov	sp, r7
 482              		.cfi_def_cfa_register 13
 483              		@ sp needed
 484 0042 5DF8047B 		ldr	r7, [sp], #4
 485              		.cfi_restore 7
 486              		.cfi_def_cfa_offset 0
 487 0046 7047     		bx	lr
 488              	.L29:
 489              		.align	2
ARM GAS  /tmp/ccqwdtxy.s 			page 16


 490              	.L28:
 491 0048 00740040 		.word	1073771520
 492              		.cfi_endproc
 493              	.LFE129:
 495              		.section	.text.DAC_SetChannel1Data,"ax",%progbits
 496              		.align	1
 497              		.global	DAC_SetChannel1Data
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 502              	DAC_SetChannel1Data:
 503              	.LFB130:
 360:./Lib/Src/stm32f4xx_dac.c **** 
 361:./Lib/Src/stm32f4xx_dac.c **** /**
 362:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Set the specified data holding register value for DAC channel1.
 363:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Align: Specifies the data alignment for DAC channel1.
 364:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 365:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_8b_R: 8bit right data alignment selected
 366:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_L: 12bit left data alignment selected
 367:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_R: 12bit right data alignment selected
 368:./Lib/Src/stm32f4xx_dac.c ****   * @param  Data: Data to be loaded in the selected data holding register.
 369:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 370:./Lib/Src/stm32f4xx_dac.c ****   */
 371:./Lib/Src/stm32f4xx_dac.c **** void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
 372:./Lib/Src/stm32f4xx_dac.c **** {  
 504              		.loc 1 372 1
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 16
 507              		@ frame_needed = 1, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 509 0000 80B4     		push	{r7}
 510              		.cfi_def_cfa_offset 4
 511              		.cfi_offset 7, -4
 512 0002 85B0     		sub	sp, sp, #20
 513              		.cfi_def_cfa_offset 24
 514 0004 00AF     		add	r7, sp, #0
 515              		.cfi_def_cfa_register 7
 516 0006 7860     		str	r0, [r7, #4]
 517 0008 0B46     		mov	r3, r1
 518 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 373:./Lib/Src/stm32f4xx_dac.c ****   __IO uint32_t tmp = 0;
 519              		.loc 1 373 17
 520 000c 0023     		movs	r3, #0
 521 000e FB60     		str	r3, [r7, #12]
 374:./Lib/Src/stm32f4xx_dac.c ****   
 375:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 376:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 377:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data));
 378:./Lib/Src/stm32f4xx_dac.c ****   
 379:./Lib/Src/stm32f4xx_dac.c ****   tmp = (uint32_t)DAC_BASE; 
 522              		.loc 1 379 7
 523 0010 084B     		ldr	r3, .L31
 524 0012 FB60     		str	r3, [r7, #12]
 380:./Lib/Src/stm32f4xx_dac.c ****   tmp += DHR12R1_OFFSET + DAC_Align;
 525              		.loc 1 380 7
 526 0014 FA68     		ldr	r2, [r7, #12]
 527 0016 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqwdtxy.s 			page 17


 528 0018 1344     		add	r3, r3, r2
 529 001a 0833     		adds	r3, r3, #8
 530 001c FB60     		str	r3, [r7, #12]
 381:./Lib/Src/stm32f4xx_dac.c **** 
 382:./Lib/Src/stm32f4xx_dac.c ****   /* Set the DAC channel1 selected data holding register */
 383:./Lib/Src/stm32f4xx_dac.c ****   *(__IO uint32_t *) tmp = Data;
 531              		.loc 1 383 4
 532 001e FB68     		ldr	r3, [r7, #12]
 533 0020 1A46     		mov	r2, r3
 534              		.loc 1 383 26
 535 0022 7B88     		ldrh	r3, [r7, #2]
 536 0024 1360     		str	r3, [r2]
 384:./Lib/Src/stm32f4xx_dac.c **** }
 537              		.loc 1 384 1
 538 0026 00BF     		nop
 539 0028 1437     		adds	r7, r7, #20
 540              		.cfi_def_cfa_offset 4
 541 002a BD46     		mov	sp, r7
 542              		.cfi_def_cfa_register 13
 543              		@ sp needed
 544 002c 5DF8047B 		ldr	r7, [sp], #4
 545              		.cfi_restore 7
 546              		.cfi_def_cfa_offset 0
 547 0030 7047     		bx	lr
 548              	.L32:
 549 0032 00BF     		.align	2
 550              	.L31:
 551 0034 00740040 		.word	1073771520
 552              		.cfi_endproc
 553              	.LFE130:
 555              		.section	.text.DAC_SetChannel2Data,"ax",%progbits
 556              		.align	1
 557              		.global	DAC_SetChannel2Data
 558              		.syntax unified
 559              		.thumb
 560              		.thumb_func
 562              	DAC_SetChannel2Data:
 563              	.LFB131:
 385:./Lib/Src/stm32f4xx_dac.c **** 
 386:./Lib/Src/stm32f4xx_dac.c **** /**
 387:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Set the specified data holding register value for DAC channel2.
 388:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Align: Specifies the data alignment for DAC channel2.
 389:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 390:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_8b_R: 8bit right data alignment selected
 391:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_L: 12bit left data alignment selected
 392:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_R: 12bit right data alignment selected
 393:./Lib/Src/stm32f4xx_dac.c ****   * @param  Data: Data to be loaded in the selected data holding register.
 394:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 395:./Lib/Src/stm32f4xx_dac.c ****   */
 396:./Lib/Src/stm32f4xx_dac.c **** void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
 397:./Lib/Src/stm32f4xx_dac.c **** {
 564              		.loc 1 397 1
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 16
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccqwdtxy.s 			page 18


 570              		.cfi_def_cfa_offset 4
 571              		.cfi_offset 7, -4
 572 0002 85B0     		sub	sp, sp, #20
 573              		.cfi_def_cfa_offset 24
 574 0004 00AF     		add	r7, sp, #0
 575              		.cfi_def_cfa_register 7
 576 0006 7860     		str	r0, [r7, #4]
 577 0008 0B46     		mov	r3, r1
 578 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 398:./Lib/Src/stm32f4xx_dac.c ****   __IO uint32_t tmp = 0;
 579              		.loc 1 398 17
 580 000c 0023     		movs	r3, #0
 581 000e FB60     		str	r3, [r7, #12]
 399:./Lib/Src/stm32f4xx_dac.c **** 
 400:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 401:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 402:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data));
 403:./Lib/Src/stm32f4xx_dac.c ****   
 404:./Lib/Src/stm32f4xx_dac.c ****   tmp = (uint32_t)DAC_BASE;
 582              		.loc 1 404 7
 583 0010 084B     		ldr	r3, .L34
 584 0012 FB60     		str	r3, [r7, #12]
 405:./Lib/Src/stm32f4xx_dac.c ****   tmp += DHR12R2_OFFSET + DAC_Align;
 585              		.loc 1 405 7
 586 0014 FA68     		ldr	r2, [r7, #12]
 587 0016 7B68     		ldr	r3, [r7, #4]
 588 0018 1344     		add	r3, r3, r2
 589 001a 1433     		adds	r3, r3, #20
 590 001c FB60     		str	r3, [r7, #12]
 406:./Lib/Src/stm32f4xx_dac.c **** 
 407:./Lib/Src/stm32f4xx_dac.c ****   /* Set the DAC channel2 selected data holding register */
 408:./Lib/Src/stm32f4xx_dac.c ****   *(__IO uint32_t *)tmp = Data;
 591              		.loc 1 408 4
 592 001e FB68     		ldr	r3, [r7, #12]
 593 0020 1A46     		mov	r2, r3
 594              		.loc 1 408 25
 595 0022 7B88     		ldrh	r3, [r7, #2]
 596 0024 1360     		str	r3, [r2]
 409:./Lib/Src/stm32f4xx_dac.c **** }
 597              		.loc 1 409 1
 598 0026 00BF     		nop
 599 0028 1437     		adds	r7, r7, #20
 600              		.cfi_def_cfa_offset 4
 601 002a BD46     		mov	sp, r7
 602              		.cfi_def_cfa_register 13
 603              		@ sp needed
 604 002c 5DF8047B 		ldr	r7, [sp], #4
 605              		.cfi_restore 7
 606              		.cfi_def_cfa_offset 0
 607 0030 7047     		bx	lr
 608              	.L35:
 609 0032 00BF     		.align	2
 610              	.L34:
 611 0034 00740040 		.word	1073771520
 612              		.cfi_endproc
 613              	.LFE131:
 615              		.section	.text.DAC_SetDualChannelData,"ax",%progbits
ARM GAS  /tmp/ccqwdtxy.s 			page 19


 616              		.align	1
 617              		.global	DAC_SetDualChannelData
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 622              	DAC_SetDualChannelData:
 623              	.LFB132:
 410:./Lib/Src/stm32f4xx_dac.c **** 
 411:./Lib/Src/stm32f4xx_dac.c **** /**
 412:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Set the specified data holding register value for dual channel DAC.
 413:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Align: Specifies the data alignment for dual channel DAC.
 414:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 415:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_8b_R: 8bit right data alignment selected
 416:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_L: 12bit left data alignment selected
 417:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Align_12b_R: 12bit right data alignment selected
 418:./Lib/Src/stm32f4xx_dac.c ****   * @param  Data2: Data for DAC Channel2 to be loaded in the selected data holding register.
 419:./Lib/Src/stm32f4xx_dac.c ****   * @param  Data1: Data for DAC Channel1 to be loaded in the selected data  holding register.
 420:./Lib/Src/stm32f4xx_dac.c ****   * @note   In dual mode, a unique register access is required to write in both
 421:./Lib/Src/stm32f4xx_dac.c ****   *          DAC channels at the same time.
 422:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 423:./Lib/Src/stm32f4xx_dac.c ****   */
 424:./Lib/Src/stm32f4xx_dac.c **** void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
 425:./Lib/Src/stm32f4xx_dac.c **** {
 624              		.loc 1 425 1
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 16
 627              		@ frame_needed = 1, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 629 0000 80B4     		push	{r7}
 630              		.cfi_def_cfa_offset 4
 631              		.cfi_offset 7, -4
 632 0002 85B0     		sub	sp, sp, #20
 633              		.cfi_def_cfa_offset 24
 634 0004 00AF     		add	r7, sp, #0
 635              		.cfi_def_cfa_register 7
 636 0006 7860     		str	r0, [r7, #4]
 637 0008 0B46     		mov	r3, r1
 638 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 639 000c 1346     		mov	r3, r2	@ movhi
 640 000e 3B80     		strh	r3, [r7]	@ movhi
 426:./Lib/Src/stm32f4xx_dac.c ****   uint32_t data = 0, tmp = 0;
 641              		.loc 1 426 12
 642 0010 0023     		movs	r3, #0
 643 0012 FB60     		str	r3, [r7, #12]
 644              		.loc 1 426 22
 645 0014 0023     		movs	r3, #0
 646 0016 BB60     		str	r3, [r7, #8]
 427:./Lib/Src/stm32f4xx_dac.c ****   
 428:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 429:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_ALIGN(DAC_Align));
 430:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data1));
 431:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_DATA(Data2));
 432:./Lib/Src/stm32f4xx_dac.c ****   
 433:./Lib/Src/stm32f4xx_dac.c ****   /* Calculate and set dual DAC data holding register value */
 434:./Lib/Src/stm32f4xx_dac.c ****   if (DAC_Align == DAC_Align_8b_R)
 647              		.loc 1 434 6
 648 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccqwdtxy.s 			page 20


 649 001a 082B     		cmp	r3, #8
 650 001c 05D1     		bne	.L37
 435:./Lib/Src/stm32f4xx_dac.c ****   {
 436:./Lib/Src/stm32f4xx_dac.c ****     data = ((uint32_t)Data2 << 8) | Data1; 
 651              		.loc 1 436 13
 652 001e 7B88     		ldrh	r3, [r7, #2]
 653              		.loc 1 436 29
 654 0020 1A02     		lsls	r2, r3, #8
 655              		.loc 1 436 35
 656 0022 3B88     		ldrh	r3, [r7]
 657              		.loc 1 436 10
 658 0024 1343     		orrs	r3, r3, r2
 659 0026 FB60     		str	r3, [r7, #12]
 660 0028 04E0     		b	.L38
 661              	.L37:
 437:./Lib/Src/stm32f4xx_dac.c ****   }
 438:./Lib/Src/stm32f4xx_dac.c ****   else
 439:./Lib/Src/stm32f4xx_dac.c ****   {
 440:./Lib/Src/stm32f4xx_dac.c ****     data = ((uint32_t)Data2 << 16) | Data1;
 662              		.loc 1 440 13
 663 002a 7B88     		ldrh	r3, [r7, #2]
 664              		.loc 1 440 29
 665 002c 1A04     		lsls	r2, r3, #16
 666              		.loc 1 440 36
 667 002e 3B88     		ldrh	r3, [r7]
 668              		.loc 1 440 10
 669 0030 1343     		orrs	r3, r3, r2
 670 0032 FB60     		str	r3, [r7, #12]
 671              	.L38:
 441:./Lib/Src/stm32f4xx_dac.c ****   }
 442:./Lib/Src/stm32f4xx_dac.c ****   
 443:./Lib/Src/stm32f4xx_dac.c ****   tmp = (uint32_t)DAC_BASE;
 672              		.loc 1 443 7
 673 0034 074B     		ldr	r3, .L39
 674 0036 BB60     		str	r3, [r7, #8]
 444:./Lib/Src/stm32f4xx_dac.c ****   tmp += DHR12RD_OFFSET + DAC_Align;
 675              		.loc 1 444 7
 676 0038 7A68     		ldr	r2, [r7, #4]
 677 003a BB68     		ldr	r3, [r7, #8]
 678 003c 1344     		add	r3, r3, r2
 679 003e 2033     		adds	r3, r3, #32
 680 0040 BB60     		str	r3, [r7, #8]
 445:./Lib/Src/stm32f4xx_dac.c **** 
 446:./Lib/Src/stm32f4xx_dac.c ****   /* Set the dual DAC selected data holding register */
 447:./Lib/Src/stm32f4xx_dac.c ****   *(__IO uint32_t *)tmp = data;
 681              		.loc 1 447 4
 682 0042 BB68     		ldr	r3, [r7, #8]
 683              		.loc 1 447 25
 684 0044 FA68     		ldr	r2, [r7, #12]
 685 0046 1A60     		str	r2, [r3]
 448:./Lib/Src/stm32f4xx_dac.c **** }
 686              		.loc 1 448 1
 687 0048 00BF     		nop
 688 004a 1437     		adds	r7, r7, #20
 689              		.cfi_def_cfa_offset 4
 690 004c BD46     		mov	sp, r7
 691              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccqwdtxy.s 			page 21


 692              		@ sp needed
 693 004e 5DF8047B 		ldr	r7, [sp], #4
 694              		.cfi_restore 7
 695              		.cfi_def_cfa_offset 0
 696 0052 7047     		bx	lr
 697              	.L40:
 698              		.align	2
 699              	.L39:
 700 0054 00740040 		.word	1073771520
 701              		.cfi_endproc
 702              	.LFE132:
 704              		.section	.text.DAC_GetDataOutputValue,"ax",%progbits
 705              		.align	1
 706              		.global	DAC_GetDataOutputValue
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 711              	DAC_GetDataOutputValue:
 712              	.LFB133:
 449:./Lib/Src/stm32f4xx_dac.c **** 
 450:./Lib/Src/stm32f4xx_dac.c **** /**
 451:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Returns the last data output value of the selected DAC channel.
 452:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 453:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 454:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 455:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 456:./Lib/Src/stm32f4xx_dac.c ****   * @retval The selected DAC channel data output value.
 457:./Lib/Src/stm32f4xx_dac.c ****   */
 458:./Lib/Src/stm32f4xx_dac.c **** uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
 459:./Lib/Src/stm32f4xx_dac.c **** {
 713              		.loc 1 459 1
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 16
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717              		@ link register save eliminated.
 718 0000 80B4     		push	{r7}
 719              		.cfi_def_cfa_offset 4
 720              		.cfi_offset 7, -4
 721 0002 85B0     		sub	sp, sp, #20
 722              		.cfi_def_cfa_offset 24
 723 0004 00AF     		add	r7, sp, #0
 724              		.cfi_def_cfa_register 7
 725 0006 7860     		str	r0, [r7, #4]
 460:./Lib/Src/stm32f4xx_dac.c ****   __IO uint32_t tmp = 0;
 726              		.loc 1 460 17
 727 0008 0023     		movs	r3, #0
 728 000a FB60     		str	r3, [r7, #12]
 461:./Lib/Src/stm32f4xx_dac.c ****   
 462:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 463:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 464:./Lib/Src/stm32f4xx_dac.c ****   
 465:./Lib/Src/stm32f4xx_dac.c ****   tmp = (uint32_t) DAC_BASE ;
 729              		.loc 1 465 7
 730 000c 084B     		ldr	r3, .L43
 731 000e FB60     		str	r3, [r7, #12]
 466:./Lib/Src/stm32f4xx_dac.c ****   tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 732              		.loc 1 466 46
ARM GAS  /tmp/ccqwdtxy.s 			page 22


 733 0010 7B68     		ldr	r3, [r7, #4]
 734 0012 9A08     		lsrs	r2, r3, #2
 735              		.loc 1 466 7
 736 0014 FB68     		ldr	r3, [r7, #12]
 737 0016 1344     		add	r3, r3, r2
 738 0018 2C33     		adds	r3, r3, #44
 739 001a FB60     		str	r3, [r7, #12]
 467:./Lib/Src/stm32f4xx_dac.c ****   
 468:./Lib/Src/stm32f4xx_dac.c ****   /* Returns the DAC channel data output register value */
 469:./Lib/Src/stm32f4xx_dac.c ****   return (uint16_t) (*(__IO uint32_t*) tmp);
 740              		.loc 1 469 23
 741 001c FB68     		ldr	r3, [r7, #12]
 742              		.loc 1 469 22
 743 001e 1B68     		ldr	r3, [r3]
 744              		.loc 1 469 10
 745 0020 9BB2     		uxth	r3, r3
 470:./Lib/Src/stm32f4xx_dac.c **** }
 746              		.loc 1 470 1
 747 0022 1846     		mov	r0, r3
 748 0024 1437     		adds	r7, r7, #20
 749              		.cfi_def_cfa_offset 4
 750 0026 BD46     		mov	sp, r7
 751              		.cfi_def_cfa_register 13
 752              		@ sp needed
 753 0028 5DF8047B 		ldr	r7, [sp], #4
 754              		.cfi_restore 7
 755              		.cfi_def_cfa_offset 0
 756 002c 7047     		bx	lr
 757              	.L44:
 758 002e 00BF     		.align	2
 759              	.L43:
 760 0030 00740040 		.word	1073771520
 761              		.cfi_endproc
 762              	.LFE133:
 764              		.section	.text.DAC_DMACmd,"ax",%progbits
 765              		.align	1
 766              		.global	DAC_DMACmd
 767              		.syntax unified
 768              		.thumb
 769              		.thumb_func
 771              	DAC_DMACmd:
 772              	.LFB134:
 471:./Lib/Src/stm32f4xx_dac.c **** /**
 472:./Lib/Src/stm32f4xx_dac.c ****   * @}
 473:./Lib/Src/stm32f4xx_dac.c ****   */
 474:./Lib/Src/stm32f4xx_dac.c **** 
 475:./Lib/Src/stm32f4xx_dac.c **** /** @defgroup DAC_Group2 DMA management functions
 476:./Lib/Src/stm32f4xx_dac.c ****  *  @brief   DMA management functions
 477:./Lib/Src/stm32f4xx_dac.c ****  *
 478:./Lib/Src/stm32f4xx_dac.c **** @verbatim   
 479:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================
 480:./Lib/Src/stm32f4xx_dac.c ****                        ##### DMA management functions #####
 481:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================  
 482:./Lib/Src/stm32f4xx_dac.c **** 
 483:./Lib/Src/stm32f4xx_dac.c **** @endverbatim
 484:./Lib/Src/stm32f4xx_dac.c ****   * @{
 485:./Lib/Src/stm32f4xx_dac.c ****   */
ARM GAS  /tmp/ccqwdtxy.s 			page 23


 486:./Lib/Src/stm32f4xx_dac.c **** 
 487:./Lib/Src/stm32f4xx_dac.c **** /**
 488:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Enables or disables the specified DAC channel DMA request.
 489:./Lib/Src/stm32f4xx_dac.c ****   * @note   When enabled DMA1 is generated when an external trigger (EXTI Line9,
 490:./Lib/Src/stm32f4xx_dac.c ****   *         TIM2, TIM4, TIM5, TIM6, TIM7 or TIM8  but not a software trigger) occurs.
 491:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 492:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 493:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 494:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 495:./Lib/Src/stm32f4xx_dac.c ****   * @param  NewState: new state of the selected DAC channel DMA request.
 496:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 497:./Lib/Src/stm32f4xx_dac.c ****   * @note   The DAC channel1 is mapped on DMA1 Stream 5 channel7 which must be
 498:./Lib/Src/stm32f4xx_dac.c ****   *          already configured.
 499:./Lib/Src/stm32f4xx_dac.c ****   * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
 500:./Lib/Src/stm32f4xx_dac.c ****   *          already configured.    
 501:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 502:./Lib/Src/stm32f4xx_dac.c ****   */
 503:./Lib/Src/stm32f4xx_dac.c **** void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
 504:./Lib/Src/stm32f4xx_dac.c **** {
 773              		.loc 1 504 1
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 8
 776              		@ frame_needed = 1, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778 0000 80B4     		push	{r7}
 779              		.cfi_def_cfa_offset 4
 780              		.cfi_offset 7, -4
 781 0002 83B0     		sub	sp, sp, #12
 782              		.cfi_def_cfa_offset 16
 783 0004 00AF     		add	r7, sp, #0
 784              		.cfi_def_cfa_register 7
 785 0006 7860     		str	r0, [r7, #4]
 786 0008 0B46     		mov	r3, r1
 787 000a FB70     		strb	r3, [r7, #3]
 505:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 506:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 507:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 508:./Lib/Src/stm32f4xx_dac.c **** 
 509:./Lib/Src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 788              		.loc 1 509 6
 789 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 790 000e 002B     		cmp	r3, #0
 791 0010 0AD0     		beq	.L46
 510:./Lib/Src/stm32f4xx_dac.c ****   {
 511:./Lib/Src/stm32f4xx_dac.c ****     /* Enable the selected DAC channel DMA request */
 512:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 792              		.loc 1 512 8
 793 0012 0E4B     		ldr	r3, .L49
 794 0014 1A68     		ldr	r2, [r3]
 795              		.loc 1 512 31
 796 0016 4FF48051 		mov	r1, #4096
 797 001a 7B68     		ldr	r3, [r7, #4]
 798 001c 01FA03F3 		lsl	r3, r1, r3
 799              		.loc 1 512 8
 800 0020 0A49     		ldr	r1, .L49
 801              		.loc 1 512 13
 802 0022 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccqwdtxy.s 			page 24


 803 0024 0B60     		str	r3, [r1]
 513:./Lib/Src/stm32f4xx_dac.c ****   }
 514:./Lib/Src/stm32f4xx_dac.c ****   else
 515:./Lib/Src/stm32f4xx_dac.c ****   {
 516:./Lib/Src/stm32f4xx_dac.c ****     /* Disable the selected DAC channel DMA request */
 517:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 518:./Lib/Src/stm32f4xx_dac.c ****   }
 519:./Lib/Src/stm32f4xx_dac.c **** }
 804              		.loc 1 519 1
 805 0026 0AE0     		b	.L48
 806              	.L46:
 517:./Lib/Src/stm32f4xx_dac.c ****   }
 807              		.loc 1 517 8
 808 0028 084B     		ldr	r3, .L49
 809 002a 1A68     		ldr	r2, [r3]
 517:./Lib/Src/stm32f4xx_dac.c ****   }
 810              		.loc 1 517 33
 811 002c 4FF48051 		mov	r1, #4096
 812 0030 7B68     		ldr	r3, [r7, #4]
 813 0032 01FA03F3 		lsl	r3, r1, r3
 517:./Lib/Src/stm32f4xx_dac.c ****   }
 814              		.loc 1 517 17
 815 0036 DB43     		mvns	r3, r3
 517:./Lib/Src/stm32f4xx_dac.c ****   }
 816              		.loc 1 517 8
 817 0038 0449     		ldr	r1, .L49
 517:./Lib/Src/stm32f4xx_dac.c ****   }
 818              		.loc 1 517 13
 819 003a 1340     		ands	r3, r3, r2
 820 003c 0B60     		str	r3, [r1]
 821              	.L48:
 822              		.loc 1 519 1
 823 003e 00BF     		nop
 824 0040 0C37     		adds	r7, r7, #12
 825              		.cfi_def_cfa_offset 4
 826 0042 BD46     		mov	sp, r7
 827              		.cfi_def_cfa_register 13
 828              		@ sp needed
 829 0044 5DF8047B 		ldr	r7, [sp], #4
 830              		.cfi_restore 7
 831              		.cfi_def_cfa_offset 0
 832 0048 7047     		bx	lr
 833              	.L50:
 834 004a 00BF     		.align	2
 835              	.L49:
 836 004c 00740040 		.word	1073771520
 837              		.cfi_endproc
 838              	.LFE134:
 840              		.section	.text.DAC_ITConfig,"ax",%progbits
 841              		.align	1
 842              		.global	DAC_ITConfig
 843              		.syntax unified
 844              		.thumb
 845              		.thumb_func
 847              	DAC_ITConfig:
 848              	.LFB135:
 520:./Lib/Src/stm32f4xx_dac.c **** /**
ARM GAS  /tmp/ccqwdtxy.s 			page 25


 521:./Lib/Src/stm32f4xx_dac.c ****   * @}
 522:./Lib/Src/stm32f4xx_dac.c ****   */
 523:./Lib/Src/stm32f4xx_dac.c **** 
 524:./Lib/Src/stm32f4xx_dac.c **** /** @defgroup DAC_Group3 Interrupts and flags management functions
 525:./Lib/Src/stm32f4xx_dac.c ****  *  @brief   Interrupts and flags management functions
 526:./Lib/Src/stm32f4xx_dac.c ****  *
 527:./Lib/Src/stm32f4xx_dac.c **** @verbatim   
 528:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================
 529:./Lib/Src/stm32f4xx_dac.c ****              ##### Interrupts and flags management functions #####
 530:./Lib/Src/stm32f4xx_dac.c ****  ===============================================================================  
 531:./Lib/Src/stm32f4xx_dac.c **** 
 532:./Lib/Src/stm32f4xx_dac.c **** @endverbatim
 533:./Lib/Src/stm32f4xx_dac.c ****   * @{
 534:./Lib/Src/stm32f4xx_dac.c ****   */
 535:./Lib/Src/stm32f4xx_dac.c **** 
 536:./Lib/Src/stm32f4xx_dac.c **** /**
 537:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Enables or disables the specified DAC interrupts.
 538:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 539:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 540:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 541:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 542:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt sources to be enabled or disabled. 
 543:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be the following values:
 544:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask
 545:./Lib/Src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 546:./Lib/Src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).
 547:./Lib/Src/stm32f4xx_dac.c ****   * @param  NewState: new state of the specified DAC interrupts.
 548:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be: ENABLE or DISABLE.
 549:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 550:./Lib/Src/stm32f4xx_dac.c ****   */ 
 551:./Lib/Src/stm32f4xx_dac.c **** void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
 552:./Lib/Src/stm32f4xx_dac.c **** {
 849              		.loc 1 552 1
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 16
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853              		@ link register save eliminated.
 854 0000 80B4     		push	{r7}
 855              		.cfi_def_cfa_offset 4
 856              		.cfi_offset 7, -4
 857 0002 85B0     		sub	sp, sp, #20
 858              		.cfi_def_cfa_offset 24
 859 0004 00AF     		add	r7, sp, #0
 860              		.cfi_def_cfa_register 7
 861 0006 F860     		str	r0, [r7, #12]
 862 0008 B960     		str	r1, [r7, #8]
 863 000a 1346     		mov	r3, r2
 864 000c FB71     		strb	r3, [r7, #7]
 553:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 554:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 555:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 556:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_IT(DAC_IT)); 
 557:./Lib/Src/stm32f4xx_dac.c **** 
 558:./Lib/Src/stm32f4xx_dac.c ****   if (NewState != DISABLE)
 865              		.loc 1 558 6
 866 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 867 0010 002B     		cmp	r3, #0
ARM GAS  /tmp/ccqwdtxy.s 			page 26


 868 0012 09D0     		beq	.L52
 559:./Lib/Src/stm32f4xx_dac.c ****   {
 560:./Lib/Src/stm32f4xx_dac.c ****     /* Enable the selected DAC interrupts */
 561:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR |=  (DAC_IT << DAC_Channel);
 869              		.loc 1 561 8
 870 0014 0C4B     		ldr	r3, .L55
 871 0016 1A68     		ldr	r2, [r3]
 872              		.loc 1 561 25
 873 0018 B968     		ldr	r1, [r7, #8]
 874 001a FB68     		ldr	r3, [r7, #12]
 875 001c 01FA03F3 		lsl	r3, r1, r3
 876              		.loc 1 561 8
 877 0020 0949     		ldr	r1, .L55
 878              		.loc 1 561 13
 879 0022 1343     		orrs	r3, r3, r2
 880 0024 0B60     		str	r3, [r1]
 562:./Lib/Src/stm32f4xx_dac.c ****   }
 563:./Lib/Src/stm32f4xx_dac.c ****   else
 564:./Lib/Src/stm32f4xx_dac.c ****   {
 565:./Lib/Src/stm32f4xx_dac.c ****     /* Disable the selected DAC interrupts */
 566:./Lib/Src/stm32f4xx_dac.c ****     DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 567:./Lib/Src/stm32f4xx_dac.c ****   }
 568:./Lib/Src/stm32f4xx_dac.c **** }
 881              		.loc 1 568 1
 882 0026 09E0     		b	.L54
 883              	.L52:
 566:./Lib/Src/stm32f4xx_dac.c ****   }
 884              		.loc 1 566 8
 885 0028 074B     		ldr	r3, .L55
 886 002a 1A68     		ldr	r2, [r3]
 566:./Lib/Src/stm32f4xx_dac.c ****   }
 887              		.loc 1 566 36
 888 002c B968     		ldr	r1, [r7, #8]
 889 002e FB68     		ldr	r3, [r7, #12]
 890 0030 01FA03F3 		lsl	r3, r1, r3
 566:./Lib/Src/stm32f4xx_dac.c ****   }
 891              		.loc 1 566 17
 892 0034 DB43     		mvns	r3, r3
 566:./Lib/Src/stm32f4xx_dac.c ****   }
 893              		.loc 1 566 8
 894 0036 0449     		ldr	r1, .L55
 566:./Lib/Src/stm32f4xx_dac.c ****   }
 895              		.loc 1 566 13
 896 0038 1340     		ands	r3, r3, r2
 897 003a 0B60     		str	r3, [r1]
 898              	.L54:
 899              		.loc 1 568 1
 900 003c 00BF     		nop
 901 003e 1437     		adds	r7, r7, #20
 902              		.cfi_def_cfa_offset 4
 903 0040 BD46     		mov	sp, r7
 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 0042 5DF8047B 		ldr	r7, [sp], #4
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
 909 0046 7047     		bx	lr
ARM GAS  /tmp/ccqwdtxy.s 			page 27


 910              	.L56:
 911              		.align	2
 912              	.L55:
 913 0048 00740040 		.word	1073771520
 914              		.cfi_endproc
 915              	.LFE135:
 917              		.section	.text.DAC_GetFlagStatus,"ax",%progbits
 918              		.align	1
 919              		.global	DAC_GetFlagStatus
 920              		.syntax unified
 921              		.thumb
 922              		.thumb_func
 924              	DAC_GetFlagStatus:
 925              	.LFB136:
 569:./Lib/Src/stm32f4xx_dac.c **** 
 570:./Lib/Src/stm32f4xx_dac.c **** /**
 571:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Checks whether the specified DAC flag is set or not.
 572:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 573:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 574:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 575:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 576:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_FLAG: specifies the flag to check. 
 577:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be only of the following value:
 578:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_FLAG_DMAUDR: DMA underrun flag
 579:./Lib/Src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 580:./Lib/Src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).
 581:./Lib/Src/stm32f4xx_dac.c ****   * @retval The new state of DAC_FLAG (SET or RESET).
 582:./Lib/Src/stm32f4xx_dac.c ****   */
 583:./Lib/Src/stm32f4xx_dac.c **** FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
 584:./Lib/Src/stm32f4xx_dac.c **** {
 926              		.loc 1 584 1
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 16
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931 0000 80B4     		push	{r7}
 932              		.cfi_def_cfa_offset 4
 933              		.cfi_offset 7, -4
 934 0002 85B0     		sub	sp, sp, #20
 935              		.cfi_def_cfa_offset 24
 936 0004 00AF     		add	r7, sp, #0
 937              		.cfi_def_cfa_register 7
 938 0006 7860     		str	r0, [r7, #4]
 939 0008 3960     		str	r1, [r7]
 585:./Lib/Src/stm32f4xx_dac.c ****   FlagStatus bitstatus = RESET;
 940              		.loc 1 585 14
 941 000a 0023     		movs	r3, #0
 942 000c FB73     		strb	r3, [r7, #15]
 586:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 587:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 588:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_FLAG(DAC_FLAG));
 589:./Lib/Src/stm32f4xx_dac.c **** 
 590:./Lib/Src/stm32f4xx_dac.c ****   /* Check the status of the specified DAC flag */
 591:./Lib/Src/stm32f4xx_dac.c ****   if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 943              		.loc 1 591 11
 944 000e 0A4B     		ldr	r3, .L61
 945 0010 5A6B     		ldr	r2, [r3, #52]
ARM GAS  /tmp/ccqwdtxy.s 			page 28


 946              		.loc 1 591 28
 947 0012 3968     		ldr	r1, [r7]
 948 0014 7B68     		ldr	r3, [r7, #4]
 949 0016 01FA03F3 		lsl	r3, r1, r3
 950              		.loc 1 591 16
 951 001a 1340     		ands	r3, r3, r2
 952              		.loc 1 591 6
 953 001c 002B     		cmp	r3, #0
 954 001e 02D0     		beq	.L58
 592:./Lib/Src/stm32f4xx_dac.c ****   {
 593:./Lib/Src/stm32f4xx_dac.c ****     /* DAC_FLAG is set */
 594:./Lib/Src/stm32f4xx_dac.c ****     bitstatus = SET;
 955              		.loc 1 594 15
 956 0020 0123     		movs	r3, #1
 957 0022 FB73     		strb	r3, [r7, #15]
 958 0024 01E0     		b	.L59
 959              	.L58:
 595:./Lib/Src/stm32f4xx_dac.c ****   }
 596:./Lib/Src/stm32f4xx_dac.c ****   else
 597:./Lib/Src/stm32f4xx_dac.c ****   {
 598:./Lib/Src/stm32f4xx_dac.c ****     /* DAC_FLAG is reset */
 599:./Lib/Src/stm32f4xx_dac.c ****     bitstatus = RESET;
 960              		.loc 1 599 15
 961 0026 0023     		movs	r3, #0
 962 0028 FB73     		strb	r3, [r7, #15]
 963              	.L59:
 600:./Lib/Src/stm32f4xx_dac.c ****   }
 601:./Lib/Src/stm32f4xx_dac.c ****   /* Return the DAC_FLAG status */
 602:./Lib/Src/stm32f4xx_dac.c ****   return  bitstatus;
 964              		.loc 1 602 11
 965 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 603:./Lib/Src/stm32f4xx_dac.c **** }
 966              		.loc 1 603 1
 967 002c 1846     		mov	r0, r3
 968 002e 1437     		adds	r7, r7, #20
 969              		.cfi_def_cfa_offset 4
 970 0030 BD46     		mov	sp, r7
 971              		.cfi_def_cfa_register 13
 972              		@ sp needed
 973 0032 5DF8047B 		ldr	r7, [sp], #4
 974              		.cfi_restore 7
 975              		.cfi_def_cfa_offset 0
 976 0036 7047     		bx	lr
 977              	.L62:
 978              		.align	2
 979              	.L61:
 980 0038 00740040 		.word	1073771520
 981              		.cfi_endproc
 982              	.LFE136:
 984              		.section	.text.DAC_ClearFlag,"ax",%progbits
 985              		.align	1
 986              		.global	DAC_ClearFlag
 987              		.syntax unified
 988              		.thumb
 989              		.thumb_func
 991              	DAC_ClearFlag:
 992              	.LFB137:
ARM GAS  /tmp/ccqwdtxy.s 			page 29


 604:./Lib/Src/stm32f4xx_dac.c **** 
 605:./Lib/Src/stm32f4xx_dac.c **** /**
 606:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Clears the DAC channel's pending flags.
 607:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 608:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 609:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 610:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 611:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_FLAG: specifies the flag to clear. 
 612:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be of the following value:
 613:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_FLAG_DMAUDR: DMA underrun flag 
 614:./Lib/Src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 615:./Lib/Src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).            
 616:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 617:./Lib/Src/stm32f4xx_dac.c ****   */
 618:./Lib/Src/stm32f4xx_dac.c **** void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
 619:./Lib/Src/stm32f4xx_dac.c **** {
 993              		.loc 1 619 1
 994              		.cfi_startproc
 995              		@ args = 0, pretend = 0, frame = 8
 996              		@ frame_needed = 1, uses_anonymous_args = 0
 997              		@ link register save eliminated.
 998 0000 80B4     		push	{r7}
 999              		.cfi_def_cfa_offset 4
 1000              		.cfi_offset 7, -4
 1001 0002 83B0     		sub	sp, sp, #12
 1002              		.cfi_def_cfa_offset 16
 1003 0004 00AF     		add	r7, sp, #0
 1004              		.cfi_def_cfa_register 7
 1005 0006 7860     		str	r0, [r7, #4]
 1006 0008 3960     		str	r1, [r7]
 620:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 621:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 622:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_FLAG(DAC_FLAG));
 623:./Lib/Src/stm32f4xx_dac.c **** 
 624:./Lib/Src/stm32f4xx_dac.c ****   /* Clear the selected DAC flags */
 625:./Lib/Src/stm32f4xx_dac.c ****   DAC->SR = (DAC_FLAG << DAC_Channel);
 1007              		.loc 1 625 6
 1008 000a 0649     		ldr	r1, .L64
 1009              		.loc 1 625 23
 1010 000c 3A68     		ldr	r2, [r7]
 1011 000e 7B68     		ldr	r3, [r7, #4]
 1012 0010 02FA03F3 		lsl	r3, r2, r3
 1013              		.loc 1 625 11
 1014 0014 4B63     		str	r3, [r1, #52]
 626:./Lib/Src/stm32f4xx_dac.c **** }
 1015              		.loc 1 626 1
 1016 0016 00BF     		nop
 1017 0018 0C37     		adds	r7, r7, #12
 1018              		.cfi_def_cfa_offset 4
 1019 001a BD46     		mov	sp, r7
 1020              		.cfi_def_cfa_register 13
 1021              		@ sp needed
 1022 001c 5DF8047B 		ldr	r7, [sp], #4
 1023              		.cfi_restore 7
 1024              		.cfi_def_cfa_offset 0
 1025 0020 7047     		bx	lr
 1026              	.L65:
ARM GAS  /tmp/ccqwdtxy.s 			page 30


 1027 0022 00BF     		.align	2
 1028              	.L64:
 1029 0024 00740040 		.word	1073771520
 1030              		.cfi_endproc
 1031              	.LFE137:
 1033              		.section	.text.DAC_GetITStatus,"ax",%progbits
 1034              		.align	1
 1035              		.global	DAC_GetITStatus
 1036              		.syntax unified
 1037              		.thumb
 1038              		.thumb_func
 1040              	DAC_GetITStatus:
 1041              	.LFB138:
 627:./Lib/Src/stm32f4xx_dac.c **** 
 628:./Lib/Src/stm32f4xx_dac.c **** /**
 629:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Checks whether the specified DAC interrupt has occurred or not.
 630:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 631:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 632:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 633:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 634:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt source to check. 
 635:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be the following values:
 636:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask
 637:./Lib/Src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 638:./Lib/Src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).
 639:./Lib/Src/stm32f4xx_dac.c ****   * @retval The new state of DAC_IT (SET or RESET).
 640:./Lib/Src/stm32f4xx_dac.c ****   */
 641:./Lib/Src/stm32f4xx_dac.c **** ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
 642:./Lib/Src/stm32f4xx_dac.c **** {
 1042              		.loc 1 642 1
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 16
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046              		@ link register save eliminated.
 1047 0000 80B4     		push	{r7}
 1048              		.cfi_def_cfa_offset 4
 1049              		.cfi_offset 7, -4
 1050 0002 85B0     		sub	sp, sp, #20
 1051              		.cfi_def_cfa_offset 24
 1052 0004 00AF     		add	r7, sp, #0
 1053              		.cfi_def_cfa_register 7
 1054 0006 7860     		str	r0, [r7, #4]
 1055 0008 3960     		str	r1, [r7]
 643:./Lib/Src/stm32f4xx_dac.c ****   ITStatus bitstatus = RESET;
 1056              		.loc 1 643 12
 1057 000a 0023     		movs	r3, #0
 1058 000c FB73     		strb	r3, [r7, #15]
 644:./Lib/Src/stm32f4xx_dac.c ****   uint32_t enablestatus = 0;
 1059              		.loc 1 644 12
 1060 000e 0023     		movs	r3, #0
 1061 0010 BB60     		str	r3, [r7, #8]
 645:./Lib/Src/stm32f4xx_dac.c ****   
 646:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 647:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 648:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_IT(DAC_IT));
 649:./Lib/Src/stm32f4xx_dac.c **** 
 650:./Lib/Src/stm32f4xx_dac.c ****   /* Get the DAC_IT enable bit status */
ARM GAS  /tmp/ccqwdtxy.s 			page 31


 651:./Lib/Src/stm32f4xx_dac.c ****   enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 1062              		.loc 1 651 22
 1063 0012 104B     		ldr	r3, .L70
 1064 0014 1A68     		ldr	r2, [r3]
 1065              		.loc 1 651 37
 1066 0016 3968     		ldr	r1, [r7]
 1067 0018 7B68     		ldr	r3, [r7, #4]
 1068 001a 01FA03F3 		lsl	r3, r1, r3
 1069              		.loc 1 651 16
 1070 001e 1340     		ands	r3, r3, r2
 1071 0020 BB60     		str	r3, [r7, #8]
 652:./Lib/Src/stm32f4xx_dac.c ****   
 653:./Lib/Src/stm32f4xx_dac.c ****   /* Check the status of the specified DAC interrupt */
 654:./Lib/Src/stm32f4xx_dac.c ****   if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 1072              		.loc 1 654 12
 1073 0022 0C4B     		ldr	r3, .L70
 1074 0024 5A6B     		ldr	r2, [r3, #52]
 1075              		.loc 1 654 27
 1076 0026 3968     		ldr	r1, [r7]
 1077 0028 7B68     		ldr	r3, [r7, #4]
 1078 002a 01FA03F3 		lsl	r3, r1, r3
 1079              		.loc 1 654 17
 1080 002e 1340     		ands	r3, r3, r2
 1081              		.loc 1 654 6
 1082 0030 002B     		cmp	r3, #0
 1083 0032 05D0     		beq	.L67
 1084              		.loc 1 654 64 discriminator 1
 1085 0034 BB68     		ldr	r3, [r7, #8]
 1086 0036 002B     		cmp	r3, #0
 1087 0038 02D0     		beq	.L67
 655:./Lib/Src/stm32f4xx_dac.c ****   {
 656:./Lib/Src/stm32f4xx_dac.c ****     /* DAC_IT is set */
 657:./Lib/Src/stm32f4xx_dac.c ****     bitstatus = SET;
 1088              		.loc 1 657 15
 1089 003a 0123     		movs	r3, #1
 1090 003c FB73     		strb	r3, [r7, #15]
 1091 003e 01E0     		b	.L68
 1092              	.L67:
 658:./Lib/Src/stm32f4xx_dac.c ****   }
 659:./Lib/Src/stm32f4xx_dac.c ****   else
 660:./Lib/Src/stm32f4xx_dac.c ****   {
 661:./Lib/Src/stm32f4xx_dac.c ****     /* DAC_IT is reset */
 662:./Lib/Src/stm32f4xx_dac.c ****     bitstatus = RESET;
 1093              		.loc 1 662 15
 1094 0040 0023     		movs	r3, #0
 1095 0042 FB73     		strb	r3, [r7, #15]
 1096              	.L68:
 663:./Lib/Src/stm32f4xx_dac.c ****   }
 664:./Lib/Src/stm32f4xx_dac.c ****   /* Return the DAC_IT status */
 665:./Lib/Src/stm32f4xx_dac.c ****   return  bitstatus;
 1097              		.loc 1 665 11
 1098 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 666:./Lib/Src/stm32f4xx_dac.c **** }
 1099              		.loc 1 666 1
 1100 0046 1846     		mov	r0, r3
 1101 0048 1437     		adds	r7, r7, #20
 1102              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqwdtxy.s 			page 32


 1103 004a BD46     		mov	sp, r7
 1104              		.cfi_def_cfa_register 13
 1105              		@ sp needed
 1106 004c 5DF8047B 		ldr	r7, [sp], #4
 1107              		.cfi_restore 7
 1108              		.cfi_def_cfa_offset 0
 1109 0050 7047     		bx	lr
 1110              	.L71:
 1111 0052 00BF     		.align	2
 1112              	.L70:
 1113 0054 00740040 		.word	1073771520
 1114              		.cfi_endproc
 1115              	.LFE138:
 1117              		.section	.text.DAC_ClearITPendingBit,"ax",%progbits
 1118              		.align	1
 1119              		.global	DAC_ClearITPendingBit
 1120              		.syntax unified
 1121              		.thumb
 1122              		.thumb_func
 1124              	DAC_ClearITPendingBit:
 1125              	.LFB139:
 667:./Lib/Src/stm32f4xx_dac.c **** 
 668:./Lib/Src/stm32f4xx_dac.c **** /**
 669:./Lib/Src/stm32f4xx_dac.c ****   * @brief  Clears the DAC channel's interrupt pending bits.
 670:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_Channel: The selected DAC channel. 
 671:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be one of the following values:
 672:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_1: DAC Channel1 selected
 673:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_Channel_2: DAC Channel2 selected
 674:./Lib/Src/stm32f4xx_dac.c ****   * @param  DAC_IT: specifies the DAC interrupt pending bit to clear.
 675:./Lib/Src/stm32f4xx_dac.c ****   *          This parameter can be the following values:
 676:./Lib/Src/stm32f4xx_dac.c ****   *            @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                         
 677:./Lib/Src/stm32f4xx_dac.c ****   * @note   The DMA underrun occurs when a second external trigger arrives before the 
 678:./Lib/Src/stm32f4xx_dac.c ****   *         acknowledgement for the first external trigger is received (first request).            
 679:./Lib/Src/stm32f4xx_dac.c ****   * @retval None
 680:./Lib/Src/stm32f4xx_dac.c ****   */
 681:./Lib/Src/stm32f4xx_dac.c **** void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
 682:./Lib/Src/stm32f4xx_dac.c **** {
 1126              		.loc 1 682 1
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 8
 1129              		@ frame_needed = 1, uses_anonymous_args = 0
 1130              		@ link register save eliminated.
 1131 0000 80B4     		push	{r7}
 1132              		.cfi_def_cfa_offset 4
 1133              		.cfi_offset 7, -4
 1134 0002 83B0     		sub	sp, sp, #12
 1135              		.cfi_def_cfa_offset 16
 1136 0004 00AF     		add	r7, sp, #0
 1137              		.cfi_def_cfa_register 7
 1138 0006 7860     		str	r0, [r7, #4]
 1139 0008 3960     		str	r1, [r7]
 683:./Lib/Src/stm32f4xx_dac.c ****   /* Check the parameters */
 684:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_CHANNEL(DAC_Channel));
 685:./Lib/Src/stm32f4xx_dac.c ****   assert_param(IS_DAC_IT(DAC_IT)); 
 686:./Lib/Src/stm32f4xx_dac.c **** 
 687:./Lib/Src/stm32f4xx_dac.c ****   /* Clear the selected DAC interrupt pending bits */
 688:./Lib/Src/stm32f4xx_dac.c ****   DAC->SR = (DAC_IT << DAC_Channel);
ARM GAS  /tmp/ccqwdtxy.s 			page 33


 1140              		.loc 1 688 6
 1141 000a 0649     		ldr	r1, .L73
 1142              		.loc 1 688 21
 1143 000c 3A68     		ldr	r2, [r7]
 1144 000e 7B68     		ldr	r3, [r7, #4]
 1145 0010 02FA03F3 		lsl	r3, r2, r3
 1146              		.loc 1 688 11
 1147 0014 4B63     		str	r3, [r1, #52]
 689:./Lib/Src/stm32f4xx_dac.c **** }
 1148              		.loc 1 689 1
 1149 0016 00BF     		nop
 1150 0018 0C37     		adds	r7, r7, #12
 1151              		.cfi_def_cfa_offset 4
 1152 001a BD46     		mov	sp, r7
 1153              		.cfi_def_cfa_register 13
 1154              		@ sp needed
 1155 001c 5DF8047B 		ldr	r7, [sp], #4
 1156              		.cfi_restore 7
 1157              		.cfi_def_cfa_offset 0
 1158 0020 7047     		bx	lr
 1159              	.L74:
 1160 0022 00BF     		.align	2
 1161              	.L73:
 1162 0024 00740040 		.word	1073771520
 1163              		.cfi_endproc
 1164              	.LFE139:
 1166              		.text
 1167              	.Letext0:
 1168              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 1169              		.file 3 "./Start/stm32f4xx.h"
 1170              		.file 4 "./Lib/inc/stm32f4xx_dac.h"
 1171              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccqwdtxy.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dac.c
     /tmp/ccqwdtxy.s:21     .text.DAC_DeInit:0000000000000000 $t
     /tmp/ccqwdtxy.s:27     .text.DAC_DeInit:0000000000000000 DAC_DeInit
     /tmp/ccqwdtxy.s:54     .text.DAC_Init:0000000000000000 $t
     /tmp/ccqwdtxy.s:60     .text.DAC_Init:0000000000000000 DAC_Init
     /tmp/ccqwdtxy.s:143    .text.DAC_Init:0000000000000064 $d
     /tmp/ccqwdtxy.s:148    .text.DAC_StructInit:0000000000000000 $t
     /tmp/ccqwdtxy.s:154    .text.DAC_StructInit:0000000000000000 DAC_StructInit
     /tmp/ccqwdtxy.s:200    .text.DAC_Cmd:0000000000000000 $t
     /tmp/ccqwdtxy.s:206    .text.DAC_Cmd:0000000000000000 DAC_Cmd
     /tmp/ccqwdtxy.s:271    .text.DAC_Cmd:0000000000000048 $d
     /tmp/ccqwdtxy.s:276    .text.DAC_SoftwareTriggerCmd:0000000000000000 $t
     /tmp/ccqwdtxy.s:282    .text.DAC_SoftwareTriggerCmd:0000000000000000 DAC_SoftwareTriggerCmd
     /tmp/ccqwdtxy.s:351    .text.DAC_SoftwareTriggerCmd:000000000000004c $d
     /tmp/ccqwdtxy.s:356    .text.DAC_DualSoftwareTriggerCmd:0000000000000000 $t
     /tmp/ccqwdtxy.s:362    .text.DAC_DualSoftwareTriggerCmd:0000000000000000 DAC_DualSoftwareTriggerCmd
     /tmp/ccqwdtxy.s:414    .text.DAC_DualSoftwareTriggerCmd:0000000000000038 $d
     /tmp/ccqwdtxy.s:419    .text.DAC_WaveGenerationCmd:0000000000000000 $t
     /tmp/ccqwdtxy.s:425    .text.DAC_WaveGenerationCmd:0000000000000000 DAC_WaveGenerationCmd
     /tmp/ccqwdtxy.s:491    .text.DAC_WaveGenerationCmd:0000000000000048 $d
     /tmp/ccqwdtxy.s:496    .text.DAC_SetChannel1Data:0000000000000000 $t
     /tmp/ccqwdtxy.s:502    .text.DAC_SetChannel1Data:0000000000000000 DAC_SetChannel1Data
     /tmp/ccqwdtxy.s:551    .text.DAC_SetChannel1Data:0000000000000034 $d
     /tmp/ccqwdtxy.s:556    .text.DAC_SetChannel2Data:0000000000000000 $t
     /tmp/ccqwdtxy.s:562    .text.DAC_SetChannel2Data:0000000000000000 DAC_SetChannel2Data
     /tmp/ccqwdtxy.s:611    .text.DAC_SetChannel2Data:0000000000000034 $d
     /tmp/ccqwdtxy.s:616    .text.DAC_SetDualChannelData:0000000000000000 $t
     /tmp/ccqwdtxy.s:622    .text.DAC_SetDualChannelData:0000000000000000 DAC_SetDualChannelData
     /tmp/ccqwdtxy.s:700    .text.DAC_SetDualChannelData:0000000000000054 $d
     /tmp/ccqwdtxy.s:705    .text.DAC_GetDataOutputValue:0000000000000000 $t
     /tmp/ccqwdtxy.s:711    .text.DAC_GetDataOutputValue:0000000000000000 DAC_GetDataOutputValue
     /tmp/ccqwdtxy.s:760    .text.DAC_GetDataOutputValue:0000000000000030 $d
     /tmp/ccqwdtxy.s:765    .text.DAC_DMACmd:0000000000000000 $t
     /tmp/ccqwdtxy.s:771    .text.DAC_DMACmd:0000000000000000 DAC_DMACmd
     /tmp/ccqwdtxy.s:836    .text.DAC_DMACmd:000000000000004c $d
     /tmp/ccqwdtxy.s:841    .text.DAC_ITConfig:0000000000000000 $t
     /tmp/ccqwdtxy.s:847    .text.DAC_ITConfig:0000000000000000 DAC_ITConfig
     /tmp/ccqwdtxy.s:913    .text.DAC_ITConfig:0000000000000048 $d
     /tmp/ccqwdtxy.s:918    .text.DAC_GetFlagStatus:0000000000000000 $t
     /tmp/ccqwdtxy.s:924    .text.DAC_GetFlagStatus:0000000000000000 DAC_GetFlagStatus
     /tmp/ccqwdtxy.s:980    .text.DAC_GetFlagStatus:0000000000000038 $d
     /tmp/ccqwdtxy.s:985    .text.DAC_ClearFlag:0000000000000000 $t
     /tmp/ccqwdtxy.s:991    .text.DAC_ClearFlag:0000000000000000 DAC_ClearFlag
     /tmp/ccqwdtxy.s:1029   .text.DAC_ClearFlag:0000000000000024 $d
     /tmp/ccqwdtxy.s:1034   .text.DAC_GetITStatus:0000000000000000 $t
     /tmp/ccqwdtxy.s:1040   .text.DAC_GetITStatus:0000000000000000 DAC_GetITStatus
     /tmp/ccqwdtxy.s:1113   .text.DAC_GetITStatus:0000000000000054 $d
     /tmp/ccqwdtxy.s:1118   .text.DAC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccqwdtxy.s:1124   .text.DAC_ClearITPendingBit:0000000000000000 DAC_ClearITPendingBit
     /tmp/ccqwdtxy.s:1162   .text.DAC_ClearITPendingBit:0000000000000024 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
