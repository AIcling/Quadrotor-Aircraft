ARM GAS  /tmp/ccsBPln7.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_cryp_tdes.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_cryp_tdes.c"
  20              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  21              		.align	1
  22              		.global	CRYP_TDES_ECB
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	CRYP_TDES_ECB:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_cryp_tdes.c **** /**
   2:./Lib/Src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *
  12:./Lib/Src/stm32f4xx_cryp_tdes.c **** @verbatim
  13:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  14:./Lib/Src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  15:./Lib/Src/stm32f4xx_cryp_tdes.c ****                            ##### How to use this driver #####
  16:./Lib/Src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  17:./Lib/Src/stm32f4xx_cryp_tdes.c ****  [..]
  18:./Lib/Src/stm32f4xx_cryp_tdes.c ****    (#) Enable The CRYP controller clock using 
  19:./Lib/Src/stm32f4xx_cryp_tdes.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  20:./Lib/Src/stm32f4xx_cryp_tdes.c ****   
  21:./Lib/Src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB() function.
  22:./Lib/Src/stm32f4xx_cryp_tdes.c ****   
  23:./Lib/Src/stm32f4xx_cryp_tdes.c ****    (#) Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC() function.
  24:./Lib/Src/stm32f4xx_cryp_tdes.c ****   
  25:./Lib/Src/stm32f4xx_cryp_tdes.c **** @endverbatim
  26:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *
  27:./Lib/Src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  28:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @attention
  29:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *
  30:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * Copyright (c) 2016 STMicroelectronics.
ARM GAS  /tmp/ccsBPln7.s 			page 2


  31:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * All rights reserved.
  32:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *
  33:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * This software is licensed under terms that can be found in the LICENSE file
  34:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * in the root directory of this software component.
  35:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  36:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *
  37:./Lib/Src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  38:./Lib/Src/stm32f4xx_cryp_tdes.c ****   */
  39:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  40:./Lib/Src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  41:./Lib/Src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  42:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  43:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  44:./Lib/Src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  45:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @{
  46:./Lib/Src/stm32f4xx_cryp_tdes.c ****   */
  47:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  48:./Lib/Src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  49:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  50:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @{
  51:./Lib/Src/stm32f4xx_cryp_tdes.c ****   */
  52:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  53:./Lib/Src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  54:./Lib/Src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  55:./Lib/Src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  56:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  57:./Lib/Src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  58:./Lib/Src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  59:./Lib/Src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  60:./Lib/Src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  61:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  62:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  63:./Lib/Src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  64:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @{
  65:./Lib/Src/stm32f4xx_cryp_tdes.c ****   */ 
  66:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  67:./Lib/Src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  68:./Lib/Src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  69:./Lib/Src/stm32f4xx_cryp_tdes.c ****  *
  70:./Lib/Src/stm32f4xx_cryp_tdes.c **** @verbatim   
  71:./Lib/Src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  72:./Lib/Src/stm32f4xx_cryp_tdes.c ****                       ##### High Level TDES functions #####
  73:./Lib/Src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  74:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  75:./Lib/Src/stm32f4xx_cryp_tdes.c **** @endverbatim
  76:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @{
  77:./Lib/Src/stm32f4xx_cryp_tdes.c ****   */
  78:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
  79:./Lib/Src/stm32f4xx_cryp_tdes.c **** /**
  80:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  81:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  82:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  83:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  84:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  85:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  86:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  87:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
ARM GAS  /tmp/ccsBPln7.s 			page 3


  88:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  89:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  90:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  91:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  92:./Lib/Src/stm32f4xx_cryp_tdes.c ****   */
  93:./Lib/Src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
  94:./Lib/Src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
  95:./Lib/Src/stm32f4xx_cryp_tdes.c **** {
  29              		.loc 1 95 1
  30              		.cfi_startproc
  31              		@ args = 4, pretend = 0, frame = 120
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 90B5     		push	{r4, r7, lr}
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 9FB0     		sub	sp, sp, #124
  39              		.cfi_def_cfa_offset 136
  40 0004 00AF     		add	r7, sp, #0
  41              		.cfi_def_cfa_register 7
  42 0006 B960     		str	r1, [r7, #8]
  43 0008 7A60     		str	r2, [r7, #4]
  44 000a 3B60     		str	r3, [r7]
  45 000c 0346     		mov	r3, r0
  46 000e FB73     		strb	r3, [r7, #15]
  96:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
  97:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  98:./Lib/Src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  47              		.loc 1 98 17
  48 0010 0023     		movs	r3, #0
  49 0012 7B61     		str	r3, [r7, #20]
  99:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
  50              		.loc 1 99 12
  51 0014 0023     		movs	r3, #0
  52 0016 7B66     		str	r3, [r7, #100]
 100:./Lib/Src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
  53              		.loc 1 100 15
  54 0018 0123     		movs	r3, #1
  55 001a 87F87730 		strb	r3, [r7, #119]
 101:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
  56              		.loc 1 101 12
  57 001e BB68     		ldr	r3, [r7, #8]
  58 0020 3B66     		str	r3, [r7, #96]
 102:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  59              		.loc 1 102 12
  60 0022 7B68     		ldr	r3, [r7, #4]
  61 0024 3B67     		str	r3, [r7, #112]
 103:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  62              		.loc 1 103 12
  63 0026 D7F88830 		ldr	r3, [r7, #136]
  64 002a FB66     		str	r3, [r7, #108]
 104:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
  65              		.loc 1 104 12
  66 002c 0023     		movs	r3, #0
  67 002e BB66     		str	r3, [r7, #104]
 105:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
ARM GAS  /tmp/ccsBPln7.s 			page 4


 106:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 107:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  68              		.loc 1 107 3
  69 0030 07F11803 		add	r3, r7, #24
  70 0034 1846     		mov	r0, r3
  71 0036 FFF7FEFF 		bl	CRYP_KeyStructInit
 108:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 109:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 110:./Lib/Src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  72              		.loc 1 110 5
  73 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
  74 003c 012B     		cmp	r3, #1
  75 003e 02D1     		bne	.L2
 111:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
 112:./Lib/Src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  76              		.loc 1 112 43
  77 0040 0023     		movs	r3, #0
  78 0042 BB63     		str	r3, [r7, #56]
  79 0044 01E0     		b	.L3
  80              	.L2:
 113:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 114:./Lib/Src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 115:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
 116:./Lib/Src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  81              		.loc 1 116 43
  82 0046 0423     		movs	r3, #4
  83 0048 BB63     		str	r3, [r7, #56]
  84              	.L3:
 117:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 118:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 119:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  85              		.loc 1 119 41
  86 004a 0023     		movs	r3, #0
  87 004c FB63     		str	r3, [r7, #60]
 120:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  88              		.loc 1 120 41
  89 004e 8023     		movs	r3, #128
  90 0050 3B64     		str	r3, [r7, #64]
 121:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  91              		.loc 1 121 3
  92 0052 07F13803 		add	r3, r7, #56
  93 0056 1846     		mov	r0, r3
  94 0058 FFF7FEFF 		bl	CRYP_Init
 122:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 123:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 124:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  95              		.loc 1 124 53
  96 005c 3B6E     		ldr	r3, [r7, #96]
  97              		.loc 1 124 46
  98 005e 1B68     		ldr	r3, [r3]
  99 0060 BB64     		str	r3, [r7, #72]
 100              	.LBB30:
 101              	.LBB31:
 102              		.file 2 "./Start/core_cmInstr.h"
   1:./Start/core_cmInstr.h **** /**************************************************************************//**
   2:./Start/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./Start/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
ARM GAS  /tmp/ccsBPln7.s 			page 5


   4:./Start/core_cmInstr.h ****  * @version  V4.10
   5:./Start/core_cmInstr.h ****  * @date     18. March 2015
   6:./Start/core_cmInstr.h ****  *
   7:./Start/core_cmInstr.h ****  * @note
   8:./Start/core_cmInstr.h ****  *
   9:./Start/core_cmInstr.h ****  ******************************************************************************/
  10:./Start/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./Start/core_cmInstr.h **** 
  12:./Start/core_cmInstr.h ****    All rights reserved.
  13:./Start/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./Start/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./Start/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./Start/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./Start/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./Start/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./Start/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./Start/core_cmInstr.h ****      specific prior written permission.
  23:./Start/core_cmInstr.h ****    *
  24:./Start/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./Start/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./Start/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./Start/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./Start/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./Start/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./Start/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./Start/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./Start/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./Start/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./Start/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./Start/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./Start/core_cmInstr.h **** 
  37:./Start/core_cmInstr.h **** 
  38:./Start/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./Start/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./Start/core_cmInstr.h **** 
  41:./Start/core_cmInstr.h **** 
  42:./Start/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./Start/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./Start/core_cmInstr.h ****   Access to dedicated instructions
  45:./Start/core_cmInstr.h ****   @{
  46:./Start/core_cmInstr.h **** */
  47:./Start/core_cmInstr.h **** 
  48:./Start/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./Start/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./Start/core_cmInstr.h **** 
  51:./Start/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./Start/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./Start/core_cmInstr.h **** #endif
  54:./Start/core_cmInstr.h **** 
  55:./Start/core_cmInstr.h **** 
  56:./Start/core_cmInstr.h **** /** \brief  No Operation
  57:./Start/core_cmInstr.h **** 
  58:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./Start/core_cmInstr.h ****  */
  60:./Start/core_cmInstr.h **** #define __NOP                             __nop
ARM GAS  /tmp/ccsBPln7.s 			page 6


  61:./Start/core_cmInstr.h **** 
  62:./Start/core_cmInstr.h **** 
  63:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./Start/core_cmInstr.h **** 
  65:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./Start/core_cmInstr.h ****     until one of a number of events occurs.
  67:./Start/core_cmInstr.h ****  */
  68:./Start/core_cmInstr.h **** #define __WFI                             __wfi
  69:./Start/core_cmInstr.h **** 
  70:./Start/core_cmInstr.h **** 
  71:./Start/core_cmInstr.h **** /** \brief  Wait For Event
  72:./Start/core_cmInstr.h **** 
  73:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./Start/core_cmInstr.h ****  */
  76:./Start/core_cmInstr.h **** #define __WFE                             __wfe
  77:./Start/core_cmInstr.h **** 
  78:./Start/core_cmInstr.h **** 
  79:./Start/core_cmInstr.h **** /** \brief  Send Event
  80:./Start/core_cmInstr.h **** 
  81:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./Start/core_cmInstr.h ****  */
  83:./Start/core_cmInstr.h **** #define __SEV                             __sev
  84:./Start/core_cmInstr.h **** 
  85:./Start/core_cmInstr.h **** 
  86:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./Start/core_cmInstr.h **** 
  88:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./Start/core_cmInstr.h ****  */
  92:./Start/core_cmInstr.h **** #define __ISB() do {\
  93:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  94:./Start/core_cmInstr.h ****                    __isb(0xF);\
  95:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  96:./Start/core_cmInstr.h ****                 } while (0)
  97:./Start/core_cmInstr.h **** 
  98:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:./Start/core_cmInstr.h **** 
 100:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./Start/core_cmInstr.h ****  */
 103:./Start/core_cmInstr.h **** #define __DSB() do {\
 104:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 105:./Start/core_cmInstr.h ****                    __dsb(0xF);\
 106:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 107:./Start/core_cmInstr.h ****                 } while (0)
 108:./Start/core_cmInstr.h **** 
 109:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./Start/core_cmInstr.h **** 
 111:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./Start/core_cmInstr.h ****  */
 114:./Start/core_cmInstr.h **** #define __DMB() do {\
 115:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 116:./Start/core_cmInstr.h ****                    __dmb(0xF);\
 117:./Start/core_cmInstr.h ****                    __schedule_barrier();\
ARM GAS  /tmp/ccsBPln7.s 			page 7


 118:./Start/core_cmInstr.h ****                 } while (0)
 119:./Start/core_cmInstr.h **** 
 120:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./Start/core_cmInstr.h **** 
 122:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./Start/core_cmInstr.h **** 
 124:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./Start/core_cmInstr.h ****     \return               Reversed value
 126:./Start/core_cmInstr.h ****  */
 127:./Start/core_cmInstr.h **** #define __REV                             __rev
 128:./Start/core_cmInstr.h **** 
 129:./Start/core_cmInstr.h **** 
 130:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./Start/core_cmInstr.h **** 
 132:./Start/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./Start/core_cmInstr.h **** 
 134:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./Start/core_cmInstr.h ****     \return               Reversed value
 136:./Start/core_cmInstr.h ****  */
 137:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./Start/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./Start/core_cmInstr.h **** {
 140:./Start/core_cmInstr.h ****   rev16 r0, r0
 141:./Start/core_cmInstr.h ****   bx lr
 142:./Start/core_cmInstr.h **** }
 143:./Start/core_cmInstr.h **** #endif
 144:./Start/core_cmInstr.h **** 
 145:./Start/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./Start/core_cmInstr.h **** 
 147:./Start/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./Start/core_cmInstr.h **** 
 149:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./Start/core_cmInstr.h ****     \return               Reversed value
 151:./Start/core_cmInstr.h ****  */
 152:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:./Start/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./Start/core_cmInstr.h **** {
 155:./Start/core_cmInstr.h ****   revsh r0, r0
 156:./Start/core_cmInstr.h ****   bx lr
 157:./Start/core_cmInstr.h **** }
 158:./Start/core_cmInstr.h **** #endif
 159:./Start/core_cmInstr.h **** 
 160:./Start/core_cmInstr.h **** 
 161:./Start/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./Start/core_cmInstr.h **** 
 163:./Start/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./Start/core_cmInstr.h **** 
 165:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./Start/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./Start/core_cmInstr.h ****     \return               Rotated value
 168:./Start/core_cmInstr.h ****  */
 169:./Start/core_cmInstr.h **** #define __ROR                             __ror
 170:./Start/core_cmInstr.h **** 
 171:./Start/core_cmInstr.h **** 
 172:./Start/core_cmInstr.h **** /** \brief  Breakpoint
 173:./Start/core_cmInstr.h **** 
 174:./Start/core_cmInstr.h ****     This function causes the processor to enter Debug state.
ARM GAS  /tmp/ccsBPln7.s 			page 8


 175:./Start/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:./Start/core_cmInstr.h **** 
 177:./Start/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./Start/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./Start/core_cmInstr.h ****  */
 180:./Start/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./Start/core_cmInstr.h **** 
 182:./Start/core_cmInstr.h **** 
 183:./Start/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./Start/core_cmInstr.h **** 
 185:./Start/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./Start/core_cmInstr.h **** 
 187:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./Start/core_cmInstr.h ****     \return               Reversed value
 189:./Start/core_cmInstr.h ****  */
 190:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./Start/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./Start/core_cmInstr.h **** #else
 193:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./Start/core_cmInstr.h **** {
 195:./Start/core_cmInstr.h ****   uint32_t result;
 196:./Start/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./Start/core_cmInstr.h **** 
 198:./Start/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./Start/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./Start/core_cmInstr.h ****   {
 201:./Start/core_cmInstr.h ****     result <<= 1;
 202:./Start/core_cmInstr.h ****     result |= value & 1;
 203:./Start/core_cmInstr.h ****     s--;
 204:./Start/core_cmInstr.h ****   }
 205:./Start/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./Start/core_cmInstr.h ****   return(result);
 207:./Start/core_cmInstr.h **** }
 208:./Start/core_cmInstr.h **** #endif
 209:./Start/core_cmInstr.h **** 
 210:./Start/core_cmInstr.h **** 
 211:./Start/core_cmInstr.h **** /** \brief  Count leading zeros
 212:./Start/core_cmInstr.h **** 
 213:./Start/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./Start/core_cmInstr.h **** 
 215:./Start/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./Start/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./Start/core_cmInstr.h ****  */
 218:./Start/core_cmInstr.h **** #define __CLZ                             __clz
 219:./Start/core_cmInstr.h **** 
 220:./Start/core_cmInstr.h **** 
 221:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./Start/core_cmInstr.h **** 
 223:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./Start/core_cmInstr.h **** 
 225:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./Start/core_cmInstr.h **** 
 227:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:./Start/core_cmInstr.h ****  */
 230:./Start/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccsBPln7.s 			page 9


 232:./Start/core_cmInstr.h **** 
 233:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./Start/core_cmInstr.h **** 
 235:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./Start/core_cmInstr.h **** 
 237:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./Start/core_cmInstr.h ****  */
 240:./Start/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./Start/core_cmInstr.h **** 
 242:./Start/core_cmInstr.h **** 
 243:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./Start/core_cmInstr.h **** 
 245:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./Start/core_cmInstr.h **** 
 247:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./Start/core_cmInstr.h ****  */
 250:./Start/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./Start/core_cmInstr.h **** 
 252:./Start/core_cmInstr.h **** 
 253:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./Start/core_cmInstr.h **** 
 255:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./Start/core_cmInstr.h **** 
 257:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 260:./Start/core_cmInstr.h ****     \return          1  Function failed
 261:./Start/core_cmInstr.h ****  */
 262:./Start/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./Start/core_cmInstr.h **** 
 264:./Start/core_cmInstr.h **** 
 265:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:./Start/core_cmInstr.h **** 
 267:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./Start/core_cmInstr.h **** 
 269:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 270:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 272:./Start/core_cmInstr.h ****     \return          1  Function failed
 273:./Start/core_cmInstr.h ****  */
 274:./Start/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./Start/core_cmInstr.h **** 
 276:./Start/core_cmInstr.h **** 
 277:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./Start/core_cmInstr.h **** 
 279:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./Start/core_cmInstr.h **** 
 281:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 284:./Start/core_cmInstr.h ****     \return          1  Function failed
 285:./Start/core_cmInstr.h ****  */
 286:./Start/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:./Start/core_cmInstr.h **** 
 288:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccsBPln7.s 			page 10


 289:./Start/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:./Start/core_cmInstr.h **** 
 291:./Start/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./Start/core_cmInstr.h **** 
 293:./Start/core_cmInstr.h ****  */
 294:./Start/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./Start/core_cmInstr.h **** 
 296:./Start/core_cmInstr.h **** 
 297:./Start/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./Start/core_cmInstr.h **** 
 299:./Start/core_cmInstr.h ****     This function saturates a signed value.
 300:./Start/core_cmInstr.h **** 
 301:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./Start/core_cmInstr.h ****     \return             Saturated value
 304:./Start/core_cmInstr.h ****  */
 305:./Start/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./Start/core_cmInstr.h **** 
 307:./Start/core_cmInstr.h **** 
 308:./Start/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./Start/core_cmInstr.h **** 
 310:./Start/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./Start/core_cmInstr.h **** 
 312:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./Start/core_cmInstr.h ****     \return             Saturated value
 315:./Start/core_cmInstr.h ****  */
 316:./Start/core_cmInstr.h **** #define __USAT                            __usat
 317:./Start/core_cmInstr.h **** 
 318:./Start/core_cmInstr.h **** 
 319:./Start/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./Start/core_cmInstr.h **** 
 321:./Start/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./Start/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:./Start/core_cmInstr.h **** 
 324:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./Start/core_cmInstr.h ****     \return               Rotated value
 326:./Start/core_cmInstr.h ****  */
 327:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./Start/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./Start/core_cmInstr.h **** {
 330:./Start/core_cmInstr.h ****   rrx r0, r0
 331:./Start/core_cmInstr.h ****   bx lr
 332:./Start/core_cmInstr.h **** }
 333:./Start/core_cmInstr.h **** #endif
 334:./Start/core_cmInstr.h **** 
 335:./Start/core_cmInstr.h **** 
 336:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./Start/core_cmInstr.h **** 
 338:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./Start/core_cmInstr.h **** 
 340:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./Start/core_cmInstr.h ****  */
 343:./Start/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:./Start/core_cmInstr.h **** 
 345:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccsBPln7.s 			page 11


 346:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:./Start/core_cmInstr.h **** 
 348:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./Start/core_cmInstr.h **** 
 350:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./Start/core_cmInstr.h ****  */
 353:./Start/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./Start/core_cmInstr.h **** 
 355:./Start/core_cmInstr.h **** 
 356:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./Start/core_cmInstr.h **** 
 358:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./Start/core_cmInstr.h **** 
 360:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./Start/core_cmInstr.h ****  */
 363:./Start/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./Start/core_cmInstr.h **** 
 365:./Start/core_cmInstr.h **** 
 366:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./Start/core_cmInstr.h **** 
 368:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./Start/core_cmInstr.h **** 
 370:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./Start/core_cmInstr.h ****  */
 373:./Start/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./Start/core_cmInstr.h **** 
 375:./Start/core_cmInstr.h **** 
 376:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./Start/core_cmInstr.h **** 
 378:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./Start/core_cmInstr.h **** 
 380:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 381:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./Start/core_cmInstr.h ****  */
 383:./Start/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:./Start/core_cmInstr.h **** 
 385:./Start/core_cmInstr.h **** 
 386:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./Start/core_cmInstr.h **** 
 388:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./Start/core_cmInstr.h **** 
 390:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./Start/core_cmInstr.h ****  */
 393:./Start/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./Start/core_cmInstr.h **** 
 395:./Start/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./Start/core_cmInstr.h **** 
 397:./Start/core_cmInstr.h **** 
 398:./Start/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./Start/core_cmInstr.h **** /* GNU gcc specific functions */
 400:./Start/core_cmInstr.h **** 
 401:./Start/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./Start/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
ARM GAS  /tmp/ccsBPln7.s 			page 12


 403:./Start/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:./Start/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./Start/core_cmInstr.h **** #else
 408:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./Start/core_cmInstr.h **** #endif
 411:./Start/core_cmInstr.h **** 
 412:./Start/core_cmInstr.h **** /** \brief  No Operation
 413:./Start/core_cmInstr.h **** 
 414:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./Start/core_cmInstr.h ****  */
 416:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./Start/core_cmInstr.h **** {
 418:./Start/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./Start/core_cmInstr.h **** }
 420:./Start/core_cmInstr.h **** 
 421:./Start/core_cmInstr.h **** 
 422:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./Start/core_cmInstr.h **** 
 424:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./Start/core_cmInstr.h ****     until one of a number of events occurs.
 426:./Start/core_cmInstr.h ****  */
 427:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./Start/core_cmInstr.h **** {
 429:./Start/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./Start/core_cmInstr.h **** }
 431:./Start/core_cmInstr.h **** 
 432:./Start/core_cmInstr.h **** 
 433:./Start/core_cmInstr.h **** /** \brief  Wait For Event
 434:./Start/core_cmInstr.h **** 
 435:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:./Start/core_cmInstr.h ****  */
 438:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./Start/core_cmInstr.h **** {
 440:./Start/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:./Start/core_cmInstr.h **** }
 442:./Start/core_cmInstr.h **** 
 443:./Start/core_cmInstr.h **** 
 444:./Start/core_cmInstr.h **** /** \brief  Send Event
 445:./Start/core_cmInstr.h **** 
 446:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./Start/core_cmInstr.h ****  */
 448:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./Start/core_cmInstr.h **** {
 450:./Start/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./Start/core_cmInstr.h **** }
 452:./Start/core_cmInstr.h **** 
 453:./Start/core_cmInstr.h **** 
 454:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./Start/core_cmInstr.h **** 
 456:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./Start/core_cmInstr.h ****  */
ARM GAS  /tmp/ccsBPln7.s 			page 13


 460:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:./Start/core_cmInstr.h **** {
 462:./Start/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./Start/core_cmInstr.h **** }
 464:./Start/core_cmInstr.h **** 
 465:./Start/core_cmInstr.h **** 
 466:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./Start/core_cmInstr.h **** 
 468:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./Start/core_cmInstr.h ****  */
 471:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./Start/core_cmInstr.h **** {
 473:./Start/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./Start/core_cmInstr.h **** }
 475:./Start/core_cmInstr.h **** 
 476:./Start/core_cmInstr.h **** 
 477:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./Start/core_cmInstr.h **** 
 479:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./Start/core_cmInstr.h ****  */
 482:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./Start/core_cmInstr.h **** {
 484:./Start/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./Start/core_cmInstr.h **** }
 486:./Start/core_cmInstr.h **** 
 487:./Start/core_cmInstr.h **** 
 488:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./Start/core_cmInstr.h **** 
 490:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./Start/core_cmInstr.h **** 
 492:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./Start/core_cmInstr.h ****     \return               Reversed value
 494:./Start/core_cmInstr.h ****  */
 495:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./Start/core_cmInstr.h **** {
 497:./Start/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:./Start/core_cmInstr.h ****   return __builtin_bswap32(value);
 103              		.loc 2 498 10
 104 0062 BB6C     		ldr	r3, [r7, #72]
 105 0064 1BBA     		rev	r3, r3
 106              	.LBE31:
 107              	.LBE30:
 108              		.loc 1 124 44
 109 0066 3B62     		str	r3, [r7, #32]
 125:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 110              		.loc 1 125 10
 111 0068 3B6E     		ldr	r3, [r7, #96]
 112 006a 0433     		adds	r3, r3, #4
 113 006c 3B66     		str	r3, [r7, #96]
 126:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 114              		.loc 1 126 53
 115 006e 3B6E     		ldr	r3, [r7, #96]
 116              		.loc 1 126 46
 117 0070 1B68     		ldr	r3, [r3]
 118 0072 FB64     		str	r3, [r7, #76]
ARM GAS  /tmp/ccsBPln7.s 			page 14


 119              	.LBB32:
 120              	.LBB33:
 121              		.loc 2 498 10
 122 0074 FB6C     		ldr	r3, [r7, #76]
 123 0076 1BBA     		rev	r3, r3
 124              	.LBE33:
 125              	.LBE32:
 126              		.loc 1 126 44
 127 0078 7B62     		str	r3, [r7, #36]
 127:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 128              		.loc 1 127 10
 129 007a 3B6E     		ldr	r3, [r7, #96]
 130 007c 0433     		adds	r3, r3, #4
 131 007e 3B66     		str	r3, [r7, #96]
 128:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 132              		.loc 1 128 53
 133 0080 3B6E     		ldr	r3, [r7, #96]
 134              		.loc 1 128 46
 135 0082 1B68     		ldr	r3, [r3]
 136 0084 3B65     		str	r3, [r7, #80]
 137              	.LBB34:
 138              	.LBB35:
 139              		.loc 2 498 10
 140 0086 3B6D     		ldr	r3, [r7, #80]
 141 0088 1BBA     		rev	r3, r3
 142              	.LBE35:
 143              	.LBE34:
 144              		.loc 1 128 44
 145 008a BB62     		str	r3, [r7, #40]
 129:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 146              		.loc 1 129 10
 147 008c 3B6E     		ldr	r3, [r7, #96]
 148 008e 0433     		adds	r3, r3, #4
 149 0090 3B66     		str	r3, [r7, #96]
 130:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 150              		.loc 1 130 53
 151 0092 3B6E     		ldr	r3, [r7, #96]
 152              		.loc 1 130 46
 153 0094 1B68     		ldr	r3, [r3]
 154 0096 7B65     		str	r3, [r7, #84]
 155              	.LBB36:
 156              	.LBB37:
 157              		.loc 2 498 10
 158 0098 7B6D     		ldr	r3, [r7, #84]
 159 009a 1BBA     		rev	r3, r3
 160              	.LBE37:
 161              	.LBE36:
 162              		.loc 1 130 44
 163 009c FB62     		str	r3, [r7, #44]
 131:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 164              		.loc 1 131 10
 165 009e 3B6E     		ldr	r3, [r7, #96]
 166 00a0 0433     		adds	r3, r3, #4
 167 00a2 3B66     		str	r3, [r7, #96]
 132:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 168              		.loc 1 132 53
 169 00a4 3B6E     		ldr	r3, [r7, #96]
ARM GAS  /tmp/ccsBPln7.s 			page 15


 170              		.loc 1 132 46
 171 00a6 1B68     		ldr	r3, [r3]
 172 00a8 BB65     		str	r3, [r7, #88]
 173              	.LBB38:
 174              	.LBB39:
 175              		.loc 2 498 10
 176 00aa BB6D     		ldr	r3, [r7, #88]
 177 00ac 1BBA     		rev	r3, r3
 178              	.LBE39:
 179              	.LBE38:
 180              		.loc 1 132 44
 181 00ae 3B63     		str	r3, [r7, #48]
 133:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 182              		.loc 1 133 10
 183 00b0 3B6E     		ldr	r3, [r7, #96]
 184 00b2 0433     		adds	r3, r3, #4
 185 00b4 3B66     		str	r3, [r7, #96]
 134:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 186              		.loc 1 134 53
 187 00b6 3B6E     		ldr	r3, [r7, #96]
 188              		.loc 1 134 46
 189 00b8 1B68     		ldr	r3, [r3]
 190 00ba FB65     		str	r3, [r7, #92]
 191              	.LBB40:
 192              	.LBB41:
 193              		.loc 2 498 10
 194 00bc FB6D     		ldr	r3, [r7, #92]
 195 00be 1BBA     		rev	r3, r3
 196              	.LBE41:
 197              	.LBE40:
 198              		.loc 1 134 44
 199 00c0 7B63     		str	r3, [r7, #52]
 135:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 200              		.loc 1 135 3
 201 00c2 07F11803 		add	r3, r7, #24
 202 00c6 1846     		mov	r0, r3
 203 00c8 FFF7FEFF 		bl	CRYP_KeyInit
 136:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 137:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 138:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 204              		.loc 1 138 3
 205 00cc FFF7FEFF 		bl	CRYP_FIFOFlush
 139:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 140:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 141:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 206              		.loc 1 141 3
 207 00d0 0120     		movs	r0, #1
 208 00d2 FFF7FEFF 		bl	CRYP_Cmd
 142:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 143:./Lib/Src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 209              		.loc 1 143 6
 210 00d6 FFF7FEFF 		bl	CRYP_GetCmdStatus
 211 00da 0346     		mov	r3, r0
 212              		.loc 1 143 5
 213 00dc 002B     		cmp	r3, #0
 214 00de 03D1     		bne	.L10
 144:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
ARM GAS  /tmp/ccsBPln7.s 			page 16


 145:./Lib/Src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 146:./Lib/Src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 147:./Lib/Src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 215              		.loc 1 147 12
 216 00e0 0023     		movs	r3, #0
 217 00e2 87F87730 		strb	r3, [r7, #119]
 218 00e6 48E0     		b	.L11
 219              	.L10:
 148:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 149:./Lib/Src/stm32f4xx_cryp_tdes.c ****   else
 150:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
 151:./Lib/Src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 220              		.loc 1 151 10
 221 00e8 0023     		movs	r3, #0
 222 00ea BB66     		str	r3, [r7, #104]
 223              		.loc 1 151 5
 224 00ec 3AE0     		b	.L12
 225              	.L18:
 152:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 153:./Lib/Src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 154:./Lib/Src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 226              		.loc 1 154 20
 227 00ee 3B6F     		ldr	r3, [r7, #112]
 228              		.loc 1 154 7
 229 00f0 1B68     		ldr	r3, [r3]
 230 00f2 1846     		mov	r0, r3
 231 00f4 FFF7FEFF 		bl	CRYP_DataIn
 155:./Lib/Src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 232              		.loc 1 155 16
 233 00f8 3B6F     		ldr	r3, [r7, #112]
 234 00fa 0433     		adds	r3, r3, #4
 235 00fc 3B67     		str	r3, [r7, #112]
 156:./Lib/Src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 236              		.loc 1 156 20
 237 00fe 3B6F     		ldr	r3, [r7, #112]
 238              		.loc 1 156 7
 239 0100 1B68     		ldr	r3, [r3]
 240 0102 1846     		mov	r0, r3
 241 0104 FFF7FEFF 		bl	CRYP_DataIn
 157:./Lib/Src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 242              		.loc 1 157 16
 243 0108 3B6F     		ldr	r3, [r7, #112]
 244 010a 0433     		adds	r3, r3, #4
 245 010c 3B67     		str	r3, [r7, #112]
 158:./Lib/Src/stm32f4xx_cryp_tdes.c ****       
 159:./Lib/Src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 160:./Lib/Src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 246              		.loc 1 160 15
 247 010e 0023     		movs	r3, #0
 248 0110 7B61     		str	r3, [r7, #20]
 249              	.L14:
 161:./Lib/Src/stm32f4xx_cryp_tdes.c ****       do
 162:./Lib/Src/stm32f4xx_cryp_tdes.c ****       {
 163:./Lib/Src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 250              		.loc 1 163 22 discriminator 2
 251 0112 1020     		movs	r0, #16
 252 0114 FFF7FEFF 		bl	CRYP_GetFlagStatus
ARM GAS  /tmp/ccsBPln7.s 			page 17


 253 0118 0346     		mov	r3, r0
 254              		.loc 1 163 20 discriminator 2
 255 011a 7B66     		str	r3, [r7, #100]
 164:./Lib/Src/stm32f4xx_cryp_tdes.c ****         counter++;
 256              		.loc 1 164 16 discriminator 2
 257 011c 7B69     		ldr	r3, [r7, #20]
 258 011e 0133     		adds	r3, r3, #1
 259 0120 7B61     		str	r3, [r7, #20]
 165:./Lib/Src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 260              		.loc 1 165 24 discriminator 2
 261 0122 7B69     		ldr	r3, [r7, #20]
 262              		.loc 1 165 45 discriminator 2
 263 0124 B3F5803F 		cmp	r3, #65536
 264 0128 02D0     		beq	.L13
 265              		.loc 1 165 45 is_stmt 0 discriminator 1
 266 012a 7B6E     		ldr	r3, [r7, #100]
 267 012c 002B     		cmp	r3, #0
 268 012e F0D1     		bne	.L14
 269              	.L13:
 166:./Lib/Src/stm32f4xx_cryp_tdes.c ****       
 167:./Lib/Src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 270              		.loc 1 167 10 is_stmt 1
 271 0130 7B6E     		ldr	r3, [r7, #100]
 272 0132 002B     		cmp	r3, #0
 273 0134 03D0     		beq	.L15
 168:./Lib/Src/stm32f4xx_cryp_tdes.c ****       {
 169:./Lib/Src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 274              		.loc 1 169 16
 275 0136 0023     		movs	r3, #0
 276 0138 87F87730 		strb	r3, [r7, #119]
 277 013c 0FE0     		b	.L16
 278              	.L15:
 170:./Lib/Src/stm32f4xx_cryp_tdes.c ****       }
 171:./Lib/Src/stm32f4xx_cryp_tdes.c ****       else
 172:./Lib/Src/stm32f4xx_cryp_tdes.c ****       {
 173:./Lib/Src/stm32f4xx_cryp_tdes.c ****         
 174:./Lib/Src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 175:./Lib/Src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 279              		.loc 1 175 10
 280 013e FC6E     		ldr	r4, [r7, #108]
 281              		.loc 1 175 36
 282 0140 FFF7FEFF 		bl	CRYP_DataOut
 283 0144 0346     		mov	r3, r0
 284              		.loc 1 175 34
 285 0146 2360     		str	r3, [r4]
 176:./Lib/Src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 286              		.loc 1 176 19
 287 0148 FB6E     		ldr	r3, [r7, #108]
 288 014a 0433     		adds	r3, r3, #4
 289 014c FB66     		str	r3, [r7, #108]
 177:./Lib/Src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 290              		.loc 1 177 10
 291 014e FC6E     		ldr	r4, [r7, #108]
 292              		.loc 1 177 36
 293 0150 FFF7FEFF 		bl	CRYP_DataOut
 294 0154 0346     		mov	r3, r0
 295              		.loc 1 177 34
ARM GAS  /tmp/ccsBPln7.s 			page 18


 296 0156 2360     		str	r3, [r4]
 178:./Lib/Src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 297              		.loc 1 178 19
 298 0158 FB6E     		ldr	r3, [r7, #108]
 299 015a 0433     		adds	r3, r3, #4
 300 015c FB66     		str	r3, [r7, #108]
 301              	.L16:
 151:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 302              		.loc 1 151 51 discriminator 2
 303 015e BB6E     		ldr	r3, [r7, #104]
 304 0160 0833     		adds	r3, r3, #8
 305 0162 BB66     		str	r3, [r7, #104]
 306              	.L12:
 151:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 307              		.loc 1 151 27 discriminator 1
 308 0164 BA6E     		ldr	r2, [r7, #104]
 309 0166 3B68     		ldr	r3, [r7]
 310 0168 9A42     		cmp	r2, r3
 311 016a 03D2     		bcs	.L17
 151:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 312              		.loc 1 151 27 is_stmt 0 discriminator 3
 313 016c 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 314 0170 002B     		cmp	r3, #0
 315 0172 BCD1     		bne	.L18
 316              	.L17:
 179:./Lib/Src/stm32f4xx_cryp_tdes.c ****       }
 180:./Lib/Src/stm32f4xx_cryp_tdes.c ****     }
 181:./Lib/Src/stm32f4xx_cryp_tdes.c ****     
 182:./Lib/Src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 183:./Lib/Src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 317              		.loc 1 183 5 is_stmt 1
 318 0174 0020     		movs	r0, #0
 319 0176 FFF7FEFF 		bl	CRYP_Cmd
 320              	.L11:
 184:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 185:./Lib/Src/stm32f4xx_cryp_tdes.c ****   return status; 
 321              		.loc 1 185 10
 322 017a 97F87730 		ldrb	r3, [r7, #119]	@ zero_extendqisi2
 186:./Lib/Src/stm32f4xx_cryp_tdes.c **** }
 323              		.loc 1 186 1
 324 017e 1846     		mov	r0, r3
 325 0180 7C37     		adds	r7, r7, #124
 326              		.cfi_def_cfa_offset 12
 327 0182 BD46     		mov	sp, r7
 328              		.cfi_def_cfa_register 13
 329              		@ sp needed
 330 0184 90BD     		pop	{r4, r7, pc}
 331              		.cfi_endproc
 332              	.LFE123:
 334              		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 335              		.align	1
 336              		.global	CRYP_TDES_CBC
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	CRYP_TDES_CBC:
 342              	.LFB124:
ARM GAS  /tmp/ccsBPln7.s 			page 19


 187:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 188:./Lib/Src/stm32f4xx_cryp_tdes.c **** /**
 189:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 190:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 191:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 192:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 193:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 194:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 195:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 196:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 197:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 198:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 199:./Lib/Src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 200:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 201:./Lib/Src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 202:./Lib/Src/stm32f4xx_cryp_tdes.c ****   */
 203:./Lib/Src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 204:./Lib/Src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 205:./Lib/Src/stm32f4xx_cryp_tdes.c **** {
 343              		.loc 1 205 1
 344              		.cfi_startproc
 345              		@ args = 8, pretend = 0, frame = 144
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347 0000 90B5     		push	{r4, r7, lr}
 348              		.cfi_def_cfa_offset 12
 349              		.cfi_offset 4, -12
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 A5B0     		sub	sp, sp, #148
 353              		.cfi_def_cfa_offset 160
 354 0004 00AF     		add	r7, sp, #0
 355              		.cfi_def_cfa_register 7
 356 0006 B960     		str	r1, [r7, #8]
 357 0008 7A60     		str	r2, [r7, #4]
 358 000a 3B60     		str	r3, [r7]
 359 000c 0346     		mov	r3, r0
 360 000e FB73     		strb	r3, [r7, #15]
 206:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 207:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 208:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 209:./Lib/Src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 361              		.loc 1 209 17
 362 0010 0023     		movs	r3, #0
 363 0012 3B61     		str	r3, [r7, #16]
 210:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 364              		.loc 1 210 12
 365 0014 0023     		movs	r3, #0
 366 0016 FB67     		str	r3, [r7, #124]
 211:./Lib/Src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 367              		.loc 1 211 15
 368 0018 0123     		movs	r3, #1
 369 001a 87F88F30 		strb	r3, [r7, #143]
 212:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 370              		.loc 1 212 12
 371 001e BB68     		ldr	r3, [r7, #8]
 372 0020 BB67     		str	r3, [r7, #120]
 213:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
ARM GAS  /tmp/ccsBPln7.s 			page 20


 373              		.loc 1 213 12
 374 0022 3B68     		ldr	r3, [r7]
 375 0024 C7F88830 		str	r3, [r7, #136]
 214:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 376              		.loc 1 214 12
 377 0028 D7F8A430 		ldr	r3, [r7, #164]
 378 002c C7F88430 		str	r3, [r7, #132]
 215:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 379              		.loc 1 215 12
 380 0030 7B68     		ldr	r3, [r7, #4]
 381 0032 7B67     		str	r3, [r7, #116]
 216:./Lib/Src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 382              		.loc 1 216 12
 383 0034 0023     		movs	r3, #0
 384 0036 C7F88030 		str	r3, [r7, #128]
 217:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 218:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 219:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 385              		.loc 1 219 3
 386 003a 07F12403 		add	r3, r7, #36
 387 003e 1846     		mov	r0, r3
 388 0040 FFF7FEFF 		bl	CRYP_KeyStructInit
 220:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 221:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 222:./Lib/Src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 389              		.loc 1 222 5
 390 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 391 0046 012B     		cmp	r3, #1
 392 0048 02D1     		bne	.L21
 223:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
 224:./Lib/Src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 393              		.loc 1 224 42
 394 004a 0023     		movs	r3, #0
 395 004c 7B64     		str	r3, [r7, #68]
 396 004e 01E0     		b	.L22
 397              	.L21:
 225:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 226:./Lib/Src/stm32f4xx_cryp_tdes.c ****   else
 227:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
 228:./Lib/Src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 398              		.loc 1 228 42
 399 0050 0423     		movs	r3, #4
 400 0052 7B64     		str	r3, [r7, #68]
 401              	.L22:
 229:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 230:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 402              		.loc 1 230 41
 403 0054 0823     		movs	r3, #8
 404 0056 BB64     		str	r3, [r7, #72]
 231:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 405              		.loc 1 231 41
 406 0058 8023     		movs	r3, #128
 407 005a FB64     		str	r3, [r7, #76]
 232:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 233:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 408              		.loc 1 233 3
 409 005c 07F14403 		add	r3, r7, #68
ARM GAS  /tmp/ccsBPln7.s 			page 21


 410 0060 1846     		mov	r0, r3
 411 0062 FFF7FEFF 		bl	CRYP_Init
 234:./Lib/Src/stm32f4xx_cryp_tdes.c **** 
 235:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 236:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 412              		.loc 1 236 53
 413 0066 BB6F     		ldr	r3, [r7, #120]
 414              		.loc 1 236 46
 415 0068 1B68     		ldr	r3, [r3]
 416 006a 7B65     		str	r3, [r7, #84]
 417              	.LBB42:
 418              	.LBB43:
 419              		.loc 2 498 10
 420 006c 7B6D     		ldr	r3, [r7, #84]
 421 006e 1BBA     		rev	r3, r3
 422              	.LBE43:
 423              	.LBE42:
 424              		.loc 1 236 44
 425 0070 FB62     		str	r3, [r7, #44]
 237:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 426              		.loc 1 237 10
 427 0072 BB6F     		ldr	r3, [r7, #120]
 428 0074 0433     		adds	r3, r3, #4
 429 0076 BB67     		str	r3, [r7, #120]
 238:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 430              		.loc 1 238 53
 431 0078 BB6F     		ldr	r3, [r7, #120]
 432              		.loc 1 238 46
 433 007a 1B68     		ldr	r3, [r3]
 434 007c BB65     		str	r3, [r7, #88]
 435              	.LBB44:
 436              	.LBB45:
 437              		.loc 2 498 10
 438 007e BB6D     		ldr	r3, [r7, #88]
 439 0080 1BBA     		rev	r3, r3
 440              	.LBE45:
 441              	.LBE44:
 442              		.loc 1 238 44
 443 0082 3B63     		str	r3, [r7, #48]
 239:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 444              		.loc 1 239 10
 445 0084 BB6F     		ldr	r3, [r7, #120]
 446 0086 0433     		adds	r3, r3, #4
 447 0088 BB67     		str	r3, [r7, #120]
 240:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 448              		.loc 1 240 53
 449 008a BB6F     		ldr	r3, [r7, #120]
 450              		.loc 1 240 46
 451 008c 1B68     		ldr	r3, [r3]
 452 008e FB65     		str	r3, [r7, #92]
 453              	.LBB46:
 454              	.LBB47:
 455              		.loc 2 498 10
 456 0090 FB6D     		ldr	r3, [r7, #92]
 457 0092 1BBA     		rev	r3, r3
 458              	.LBE47:
 459              	.LBE46:
ARM GAS  /tmp/ccsBPln7.s 			page 22


 460              		.loc 1 240 44
 461 0094 7B63     		str	r3, [r7, #52]
 241:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 462              		.loc 1 241 10
 463 0096 BB6F     		ldr	r3, [r7, #120]
 464 0098 0433     		adds	r3, r3, #4
 465 009a BB67     		str	r3, [r7, #120]
 242:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 466              		.loc 1 242 53
 467 009c BB6F     		ldr	r3, [r7, #120]
 468              		.loc 1 242 46
 469 009e 1B68     		ldr	r3, [r3]
 470 00a0 3B66     		str	r3, [r7, #96]
 471              	.LBB48:
 472              	.LBB49:
 473              		.loc 2 498 10
 474 00a2 3B6E     		ldr	r3, [r7, #96]
 475 00a4 1BBA     		rev	r3, r3
 476              	.LBE49:
 477              	.LBE48:
 478              		.loc 1 242 44
 479 00a6 BB63     		str	r3, [r7, #56]
 243:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 480              		.loc 1 243 10
 481 00a8 BB6F     		ldr	r3, [r7, #120]
 482 00aa 0433     		adds	r3, r3, #4
 483 00ac BB67     		str	r3, [r7, #120]
 244:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 484              		.loc 1 244 53
 485 00ae BB6F     		ldr	r3, [r7, #120]
 486              		.loc 1 244 46
 487 00b0 1B68     		ldr	r3, [r3]
 488 00b2 7B66     		str	r3, [r7, #100]
 489              	.LBB50:
 490              	.LBB51:
 491              		.loc 2 498 10
 492 00b4 7B6E     		ldr	r3, [r7, #100]
 493 00b6 1BBA     		rev	r3, r3
 494              	.LBE51:
 495              	.LBE50:
 496              		.loc 1 244 44
 497 00b8 FB63     		str	r3, [r7, #60]
 245:./Lib/Src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 498              		.loc 1 245 10
 499 00ba BB6F     		ldr	r3, [r7, #120]
 500 00bc 0433     		adds	r3, r3, #4
 501 00be BB67     		str	r3, [r7, #120]
 246:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 502              		.loc 1 246 53
 503 00c0 BB6F     		ldr	r3, [r7, #120]
 504              		.loc 1 246 46
 505 00c2 1B68     		ldr	r3, [r3]
 506 00c4 BB66     		str	r3, [r7, #104]
 507              	.LBB52:
 508              	.LBB53:
 509              		.loc 2 498 10
 510 00c6 BB6E     		ldr	r3, [r7, #104]
ARM GAS  /tmp/ccsBPln7.s 			page 23


 511 00c8 1BBA     		rev	r3, r3
 512              	.LBE53:
 513              	.LBE52:
 514              		.loc 1 246 44
 515 00ca 3B64     		str	r3, [r7, #64]
 247:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 516              		.loc 1 247 3
 517 00cc 07F12403 		add	r3, r7, #36
 518 00d0 1846     		mov	r0, r3
 519 00d2 FFF7FEFF 		bl	CRYP_KeyInit
 248:./Lib/Src/stm32f4xx_cryp_tdes.c ****   
 249:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 250:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 520              		.loc 1 250 51
 521 00d6 7B6F     		ldr	r3, [r7, #116]
 522              		.loc 1 250 44
 523 00d8 1B68     		ldr	r3, [r3]
 524 00da FB66     		str	r3, [r7, #108]
 525              	.LBB54:
 526              	.LBB55:
 527              		.loc 2 498 10
 528 00dc FB6E     		ldr	r3, [r7, #108]
 529 00de 1BBA     		rev	r3, r3
 530              	.LBE55:
 531              	.LBE54:
 532              		.loc 1 250 42
 533 00e0 7B61     		str	r3, [r7, #20]
 251:./Lib/Src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 534              		.loc 1 251 9
 535 00e2 7B6F     		ldr	r3, [r7, #116]
 536 00e4 0433     		adds	r3, r3, #4
 537 00e6 7B67     		str	r3, [r7, #116]
 252:./Lib/Src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 538              		.loc 1 252 51
 539 00e8 7B6F     		ldr	r3, [r7, #116]
 540              		.loc 1 252 44
 541 00ea 1B68     		ldr	r3, [r3]
 542 00ec 3B67     		str	r3, [r7, #112]
 543              	.LBB56:
 544              	.LBB57:
 545              		.loc 2 498 10
 546 00ee 3B6F     		ldr	r3, [r7, #112]
 547 00f0 1BBA     		rev	r3, r3
 548              	.LBE57:
 549              	.LBE56:
 550              		.loc 1 252 42
 551 00f2 BB61     		str	r3, [r7, #24]
 253:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 552              		.loc 1 253 3
 553 00f4 07F11403 		add	r3, r7, #20
 554 00f8 1846     		mov	r0, r3
 555 00fa FFF7FEFF 		bl	CRYP_IVInit
 254:./Lib/Src/stm32f4xx_cryp_tdes.c ****   
 255:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 256:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 556              		.loc 1 256 3
 557 00fe FFF7FEFF 		bl	CRYP_FIFOFlush
ARM GAS  /tmp/ccsBPln7.s 			page 24


 257:./Lib/Src/stm32f4xx_cryp_tdes.c ****   
 258:./Lib/Src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 259:./Lib/Src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 558              		.loc 1 259 3
 559 0102 0120     		movs	r0, #1
 560 0104 FFF7FEFF 		bl	CRYP_Cmd
 260:./Lib/Src/stm32f4xx_cryp_tdes.c ****   
 261:./Lib/Src/stm32f4xx_cryp_tdes.c ****   if(CRYP_GetCmdStatus() == DISABLE)
 561              		.loc 1 261 6
 562 0108 FFF7FEFF 		bl	CRYP_GetCmdStatus
 563 010c 0346     		mov	r3, r0
 564              		.loc 1 261 5
 565 010e 002B     		cmp	r3, #0
 566 0110 03D1     		bne	.L31
 262:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
 263:./Lib/Src/stm32f4xx_cryp_tdes.c ****     /* The CRYP peripheral clock is not enabled or the device doesn't embed 
 264:./Lib/Src/stm32f4xx_cryp_tdes.c ****     the CRYP peripheral (please check the device sales type. */
 265:./Lib/Src/stm32f4xx_cryp_tdes.c ****     status = ERROR;
 567              		.loc 1 265 12
 568 0112 0023     		movs	r3, #0
 569 0114 87F88F30 		strb	r3, [r7, #143]
 570 0118 59E0     		b	.L32
 571              	.L31:
 266:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 267:./Lib/Src/stm32f4xx_cryp_tdes.c ****   else
 268:./Lib/Src/stm32f4xx_cryp_tdes.c ****   {
 269:./Lib/Src/stm32f4xx_cryp_tdes.c ****     for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 572              		.loc 1 269 10
 573 011a 0023     		movs	r3, #0
 574 011c C7F88030 		str	r3, [r7, #128]
 575              		.loc 1 269 5
 576 0120 48E0     		b	.L33
 577              	.L39:
 270:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 271:./Lib/Src/stm32f4xx_cryp_tdes.c ****       /* Write the Input block in the Input FIFO */
 272:./Lib/Src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 578              		.loc 1 272 20
 579 0122 D7F88830 		ldr	r3, [r7, #136]
 580              		.loc 1 272 7
 581 0126 1B68     		ldr	r3, [r3]
 582 0128 1846     		mov	r0, r3
 583 012a FFF7FEFF 		bl	CRYP_DataIn
 273:./Lib/Src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 584              		.loc 1 273 16
 585 012e D7F88830 		ldr	r3, [r7, #136]
 586 0132 0433     		adds	r3, r3, #4
 587 0134 C7F88830 		str	r3, [r7, #136]
 274:./Lib/Src/stm32f4xx_cryp_tdes.c ****       CRYP_DataIn(*(uint32_t*)(inputaddr));
 588              		.loc 1 274 20
 589 0138 D7F88830 		ldr	r3, [r7, #136]
 590              		.loc 1 274 7
 591 013c 1B68     		ldr	r3, [r3]
 592 013e 1846     		mov	r0, r3
 593 0140 FFF7FEFF 		bl	CRYP_DataIn
 275:./Lib/Src/stm32f4xx_cryp_tdes.c ****       inputaddr+=4;
 594              		.loc 1 275 16
 595 0144 D7F88830 		ldr	r3, [r7, #136]
ARM GAS  /tmp/ccsBPln7.s 			page 25


 596 0148 0433     		adds	r3, r3, #4
 597 014a C7F88830 		str	r3, [r7, #136]
 276:./Lib/Src/stm32f4xx_cryp_tdes.c ****       
 277:./Lib/Src/stm32f4xx_cryp_tdes.c ****       /* Wait until the complete message has been processed */
 278:./Lib/Src/stm32f4xx_cryp_tdes.c ****       counter = 0;
 598              		.loc 1 278 15
 599 014e 0023     		movs	r3, #0
 600 0150 3B61     		str	r3, [r7, #16]
 601              	.L35:
 279:./Lib/Src/stm32f4xx_cryp_tdes.c ****       do
 280:./Lib/Src/stm32f4xx_cryp_tdes.c ****       {
 281:./Lib/Src/stm32f4xx_cryp_tdes.c ****         busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 602              		.loc 1 281 22 discriminator 2
 603 0152 1020     		movs	r0, #16
 604 0154 FFF7FEFF 		bl	CRYP_GetFlagStatus
 605 0158 0346     		mov	r3, r0
 606              		.loc 1 281 20 discriminator 2
 607 015a FB67     		str	r3, [r7, #124]
 282:./Lib/Src/stm32f4xx_cryp_tdes.c ****         counter++;
 608              		.loc 1 282 16 discriminator 2
 609 015c 3B69     		ldr	r3, [r7, #16]
 610 015e 0133     		adds	r3, r3, #1
 611 0160 3B61     		str	r3, [r7, #16]
 283:./Lib/Src/stm32f4xx_cryp_tdes.c ****       }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 612              		.loc 1 283 24 discriminator 2
 613 0162 3B69     		ldr	r3, [r7, #16]
 614              		.loc 1 283 45 discriminator 2
 615 0164 B3F5803F 		cmp	r3, #65536
 616 0168 02D0     		beq	.L34
 617              		.loc 1 283 45 is_stmt 0 discriminator 1
 618 016a FB6F     		ldr	r3, [r7, #124]
 619 016c 002B     		cmp	r3, #0
 620 016e F0D1     		bne	.L35
 621              	.L34:
 284:./Lib/Src/stm32f4xx_cryp_tdes.c ****       
 285:./Lib/Src/stm32f4xx_cryp_tdes.c ****       if (busystatus != RESET)
 622              		.loc 1 285 10 is_stmt 1
 623 0170 FB6F     		ldr	r3, [r7, #124]
 624 0172 002B     		cmp	r3, #0
 625 0174 03D0     		beq	.L36
 286:./Lib/Src/stm32f4xx_cryp_tdes.c ****       {
 287:./Lib/Src/stm32f4xx_cryp_tdes.c ****         status = ERROR;
 626              		.loc 1 287 16
 627 0176 0023     		movs	r3, #0
 628 0178 87F88F30 		strb	r3, [r7, #143]
 629 017c 15E0     		b	.L37
 630              	.L36:
 288:./Lib/Src/stm32f4xx_cryp_tdes.c ****       }
 289:./Lib/Src/stm32f4xx_cryp_tdes.c ****       else
 290:./Lib/Src/stm32f4xx_cryp_tdes.c ****       {
 291:./Lib/Src/stm32f4xx_cryp_tdes.c ****         
 292:./Lib/Src/stm32f4xx_cryp_tdes.c ****         /* Read the Output block from the Output FIFO */
 293:./Lib/Src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 631              		.loc 1 293 10
 632 017e D7F88440 		ldr	r4, [r7, #132]
 633              		.loc 1 293 36
 634 0182 FFF7FEFF 		bl	CRYP_DataOut
ARM GAS  /tmp/ccsBPln7.s 			page 26


 635 0186 0346     		mov	r3, r0
 636              		.loc 1 293 34
 637 0188 2360     		str	r3, [r4]
 294:./Lib/Src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 638              		.loc 1 294 19
 639 018a D7F88430 		ldr	r3, [r7, #132]
 640 018e 0433     		adds	r3, r3, #4
 641 0190 C7F88430 		str	r3, [r7, #132]
 295:./Lib/Src/stm32f4xx_cryp_tdes.c ****         *(uint32_t*)(outputaddr) = CRYP_DataOut();
 642              		.loc 1 295 10
 643 0194 D7F88440 		ldr	r4, [r7, #132]
 644              		.loc 1 295 36
 645 0198 FFF7FEFF 		bl	CRYP_DataOut
 646 019c 0346     		mov	r3, r0
 647              		.loc 1 295 34
 648 019e 2360     		str	r3, [r4]
 296:./Lib/Src/stm32f4xx_cryp_tdes.c ****         outputaddr+=4;
 649              		.loc 1 296 19
 650 01a0 D7F88430 		ldr	r3, [r7, #132]
 651 01a4 0433     		adds	r3, r3, #4
 652 01a6 C7F88430 		str	r3, [r7, #132]
 653              	.L37:
 269:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 654              		.loc 1 269 51 discriminator 2
 655 01aa D7F88030 		ldr	r3, [r7, #128]
 656 01ae 0833     		adds	r3, r3, #8
 657 01b0 C7F88030 		str	r3, [r7, #128]
 658              	.L33:
 269:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 659              		.loc 1 269 27 discriminator 1
 660 01b4 D7F88020 		ldr	r2, [r7, #128]
 661 01b8 D7F8A030 		ldr	r3, [r7, #160]
 662 01bc 9A42     		cmp	r2, r3
 663 01be 03D2     		bcs	.L38
 269:./Lib/Src/stm32f4xx_cryp_tdes.c ****     {
 664              		.loc 1 269 27 is_stmt 0 discriminator 3
 665 01c0 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 666 01c4 002B     		cmp	r3, #0
 667 01c6 ACD1     		bne	.L39
 668              	.L38:
 297:./Lib/Src/stm32f4xx_cryp_tdes.c ****       }
 298:./Lib/Src/stm32f4xx_cryp_tdes.c ****     }
 299:./Lib/Src/stm32f4xx_cryp_tdes.c ****     
 300:./Lib/Src/stm32f4xx_cryp_tdes.c ****     /* Disable Crypto */
 301:./Lib/Src/stm32f4xx_cryp_tdes.c ****     CRYP_Cmd(DISABLE);
 669              		.loc 1 301 5 is_stmt 1
 670 01c8 0020     		movs	r0, #0
 671 01ca FFF7FEFF 		bl	CRYP_Cmd
 672              	.L32:
 302:./Lib/Src/stm32f4xx_cryp_tdes.c ****   }
 303:./Lib/Src/stm32f4xx_cryp_tdes.c ****   return status; 
 673              		.loc 1 303 10
 674 01ce 97F88F30 		ldrb	r3, [r7, #143]	@ zero_extendqisi2
 304:./Lib/Src/stm32f4xx_cryp_tdes.c **** }
 675              		.loc 1 304 1
 676 01d2 1846     		mov	r0, r3
 677 01d4 9437     		adds	r7, r7, #148
ARM GAS  /tmp/ccsBPln7.s 			page 27


 678              		.cfi_def_cfa_offset 12
 679 01d6 BD46     		mov	sp, r7
 680              		.cfi_def_cfa_register 13
 681              		@ sp needed
 682 01d8 90BD     		pop	{r4, r7, pc}
 683              		.cfi_endproc
 684              	.LFE124:
 686              		.text
 687              	.Letext0:
 688              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 689              		.file 4 "./Start/stm32f4xx.h"
 690              		.file 5 "./Lib/inc/stm32f4xx_cryp.h"
ARM GAS  /tmp/ccsBPln7.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_tdes.c
     /tmp/ccsBPln7.s:21     .text.CRYP_TDES_ECB:0000000000000000 $t
     /tmp/ccsBPln7.s:27     .text.CRYP_TDES_ECB:0000000000000000 CRYP_TDES_ECB
     /tmp/ccsBPln7.s:335    .text.CRYP_TDES_CBC:0000000000000000 $t
     /tmp/ccsBPln7.s:341    .text.CRYP_TDES_CBC:0000000000000000 CRYP_TDES_CBC

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_GetCmdStatus
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
