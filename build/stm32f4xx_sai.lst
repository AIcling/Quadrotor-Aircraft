ARM GAS  /tmp/ccrcbWwJ.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_sai.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_sai.c"
  20              		.section	.text.SAI_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	SAI_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	SAI_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_sai.c **** /**
   2:./Lib/Src/stm32f4xx_sai.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_sai.c ****   * @file    stm32f4xx_sai.c
   4:./Lib/Src/stm32f4xx_sai.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_sai.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_sai.c ****   * @date    27-January-2022  
   7:./Lib/Src/stm32f4xx_sai.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_sai.c ****   *          functionalities of the Serial Audio Interface (SAI):
   9:./Lib/Src/stm32f4xx_sai.c ****   *           + Initialization and Configuration
  10:./Lib/Src/stm32f4xx_sai.c ****   *           + Data transfers functions
  11:./Lib/Src/stm32f4xx_sai.c ****   *           + DMA transfers management
  12:./Lib/Src/stm32f4xx_sai.c ****   *           + Interrupts and flags management 
  13:./Lib/Src/stm32f4xx_sai.c ****   *           
  14:./Lib/Src/stm32f4xx_sai.c ****   @verbatim
  15:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================
  16:./Lib/Src/stm32f4xx_sai.c ****                      ##### How to use this driver #####
  17:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================
  18:./Lib/Src/stm32f4xx_sai.c ****     [..] 
  19:./Lib/Src/stm32f4xx_sai.c ****     
  20:./Lib/Src/stm32f4xx_sai.c ****        (#) Enable peripheral clock using the following functions 
  21:./Lib/Src/stm32f4xx_sai.c ****            RCC_APB2PeriphClockCmd(RCC_APB2Periph_SAI1, ENABLE) for SAI1
  22:./Lib/Src/stm32f4xx_sai.c ****   
  23:./Lib/Src/stm32f4xx_sai.c ****        (#) For each SAI Block A/B enable SCK, SD, FS and MCLK GPIO clocks 
  24:./Lib/Src/stm32f4xx_sai.c ****            using RCC_AHB1PeriphClockCmd() function.
  25:./Lib/Src/stm32f4xx_sai.c ****   
  26:./Lib/Src/stm32f4xx_sai.c ****        (#) Peripherals alternate function: 
  27:./Lib/Src/stm32f4xx_sai.c ****            (++) Connect the pin to the desired peripherals' Alternate 
  28:./Lib/Src/stm32f4xx_sai.c ****                 Function (AF) using GPIO_PinAFConfig() function.
  29:./Lib/Src/stm32f4xx_sai.c ****            (++) Configure the desired pin in alternate function by:
  30:./Lib/Src/stm32f4xx_sai.c ****                 GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
ARM GAS  /tmp/ccrcbWwJ.s 			page 2


  31:./Lib/Src/stm32f4xx_sai.c ****            (++) Select the type, pull-up/pull-down and output speed via 
  32:./Lib/Src/stm32f4xx_sai.c ****                 GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:./Lib/Src/stm32f4xx_sai.c ****            (++) Call GPIO_Init() function
  34:./Lib/Src/stm32f4xx_sai.c ****            -@@- If an external clock source is used then the I2S CKIN pin should be 
  35:./Lib/Src/stm32f4xx_sai.c ****                also configured in Alternate function Push-pull pull-up mode.
  36:./Lib/Src/stm32f4xx_sai.c ****                 
  37:./Lib/Src/stm32f4xx_sai.c ****       (#) The SAI clock can be generated from different clock source :
  38:./Lib/Src/stm32f4xx_sai.c ****           PLL I2S, PLL SAI or external clock source.
  39:./Lib/Src/stm32f4xx_sai.c ****           (++) The PLL I2S is configured using the following functions RCC_PLLI2SConfig(), 
  40:./Lib/Src/stm32f4xx_sai.c ****                RCC_PLLI2SCmd(ENABLE), RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY) and 
  41:./Lib/Src/stm32f4xx_sai.c ****                RCC_SAIPLLI2SClkDivConfig() or;
  42:./Lib/Src/stm32f4xx_sai.c ****               
  43:./Lib/Src/stm32f4xx_sai.c ****           (++) The PLL SAI is configured using the following functions RCC_PLLSAIConfig(), 
  44:./Lib/Src/stm32f4xx_sai.c ****                RCC_PLLSAICmd(ENABLE), RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) and 
  45:./Lib/Src/stm32f4xx_sai.c ****                RCC_SAIPLLSAIClkDivConfig()or;          
  46:./Lib/Src/stm32f4xx_sai.c ****               
  47:./Lib/Src/stm32f4xx_sai.c ****           (++) External clock source is configured using the function 
  48:./Lib/Src/stm32f4xx_sai.c ****                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the 
  49:./Lib/Src/stm32f4xx_sai.c ****                define constant I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file.      
  50:./Lib/Src/stm32f4xx_sai.c ****                 
  51:./Lib/Src/stm32f4xx_sai.c ****       (#) Each SAI Block A or B has its own clock generator to make these two blocks 
  52:./Lib/Src/stm32f4xx_sai.c ****           completely independent. The Clock generator is configured using RCC_SAIBlockACLKConfig() 
  53:./Lib/Src/stm32f4xx_sai.c ****           RCC_SAIBlockBCLKConfig() functions.
  54:./Lib/Src/stm32f4xx_sai.c ****                   
  55:./Lib/Src/stm32f4xx_sai.c ****       (#) Each SAI Block A or B can be configured separately : 
  56:./Lib/Src/stm32f4xx_sai.c ****           (++) Program the Master clock divider, Audio mode, Protocol, Data Length, Clock Strobing 
  57:./Lib/Src/stm32f4xx_sai.c ****                Synchronous mode, Output drive and FIFO Thresold using SAI_Init() function.   
  58:./Lib/Src/stm32f4xx_sai.c ****                In case of master mode, program the Master clock divider (MCKDIV) using 
  59:./Lib/Src/stm32f4xx_sai.c ****                the following formula :  
  60:./Lib/Src/stm32f4xx_sai.c ****                (+++) MCLK_x = SAI_CK_x / (MCKDIV * 2) with MCLK_x = 256 * FS
  61:./Lib/Src/stm32f4xx_sai.c ****                (+++) FS = SAI_CK_x / (MCKDIV * 2) * 256
  62:./Lib/Src/stm32f4xx_sai.c ****                (+++) MCKDIV = SAI_CK_x / FS * 512
  63:./Lib/Src/stm32f4xx_sai.c ****          (++) Program the Frame Length, Frame active Length, FS Definition, FS Polarity, 
  64:./Lib/Src/stm32f4xx_sai.c ****               FS Offset using SAI_FrameInit() function.    
  65:./Lib/Src/stm32f4xx_sai.c ****          (++) Program the Slot First Bit Offset, Slot Size, Slot Number, Slot Active 
  66:./Lib/Src/stm32f4xx_sai.c ****               using SAI_SlotInit() function. 
  67:./Lib/Src/stm32f4xx_sai.c ****                    
  68:./Lib/Src/stm32f4xx_sai.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  69:./Lib/Src/stm32f4xx_sai.c ****           SAI_ITConfig() if you need to use interrupt mode. 
  70:./Lib/Src/stm32f4xx_sai.c ****   
  71:./Lib/Src/stm32f4xx_sai.c ****       (#) When using the DMA mode 
  72:./Lib/Src/stm32f4xx_sai.c ****           (++) Configure the DMA using DMA_Init() function
  73:./Lib/Src/stm32f4xx_sai.c ****           (++) Active the needed channel Request using SAI_DMACmd() function
  74:./Lib/Src/stm32f4xx_sai.c ****    
  75:./Lib/Src/stm32f4xx_sai.c ****       (#) Enable the SAI using the SAI_Cmd() function.
  76:./Lib/Src/stm32f4xx_sai.c ****    
  77:./Lib/Src/stm32f4xx_sai.c ****       (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  78:./Lib/Src/stm32f4xx_sai.c ****   
  79:./Lib/Src/stm32f4xx_sai.c ****       (#) The SAI has some specific functions which can be useful depending 
  80:./Lib/Src/stm32f4xx_sai.c ****           on the audio protocol selected.  
  81:./Lib/Src/stm32f4xx_sai.c ****           (++) Enable Mute mode when the audio block is a transmitter using SAI_MuteModeCmd()
  82:./Lib/Src/stm32f4xx_sai.c ****                function and configure the value transmitted during mute using SAI_MuteValueConfig()
  83:./Lib/Src/stm32f4xx_sai.c ****           (++) Detect the Mute mode when audio block is a receiver using SAI_MuteFrameCounterConfig
  84:./Lib/Src/stm32f4xx_sai.c ****           (++) Enable the MONO mode without any data preprocessing in memory when the number
  85:./Lib/Src/stm32f4xx_sai.c ****                of slot is equal to 2 using SAI_MonoModeConfig() function.
  86:./Lib/Src/stm32f4xx_sai.c ****           (++) Enable data companding algorithm (U law and A law) using SAI_CompandingModeConfig().
  87:./Lib/Src/stm32f4xx_sai.c ****           (++) Choose the behavior of the SD line in output when an inactive slot is sent 
ARM GAS  /tmp/ccrcbWwJ.s 			page 3


  88:./Lib/Src/stm32f4xx_sai.c ****                on the data line using SAI_TRIStateConfig() function.   
  89:./Lib/Src/stm32f4xx_sai.c ****   [..]               
  90:./Lib/Src/stm32f4xx_sai.c ****    (@)    In master TX mode: enabling the audio block immediately generates the bit clock 
  91:./Lib/Src/stm32f4xx_sai.c ****           for the external slaves even if there is no data in the FIFO, However FS signal 
  92:./Lib/Src/stm32f4xx_sai.c ****           generation is conditioned by the presence of data in the FIFO.
  93:./Lib/Src/stm32f4xx_sai.c ****                  
  94:./Lib/Src/stm32f4xx_sai.c ****    (@)    In master RX mode: enabling the audio block immediately generates the bit clock 
  95:./Lib/Src/stm32f4xx_sai.c ****           and FS signal for the external slaves. 
  96:./Lib/Src/stm32f4xx_sai.c ****                 
  97:./Lib/Src/stm32f4xx_sai.c ****    (@)    It is mandatory to respect the following conditions in order to avoid bad SAI behavior: 
  98:./Lib/Src/stm32f4xx_sai.c ****             (+@)  First bit Offset <= (SLOT size - Data size)
  99:./Lib/Src/stm32f4xx_sai.c ****             (+@)  Data size <= SLOT size
 100:./Lib/Src/stm32f4xx_sai.c ****             (+@)  Number of SLOT x SLOT size = Frame length
 101:./Lib/Src/stm32f4xx_sai.c ****             (+@)  The number of slots should be even when bit FSDEF in the SAI_xFRCR is set.    
 102:./Lib/Src/stm32f4xx_sai.c ****   
 103:./Lib/Src/stm32f4xx_sai.c ****     @endverbatim  
 104:./Lib/Src/stm32f4xx_sai.c **** 
 105:./Lib/Src/stm32f4xx_sai.c ****   ******************************************************************************
 106:./Lib/Src/stm32f4xx_sai.c ****   * @attention
 107:./Lib/Src/stm32f4xx_sai.c ****   *
 108:./Lib/Src/stm32f4xx_sai.c ****   * Copyright (c) 2016 STMicroelectronics.
 109:./Lib/Src/stm32f4xx_sai.c ****   * All rights reserved.
 110:./Lib/Src/stm32f4xx_sai.c ****   *
 111:./Lib/Src/stm32f4xx_sai.c ****   * This software is licensed under terms that can be found in the LICENSE file
 112:./Lib/Src/stm32f4xx_sai.c ****   * in the root directory of this software component.
 113:./Lib/Src/stm32f4xx_sai.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 114:./Lib/Src/stm32f4xx_sai.c ****   *
 115:./Lib/Src/stm32f4xx_sai.c ****   ******************************************************************************
 116:./Lib/Src/stm32f4xx_sai.c ****   */
 117:./Lib/Src/stm32f4xx_sai.c **** 
 118:./Lib/Src/stm32f4xx_sai.c **** /* Includes ------------------------------------------------------------------*/
 119:./Lib/Src/stm32f4xx_sai.c **** #include "stm32f4xx_sai.h"
 120:./Lib/Src/stm32f4xx_sai.c **** #include "stm32f4xx_rcc.h"
 121:./Lib/Src/stm32f4xx_sai.c **** 
 122:./Lib/Src/stm32f4xx_sai.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 123:./Lib/Src/stm32f4xx_sai.c ****   * @{
 124:./Lib/Src/stm32f4xx_sai.c ****   */
 125:./Lib/Src/stm32f4xx_sai.c **** 
 126:./Lib/Src/stm32f4xx_sai.c **** /** @defgroup SAI 
 127:./Lib/Src/stm32f4xx_sai.c ****   * @brief SAI driver modules
 128:./Lib/Src/stm32f4xx_sai.c ****   * @{
 129:./Lib/Src/stm32f4xx_sai.c ****   */ 
 130:./Lib/Src/stm32f4xx_sai.c **** #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx) || \
 131:./Lib/Src/stm32f4xx_sai.c ****     defined (STM32F401xx) || defined (STM32F411xE) || defined (STM32F446xx) || defined (STM32F469_4
 132:./Lib/Src/stm32f4xx_sai.c ****     defined (STM32F413_423xx)
 133:./Lib/Src/stm32f4xx_sai.c **** 
 134:./Lib/Src/stm32f4xx_sai.c **** /* Private typedef -----------------------------------------------------------*/
 135:./Lib/Src/stm32f4xx_sai.c **** /* Private define ------------------------------------------------------------*/
 136:./Lib/Src/stm32f4xx_sai.c **** 
 137:./Lib/Src/stm32f4xx_sai.c **** /* *SAI registers Masks */
 138:./Lib/Src/stm32f4xx_sai.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFF07C010)
 139:./Lib/Src/stm32f4xx_sai.c **** #define FRCR_CLEAR_MASK           ((uint32_t)0xFFF88000)
 140:./Lib/Src/stm32f4xx_sai.c **** #define SLOTR_CLEAR_MASK          ((uint32_t)0x0000F020)
 141:./Lib/Src/stm32f4xx_sai.c **** 
 142:./Lib/Src/stm32f4xx_sai.c **** /* Private macro -------------------------------------------------------------*/
 143:./Lib/Src/stm32f4xx_sai.c **** /* Private variables ---------------------------------------------------------*/
 144:./Lib/Src/stm32f4xx_sai.c **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/ccrcbWwJ.s 			page 4


 145:./Lib/Src/stm32f4xx_sai.c **** /* Private functions ---------------------------------------------------------*/
 146:./Lib/Src/stm32f4xx_sai.c **** 
 147:./Lib/Src/stm32f4xx_sai.c **** /** @defgroup SAI_Private_Functions
 148:./Lib/Src/stm32f4xx_sai.c ****   * @{
 149:./Lib/Src/stm32f4xx_sai.c ****   */
 150:./Lib/Src/stm32f4xx_sai.c **** 
 151:./Lib/Src/stm32f4xx_sai.c **** /** @defgroup SAI_Group1 Initialization and Configuration functions
 152:./Lib/Src/stm32f4xx_sai.c ****  *  @brief   Initialization and Configuration functions 
 153:./Lib/Src/stm32f4xx_sai.c ****  *
 154:./Lib/Src/stm32f4xx_sai.c **** @verbatim   
 155:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================
 156:./Lib/Src/stm32f4xx_sai.c ****             ##### Initialization and Configuration functions #####
 157:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================  
 158:./Lib/Src/stm32f4xx_sai.c ****   [..]
 159:./Lib/Src/stm32f4xx_sai.c ****   This section provides a set of functions allowing to initialize the SAI Audio 
 160:./Lib/Src/stm32f4xx_sai.c ****   Block Mode, Audio Protocol, Data size, Synchronization between audio block, 
 161:./Lib/Src/stm32f4xx_sai.c ****   Master clock Divider, Fifo threshold, Frame configuration, slot configuration,
 162:./Lib/Src/stm32f4xx_sai.c ****   Tristate mode, Companding mode and Mute mode.  
 163:./Lib/Src/stm32f4xx_sai.c ****   [..] 
 164:./Lib/Src/stm32f4xx_sai.c ****   The SAI_Init(), SAI_FrameInit() and SAI_SlotInit() functions follows the SAI Block
 165:./Lib/Src/stm32f4xx_sai.c ****   configuration procedures for Master mode and Slave mode (details for these procedures 
 166:./Lib/Src/stm32f4xx_sai.c ****   are available in reference manual(RM0090).
 167:./Lib/Src/stm32f4xx_sai.c ****   
 168:./Lib/Src/stm32f4xx_sai.c **** @endverbatim
 169:./Lib/Src/stm32f4xx_sai.c ****   * @{
 170:./Lib/Src/stm32f4xx_sai.c ****   */
 171:./Lib/Src/stm32f4xx_sai.c **** 
 172:./Lib/Src/stm32f4xx_sai.c **** /**
 173:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Deinitialize the SAIx peripheral registers to their default reset values.
 174:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAIx: To select the SAIx peripheral, where x can be the different instances 
 175:./Lib/Src/stm32f4xx_sai.c ****   *                     
 176:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 177:./Lib/Src/stm32f4xx_sai.c ****   */
 178:./Lib/Src/stm32f4xx_sai.c **** void SAI_DeInit(SAI_TypeDef* SAIx)
 179:./Lib/Src/stm32f4xx_sai.c **** {
  29              		.loc 1 179 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 180:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 181:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_PERIPH(SAIx));
 182:./Lib/Src/stm32f4xx_sai.c ****   
 183:./Lib/Src/stm32f4xx_sai.c ****   if(SAIx == SAI1)
  42              		.loc 1 183 5
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 084A     		ldr	r2, .L4
  45 000c 9342     		cmp	r3, r2
  46 000e 09D1     		bne	.L3
ARM GAS  /tmp/ccrcbWwJ.s 			page 5


 184:./Lib/Src/stm32f4xx_sai.c ****   {
 185:./Lib/Src/stm32f4xx_sai.c ****     /* Enable SAI1 reset state */
 186:./Lib/Src/stm32f4xx_sai.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, ENABLE);
  47              		.loc 1 186 5
  48 0010 0121     		movs	r1, #1
  49 0012 4FF48000 		mov	r0, #4194304
  50 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 187:./Lib/Src/stm32f4xx_sai.c ****     /* Release SAI1 from reset state */
 188:./Lib/Src/stm32f4xx_sai.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI1, DISABLE); 
  51              		.loc 1 188 5
  52 001a 0021     		movs	r1, #0
  53 001c 4FF48000 		mov	r0, #4194304
  54 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  55              	.L3:
 189:./Lib/Src/stm32f4xx_sai.c ****   }
 190:./Lib/Src/stm32f4xx_sai.c ****   else
 191:./Lib/Src/stm32f4xx_sai.c ****   {
 192:./Lib/Src/stm32f4xx_sai.c **** #if defined(STM32F446xx)
 193:./Lib/Src/stm32f4xx_sai.c ****   if(SAIx == SAI2)
 194:./Lib/Src/stm32f4xx_sai.c ****     {
 195:./Lib/Src/stm32f4xx_sai.c ****       /* Enable SAI2 reset state */
 196:./Lib/Src/stm32f4xx_sai.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI2, ENABLE);
 197:./Lib/Src/stm32f4xx_sai.c ****       /* Release SAI2 from reset state */
 198:./Lib/Src/stm32f4xx_sai.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SAI2, DISABLE);   
 199:./Lib/Src/stm32f4xx_sai.c ****     }
 200:./Lib/Src/stm32f4xx_sai.c **** #endif /* STM32F446xx */
 201:./Lib/Src/stm32f4xx_sai.c ****   }
 202:./Lib/Src/stm32f4xx_sai.c **** }
  56              		.loc 1 202 1
  57 0024 00BF     		nop
  58 0026 0837     		adds	r7, r7, #8
  59              		.cfi_def_cfa_offset 8
  60 0028 BD46     		mov	sp, r7
  61              		.cfi_def_cfa_register 13
  62              		@ sp needed
  63 002a 80BD     		pop	{r7, pc}
  64              	.L5:
  65              		.align	2
  66              	.L4:
  67 002c 00580140 		.word	1073829888
  68              		.cfi_endproc
  69              	.LFE123:
  71              		.section	.text.SAI_Init,"ax",%progbits
  72              		.align	1
  73              		.global	SAI_Init
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  78              	SAI_Init:
  79              	.LFB124:
 203:./Lib/Src/stm32f4xx_sai.c **** 
 204:./Lib/Src/stm32f4xx_sai.c **** /**
 205:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Initializes the SAI Block x peripheral according to the specified 
 206:./Lib/Src/stm32f4xx_sai.c ****   *         parameters in the SAI_InitStruct.
 207:./Lib/Src/stm32f4xx_sai.c ****   *         
 208:./Lib/Src/stm32f4xx_sai.c ****   * @note   SAI clock is generated from a specific output of the PLLSAI or a specific  
 209:./Lib/Src/stm32f4xx_sai.c ****   *         output of the PLLI2S or from an alternate function bypassing the PLL I2S.
ARM GAS  /tmp/ccrcbWwJ.s 			page 6


 210:./Lib/Src/stm32f4xx_sai.c ****   *        
 211:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 212:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
 213:./Lib/Src/stm32f4xx_sai.c ****   *         contains the configuration information for the specified SAI Block peripheral.         
 214:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 215:./Lib/Src/stm32f4xx_sai.c ****   */
 216:./Lib/Src/stm32f4xx_sai.c **** void SAI_Init(SAI_Block_TypeDef* SAI_Block_x, SAI_InitTypeDef* SAI_InitStruct)
 217:./Lib/Src/stm32f4xx_sai.c **** {
  80              		.loc 1 217 1
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 16
  83              		@ frame_needed = 1, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85 0000 80B4     		push	{r7}
  86              		.cfi_def_cfa_offset 4
  87              		.cfi_offset 7, -4
  88 0002 85B0     		sub	sp, sp, #20
  89              		.cfi_def_cfa_offset 24
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  92 0006 7860     		str	r0, [r7, #4]
  93 0008 3960     		str	r1, [r7]
 218:./Lib/Src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
  94              		.loc 1 218 12
  95 000a 0023     		movs	r3, #0
  96 000c FB60     		str	r3, [r7, #12]
 219:./Lib/Src/stm32f4xx_sai.c ****   
 220:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 221:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 222:./Lib/Src/stm32f4xx_sai.c ****   
 223:./Lib/Src/stm32f4xx_sai.c ****   /* Check the SAI Block parameters */
 224:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MODE(SAI_InitStruct->SAI_AudioMode));
 225:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PROTOCOL(SAI_InitStruct->SAI_Protocol));
 226:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_DATASIZE(SAI_InitStruct->SAI_DataSize));
 227:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FIRST_BIT(SAI_InitStruct->SAI_FirstBit));
 228:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CLOCK_STROBING(SAI_InitStruct->SAI_ClockStrobing));
 229:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_SYNCHRO(SAI_InitStruct->SAI_Synchro));
 230:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_SYNCEXT(SAI_InitStruct->SAI_SynchroExt));
 231:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_OUTPUT_DRIVE(SAI_InitStruct->SAI_OUTDRIV));
 232:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_NODIVIDER(SAI_InitStruct->SAI_NoDivider));
 233:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(SAI_InitStruct->SAI_MasterDivider));
 234:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FIFO_THRESHOLD(SAI_InitStruct->SAI_FIFOThreshold));
 235:./Lib/Src/stm32f4xx_sai.c **** 
 236:./Lib/Src/stm32f4xx_sai.c ****   /* SAI Block_x CR1 Configuration */
 237:./Lib/Src/stm32f4xx_sai.c ****   /* Get the SAI Block_x CR1 value */
 238:./Lib/Src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->CR1;
  97              		.loc 1 238 10
  98 000e 7B68     		ldr	r3, [r7, #4]
  99 0010 1B68     		ldr	r3, [r3]
 100 0012 FB60     		str	r3, [r7, #12]
 239:./Lib/Src/stm32f4xx_sai.c ****   /* Clear MODE, PRTCFG, DS, LSBFIRST, CKSTR, SYNCEN, OUTDRIV, NODIV, and MCKDIV bits */
 240:./Lib/Src/stm32f4xx_sai.c ****   tmpreg &= CR1_CLEAR_MASK;
 101              		.loc 1 240 10
 102 0014 FA68     		ldr	r2, [r7, #12]
 103 0016 1E4B     		ldr	r3, .L7
 104 0018 1340     		ands	r3, r3, r2
 105 001a FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccrcbWwJ.s 			page 7


 241:./Lib/Src/stm32f4xx_sai.c ****   /* Configure SAI_Block_x: Audio mode, Protocol, Data Size, first transmitted bit, Clock strobing 
 242:./Lib/Src/stm32f4xx_sai.c ****      edge, Synchronization mode, Output drive, Master Divider and FIFO level */  
 243:./Lib/Src/stm32f4xx_sai.c ****   /* Set MODE bits according to SAI_AudioMode value       */
 244:./Lib/Src/stm32f4xx_sai.c ****   /* Set PRTCFG bits according to SAI_Protocol value      */
 245:./Lib/Src/stm32f4xx_sai.c ****   /* Set DS bits according to SAI_DataSize value          */
 246:./Lib/Src/stm32f4xx_sai.c ****   /* Set LSBFIRST bit according to SAI_FirstBit value     */
 247:./Lib/Src/stm32f4xx_sai.c ****   /* Set CKSTR bit according to SAI_ClockStrobing value   */
 248:./Lib/Src/stm32f4xx_sai.c ****   /* Set SYNCEN bit according to SAI_Synchro value        */
 249:./Lib/Src/stm32f4xx_sai.c ****   /* Set OUTDRIV bit according to SAI_OUTDRIV value       */
 250:./Lib/Src/stm32f4xx_sai.c ****   /* Set NODIV bit according to SAI_NoDivider value       */
 251:./Lib/Src/stm32f4xx_sai.c ****   /* Set MCKDIV bits according to SAI_MasterDivider value */
 252:./Lib/Src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)(SAI_InitStruct->SAI_AudioMode     | SAI_InitStruct->SAI_Protocol  |
 106              		.loc 1 252 38
 107 001c 3B68     		ldr	r3, [r7]
 108 001e 1A68     		ldr	r2, [r3]
 109              		.loc 1 252 74
 110 0020 3B68     		ldr	r3, [r7]
 111 0022 5B68     		ldr	r3, [r3, #4]
 112              		.loc 1 252 58
 113 0024 1A43     		orrs	r2, r2, r3
 253:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 114              		.loc 1 253 38
 115 0026 3B68     		ldr	r3, [r7]
 116 0028 9B68     		ldr	r3, [r3, #8]
 252:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 117              		.loc 1 252 90
 118 002a 1A43     		orrs	r2, r2, r3
 119              		.loc 1 253 74
 120 002c 3B68     		ldr	r3, [r7]
 121 002e DB68     		ldr	r3, [r3, #12]
 122              		.loc 1 253 58
 123 0030 1A43     		orrs	r2, r2, r3
 254:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 124              		.loc 1 254 38
 125 0032 3B68     		ldr	r3, [r7]
 126 0034 1B69     		ldr	r3, [r3, #16]
 253:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 127              		.loc 1 253 90
 128 0036 1A43     		orrs	r2, r2, r3
 129              		.loc 1 254 74
 130 0038 3B68     		ldr	r3, [r7]
 131 003a 5B69     		ldr	r3, [r3, #20]
 132              		.loc 1 254 58
 133 003c 1A43     		orrs	r2, r2, r3
 255:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider |
 134              		.loc 1 255 38
 135 003e 3B68     		ldr	r3, [r7]
 136 0040 DB69     		ldr	r3, [r3, #28]
 254:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_ClockStrobing | SAI_InitStruct->SAI_Synchro   |  
 137              		.loc 1 254 90
 138 0042 1A43     		orrs	r2, r2, r3
 139              		.loc 1 255 74
 140 0044 3B68     		ldr	r3, [r7]
 141 0046 1B6A     		ldr	r3, [r3, #32]
 142              		.loc 1 255 58
 143 0048 1A43     		orrs	r2, r2, r3
 256:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_SynchroExt    | (uint32_t)((SAI_InitStruct->SAI_MasterDi
ARM GAS  /tmp/ccrcbWwJ.s 			page 8


 144              		.loc 1 256 38
 145 004a 3B68     		ldr	r3, [r7]
 146 004c 9B69     		ldr	r3, [r3, #24]
 255:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_OUTDRIV       | SAI_InitStruct->SAI_NoDivider |
 147              		.loc 1 255 90
 148 004e 1A43     		orrs	r2, r2, r3
 149              		.loc 1 256 86
 150 0050 3B68     		ldr	r3, [r7]
 151 0052 5B6A     		ldr	r3, [r3, #36]
 152              		.loc 1 256 107
 153 0054 1B05     		lsls	r3, r3, #20
 252:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 154              		.loc 1 252 13
 155 0056 1343     		orrs	r3, r3, r2
 252:./Lib/Src/stm32f4xx_sai.c ****                        SAI_InitStruct->SAI_DataSize      | SAI_InitStruct->SAI_FirstBit  |  
 156              		.loc 1 252 10
 157 0058 FA68     		ldr	r2, [r7, #12]
 158 005a 1343     		orrs	r3, r3, r2
 159 005c FB60     		str	r3, [r7, #12]
 257:./Lib/Src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x CR1 */
 258:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 = tmpreg;
 160              		.loc 1 258 20
 161 005e 7B68     		ldr	r3, [r7, #4]
 162 0060 FA68     		ldr	r2, [r7, #12]
 163 0062 1A60     		str	r2, [r3]
 259:./Lib/Src/stm32f4xx_sai.c ****   
 260:./Lib/Src/stm32f4xx_sai.c ****   /* SAI Block_x CR2 Configuration */
 261:./Lib/Src/stm32f4xx_sai.c ****   /* Get the SAIBlock_x CR2 value */
 262:./Lib/Src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->CR2;
 164              		.loc 1 262 10
 165 0064 7B68     		ldr	r3, [r7, #4]
 166 0066 5B68     		ldr	r3, [r3, #4]
 167 0068 FB60     		str	r3, [r7, #12]
 263:./Lib/Src/stm32f4xx_sai.c ****   /* Clear FTH bits */
 264:./Lib/Src/stm32f4xx_sai.c ****   tmpreg &= ~(SAI_xCR2_FTH);
 168              		.loc 1 264 10
 169 006a FB68     		ldr	r3, [r7, #12]
 170 006c 23F00303 		bic	r3, r3, #3
 171 0070 FB60     		str	r3, [r7, #12]
 265:./Lib/Src/stm32f4xx_sai.c ****   /* Configure the FIFO Level */
 266:./Lib/Src/stm32f4xx_sai.c ****   /* Set FTH bits according to SAI_FIFOThreshold value */ 
 267:./Lib/Src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)(SAI_InitStruct->SAI_FIFOThreshold);
 172              		.loc 1 267 38
 173 0072 3B68     		ldr	r3, [r7]
 174 0074 9B6A     		ldr	r3, [r3, #40]
 175              		.loc 1 267 10
 176 0076 FA68     		ldr	r2, [r7, #12]
 177 0078 1343     		orrs	r3, r3, r2
 178 007a FB60     		str	r3, [r7, #12]
 268:./Lib/Src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x CR2 */
 269:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 = tmpreg;
 179              		.loc 1 269 20
 180 007c 7B68     		ldr	r3, [r7, #4]
 181 007e FA68     		ldr	r2, [r7, #12]
 182 0080 5A60     		str	r2, [r3, #4]
 270:./Lib/Src/stm32f4xx_sai.c **** }
 183              		.loc 1 270 1
ARM GAS  /tmp/ccrcbWwJ.s 			page 9


 184 0082 00BF     		nop
 185 0084 1437     		adds	r7, r7, #20
 186              		.cfi_def_cfa_offset 4
 187 0086 BD46     		mov	sp, r7
 188              		.cfi_def_cfa_register 13
 189              		@ sp needed
 190 0088 5DF8047B 		ldr	r7, [sp], #4
 191              		.cfi_restore 7
 192              		.cfi_def_cfa_offset 0
 193 008c 7047     		bx	lr
 194              	.L8:
 195 008e 00BF     		.align	2
 196              	.L7:
 197 0090 10C007FF 		.word	-16269296
 198              		.cfi_endproc
 199              	.LFE124:
 201              		.section	.text.SAI_FrameInit,"ax",%progbits
 202              		.align	1
 203              		.global	SAI_FrameInit
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 208              	SAI_FrameInit:
 209              	.LFB125:
 271:./Lib/Src/stm32f4xx_sai.c **** 
 272:./Lib/Src/stm32f4xx_sai.c **** /**
 273:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Initializes the SAI Block Audio frame according to the specified 
 274:./Lib/Src/stm32f4xx_sai.c ****   *         parameters in the SAI_FrameInitStruct.
 275:./Lib/Src/stm32f4xx_sai.c ****   *         
 276:./Lib/Src/stm32f4xx_sai.c ****   * @note   this function has no meaning if the AC'97 or SPDIF audio protocol 
 277:./Lib/Src/stm32f4xx_sai.c ****   *         are selected. 
 278:./Lib/Src/stm32f4xx_sai.c ****   *               
 279:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 280:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_FrameInitStruct: pointer to an SAI_FrameInitTypeDef structure that
 281:./Lib/Src/stm32f4xx_sai.c ****   *         contains the configuration of audio frame for a specified SAI Block                    
 282:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 283:./Lib/Src/stm32f4xx_sai.c ****   */
 284:./Lib/Src/stm32f4xx_sai.c **** void SAI_FrameInit(SAI_Block_TypeDef* SAI_Block_x, SAI_FrameInitTypeDef* SAI_FrameInitStruct)
 285:./Lib/Src/stm32f4xx_sai.c **** {
 210              		.loc 1 285 1
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 16
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214              		@ link register save eliminated.
 215 0000 80B4     		push	{r7}
 216              		.cfi_def_cfa_offset 4
 217              		.cfi_offset 7, -4
 218 0002 85B0     		sub	sp, sp, #20
 219              		.cfi_def_cfa_offset 24
 220 0004 00AF     		add	r7, sp, #0
 221              		.cfi_def_cfa_register 7
 222 0006 7860     		str	r0, [r7, #4]
 223 0008 3960     		str	r1, [r7]
 286:./Lib/Src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
 224              		.loc 1 286 12
 225 000a 0023     		movs	r3, #0
 226 000c FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccrcbWwJ.s 			page 10


 287:./Lib/Src/stm32f4xx_sai.c ****   
 288:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 289:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 290:./Lib/Src/stm32f4xx_sai.c ****   
 291:./Lib/Src/stm32f4xx_sai.c ****   /* Check the SAI Block frame parameters */
 292:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FRAME_LENGTH(SAI_FrameInitStruct->SAI_FrameLength));
 293:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_ACTIVE_FRAME(SAI_FrameInitStruct->SAI_ActiveFrameLength));
 294:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FS_DEFINITION(SAI_FrameInitStruct->SAI_FSDefinition));
 295:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FS_POLARITY(SAI_FrameInitStruct->SAI_FSPolarity));
 296:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FS_OFFSET(SAI_FrameInitStruct->SAI_FSOffset));
 297:./Lib/Src/stm32f4xx_sai.c **** 
 298:./Lib/Src/stm32f4xx_sai.c ****   /* SAI Block_x FRCR Configuration */
 299:./Lib/Src/stm32f4xx_sai.c ****   /* Get the SAI Block_x FRCR value */
 300:./Lib/Src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->FRCR;
 227              		.loc 1 300 10
 228 000e 7B68     		ldr	r3, [r7, #4]
 229 0010 9B68     		ldr	r3, [r3, #8]
 230 0012 FB60     		str	r3, [r7, #12]
 301:./Lib/Src/stm32f4xx_sai.c ****   /* Clear FRL, FSALL, FSDEF, FSPOL, FSOFF bits */
 302:./Lib/Src/stm32f4xx_sai.c ****   tmpreg &= FRCR_CLEAR_MASK;
 231              		.loc 1 302 10
 232 0014 FA68     		ldr	r2, [r7, #12]
 233 0016 104B     		ldr	r3, .L10
 234 0018 1340     		ands	r3, r3, r2
 235 001a FB60     		str	r3, [r7, #12]
 303:./Lib/Src/stm32f4xx_sai.c ****   /* Configure SAI_Block_x Frame: Frame Length, Active Frame Length, Frame Synchronization
 304:./Lib/Src/stm32f4xx_sai.c ****      Definition, Frame Synchronization Polarity and Frame Synchronization Polarity */
 305:./Lib/Src/stm32f4xx_sai.c ****   /* Set FRL bits according to SAI_FrameLength value         */
 306:./Lib/Src/stm32f4xx_sai.c ****   /* Set FSALL bits according to SAI_ActiveFrameLength value */
 307:./Lib/Src/stm32f4xx_sai.c ****   /* Set FSDEF bit according to SAI_FSDefinition value       */
 308:./Lib/Src/stm32f4xx_sai.c ****   /* Set FSPOL bit according to SAI_FSPolarity value         */
 309:./Lib/Src/stm32f4xx_sai.c ****   /* Set FSOFF bit according to SAI_FSOffset value           */
 310:./Lib/Src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)((uint32_t)(SAI_FrameInitStruct->SAI_FrameLength - 1)  | 
 236              		.loc 1 310 54
 237 001c 3B68     		ldr	r3, [r7]
 238 001e 1B68     		ldr	r3, [r3]
 239              		.loc 1 310 24
 240 0020 5A1E     		subs	r2, r3, #1
 311:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 241              		.loc 1 311 43
 242 0022 3B68     		ldr	r3, [r7]
 243 0024 1B69     		ldr	r3, [r3, #16]
 310:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 244              		.loc 1 310 78
 245 0026 1A43     		orrs	r2, r2, r3
 312:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSDefinition |    
 246              		.loc 1 312 43
 247 0028 3B68     		ldr	r3, [r7]
 248 002a 9B68     		ldr	r3, [r3, #8]
 311:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 249              		.loc 1 311 62
 250 002c 1A43     		orrs	r2, r2, r3
 313:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSPolarity   |                        
 251              		.loc 1 313 43
 252 002e 3B68     		ldr	r3, [r7]
 253 0030 DB68     		ldr	r3, [r3, #12]
 312:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSDefinition |    
ARM GAS  /tmp/ccrcbWwJ.s 			page 11


 254              		.loc 1 312 62
 255 0032 1A43     		orrs	r2, r2, r3
 314:./Lib/Src/stm32f4xx_sai.c ****                        (uint32_t)((SAI_FrameInitStruct->SAI_ActiveFrameLength - 1) << 8));
 256              		.loc 1 314 55
 257 0034 3B68     		ldr	r3, [r7]
 258 0036 5B68     		ldr	r3, [r3, #4]
 259              		.loc 1 314 79
 260 0038 013B     		subs	r3, r3, #1
 261              		.loc 1 314 24
 262 003a 1B02     		lsls	r3, r3, #8
 310:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 263              		.loc 1 310 13
 264 003c 1343     		orrs	r3, r3, r2
 310:./Lib/Src/stm32f4xx_sai.c ****                        SAI_FrameInitStruct->SAI_FSOffset     | 
 265              		.loc 1 310 10
 266 003e FA68     		ldr	r2, [r7, #12]
 267 0040 1343     		orrs	r3, r3, r2
 268 0042 FB60     		str	r3, [r7, #12]
 315:./Lib/Src/stm32f4xx_sai.c ****                        
 316:./Lib/Src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x FRCR */
 317:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->FRCR = tmpreg;
 269              		.loc 1 317 21
 270 0044 7B68     		ldr	r3, [r7, #4]
 271 0046 FA68     		ldr	r2, [r7, #12]
 272 0048 9A60     		str	r2, [r3, #8]
 318:./Lib/Src/stm32f4xx_sai.c **** }
 273              		.loc 1 318 1
 274 004a 00BF     		nop
 275 004c 1437     		adds	r7, r7, #20
 276              		.cfi_def_cfa_offset 4
 277 004e BD46     		mov	sp, r7
 278              		.cfi_def_cfa_register 13
 279              		@ sp needed
 280 0050 5DF8047B 		ldr	r7, [sp], #4
 281              		.cfi_restore 7
 282              		.cfi_def_cfa_offset 0
 283 0054 7047     		bx	lr
 284              	.L11:
 285 0056 00BF     		.align	2
 286              	.L10:
 287 0058 0080F8FF 		.word	-491520
 288              		.cfi_endproc
 289              	.LFE125:
 291              		.section	.text.SAI_SlotInit,"ax",%progbits
 292              		.align	1
 293              		.global	SAI_SlotInit
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 298              	SAI_SlotInit:
 299              	.LFB126:
 319:./Lib/Src/stm32f4xx_sai.c **** 
 320:./Lib/Src/stm32f4xx_sai.c **** /**
 321:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Initializes the SAI Block audio Slot according to the specified 
 322:./Lib/Src/stm32f4xx_sai.c ****   *         parameters in the SAI_SlotInitStruct.
 323:./Lib/Src/stm32f4xx_sai.c ****   *         
 324:./Lib/Src/stm32f4xx_sai.c ****   * @note   this function has no meaning if the AC'97 or SPDIF audio protocol 
ARM GAS  /tmp/ccrcbWwJ.s 			page 12


 325:./Lib/Src/stm32f4xx_sai.c ****   *         are selected.
 326:./Lib/Src/stm32f4xx_sai.c ****   *               
 327:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 328:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_SlotInitStruct: pointer to an SAI_SlotInitTypeDef structure that
 329:./Lib/Src/stm32f4xx_sai.c ****   *         contains the configuration of audio slot for a specified SAI Block                     
 330:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 331:./Lib/Src/stm32f4xx_sai.c ****   */
 332:./Lib/Src/stm32f4xx_sai.c **** void SAI_SlotInit(SAI_Block_TypeDef* SAI_Block_x, SAI_SlotInitTypeDef* SAI_SlotInitStruct)
 333:./Lib/Src/stm32f4xx_sai.c **** {
 300              		.loc 1 333 1
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 16
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 305 0000 80B4     		push	{r7}
 306              		.cfi_def_cfa_offset 4
 307              		.cfi_offset 7, -4
 308 0002 85B0     		sub	sp, sp, #20
 309              		.cfi_def_cfa_offset 24
 310 0004 00AF     		add	r7, sp, #0
 311              		.cfi_def_cfa_register 7
 312 0006 7860     		str	r0, [r7, #4]
 313 0008 3960     		str	r1, [r7]
 334:./Lib/Src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
 314              		.loc 1 334 12
 315 000a 0023     		movs	r3, #0
 316 000c FB60     		str	r3, [r7, #12]
 335:./Lib/Src/stm32f4xx_sai.c ****   
 336:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 337:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 338:./Lib/Src/stm32f4xx_sai.c ****   
 339:./Lib/Src/stm32f4xx_sai.c ****   /* Check the SAI Block Slot parameters */
 340:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(SAI_SlotInitStruct->SAI_FirstBitOffset));
 341:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_SLOT_SIZE(SAI_SlotInitStruct->SAI_SlotSize));
 342:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_SLOT_NUMBER(SAI_SlotInitStruct->SAI_SlotNumber));
 343:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_SLOT_ACTIVE(SAI_SlotInitStruct->SAI_SlotActive));
 344:./Lib/Src/stm32f4xx_sai.c **** 
 345:./Lib/Src/stm32f4xx_sai.c ****   /* SAI Block_x SLOTR Configuration */
 346:./Lib/Src/stm32f4xx_sai.c ****   /* Get the SAI Block_x SLOTR value */
 347:./Lib/Src/stm32f4xx_sai.c ****   tmpreg = SAI_Block_x->SLOTR;
 317              		.loc 1 347 10
 318 000e 7B68     		ldr	r3, [r7, #4]
 319 0010 DB68     		ldr	r3, [r3, #12]
 320 0012 FB60     		str	r3, [r7, #12]
 348:./Lib/Src/stm32f4xx_sai.c ****   /* Clear FBOFF, SLOTSZ, NBSLOT, SLOTEN bits */
 349:./Lib/Src/stm32f4xx_sai.c ****   tmpreg &= SLOTR_CLEAR_MASK;
 321              		.loc 1 349 10
 322 0014 FA68     		ldr	r2, [r7, #12]
 323 0016 4FF22003 		movw	r3, #61472
 324 001a 1340     		ands	r3, r3, r2
 325 001c FB60     		str	r3, [r7, #12]
 350:./Lib/Src/stm32f4xx_sai.c ****   /* Configure SAI_Block_x Slot: First bit offset, Slot size, Number of Slot in  
 351:./Lib/Src/stm32f4xx_sai.c ****      audio frame and slots activated in audio frame */
 352:./Lib/Src/stm32f4xx_sai.c ****   /* Set FBOFF bits according to SAI_FirstBitOffset value  */
 353:./Lib/Src/stm32f4xx_sai.c ****   /* Set SLOTSZ bits according to SAI_SlotSize value       */
 354:./Lib/Src/stm32f4xx_sai.c ****   /* Set NBSLOT bits according to SAI_SlotNumber value     */
 355:./Lib/Src/stm32f4xx_sai.c ****   /* Set SLOTEN bits according to SAI_SlotActive value     */
ARM GAS  /tmp/ccrcbWwJ.s 			page 13


 356:./Lib/Src/stm32f4xx_sai.c ****   tmpreg |= (uint32_t)(SAI_SlotInitStruct->SAI_FirstBitOffset | 
 326              		.loc 1 356 42
 327 001e 3B68     		ldr	r3, [r7]
 328 0020 1A68     		ldr	r2, [r3]
 357:./Lib/Src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 329              		.loc 1 357 42
 330 0022 3B68     		ldr	r3, [r7]
 331 0024 5B68     		ldr	r3, [r3, #4]
 356:./Lib/Src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 332              		.loc 1 356 63
 333 0026 1A43     		orrs	r2, r2, r3
 358:./Lib/Src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotActive     |    
 334              		.loc 1 358 42
 335 0028 3B68     		ldr	r3, [r7]
 336 002a DB68     		ldr	r3, [r3, #12]
 357:./Lib/Src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 337              		.loc 1 357 63
 338 002c 1A43     		orrs	r2, r2, r3
 359:./Lib/Src/stm32f4xx_sai.c ****                        (uint32_t)((SAI_SlotInitStruct->SAI_SlotNumber - 1) <<  8));
 339              		.loc 1 359 54
 340 002e 3B68     		ldr	r3, [r7]
 341 0030 9B68     		ldr	r3, [r3, #8]
 342              		.loc 1 359 71
 343 0032 013B     		subs	r3, r3, #1
 344              		.loc 1 359 24
 345 0034 1B02     		lsls	r3, r3, #8
 356:./Lib/Src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 346              		.loc 1 356 13
 347 0036 1343     		orrs	r3, r3, r2
 356:./Lib/Src/stm32f4xx_sai.c ****                        SAI_SlotInitStruct->SAI_SlotSize       | 
 348              		.loc 1 356 10
 349 0038 FA68     		ldr	r2, [r7, #12]
 350 003a 1343     		orrs	r3, r3, r2
 351 003c FB60     		str	r3, [r7, #12]
 360:./Lib/Src/stm32f4xx_sai.c ****                        
 361:./Lib/Src/stm32f4xx_sai.c ****   /* Write to SAI_Block_x SLOTR */
 362:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->SLOTR = tmpreg;
 352              		.loc 1 362 22
 353 003e 7B68     		ldr	r3, [r7, #4]
 354 0040 FA68     		ldr	r2, [r7, #12]
 355 0042 DA60     		str	r2, [r3, #12]
 363:./Lib/Src/stm32f4xx_sai.c **** }
 356              		.loc 1 363 1
 357 0044 00BF     		nop
 358 0046 1437     		adds	r7, r7, #20
 359              		.cfi_def_cfa_offset 4
 360 0048 BD46     		mov	sp, r7
 361              		.cfi_def_cfa_register 13
 362              		@ sp needed
 363 004a 5DF8047B 		ldr	r7, [sp], #4
 364              		.cfi_restore 7
 365              		.cfi_def_cfa_offset 0
 366 004e 7047     		bx	lr
 367              		.cfi_endproc
 368              	.LFE126:
 370              		.section	.text.SAI_StructInit,"ax",%progbits
 371              		.align	1
ARM GAS  /tmp/ccrcbWwJ.s 			page 14


 372              		.global	SAI_StructInit
 373              		.syntax unified
 374              		.thumb
 375              		.thumb_func
 377              	SAI_StructInit:
 378              	.LFB127:
 364:./Lib/Src/stm32f4xx_sai.c **** 
 365:./Lib/Src/stm32f4xx_sai.c **** /**
 366:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Fills each SAI_InitStruct member with its default value.
 367:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure which will 
 368:./Lib/Src/stm32f4xx_sai.c ****   *         be initialized.  
 369:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 370:./Lib/Src/stm32f4xx_sai.c ****   */
 371:./Lib/Src/stm32f4xx_sai.c **** void SAI_StructInit(SAI_InitTypeDef* SAI_InitStruct)
 372:./Lib/Src/stm32f4xx_sai.c **** {
 379              		.loc 1 372 1
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 8
 382              		@ frame_needed = 1, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384 0000 80B4     		push	{r7}
 385              		.cfi_def_cfa_offset 4
 386              		.cfi_offset 7, -4
 387 0002 83B0     		sub	sp, sp, #12
 388              		.cfi_def_cfa_offset 16
 389 0004 00AF     		add	r7, sp, #0
 390              		.cfi_def_cfa_register 7
 391 0006 7860     		str	r0, [r7, #4]
 373:./Lib/Src/stm32f4xx_sai.c ****   /* Reset SAI init structure parameters values */
 374:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_AudioMode member */
 375:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_AudioMode = SAI_Mode_MasterTx;
 392              		.loc 1 375 33
 393 0008 7B68     		ldr	r3, [r7, #4]
 394 000a 0022     		movs	r2, #0
 395 000c 1A60     		str	r2, [r3]
 376:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_Protocol member */
 377:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_Protocol = SAI_Free_Protocol;
 396              		.loc 1 377 32
 397 000e 7B68     		ldr	r3, [r7, #4]
 398 0010 0022     		movs	r2, #0
 399 0012 5A60     		str	r2, [r3, #4]
 378:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_DataSize member */
 379:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_DataSize = SAI_DataSize_8b;
 400              		.loc 1 379 32
 401 0014 7B68     		ldr	r3, [r7, #4]
 402 0016 4022     		movs	r2, #64
 403 0018 9A60     		str	r2, [r3, #8]
 380:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_FirstBit member */
 381:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_FirstBit = SAI_FirstBit_MSB;
 404              		.loc 1 381 32
 405 001a 7B68     		ldr	r3, [r7, #4]
 406 001c 0022     		movs	r2, #0
 407 001e DA60     		str	r2, [r3, #12]
 382:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_ClockStrobing member */
 383:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_ClockStrobing = SAI_ClockStrobing_FallingEdge;
 408              		.loc 1 383 37
 409 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccrcbWwJ.s 			page 15


 410 0022 0022     		movs	r2, #0
 411 0024 1A61     		str	r2, [r3, #16]
 384:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_Synchro member */
 385:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_Synchro = SAI_Asynchronous;
 412              		.loc 1 385 31
 413 0026 7B68     		ldr	r3, [r7, #4]
 414 0028 0022     		movs	r2, #0
 415 002a 5A61     		str	r2, [r3, #20]
 386:./Lib/Src/stm32f4xx_sai.c ****     /* Initialize the SAI_SynchroExt member */
 387:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_SynchroExt = SAI_SyncExt_Disable;
 416              		.loc 1 387 34
 417 002c 7B68     		ldr	r3, [r7, #4]
 418 002e 0022     		movs	r2, #0
 419 0030 9A61     		str	r2, [r3, #24]
 388:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_OUTDRIV member */
 389:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_OUTDRIV = SAI_OutputDrive_Disabled;
 420              		.loc 1 389 31
 421 0032 7B68     		ldr	r3, [r7, #4]
 422 0034 0022     		movs	r2, #0
 423 0036 DA61     		str	r2, [r3, #28]
 390:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_NoDivider member */
 391:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_NoDivider = SAI_MasterDivider_Enabled;
 424              		.loc 1 391 33
 425 0038 7B68     		ldr	r3, [r7, #4]
 426 003a 0022     		movs	r2, #0
 427 003c 1A62     		str	r2, [r3, #32]
 392:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_MasterDivider member */
 393:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_MasterDivider = 0;
 428              		.loc 1 393 37
 429 003e 7B68     		ldr	r3, [r7, #4]
 430 0040 0022     		movs	r2, #0
 431 0042 5A62     		str	r2, [r3, #36]
 394:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_FIFOThreshold member */
 395:./Lib/Src/stm32f4xx_sai.c ****   SAI_InitStruct->SAI_FIFOThreshold = SAI_Threshold_FIFOEmpty;
 432              		.loc 1 395 37
 433 0044 7B68     		ldr	r3, [r7, #4]
 434 0046 0022     		movs	r2, #0
 435 0048 9A62     		str	r2, [r3, #40]
 396:./Lib/Src/stm32f4xx_sai.c **** }
 436              		.loc 1 396 1
 437 004a 00BF     		nop
 438 004c 0C37     		adds	r7, r7, #12
 439              		.cfi_def_cfa_offset 4
 440 004e BD46     		mov	sp, r7
 441              		.cfi_def_cfa_register 13
 442              		@ sp needed
 443 0050 5DF8047B 		ldr	r7, [sp], #4
 444              		.cfi_restore 7
 445              		.cfi_def_cfa_offset 0
 446 0054 7047     		bx	lr
 447              		.cfi_endproc
 448              	.LFE127:
 450              		.section	.text.SAI_FrameStructInit,"ax",%progbits
 451              		.align	1
 452              		.global	SAI_FrameStructInit
 453              		.syntax unified
 454              		.thumb
ARM GAS  /tmp/ccrcbWwJ.s 			page 16


 455              		.thumb_func
 457              	SAI_FrameStructInit:
 458              	.LFB128:
 397:./Lib/Src/stm32f4xx_sai.c **** 
 398:./Lib/Src/stm32f4xx_sai.c **** /**
 399:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Fills each SAI_FrameInitStruct member with its default value.
 400:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_FrameInitStruct: pointer to a SAI_FrameInitTypeDef structure 
 401:./Lib/Src/stm32f4xx_sai.c ****   *         which will be initialized.                     
 402:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 403:./Lib/Src/stm32f4xx_sai.c ****   */
 404:./Lib/Src/stm32f4xx_sai.c **** void SAI_FrameStructInit(SAI_FrameInitTypeDef* SAI_FrameInitStruct)
 405:./Lib/Src/stm32f4xx_sai.c **** {
 459              		.loc 1 405 1
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 8
 462              		@ frame_needed = 1, uses_anonymous_args = 0
 463              		@ link register save eliminated.
 464 0000 80B4     		push	{r7}
 465              		.cfi_def_cfa_offset 4
 466              		.cfi_offset 7, -4
 467 0002 83B0     		sub	sp, sp, #12
 468              		.cfi_def_cfa_offset 16
 469 0004 00AF     		add	r7, sp, #0
 470              		.cfi_def_cfa_register 7
 471 0006 7860     		str	r0, [r7, #4]
 406:./Lib/Src/stm32f4xx_sai.c ****   /* Reset SAI Frame init structure parameters values */
 407:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_FrameLength member */
 408:./Lib/Src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FrameLength = 8;
 472              		.loc 1 408 40
 473 0008 7B68     		ldr	r3, [r7, #4]
 474 000a 0822     		movs	r2, #8
 475 000c 1A60     		str	r2, [r3]
 409:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_ActiveFrameLength member */
 410:./Lib/Src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_ActiveFrameLength = 1;
 476              		.loc 1 410 46
 477 000e 7B68     		ldr	r3, [r7, #4]
 478 0010 0122     		movs	r2, #1
 479 0012 5A60     		str	r2, [r3, #4]
 411:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_FSDefinition member */
 412:./Lib/Src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FSDefinition = SAI_FS_StartFrame;
 480              		.loc 1 412 41
 481 0014 7B68     		ldr	r3, [r7, #4]
 482 0016 0022     		movs	r2, #0
 483 0018 9A60     		str	r2, [r3, #8]
 413:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_FSPolarity member */
 414:./Lib/Src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FSPolarity = SAI_FS_ActiveLow;
 484              		.loc 1 414 39
 485 001a 7B68     		ldr	r3, [r7, #4]
 486 001c 0022     		movs	r2, #0
 487 001e DA60     		str	r2, [r3, #12]
 415:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_FSOffset member */
 416:./Lib/Src/stm32f4xx_sai.c ****   SAI_FrameInitStruct->SAI_FSOffset = SAI_FS_FirstBit;
 488              		.loc 1 416 37
 489 0020 7B68     		ldr	r3, [r7, #4]
 490 0022 0022     		movs	r2, #0
 491 0024 1A61     		str	r2, [r3, #16]
 417:./Lib/Src/stm32f4xx_sai.c **** }
ARM GAS  /tmp/ccrcbWwJ.s 			page 17


 492              		.loc 1 417 1
 493 0026 00BF     		nop
 494 0028 0C37     		adds	r7, r7, #12
 495              		.cfi_def_cfa_offset 4
 496 002a BD46     		mov	sp, r7
 497              		.cfi_def_cfa_register 13
 498              		@ sp needed
 499 002c 5DF8047B 		ldr	r7, [sp], #4
 500              		.cfi_restore 7
 501              		.cfi_def_cfa_offset 0
 502 0030 7047     		bx	lr
 503              		.cfi_endproc
 504              	.LFE128:
 506              		.section	.text.SAI_SlotStructInit,"ax",%progbits
 507              		.align	1
 508              		.global	SAI_SlotStructInit
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 513              	SAI_SlotStructInit:
 514              	.LFB129:
 418:./Lib/Src/stm32f4xx_sai.c **** 
 419:./Lib/Src/stm32f4xx_sai.c **** /**
 420:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Fills each SAI_SlotInitStruct member with its default value.
 421:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_SlotInitStruct: pointer to a SAI_SlotInitTypeDef structure 
 422:./Lib/Src/stm32f4xx_sai.c ****   *         which will be initialized.                     
 423:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 424:./Lib/Src/stm32f4xx_sai.c ****   */
 425:./Lib/Src/stm32f4xx_sai.c **** void SAI_SlotStructInit(SAI_SlotInitTypeDef* SAI_SlotInitStruct)
 426:./Lib/Src/stm32f4xx_sai.c **** {
 515              		.loc 1 426 1
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 8
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520 0000 80B4     		push	{r7}
 521              		.cfi_def_cfa_offset 4
 522              		.cfi_offset 7, -4
 523 0002 83B0     		sub	sp, sp, #12
 524              		.cfi_def_cfa_offset 16
 525 0004 00AF     		add	r7, sp, #0
 526              		.cfi_def_cfa_register 7
 527 0006 7860     		str	r0, [r7, #4]
 427:./Lib/Src/stm32f4xx_sai.c ****   /* Reset SAI Slot init structure parameters values */
 428:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_FirstBitOffset member */
 429:./Lib/Src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_FirstBitOffset = 0;
 528              		.loc 1 429 42
 529 0008 7B68     		ldr	r3, [r7, #4]
 530 000a 0022     		movs	r2, #0
 531 000c 1A60     		str	r2, [r3]
 430:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_SlotSize member */
 431:./Lib/Src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_SlotSize = SAI_SlotSize_DataSize;
 532              		.loc 1 431 36
 533 000e 7B68     		ldr	r3, [r7, #4]
 534 0010 0022     		movs	r2, #0
 535 0012 5A60     		str	r2, [r3, #4]
 432:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_SlotNumber member */
ARM GAS  /tmp/ccrcbWwJ.s 			page 18


 433:./Lib/Src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_SlotNumber = 1;
 536              		.loc 1 433 38
 537 0014 7B68     		ldr	r3, [r7, #4]
 538 0016 0122     		movs	r2, #1
 539 0018 9A60     		str	r2, [r3, #8]
 434:./Lib/Src/stm32f4xx_sai.c ****   /* Initialize the SAI_SlotActive member */
 435:./Lib/Src/stm32f4xx_sai.c ****   SAI_SlotInitStruct->SAI_SlotActive = SAI_Slot_NotActive;
 540              		.loc 1 435 38
 541 001a 7B68     		ldr	r3, [r7, #4]
 542 001c 0022     		movs	r2, #0
 543 001e DA60     		str	r2, [r3, #12]
 436:./Lib/Src/stm32f4xx_sai.c **** 
 437:./Lib/Src/stm32f4xx_sai.c **** }
 544              		.loc 1 437 1
 545 0020 00BF     		nop
 546 0022 0C37     		adds	r7, r7, #12
 547              		.cfi_def_cfa_offset 4
 548 0024 BD46     		mov	sp, r7
 549              		.cfi_def_cfa_register 13
 550              		@ sp needed
 551 0026 5DF8047B 		ldr	r7, [sp], #4
 552              		.cfi_restore 7
 553              		.cfi_def_cfa_offset 0
 554 002a 7047     		bx	lr
 555              		.cfi_endproc
 556              	.LFE129:
 558              		.section	.text.SAI_Cmd,"ax",%progbits
 559              		.align	1
 560              		.global	SAI_Cmd
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 565              	SAI_Cmd:
 566              	.LFB130:
 438:./Lib/Src/stm32f4xx_sai.c **** 
 439:./Lib/Src/stm32f4xx_sai.c **** /**
 440:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Enables or disables the specified SAI Block peripheral.
 441:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 442:./Lib/Src/stm32f4xx_sai.c ****   * @param  NewState: new state of the SAI_Block_x peripheral. 
 443:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 444:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 445:./Lib/Src/stm32f4xx_sai.c ****   */
 446:./Lib/Src/stm32f4xx_sai.c **** void SAI_Cmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
 447:./Lib/Src/stm32f4xx_sai.c **** {
 567              		.loc 1 447 1
 568              		.cfi_startproc
 569              		@ args = 0, pretend = 0, frame = 8
 570              		@ frame_needed = 1, uses_anonymous_args = 0
 571              		@ link register save eliminated.
 572 0000 80B4     		push	{r7}
 573              		.cfi_def_cfa_offset 4
 574              		.cfi_offset 7, -4
 575 0002 83B0     		sub	sp, sp, #12
 576              		.cfi_def_cfa_offset 16
 577 0004 00AF     		add	r7, sp, #0
 578              		.cfi_def_cfa_register 7
 579 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccrcbWwJ.s 			page 19


 580 0008 0B46     		mov	r3, r1
 581 000a FB70     		strb	r3, [r7, #3]
 448:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 449:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 450:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 451:./Lib/Src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 582              		.loc 1 451 6
 583 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 584 000e 002B     		cmp	r3, #0
 585 0010 06D0     		beq	.L17
 452:./Lib/Src/stm32f4xx_sai.c ****   {
 453:./Lib/Src/stm32f4xx_sai.c ****     /* Enable the selected SAI peripheral */
 454:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 |= SAI_xCR1_SAIEN;
 586              		.loc 1 454 16
 587 0012 7B68     		ldr	r3, [r7, #4]
 588 0014 1B68     		ldr	r3, [r3]
 589              		.loc 1 454 22
 590 0016 43F48032 		orr	r2, r3, #65536
 591 001a 7B68     		ldr	r3, [r7, #4]
 592 001c 1A60     		str	r2, [r3]
 455:./Lib/Src/stm32f4xx_sai.c ****   }
 456:./Lib/Src/stm32f4xx_sai.c ****   else
 457:./Lib/Src/stm32f4xx_sai.c ****   {
 458:./Lib/Src/stm32f4xx_sai.c ****     /* Disable the selected SAI peripheral */
 459:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 &= ~(SAI_xCR1_SAIEN);
 460:./Lib/Src/stm32f4xx_sai.c ****   }
 461:./Lib/Src/stm32f4xx_sai.c **** }
 593              		.loc 1 461 1
 594 001e 05E0     		b	.L19
 595              	.L17:
 459:./Lib/Src/stm32f4xx_sai.c ****   }
 596              		.loc 1 459 16
 597 0020 7B68     		ldr	r3, [r7, #4]
 598 0022 1B68     		ldr	r3, [r3]
 459:./Lib/Src/stm32f4xx_sai.c ****   }
 599              		.loc 1 459 22
 600 0024 23F48032 		bic	r2, r3, #65536
 601 0028 7B68     		ldr	r3, [r7, #4]
 602 002a 1A60     		str	r2, [r3]
 603              	.L19:
 604              		.loc 1 461 1
 605 002c 00BF     		nop
 606 002e 0C37     		adds	r7, r7, #12
 607              		.cfi_def_cfa_offset 4
 608 0030 BD46     		mov	sp, r7
 609              		.cfi_def_cfa_register 13
 610              		@ sp needed
 611 0032 5DF8047B 		ldr	r7, [sp], #4
 612              		.cfi_restore 7
 613              		.cfi_def_cfa_offset 0
 614 0036 7047     		bx	lr
 615              		.cfi_endproc
 616              	.LFE130:
 618              		.section	.text.SAI_MonoModeConfig,"ax",%progbits
 619              		.align	1
 620              		.global	SAI_MonoModeConfig
 621              		.syntax unified
ARM GAS  /tmp/ccrcbWwJ.s 			page 20


 622              		.thumb
 623              		.thumb_func
 625              	SAI_MonoModeConfig:
 626              	.LFB131:
 462:./Lib/Src/stm32f4xx_sai.c **** 
 463:./Lib/Src/stm32f4xx_sai.c **** /**
 464:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Configures the mono mode for the selected SAI block.
 465:./Lib/Src/stm32f4xx_sai.c ****   * 
 466:./Lib/Src/stm32f4xx_sai.c ****   * @note  This function has a meaning only when the number of slot is equal to 2. 
 467:./Lib/Src/stm32f4xx_sai.c ****   *      
 468:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 469:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_MonoMode: specifies the SAI block mono mode.
 470:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 471:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_MonoMode : Set mono audio mode
 472:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_StreoMode : Set streo audio mode                       
 473:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 474:./Lib/Src/stm32f4xx_sai.c ****   */
 475:./Lib/Src/stm32f4xx_sai.c **** void SAI_MonoModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_Mono_StreoMode)
 476:./Lib/Src/stm32f4xx_sai.c **** {
 627              		.loc 1 476 1
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 8
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632 0000 80B4     		push	{r7}
 633              		.cfi_def_cfa_offset 4
 634              		.cfi_offset 7, -4
 635 0002 83B0     		sub	sp, sp, #12
 636              		.cfi_def_cfa_offset 16
 637 0004 00AF     		add	r7, sp, #0
 638              		.cfi_def_cfa_register 7
 639 0006 7860     		str	r0, [r7, #4]
 640 0008 3960     		str	r1, [r7]
 477:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 478:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 479:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MONO_STREO_MODE(SAI_MonoMode));
 480:./Lib/Src/stm32f4xx_sai.c ****   /* Clear MONO bit */
 481:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 641              		.loc 1 481 14
 642 000a 7B68     		ldr	r3, [r7, #4]
 643 000c 1B68     		ldr	r3, [r3]
 644              		.loc 1 481 20
 645 000e 23F48052 		bic	r2, r3, #4096
 646 0012 7B68     		ldr	r3, [r7, #4]
 647 0014 1A60     		str	r2, [r3]
 482:./Lib/Src/stm32f4xx_sai.c ****   /* Set new Mono Mode value */
 483:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 |= SAI_MonoMode;
 648              		.loc 1 483 14
 649 0016 7B68     		ldr	r3, [r7, #4]
 650 0018 1B68     		ldr	r3, [r3]
 651              		.loc 1 483 20
 652 001a 43F48052 		orr	r2, r3, #4096
 653 001e 7B68     		ldr	r3, [r7, #4]
 654 0020 1A60     		str	r2, [r3]
 484:./Lib/Src/stm32f4xx_sai.c **** }
 655              		.loc 1 484 1
 656 0022 00BF     		nop
ARM GAS  /tmp/ccrcbWwJ.s 			page 21


 657 0024 0C37     		adds	r7, r7, #12
 658              		.cfi_def_cfa_offset 4
 659 0026 BD46     		mov	sp, r7
 660              		.cfi_def_cfa_register 13
 661              		@ sp needed
 662 0028 5DF8047B 		ldr	r7, [sp], #4
 663              		.cfi_restore 7
 664              		.cfi_def_cfa_offset 0
 665 002c 7047     		bx	lr
 666              		.cfi_endproc
 667              	.LFE131:
 669              		.section	.text.SAI_TRIStateConfig,"ax",%progbits
 670              		.align	1
 671              		.global	SAI_TRIStateConfig
 672              		.syntax unified
 673              		.thumb
 674              		.thumb_func
 676              	SAI_TRIStateConfig:
 677              	.LFB132:
 485:./Lib/Src/stm32f4xx_sai.c **** 
 486:./Lib/Src/stm32f4xx_sai.c **** /**
 487:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Configures the TRIState management on data line for the selected SAI block.
 488:./Lib/Src/stm32f4xx_sai.c ****   * 
 489:./Lib/Src/stm32f4xx_sai.c ****   * @note  This function has a meaning only when the SAI block is configured in transmitter 
 490:./Lib/Src/stm32f4xx_sai.c ****   *      
 491:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 492:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_TRIState: specifies the SAI block TRIState management.
 493:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 494:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_Output_NotReleased : SD output line is still driven by the SAI.
 495:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_Output_Released : SD output line is released (HI-Z)                       
 496:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 497:./Lib/Src/stm32f4xx_sai.c ****   */
 498:./Lib/Src/stm32f4xx_sai.c **** void SAI_TRIStateConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_TRIState)
 499:./Lib/Src/stm32f4xx_sai.c **** {
 678              		.loc 1 499 1
 679              		.cfi_startproc
 680              		@ args = 0, pretend = 0, frame = 8
 681              		@ frame_needed = 1, uses_anonymous_args = 0
 682              		@ link register save eliminated.
 683 0000 80B4     		push	{r7}
 684              		.cfi_def_cfa_offset 4
 685              		.cfi_offset 7, -4
 686 0002 83B0     		sub	sp, sp, #12
 687              		.cfi_def_cfa_offset 16
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_def_cfa_register 7
 690 0006 7860     		str	r0, [r7, #4]
 691 0008 3960     		str	r1, [r7]
 500:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 501:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 502:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_TRISTATE_MANAGEMENT(SAI_TRIState));
 503:./Lib/Src/stm32f4xx_sai.c ****   /* Clear MONO bit */
 504:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 &= ~(SAI_xCR1_MONO);
 692              		.loc 1 504 14
 693 000a 7B68     		ldr	r3, [r7, #4]
 694 000c 1B68     		ldr	r3, [r3]
 695              		.loc 1 504 20
ARM GAS  /tmp/ccrcbWwJ.s 			page 22


 696 000e 23F48052 		bic	r2, r3, #4096
 697 0012 7B68     		ldr	r3, [r7, #4]
 698 0014 1A60     		str	r2, [r3]
 505:./Lib/Src/stm32f4xx_sai.c ****   /* Set new Mono Mode value */
 506:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR1 |= SAI_MonoMode;  
 699              		.loc 1 506 14
 700 0016 7B68     		ldr	r3, [r7, #4]
 701 0018 1B68     		ldr	r3, [r3]
 702              		.loc 1 506 20
 703 001a 43F48052 		orr	r2, r3, #4096
 704 001e 7B68     		ldr	r3, [r7, #4]
 705 0020 1A60     		str	r2, [r3]
 507:./Lib/Src/stm32f4xx_sai.c ****   
 508:./Lib/Src/stm32f4xx_sai.c **** }
 706              		.loc 1 508 1
 707 0022 00BF     		nop
 708 0024 0C37     		adds	r7, r7, #12
 709              		.cfi_def_cfa_offset 4
 710 0026 BD46     		mov	sp, r7
 711              		.cfi_def_cfa_register 13
 712              		@ sp needed
 713 0028 5DF8047B 		ldr	r7, [sp], #4
 714              		.cfi_restore 7
 715              		.cfi_def_cfa_offset 0
 716 002c 7047     		bx	lr
 717              		.cfi_endproc
 718              	.LFE132:
 720              		.section	.text.SAI_CompandingModeConfig,"ax",%progbits
 721              		.align	1
 722              		.global	SAI_CompandingModeConfig
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 727              	SAI_CompandingModeConfig:
 728              	.LFB133:
 509:./Lib/Src/stm32f4xx_sai.c **** 
 510:./Lib/Src/stm32f4xx_sai.c **** /**
 511:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Configures the companding mode for the selected SAI block.
 512:./Lib/Src/stm32f4xx_sai.c ****   * 
 513:./Lib/Src/stm32f4xx_sai.c ****   * @note  The data expansion or data compression are determined by the state of
 514:./Lib/Src/stm32f4xx_sai.c ****   *        SAI block selected (transmitter or receiver). 
 515:./Lib/Src/stm32f4xx_sai.c **** 
 516:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.              
 517:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_CompandingMode: specifies the SAI block companding mode.
 518:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 519:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_NoCompanding : no companding algorithm set
 520:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_ULaw_1CPL_Companding : Set U law (algorithm 1's complement representation)
 521:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_ALaw_1CPL_Companding : Set A law (algorithm 1's complement representation) 
 522:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_ULaw_2CPL_Companding : Set U law (algorithm 2's complement representation)
 523:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_ALaw_2CPL_Companding : Set A law (algorithm 2's complement representation) 
 524:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 525:./Lib/Src/stm32f4xx_sai.c ****   */
 526:./Lib/Src/stm32f4xx_sai.c **** void SAI_CompandingModeConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_CompandingMode)
 527:./Lib/Src/stm32f4xx_sai.c **** {
 729              		.loc 1 527 1
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccrcbWwJ.s 			page 23


 732              		@ frame_needed = 1, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734 0000 80B4     		push	{r7}
 735              		.cfi_def_cfa_offset 4
 736              		.cfi_offset 7, -4
 737 0002 83B0     		sub	sp, sp, #12
 738              		.cfi_def_cfa_offset 16
 739 0004 00AF     		add	r7, sp, #0
 740              		.cfi_def_cfa_register 7
 741 0006 7860     		str	r0, [r7, #4]
 742 0008 3960     		str	r1, [r7]
 528:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 529:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 530:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_COMPANDING_MODE(SAI_CompandingMode));
 531:./Lib/Src/stm32f4xx_sai.c ****   /* Clear Companding Mode bits */
 532:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 &= ~(SAI_xCR2_COMP);
 743              		.loc 1 532 14
 744 000a 7B68     		ldr	r3, [r7, #4]
 745 000c 5B68     		ldr	r3, [r3, #4]
 746              		.loc 1 532 20
 747 000e 23F44042 		bic	r2, r3, #49152
 748 0012 7B68     		ldr	r3, [r7, #4]
 749 0014 5A60     		str	r2, [r3, #4]
 533:./Lib/Src/stm32f4xx_sai.c ****   /* Set new Companding Mode value */
 534:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= SAI_CompandingMode;
 750              		.loc 1 534 14
 751 0016 7B68     		ldr	r3, [r7, #4]
 752 0018 5A68     		ldr	r2, [r3, #4]
 753              		.loc 1 534 20
 754 001a 3B68     		ldr	r3, [r7]
 755 001c 1A43     		orrs	r2, r2, r3
 756 001e 7B68     		ldr	r3, [r7, #4]
 757 0020 5A60     		str	r2, [r3, #4]
 535:./Lib/Src/stm32f4xx_sai.c **** }
 758              		.loc 1 535 1
 759 0022 00BF     		nop
 760 0024 0C37     		adds	r7, r7, #12
 761              		.cfi_def_cfa_offset 4
 762 0026 BD46     		mov	sp, r7
 763              		.cfi_def_cfa_register 13
 764              		@ sp needed
 765 0028 5DF8047B 		ldr	r7, [sp], #4
 766              		.cfi_restore 7
 767              		.cfi_def_cfa_offset 0
 768 002c 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE133:
 772              		.section	.text.SAI_MuteModeCmd,"ax",%progbits
 773              		.align	1
 774              		.global	SAI_MuteModeCmd
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 779              	SAI_MuteModeCmd:
 780              	.LFB134:
 536:./Lib/Src/stm32f4xx_sai.c **** 
 537:./Lib/Src/stm32f4xx_sai.c **** /**
ARM GAS  /tmp/ccrcbWwJ.s 			page 24


 538:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Enables or disables the Mute mode for the selected SAI block.
 539:./Lib/Src/stm32f4xx_sai.c ****   *    
 540:./Lib/Src/stm32f4xx_sai.c ****   * @note   This function has a meaning only when the audio block is transmitter
 541:./Lib/Src/stm32f4xx_sai.c ****   * @note   Mute mode is applied for an entire frame for all the valid slot
 542:./Lib/Src/stm32f4xx_sai.c ****   *         It becomes active at the end of an audio frame when set somewhere in a frame. 
 543:./Lib/Src/stm32f4xx_sai.c ****   *         Mute mode exit occurs at the end of the frame in which the bit MUTE has been set.
 544:./Lib/Src/stm32f4xx_sai.c ****   *
 545:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 546:./Lib/Src/stm32f4xx_sai.c ****   * @param  NewState: new state of the SAIx block. 
 547:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 548:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 549:./Lib/Src/stm32f4xx_sai.c ****   */
 550:./Lib/Src/stm32f4xx_sai.c **** void SAI_MuteModeCmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
 551:./Lib/Src/stm32f4xx_sai.c **** {
 781              		.loc 1 551 1
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 8
 784              		@ frame_needed = 1, uses_anonymous_args = 0
 785              		@ link register save eliminated.
 786 0000 80B4     		push	{r7}
 787              		.cfi_def_cfa_offset 4
 788              		.cfi_offset 7, -4
 789 0002 83B0     		sub	sp, sp, #12
 790              		.cfi_def_cfa_offset 16
 791 0004 00AF     		add	r7, sp, #0
 792              		.cfi_def_cfa_register 7
 793 0006 7860     		str	r0, [r7, #4]
 794 0008 0B46     		mov	r3, r1
 795 000a FB70     		strb	r3, [r7, #3]
 552:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 553:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 554:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 555:./Lib/Src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 796              		.loc 1 555 6
 797 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 798 000e 002B     		cmp	r3, #0
 799 0010 06D0     		beq	.L24
 556:./Lib/Src/stm32f4xx_sai.c ****   {
 557:./Lib/Src/stm32f4xx_sai.c ****     /* Enable the selected SAI block mute mode */
 558:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->CR2 |= SAI_xCR2_MUTE;
 800              		.loc 1 558 16
 801 0012 7B68     		ldr	r3, [r7, #4]
 802 0014 5B68     		ldr	r3, [r3, #4]
 803              		.loc 1 558 22
 804 0016 43F02002 		orr	r2, r3, #32
 805 001a 7B68     		ldr	r3, [r7, #4]
 806 001c 5A60     		str	r2, [r3, #4]
 559:./Lib/Src/stm32f4xx_sai.c ****   }
 560:./Lib/Src/stm32f4xx_sai.c ****   else
 561:./Lib/Src/stm32f4xx_sai.c ****   {
 562:./Lib/Src/stm32f4xx_sai.c ****     /* Disable the selected SAI SS output */
 563:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTE);
 564:./Lib/Src/stm32f4xx_sai.c ****   }
 565:./Lib/Src/stm32f4xx_sai.c **** }
 807              		.loc 1 565 1
 808 001e 05E0     		b	.L26
 809              	.L24:
ARM GAS  /tmp/ccrcbWwJ.s 			page 25


 563:./Lib/Src/stm32f4xx_sai.c ****   }
 810              		.loc 1 563 16
 811 0020 7B68     		ldr	r3, [r7, #4]
 812 0022 5B68     		ldr	r3, [r3, #4]
 563:./Lib/Src/stm32f4xx_sai.c ****   }
 813              		.loc 1 563 22
 814 0024 23F02002 		bic	r2, r3, #32
 815 0028 7B68     		ldr	r3, [r7, #4]
 816 002a 5A60     		str	r2, [r3, #4]
 817              	.L26:
 818              		.loc 1 565 1
 819 002c 00BF     		nop
 820 002e 0C37     		adds	r7, r7, #12
 821              		.cfi_def_cfa_offset 4
 822 0030 BD46     		mov	sp, r7
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0032 5DF8047B 		ldr	r7, [sp], #4
 826              		.cfi_restore 7
 827              		.cfi_def_cfa_offset 0
 828 0036 7047     		bx	lr
 829              		.cfi_endproc
 830              	.LFE134:
 832              		.section	.text.SAI_MuteValueConfig,"ax",%progbits
 833              		.align	1
 834              		.global	SAI_MuteValueConfig
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 839              	SAI_MuteValueConfig:
 840              	.LFB135:
 566:./Lib/Src/stm32f4xx_sai.c **** 
 567:./Lib/Src/stm32f4xx_sai.c **** /**
 568:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Configure the mute value for the selected SAI block.
 569:./Lib/Src/stm32f4xx_sai.c ****   *    
 570:./Lib/Src/stm32f4xx_sai.c ****   * @note   This function has a meaning only when the audio block is transmitter
 571:./Lib/Src/stm32f4xx_sai.c ****   * @note   the configuration last value sent during mute mode has only a meaning 
 572:./Lib/Src/stm32f4xx_sai.c ****   *          when the number of slot is lower or equal to 2 and if the MUTE bit is set.
 573:./Lib/Src/stm32f4xx_sai.c ****   *           
 574:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 575:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_MuteValue: specifies the SAI block mute value.
 576:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 577:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_ZeroValue : bit value 0 is sent during Mute Mode
 578:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_LastSentValue : Last value is sent during Mute Mode  
 579:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 580:./Lib/Src/stm32f4xx_sai.c ****   */
 581:./Lib/Src/stm32f4xx_sai.c **** void SAI_MuteValueConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteValue)
 582:./Lib/Src/stm32f4xx_sai.c **** {
 841              		.loc 1 582 1
 842              		.cfi_startproc
 843              		@ args = 0, pretend = 0, frame = 8
 844              		@ frame_needed = 1, uses_anonymous_args = 0
 845              		@ link register save eliminated.
 846 0000 80B4     		push	{r7}
 847              		.cfi_def_cfa_offset 4
 848              		.cfi_offset 7, -4
 849 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccrcbWwJ.s 			page 26


 850              		.cfi_def_cfa_offset 16
 851 0004 00AF     		add	r7, sp, #0
 852              		.cfi_def_cfa_register 7
 853 0006 7860     		str	r0, [r7, #4]
 854 0008 3960     		str	r1, [r7]
 583:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 584:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 585:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_VALUE(SAI_MuteValue));
 586:./Lib/Src/stm32f4xx_sai.c ****   
 587:./Lib/Src/stm32f4xx_sai.c ****   /* Clear Mute value bits */
 588:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTEVAL);
 855              		.loc 1 588 14
 856 000a 7B68     		ldr	r3, [r7, #4]
 857 000c 5B68     		ldr	r3, [r3, #4]
 858              		.loc 1 588 20
 859 000e 23F04002 		bic	r2, r3, #64
 860 0012 7B68     		ldr	r3, [r7, #4]
 861 0014 5A60     		str	r2, [r3, #4]
 589:./Lib/Src/stm32f4xx_sai.c ****   /* Set new Mute value */
 590:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= SAI_MuteValue;
 862              		.loc 1 590 14
 863 0016 7B68     		ldr	r3, [r7, #4]
 864 0018 5A68     		ldr	r2, [r3, #4]
 865              		.loc 1 590 20
 866 001a 3B68     		ldr	r3, [r7]
 867 001c 1A43     		orrs	r2, r2, r3
 868 001e 7B68     		ldr	r3, [r7, #4]
 869 0020 5A60     		str	r2, [r3, #4]
 591:./Lib/Src/stm32f4xx_sai.c **** }
 870              		.loc 1 591 1
 871 0022 00BF     		nop
 872 0024 0C37     		adds	r7, r7, #12
 873              		.cfi_def_cfa_offset 4
 874 0026 BD46     		mov	sp, r7
 875              		.cfi_def_cfa_register 13
 876              		@ sp needed
 877 0028 5DF8047B 		ldr	r7, [sp], #4
 878              		.cfi_restore 7
 879              		.cfi_def_cfa_offset 0
 880 002c 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE135:
 884              		.section	.text.SAI_MuteFrameCounterConfig,"ax",%progbits
 885              		.align	1
 886              		.global	SAI_MuteFrameCounterConfig
 887              		.syntax unified
 888              		.thumb
 889              		.thumb_func
 891              	SAI_MuteFrameCounterConfig:
 892              	.LFB136:
 592:./Lib/Src/stm32f4xx_sai.c **** 
 593:./Lib/Src/stm32f4xx_sai.c **** /**
 594:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Enables or disables the Mute mode for the selected SAI block. 
 595:./Lib/Src/stm32f4xx_sai.c ****   *
 596:./Lib/Src/stm32f4xx_sai.c ****   * @note   This function has a meaning only when the audio block is Receiver
 597:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 598:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_MuteCounter: specifies the SAI block mute value.
ARM GAS  /tmp/ccrcbWwJ.s 			page 27


 599:./Lib/Src/stm32f4xx_sai.c ****   *         This parameter can be a number between 0 and 63.  
 600:./Lib/Src/stm32f4xx_sai.c ****  
 601:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 602:./Lib/Src/stm32f4xx_sai.c ****   */
 603:./Lib/Src/stm32f4xx_sai.c **** void SAI_MuteFrameCounterConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_MuteCounter)
 604:./Lib/Src/stm32f4xx_sai.c **** {
 893              		.loc 1 604 1
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 8
 896              		@ frame_needed = 1, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898 0000 80B4     		push	{r7}
 899              		.cfi_def_cfa_offset 4
 900              		.cfi_offset 7, -4
 901 0002 83B0     		sub	sp, sp, #12
 902              		.cfi_def_cfa_offset 16
 903 0004 00AF     		add	r7, sp, #0
 904              		.cfi_def_cfa_register 7
 905 0006 7860     		str	r0, [r7, #4]
 906 0008 3960     		str	r1, [r7]
 605:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 606:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 607:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_MUTE_COUNTER(SAI_MuteCounter));
 608:./Lib/Src/stm32f4xx_sai.c ****   
 609:./Lib/Src/stm32f4xx_sai.c ****   /* Clear Mute value bits */
 610:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 &= ~(SAI_xCR2_MUTECNT);
 907              		.loc 1 610 14
 908 000a 7B68     		ldr	r3, [r7, #4]
 909 000c 5B68     		ldr	r3, [r3, #4]
 910              		.loc 1 610 20
 911 000e 23F4FC52 		bic	r2, r3, #8064
 912 0012 7B68     		ldr	r3, [r7, #4]
 913 0014 5A60     		str	r2, [r3, #4]
 611:./Lib/Src/stm32f4xx_sai.c ****   /* Set new Mute value */
 612:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= (SAI_MuteCounter << 7);
 914              		.loc 1 612 14
 915 0016 7B68     		ldr	r3, [r7, #4]
 916 0018 5A68     		ldr	r2, [r3, #4]
 917              		.loc 1 612 40
 918 001a 3B68     		ldr	r3, [r7]
 919 001c DB01     		lsls	r3, r3, #7
 920              		.loc 1 612 20
 921 001e 1A43     		orrs	r2, r2, r3
 922 0020 7B68     		ldr	r3, [r7, #4]
 923 0022 5A60     		str	r2, [r3, #4]
 613:./Lib/Src/stm32f4xx_sai.c **** }
 924              		.loc 1 613 1
 925 0024 00BF     		nop
 926 0026 0C37     		adds	r7, r7, #12
 927              		.cfi_def_cfa_offset 4
 928 0028 BD46     		mov	sp, r7
 929              		.cfi_def_cfa_register 13
 930              		@ sp needed
 931 002a 5DF8047B 		ldr	r7, [sp], #4
 932              		.cfi_restore 7
 933              		.cfi_def_cfa_offset 0
 934 002e 7047     		bx	lr
ARM GAS  /tmp/ccrcbWwJ.s 			page 28


 935              		.cfi_endproc
 936              	.LFE136:
 938              		.section	.text.SAI_FlushFIFO,"ax",%progbits
 939              		.align	1
 940              		.global	SAI_FlushFIFO
 941              		.syntax unified
 942              		.thumb
 943              		.thumb_func
 945              	SAI_FlushFIFO:
 946              	.LFB137:
 614:./Lib/Src/stm32f4xx_sai.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||
 615:./Lib/Src/stm32f4xx_sai.c ****     defined(STM32F469_479xx) || defined(STM32F413_423xx) || defined(STM32F446xx)
 616:./Lib/Src/stm32f4xx_sai.c **** /**
 617:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Configure SAI Block synchronization mode 
 618:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_InitStruct: pointer to a SAI_InitTypeDef structure that
 619:./Lib/Src/stm32f4xx_sai.c ****   *         contains the configuration information for the specified SAI Block peripheral.
 620:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAIx: To select the SAIx peripheral, where x can be the different instances
 621:./Lib/Src/stm32f4xx_sai.c ****   * @retval None 
 622:./Lib/Src/stm32f4xx_sai.c ****   */
 623:./Lib/Src/stm32f4xx_sai.c **** void SAI_BlockSynchroConfig(SAI_InitTypeDef* SAI_InitStruct, SAI_TypeDef* SAIx)
 624:./Lib/Src/stm32f4xx_sai.c **** {
 625:./Lib/Src/stm32f4xx_sai.c ****   uint32_t tmpregisterGCR = 0U;
 626:./Lib/Src/stm32f4xx_sai.c **** 
 627:./Lib/Src/stm32f4xx_sai.c **** #if defined(STM32F446xx)  
 628:./Lib/Src/stm32f4xx_sai.c ****   /* This setting must be done with both audio block (A & B) disabled         */
 629:./Lib/Src/stm32f4xx_sai.c ****   switch(SAI_InitStruct->SAI_SynchroExt)
 630:./Lib/Src/stm32f4xx_sai.c ****   {
 631:./Lib/Src/stm32f4xx_sai.c ****   case SAI_SyncExt_Disable :
 632:./Lib/Src/stm32f4xx_sai.c ****     tmpregisterGCR = 0U;
 633:./Lib/Src/stm32f4xx_sai.c ****     break;
 634:./Lib/Src/stm32f4xx_sai.c ****   case SAI_SyncExt_OutBlockA_Enable :
 635:./Lib/Src/stm32f4xx_sai.c ****     tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 636:./Lib/Src/stm32f4xx_sai.c ****     break;
 637:./Lib/Src/stm32f4xx_sai.c ****   case SAI_SyncExt_OutBlockB_Enable :
 638:./Lib/Src/stm32f4xx_sai.c ****     tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 639:./Lib/Src/stm32f4xx_sai.c ****     break;
 640:./Lib/Src/stm32f4xx_sai.c ****   default:
 641:./Lib/Src/stm32f4xx_sai.c ****     break;
 642:./Lib/Src/stm32f4xx_sai.c ****   }
 643:./Lib/Src/stm32f4xx_sai.c **** 
 644:./Lib/Src/stm32f4xx_sai.c ****   if(((SAI_InitStruct->SAI_Synchro) == SAI_Synchronous_Ext) && (SAIx == SAI1))
 645:./Lib/Src/stm32f4xx_sai.c ****   {
 646:./Lib/Src/stm32f4xx_sai.c ****     tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 647:./Lib/Src/stm32f4xx_sai.c ****   }
 648:./Lib/Src/stm32f4xx_sai.c ****   
 649:./Lib/Src/stm32f4xx_sai.c ****   if(SAIx == SAI1)
 650:./Lib/Src/stm32f4xx_sai.c ****   {
 651:./Lib/Src/stm32f4xx_sai.c ****    SAI1->GCR = tmpregisterGCR;
 652:./Lib/Src/stm32f4xx_sai.c ****   }
 653:./Lib/Src/stm32f4xx_sai.c ****   else
 654:./Lib/Src/stm32f4xx_sai.c ****   {
 655:./Lib/Src/stm32f4xx_sai.c ****    SAI2->GCR = tmpregisterGCR; 
 656:./Lib/Src/stm32f4xx_sai.c ****   }
 657:./Lib/Src/stm32f4xx_sai.c **** 
 658:./Lib/Src/stm32f4xx_sai.c **** #endif /* STM32F446xx */
 659:./Lib/Src/stm32f4xx_sai.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||
 660:./Lib/Src/stm32f4xx_sai.c ****     defined(STM32F469_479xx) || defined(STM32F413_423xx)
ARM GAS  /tmp/ccrcbWwJ.s 			page 29


 661:./Lib/Src/stm32f4xx_sai.c ****   /* This setting must be done with both audio block (A & B) disabled         */
 662:./Lib/Src/stm32f4xx_sai.c ****   switch(SAI_InitStruct->SAI_SynchroExt)
 663:./Lib/Src/stm32f4xx_sai.c ****   {
 664:./Lib/Src/stm32f4xx_sai.c ****   case SAI_SyncExt_Disable :
 665:./Lib/Src/stm32f4xx_sai.c ****     tmpregisterGCR = 0U;
 666:./Lib/Src/stm32f4xx_sai.c ****     break;
 667:./Lib/Src/stm32f4xx_sai.c ****   case SAI_SyncExt_OutBlockA_Enable :
 668:./Lib/Src/stm32f4xx_sai.c ****     tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 669:./Lib/Src/stm32f4xx_sai.c ****     break;
 670:./Lib/Src/stm32f4xx_sai.c ****   case SAI_SyncExt_OutBlockB_Enable :
 671:./Lib/Src/stm32f4xx_sai.c ****     tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 672:./Lib/Src/stm32f4xx_sai.c ****     break;
 673:./Lib/Src/stm32f4xx_sai.c ****   default:
 674:./Lib/Src/stm32f4xx_sai.c ****     break;
 675:./Lib/Src/stm32f4xx_sai.c ****   }
 676:./Lib/Src/stm32f4xx_sai.c ****   SAI1->GCR = tmpregisterGCR;
 677:./Lib/Src/stm32f4xx_sai.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469_479xx || STM32F413_
 678:./Lib/Src/stm32f4xx_sai.c **** }
 679:./Lib/Src/stm32f4xx_sai.c **** #endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469_479xx || STM32F413_
 680:./Lib/Src/stm32f4xx_sai.c **** 
 681:./Lib/Src/stm32f4xx_sai.c **** /**
 682:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Reinitialize the FIFO pointer
 683:./Lib/Src/stm32f4xx_sai.c ****   *   
 684:./Lib/Src/stm32f4xx_sai.c ****   * @note   The FIFO pointers can be reinitialized at anytime The data present 
 685:./Lib/Src/stm32f4xx_sai.c ****   *         into the FIFO, if it is not empty, will be lost. 
 686:./Lib/Src/stm32f4xx_sai.c ****   * 
 687:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 688:./Lib/Src/stm32f4xx_sai.c ****   * @param  NewState: new state of the selected SAI TI communication mode.
 689:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 690:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 691:./Lib/Src/stm32f4xx_sai.c ****   */
 692:./Lib/Src/stm32f4xx_sai.c **** void SAI_FlushFIFO(SAI_Block_TypeDef* SAI_Block_x)
 693:./Lib/Src/stm32f4xx_sai.c **** {
 947              		.loc 1 693 1
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 8
 950              		@ frame_needed = 1, uses_anonymous_args = 0
 951              		@ link register save eliminated.
 952 0000 80B4     		push	{r7}
 953              		.cfi_def_cfa_offset 4
 954              		.cfi_offset 7, -4
 955 0002 83B0     		sub	sp, sp, #12
 956              		.cfi_def_cfa_offset 16
 957 0004 00AF     		add	r7, sp, #0
 958              		.cfi_def_cfa_register 7
 959 0006 7860     		str	r0, [r7, #4]
 694:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 695:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 696:./Lib/Src/stm32f4xx_sai.c **** 
 697:./Lib/Src/stm32f4xx_sai.c ****   /* FIFO flush */
 698:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CR2 |= SAI_xCR2_FFLUSH;
 960              		.loc 1 698 14
 961 0008 7B68     		ldr	r3, [r7, #4]
 962 000a 5B68     		ldr	r3, [r3, #4]
 963              		.loc 1 698 20
 964 000c 43F00802 		orr	r2, r3, #8
 965 0010 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccrcbWwJ.s 			page 30


 966 0012 5A60     		str	r2, [r3, #4]
 699:./Lib/Src/stm32f4xx_sai.c **** }
 967              		.loc 1 699 1
 968 0014 00BF     		nop
 969 0016 0C37     		adds	r7, r7, #12
 970              		.cfi_def_cfa_offset 4
 971 0018 BD46     		mov	sp, r7
 972              		.cfi_def_cfa_register 13
 973              		@ sp needed
 974 001a 5DF8047B 		ldr	r7, [sp], #4
 975              		.cfi_restore 7
 976              		.cfi_def_cfa_offset 0
 977 001e 7047     		bx	lr
 978              		.cfi_endproc
 979              	.LFE137:
 981              		.section	.text.SAI_ReceiveData,"ax",%progbits
 982              		.align	1
 983              		.global	SAI_ReceiveData
 984              		.syntax unified
 985              		.thumb
 986              		.thumb_func
 988              	SAI_ReceiveData:
 989              	.LFB138:
 700:./Lib/Src/stm32f4xx_sai.c **** 
 701:./Lib/Src/stm32f4xx_sai.c **** /**
 702:./Lib/Src/stm32f4xx_sai.c ****   * @}
 703:./Lib/Src/stm32f4xx_sai.c ****   */
 704:./Lib/Src/stm32f4xx_sai.c **** 
 705:./Lib/Src/stm32f4xx_sai.c **** /** @defgroup SAI_Group2 Data transfers functions
 706:./Lib/Src/stm32f4xx_sai.c ****  *  @brief   Data transfers functions
 707:./Lib/Src/stm32f4xx_sai.c ****  *
 708:./Lib/Src/stm32f4xx_sai.c **** @verbatim   
 709:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================
 710:./Lib/Src/stm32f4xx_sai.c ****                        ##### Data transfers functions #####
 711:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================  
 712:./Lib/Src/stm32f4xx_sai.c ****   [..]
 713:./Lib/Src/stm32f4xx_sai.c ****   This section provides a set of functions allowing to manage the SAI data transfers.
 714:./Lib/Src/stm32f4xx_sai.c ****   [..]
 715:./Lib/Src/stm32f4xx_sai.c ****   In reception, data are received and then stored into an internal FIFO while 
 716:./Lib/Src/stm32f4xx_sai.c ****   In transmission, data are first stored into an internal FIFO before being 
 717:./Lib/Src/stm32f4xx_sai.c ****   transmitted.
 718:./Lib/Src/stm32f4xx_sai.c ****   [..]
 719:./Lib/Src/stm32f4xx_sai.c ****   The read access of the SAI_xDR register can be done using the SAI_ReceiveData()
 720:./Lib/Src/stm32f4xx_sai.c ****   function and returns the Rx buffered value. Whereas a write access to the SAI_DR 
 721:./Lib/Src/stm32f4xx_sai.c ****   can be done using SAI_SendData() function and stores the written data into 
 722:./Lib/Src/stm32f4xx_sai.c ****   Tx buffer.
 723:./Lib/Src/stm32f4xx_sai.c **** 
 724:./Lib/Src/stm32f4xx_sai.c **** @endverbatim
 725:./Lib/Src/stm32f4xx_sai.c ****   * @{
 726:./Lib/Src/stm32f4xx_sai.c ****   */
 727:./Lib/Src/stm32f4xx_sai.c **** 
 728:./Lib/Src/stm32f4xx_sai.c **** /**
 729:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Returns the most recent received data by the SAI block x peripheral. 
 730:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 731:./Lib/Src/stm32f4xx_sai.c ****   *         
 732:./Lib/Src/stm32f4xx_sai.c ****   * @retval The value of the received data.
 733:./Lib/Src/stm32f4xx_sai.c ****   */
ARM GAS  /tmp/ccrcbWwJ.s 			page 31


 734:./Lib/Src/stm32f4xx_sai.c **** uint32_t SAI_ReceiveData(SAI_Block_TypeDef* SAI_Block_x)
 735:./Lib/Src/stm32f4xx_sai.c **** {
 990              		.loc 1 735 1
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 8
 993              		@ frame_needed = 1, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995 0000 80B4     		push	{r7}
 996              		.cfi_def_cfa_offset 4
 997              		.cfi_offset 7, -4
 998 0002 83B0     		sub	sp, sp, #12
 999              		.cfi_def_cfa_offset 16
 1000 0004 00AF     		add	r7, sp, #0
 1001              		.cfi_def_cfa_register 7
 1002 0006 7860     		str	r0, [r7, #4]
 736:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 737:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 738:./Lib/Src/stm32f4xx_sai.c ****   
 739:./Lib/Src/stm32f4xx_sai.c ****   /* Return the data in the DR register */
 740:./Lib/Src/stm32f4xx_sai.c ****   return SAI_Block_x->DR;
 1003              		.loc 1 740 21
 1004 0008 7B68     		ldr	r3, [r7, #4]
 1005 000a DB69     		ldr	r3, [r3, #28]
 741:./Lib/Src/stm32f4xx_sai.c **** }
 1006              		.loc 1 741 1
 1007 000c 1846     		mov	r0, r3
 1008 000e 0C37     		adds	r7, r7, #12
 1009              		.cfi_def_cfa_offset 4
 1010 0010 BD46     		mov	sp, r7
 1011              		.cfi_def_cfa_register 13
 1012              		@ sp needed
 1013 0012 5DF8047B 		ldr	r7, [sp], #4
 1014              		.cfi_restore 7
 1015              		.cfi_def_cfa_offset 0
 1016 0016 7047     		bx	lr
 1017              		.cfi_endproc
 1018              	.LFE138:
 1020              		.section	.text.SAI_SendData,"ax",%progbits
 1021              		.align	1
 1022              		.global	SAI_SendData
 1023              		.syntax unified
 1024              		.thumb
 1025              		.thumb_func
 1027              	SAI_SendData:
 1028              	.LFB139:
 742:./Lib/Src/stm32f4xx_sai.c **** 
 743:./Lib/Src/stm32f4xx_sai.c **** /**
 744:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Transmits a Data through the SAI block x peripheral.
 745:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
 746:./Lib/Src/stm32f4xx_sai.c ****   *        
 747:./Lib/Src/stm32f4xx_sai.c ****   * @param  Data: Data to be transmitted.
 748:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 749:./Lib/Src/stm32f4xx_sai.c ****   */
 750:./Lib/Src/stm32f4xx_sai.c **** void SAI_SendData(SAI_Block_TypeDef* SAI_Block_x, uint32_t Data)
 751:./Lib/Src/stm32f4xx_sai.c **** {
 1029              		.loc 1 751 1
 1030              		.cfi_startproc
ARM GAS  /tmp/ccrcbWwJ.s 			page 32


 1031              		@ args = 0, pretend = 0, frame = 8
 1032              		@ frame_needed = 1, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 1034 0000 80B4     		push	{r7}
 1035              		.cfi_def_cfa_offset 4
 1036              		.cfi_offset 7, -4
 1037 0002 83B0     		sub	sp, sp, #12
 1038              		.cfi_def_cfa_offset 16
 1039 0004 00AF     		add	r7, sp, #0
 1040              		.cfi_def_cfa_register 7
 1041 0006 7860     		str	r0, [r7, #4]
 1042 0008 3960     		str	r1, [r7]
 752:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 753:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 754:./Lib/Src/stm32f4xx_sai.c ****   
 755:./Lib/Src/stm32f4xx_sai.c ****   /* Write in the DR register the data to be sent */
 756:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->DR = Data;
 1043              		.loc 1 756 19
 1044 000a 7B68     		ldr	r3, [r7, #4]
 1045 000c 3A68     		ldr	r2, [r7]
 1046 000e DA61     		str	r2, [r3, #28]
 757:./Lib/Src/stm32f4xx_sai.c **** }
 1047              		.loc 1 757 1
 1048 0010 00BF     		nop
 1049 0012 0C37     		adds	r7, r7, #12
 1050              		.cfi_def_cfa_offset 4
 1051 0014 BD46     		mov	sp, r7
 1052              		.cfi_def_cfa_register 13
 1053              		@ sp needed
 1054 0016 5DF8047B 		ldr	r7, [sp], #4
 1055              		.cfi_restore 7
 1056              		.cfi_def_cfa_offset 0
 1057 001a 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE139:
 1061              		.section	.text.SAI_DMACmd,"ax",%progbits
 1062              		.align	1
 1063              		.global	SAI_DMACmd
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1068              	SAI_DMACmd:
 1069              	.LFB140:
 758:./Lib/Src/stm32f4xx_sai.c **** 
 759:./Lib/Src/stm32f4xx_sai.c **** /**
 760:./Lib/Src/stm32f4xx_sai.c ****   * @}
 761:./Lib/Src/stm32f4xx_sai.c ****   */
 762:./Lib/Src/stm32f4xx_sai.c **** 
 763:./Lib/Src/stm32f4xx_sai.c **** /** @defgroup SAI_Group3 DMA transfers management functions
 764:./Lib/Src/stm32f4xx_sai.c ****  *  @brief   DMA transfers management functions
 765:./Lib/Src/stm32f4xx_sai.c ****   *
 766:./Lib/Src/stm32f4xx_sai.c **** @verbatim   
 767:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================
 768:./Lib/Src/stm32f4xx_sai.c ****                   ##### DMA transfers management functions #####
 769:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================  
 770:./Lib/Src/stm32f4xx_sai.c **** 
 771:./Lib/Src/stm32f4xx_sai.c **** @endverbatim
ARM GAS  /tmp/ccrcbWwJ.s 			page 33


 772:./Lib/Src/stm32f4xx_sai.c ****   * @{
 773:./Lib/Src/stm32f4xx_sai.c ****   */
 774:./Lib/Src/stm32f4xx_sai.c **** 
 775:./Lib/Src/stm32f4xx_sai.c **** /**
 776:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Enables or disables the SAI Block x DMA interface.
 777:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 778:./Lib/Src/stm32f4xx_sai.c ****   * @param  NewState: new state of the selected SAI block DMA transfer request.
 779:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 780:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 781:./Lib/Src/stm32f4xx_sai.c ****   */
 782:./Lib/Src/stm32f4xx_sai.c **** void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState)
 783:./Lib/Src/stm32f4xx_sai.c **** {
 1070              		.loc 1 783 1
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 8
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075 0000 80B4     		push	{r7}
 1076              		.cfi_def_cfa_offset 4
 1077              		.cfi_offset 7, -4
 1078 0002 83B0     		sub	sp, sp, #12
 1079              		.cfi_def_cfa_offset 16
 1080 0004 00AF     		add	r7, sp, #0
 1081              		.cfi_def_cfa_register 7
 1082 0006 7860     		str	r0, [r7, #4]
 1083 0008 0B46     		mov	r3, r1
 1084 000a FB70     		strb	r3, [r7, #3]
 784:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 785:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 786:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 787:./Lib/Src/stm32f4xx_sai.c ****   
 788:./Lib/Src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 1085              		.loc 1 788 6
 1086 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1087 000e 002B     		cmp	r3, #0
 1088 0010 06D0     		beq	.L34
 789:./Lib/Src/stm32f4xx_sai.c ****   {
 790:./Lib/Src/stm32f4xx_sai.c ****     /* Enable the selected SAI block mute mode */
 791:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 |= SAI_xCR1_DMAEN;
 1089              		.loc 1 791 16
 1090 0012 7B68     		ldr	r3, [r7, #4]
 1091 0014 1B68     		ldr	r3, [r3]
 1092              		.loc 1 791 22
 1093 0016 43F40032 		orr	r2, r3, #131072
 1094 001a 7B68     		ldr	r3, [r7, #4]
 1095 001c 1A60     		str	r2, [r3]
 792:./Lib/Src/stm32f4xx_sai.c ****   }
 793:./Lib/Src/stm32f4xx_sai.c ****   else
 794:./Lib/Src/stm32f4xx_sai.c ****   {
 795:./Lib/Src/stm32f4xx_sai.c ****     /* Disable the selected SAI SS output */
 796:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->CR1 &= ~(SAI_xCR1_DMAEN);
 797:./Lib/Src/stm32f4xx_sai.c ****   }
 798:./Lib/Src/stm32f4xx_sai.c **** }
 1096              		.loc 1 798 1
 1097 001e 05E0     		b	.L36
 1098              	.L34:
 796:./Lib/Src/stm32f4xx_sai.c ****   }
ARM GAS  /tmp/ccrcbWwJ.s 			page 34


 1099              		.loc 1 796 16
 1100 0020 7B68     		ldr	r3, [r7, #4]
 1101 0022 1B68     		ldr	r3, [r3]
 796:./Lib/Src/stm32f4xx_sai.c ****   }
 1102              		.loc 1 796 22
 1103 0024 23F40032 		bic	r2, r3, #131072
 1104 0028 7B68     		ldr	r3, [r7, #4]
 1105 002a 1A60     		str	r2, [r3]
 1106              	.L36:
 1107              		.loc 1 798 1
 1108 002c 00BF     		nop
 1109 002e 0C37     		adds	r7, r7, #12
 1110              		.cfi_def_cfa_offset 4
 1111 0030 BD46     		mov	sp, r7
 1112              		.cfi_def_cfa_register 13
 1113              		@ sp needed
 1114 0032 5DF8047B 		ldr	r7, [sp], #4
 1115              		.cfi_restore 7
 1116              		.cfi_def_cfa_offset 0
 1117 0036 7047     		bx	lr
 1118              		.cfi_endproc
 1119              	.LFE140:
 1121              		.section	.text.SAI_ITConfig,"ax",%progbits
 1122              		.align	1
 1123              		.global	SAI_ITConfig
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1128              	SAI_ITConfig:
 1129              	.LFB141:
 799:./Lib/Src/stm32f4xx_sai.c **** 
 800:./Lib/Src/stm32f4xx_sai.c **** /**
 801:./Lib/Src/stm32f4xx_sai.c ****   * @}
 802:./Lib/Src/stm32f4xx_sai.c ****   */
 803:./Lib/Src/stm32f4xx_sai.c **** 
 804:./Lib/Src/stm32f4xx_sai.c **** /** @defgroup SAI_Group4 Interrupts and flags management functions
 805:./Lib/Src/stm32f4xx_sai.c ****  *  @brief   Interrupts and flags management functions
 806:./Lib/Src/stm32f4xx_sai.c ****   *
 807:./Lib/Src/stm32f4xx_sai.c **** @verbatim   
 808:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================
 809:./Lib/Src/stm32f4xx_sai.c ****             ##### Interrupts and flags management functions #####
 810:./Lib/Src/stm32f4xx_sai.c ****  ===============================================================================  
 811:./Lib/Src/stm32f4xx_sai.c ****   [..]
 812:./Lib/Src/stm32f4xx_sai.c ****   This section provides a set of functions allowing to configure the SAI Interrupts 
 813:./Lib/Src/stm32f4xx_sai.c ****   sources and check or clear the flags or pending bits status.
 814:./Lib/Src/stm32f4xx_sai.c ****   The user should identify which mode will be used in his application to manage 
 815:./Lib/Src/stm32f4xx_sai.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 816:./Lib/Src/stm32f4xx_sai.c ****     
 817:./Lib/Src/stm32f4xx_sai.c ****   *** Polling Mode ***
 818:./Lib/Src/stm32f4xx_sai.c ****   ====================
 819:./Lib/Src/stm32f4xx_sai.c ****   [..]
 820:./Lib/Src/stm32f4xx_sai.c ****   In Polling Mode, the SAI communication can be managed by 7 flags:
 821:./Lib/Src/stm32f4xx_sai.c ****      (#) SAI_FLAG_FREQ : to indicate if there is a FIFO Request to write or to read.
 822:./Lib/Src/stm32f4xx_sai.c ****      (#) SAI_FLAG_MUTEDET : to indicate if a MUTE frame detected
 823:./Lib/Src/stm32f4xx_sai.c ****      (#) SAI_FLAG_OVRUDR : to indicate if an Overrun or Underrun error occur
 824:./Lib/Src/stm32f4xx_sai.c ****      (#) SAI_FLAG_AFSDET : to indicate if there is the detection of a audio frame 
 825:./Lib/Src/stm32f4xx_sai.c ****                           synchronisation (FS) earlier than expected
ARM GAS  /tmp/ccrcbWwJ.s 			page 35


 826:./Lib/Src/stm32f4xx_sai.c ****      (#) SAI_FLAG_LFSDET : to indicate if there is the detection of a audio frame 
 827:./Lib/Src/stm32f4xx_sai.c ****                           synchronisation (FS) later than expected              
 828:./Lib/Src/stm32f4xx_sai.c ****      (#) SAI_FLAG_CNRDY : to indicate if  the codec is not ready to communicate during 
 829:./Lib/Src/stm32f4xx_sai.c ****                          the reception of the TAG 0 (slot0) of the AC97 audio frame 
 830:./Lib/Src/stm32f4xx_sai.c ****      (#) SAI_FLAG_WCKCFG: to indicate if wrong clock configuration in master mode 
 831:./Lib/Src/stm32f4xx_sai.c ****                          error occurs.
 832:./Lib/Src/stm32f4xx_sai.c ****   [..]
 833:./Lib/Src/stm32f4xx_sai.c ****   In this Mode it is advised to use the following functions:
 834:./Lib/Src/stm32f4xx_sai.c ****      (+) FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG);
 835:./Lib/Src/stm32f4xx_sai.c ****      (+) void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG);
 836:./Lib/Src/stm32f4xx_sai.c **** 
 837:./Lib/Src/stm32f4xx_sai.c ****   *** Interrupt Mode ***
 838:./Lib/Src/stm32f4xx_sai.c ****   ======================
 839:./Lib/Src/stm32f4xx_sai.c ****   [..]
 840:./Lib/Src/stm32f4xx_sai.c ****   In Interrupt Mode, the SAI communication can be managed by 7 interrupt sources
 841:./Lib/Src/stm32f4xx_sai.c ****   and 7 pending bits: 
 842:./Lib/Src/stm32f4xx_sai.c ****   (+) Pending Bits:
 843:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_FREQ : to indicate if there is a FIFO Request to write or to read.
 844:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_MUTEDET : to indicate if a MUTE frame detected.
 845:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_OVRUDR : to indicate if an Overrun or Underrun error occur.
 846:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_AFSDET : to indicate if there is the detection of a audio frame 
 847:./Lib/Src/stm32f4xx_sai.c ****                           synchronisation (FS) earlier than expected.
 848:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_LFSDET : to indicate if there is the detection of a audio frame 
 849:./Lib/Src/stm32f4xx_sai.c ****                           synchronisation (FS) later than expected.              
 850:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_CNRDY : to indicate if  the codec is not ready to communicate during 
 851:./Lib/Src/stm32f4xx_sai.c ****                          the reception of the TAG 0 (slot0) of the AC97 audio frame. 
 852:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_WCKCFG: to indicate if wrong clock configuration in master mode 
 853:./Lib/Src/stm32f4xx_sai.c ****                          error occurs.
 854:./Lib/Src/stm32f4xx_sai.c **** 
 855:./Lib/Src/stm32f4xx_sai.c ****   (+) Interrupt Source:
 856:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_FREQ : specifies the interrupt source for FIFO Request.
 857:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_MUTEDET : specifies the interrupt source for MUTE frame detected.
 858:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_OVRUDR : specifies the interrupt source for overrun or underrun error.
 859:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_AFSDET : specifies the interrupt source for anticipated frame synchronization
 860:./Lib/Src/stm32f4xx_sai.c ****                           detection interrupt.
 861:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_LFSDET : specifies the interrupt source for late frame synchronization
 862:./Lib/Src/stm32f4xx_sai.c ****                           detection interrupt.             
 863:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_CNRDY : specifies the interrupt source for codec not ready interrupt
 864:./Lib/Src/stm32f4xx_sai.c ****      (##) SAI_IT_WCKCFG: specifies the interrupt source for wrong clock configuration
 865:./Lib/Src/stm32f4xx_sai.c ****                          interrupt.
 866:./Lib/Src/stm32f4xx_sai.c ****   [..]                     
 867:./Lib/Src/stm32f4xx_sai.c ****   In this Mode it is advised to use the following functions:
 868:./Lib/Src/stm32f4xx_sai.c ****      (+) void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewStat
 869:./Lib/Src/stm32f4xx_sai.c ****      (+) ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT);
 870:./Lib/Src/stm32f4xx_sai.c ****      (+) void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT);
 871:./Lib/Src/stm32f4xx_sai.c **** 
 872:./Lib/Src/stm32f4xx_sai.c ****   *** DMA Mode ***
 873:./Lib/Src/stm32f4xx_sai.c ****   ================
 874:./Lib/Src/stm32f4xx_sai.c ****   [..]
 875:./Lib/Src/stm32f4xx_sai.c ****   In DMA Mode, each SAI audio block has an independent DMA interface in order to 
 876:./Lib/Src/stm32f4xx_sai.c ****   read or to write into the SAI_xDR register (to hit the internal FIFO). 
 877:./Lib/Src/stm32f4xx_sai.c ****   There is one DMA channel by audio block following basic DMA request/acknowledge 
 878:./Lib/Src/stm32f4xx_sai.c ****   protocol.
 879:./Lib/Src/stm32f4xx_sai.c ****   [..]
 880:./Lib/Src/stm32f4xx_sai.c ****   In this Mode it is advised to use the following function:
 881:./Lib/Src/stm32f4xx_sai.c ****     (+) void SAI_DMACmd(SAI_Block_TypeDef* SAI_Block_x, FunctionalState NewState);
 882:./Lib/Src/stm32f4xx_sai.c ****   [..]
ARM GAS  /tmp/ccrcbWwJ.s 			page 36


 883:./Lib/Src/stm32f4xx_sai.c ****   This section provides also functions allowing to
 884:./Lib/Src/stm32f4xx_sai.c ****    (+) Check the SAI Block enable status
 885:./Lib/Src/stm32f4xx_sai.c ****    (+)Check the FIFO status 
 886:./Lib/Src/stm32f4xx_sai.c ****    
 887:./Lib/Src/stm32f4xx_sai.c ****   *** SAI Block Enable status ***
 888:./Lib/Src/stm32f4xx_sai.c ****   ===============================
 889:./Lib/Src/stm32f4xx_sai.c ****   [..]
 890:./Lib/Src/stm32f4xx_sai.c ****   After disabling a SAI Block, it is recommended to check (or wait until) the SAI Block 
 891:./Lib/Src/stm32f4xx_sai.c ****   is effectively disabled. If a Block is disabled while an audio frame transfer is ongoing
 892:./Lib/Src/stm32f4xx_sai.c ****   the current frame will be transferred and the block will be effectively disabled only at 
 893:./Lib/Src/stm32f4xx_sai.c ****   the end of audio frame. 
 894:./Lib/Src/stm32f4xx_sai.c ****   To monitor this state it is possible to use the following function:
 895:./Lib/Src/stm32f4xx_sai.c ****     (+) FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x); 
 896:./Lib/Src/stm32f4xx_sai.c ****  
 897:./Lib/Src/stm32f4xx_sai.c ****   *** SAI Block FIFO status ***
 898:./Lib/Src/stm32f4xx_sai.c ****   =============================
 899:./Lib/Src/stm32f4xx_sai.c ****   [..]
 900:./Lib/Src/stm32f4xx_sai.c ****   It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 901:./Lib/Src/stm32f4xx_sai.c ****   function:
 902:./Lib/Src/stm32f4xx_sai.c ****     (+) uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x);
 903:./Lib/Src/stm32f4xx_sai.c ****     
 904:./Lib/Src/stm32f4xx_sai.c **** @endverbatim
 905:./Lib/Src/stm32f4xx_sai.c ****   * @{
 906:./Lib/Src/stm32f4xx_sai.c ****   */
 907:./Lib/Src/stm32f4xx_sai.c **** 
 908:./Lib/Src/stm32f4xx_sai.c **** /**
 909:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Enables or disables the specified SAI Block interrupts.
 910:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 911:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_IT: specifies the SAI interrupt source to be enabled or disabled. 
 912:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 913:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_FREQ: FIFO Request interrupt mask
 914:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_MUTEDET: MUTE detection interrupt mask
 915:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_OVRUDR: overrun/underrun interrupt mask
 916:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_AFSDET: anticipated frame synchronization detection 
 917:./Lib/Src/stm32f4xx_sai.c ****   *                                interrupt mask  
 918:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_LFSDET: late frame synchronization detection interrupt 
 919:./Lib/Src/stm32f4xx_sai.c ****   *                                mask
 920:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_CNRDY: codec not ready interrupt mask
 921:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt mask      
 922:./Lib/Src/stm32f4xx_sai.c ****   * @param  NewState: new state of the specified SAI interrupt.
 923:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be: ENABLE or DISABLE.
 924:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
 925:./Lib/Src/stm32f4xx_sai.c ****   */
 926:./Lib/Src/stm32f4xx_sai.c **** void SAI_ITConfig(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT, FunctionalState NewState)
 927:./Lib/Src/stm32f4xx_sai.c **** { 
 1130              		.loc 1 927 1
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 16
 1133              		@ frame_needed = 1, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 1135 0000 80B4     		push	{r7}
 1136              		.cfi_def_cfa_offset 4
 1137              		.cfi_offset 7, -4
 1138 0002 85B0     		sub	sp, sp, #20
 1139              		.cfi_def_cfa_offset 24
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccrcbWwJ.s 			page 37


 1142 0006 F860     		str	r0, [r7, #12]
 1143 0008 B960     		str	r1, [r7, #8]
 1144 000a 1346     		mov	r3, r2
 1145 000c FB71     		strb	r3, [r7, #7]
 928:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 929:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 930:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 931:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
 932:./Lib/Src/stm32f4xx_sai.c **** 
 933:./Lib/Src/stm32f4xx_sai.c ****   if (NewState != DISABLE)
 1146              		.loc 1 933 6
 1147 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1148 0010 002B     		cmp	r3, #0
 1149 0012 06D0     		beq	.L38
 934:./Lib/Src/stm32f4xx_sai.c ****   {
 935:./Lib/Src/stm32f4xx_sai.c ****     /* Enable the selected SAI Block interrupt */
 936:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->IMR |= SAI_IT;
 1150              		.loc 1 936 16
 1151 0014 FB68     		ldr	r3, [r7, #12]
 1152 0016 1A69     		ldr	r2, [r3, #16]
 1153              		.loc 1 936 22
 1154 0018 BB68     		ldr	r3, [r7, #8]
 1155 001a 1A43     		orrs	r2, r2, r3
 1156 001c FB68     		ldr	r3, [r7, #12]
 1157 001e 1A61     		str	r2, [r3, #16]
 937:./Lib/Src/stm32f4xx_sai.c ****   }
 938:./Lib/Src/stm32f4xx_sai.c ****   else
 939:./Lib/Src/stm32f4xx_sai.c ****   {
 940:./Lib/Src/stm32f4xx_sai.c ****     /* Disable the selected SAI Block interrupt */
 941:./Lib/Src/stm32f4xx_sai.c ****     SAI_Block_x->IMR &= ~(SAI_IT);
 942:./Lib/Src/stm32f4xx_sai.c ****   }
 943:./Lib/Src/stm32f4xx_sai.c **** }
 1158              		.loc 1 943 1
 1159 0020 06E0     		b	.L40
 1160              	.L38:
 941:./Lib/Src/stm32f4xx_sai.c ****   }
 1161              		.loc 1 941 16
 1162 0022 FB68     		ldr	r3, [r7, #12]
 1163 0024 1A69     		ldr	r2, [r3, #16]
 941:./Lib/Src/stm32f4xx_sai.c ****   }
 1164              		.loc 1 941 25
 1165 0026 BB68     		ldr	r3, [r7, #8]
 1166 0028 DB43     		mvns	r3, r3
 941:./Lib/Src/stm32f4xx_sai.c ****   }
 1167              		.loc 1 941 22
 1168 002a 1A40     		ands	r2, r2, r3
 1169 002c FB68     		ldr	r3, [r7, #12]
 1170 002e 1A61     		str	r2, [r3, #16]
 1171              	.L40:
 1172              		.loc 1 943 1
 1173 0030 00BF     		nop
 1174 0032 1437     		adds	r7, r7, #20
 1175              		.cfi_def_cfa_offset 4
 1176 0034 BD46     		mov	sp, r7
 1177              		.cfi_def_cfa_register 13
 1178              		@ sp needed
 1179 0036 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccrcbWwJ.s 			page 38


 1180              		.cfi_restore 7
 1181              		.cfi_def_cfa_offset 0
 1182 003a 7047     		bx	lr
 1183              		.cfi_endproc
 1184              	.LFE141:
 1186              		.section	.text.SAI_GetFlagStatus,"ax",%progbits
 1187              		.align	1
 1188              		.global	SAI_GetFlagStatus
 1189              		.syntax unified
 1190              		.thumb
 1191              		.thumb_func
 1193              	SAI_GetFlagStatus:
 1194              	.LFB142:
 944:./Lib/Src/stm32f4xx_sai.c **** 
 945:./Lib/Src/stm32f4xx_sai.c **** /**
 946:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Checks whether the specified SAI block x flag is set or not.
 947:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 948:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_FLAG: specifies the SAI block flag to check. 
 949:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
 950:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_FREQ: FIFO Request flag.  
 951:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_MUTEDET: MUTE detection flag.  
 952:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_OVRUDR: overrun/underrun flag.
 953:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_WCKCFG: wrong clock configuration flag.            
 954:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_CNRDY: codec not ready flag. 
 955:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
 956:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag.
 957:./Lib/Src/stm32f4xx_sai.c ****   * @retval The new state of SAI_FLAG (SET or RESET).
 958:./Lib/Src/stm32f4xx_sai.c ****   */
 959:./Lib/Src/stm32f4xx_sai.c **** FlagStatus SAI_GetFlagStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
 960:./Lib/Src/stm32f4xx_sai.c **** {
 1195              		.loc 1 960 1
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 16
 1198              		@ frame_needed = 1, uses_anonymous_args = 0
 1199              		@ link register save eliminated.
 1200 0000 80B4     		push	{r7}
 1201              		.cfi_def_cfa_offset 4
 1202              		.cfi_offset 7, -4
 1203 0002 85B0     		sub	sp, sp, #20
 1204              		.cfi_def_cfa_offset 24
 1205 0004 00AF     		add	r7, sp, #0
 1206              		.cfi_def_cfa_register 7
 1207 0006 7860     		str	r0, [r7, #4]
 1208 0008 3960     		str	r1, [r7]
 961:./Lib/Src/stm32f4xx_sai.c ****   FlagStatus bitstatus = RESET;
 1209              		.loc 1 961 14
 1210 000a 0023     		movs	r3, #0
 1211 000c FB73     		strb	r3, [r7, #15]
 962:./Lib/Src/stm32f4xx_sai.c ****   
 963:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
 964:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
 965:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_GET_FLAG(SAI_FLAG));
 966:./Lib/Src/stm32f4xx_sai.c ****   
 967:./Lib/Src/stm32f4xx_sai.c ****   /* Check the status of the specified SAI flag */
 968:./Lib/Src/stm32f4xx_sai.c ****   if ((SAI_Block_x->SR & SAI_FLAG) != (uint32_t)RESET)
 1212              		.loc 1 968 19
 1213 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccrcbWwJ.s 			page 39


 1214 0010 5A69     		ldr	r2, [r3, #20]
 1215              		.loc 1 968 24
 1216 0012 3B68     		ldr	r3, [r7]
 1217 0014 1340     		ands	r3, r3, r2
 1218              		.loc 1 968 6
 1219 0016 002B     		cmp	r3, #0
 1220 0018 02D0     		beq	.L42
 969:./Lib/Src/stm32f4xx_sai.c ****   {
 970:./Lib/Src/stm32f4xx_sai.c ****     /* SAI_FLAG is set */
 971:./Lib/Src/stm32f4xx_sai.c ****     bitstatus = SET;
 1221              		.loc 1 971 15
 1222 001a 0123     		movs	r3, #1
 1223 001c FB73     		strb	r3, [r7, #15]
 1224 001e 01E0     		b	.L43
 1225              	.L42:
 972:./Lib/Src/stm32f4xx_sai.c ****   }
 973:./Lib/Src/stm32f4xx_sai.c ****   else
 974:./Lib/Src/stm32f4xx_sai.c ****   {
 975:./Lib/Src/stm32f4xx_sai.c ****     /* SAI_FLAG is reset */
 976:./Lib/Src/stm32f4xx_sai.c ****     bitstatus = RESET;
 1226              		.loc 1 976 15
 1227 0020 0023     		movs	r3, #0
 1228 0022 FB73     		strb	r3, [r7, #15]
 1229              	.L43:
 977:./Lib/Src/stm32f4xx_sai.c ****   }
 978:./Lib/Src/stm32f4xx_sai.c ****   /* Return the SAI_FLAG status */
 979:./Lib/Src/stm32f4xx_sai.c ****   return  bitstatus;
 1230              		.loc 1 979 11
 1231 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 980:./Lib/Src/stm32f4xx_sai.c **** }
 1232              		.loc 1 980 1
 1233 0026 1846     		mov	r0, r3
 1234 0028 1437     		adds	r7, r7, #20
 1235              		.cfi_def_cfa_offset 4
 1236 002a BD46     		mov	sp, r7
 1237              		.cfi_def_cfa_register 13
 1238              		@ sp needed
 1239 002c 5DF8047B 		ldr	r7, [sp], #4
 1240              		.cfi_restore 7
 1241              		.cfi_def_cfa_offset 0
 1242 0030 7047     		bx	lr
 1243              		.cfi_endproc
 1244              	.LFE142:
 1246              		.section	.text.SAI_ClearFlag,"ax",%progbits
 1247              		.align	1
 1248              		.global	SAI_ClearFlag
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1253              	SAI_ClearFlag:
 1254              	.LFB143:
 981:./Lib/Src/stm32f4xx_sai.c **** 
 982:./Lib/Src/stm32f4xx_sai.c **** /**
 983:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Clears the specified SAI Block x flag.
 984:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
 985:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_FLAG: specifies the SAI block flag to check. 
 986:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values: 
ARM GAS  /tmp/ccrcbWwJ.s 			page 40


 987:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_MUTEDET: MUTE detection flag.  
 988:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_OVRUDR: overrun/underrun flag.
 989:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_WCKCFG: wrong clock configuration flag.            
 990:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_CNRDY: codec not ready flag. 
 991:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_AFSDET: anticipated frame synchronization detection flag.
 992:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_FLAG_LFSDET: late frame synchronization detection flag. 
 993:./Lib/Src/stm32f4xx_sai.c ****   *  
 994:./Lib/Src/stm32f4xx_sai.c ****   * @note    FREQ (FIFO Request) flag is cleared : 
 995:./Lib/Src/stm32f4xx_sai.c ****   *          - When the audio block is transmitter and the FIFO is full or the FIFO   
 996:./Lib/Src/stm32f4xx_sai.c ****   *            has one data (one buffer mode) depending the bit FTH in the
 997:./Lib/Src/stm32f4xx_sai.c ****   *            SAI_xCR2 register.
 998:./Lib/Src/stm32f4xx_sai.c ****   *          - When the audio block is receiver and the FIFO is not empty           
 999:./Lib/Src/stm32f4xx_sai.c ****   *  
1000:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
1001:./Lib/Src/stm32f4xx_sai.c ****   */
1002:./Lib/Src/stm32f4xx_sai.c **** void SAI_ClearFlag(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_FLAG)
1003:./Lib/Src/stm32f4xx_sai.c **** {
 1255              		.loc 1 1003 1
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 8
 1258              		@ frame_needed = 1, uses_anonymous_args = 0
 1259              		@ link register save eliminated.
 1260 0000 80B4     		push	{r7}
 1261              		.cfi_def_cfa_offset 4
 1262              		.cfi_offset 7, -4
 1263 0002 83B0     		sub	sp, sp, #12
 1264              		.cfi_def_cfa_offset 16
 1265 0004 00AF     		add	r7, sp, #0
 1266              		.cfi_def_cfa_register 7
 1267 0006 7860     		str	r0, [r7, #4]
 1268 0008 3960     		str	r1, [r7]
1004:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
1005:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
1006:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CLEAR_FLAG(SAI_FLAG));
1007:./Lib/Src/stm32f4xx_sai.c ****     
1008:./Lib/Src/stm32f4xx_sai.c ****   /* Clear the selected SAI Block flag */
1009:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CLRFR |= SAI_FLAG;
 1269              		.loc 1 1009 14
 1270 000a 7B68     		ldr	r3, [r7, #4]
 1271 000c 9A69     		ldr	r2, [r3, #24]
 1272              		.loc 1 1009 22
 1273 000e 3B68     		ldr	r3, [r7]
 1274 0010 1A43     		orrs	r2, r2, r3
 1275 0012 7B68     		ldr	r3, [r7, #4]
 1276 0014 9A61     		str	r2, [r3, #24]
1010:./Lib/Src/stm32f4xx_sai.c **** }
 1277              		.loc 1 1010 1
 1278 0016 00BF     		nop
 1279 0018 0C37     		adds	r7, r7, #12
 1280              		.cfi_def_cfa_offset 4
 1281 001a BD46     		mov	sp, r7
 1282              		.cfi_def_cfa_register 13
 1283              		@ sp needed
 1284 001c 5DF8047B 		ldr	r7, [sp], #4
 1285              		.cfi_restore 7
 1286              		.cfi_def_cfa_offset 0
 1287 0020 7047     		bx	lr
ARM GAS  /tmp/ccrcbWwJ.s 			page 41


 1288              		.cfi_endproc
 1289              	.LFE143:
 1291              		.section	.text.SAI_GetITStatus,"ax",%progbits
 1292              		.align	1
 1293              		.global	SAI_GetITStatus
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1298              	SAI_GetITStatus:
 1299              	.LFB144:
1011:./Lib/Src/stm32f4xx_sai.c **** 
1012:./Lib/Src/stm32f4xx_sai.c **** /**
1013:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Checks whether the specified SAI Block x interrupt has occurred or not.
1014:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
1015:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_IT: specifies the SAI interrupt source to be enabled or disabled. 
1016:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:
1017:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_FREQ: FIFO Request interrupt 
1018:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_MUTEDET: MUTE detection interrupt 
1019:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_OVRUDR: overrun/underrun interrupt 
1020:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_AFSDET: anticipated frame synchronization detection interrupt           
1021:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_LFSDET: late frame synchronization detection interrupt                  
1022:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_CNRDY: codec not ready interrupt 
1023:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt 
1024:./Lib/Src/stm32f4xx_sai.c ****   *                
1025:./Lib/Src/stm32f4xx_sai.c ****   * @retval The new state of SAI_IT (SET or RESET).
1026:./Lib/Src/stm32f4xx_sai.c ****   */
1027:./Lib/Src/stm32f4xx_sai.c **** ITStatus SAI_GetITStatus(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
1028:./Lib/Src/stm32f4xx_sai.c **** {
 1300              		.loc 1 1028 1
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 16
 1303              		@ frame_needed = 1, uses_anonymous_args = 0
 1304              		@ link register save eliminated.
 1305 0000 80B4     		push	{r7}
 1306              		.cfi_def_cfa_offset 4
 1307              		.cfi_offset 7, -4
 1308 0002 85B0     		sub	sp, sp, #20
 1309              		.cfi_def_cfa_offset 24
 1310 0004 00AF     		add	r7, sp, #0
 1311              		.cfi_def_cfa_register 7
 1312 0006 7860     		str	r0, [r7, #4]
 1313 0008 3960     		str	r1, [r7]
1029:./Lib/Src/stm32f4xx_sai.c ****   ITStatus bitstatus = RESET;
 1314              		.loc 1 1029 12
 1315 000a 0023     		movs	r3, #0
 1316 000c FB73     		strb	r3, [r7, #15]
1030:./Lib/Src/stm32f4xx_sai.c ****   uint32_t  enablestatus = 0;
 1317              		.loc 1 1030 13
 1318 000e 0023     		movs	r3, #0
 1319 0010 BB60     		str	r3, [r7, #8]
1031:./Lib/Src/stm32f4xx_sai.c **** 
1032:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
1033:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
1034:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
1035:./Lib/Src/stm32f4xx_sai.c ****   
1036:./Lib/Src/stm32f4xx_sai.c ****   /* Get the SAI_IT enable bit status */
1037:./Lib/Src/stm32f4xx_sai.c ****   enablestatus = (SAI_Block_x->IMR & SAI_IT) ;
ARM GAS  /tmp/ccrcbWwJ.s 			page 42


 1320              		.loc 1 1037 30
 1321 0012 7B68     		ldr	r3, [r7, #4]
 1322 0014 1B69     		ldr	r3, [r3, #16]
 1323              		.loc 1 1037 16
 1324 0016 3A68     		ldr	r2, [r7]
 1325 0018 1340     		ands	r3, r3, r2
 1326 001a BB60     		str	r3, [r7, #8]
1038:./Lib/Src/stm32f4xx_sai.c **** 
1039:./Lib/Src/stm32f4xx_sai.c ****   /* Check the status of the specified SAI interrupt */
1040:./Lib/Src/stm32f4xx_sai.c ****   if (((SAI_Block_x->SR & SAI_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 1327              		.loc 1 1040 20
 1328 001c 7B68     		ldr	r3, [r7, #4]
 1329 001e 5A69     		ldr	r2, [r3, #20]
 1330              		.loc 1 1040 25
 1331 0020 3B68     		ldr	r3, [r7]
 1332 0022 1340     		ands	r3, r3, r2
 1333              		.loc 1 1040 6
 1334 0024 002B     		cmp	r3, #0
 1335 0026 05D0     		beq	.L47
 1336              		.loc 1 1040 55 discriminator 1
 1337 0028 BB68     		ldr	r3, [r7, #8]
 1338 002a 002B     		cmp	r3, #0
 1339 002c 02D0     		beq	.L47
1041:./Lib/Src/stm32f4xx_sai.c ****   {
1042:./Lib/Src/stm32f4xx_sai.c ****     /* SAI_IT is set */
1043:./Lib/Src/stm32f4xx_sai.c ****     bitstatus = SET;
 1340              		.loc 1 1043 15
 1341 002e 0123     		movs	r3, #1
 1342 0030 FB73     		strb	r3, [r7, #15]
 1343 0032 01E0     		b	.L48
 1344              	.L47:
1044:./Lib/Src/stm32f4xx_sai.c ****   }
1045:./Lib/Src/stm32f4xx_sai.c ****   else
1046:./Lib/Src/stm32f4xx_sai.c ****   {
1047:./Lib/Src/stm32f4xx_sai.c ****     /* SAI_IT is reset */
1048:./Lib/Src/stm32f4xx_sai.c ****     bitstatus = RESET;
 1345              		.loc 1 1048 15
 1346 0034 0023     		movs	r3, #0
 1347 0036 FB73     		strb	r3, [r7, #15]
 1348              	.L48:
1049:./Lib/Src/stm32f4xx_sai.c ****   }
1050:./Lib/Src/stm32f4xx_sai.c ****   /* Return the SAI_IT status */
1051:./Lib/Src/stm32f4xx_sai.c ****   return bitstatus;
 1349              		.loc 1 1051 10
 1350 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1052:./Lib/Src/stm32f4xx_sai.c **** }
 1351              		.loc 1 1052 1
 1352 003a 1846     		mov	r0, r3
 1353 003c 1437     		adds	r7, r7, #20
 1354              		.cfi_def_cfa_offset 4
 1355 003e BD46     		mov	sp, r7
 1356              		.cfi_def_cfa_register 13
 1357              		@ sp needed
 1358 0040 5DF8047B 		ldr	r7, [sp], #4
 1359              		.cfi_restore 7
 1360              		.cfi_def_cfa_offset 0
 1361 0044 7047     		bx	lr
ARM GAS  /tmp/ccrcbWwJ.s 			page 43


 1362              		.cfi_endproc
 1363              	.LFE144:
 1365              		.section	.text.SAI_ClearITPendingBit,"ax",%progbits
 1366              		.align	1
 1367              		.global	SAI_ClearITPendingBit
 1368              		.syntax unified
 1369              		.thumb
 1370              		.thumb_func
 1372              	SAI_ClearITPendingBit:
 1373              	.LFB145:
1053:./Lib/Src/stm32f4xx_sai.c **** 
1054:./Lib/Src/stm32f4xx_sai.c **** /**
1055:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Clears the SAI Block x interrupt pending bit.
1056:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral. 
1057:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_IT: specifies the SAI Block interrupt pending bit to clear. 
1058:./Lib/Src/stm32f4xx_sai.c ****   *          This parameter can be one of the following values:  
1059:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_MUTEDET: MUTE detection interrupt.  
1060:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_OVRUDR: overrun/underrun interrupt.
1061:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_WCKCFG: wrong clock configuration interrupt.            
1062:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_CNRDY: codec not ready interrupt. 
1063:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_AFSDET: anticipated frame synchronization detection interrupt.
1064:./Lib/Src/stm32f4xx_sai.c ****   *            @arg SAI_IT_LFSDET: late frame synchronization detection interrupt. 
1065:./Lib/Src/stm32f4xx_sai.c ****   *  
1066:./Lib/Src/stm32f4xx_sai.c ****   * @note    FREQ (FIFO Request) flag is cleared : 
1067:./Lib/Src/stm32f4xx_sai.c ****   *          - When the audio block is transmitter and the FIFO is full or the FIFO   
1068:./Lib/Src/stm32f4xx_sai.c ****   *            has one data (one buffer mode) depending the bit FTH in the
1069:./Lib/Src/stm32f4xx_sai.c ****   *            SAI_xCR2 register.
1070:./Lib/Src/stm32f4xx_sai.c ****   *          - When the audio block is receiver and the FIFO is not empty  
1071:./Lib/Src/stm32f4xx_sai.c ****   *            
1072:./Lib/Src/stm32f4xx_sai.c ****   * @retval None
1073:./Lib/Src/stm32f4xx_sai.c ****   */
1074:./Lib/Src/stm32f4xx_sai.c **** void SAI_ClearITPendingBit(SAI_Block_TypeDef* SAI_Block_x, uint32_t SAI_IT)
1075:./Lib/Src/stm32f4xx_sai.c **** {
 1374              		.loc 1 1075 1
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 8
 1377              		@ frame_needed = 1, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 1379 0000 80B4     		push	{r7}
 1380              		.cfi_def_cfa_offset 4
 1381              		.cfi_offset 7, -4
 1382 0002 83B0     		sub	sp, sp, #12
 1383              		.cfi_def_cfa_offset 16
 1384 0004 00AF     		add	r7, sp, #0
 1385              		.cfi_def_cfa_register 7
 1386 0006 7860     		str	r0, [r7, #4]
 1387 0008 3960     		str	r1, [r7]
1076:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
1077:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
1078:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_CONFIG_IT(SAI_IT));
1079:./Lib/Src/stm32f4xx_sai.c **** 
1080:./Lib/Src/stm32f4xx_sai.c ****   /* Clear the selected SAI Block x interrupt pending bit */
1081:./Lib/Src/stm32f4xx_sai.c ****   SAI_Block_x->CLRFR |= SAI_IT; 
 1388              		.loc 1 1081 14
 1389 000a 7B68     		ldr	r3, [r7, #4]
 1390 000c 9A69     		ldr	r2, [r3, #24]
 1391              		.loc 1 1081 22
ARM GAS  /tmp/ccrcbWwJ.s 			page 44


 1392 000e 3B68     		ldr	r3, [r7]
 1393 0010 1A43     		orrs	r2, r2, r3
 1394 0012 7B68     		ldr	r3, [r7, #4]
 1395 0014 9A61     		str	r2, [r3, #24]
1082:./Lib/Src/stm32f4xx_sai.c **** }
 1396              		.loc 1 1082 1
 1397 0016 00BF     		nop
 1398 0018 0C37     		adds	r7, r7, #12
 1399              		.cfi_def_cfa_offset 4
 1400 001a BD46     		mov	sp, r7
 1401              		.cfi_def_cfa_register 13
 1402              		@ sp needed
 1403 001c 5DF8047B 		ldr	r7, [sp], #4
 1404              		.cfi_restore 7
 1405              		.cfi_def_cfa_offset 0
 1406 0020 7047     		bx	lr
 1407              		.cfi_endproc
 1408              	.LFE145:
 1410              		.section	.text.SAI_GetCmdStatus,"ax",%progbits
 1411              		.align	1
 1412              		.global	SAI_GetCmdStatus
 1413              		.syntax unified
 1414              		.thumb
 1415              		.thumb_func
 1417              	SAI_GetCmdStatus:
 1418              	.LFB146:
1083:./Lib/Src/stm32f4xx_sai.c **** 
1084:./Lib/Src/stm32f4xx_sai.c **** /**
1085:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Returns the status of EN bit for the specified SAI Block x.
1086:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
1087:./Lib/Src/stm32f4xx_sai.c ****   *   
1088:./Lib/Src/stm32f4xx_sai.c ****   * @note    After disabling a SAI Block, it is recommended to check (or wait until) 
1089:./Lib/Src/stm32f4xx_sai.c ****   *          the SAI Block is effectively disabled. If a Block is disabled while
1090:./Lib/Src/stm32f4xx_sai.c ****   *          an audio frame transfer is ongoing, the current frame will be 
1091:./Lib/Src/stm32f4xx_sai.c ****   *          transferred and the block will be effectively disabled only at 
1092:./Lib/Src/stm32f4xx_sai.c ****   *          the end of audio frame.  
1093:./Lib/Src/stm32f4xx_sai.c ****   *      
1094:./Lib/Src/stm32f4xx_sai.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
1095:./Lib/Src/stm32f4xx_sai.c ****   */
1096:./Lib/Src/stm32f4xx_sai.c **** FunctionalState SAI_GetCmdStatus(SAI_Block_TypeDef* SAI_Block_x)
1097:./Lib/Src/stm32f4xx_sai.c **** {
 1419              		.loc 1 1097 1
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 16
 1422              		@ frame_needed = 1, uses_anonymous_args = 0
 1423              		@ link register save eliminated.
 1424 0000 80B4     		push	{r7}
 1425              		.cfi_def_cfa_offset 4
 1426              		.cfi_offset 7, -4
 1427 0002 85B0     		sub	sp, sp, #20
 1428              		.cfi_def_cfa_offset 24
 1429 0004 00AF     		add	r7, sp, #0
 1430              		.cfi_def_cfa_register 7
 1431 0006 7860     		str	r0, [r7, #4]
1098:./Lib/Src/stm32f4xx_sai.c ****   FunctionalState state = DISABLE;
 1432              		.loc 1 1098 19
 1433 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccrcbWwJ.s 			page 45


 1434 000a FB73     		strb	r3, [r7, #15]
1099:./Lib/Src/stm32f4xx_sai.c **** 
1100:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
1101:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
1102:./Lib/Src/stm32f4xx_sai.c ****   if ((SAI_Block_x->CR1 & (uint32_t)SAI_xCR1_SAIEN) != 0)
 1435              		.loc 1 1102 19
 1436 000c 7B68     		ldr	r3, [r7, #4]
 1437 000e 1B68     		ldr	r3, [r3]
 1438              		.loc 1 1102 25
 1439 0010 03F48033 		and	r3, r3, #65536
 1440              		.loc 1 1102 6
 1441 0014 002B     		cmp	r3, #0
 1442 0016 02D0     		beq	.L52
1103:./Lib/Src/stm32f4xx_sai.c ****   {
1104:./Lib/Src/stm32f4xx_sai.c ****     /* The selected SAI Block x EN bit is set (audio frame transfer is ongoing) */
1105:./Lib/Src/stm32f4xx_sai.c ****     state = ENABLE;
 1443              		.loc 1 1105 11
 1444 0018 0123     		movs	r3, #1
 1445 001a FB73     		strb	r3, [r7, #15]
 1446 001c 01E0     		b	.L53
 1447              	.L52:
1106:./Lib/Src/stm32f4xx_sai.c ****   }
1107:./Lib/Src/stm32f4xx_sai.c ****   else
1108:./Lib/Src/stm32f4xx_sai.c ****   {
1109:./Lib/Src/stm32f4xx_sai.c ****     /* The selected SAI Block x EN bit is cleared (SAI Block is disabled and 
1110:./Lib/Src/stm32f4xx_sai.c ****         all transfers are complete) */
1111:./Lib/Src/stm32f4xx_sai.c ****     state = DISABLE;
 1448              		.loc 1 1111 11
 1449 001e 0023     		movs	r3, #0
 1450 0020 FB73     		strb	r3, [r7, #15]
 1451              	.L53:
1112:./Lib/Src/stm32f4xx_sai.c ****   }
1113:./Lib/Src/stm32f4xx_sai.c ****   return state;
 1452              		.loc 1 1113 10
 1453 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1114:./Lib/Src/stm32f4xx_sai.c **** }
 1454              		.loc 1 1114 1
 1455 0024 1846     		mov	r0, r3
 1456 0026 1437     		adds	r7, r7, #20
 1457              		.cfi_def_cfa_offset 4
 1458 0028 BD46     		mov	sp, r7
 1459              		.cfi_def_cfa_register 13
 1460              		@ sp needed
 1461 002a 5DF8047B 		ldr	r7, [sp], #4
 1462              		.cfi_restore 7
 1463              		.cfi_def_cfa_offset 0
 1464 002e 7047     		bx	lr
 1465              		.cfi_endproc
 1466              	.LFE146:
 1468              		.section	.text.SAI_GetFIFOStatus,"ax",%progbits
 1469              		.align	1
 1470              		.global	SAI_GetFIFOStatus
 1471              		.syntax unified
 1472              		.thumb
 1473              		.thumb_func
 1475              	SAI_GetFIFOStatus:
 1476              	.LFB147:
ARM GAS  /tmp/ccrcbWwJ.s 			page 46


1115:./Lib/Src/stm32f4xx_sai.c **** 
1116:./Lib/Src/stm32f4xx_sai.c **** /**
1117:./Lib/Src/stm32f4xx_sai.c ****   * @brief  Returns the current SAI Block x FIFO filled level.
1118:./Lib/Src/stm32f4xx_sai.c ****   * @param  SAI_Block_x: where x can be A or B to select the SAI Block peripheral.
1119:./Lib/Src/stm32f4xx_sai.c ****   *   
1120:./Lib/Src/stm32f4xx_sai.c ****   * @retval The FIFO filling state.
1121:./Lib/Src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_Empty: when FIFO is empty  
1122:./Lib/Src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
1123:./Lib/Src/stm32f4xx_sai.c ****   *                                               and not empty.
1124:./Lib/Src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
1125:./Lib/Src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_HalfFull: if more than 1 half-full.
1126:./Lib/Src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
1127:./Lib/Src/stm32f4xx_sai.c ****   *           - SAI_FIFOStatus_Full: when FIFO is full
1128:./Lib/Src/stm32f4xx_sai.c ****   */
1129:./Lib/Src/stm32f4xx_sai.c **** uint32_t SAI_GetFIFOStatus(SAI_Block_TypeDef* SAI_Block_x)
1130:./Lib/Src/stm32f4xx_sai.c **** {
 1477              		.loc 1 1130 1
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 16
 1480              		@ frame_needed = 1, uses_anonymous_args = 0
 1481              		@ link register save eliminated.
 1482 0000 80B4     		push	{r7}
 1483              		.cfi_def_cfa_offset 4
 1484              		.cfi_offset 7, -4
 1485 0002 85B0     		sub	sp, sp, #20
 1486              		.cfi_def_cfa_offset 24
 1487 0004 00AF     		add	r7, sp, #0
 1488              		.cfi_def_cfa_register 7
 1489 0006 7860     		str	r0, [r7, #4]
1131:./Lib/Src/stm32f4xx_sai.c ****   uint32_t tmpreg = 0;
 1490              		.loc 1 1131 12
 1491 0008 0023     		movs	r3, #0
 1492 000a FB60     		str	r3, [r7, #12]
1132:./Lib/Src/stm32f4xx_sai.c ****  
1133:./Lib/Src/stm32f4xx_sai.c ****   /* Check the parameters */
1134:./Lib/Src/stm32f4xx_sai.c ****   assert_param(IS_SAI_BLOCK_PERIPH(SAI_Block_x));
1135:./Lib/Src/stm32f4xx_sai.c ****   
1136:./Lib/Src/stm32f4xx_sai.c ****   /* Get the FIFO level bits */
1137:./Lib/Src/stm32f4xx_sai.c ****   tmpreg = (uint32_t)((SAI_Block_x->SR & SAI_xSR_FLVL));
 1493              		.loc 1 1137 35
 1494 000c 7B68     		ldr	r3, [r7, #4]
 1495 000e 5B69     		ldr	r3, [r3, #20]
 1496              		.loc 1 1137 10
 1497 0010 03F4E023 		and	r3, r3, #458752
 1498 0014 FB60     		str	r3, [r7, #12]
1138:./Lib/Src/stm32f4xx_sai.c ****   
1139:./Lib/Src/stm32f4xx_sai.c ****   return tmpreg;
 1499              		.loc 1 1139 10
 1500 0016 FB68     		ldr	r3, [r7, #12]
1140:./Lib/Src/stm32f4xx_sai.c **** }
 1501              		.loc 1 1140 1
 1502 0018 1846     		mov	r0, r3
 1503 001a 1437     		adds	r7, r7, #20
 1504              		.cfi_def_cfa_offset 4
 1505 001c BD46     		mov	sp, r7
 1506              		.cfi_def_cfa_register 13
 1507              		@ sp needed
ARM GAS  /tmp/ccrcbWwJ.s 			page 47


 1508 001e 5DF8047B 		ldr	r7, [sp], #4
 1509              		.cfi_restore 7
 1510              		.cfi_def_cfa_offset 0
 1511 0022 7047     		bx	lr
 1512              		.cfi_endproc
 1513              	.LFE147:
 1515              		.text
 1516              	.Letext0:
 1517              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 1518              		.file 3 "./Start/stm32f4xx.h"
 1519              		.file 4 "./Lib/inc/stm32f4xx_sai.h"
 1520              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccrcbWwJ.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_sai.c
     /tmp/ccrcbWwJ.s:21     .text.SAI_DeInit:0000000000000000 $t
     /tmp/ccrcbWwJ.s:27     .text.SAI_DeInit:0000000000000000 SAI_DeInit
     /tmp/ccrcbWwJ.s:67     .text.SAI_DeInit:000000000000002c $d
     /tmp/ccrcbWwJ.s:72     .text.SAI_Init:0000000000000000 $t
     /tmp/ccrcbWwJ.s:78     .text.SAI_Init:0000000000000000 SAI_Init
     /tmp/ccrcbWwJ.s:197    .text.SAI_Init:0000000000000090 $d
     /tmp/ccrcbWwJ.s:202    .text.SAI_FrameInit:0000000000000000 $t
     /tmp/ccrcbWwJ.s:208    .text.SAI_FrameInit:0000000000000000 SAI_FrameInit
     /tmp/ccrcbWwJ.s:287    .text.SAI_FrameInit:0000000000000058 $d
     /tmp/ccrcbWwJ.s:292    .text.SAI_SlotInit:0000000000000000 $t
     /tmp/ccrcbWwJ.s:298    .text.SAI_SlotInit:0000000000000000 SAI_SlotInit
     /tmp/ccrcbWwJ.s:371    .text.SAI_StructInit:0000000000000000 $t
     /tmp/ccrcbWwJ.s:377    .text.SAI_StructInit:0000000000000000 SAI_StructInit
     /tmp/ccrcbWwJ.s:451    .text.SAI_FrameStructInit:0000000000000000 $t
     /tmp/ccrcbWwJ.s:457    .text.SAI_FrameStructInit:0000000000000000 SAI_FrameStructInit
     /tmp/ccrcbWwJ.s:507    .text.SAI_SlotStructInit:0000000000000000 $t
     /tmp/ccrcbWwJ.s:513    .text.SAI_SlotStructInit:0000000000000000 SAI_SlotStructInit
     /tmp/ccrcbWwJ.s:559    .text.SAI_Cmd:0000000000000000 $t
     /tmp/ccrcbWwJ.s:565    .text.SAI_Cmd:0000000000000000 SAI_Cmd
     /tmp/ccrcbWwJ.s:619    .text.SAI_MonoModeConfig:0000000000000000 $t
     /tmp/ccrcbWwJ.s:625    .text.SAI_MonoModeConfig:0000000000000000 SAI_MonoModeConfig
     /tmp/ccrcbWwJ.s:670    .text.SAI_TRIStateConfig:0000000000000000 $t
     /tmp/ccrcbWwJ.s:676    .text.SAI_TRIStateConfig:0000000000000000 SAI_TRIStateConfig
     /tmp/ccrcbWwJ.s:721    .text.SAI_CompandingModeConfig:0000000000000000 $t
     /tmp/ccrcbWwJ.s:727    .text.SAI_CompandingModeConfig:0000000000000000 SAI_CompandingModeConfig
     /tmp/ccrcbWwJ.s:773    .text.SAI_MuteModeCmd:0000000000000000 $t
     /tmp/ccrcbWwJ.s:779    .text.SAI_MuteModeCmd:0000000000000000 SAI_MuteModeCmd
     /tmp/ccrcbWwJ.s:833    .text.SAI_MuteValueConfig:0000000000000000 $t
     /tmp/ccrcbWwJ.s:839    .text.SAI_MuteValueConfig:0000000000000000 SAI_MuteValueConfig
     /tmp/ccrcbWwJ.s:885    .text.SAI_MuteFrameCounterConfig:0000000000000000 $t
     /tmp/ccrcbWwJ.s:891    .text.SAI_MuteFrameCounterConfig:0000000000000000 SAI_MuteFrameCounterConfig
     /tmp/ccrcbWwJ.s:939    .text.SAI_FlushFIFO:0000000000000000 $t
     /tmp/ccrcbWwJ.s:945    .text.SAI_FlushFIFO:0000000000000000 SAI_FlushFIFO
     /tmp/ccrcbWwJ.s:982    .text.SAI_ReceiveData:0000000000000000 $t
     /tmp/ccrcbWwJ.s:988    .text.SAI_ReceiveData:0000000000000000 SAI_ReceiveData
     /tmp/ccrcbWwJ.s:1021   .text.SAI_SendData:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1027   .text.SAI_SendData:0000000000000000 SAI_SendData
     /tmp/ccrcbWwJ.s:1062   .text.SAI_DMACmd:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1068   .text.SAI_DMACmd:0000000000000000 SAI_DMACmd
     /tmp/ccrcbWwJ.s:1122   .text.SAI_ITConfig:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1128   .text.SAI_ITConfig:0000000000000000 SAI_ITConfig
     /tmp/ccrcbWwJ.s:1187   .text.SAI_GetFlagStatus:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1193   .text.SAI_GetFlagStatus:0000000000000000 SAI_GetFlagStatus
     /tmp/ccrcbWwJ.s:1247   .text.SAI_ClearFlag:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1253   .text.SAI_ClearFlag:0000000000000000 SAI_ClearFlag
     /tmp/ccrcbWwJ.s:1292   .text.SAI_GetITStatus:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1298   .text.SAI_GetITStatus:0000000000000000 SAI_GetITStatus
     /tmp/ccrcbWwJ.s:1366   .text.SAI_ClearITPendingBit:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1372   .text.SAI_ClearITPendingBit:0000000000000000 SAI_ClearITPendingBit
     /tmp/ccrcbWwJ.s:1411   .text.SAI_GetCmdStatus:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1417   .text.SAI_GetCmdStatus:0000000000000000 SAI_GetCmdStatus
     /tmp/ccrcbWwJ.s:1469   .text.SAI_GetFIFOStatus:0000000000000000 $t
     /tmp/ccrcbWwJ.s:1475   .text.SAI_GetFIFOStatus:0000000000000000 SAI_GetFIFOStatus

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccrcbWwJ.s 			page 49


RCC_APB2PeriphResetCmd
