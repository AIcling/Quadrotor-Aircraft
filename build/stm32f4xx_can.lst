ARM GAS  /tmp/cc1QyFkl.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_can.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_can.c"
  20              		.section	.text.CAN_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	CAN_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	CAN_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_can.c **** /**
   2:./Lib/Src/stm32f4xx_can.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_can.c ****   * @file    stm32f4xx_can.c
   4:./Lib/Src/stm32f4xx_can.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_can.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_can.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_can.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_can.c ****   *          functionalities of the Controller area network (CAN) peripheral:
   9:./Lib/Src/stm32f4xx_can.c ****   *           + Initialization and Configuration 
  10:./Lib/Src/stm32f4xx_can.c ****   *           + CAN Frames Transmission
  11:./Lib/Src/stm32f4xx_can.c ****   *           + CAN Frames Reception
  12:./Lib/Src/stm32f4xx_can.c ****   *           + Operation modes switch
  13:./Lib/Src/stm32f4xx_can.c ****   *           + Error management
  14:./Lib/Src/stm32f4xx_can.c ****   *           + Interrupts and flags
  15:./Lib/Src/stm32f4xx_can.c ****   *
  16:./Lib/Src/stm32f4xx_can.c **** @verbatim
  17:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
  18:./Lib/Src/stm32f4xx_can.c ****                         ##### How to use this driver #####
  19:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
  20:./Lib/Src/stm32f4xx_can.c ****     [..]
  21:./Lib/Src/stm32f4xx_can.c ****       (#) Enable the CAN controller interface clock using 
  22:./Lib/Src/stm32f4xx_can.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE); for CAN1 
  23:./Lib/Src/stm32f4xx_can.c ****           and RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2, ENABLE); for CAN2
  24:./Lib/Src/stm32f4xx_can.c ****       -@- In case you are using CAN2 only, you have to enable the CAN1 clock.
  25:./Lib/Src/stm32f4xx_can.c ****        
  26:./Lib/Src/stm32f4xx_can.c ****       (#) CAN pins configuration
  27:./Lib/Src/stm32f4xx_can.c ****         (++) Enable the clock for the CAN GPIOs using the following function:
  28:./Lib/Src/stm32f4xx_can.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  29:./Lib/Src/stm32f4xx_can.c ****         (++) Connect the involved CAN pins to AF9 using the following function 
  30:./Lib/Src/stm32f4xx_can.c ****              GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_CANx); 
ARM GAS  /tmp/cc1QyFkl.s 			page 2


  31:./Lib/Src/stm32f4xx_can.c ****         (++) Configure these CAN pins in alternate function mode by calling
  32:./Lib/Src/stm32f4xx_can.c ****              the function  GPIO_Init();
  33:./Lib/Src/stm32f4xx_can.c ****       
  34:./Lib/Src/stm32f4xx_can.c ****       (#) Initialize and configure the CAN using CAN_Init() and 
  35:./Lib/Src/stm32f4xx_can.c ****           CAN_FilterInit() functions.   
  36:./Lib/Src/stm32f4xx_can.c ****                  
  37:./Lib/Src/stm32f4xx_can.c ****       (#) Transmit the desired CAN frame using CAN_Transmit() function.
  38:./Lib/Src/stm32f4xx_can.c ****            
  39:./Lib/Src/stm32f4xx_can.c ****       (#) Check the transmission of a CAN frame using CAN_TransmitStatus()
  40:./Lib/Src/stm32f4xx_can.c ****           function.
  41:./Lib/Src/stm32f4xx_can.c ****                  
  42:./Lib/Src/stm32f4xx_can.c ****       (#) Cancel the transmission of a CAN frame using CAN_CancelTransmit()
  43:./Lib/Src/stm32f4xx_can.c ****           function.  
  44:./Lib/Src/stm32f4xx_can.c ****               
  45:./Lib/Src/stm32f4xx_can.c ****       (#) Receive a CAN frame using CAN_Receive() function.
  46:./Lib/Src/stm32f4xx_can.c ****            
  47:./Lib/Src/stm32f4xx_can.c ****       (#) Release the receive FIFOs using CAN_FIFORelease() function.
  48:./Lib/Src/stm32f4xx_can.c ****                  
  49:./Lib/Src/stm32f4xx_can.c ****       (#) Return the number of pending received frames using 
  50:./Lib/Src/stm32f4xx_can.c ****           CAN_MessagePending() function.            
  51:./Lib/Src/stm32f4xx_can.c ****                      
  52:./Lib/Src/stm32f4xx_can.c ****       (#) To control CAN events you can use one of the following two methods:
  53:./Lib/Src/stm32f4xx_can.c ****         (++) Check on CAN flags using the CAN_GetFlagStatus() function.  
  54:./Lib/Src/stm32f4xx_can.c ****         (++) Use CAN interrupts through the function CAN_ITConfig() at 
  55:./Lib/Src/stm32f4xx_can.c ****              initialization phase and CAN_GetITStatus() function into 
  56:./Lib/Src/stm32f4xx_can.c ****              interrupt routines to check if the event has occurred or not.
  57:./Lib/Src/stm32f4xx_can.c ****              After checking on a flag you should clear it using CAN_ClearFlag()
  58:./Lib/Src/stm32f4xx_can.c ****              function. And after checking on an interrupt event you should 
  59:./Lib/Src/stm32f4xx_can.c ****              clear it using CAN_ClearITPendingBit() function.            
  60:./Lib/Src/stm32f4xx_can.c **** 
  61:./Lib/Src/stm32f4xx_can.c **** @endverbatim
  62:./Lib/Src/stm32f4xx_can.c ****            
  63:./Lib/Src/stm32f4xx_can.c ****   ******************************************************************************
  64:./Lib/Src/stm32f4xx_can.c ****   * @attention
  65:./Lib/Src/stm32f4xx_can.c ****   *
  66:./Lib/Src/stm32f4xx_can.c ****   * Copyright (c) 2016 STMicroelectronics.
  67:./Lib/Src/stm32f4xx_can.c ****   * All rights reserved.
  68:./Lib/Src/stm32f4xx_can.c ****   *
  69:./Lib/Src/stm32f4xx_can.c ****   * This software is licensed under terms that can be found in the LICENSE file
  70:./Lib/Src/stm32f4xx_can.c ****   * in the root directory of this software component.
  71:./Lib/Src/stm32f4xx_can.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  72:./Lib/Src/stm32f4xx_can.c ****   *
  73:./Lib/Src/stm32f4xx_can.c ****   ******************************************************************************
  74:./Lib/Src/stm32f4xx_can.c ****   */
  75:./Lib/Src/stm32f4xx_can.c **** 
  76:./Lib/Src/stm32f4xx_can.c **** /* Includes ------------------------------------------------------------------*/
  77:./Lib/Src/stm32f4xx_can.c **** #include "stm32f4xx_can.h"
  78:./Lib/Src/stm32f4xx_can.c **** #include "stm32f4xx_rcc.h"
  79:./Lib/Src/stm32f4xx_can.c **** 
  80:./Lib/Src/stm32f4xx_can.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  81:./Lib/Src/stm32f4xx_can.c ****   * @{
  82:./Lib/Src/stm32f4xx_can.c ****   */
  83:./Lib/Src/stm32f4xx_can.c **** 
  84:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN 
  85:./Lib/Src/stm32f4xx_can.c ****   * @brief CAN driver modules
  86:./Lib/Src/stm32f4xx_can.c ****   * @{
  87:./Lib/Src/stm32f4xx_can.c ****   */ 
ARM GAS  /tmp/cc1QyFkl.s 			page 3


  88:./Lib/Src/stm32f4xx_can.c **** /* Private typedef -----------------------------------------------------------*/
  89:./Lib/Src/stm32f4xx_can.c **** /* Private define ------------------------------------------------------------*/
  90:./Lib/Src/stm32f4xx_can.c **** 
  91:./Lib/Src/stm32f4xx_can.c **** /* CAN Master Control Register bits */
  92:./Lib/Src/stm32f4xx_can.c **** #define MCR_DBF           ((uint32_t)0x00010000) /* software master reset */
  93:./Lib/Src/stm32f4xx_can.c **** 
  94:./Lib/Src/stm32f4xx_can.c **** /* CAN Mailbox Transmit Request */
  95:./Lib/Src/stm32f4xx_can.c **** #define TMIDxR_TXRQ       ((uint32_t)0x00000001) /* Transmit mailbox request */
  96:./Lib/Src/stm32f4xx_can.c **** 
  97:./Lib/Src/stm32f4xx_can.c **** /* CAN Filter Master Register bits */
  98:./Lib/Src/stm32f4xx_can.c **** #define FMR_FINIT         ((uint32_t)0x00000001) /* Filter init mode */
  99:./Lib/Src/stm32f4xx_can.c **** 
 100:./Lib/Src/stm32f4xx_can.c **** /* Time out for INAK bit */
 101:./Lib/Src/stm32f4xx_can.c **** #define INAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 102:./Lib/Src/stm32f4xx_can.c **** /* Time out for SLAK bit */
 103:./Lib/Src/stm32f4xx_can.c **** #define SLAK_TIMEOUT      ((uint32_t)0x0000FFFF)
 104:./Lib/Src/stm32f4xx_can.c **** 
 105:./Lib/Src/stm32f4xx_can.c **** /* Flags in TSR register */
 106:./Lib/Src/stm32f4xx_can.c **** #define CAN_FLAGS_TSR     ((uint32_t)0x08000000) 
 107:./Lib/Src/stm32f4xx_can.c **** /* Flags in RF1R register */
 108:./Lib/Src/stm32f4xx_can.c **** #define CAN_FLAGS_RF1R    ((uint32_t)0x04000000) 
 109:./Lib/Src/stm32f4xx_can.c **** /* Flags in RF0R register */
 110:./Lib/Src/stm32f4xx_can.c **** #define CAN_FLAGS_RF0R    ((uint32_t)0x02000000) 
 111:./Lib/Src/stm32f4xx_can.c **** /* Flags in MSR register */
 112:./Lib/Src/stm32f4xx_can.c **** #define CAN_FLAGS_MSR     ((uint32_t)0x01000000) 
 113:./Lib/Src/stm32f4xx_can.c **** /* Flags in ESR register */
 114:./Lib/Src/stm32f4xx_can.c **** #define CAN_FLAGS_ESR     ((uint32_t)0x00F00000) 
 115:./Lib/Src/stm32f4xx_can.c **** 
 116:./Lib/Src/stm32f4xx_can.c **** /* Mailboxes definition */
 117:./Lib/Src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_0   ((uint8_t)0x00)
 118:./Lib/Src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_1   ((uint8_t)0x01)
 119:./Lib/Src/stm32f4xx_can.c **** #define CAN_TXMAILBOX_2   ((uint8_t)0x02) 
 120:./Lib/Src/stm32f4xx_can.c **** 
 121:./Lib/Src/stm32f4xx_can.c **** #define CAN_MODE_MASK     ((uint32_t) 0x00000003)
 122:./Lib/Src/stm32f4xx_can.c **** 
 123:./Lib/Src/stm32f4xx_can.c **** /* Private macro -------------------------------------------------------------*/
 124:./Lib/Src/stm32f4xx_can.c **** /* Private variables ---------------------------------------------------------*/
 125:./Lib/Src/stm32f4xx_can.c **** /* Private function prototypes -----------------------------------------------*/
 126:./Lib/Src/stm32f4xx_can.c **** /* Private functions ---------------------------------------------------------*/
 127:./Lib/Src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit);
 128:./Lib/Src/stm32f4xx_can.c **** 
 129:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN_Private_Functions
 130:./Lib/Src/stm32f4xx_can.c ****   * @{
 131:./Lib/Src/stm32f4xx_can.c ****   */
 132:./Lib/Src/stm32f4xx_can.c **** 
 133:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN_Group1 Initialization and Configuration functions
 134:./Lib/Src/stm32f4xx_can.c ****  *  @brief    Initialization and Configuration functions 
 135:./Lib/Src/stm32f4xx_can.c ****  *
 136:./Lib/Src/stm32f4xx_can.c **** @verbatim    
 137:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
 138:./Lib/Src/stm32f4xx_can.c ****               ##### Initialization and Configuration functions #####
 139:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================  
 140:./Lib/Src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 141:./Lib/Src/stm32f4xx_can.c ****       (+) Initialize the CAN peripherals : Prescaler, operating mode, the maximum 
 142:./Lib/Src/stm32f4xx_can.c ****           number of time quanta to perform resynchronization, the number of time 
 143:./Lib/Src/stm32f4xx_can.c ****           quanta in Bit Segment 1 and 2 and many other modes. 
 144:./Lib/Src/stm32f4xx_can.c ****           Refer to  @ref CAN_InitTypeDef  for more details.
ARM GAS  /tmp/cc1QyFkl.s 			page 4


 145:./Lib/Src/stm32f4xx_can.c ****       (+) Configures the CAN reception filter.                                      
 146:./Lib/Src/stm32f4xx_can.c ****       (+) Select the start bank filter for slave CAN.
 147:./Lib/Src/stm32f4xx_can.c ****       (+) Enables or disables the Debug Freeze mode for CAN
 148:./Lib/Src/stm32f4xx_can.c ****       (+)Enables or disables the CAN Time Trigger Operation communication mode
 149:./Lib/Src/stm32f4xx_can.c ****    
 150:./Lib/Src/stm32f4xx_can.c **** @endverbatim
 151:./Lib/Src/stm32f4xx_can.c ****   * @{
 152:./Lib/Src/stm32f4xx_can.c ****   */
 153:./Lib/Src/stm32f4xx_can.c ****   
 154:./Lib/Src/stm32f4xx_can.c **** /**
 155:./Lib/Src/stm32f4xx_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default reset values.
 156:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 157:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 158:./Lib/Src/stm32f4xx_can.c ****   * @retval None.
 159:./Lib/Src/stm32f4xx_can.c ****   */
 160:./Lib/Src/stm32f4xx_can.c **** void CAN_DeInit(CAN_TypeDef* CANx)
 161:./Lib/Src/stm32f4xx_can.c **** {
  29              		.loc 1 161 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 162:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 163:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 164:./Lib/Src/stm32f4xx_can.c ****  
 165:./Lib/Src/stm32f4xx_can.c ****   if (CANx == CAN1)
  42              		.loc 1 165 6
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 0E4A     		ldr	r2, .L5
  45 000c 9342     		cmp	r3, r2
  46 000e 0AD1     		bne	.L2
 166:./Lib/Src/stm32f4xx_can.c ****   {
 167:./Lib/Src/stm32f4xx_can.c ****     /* Enable CAN1 reset state */
 168:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
  47              		.loc 1 168 5
  48 0010 0121     		movs	r1, #1
  49 0012 4FF00070 		mov	r0, #33554432
  50 0016 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 169:./Lib/Src/stm32f4xx_can.c ****     /* Release CAN1 from reset state */
 170:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  51              		.loc 1 170 5
  52 001a 0021     		movs	r1, #0
  53 001c 4FF00070 		mov	r0, #33554432
  54 0020 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 171:./Lib/Src/stm32f4xx_can.c ****   }
 172:./Lib/Src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 173:./Lib/Src/stm32f4xx_can.c ****   else if(CANx == CAN2)
 174:./Lib/Src/stm32f4xx_can.c ****   {  
 175:./Lib/Src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
ARM GAS  /tmp/cc1QyFkl.s 			page 5


 176:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 177:./Lib/Src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 178:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 179:./Lib/Src/stm32f4xx_can.c ****   }
 180:./Lib/Src/stm32f4xx_can.c ****   
 181:./Lib/Src/stm32f4xx_can.c ****   else /* CAN3 available only for STM32F413_423xx */
 182:./Lib/Src/stm32f4xx_can.c ****   {
 183:./Lib/Src/stm32f4xx_can.c ****     /* Enable CAN3 reset state */
 184:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, ENABLE);
 185:./Lib/Src/stm32f4xx_can.c ****     /* Release CAN3 from reset state */
 186:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, DISABLE); 
 187:./Lib/Src/stm32f4xx_can.c ****   }
 188:./Lib/Src/stm32f4xx_can.c **** #else
 189:./Lib/Src/stm32f4xx_can.c ****   else
 190:./Lib/Src/stm32f4xx_can.c ****   {
 191:./Lib/Src/stm32f4xx_can.c ****     /* Enable CAN2 reset state */
 192:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 193:./Lib/Src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
 194:./Lib/Src/stm32f4xx_can.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 195:./Lib/Src/stm32f4xx_can.c ****   }
 196:./Lib/Src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 197:./Lib/Src/stm32f4xx_can.c **** }
  55              		.loc 1 197 1
  56 0024 09E0     		b	.L4
  57              	.L2:
 192:./Lib/Src/stm32f4xx_can.c ****     /* Release CAN2 from reset state */
  58              		.loc 1 192 5
  59 0026 0121     		movs	r1, #1
  60 0028 4FF08060 		mov	r0, #67108864
  61 002c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 194:./Lib/Src/stm32f4xx_can.c ****   }
  62              		.loc 1 194 5
  63 0030 0021     		movs	r1, #0
  64 0032 4FF08060 		mov	r0, #67108864
  65 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  66              	.L4:
  67              		.loc 1 197 1
  68 003a 00BF     		nop
  69 003c 0837     		adds	r7, r7, #8
  70              		.cfi_def_cfa_offset 8
  71 003e BD46     		mov	sp, r7
  72              		.cfi_def_cfa_register 13
  73              		@ sp needed
  74 0040 80BD     		pop	{r7, pc}
  75              	.L6:
  76 0042 00BF     		.align	2
  77              	.L5:
  78 0044 00640040 		.word	1073767424
  79              		.cfi_endproc
  80              	.LFE123:
  82              		.section	.text.CAN_Init,"ax",%progbits
  83              		.align	1
  84              		.global	CAN_Init
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  89              	CAN_Init:
ARM GAS  /tmp/cc1QyFkl.s 			page 6


  90              	.LFB124:
 198:./Lib/Src/stm32f4xx_can.c **** 
 199:./Lib/Src/stm32f4xx_can.c **** /**
 200:./Lib/Src/stm32f4xx_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 201:./Lib/Src/stm32f4xx_can.c ****   *         parameters in the CAN_InitStruct.
 202:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 203:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure that contains
 204:./Lib/Src/stm32f4xx_can.c ****   *         the configuration information for the CAN peripheral.
 205:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 206:./Lib/Src/stm32f4xx_can.c ****   * @retval Constant indicates initialization succeed which will be 
 207:./Lib/Src/stm32f4xx_can.c ****   *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
 208:./Lib/Src/stm32f4xx_can.c ****   */
 209:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
 210:./Lib/Src/stm32f4xx_can.c **** {
  91              		.loc 1 210 1
  92              		.cfi_startproc
  93              		@ args = 0, pretend = 0, frame = 16
  94              		@ frame_needed = 1, uses_anonymous_args = 0
  95              		@ link register save eliminated.
  96 0000 80B4     		push	{r7}
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 7, -4
  99 0002 85B0     		sub	sp, sp, #20
 100              		.cfi_def_cfa_offset 24
 101 0004 00AF     		add	r7, sp, #0
 102              		.cfi_def_cfa_register 7
 103 0006 7860     		str	r0, [r7, #4]
 104 0008 3960     		str	r1, [r7]
 211:./Lib/Src/stm32f4xx_can.c ****   uint8_t InitStatus = CAN_InitStatus_Failed;
 105              		.loc 1 211 11
 106 000a 0023     		movs	r3, #0
 107 000c FB73     		strb	r3, [r7, #15]
 212:./Lib/Src/stm32f4xx_can.c ****   uint32_t wait_ack = 0x00000000;
 108              		.loc 1 212 12
 109 000e 0023     		movs	r3, #0
 110 0010 BB60     		str	r3, [r7, #8]
 213:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 214:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 215:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
 216:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
 217:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
 218:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
 219:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
 220:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
 221:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
 222:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
 223:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
 224:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
 225:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
 226:./Lib/Src/stm32f4xx_can.c **** 
 227:./Lib/Src/stm32f4xx_can.c ****   /* Exit from sleep mode */
 228:./Lib/Src/stm32f4xx_can.c ****   CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 111              		.loc 1 228 7
 112 0012 7B68     		ldr	r3, [r7, #4]
 113 0014 1B68     		ldr	r3, [r3]
 114              		.loc 1 228 13
 115 0016 23F00202 		bic	r2, r3, #2
ARM GAS  /tmp/cc1QyFkl.s 			page 7


 116 001a 7B68     		ldr	r3, [r7, #4]
 117 001c 1A60     		str	r2, [r3]
 229:./Lib/Src/stm32f4xx_can.c **** 
 230:./Lib/Src/stm32f4xx_can.c ****   /* Request initialisation */
 231:./Lib/Src/stm32f4xx_can.c ****   CANx->MCR |= CAN_MCR_INRQ ;
 118              		.loc 1 231 7
 119 001e 7B68     		ldr	r3, [r7, #4]
 120 0020 1B68     		ldr	r3, [r3]
 121              		.loc 1 231 13
 122 0022 43F00102 		orr	r2, r3, #1
 123 0026 7B68     		ldr	r3, [r7, #4]
 124 0028 1A60     		str	r2, [r3]
 232:./Lib/Src/stm32f4xx_can.c **** 
 233:./Lib/Src/stm32f4xx_can.c ****   /* Wait the acknowledge */
 234:./Lib/Src/stm32f4xx_can.c ****   while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 125              		.loc 1 234 9
 126 002a 02E0     		b	.L8
 127              	.L10:
 235:./Lib/Src/stm32f4xx_can.c ****   {
 236:./Lib/Src/stm32f4xx_can.c ****     wait_ack++;
 128              		.loc 1 236 13
 129 002c BB68     		ldr	r3, [r7, #8]
 130 002e 0133     		adds	r3, r3, #1
 131 0030 BB60     		str	r3, [r7, #8]
 132              	.L8:
 234:./Lib/Src/stm32f4xx_can.c ****   {
 133              		.loc 1 234 16
 134 0032 7B68     		ldr	r3, [r7, #4]
 135 0034 5B68     		ldr	r3, [r3, #4]
 234:./Lib/Src/stm32f4xx_can.c ****   {
 136              		.loc 1 234 22
 137 0036 03F00103 		and	r3, r3, #1
 234:./Lib/Src/stm32f4xx_can.c ****   {
 138              		.loc 1 234 55
 139 003a 012B     		cmp	r3, #1
 140 003c 04D0     		beq	.L9
 234:./Lib/Src/stm32f4xx_can.c ****   {
 141              		.loc 1 234 55 is_stmt 0 discriminator 1
 142 003e BB68     		ldr	r3, [r7, #8]
 143 0040 4FF6FF72 		movw	r2, #65535
 144 0044 9342     		cmp	r3, r2
 145 0046 F1D1     		bne	.L10
 146              	.L9:
 237:./Lib/Src/stm32f4xx_can.c ****   }
 238:./Lib/Src/stm32f4xx_can.c **** 
 239:./Lib/Src/stm32f4xx_can.c ****   /* Check acknowledge */
 240:./Lib/Src/stm32f4xx_can.c ****   if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 147              		.loc 1 240 12 is_stmt 1
 148 0048 7B68     		ldr	r3, [r7, #4]
 149 004a 5B68     		ldr	r3, [r3, #4]
 150              		.loc 1 240 18
 151 004c 03F00103 		and	r3, r3, #1
 152              		.loc 1 240 6
 153 0050 012B     		cmp	r3, #1
 154 0052 02D0     		beq	.L11
 241:./Lib/Src/stm32f4xx_can.c ****   {
 242:./Lib/Src/stm32f4xx_can.c ****     InitStatus = CAN_InitStatus_Failed;
ARM GAS  /tmp/cc1QyFkl.s 			page 8


 155              		.loc 1 242 16
 156 0054 0023     		movs	r3, #0
 157 0056 FB73     		strb	r3, [r7, #15]
 158 0058 9CE0     		b	.L12
 159              	.L11:
 243:./Lib/Src/stm32f4xx_can.c ****   }
 244:./Lib/Src/stm32f4xx_can.c ****   else 
 245:./Lib/Src/stm32f4xx_can.c ****   {
 246:./Lib/Src/stm32f4xx_can.c ****     /* Set the time triggered communication mode */
 247:./Lib/Src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TTCM == ENABLE)
 160              		.loc 1 247 23
 161 005a 3B68     		ldr	r3, [r7]
 162 005c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 163              		.loc 1 247 8
 164 005e 012B     		cmp	r3, #1
 165 0060 06D1     		bne	.L13
 248:./Lib/Src/stm32f4xx_can.c ****     {
 249:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TTCM;
 166              		.loc 1 249 11
 167 0062 7B68     		ldr	r3, [r7, #4]
 168 0064 1B68     		ldr	r3, [r3]
 169              		.loc 1 249 17
 170 0066 43F08002 		orr	r2, r3, #128
 171 006a 7B68     		ldr	r3, [r7, #4]
 172 006c 1A60     		str	r2, [r3]
 173 006e 05E0     		b	.L14
 174              	.L13:
 250:./Lib/Src/stm32f4xx_can.c ****     }
 251:./Lib/Src/stm32f4xx_can.c ****     else
 252:./Lib/Src/stm32f4xx_can.c ****     {
 253:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 175              		.loc 1 253 11
 176 0070 7B68     		ldr	r3, [r7, #4]
 177 0072 1B68     		ldr	r3, [r3]
 178              		.loc 1 253 17
 179 0074 23F08002 		bic	r2, r3, #128
 180 0078 7B68     		ldr	r3, [r7, #4]
 181 007a 1A60     		str	r2, [r3]
 182              	.L14:
 254:./Lib/Src/stm32f4xx_can.c ****     }
 255:./Lib/Src/stm32f4xx_can.c **** 
 256:./Lib/Src/stm32f4xx_can.c ****     /* Set the automatic bus-off management */
 257:./Lib/Src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_ABOM == ENABLE)
 183              		.loc 1 257 23
 184 007c 3B68     		ldr	r3, [r7]
 185 007e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 186              		.loc 1 257 8
 187 0080 012B     		cmp	r3, #1
 188 0082 06D1     		bne	.L15
 258:./Lib/Src/stm32f4xx_can.c ****     {
 259:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_ABOM;
 189              		.loc 1 259 11
 190 0084 7B68     		ldr	r3, [r7, #4]
 191 0086 1B68     		ldr	r3, [r3]
 192              		.loc 1 259 17
 193 0088 43F04002 		orr	r2, r3, #64
 194 008c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc1QyFkl.s 			page 9


 195 008e 1A60     		str	r2, [r3]
 196 0090 05E0     		b	.L16
 197              	.L15:
 260:./Lib/Src/stm32f4xx_can.c ****     }
 261:./Lib/Src/stm32f4xx_can.c ****     else
 262:./Lib/Src/stm32f4xx_can.c ****     {
 263:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 198              		.loc 1 263 11
 199 0092 7B68     		ldr	r3, [r7, #4]
 200 0094 1B68     		ldr	r3, [r3]
 201              		.loc 1 263 17
 202 0096 23F04002 		bic	r2, r3, #64
 203 009a 7B68     		ldr	r3, [r7, #4]
 204 009c 1A60     		str	r2, [r3]
 205              	.L16:
 264:./Lib/Src/stm32f4xx_can.c ****     }
 265:./Lib/Src/stm32f4xx_can.c **** 
 266:./Lib/Src/stm32f4xx_can.c ****     /* Set the automatic wake-up mode */
 267:./Lib/Src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_AWUM == ENABLE)
 206              		.loc 1 267 23
 207 009e 3B68     		ldr	r3, [r7]
 208 00a0 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 209              		.loc 1 267 8
 210 00a2 012B     		cmp	r3, #1
 211 00a4 06D1     		bne	.L17
 268:./Lib/Src/stm32f4xx_can.c ****     {
 269:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_AWUM;
 212              		.loc 1 269 11
 213 00a6 7B68     		ldr	r3, [r7, #4]
 214 00a8 1B68     		ldr	r3, [r3]
 215              		.loc 1 269 17
 216 00aa 43F02002 		orr	r2, r3, #32
 217 00ae 7B68     		ldr	r3, [r7, #4]
 218 00b0 1A60     		str	r2, [r3]
 219 00b2 05E0     		b	.L18
 220              	.L17:
 270:./Lib/Src/stm32f4xx_can.c ****     }
 271:./Lib/Src/stm32f4xx_can.c ****     else
 272:./Lib/Src/stm32f4xx_can.c ****     {
 273:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 221              		.loc 1 273 11
 222 00b4 7B68     		ldr	r3, [r7, #4]
 223 00b6 1B68     		ldr	r3, [r3]
 224              		.loc 1 273 17
 225 00b8 23F02002 		bic	r2, r3, #32
 226 00bc 7B68     		ldr	r3, [r7, #4]
 227 00be 1A60     		str	r2, [r3]
 228              	.L18:
 274:./Lib/Src/stm32f4xx_can.c ****     }
 275:./Lib/Src/stm32f4xx_can.c **** 
 276:./Lib/Src/stm32f4xx_can.c ****     /* Set the no automatic retransmission */
 277:./Lib/Src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_NART == ENABLE)
 229              		.loc 1 277 23
 230 00c0 3B68     		ldr	r3, [r7]
 231 00c2 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 232              		.loc 1 277 8
 233 00c4 012B     		cmp	r3, #1
ARM GAS  /tmp/cc1QyFkl.s 			page 10


 234 00c6 06D1     		bne	.L19
 278:./Lib/Src/stm32f4xx_can.c ****     {
 279:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_NART;
 235              		.loc 1 279 11
 236 00c8 7B68     		ldr	r3, [r7, #4]
 237 00ca 1B68     		ldr	r3, [r3]
 238              		.loc 1 279 17
 239 00cc 43F01002 		orr	r2, r3, #16
 240 00d0 7B68     		ldr	r3, [r7, #4]
 241 00d2 1A60     		str	r2, [r3]
 242 00d4 05E0     		b	.L20
 243              	.L19:
 280:./Lib/Src/stm32f4xx_can.c ****     }
 281:./Lib/Src/stm32f4xx_can.c ****     else
 282:./Lib/Src/stm32f4xx_can.c ****     {
 283:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 244              		.loc 1 283 11
 245 00d6 7B68     		ldr	r3, [r7, #4]
 246 00d8 1B68     		ldr	r3, [r3]
 247              		.loc 1 283 17
 248 00da 23F01002 		bic	r2, r3, #16
 249 00de 7B68     		ldr	r3, [r7, #4]
 250 00e0 1A60     		str	r2, [r3]
 251              	.L20:
 284:./Lib/Src/stm32f4xx_can.c ****     }
 285:./Lib/Src/stm32f4xx_can.c **** 
 286:./Lib/Src/stm32f4xx_can.c ****     /* Set the receive FIFO locked mode */
 287:./Lib/Src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_RFLM == ENABLE)
 252              		.loc 1 287 23
 253 00e2 3B68     		ldr	r3, [r7]
 254 00e4 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 255              		.loc 1 287 8
 256 00e6 012B     		cmp	r3, #1
 257 00e8 06D1     		bne	.L21
 288:./Lib/Src/stm32f4xx_can.c ****     {
 289:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_RFLM;
 258              		.loc 1 289 11
 259 00ea 7B68     		ldr	r3, [r7, #4]
 260 00ec 1B68     		ldr	r3, [r3]
 261              		.loc 1 289 17
 262 00ee 43F00802 		orr	r2, r3, #8
 263 00f2 7B68     		ldr	r3, [r7, #4]
 264 00f4 1A60     		str	r2, [r3]
 265 00f6 05E0     		b	.L22
 266              	.L21:
 290:./Lib/Src/stm32f4xx_can.c ****     }
 291:./Lib/Src/stm32f4xx_can.c ****     else
 292:./Lib/Src/stm32f4xx_can.c ****     {
 293:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 267              		.loc 1 293 11
 268 00f8 7B68     		ldr	r3, [r7, #4]
 269 00fa 1B68     		ldr	r3, [r3]
 270              		.loc 1 293 17
 271 00fc 23F00802 		bic	r2, r3, #8
 272 0100 7B68     		ldr	r3, [r7, #4]
 273 0102 1A60     		str	r2, [r3]
 274              	.L22:
ARM GAS  /tmp/cc1QyFkl.s 			page 11


 294:./Lib/Src/stm32f4xx_can.c ****     }
 295:./Lib/Src/stm32f4xx_can.c **** 
 296:./Lib/Src/stm32f4xx_can.c ****     /* Set the transmit FIFO priority */
 297:./Lib/Src/stm32f4xx_can.c ****     if (CAN_InitStruct->CAN_TXFP == ENABLE)
 275              		.loc 1 297 23
 276 0104 3B68     		ldr	r3, [r7]
 277 0106 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 278              		.loc 1 297 8
 279 0108 012B     		cmp	r3, #1
 280 010a 06D1     		bne	.L23
 298:./Lib/Src/stm32f4xx_can.c ****     {
 299:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR |= CAN_MCR_TXFP;
 281              		.loc 1 299 11
 282 010c 7B68     		ldr	r3, [r7, #4]
 283 010e 1B68     		ldr	r3, [r3]
 284              		.loc 1 299 17
 285 0110 43F00402 		orr	r2, r3, #4
 286 0114 7B68     		ldr	r3, [r7, #4]
 287 0116 1A60     		str	r2, [r3]
 288 0118 05E0     		b	.L24
 289              	.L23:
 300:./Lib/Src/stm32f4xx_can.c ****     }
 301:./Lib/Src/stm32f4xx_can.c ****     else
 302:./Lib/Src/stm32f4xx_can.c ****     {
 303:./Lib/Src/stm32f4xx_can.c ****       CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 290              		.loc 1 303 11
 291 011a 7B68     		ldr	r3, [r7, #4]
 292 011c 1B68     		ldr	r3, [r3]
 293              		.loc 1 303 17
 294 011e 23F00402 		bic	r2, r3, #4
 295 0122 7B68     		ldr	r3, [r7, #4]
 296 0124 1A60     		str	r2, [r3]
 297              	.L24:
 304:./Lib/Src/stm32f4xx_can.c ****     }
 305:./Lib/Src/stm32f4xx_can.c **** 
 306:./Lib/Src/stm32f4xx_can.c ****     /* Set the bit timing register */
 307:./Lib/Src/stm32f4xx_can.c ****     CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 298              		.loc 1 307 52
 299 0126 3B68     		ldr	r3, [r7]
 300 0128 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 301              		.loc 1 307 17
 302 012a 9A07     		lsls	r2, r3, #30
 308:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 303              		.loc 1 308 42
 304 012c 3B68     		ldr	r3, [r7]
 305 012e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 306              		.loc 1 308 52
 307 0130 1B06     		lsls	r3, r3, #24
 307:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 308              		.loc 1 307 70
 309 0132 1A43     		orrs	r2, r2, r3
 309:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 310              		.loc 1 309 42
 311 0134 3B68     		ldr	r3, [r7]
 312 0136 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 313              		.loc 1 309 52
 314 0138 1B04     		lsls	r3, r3, #16
ARM GAS  /tmp/cc1QyFkl.s 			page 12


 308:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 315              		.loc 1 308 59
 316 013a 1A43     		orrs	r2, r2, r3
 310:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 317              		.loc 1 310 42
 318 013c 3B68     		ldr	r3, [r7]
 319 013e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 320              		.loc 1 310 52
 321 0140 1B05     		lsls	r3, r3, #20
 309:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 322              		.loc 1 309 59
 323 0142 1A43     		orrs	r2, r2, r3
 311:./Lib/Src/stm32f4xx_can.c ****                ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 324              		.loc 1 311 41
 325 0144 3B68     		ldr	r3, [r7]
 326 0146 1B88     		ldrh	r3, [r3]
 327              		.loc 1 311 57
 328 0148 013B     		subs	r3, r3, #1
 310:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 329              		.loc 1 310 59
 330 014a 1A43     		orrs	r2, r2, r3
 307:./Lib/Src/stm32f4xx_can.c ****                 ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 331              		.loc 1 307 15
 332 014c 7B68     		ldr	r3, [r7, #4]
 333 014e DA61     		str	r2, [r3, #28]
 312:./Lib/Src/stm32f4xx_can.c **** 
 313:./Lib/Src/stm32f4xx_can.c ****     /* Request leave initialisation */
 314:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 334              		.loc 1 314 9
 335 0150 7B68     		ldr	r3, [r7, #4]
 336 0152 1B68     		ldr	r3, [r3]
 337              		.loc 1 314 15
 338 0154 23F00102 		bic	r2, r3, #1
 339 0158 7B68     		ldr	r3, [r7, #4]
 340 015a 1A60     		str	r2, [r3]
 315:./Lib/Src/stm32f4xx_can.c **** 
 316:./Lib/Src/stm32f4xx_can.c ****    /* Wait the acknowledge */
 317:./Lib/Src/stm32f4xx_can.c ****    wait_ack = 0;
 341              		.loc 1 317 13
 342 015c 0023     		movs	r3, #0
 343 015e BB60     		str	r3, [r7, #8]
 318:./Lib/Src/stm32f4xx_can.c **** 
 319:./Lib/Src/stm32f4xx_can.c ****    while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 344              		.loc 1 319 10
 345 0160 02E0     		b	.L25
 346              	.L27:
 320:./Lib/Src/stm32f4xx_can.c ****    {
 321:./Lib/Src/stm32f4xx_can.c ****      wait_ack++;
 347              		.loc 1 321 14
 348 0162 BB68     		ldr	r3, [r7, #8]
 349 0164 0133     		adds	r3, r3, #1
 350 0166 BB60     		str	r3, [r7, #8]
 351              	.L25:
 319:./Lib/Src/stm32f4xx_can.c ****    {
 352              		.loc 1 319 17
 353 0168 7B68     		ldr	r3, [r7, #4]
 354 016a 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cc1QyFkl.s 			page 13


 319:./Lib/Src/stm32f4xx_can.c ****    {
 355              		.loc 1 319 23
 356 016c 03F00103 		and	r3, r3, #1
 319:./Lib/Src/stm32f4xx_can.c ****    {
 357              		.loc 1 319 56
 358 0170 012B     		cmp	r3, #1
 359 0172 04D1     		bne	.L26
 319:./Lib/Src/stm32f4xx_can.c ****    {
 360              		.loc 1 319 56 is_stmt 0 discriminator 1
 361 0174 BB68     		ldr	r3, [r7, #8]
 362 0176 4FF6FF72 		movw	r2, #65535
 363 017a 9342     		cmp	r3, r2
 364 017c F1D1     		bne	.L27
 365              	.L26:
 322:./Lib/Src/stm32f4xx_can.c ****    }
 323:./Lib/Src/stm32f4xx_can.c **** 
 324:./Lib/Src/stm32f4xx_can.c ****     /* ...and check acknowledged */
 325:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 366              		.loc 1 325 14 is_stmt 1
 367 017e 7B68     		ldr	r3, [r7, #4]
 368 0180 5B68     		ldr	r3, [r3, #4]
 369              		.loc 1 325 20
 370 0182 03F00103 		and	r3, r3, #1
 371              		.loc 1 325 8
 372 0186 012B     		cmp	r3, #1
 373 0188 02D1     		bne	.L28
 326:./Lib/Src/stm32f4xx_can.c ****     {
 327:./Lib/Src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Failed;
 374              		.loc 1 327 18
 375 018a 0023     		movs	r3, #0
 376 018c FB73     		strb	r3, [r7, #15]
 377 018e 01E0     		b	.L12
 378              	.L28:
 328:./Lib/Src/stm32f4xx_can.c ****     }
 329:./Lib/Src/stm32f4xx_can.c ****     else
 330:./Lib/Src/stm32f4xx_can.c ****     {
 331:./Lib/Src/stm32f4xx_can.c ****       InitStatus = CAN_InitStatus_Success ;
 379              		.loc 1 331 18
 380 0190 0123     		movs	r3, #1
 381 0192 FB73     		strb	r3, [r7, #15]
 382              	.L12:
 332:./Lib/Src/stm32f4xx_can.c ****     }
 333:./Lib/Src/stm32f4xx_can.c ****   }
 334:./Lib/Src/stm32f4xx_can.c **** 
 335:./Lib/Src/stm32f4xx_can.c ****   /* At this step, return the status of initialization */
 336:./Lib/Src/stm32f4xx_can.c ****   return InitStatus;
 383              		.loc 1 336 10
 384 0194 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 337:./Lib/Src/stm32f4xx_can.c **** }
 385              		.loc 1 337 1
 386 0196 1846     		mov	r0, r3
 387 0198 1437     		adds	r7, r7, #20
 388              		.cfi_def_cfa_offset 4
 389 019a BD46     		mov	sp, r7
 390              		.cfi_def_cfa_register 13
 391              		@ sp needed
 392 019c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cc1QyFkl.s 			page 14


 393              		.cfi_restore 7
 394              		.cfi_def_cfa_offset 0
 395 01a0 7047     		bx	lr
 396              		.cfi_endproc
 397              	.LFE124:
 399              		.section	.text.CAN_FilterInit,"ax",%progbits
 400              		.align	1
 401              		.global	CAN_FilterInit
 402              		.syntax unified
 403              		.thumb
 404              		.thumb_func
 406              	CAN_FilterInit:
 407              	.LFB125:
 338:./Lib/Src/stm32f4xx_can.c **** 
 339:./Lib/Src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 340:./Lib/Src/stm32f4xx_can.c **** /**
 341:./Lib/Src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 342:./Lib/Src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 343:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 344:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 345:./Lib/Src/stm32f4xx_can.c ****   *         contains the configuration information.
 346:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 347:./Lib/Src/stm32f4xx_can.c ****   */
 348:./Lib/Src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_TypeDef* CANx, CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 349:./Lib/Src/stm32f4xx_can.c **** {
 350:./Lib/Src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 351:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 352:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 353:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 354:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 355:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 356:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 357:./Lib/Src/stm32f4xx_can.c ****   
 358:./Lib/Src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 359:./Lib/Src/stm32f4xx_can.c **** 
 360:./Lib/Src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 361:./Lib/Src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
 362:./Lib/Src/stm32f4xx_can.c **** 
 363:./Lib/Src/stm32f4xx_can.c ****   /* Filter Deactivation */
 364:./Lib/Src/stm32f4xx_can.c ****   CANx->FA1R &= ~(uint32_t)filter_number_bit_pos;
 365:./Lib/Src/stm32f4xx_can.c **** 
 366:./Lib/Src/stm32f4xx_can.c ****   /* Filter Scale */
 367:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 368:./Lib/Src/stm32f4xx_can.c ****   {
 369:./Lib/Src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 370:./Lib/Src/stm32f4xx_can.c ****     CANx->FS1R &= ~(uint32_t)filter_number_bit_pos;
 371:./Lib/Src/stm32f4xx_can.c **** 
 372:./Lib/Src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 373:./Lib/Src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 374:./Lib/Src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 375:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 376:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 377:./Lib/Src/stm32f4xx_can.c **** 
 378:./Lib/Src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 379:./Lib/Src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 380:./Lib/Src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 381:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
ARM GAS  /tmp/cc1QyFkl.s 			page 15


 382:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 383:./Lib/Src/stm32f4xx_can.c ****   }
 384:./Lib/Src/stm32f4xx_can.c **** 
 385:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 386:./Lib/Src/stm32f4xx_can.c ****   {
 387:./Lib/Src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 388:./Lib/Src/stm32f4xx_can.c ****     CANx->FS1R |= filter_number_bit_pos;
 389:./Lib/Src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
 390:./Lib/Src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 391:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 392:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 393:./Lib/Src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 394:./Lib/Src/stm32f4xx_can.c ****     CANx->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 395:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 396:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 397:./Lib/Src/stm32f4xx_can.c ****   }
 398:./Lib/Src/stm32f4xx_can.c **** 
 399:./Lib/Src/stm32f4xx_can.c ****   /* Filter Mode */
 400:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 401:./Lib/Src/stm32f4xx_can.c ****   {
 402:./Lib/Src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 403:./Lib/Src/stm32f4xx_can.c ****     CANx->FM1R &= ~(uint32_t)filter_number_bit_pos;
 404:./Lib/Src/stm32f4xx_can.c ****   }
 405:./Lib/Src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 406:./Lib/Src/stm32f4xx_can.c ****   {
 407:./Lib/Src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 408:./Lib/Src/stm32f4xx_can.c ****     CANx->FM1R |= (uint32_t)filter_number_bit_pos;
 409:./Lib/Src/stm32f4xx_can.c ****   }
 410:./Lib/Src/stm32f4xx_can.c **** 
 411:./Lib/Src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 412:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 413:./Lib/Src/stm32f4xx_can.c ****   {
 414:./Lib/Src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 415:./Lib/Src/stm32f4xx_can.c ****     CANx->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 416:./Lib/Src/stm32f4xx_can.c ****   }
 417:./Lib/Src/stm32f4xx_can.c **** 
 418:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 419:./Lib/Src/stm32f4xx_can.c ****   {
 420:./Lib/Src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 421:./Lib/Src/stm32f4xx_can.c ****     CANx->FFA1R |= (uint32_t)filter_number_bit_pos;
 422:./Lib/Src/stm32f4xx_can.c ****   }
 423:./Lib/Src/stm32f4xx_can.c ****   
 424:./Lib/Src/stm32f4xx_can.c ****   /* Filter activation */
 425:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 426:./Lib/Src/stm32f4xx_can.c ****   {
 427:./Lib/Src/stm32f4xx_can.c ****     CANx->FA1R |= filter_number_bit_pos;
 428:./Lib/Src/stm32f4xx_can.c ****   }
 429:./Lib/Src/stm32f4xx_can.c **** 
 430:./Lib/Src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 431:./Lib/Src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 432:./Lib/Src/stm32f4xx_can.c **** }
 433:./Lib/Src/stm32f4xx_can.c **** #else
 434:./Lib/Src/stm32f4xx_can.c **** /**
 435:./Lib/Src/stm32f4xx_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 436:./Lib/Src/stm32f4xx_can.c ****   *         parameters in the CAN_FilterInitStruct.
 437:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
 438:./Lib/Src/stm32f4xx_can.c ****   *         contains the configuration information.
ARM GAS  /tmp/cc1QyFkl.s 			page 16


 439:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 440:./Lib/Src/stm32f4xx_can.c ****   */
 441:./Lib/Src/stm32f4xx_can.c **** void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
 442:./Lib/Src/stm32f4xx_can.c **** {
 408              		.loc 1 442 1
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 16
 411              		@ frame_needed = 1, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413 0000 90B4     		push	{r4, r7}
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 4, -8
 416              		.cfi_offset 7, -4
 417 0002 84B0     		sub	sp, sp, #16
 418              		.cfi_def_cfa_offset 24
 419 0004 00AF     		add	r7, sp, #0
 420              		.cfi_def_cfa_register 7
 421 0006 7860     		str	r0, [r7, #4]
 443:./Lib/Src/stm32f4xx_can.c ****   uint32_t filter_number_bit_pos = 0;
 422              		.loc 1 443 12
 423 0008 0023     		movs	r3, #0
 424 000a FB60     		str	r3, [r7, #12]
 444:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 445:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
 446:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
 447:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
 448:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
 449:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
 450:./Lib/Src/stm32f4xx_can.c **** 
 451:./Lib/Src/stm32f4xx_can.c ****   filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 425              		.loc 1 451 64
 426 000c 7B68     		ldr	r3, [r7, #4]
 427 000e 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 428 0010 1A46     		mov	r2, r3
 429              		.loc 1 451 25
 430 0012 0123     		movs	r3, #1
 431 0014 9340     		lsls	r3, r3, r2
 432 0016 FB60     		str	r3, [r7, #12]
 452:./Lib/Src/stm32f4xx_can.c **** 
 453:./Lib/Src/stm32f4xx_can.c ****   /* Initialisation mode for the filter */
 454:./Lib/Src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 433              		.loc 1 454 7
 434 0018 594B     		ldr	r3, .L38
 435 001a D3F80032 		ldr	r3, [r3, #512]
 436 001e 584A     		ldr	r2, .L38
 437              		.loc 1 454 13
 438 0020 43F00103 		orr	r3, r3, #1
 439 0024 C2F80032 		str	r3, [r2, #512]
 455:./Lib/Src/stm32f4xx_can.c **** 
 456:./Lib/Src/stm32f4xx_can.c ****   /* Filter Deactivation */
 457:./Lib/Src/stm32f4xx_can.c ****   CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 440              		.loc 1 457 7
 441 0028 554B     		ldr	r3, .L38
 442 002a D3F81C22 		ldr	r2, [r3, #540]
 443              		.loc 1 457 17
 444 002e FB68     		ldr	r3, [r7, #12]
 445 0030 DB43     		mvns	r3, r3
ARM GAS  /tmp/cc1QyFkl.s 			page 17


 446              		.loc 1 457 7
 447 0032 5349     		ldr	r1, .L38
 448              		.loc 1 457 14
 449 0034 1340     		ands	r3, r3, r2
 450 0036 C1F81C32 		str	r3, [r1, #540]
 458:./Lib/Src/stm32f4xx_can.c **** 
 459:./Lib/Src/stm32f4xx_can.c ****   /* Filter Scale */
 460:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 451              		.loc 1 460 27
 452 003a 7B68     		ldr	r3, [r7, #4]
 453 003c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 454              		.loc 1 460 6
 455 003e 002B     		cmp	r3, #0
 456 0040 29D1     		bne	.L31
 461:./Lib/Src/stm32f4xx_can.c ****   {
 462:./Lib/Src/stm32f4xx_can.c ****     /* 16-bit scale for the filter */
 463:./Lib/Src/stm32f4xx_can.c ****     CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 457              		.loc 1 463 9
 458 0042 4F4B     		ldr	r3, .L38
 459 0044 D3F80C22 		ldr	r2, [r3, #524]
 460              		.loc 1 463 19
 461 0048 FB68     		ldr	r3, [r7, #12]
 462 004a DB43     		mvns	r3, r3
 463              		.loc 1 463 9
 464 004c 4C49     		ldr	r1, .L38
 465              		.loc 1 463 16
 466 004e 1340     		ands	r3, r3, r2
 467 0050 C1F80C32 		str	r3, [r1, #524]
 464:./Lib/Src/stm32f4xx_can.c **** 
 465:./Lib/Src/stm32f4xx_can.c ****     /* First 16-bit identifier and First 16-bit mask */
 466:./Lib/Src/stm32f4xx_can.c ****     /* Or First 16-bit identifier and Second 16-bit identifier */
 467:./Lib/Src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 468:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 468              		.loc 1 468 53
 469 0054 7B68     		ldr	r3, [r7, #4]
 470 0056 DB88     		ldrh	r3, [r3, #6]
 471              		.loc 1 468 76
 472 0058 1B04     		lsls	r3, r3, #16
 469:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 473              		.loc 1 469 53
 474 005a 7A68     		ldr	r2, [r7, #4]
 475 005c 5288     		ldrh	r2, [r2, #2]
 476              		.loc 1 469 21
 477 005e 1446     		mov	r4, r2
 467:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 478              		.loc 1 467 9
 479 0060 4749     		ldr	r1, .L38
 467:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 480              		.loc 1 467 47
 481 0062 7A68     		ldr	r2, [r7, #4]
 482 0064 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 483 0066 1046     		mov	r0, r2
 468:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 484              		.loc 1 468 83
 485 0068 43EA0402 		orr	r2, r3, r4
 467:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 486              		.loc 1 467 71
ARM GAS  /tmp/cc1QyFkl.s 			page 18


 487 006c 00F14803 		add	r3, r0, #72
 488 0070 41F83320 		str	r2, [r1, r3, lsl #3]
 470:./Lib/Src/stm32f4xx_can.c **** 
 471:./Lib/Src/stm32f4xx_can.c ****     /* Second 16-bit identifier and Second 16-bit mask */
 472:./Lib/Src/stm32f4xx_can.c ****     /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 473:./Lib/Src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 474:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 489              		.loc 1 474 53
 490 0074 7B68     		ldr	r3, [r7, #4]
 491 0076 9B88     		ldrh	r3, [r3, #4]
 492              		.loc 1 474 77
 493 0078 1B04     		lsls	r3, r3, #16
 475:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 494              		.loc 1 475 53
 495 007a 7A68     		ldr	r2, [r7, #4]
 496 007c 1288     		ldrh	r2, [r2]
 497              		.loc 1 475 21
 498 007e 1446     		mov	r4, r2
 473:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 499              		.loc 1 473 9
 500 0080 3F49     		ldr	r1, .L38
 473:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 501              		.loc 1 473 47
 502 0082 7A68     		ldr	r2, [r7, #4]
 503 0084 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 504 0086 1046     		mov	r0, r2
 474:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 505              		.loc 1 474 84
 506 0088 43EA0402 		orr	r2, r3, r4
 473:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 507              		.loc 1 473 71
 508 008c 00F14803 		add	r3, r0, #72
 509 0090 DB00     		lsls	r3, r3, #3
 510 0092 0B44     		add	r3, r3, r1
 511 0094 5A60     		str	r2, [r3, #4]
 512              	.L31:
 476:./Lib/Src/stm32f4xx_can.c ****   }
 477:./Lib/Src/stm32f4xx_can.c **** 
 478:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 513              		.loc 1 478 27
 514 0096 7B68     		ldr	r3, [r7, #4]
 515 0098 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 516              		.loc 1 478 6
 517 009a 012B     		cmp	r3, #1
 518 009c 28D1     		bne	.L32
 479:./Lib/Src/stm32f4xx_can.c ****   {
 480:./Lib/Src/stm32f4xx_can.c ****     /* 32-bit scale for the filter */
 481:./Lib/Src/stm32f4xx_can.c ****     CAN1->FS1R |= filter_number_bit_pos;
 519              		.loc 1 481 9
 520 009e 384B     		ldr	r3, .L38
 521 00a0 D3F80C22 		ldr	r2, [r3, #524]
 522 00a4 3649     		ldr	r1, .L38
 523              		.loc 1 481 16
 524 00a6 FB68     		ldr	r3, [r7, #12]
 525 00a8 1343     		orrs	r3, r3, r2
 526 00aa C1F80C32 		str	r3, [r1, #524]
 482:./Lib/Src/stm32f4xx_can.c ****     /* 32-bit identifier or First 32-bit identifier */
ARM GAS  /tmp/cc1QyFkl.s 			page 19


 483:./Lib/Src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 484:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 527              		.loc 1 484 53
 528 00ae 7B68     		ldr	r3, [r7, #4]
 529 00b0 1B88     		ldrh	r3, [r3]
 530              		.loc 1 484 73
 531 00b2 1B04     		lsls	r3, r3, #16
 485:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 532              		.loc 1 485 53
 533 00b4 7A68     		ldr	r2, [r7, #4]
 534 00b6 5288     		ldrh	r2, [r2, #2]
 535              		.loc 1 485 21
 536 00b8 1446     		mov	r4, r2
 483:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 537              		.loc 1 483 9
 538 00ba 3149     		ldr	r1, .L38
 483:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 539              		.loc 1 483 47
 540 00bc 7A68     		ldr	r2, [r7, #4]
 541 00be 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 542 00c0 1046     		mov	r0, r2
 484:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 543              		.loc 1 484 80
 544 00c2 43EA0402 		orr	r2, r3, r4
 483:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 545              		.loc 1 483 71
 546 00c6 00F14803 		add	r3, r0, #72
 547 00ca 41F83320 		str	r2, [r1, r3, lsl #3]
 486:./Lib/Src/stm32f4xx_can.c ****     /* 32-bit mask or Second 32-bit identifier */
 487:./Lib/Src/stm32f4xx_can.c ****     CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 488:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 548              		.loc 1 488 53
 549 00ce 7B68     		ldr	r3, [r7, #4]
 550 00d0 9B88     		ldrh	r3, [r3, #4]
 551              		.loc 1 488 77
 552 00d2 1B04     		lsls	r3, r3, #16
 489:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 553              		.loc 1 489 53
 554 00d4 7A68     		ldr	r2, [r7, #4]
 555 00d6 D288     		ldrh	r2, [r2, #6]
 556              		.loc 1 489 21
 557 00d8 1446     		mov	r4, r2
 487:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 558              		.loc 1 487 9
 559 00da 2949     		ldr	r1, .L38
 487:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 560              		.loc 1 487 47
 561 00dc 7A68     		ldr	r2, [r7, #4]
 562 00de 927A     		ldrb	r2, [r2, #10]	@ zero_extendqisi2
 563 00e0 1046     		mov	r0, r2
 488:./Lib/Src/stm32f4xx_can.c ****         (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 564              		.loc 1 488 84
 565 00e2 43EA0402 		orr	r2, r3, r4
 487:./Lib/Src/stm32f4xx_can.c ****        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 566              		.loc 1 487 71
 567 00e6 00F14803 		add	r3, r0, #72
 568 00ea DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/cc1QyFkl.s 			page 20


 569 00ec 0B44     		add	r3, r3, r1
 570 00ee 5A60     		str	r2, [r3, #4]
 571              	.L32:
 490:./Lib/Src/stm32f4xx_can.c ****   }
 491:./Lib/Src/stm32f4xx_can.c **** 
 492:./Lib/Src/stm32f4xx_can.c ****   /* Filter Mode */
 493:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 572              		.loc 1 493 27
 573 00f0 7B68     		ldr	r3, [r7, #4]
 574 00f2 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 575              		.loc 1 493 6
 576 00f4 002B     		cmp	r3, #0
 577 00f6 09D1     		bne	.L33
 494:./Lib/Src/stm32f4xx_can.c ****   {
 495:./Lib/Src/stm32f4xx_can.c ****     /*Id/Mask mode for the filter*/
 496:./Lib/Src/stm32f4xx_can.c ****     CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 578              		.loc 1 496 9
 579 00f8 214B     		ldr	r3, .L38
 580 00fa D3F80422 		ldr	r2, [r3, #516]
 581              		.loc 1 496 19
 582 00fe FB68     		ldr	r3, [r7, #12]
 583 0100 DB43     		mvns	r3, r3
 584              		.loc 1 496 9
 585 0102 1F49     		ldr	r1, .L38
 586              		.loc 1 496 16
 587 0104 1340     		ands	r3, r3, r2
 588 0106 C1F80432 		str	r3, [r1, #516]
 589 010a 07E0     		b	.L34
 590              	.L33:
 497:./Lib/Src/stm32f4xx_can.c ****   }
 498:./Lib/Src/stm32f4xx_can.c ****   else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 499:./Lib/Src/stm32f4xx_can.c ****   {
 500:./Lib/Src/stm32f4xx_can.c ****     /*Identifier list mode for the filter*/
 501:./Lib/Src/stm32f4xx_can.c ****     CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 591              		.loc 1 501 9
 592 010c 1C4B     		ldr	r3, .L38
 593 010e D3F80422 		ldr	r2, [r3, #516]
 594 0112 1B49     		ldr	r1, .L38
 595              		.loc 1 501 16
 596 0114 FB68     		ldr	r3, [r7, #12]
 597 0116 1343     		orrs	r3, r3, r2
 598 0118 C1F80432 		str	r3, [r1, #516]
 599              	.L34:
 502:./Lib/Src/stm32f4xx_can.c ****   }
 503:./Lib/Src/stm32f4xx_can.c **** 
 504:./Lib/Src/stm32f4xx_can.c ****   /* Filter FIFO assignment */
 505:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 600              		.loc 1 505 27
 601 011c 7B68     		ldr	r3, [r7, #4]
 602 011e 1B89     		ldrh	r3, [r3, #8]
 603              		.loc 1 505 6
 604 0120 002B     		cmp	r3, #0
 605 0122 08D1     		bne	.L35
 506:./Lib/Src/stm32f4xx_can.c ****   {
 507:./Lib/Src/stm32f4xx_can.c ****     /* FIFO 0 assignation for the filter */
 508:./Lib/Src/stm32f4xx_can.c ****     CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 606              		.loc 1 508 9
ARM GAS  /tmp/cc1QyFkl.s 			page 21


 607 0124 164B     		ldr	r3, .L38
 608 0126 D3F81422 		ldr	r2, [r3, #532]
 609              		.loc 1 508 20
 610 012a FB68     		ldr	r3, [r7, #12]
 611 012c DB43     		mvns	r3, r3
 612              		.loc 1 508 9
 613 012e 1449     		ldr	r1, .L38
 614              		.loc 1 508 17
 615 0130 1340     		ands	r3, r3, r2
 616 0132 C1F81432 		str	r3, [r1, #532]
 617              	.L35:
 509:./Lib/Src/stm32f4xx_can.c ****   }
 510:./Lib/Src/stm32f4xx_can.c **** 
 511:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 618              		.loc 1 511 27
 619 0136 7B68     		ldr	r3, [r7, #4]
 620 0138 1B89     		ldrh	r3, [r3, #8]
 621              		.loc 1 511 6
 622 013a 012B     		cmp	r3, #1
 623 013c 07D1     		bne	.L36
 512:./Lib/Src/stm32f4xx_can.c ****   {
 513:./Lib/Src/stm32f4xx_can.c ****     /* FIFO 1 assignation for the filter */
 514:./Lib/Src/stm32f4xx_can.c ****     CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 624              		.loc 1 514 9
 625 013e 104B     		ldr	r3, .L38
 626 0140 D3F81422 		ldr	r2, [r3, #532]
 627 0144 0E49     		ldr	r1, .L38
 628              		.loc 1 514 17
 629 0146 FB68     		ldr	r3, [r7, #12]
 630 0148 1343     		orrs	r3, r3, r2
 631 014a C1F81432 		str	r3, [r1, #532]
 632              	.L36:
 515:./Lib/Src/stm32f4xx_can.c ****   }
 516:./Lib/Src/stm32f4xx_can.c ****   
 517:./Lib/Src/stm32f4xx_can.c ****   /* Filter activation */
 518:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 633              		.loc 1 518 27
 634 014e 7B68     		ldr	r3, [r7, #4]
 635 0150 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 636              		.loc 1 518 6
 637 0152 012B     		cmp	r3, #1
 638 0154 07D1     		bne	.L37
 519:./Lib/Src/stm32f4xx_can.c ****   {
 520:./Lib/Src/stm32f4xx_can.c ****     CAN1->FA1R |= filter_number_bit_pos;
 639              		.loc 1 520 9
 640 0156 0A4B     		ldr	r3, .L38
 641 0158 D3F81C22 		ldr	r2, [r3, #540]
 642 015c 0849     		ldr	r1, .L38
 643              		.loc 1 520 16
 644 015e FB68     		ldr	r3, [r7, #12]
 645 0160 1343     		orrs	r3, r3, r2
 646 0162 C1F81C32 		str	r3, [r1, #540]
 647              	.L37:
 521:./Lib/Src/stm32f4xx_can.c ****   }
 522:./Lib/Src/stm32f4xx_can.c **** 
 523:./Lib/Src/stm32f4xx_can.c ****   /* Leave the initialisation mode for the filter */
 524:./Lib/Src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
ARM GAS  /tmp/cc1QyFkl.s 			page 22


 648              		.loc 1 524 7
 649 0166 064B     		ldr	r3, .L38
 650 0168 D3F80032 		ldr	r3, [r3, #512]
 651 016c 044A     		ldr	r2, .L38
 652              		.loc 1 524 13
 653 016e 23F00103 		bic	r3, r3, #1
 654 0172 C2F80032 		str	r3, [r2, #512]
 525:./Lib/Src/stm32f4xx_can.c **** }
 655              		.loc 1 525 1
 656 0176 00BF     		nop
 657 0178 1037     		adds	r7, r7, #16
 658              		.cfi_def_cfa_offset 8
 659 017a BD46     		mov	sp, r7
 660              		.cfi_def_cfa_register 13
 661              		@ sp needed
 662 017c 90BC     		pop	{r4, r7}
 663              		.cfi_restore 7
 664              		.cfi_restore 4
 665              		.cfi_def_cfa_offset 0
 666 017e 7047     		bx	lr
 667              	.L39:
 668              		.align	2
 669              	.L38:
 670 0180 00640040 		.word	1073767424
 671              		.cfi_endproc
 672              	.LFE125:
 674              		.section	.text.CAN_StructInit,"ax",%progbits
 675              		.align	1
 676              		.global	CAN_StructInit
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 681              	CAN_StructInit:
 682              	.LFB126:
 526:./Lib/Src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 527:./Lib/Src/stm32f4xx_can.c **** 
 528:./Lib/Src/stm32f4xx_can.c **** /**
 529:./Lib/Src/stm32f4xx_can.c ****   * @brief  Fills each CAN_InitStruct member with its default value.
 530:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
 531:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 532:./Lib/Src/stm32f4xx_can.c ****   */
 533:./Lib/Src/stm32f4xx_can.c **** void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
 534:./Lib/Src/stm32f4xx_can.c **** {
 683              		.loc 1 534 1
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 8
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 0000 80B4     		push	{r7}
 689              		.cfi_def_cfa_offset 4
 690              		.cfi_offset 7, -4
 691 0002 83B0     		sub	sp, sp, #12
 692              		.cfi_def_cfa_offset 16
 693 0004 00AF     		add	r7, sp, #0
 694              		.cfi_def_cfa_register 7
 695 0006 7860     		str	r0, [r7, #4]
 535:./Lib/Src/stm32f4xx_can.c ****   /* Reset CAN init structure parameters values */
ARM GAS  /tmp/cc1QyFkl.s 			page 23


 536:./Lib/Src/stm32f4xx_can.c ****   
 537:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the time triggered communication mode */
 538:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TTCM = DISABLE;
 696              		.loc 1 538 28
 697 0008 7B68     		ldr	r3, [r7, #4]
 698 000a 0022     		movs	r2, #0
 699 000c 9A71     		strb	r2, [r3, #6]
 539:./Lib/Src/stm32f4xx_can.c ****   
 540:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the automatic bus-off management */
 541:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_ABOM = DISABLE;
 700              		.loc 1 541 28
 701 000e 7B68     		ldr	r3, [r7, #4]
 702 0010 0022     		movs	r2, #0
 703 0012 DA71     		strb	r2, [r3, #7]
 542:./Lib/Src/stm32f4xx_can.c ****   
 543:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the automatic wake-up mode */
 544:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_AWUM = DISABLE;
 704              		.loc 1 544 28
 705 0014 7B68     		ldr	r3, [r7, #4]
 706 0016 0022     		movs	r2, #0
 707 0018 1A72     		strb	r2, [r3, #8]
 545:./Lib/Src/stm32f4xx_can.c ****   
 546:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the no automatic retransmission */
 547:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_NART = DISABLE;
 708              		.loc 1 547 28
 709 001a 7B68     		ldr	r3, [r7, #4]
 710 001c 0022     		movs	r2, #0
 711 001e 5A72     		strb	r2, [r3, #9]
 548:./Lib/Src/stm32f4xx_can.c ****   
 549:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the receive FIFO locked mode */
 550:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_RFLM = DISABLE;
 712              		.loc 1 550 28
 713 0020 7B68     		ldr	r3, [r7, #4]
 714 0022 0022     		movs	r2, #0
 715 0024 9A72     		strb	r2, [r3, #10]
 551:./Lib/Src/stm32f4xx_can.c ****   
 552:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the transmit FIFO priority */
 553:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_TXFP = DISABLE;
 716              		.loc 1 553 28
 717 0026 7B68     		ldr	r3, [r7, #4]
 718 0028 0022     		movs	r2, #0
 719 002a DA72     		strb	r2, [r3, #11]
 554:./Lib/Src/stm32f4xx_can.c ****   
 555:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the CAN_Mode member */
 556:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 720              		.loc 1 556 28
 721 002c 7B68     		ldr	r3, [r7, #4]
 722 002e 0022     		movs	r2, #0
 723 0030 9A70     		strb	r2, [r3, #2]
 557:./Lib/Src/stm32f4xx_can.c ****   
 558:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the CAN_SJW member */
 559:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 724              		.loc 1 559 27
 725 0032 7B68     		ldr	r3, [r7, #4]
 726 0034 0022     		movs	r2, #0
 727 0036 DA70     		strb	r2, [r3, #3]
 560:./Lib/Src/stm32f4xx_can.c ****   
ARM GAS  /tmp/cc1QyFkl.s 			page 24


 561:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the CAN_BS1 member */
 562:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 728              		.loc 1 562 27
 729 0038 7B68     		ldr	r3, [r7, #4]
 730 003a 0322     		movs	r2, #3
 731 003c 1A71     		strb	r2, [r3, #4]
 563:./Lib/Src/stm32f4xx_can.c ****   
 564:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the CAN_BS2 member */
 565:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 732              		.loc 1 565 27
 733 003e 7B68     		ldr	r3, [r7, #4]
 734 0040 0222     		movs	r2, #2
 735 0042 5A71     		strb	r2, [r3, #5]
 566:./Lib/Src/stm32f4xx_can.c ****   
 567:./Lib/Src/stm32f4xx_can.c ****   /* Initialize the CAN_Prescaler member */
 568:./Lib/Src/stm32f4xx_can.c ****   CAN_InitStruct->CAN_Prescaler = 1;
 736              		.loc 1 568 33
 737 0044 7B68     		ldr	r3, [r7, #4]
 738 0046 0122     		movs	r2, #1
 739 0048 1A80     		strh	r2, [r3]	@ movhi
 569:./Lib/Src/stm32f4xx_can.c **** }
 740              		.loc 1 569 1
 741 004a 00BF     		nop
 742 004c 0C37     		adds	r7, r7, #12
 743              		.cfi_def_cfa_offset 4
 744 004e BD46     		mov	sp, r7
 745              		.cfi_def_cfa_register 13
 746              		@ sp needed
 747 0050 5DF8047B 		ldr	r7, [sp], #4
 748              		.cfi_restore 7
 749              		.cfi_def_cfa_offset 0
 750 0054 7047     		bx	lr
 751              		.cfi_endproc
 752              	.LFE126:
 754              		.section	.text.CAN_SlaveStartBank,"ax",%progbits
 755              		.align	1
 756              		.global	CAN_SlaveStartBank
 757              		.syntax unified
 758              		.thumb
 759              		.thumb_func
 761              	CAN_SlaveStartBank:
 762              	.LFB127:
 570:./Lib/Src/stm32f4xx_can.c **** 
 571:./Lib/Src/stm32f4xx_can.c **** #if defined(STM32F413_423xx)
 572:./Lib/Src/stm32f4xx_can.c **** /**
 573:./Lib/Src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 574:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1 or 3 to select the CAN peripheral.
 575:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 576:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 577:./Lib/Src/stm32f4xx_can.c ****   */
 578:./Lib/Src/stm32f4xx_can.c **** void CAN_SlaveStartBank(CAN_TypeDef* CANx, uint8_t CAN_BankNumber) 
 579:./Lib/Src/stm32f4xx_can.c **** {
 580:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 581:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 582:./Lib/Src/stm32f4xx_can.c ****   
 583:./Lib/Src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 584:./Lib/Src/stm32f4xx_can.c ****   CANx->FMR |= FMR_FINIT;
ARM GAS  /tmp/cc1QyFkl.s 			page 25


 585:./Lib/Src/stm32f4xx_can.c ****   
 586:./Lib/Src/stm32f4xx_can.c ****   /* Select the start slave bank */
 587:./Lib/Src/stm32f4xx_can.c ****   CANx->FMR &= (uint32_t)0xFFFFC0F1 ;
 588:./Lib/Src/stm32f4xx_can.c ****   CANx->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 589:./Lib/Src/stm32f4xx_can.c ****   
 590:./Lib/Src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 591:./Lib/Src/stm32f4xx_can.c ****   CANx->FMR &= ~FMR_FINIT;
 592:./Lib/Src/stm32f4xx_can.c **** }
 593:./Lib/Src/stm32f4xx_can.c **** #else
 594:./Lib/Src/stm32f4xx_can.c **** /**
 595:./Lib/Src/stm32f4xx_can.c ****   * @brief  Select the start bank filter for slave CAN.
 596:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
 597:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 598:./Lib/Src/stm32f4xx_can.c ****   */
 599:./Lib/Src/stm32f4xx_can.c **** void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
 600:./Lib/Src/stm32f4xx_can.c **** {
 763              		.loc 1 600 1
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 8
 766              		@ frame_needed = 1, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768 0000 80B4     		push	{r7}
 769              		.cfi_def_cfa_offset 4
 770              		.cfi_offset 7, -4
 771 0002 83B0     		sub	sp, sp, #12
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 0346     		mov	r3, r0
 776 0008 FB71     		strb	r3, [r7, #7]
 601:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 602:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
 603:./Lib/Src/stm32f4xx_can.c ****   
 604:./Lib/Src/stm32f4xx_can.c ****   /* Enter Initialisation mode for the filter */
 605:./Lib/Src/stm32f4xx_can.c ****   CAN1->FMR |= FMR_FINIT;
 777              		.loc 1 605 7
 778 000a 144B     		ldr	r3, .L42
 779 000c D3F80032 		ldr	r3, [r3, #512]
 780 0010 124A     		ldr	r2, .L42
 781              		.loc 1 605 13
 782 0012 43F00103 		orr	r3, r3, #1
 783 0016 C2F80032 		str	r3, [r2, #512]
 606:./Lib/Src/stm32f4xx_can.c ****   
 607:./Lib/Src/stm32f4xx_can.c ****   /* Select the start slave bank */
 608:./Lib/Src/stm32f4xx_can.c ****   CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 784              		.loc 1 608 7
 785 001a 104B     		ldr	r3, .L42
 786 001c D3F80032 		ldr	r3, [r3, #512]
 787 0020 0E4A     		ldr	r2, .L42
 788              		.loc 1 608 13
 789 0022 23F47C53 		bic	r3, r3, #16128
 790 0026 23F00E03 		bic	r3, r3, #14
 791 002a C2F80032 		str	r3, [r2, #512]
 609:./Lib/Src/stm32f4xx_can.c ****   CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 792              		.loc 1 609 7
 793 002e 0B4B     		ldr	r3, .L42
 794 0030 D3F80022 		ldr	r2, [r3, #512]
ARM GAS  /tmp/cc1QyFkl.s 			page 26


 795              		.loc 1 609 16
 796 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 797              		.loc 1 609 42
 798 0036 1B02     		lsls	r3, r3, #8
 799              		.loc 1 609 7
 800 0038 0849     		ldr	r1, .L42
 801              		.loc 1 609 13
 802 003a 1343     		orrs	r3, r3, r2
 803 003c C1F80032 		str	r3, [r1, #512]
 610:./Lib/Src/stm32f4xx_can.c ****   
 611:./Lib/Src/stm32f4xx_can.c ****   /* Leave Initialisation mode for the filter */
 612:./Lib/Src/stm32f4xx_can.c ****   CAN1->FMR &= ~FMR_FINIT;
 804              		.loc 1 612 7
 805 0040 064B     		ldr	r3, .L42
 806 0042 D3F80032 		ldr	r3, [r3, #512]
 807 0046 054A     		ldr	r2, .L42
 808              		.loc 1 612 13
 809 0048 23F00103 		bic	r3, r3, #1
 810 004c C2F80032 		str	r3, [r2, #512]
 613:./Lib/Src/stm32f4xx_can.c **** }
 811              		.loc 1 613 1
 812 0050 00BF     		nop
 813 0052 0C37     		adds	r7, r7, #12
 814              		.cfi_def_cfa_offset 4
 815 0054 BD46     		mov	sp, r7
 816              		.cfi_def_cfa_register 13
 817              		@ sp needed
 818 0056 5DF8047B 		ldr	r7, [sp], #4
 819              		.cfi_restore 7
 820              		.cfi_def_cfa_offset 0
 821 005a 7047     		bx	lr
 822              	.L43:
 823              		.align	2
 824              	.L42:
 825 005c 00640040 		.word	1073767424
 826              		.cfi_endproc
 827              	.LFE127:
 829              		.section	.text.CAN_DBGFreeze,"ax",%progbits
 830              		.align	1
 831              		.global	CAN_DBGFreeze
 832              		.syntax unified
 833              		.thumb
 834              		.thumb_func
 836              	CAN_DBGFreeze:
 837              	.LFB128:
 614:./Lib/Src/stm32f4xx_can.c **** #endif /* STM32F413_423xx */
 615:./Lib/Src/stm32f4xx_can.c **** /**
 616:./Lib/Src/stm32f4xx_can.c ****   * @brief  Enables or disables the DBG Freeze for CAN.
 617:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 618:./Lib/Src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN peripheral. 
 619:./Lib/Src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE (CAN reception/transmission is frozen
 620:./Lib/Src/stm32f4xx_can.c ****   *          during debug. Reception FIFOs can still be accessed/controlled normally) 
 621:./Lib/Src/stm32f4xx_can.c ****   *          or DISABLE (CAN is working during debug).
 622:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 623:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 624:./Lib/Src/stm32f4xx_can.c ****   */
 625:./Lib/Src/stm32f4xx_can.c **** void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
ARM GAS  /tmp/cc1QyFkl.s 			page 27


 626:./Lib/Src/stm32f4xx_can.c **** {
 838              		.loc 1 626 1
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 8
 841              		@ frame_needed = 1, uses_anonymous_args = 0
 842              		@ link register save eliminated.
 843 0000 80B4     		push	{r7}
 844              		.cfi_def_cfa_offset 4
 845              		.cfi_offset 7, -4
 846 0002 83B0     		sub	sp, sp, #12
 847              		.cfi_def_cfa_offset 16
 848 0004 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 851 0008 0B46     		mov	r3, r1
 852 000a FB70     		strb	r3, [r7, #3]
 627:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 628:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 629:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 630:./Lib/Src/stm32f4xx_can.c ****   
 631:./Lib/Src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 853              		.loc 1 631 6
 854 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 855 000e 002B     		cmp	r3, #0
 856 0010 06D0     		beq	.L45
 632:./Lib/Src/stm32f4xx_can.c ****   {
 633:./Lib/Src/stm32f4xx_can.c ****     /* Enable Debug Freeze  */
 634:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR |= MCR_DBF;
 857              		.loc 1 634 9
 858 0012 7B68     		ldr	r3, [r7, #4]
 859 0014 1B68     		ldr	r3, [r3]
 860              		.loc 1 634 15
 861 0016 43F48032 		orr	r2, r3, #65536
 862 001a 7B68     		ldr	r3, [r7, #4]
 863 001c 1A60     		str	r2, [r3]
 635:./Lib/Src/stm32f4xx_can.c ****   }
 636:./Lib/Src/stm32f4xx_can.c ****   else
 637:./Lib/Src/stm32f4xx_can.c ****   {
 638:./Lib/Src/stm32f4xx_can.c ****     /* Disable Debug Freeze */
 639:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR &= ~MCR_DBF;
 640:./Lib/Src/stm32f4xx_can.c ****   }
 641:./Lib/Src/stm32f4xx_can.c **** }
 864              		.loc 1 641 1
 865 001e 05E0     		b	.L47
 866              	.L45:
 639:./Lib/Src/stm32f4xx_can.c ****   }
 867              		.loc 1 639 9
 868 0020 7B68     		ldr	r3, [r7, #4]
 869 0022 1B68     		ldr	r3, [r3]
 639:./Lib/Src/stm32f4xx_can.c ****   }
 870              		.loc 1 639 15
 871 0024 23F48032 		bic	r2, r3, #65536
 872 0028 7B68     		ldr	r3, [r7, #4]
 873 002a 1A60     		str	r2, [r3]
 874              	.L47:
 875              		.loc 1 641 1
 876 002c 00BF     		nop
ARM GAS  /tmp/cc1QyFkl.s 			page 28


 877 002e 0C37     		adds	r7, r7, #12
 878              		.cfi_def_cfa_offset 4
 879 0030 BD46     		mov	sp, r7
 880              		.cfi_def_cfa_register 13
 881              		@ sp needed
 882 0032 5DF8047B 		ldr	r7, [sp], #4
 883              		.cfi_restore 7
 884              		.cfi_def_cfa_offset 0
 885 0036 7047     		bx	lr
 886              		.cfi_endproc
 887              	.LFE128:
 889              		.section	.text.CAN_TTComModeCmd,"ax",%progbits
 890              		.align	1
 891              		.global	CAN_TTComModeCmd
 892              		.syntax unified
 893              		.thumb
 894              		.thumb_func
 896              	CAN_TTComModeCmd:
 897              	.LFB129:
 642:./Lib/Src/stm32f4xx_can.c **** 
 643:./Lib/Src/stm32f4xx_can.c **** 
 644:./Lib/Src/stm32f4xx_can.c **** /**
 645:./Lib/Src/stm32f4xx_can.c ****   * @brief  Enables or disables the CAN Time TriggerOperation communication mode.
 646:./Lib/Src/stm32f4xx_can.c ****   * @note   DLC must be programmed as 8 in order Time Stamp (2 bytes) to be 
 647:./Lib/Src/stm32f4xx_can.c ****   *         sent over the CAN bus.  
 648:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 649:./Lib/Src/stm32f4xx_can.c ****   * @param  NewState: Mode new state. This parameter can be: ENABLE or DISABLE.
 650:./Lib/Src/stm32f4xx_can.c ****   *         When enabled, Time stamp (TIME[15:0]) value is  sent in the last two
 651:./Lib/Src/stm32f4xx_can.c ****   *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
 652:./Lib/Src/stm32f4xx_can.c ****   *         in data byte 7.
 653:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 654:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 655:./Lib/Src/stm32f4xx_can.c ****   */
 656:./Lib/Src/stm32f4xx_can.c **** void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
 657:./Lib/Src/stm32f4xx_can.c **** {
 898              		.loc 1 657 1
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 8
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 903 0000 80B4     		push	{r7}
 904              		.cfi_def_cfa_offset 4
 905              		.cfi_offset 7, -4
 906 0002 83B0     		sub	sp, sp, #12
 907              		.cfi_def_cfa_offset 16
 908 0004 00AF     		add	r7, sp, #0
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 911 0008 0B46     		mov	r3, r1
 912 000a FB70     		strb	r3, [r7, #3]
 658:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 659:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 660:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 661:./Lib/Src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 913              		.loc 1 661 6
 914 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 915 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/cc1QyFkl.s 			page 29


 916 0010 1ED0     		beq	.L49
 662:./Lib/Src/stm32f4xx_can.c ****   {
 663:./Lib/Src/stm32f4xx_can.c ****     /* Enable the TTCM mode */
 664:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR |= CAN_MCR_TTCM;
 917              		.loc 1 664 9
 918 0012 7B68     		ldr	r3, [r7, #4]
 919 0014 1B68     		ldr	r3, [r3]
 920              		.loc 1 664 15
 921 0016 43F08002 		orr	r2, r3, #128
 922 001a 7B68     		ldr	r3, [r7, #4]
 923 001c 1A60     		str	r2, [r3]
 665:./Lib/Src/stm32f4xx_can.c **** 
 666:./Lib/Src/stm32f4xx_can.c ****     /* Set TGT bits */
 667:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 924              		.loc 1 667 24
 925 001e 7B68     		ldr	r3, [r7, #4]
 926 0020 D3F88431 		ldr	r3, [r3, #388]
 927              		.loc 1 667 30
 928 0024 43F48072 		orr	r2, r3, #256
 929 0028 7B68     		ldr	r3, [r7, #4]
 930 002a C3F88421 		str	r2, [r3, #388]
 668:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 931              		.loc 1 668 24
 932 002e 7B68     		ldr	r3, [r7, #4]
 933 0030 D3F89431 		ldr	r3, [r3, #404]
 934              		.loc 1 668 30
 935 0034 43F48072 		orr	r2, r3, #256
 936 0038 7B68     		ldr	r3, [r7, #4]
 937 003a C3F89421 		str	r2, [r3, #404]
 669:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 938              		.loc 1 669 24
 939 003e 7B68     		ldr	r3, [r7, #4]
 940 0040 D3F8A431 		ldr	r3, [r3, #420]
 941              		.loc 1 669 30
 942 0044 43F48072 		orr	r2, r3, #256
 943 0048 7B68     		ldr	r3, [r7, #4]
 944 004a C3F8A421 		str	r2, [r3, #420]
 670:./Lib/Src/stm32f4xx_can.c ****   }
 671:./Lib/Src/stm32f4xx_can.c ****   else
 672:./Lib/Src/stm32f4xx_can.c ****   {
 673:./Lib/Src/stm32f4xx_can.c ****     /* Disable the TTCM mode */
 674:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 675:./Lib/Src/stm32f4xx_can.c **** 
 676:./Lib/Src/stm32f4xx_can.c ****     /* Reset TGT bits */
 677:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 678:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 679:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 680:./Lib/Src/stm32f4xx_can.c ****   }
 681:./Lib/Src/stm32f4xx_can.c **** }
 945              		.loc 1 681 1
 946 004e 1DE0     		b	.L51
 947              	.L49:
 674:./Lib/Src/stm32f4xx_can.c **** 
 948              		.loc 1 674 9
 949 0050 7B68     		ldr	r3, [r7, #4]
 950 0052 1B68     		ldr	r3, [r3]
 674:./Lib/Src/stm32f4xx_can.c **** 
ARM GAS  /tmp/cc1QyFkl.s 			page 30


 951              		.loc 1 674 15
 952 0054 23F08002 		bic	r2, r3, #128
 953 0058 7B68     		ldr	r3, [r7, #4]
 954 005a 1A60     		str	r2, [r3]
 677:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 955              		.loc 1 677 24
 956 005c 7B68     		ldr	r3, [r7, #4]
 957 005e D3F88431 		ldr	r3, [r3, #388]
 677:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 958              		.loc 1 677 30
 959 0062 23F48072 		bic	r2, r3, #256
 960 0066 7B68     		ldr	r3, [r7, #4]
 961 0068 C3F88421 		str	r2, [r3, #388]
 678:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 962              		.loc 1 678 24
 963 006c 7B68     		ldr	r3, [r7, #4]
 964 006e D3F89431 		ldr	r3, [r3, #404]
 678:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 965              		.loc 1 678 30
 966 0072 23F48072 		bic	r2, r3, #256
 967 0076 7B68     		ldr	r3, [r7, #4]
 968 0078 C3F89421 		str	r2, [r3, #404]
 679:./Lib/Src/stm32f4xx_can.c ****   }
 969              		.loc 1 679 24
 970 007c 7B68     		ldr	r3, [r7, #4]
 971 007e D3F8A431 		ldr	r3, [r3, #420]
 679:./Lib/Src/stm32f4xx_can.c ****   }
 972              		.loc 1 679 30
 973 0082 23F48072 		bic	r2, r3, #256
 974 0086 7B68     		ldr	r3, [r7, #4]
 975 0088 C3F8A421 		str	r2, [r3, #420]
 976              	.L51:
 977              		.loc 1 681 1
 978 008c 00BF     		nop
 979 008e 0C37     		adds	r7, r7, #12
 980              		.cfi_def_cfa_offset 4
 981 0090 BD46     		mov	sp, r7
 982              		.cfi_def_cfa_register 13
 983              		@ sp needed
 984 0092 5DF8047B 		ldr	r7, [sp], #4
 985              		.cfi_restore 7
 986              		.cfi_def_cfa_offset 0
 987 0096 7047     		bx	lr
 988              		.cfi_endproc
 989              	.LFE129:
 991              		.section	.text.CAN_Transmit,"ax",%progbits
 992              		.align	1
 993              		.global	CAN_Transmit
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 998              	CAN_Transmit:
 999              	.LFB130:
 682:./Lib/Src/stm32f4xx_can.c **** /**
 683:./Lib/Src/stm32f4xx_can.c ****   * @}
 684:./Lib/Src/stm32f4xx_can.c ****   */
 685:./Lib/Src/stm32f4xx_can.c **** 
ARM GAS  /tmp/cc1QyFkl.s 			page 31


 686:./Lib/Src/stm32f4xx_can.c **** 
 687:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN_Group2 CAN Frames Transmission functions
 688:./Lib/Src/stm32f4xx_can.c ****  *  @brief    CAN Frames Transmission functions 
 689:./Lib/Src/stm32f4xx_can.c ****  *
 690:./Lib/Src/stm32f4xx_can.c **** @verbatim    
 691:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
 692:./Lib/Src/stm32f4xx_can.c ****                 ##### CAN Frames Transmission functions #####
 693:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================  
 694:./Lib/Src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 695:./Lib/Src/stm32f4xx_can.c ****       (+) Initiate and transmit a CAN frame message (if there is an empty mailbox).
 696:./Lib/Src/stm32f4xx_can.c ****       (+) Check the transmission status of a CAN Frame
 697:./Lib/Src/stm32f4xx_can.c ****       (+) Cancel a transmit request
 698:./Lib/Src/stm32f4xx_can.c ****    
 699:./Lib/Src/stm32f4xx_can.c **** @endverbatim
 700:./Lib/Src/stm32f4xx_can.c ****   * @{
 701:./Lib/Src/stm32f4xx_can.c ****   */
 702:./Lib/Src/stm32f4xx_can.c **** 
 703:./Lib/Src/stm32f4xx_can.c **** /**
 704:./Lib/Src/stm32f4xx_can.c ****   * @brief  Initiates and transmits a CAN frame message.
 705:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 706:./Lib/Src/stm32f4xx_can.c ****   * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
 707:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 708:./Lib/Src/stm32f4xx_can.c ****   * @retval The number of the mailbox that is used for transmission or
 709:./Lib/Src/stm32f4xx_can.c ****   *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
 710:./Lib/Src/stm32f4xx_can.c ****   */
 711:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
 712:./Lib/Src/stm32f4xx_can.c **** {
 1000              		.loc 1 712 1
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 16
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 1005 0000 80B4     		push	{r7}
 1006              		.cfi_def_cfa_offset 4
 1007              		.cfi_offset 7, -4
 1008 0002 85B0     		sub	sp, sp, #20
 1009              		.cfi_def_cfa_offset 24
 1010 0004 00AF     		add	r7, sp, #0
 1011              		.cfi_def_cfa_register 7
 1012 0006 7860     		str	r0, [r7, #4]
 1013 0008 3960     		str	r1, [r7]
 713:./Lib/Src/stm32f4xx_can.c ****   uint8_t transmit_mailbox = 0;
 1014              		.loc 1 713 11
 1015 000a 0023     		movs	r3, #0
 1016 000c FB73     		strb	r3, [r7, #15]
 714:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 715:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 716:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
 717:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_RTR(TxMessage->RTR));
 718:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_DLC(TxMessage->DLC));
 719:./Lib/Src/stm32f4xx_can.c **** 
 720:./Lib/Src/stm32f4xx_can.c ****   /* Select one empty transmit mailbox */
 721:./Lib/Src/stm32f4xx_can.c ****   if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 1017              		.loc 1 721 12
 1018 000e 7B68     		ldr	r3, [r7, #4]
 1019 0010 9B68     		ldr	r3, [r3, #8]
 1020              		.loc 1 721 17
ARM GAS  /tmp/cc1QyFkl.s 			page 32


 1021 0012 03F08063 		and	r3, r3, #67108864
 1022              		.loc 1 721 6
 1023 0016 B3F1806F 		cmp	r3, #67108864
 1024 001a 02D1     		bne	.L53
 722:./Lib/Src/stm32f4xx_can.c ****   {
 723:./Lib/Src/stm32f4xx_can.c ****     transmit_mailbox = 0;
 1025              		.loc 1 723 22
 1026 001c 0023     		movs	r3, #0
 1027 001e FB73     		strb	r3, [r7, #15]
 1028 0020 15E0     		b	.L54
 1029              	.L53:
 724:./Lib/Src/stm32f4xx_can.c ****   }
 725:./Lib/Src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 1030              		.loc 1 725 17
 1031 0022 7B68     		ldr	r3, [r7, #4]
 1032 0024 9B68     		ldr	r3, [r3, #8]
 1033              		.loc 1 725 22
 1034 0026 03F00063 		and	r3, r3, #134217728
 1035              		.loc 1 725 11
 1036 002a B3F1006F 		cmp	r3, #134217728
 1037 002e 02D1     		bne	.L55
 726:./Lib/Src/stm32f4xx_can.c ****   {
 727:./Lib/Src/stm32f4xx_can.c ****     transmit_mailbox = 1;
 1038              		.loc 1 727 22
 1039 0030 0123     		movs	r3, #1
 1040 0032 FB73     		strb	r3, [r7, #15]
 1041 0034 0BE0     		b	.L54
 1042              	.L55:
 728:./Lib/Src/stm32f4xx_can.c ****   }
 729:./Lib/Src/stm32f4xx_can.c ****   else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 1043              		.loc 1 729 17
 1044 0036 7B68     		ldr	r3, [r7, #4]
 1045 0038 9B68     		ldr	r3, [r3, #8]
 1046              		.loc 1 729 22
 1047 003a 03F08053 		and	r3, r3, #268435456
 1048              		.loc 1 729 11
 1049 003e B3F1805F 		cmp	r3, #268435456
 1050 0042 02D1     		bne	.L56
 730:./Lib/Src/stm32f4xx_can.c ****   {
 731:./Lib/Src/stm32f4xx_can.c ****     transmit_mailbox = 2;
 1051              		.loc 1 731 22
 1052 0044 0223     		movs	r3, #2
 1053 0046 FB73     		strb	r3, [r7, #15]
 1054 0048 01E0     		b	.L54
 1055              	.L56:
 732:./Lib/Src/stm32f4xx_can.c ****   }
 733:./Lib/Src/stm32f4xx_can.c ****   else
 734:./Lib/Src/stm32f4xx_can.c ****   {
 735:./Lib/Src/stm32f4xx_can.c ****     transmit_mailbox = CAN_TxStatus_NoMailBox;
 1056              		.loc 1 735 22
 1057 004a 0423     		movs	r3, #4
 1058 004c FB73     		strb	r3, [r7, #15]
 1059              	.L54:
 736:./Lib/Src/stm32f4xx_can.c ****   }
 737:./Lib/Src/stm32f4xx_can.c **** 
 738:./Lib/Src/stm32f4xx_can.c ****   if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 1060              		.loc 1 738 6
ARM GAS  /tmp/cc1QyFkl.s 			page 33


 1061 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1062 0050 042B     		cmp	r3, #4
 1063 0052 00F09F80 		beq	.L57
 739:./Lib/Src/stm32f4xx_can.c ****   {
 740:./Lib/Src/stm32f4xx_can.c ****     /* Set up the Id */
 741:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 1064              		.loc 1 741 39
 1065 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1066 0058 7A68     		ldr	r2, [r7, #4]
 1067 005a 1833     		adds	r3, r3, #24
 1068 005c 1B01     		lsls	r3, r3, #4
 1069 005e 1344     		add	r3, r3, r2
 1070 0060 1A68     		ldr	r2, [r3]
 1071 0062 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1072              		.loc 1 741 44
 1073 0064 02F00102 		and	r2, r2, #1
 1074 0068 7968     		ldr	r1, [r7, #4]
 1075 006a 1833     		adds	r3, r3, #24
 1076 006c 1B01     		lsls	r3, r3, #4
 1077 006e 0B44     		add	r3, r3, r1
 1078 0070 1A60     		str	r2, [r3]
 742:./Lib/Src/stm32f4xx_can.c ****     if (TxMessage->IDE == CAN_Id_Standard)
 1079              		.loc 1 742 18
 1080 0072 3B68     		ldr	r3, [r7]
 1081 0074 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1082              		.loc 1 742 8
 1083 0076 002B     		cmp	r3, #0
 1084 0078 13D1     		bne	.L58
 743:./Lib/Src/stm32f4xx_can.c ****     {
 744:./Lib/Src/stm32f4xx_can.c ****       assert_param(IS_CAN_STDID(TxMessage->StdId));  
 745:./Lib/Src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 1085              		.loc 1 745 41
 1086 007a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1087 007c 7A68     		ldr	r2, [r7, #4]
 1088 007e 1833     		adds	r3, r3, #24
 1089 0080 1B01     		lsls	r3, r3, #4
 1090 0082 1344     		add	r3, r3, r2
 1091 0084 1968     		ldr	r1, [r3]
 1092              		.loc 1 745 60
 1093 0086 3B68     		ldr	r3, [r7]
 1094 0088 1B68     		ldr	r3, [r3]
 1095              		.loc 1 745 68
 1096 008a 5B05     		lsls	r3, r3, #21
 746:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 1097              		.loc 1 746 60
 1098 008c 3A68     		ldr	r2, [r7]
 1099 008e 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 745:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 1100              		.loc 1 745 75
 1101 0090 1A43     		orrs	r2, r2, r3
 745:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 1102              		.loc 1 745 41
 1103 0092 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 745:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 1104              		.loc 1 745 46
 1105 0094 0A43     		orrs	r2, r2, r1
 1106 0096 7968     		ldr	r1, [r7, #4]
ARM GAS  /tmp/cc1QyFkl.s 			page 34


 1107 0098 1833     		adds	r3, r3, #24
 1108 009a 1B01     		lsls	r3, r3, #4
 1109 009c 0B44     		add	r3, r3, r1
 1110 009e 1A60     		str	r2, [r3]
 1111 00a0 15E0     		b	.L59
 1112              	.L58:
 747:./Lib/Src/stm32f4xx_can.c ****     }
 748:./Lib/Src/stm32f4xx_can.c ****     else
 749:./Lib/Src/stm32f4xx_can.c ****     {
 750:./Lib/Src/stm32f4xx_can.c ****       assert_param(IS_CAN_EXTID(TxMessage->ExtId));
 751:./Lib/Src/stm32f4xx_can.c ****       CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 1113              		.loc 1 751 41
 1114 00a2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1115 00a4 7A68     		ldr	r2, [r7, #4]
 1116 00a6 1833     		adds	r3, r3, #24
 1117 00a8 1B01     		lsls	r3, r3, #4
 1118 00aa 1344     		add	r3, r3, r2
 1119 00ac 1968     		ldr	r1, [r3]
 1120              		.loc 1 751 60
 1121 00ae 3B68     		ldr	r3, [r7]
 1122 00b0 5B68     		ldr	r3, [r3, #4]
 1123              		.loc 1 751 68
 1124 00b2 DB00     		lsls	r3, r3, #3
 752:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1125              		.loc 1 752 60
 1126 00b4 3A68     		ldr	r2, [r7]
 1127 00b6 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 751:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1128              		.loc 1 751 74
 1129 00b8 1343     		orrs	r3, r3, r2
 753:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->RTR);
 1130              		.loc 1 753 60
 1131 00ba 3A68     		ldr	r2, [r7]
 1132 00bc 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 752:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1133              		.loc 1 752 66
 1134 00be 1A43     		orrs	r2, r2, r3
 751:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1135              		.loc 1 751 41
 1136 00c0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 751:./Lib/Src/stm32f4xx_can.c ****                                                   TxMessage->IDE | \
 1137              		.loc 1 751 46
 1138 00c2 0A43     		orrs	r2, r2, r1
 1139 00c4 7968     		ldr	r1, [r7, #4]
 1140 00c6 1833     		adds	r3, r3, #24
 1141 00c8 1B01     		lsls	r3, r3, #4
 1142 00ca 0B44     		add	r3, r3, r1
 1143 00cc 1A60     		str	r2, [r3]
 1144              	.L59:
 754:./Lib/Src/stm32f4xx_can.c ****     }
 755:./Lib/Src/stm32f4xx_can.c ****     
 756:./Lib/Src/stm32f4xx_can.c ****     /* Set up the DLC */
 757:./Lib/Src/stm32f4xx_can.c ****     TxMessage->DLC &= (uint8_t)0x0000000F;
 1145              		.loc 1 757 14
 1146 00ce 3B68     		ldr	r3, [r7]
 1147 00d0 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1148              		.loc 1 757 20
ARM GAS  /tmp/cc1QyFkl.s 			page 35


 1149 00d2 03F00F03 		and	r3, r3, #15
 1150 00d6 DAB2     		uxtb	r2, r3
 1151 00d8 3B68     		ldr	r3, [r7]
 1152 00da 9A72     		strb	r2, [r3, #10]
 758:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 1153              		.loc 1 758 39
 1154 00dc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1155 00de 7A68     		ldr	r2, [r7, #4]
 1156 00e0 1833     		adds	r3, r3, #24
 1157 00e2 1B01     		lsls	r3, r3, #4
 1158 00e4 1344     		add	r3, r3, r2
 1159 00e6 0433     		adds	r3, r3, #4
 1160 00e8 1A68     		ldr	r2, [r3]
 1161 00ea FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1162              		.loc 1 758 45
 1163 00ec 22F00F02 		bic	r2, r2, #15
 1164 00f0 7968     		ldr	r1, [r7, #4]
 1165 00f2 1833     		adds	r3, r3, #24
 1166 00f4 1B01     		lsls	r3, r3, #4
 1167 00f6 0B44     		add	r3, r3, r1
 1168 00f8 0433     		adds	r3, r3, #4
 1169 00fa 1A60     		str	r2, [r3]
 759:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 1170              		.loc 1 759 39
 1171 00fc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1172 00fe 7A68     		ldr	r2, [r7, #4]
 1173 0100 1833     		adds	r3, r3, #24
 1174 0102 1B01     		lsls	r3, r3, #4
 1175 0104 1344     		add	r3, r3, r2
 1176 0106 0433     		adds	r3, r3, #4
 1177 0108 1A68     		ldr	r2, [r3]
 1178              		.loc 1 759 57
 1179 010a 3B68     		ldr	r3, [r7]
 1180 010c 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 1181 010e 1946     		mov	r1, r3
 1182              		.loc 1 759 39
 1183 0110 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1184              		.loc 1 759 45
 1185 0112 0A43     		orrs	r2, r2, r1
 1186 0114 7968     		ldr	r1, [r7, #4]
 1187 0116 1833     		adds	r3, r3, #24
 1188 0118 1B01     		lsls	r3, r3, #4
 1189 011a 0B44     		add	r3, r3, r1
 1190 011c 0433     		adds	r3, r3, #4
 1191 011e 1A60     		str	r2, [r3]
 760:./Lib/Src/stm32f4xx_can.c **** 
 761:./Lib/Src/stm32f4xx_can.c ****     /* Set up the data field */
 762:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 1192              		.loc 1 762 74
 1193 0120 3B68     		ldr	r3, [r7]
 1194 0122 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 1195              		.loc 1 762 78
 1196 0124 1A06     		lsls	r2, r3, #24
 763:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 1197              		.loc 1 763 72
 1198 0126 3B68     		ldr	r3, [r7]
 1199 0128 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
ARM GAS  /tmp/cc1QyFkl.s 			page 36


 1200              		.loc 1 763 76
 1201 012a 1B04     		lsls	r3, r3, #16
 762:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 1202              		.loc 1 762 85
 1203 012c 1A43     		orrs	r2, r2, r3
 764:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 1204              		.loc 1 764 72
 1205 012e 3B68     		ldr	r3, [r7]
 1206 0130 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1207              		.loc 1 764 76
 1208 0132 1B02     		lsls	r3, r3, #8
 763:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 1209              		.loc 1 763 83
 1210 0134 1A43     		orrs	r2, r2, r3
 765:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[0]));
 1211              		.loc 1 765 72
 1212 0136 3B68     		ldr	r3, [r7]
 1213 0138 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1214              		.loc 1 765 47
 1215 013a 1946     		mov	r1, r3
 762:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 1216              		.loc 1 762 39
 1217 013c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 764:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[1] << 8) | 
 1218              		.loc 1 764 82
 1219 013e 0A43     		orrs	r2, r2, r1
 762:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[2] << 16) |
 1220              		.loc 1 762 45
 1221 0140 7968     		ldr	r1, [r7, #4]
 1222 0142 1B01     		lsls	r3, r3, #4
 1223 0144 0B44     		add	r3, r3, r1
 1224 0146 03F5C473 		add	r3, r3, #392
 1225 014a 1A60     		str	r2, [r3]
 766:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 1226              		.loc 1 766 74
 1227 014c 3B68     		ldr	r3, [r7]
 1228 014e 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1229              		.loc 1 766 78
 1230 0150 1A06     		lsls	r2, r3, #24
 767:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 1231              		.loc 1 767 72
 1232 0152 3B68     		ldr	r3, [r7]
 1233 0154 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1234              		.loc 1 767 76
 1235 0156 1B04     		lsls	r3, r3, #16
 766:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 1236              		.loc 1 766 85
 1237 0158 1A43     		orrs	r2, r2, r3
 768:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 1238              		.loc 1 768 72
 1239 015a 3B68     		ldr	r3, [r7]
 1240 015c 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1241              		.loc 1 768 76
 1242 015e 1B02     		lsls	r3, r3, #8
 767:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 1243              		.loc 1 767 83
 1244 0160 1A43     		orrs	r2, r2, r3
ARM GAS  /tmp/cc1QyFkl.s 			page 37


 769:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[4]));
 1245              		.loc 1 769 72
 1246 0162 3B68     		ldr	r3, [r7]
 1247 0164 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 1248              		.loc 1 769 47
 1249 0166 1946     		mov	r1, r3
 766:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 1250              		.loc 1 766 39
 1251 0168 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 768:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[5] << 8) |
 1252              		.loc 1 768 82
 1253 016a 0A43     		orrs	r2, r2, r1
 766:./Lib/Src/stm32f4xx_can.c ****                                              ((uint32_t)TxMessage->Data[6] << 16) |
 1254              		.loc 1 766 45
 1255 016c 7968     		ldr	r1, [r7, #4]
 1256 016e 1B01     		lsls	r3, r3, #4
 1257 0170 0B44     		add	r3, r3, r1
 1258 0172 03F5C673 		add	r3, r3, #396
 1259 0176 1A60     		str	r2, [r3]
 770:./Lib/Src/stm32f4xx_can.c ****     /* Request transmission */
 771:./Lib/Src/stm32f4xx_can.c ****     CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 1260              		.loc 1 771 39
 1261 0178 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1262 017a 7A68     		ldr	r2, [r7, #4]
 1263 017c 1833     		adds	r3, r3, #24
 1264 017e 1B01     		lsls	r3, r3, #4
 1265 0180 1344     		add	r3, r3, r2
 1266 0182 1A68     		ldr	r2, [r3]
 1267 0184 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1268              		.loc 1 771 44
 1269 0186 42F00102 		orr	r2, r2, #1
 1270 018a 7968     		ldr	r1, [r7, #4]
 1271 018c 1833     		adds	r3, r3, #24
 1272 018e 1B01     		lsls	r3, r3, #4
 1273 0190 0B44     		add	r3, r3, r1
 1274 0192 1A60     		str	r2, [r3]
 1275              	.L57:
 772:./Lib/Src/stm32f4xx_can.c ****   }
 773:./Lib/Src/stm32f4xx_can.c ****   return transmit_mailbox;
 1276              		.loc 1 773 10
 1277 0194 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 774:./Lib/Src/stm32f4xx_can.c **** }
 1278              		.loc 1 774 1
 1279 0196 1846     		mov	r0, r3
 1280 0198 1437     		adds	r7, r7, #20
 1281              		.cfi_def_cfa_offset 4
 1282 019a BD46     		mov	sp, r7
 1283              		.cfi_def_cfa_register 13
 1284              		@ sp needed
 1285 019c 5DF8047B 		ldr	r7, [sp], #4
 1286              		.cfi_restore 7
 1287              		.cfi_def_cfa_offset 0
 1288 01a0 7047     		bx	lr
 1289              		.cfi_endproc
 1290              	.LFE130:
 1292              		.section	.text.CAN_TransmitStatus,"ax",%progbits
 1293              		.align	1
ARM GAS  /tmp/cc1QyFkl.s 			page 38


 1294              		.global	CAN_TransmitStatus
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1299              	CAN_TransmitStatus:
 1300              	.LFB131:
 775:./Lib/Src/stm32f4xx_can.c **** 
 776:./Lib/Src/stm32f4xx_can.c **** /**
 777:./Lib/Src/stm32f4xx_can.c ****   * @brief  Checks the transmission status of a CAN Frame.
 778:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 779:./Lib/Src/stm32f4xx_can.c ****   * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
 780:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 781:./Lib/Src/stm32f4xx_can.c ****   * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
 782:./Lib/Src/stm32f4xx_can.c ****   *         CAN_TxStatus_Failed in an other case.
 783:./Lib/Src/stm32f4xx_can.c ****   */
 784:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
 785:./Lib/Src/stm32f4xx_can.c **** {
 1301              		.loc 1 785 1
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 16
 1304              		@ frame_needed = 1, uses_anonymous_args = 0
 1305              		@ link register save eliminated.
 1306 0000 80B4     		push	{r7}
 1307              		.cfi_def_cfa_offset 4
 1308              		.cfi_offset 7, -4
 1309 0002 85B0     		sub	sp, sp, #20
 1310              		.cfi_def_cfa_offset 24
 1311 0004 00AF     		add	r7, sp, #0
 1312              		.cfi_def_cfa_register 7
 1313 0006 7860     		str	r0, [r7, #4]
 1314 0008 0B46     		mov	r3, r1
 1315 000a FB70     		strb	r3, [r7, #3]
 786:./Lib/Src/stm32f4xx_can.c ****   uint32_t state = 0;
 1316              		.loc 1 786 12
 1317 000c 0023     		movs	r3, #0
 1318 000e FB60     		str	r3, [r7, #12]
 787:./Lib/Src/stm32f4xx_can.c **** 
 788:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 789:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 790:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 791:./Lib/Src/stm32f4xx_can.c ****  
 792:./Lib/Src/stm32f4xx_can.c ****   switch (TransmitMailbox)
 1319              		.loc 1 792 3
 1320 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1321 0012 022B     		cmp	r3, #2
 1322 0014 12D0     		beq	.L62
 1323 0016 022B     		cmp	r3, #2
 1324 0018 16DC     		bgt	.L63
 1325 001a 002B     		cmp	r3, #0
 1326 001c 02D0     		beq	.L64
 1327 001e 012B     		cmp	r3, #1
 1328 0020 06D0     		beq	.L65
 1329 0022 11E0     		b	.L63
 1330              	.L64:
 793:./Lib/Src/stm32f4xx_can.c ****   {
 794:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): 
 795:./Lib/Src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
ARM GAS  /tmp/cc1QyFkl.s 			page 39


 1331              		.loc 1 795 21
 1332 0024 7B68     		ldr	r3, [r7, #4]
 1333 0026 9A68     		ldr	r2, [r3, #8]
 1334              		.loc 1 795 13
 1335 0028 314B     		ldr	r3, .L77
 1336 002a 1340     		ands	r3, r3, r2
 1337 002c FB60     		str	r3, [r7, #12]
 796:./Lib/Src/stm32f4xx_can.c ****       break;
 1338              		.loc 1 796 7
 1339 002e 0EE0     		b	.L66
 1340              	.L65:
 797:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): 
 798:./Lib/Src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 1341              		.loc 1 798 21
 1342 0030 7B68     		ldr	r3, [r7, #4]
 1343 0032 9A68     		ldr	r2, [r3, #8]
 1344              		.loc 1 798 13
 1345 0034 2F4B     		ldr	r3, .L77+4
 1346 0036 1340     		ands	r3, r3, r2
 1347 0038 FB60     		str	r3, [r7, #12]
 799:./Lib/Src/stm32f4xx_can.c ****       break;
 1348              		.loc 1 799 7
 1349 003a 08E0     		b	.L66
 1350              	.L62:
 800:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): 
 801:./Lib/Src/stm32f4xx_can.c ****       state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 1351              		.loc 1 801 21
 1352 003c 7B68     		ldr	r3, [r7, #4]
 1353 003e 9A68     		ldr	r2, [r3, #8]
 1354              		.loc 1 801 13
 1355 0040 2D4B     		ldr	r3, .L77+8
 1356 0042 1340     		ands	r3, r3, r2
 1357 0044 FB60     		str	r3, [r7, #12]
 802:./Lib/Src/stm32f4xx_can.c ****       break;
 1358              		.loc 1 802 7
 1359 0046 02E0     		b	.L66
 1360              	.L63:
 803:./Lib/Src/stm32f4xx_can.c ****     default:
 804:./Lib/Src/stm32f4xx_can.c ****       state = CAN_TxStatus_Failed;
 1361              		.loc 1 804 13
 1362 0048 0023     		movs	r3, #0
 1363 004a FB60     		str	r3, [r7, #12]
 805:./Lib/Src/stm32f4xx_can.c ****       break;
 1364              		.loc 1 805 7
 1365 004c 00BF     		nop
 1366              	.L66:
 806:./Lib/Src/stm32f4xx_can.c ****   }
 807:./Lib/Src/stm32f4xx_can.c ****   switch (state)
 1367              		.loc 1 807 3
 1368 004e FB68     		ldr	r3, [r7, #12]
 1369 0050 294A     		ldr	r2, .L77+8
 1370 0052 9342     		cmp	r3, r2
 1371 0054 3DD0     		beq	.L67
 1372 0056 FB68     		ldr	r3, [r7, #12]
 1373 0058 274A     		ldr	r2, .L77+8
 1374 005a 9342     		cmp	r3, r2
 1375 005c 3CD8     		bhi	.L68
ARM GAS  /tmp/cc1QyFkl.s 			page 40


 1376 005e FB68     		ldr	r3, [r7, #12]
 1377 0060 264A     		ldr	r2, .L77+12
 1378 0062 9342     		cmp	r3, r2
 1379 0064 2CD0     		beq	.L69
 1380 0066 FB68     		ldr	r3, [r7, #12]
 1381 0068 244A     		ldr	r2, .L77+12
 1382 006a 9342     		cmp	r3, r2
 1383 006c 34D8     		bhi	.L68
 1384 006e FB68     		ldr	r3, [r7, #12]
 1385 0070 204A     		ldr	r2, .L77+4
 1386 0072 9342     		cmp	r3, r2
 1387 0074 2AD0     		beq	.L70
 1388 0076 FB68     		ldr	r3, [r7, #12]
 1389 0078 1E4A     		ldr	r2, .L77+4
 1390 007a 9342     		cmp	r3, r2
 1391 007c 2CD8     		bhi	.L68
 1392 007e FB68     		ldr	r3, [r7, #12]
 1393 0080 1F4A     		ldr	r2, .L77+16
 1394 0082 9342     		cmp	r3, r2
 1395 0084 19D0     		beq	.L71
 1396 0086 FB68     		ldr	r3, [r7, #12]
 1397 0088 1D4A     		ldr	r2, .L77+16
 1398 008a 9342     		cmp	r3, r2
 1399 008c 24D8     		bhi	.L68
 1400 008e FB68     		ldr	r3, [r7, #12]
 1401 0090 174A     		ldr	r2, .L77
 1402 0092 9342     		cmp	r3, r2
 1403 0094 17D0     		beq	.L72
 1404 0096 FB68     		ldr	r3, [r7, #12]
 1405 0098 154A     		ldr	r2, .L77
 1406 009a 9342     		cmp	r3, r2
 1407 009c 1CD8     		bhi	.L68
 1408 009e FB68     		ldr	r3, [r7, #12]
 1409 00a0 002B     		cmp	r3, #0
 1410 00a2 04D0     		beq	.L73
 1411 00a4 FB68     		ldr	r3, [r7, #12]
 1412 00a6 174A     		ldr	r2, .L77+20
 1413 00a8 9342     		cmp	r3, r2
 1414 00aa 03D0     		beq	.L74
 1415 00ac 14E0     		b	.L68
 1416              	.L73:
 808:./Lib/Src/stm32f4xx_can.c ****   {
 809:./Lib/Src/stm32f4xx_can.c ****       /* transmit pending  */
 810:./Lib/Src/stm32f4xx_can.c ****     case (0x0): state = CAN_TxStatus_Pending;
 1417              		.loc 1 810 23
 1418 00ae 0223     		movs	r3, #2
 1419 00b0 FB60     		str	r3, [r7, #12]
 811:./Lib/Src/stm32f4xx_can.c ****       break;
 1420              		.loc 1 811 7
 1421 00b2 14E0     		b	.L75
 1422              	.L74:
 812:./Lib/Src/stm32f4xx_can.c ****       /* transmit failed  */
 813:./Lib/Src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 1423              		.loc 1 813 49
 1424 00b4 0023     		movs	r3, #0
 1425 00b6 FB60     		str	r3, [r7, #12]
 814:./Lib/Src/stm32f4xx_can.c ****       break;
ARM GAS  /tmp/cc1QyFkl.s 			page 41


 1426              		.loc 1 814 7
 1427 00b8 11E0     		b	.L75
 1428              	.L71:
 815:./Lib/Src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 1429              		.loc 1 815 49
 1430 00ba 0023     		movs	r3, #0
 1431 00bc FB60     		str	r3, [r7, #12]
 816:./Lib/Src/stm32f4xx_can.c ****       break;
 1432              		.loc 1 816 7
 1433 00be 0EE0     		b	.L75
 1434              	.L69:
 817:./Lib/Src/stm32f4xx_can.c ****      case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 1435              		.loc 1 817 49
 1436 00c0 0023     		movs	r3, #0
 1437 00c2 FB60     		str	r3, [r7, #12]
 818:./Lib/Src/stm32f4xx_can.c ****       break;
 1438              		.loc 1 818 7
 1439 00c4 0BE0     		b	.L75
 1440              	.L72:
 819:./Lib/Src/stm32f4xx_can.c ****       /* transmit succeeded  */
 820:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 1441              		.loc 1 820 63
 1442 00c6 0123     		movs	r3, #1
 1443 00c8 FB60     		str	r3, [r7, #12]
 821:./Lib/Src/stm32f4xx_can.c ****       break;
 1444              		.loc 1 821 7
 1445 00ca 08E0     		b	.L75
 1446              	.L70:
 822:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 1447              		.loc 1 822 63
 1448 00cc 0123     		movs	r3, #1
 1449 00ce FB60     		str	r3, [r7, #12]
 823:./Lib/Src/stm32f4xx_can.c ****       break;
 1450              		.loc 1 823 7
 1451 00d0 05E0     		b	.L75
 1452              	.L67:
 824:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 1453              		.loc 1 824 63
 1454 00d2 0123     		movs	r3, #1
 1455 00d4 FB60     		str	r3, [r7, #12]
 825:./Lib/Src/stm32f4xx_can.c ****       break;
 1456              		.loc 1 825 7
 1457 00d6 02E0     		b	.L75
 1458              	.L68:
 826:./Lib/Src/stm32f4xx_can.c ****     default: state = CAN_TxStatus_Failed;
 1459              		.loc 1 826 20
 1460 00d8 0023     		movs	r3, #0
 1461 00da FB60     		str	r3, [r7, #12]
 827:./Lib/Src/stm32f4xx_can.c ****       break;
 1462              		.loc 1 827 7
 1463 00dc 00BF     		nop
 1464              	.L75:
 828:./Lib/Src/stm32f4xx_can.c ****   }
 829:./Lib/Src/stm32f4xx_can.c ****   return (uint8_t) state;
 1465              		.loc 1 829 10
 1466 00de FB68     		ldr	r3, [r7, #12]
 1467 00e0 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc1QyFkl.s 			page 42


 830:./Lib/Src/stm32f4xx_can.c **** }
 1468              		.loc 1 830 1
 1469 00e2 1846     		mov	r0, r3
 1470 00e4 1437     		adds	r7, r7, #20
 1471              		.cfi_def_cfa_offset 4
 1472 00e6 BD46     		mov	sp, r7
 1473              		.cfi_def_cfa_register 13
 1474              		@ sp needed
 1475 00e8 5DF8047B 		ldr	r7, [sp], #4
 1476              		.cfi_restore 7
 1477              		.cfi_def_cfa_offset 0
 1478 00ec 7047     		bx	lr
 1479              	.L78:
 1480 00ee 00BF     		.align	2
 1481              	.L77:
 1482 00f0 03000004 		.word	67108867
 1483 00f4 00030008 		.word	134218496
 1484 00f8 00000310 		.word	268632064
 1485 00fc 00000110 		.word	268500992
 1486 0100 00010008 		.word	134217984
 1487 0104 01000004 		.word	67108865
 1488              		.cfi_endproc
 1489              	.LFE131:
 1491              		.section	.text.CAN_CancelTransmit,"ax",%progbits
 1492              		.align	1
 1493              		.global	CAN_CancelTransmit
 1494              		.syntax unified
 1495              		.thumb
 1496              		.thumb_func
 1498              	CAN_CancelTransmit:
 1499              	.LFB132:
 831:./Lib/Src/stm32f4xx_can.c **** 
 832:./Lib/Src/stm32f4xx_can.c **** /**
 833:./Lib/Src/stm32f4xx_can.c ****   * @brief  Cancels a transmit request.
 834:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 835:./Lib/Src/stm32f4xx_can.c ****   * @param  Mailbox: Mailbox number.
 836:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 837:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 838:./Lib/Src/stm32f4xx_can.c ****   */
 839:./Lib/Src/stm32f4xx_can.c **** void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
 840:./Lib/Src/stm32f4xx_can.c **** {
 1500              		.loc 1 840 1
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 8
 1503              		@ frame_needed = 1, uses_anonymous_args = 0
 1504              		@ link register save eliminated.
 1505 0000 80B4     		push	{r7}
 1506              		.cfi_def_cfa_offset 4
 1507              		.cfi_offset 7, -4
 1508 0002 83B0     		sub	sp, sp, #12
 1509              		.cfi_def_cfa_offset 16
 1510 0004 00AF     		add	r7, sp, #0
 1511              		.cfi_def_cfa_register 7
 1512 0006 7860     		str	r0, [r7, #4]
 1513 0008 0B46     		mov	r3, r1
 1514 000a FB70     		strb	r3, [r7, #3]
 841:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
ARM GAS  /tmp/cc1QyFkl.s 			page 43


 842:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 843:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
 844:./Lib/Src/stm32f4xx_can.c ****   /* abort transmission */
 845:./Lib/Src/stm32f4xx_can.c ****   switch (Mailbox)
 1515              		.loc 1 845 3
 1516 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1517 000e 022B     		cmp	r3, #2
 1518 0010 0FD0     		beq	.L80
 1519 0012 022B     		cmp	r3, #2
 1520 0014 12DC     		bgt	.L85
 1521 0016 002B     		cmp	r3, #0
 1522 0018 02D0     		beq	.L82
 1523 001a 012B     		cmp	r3, #1
 1524 001c 04D0     		beq	.L83
 846:./Lib/Src/stm32f4xx_can.c ****   {
 847:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_0): CANx->TSR = CAN_TSR_ABRQ0;
 848:./Lib/Src/stm32f4xx_can.c ****       break;
 849:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR = CAN_TSR_ABRQ1;
 850:./Lib/Src/stm32f4xx_can.c ****       break;
 851:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR = CAN_TSR_ABRQ2;
 852:./Lib/Src/stm32f4xx_can.c ****       break;
 853:./Lib/Src/stm32f4xx_can.c ****     default:
 854:./Lib/Src/stm32f4xx_can.c ****       break;
 1525              		.loc 1 854 7
 1526 001e 0DE0     		b	.L85
 1527              	.L82:
 847:./Lib/Src/stm32f4xx_can.c ****       break;
 1528              		.loc 1 847 39
 1529 0020 7B68     		ldr	r3, [r7, #4]
 1530 0022 8022     		movs	r2, #128
 1531 0024 9A60     		str	r2, [r3, #8]
 848:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_1): CANx->TSR = CAN_TSR_ABRQ1;
 1532              		.loc 1 848 7
 1533 0026 0AE0     		b	.L84
 1534              	.L83:
 849:./Lib/Src/stm32f4xx_can.c ****       break;
 1535              		.loc 1 849 39
 1536 0028 7B68     		ldr	r3, [r7, #4]
 1537 002a 4FF40042 		mov	r2, #32768
 1538 002e 9A60     		str	r2, [r3, #8]
 850:./Lib/Src/stm32f4xx_can.c ****     case (CAN_TXMAILBOX_2): CANx->TSR = CAN_TSR_ABRQ2;
 1539              		.loc 1 850 7
 1540 0030 05E0     		b	.L84
 1541              	.L80:
 851:./Lib/Src/stm32f4xx_can.c ****       break;
 1542              		.loc 1 851 39
 1543 0032 7B68     		ldr	r3, [r7, #4]
 1544 0034 4FF40002 		mov	r2, #8388608
 1545 0038 9A60     		str	r2, [r3, #8]
 852:./Lib/Src/stm32f4xx_can.c ****     default:
 1546              		.loc 1 852 7
 1547 003a 00E0     		b	.L84
 1548              	.L85:
 1549              		.loc 1 854 7
 1550 003c 00BF     		nop
 1551              	.L84:
 855:./Lib/Src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/cc1QyFkl.s 			page 44


 856:./Lib/Src/stm32f4xx_can.c **** }
 1552              		.loc 1 856 1
 1553 003e 00BF     		nop
 1554 0040 0C37     		adds	r7, r7, #12
 1555              		.cfi_def_cfa_offset 4
 1556 0042 BD46     		mov	sp, r7
 1557              		.cfi_def_cfa_register 13
 1558              		@ sp needed
 1559 0044 5DF8047B 		ldr	r7, [sp], #4
 1560              		.cfi_restore 7
 1561              		.cfi_def_cfa_offset 0
 1562 0048 7047     		bx	lr
 1563              		.cfi_endproc
 1564              	.LFE132:
 1566              		.section	.text.CAN_Receive,"ax",%progbits
 1567              		.align	1
 1568              		.global	CAN_Receive
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1573              	CAN_Receive:
 1574              	.LFB133:
 857:./Lib/Src/stm32f4xx_can.c **** /**
 858:./Lib/Src/stm32f4xx_can.c ****   * @}
 859:./Lib/Src/stm32f4xx_can.c ****   */
 860:./Lib/Src/stm32f4xx_can.c **** 
 861:./Lib/Src/stm32f4xx_can.c **** 
 862:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN_Group3 CAN Frames Reception functions
 863:./Lib/Src/stm32f4xx_can.c ****  *  @brief    CAN Frames Reception functions 
 864:./Lib/Src/stm32f4xx_can.c ****  *
 865:./Lib/Src/stm32f4xx_can.c **** @verbatim    
 866:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
 867:./Lib/Src/stm32f4xx_can.c ****                 ##### CAN Frames Reception functions #####
 868:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================  
 869:./Lib/Src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
 870:./Lib/Src/stm32f4xx_can.c ****       (+) Receive a correct CAN frame
 871:./Lib/Src/stm32f4xx_can.c ****       (+) Release a specified receive FIFO (2 FIFOs are available)
 872:./Lib/Src/stm32f4xx_can.c ****       (+) Return the number of the pending received CAN frames
 873:./Lib/Src/stm32f4xx_can.c ****    
 874:./Lib/Src/stm32f4xx_can.c **** @endverbatim
 875:./Lib/Src/stm32f4xx_can.c ****   * @{
 876:./Lib/Src/stm32f4xx_can.c ****   */
 877:./Lib/Src/stm32f4xx_can.c **** 
 878:./Lib/Src/stm32f4xx_can.c **** /**
 879:./Lib/Src/stm32f4xx_can.c ****   * @brief  Receives a correct CAN frame.
 880:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 881:./Lib/Src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 882:./Lib/Src/stm32f4xx_can.c ****   * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
 883:./Lib/Src/stm32f4xx_can.c ****   *         CAN DLC, CAN data and FMI number.
 884:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 885:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 886:./Lib/Src/stm32f4xx_can.c ****   */
 887:./Lib/Src/stm32f4xx_can.c **** void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
 888:./Lib/Src/stm32f4xx_can.c **** {
 1575              		.loc 1 888 1
 1576              		.cfi_startproc
 1577              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc1QyFkl.s 			page 45


 1578              		@ frame_needed = 1, uses_anonymous_args = 0
 1579              		@ link register save eliminated.
 1580 0000 80B4     		push	{r7}
 1581              		.cfi_def_cfa_offset 4
 1582              		.cfi_offset 7, -4
 1583 0002 85B0     		sub	sp, sp, #20
 1584              		.cfi_def_cfa_offset 24
 1585 0004 00AF     		add	r7, sp, #0
 1586              		.cfi_def_cfa_register 7
 1587 0006 F860     		str	r0, [r7, #12]
 1588 0008 0B46     		mov	r3, r1
 1589 000a 7A60     		str	r2, [r7, #4]
 1590 000c FB72     		strb	r3, [r7, #11]
 889:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 890:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 891:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 892:./Lib/Src/stm32f4xx_can.c ****   /* Get the Id */
 893:./Lib/Src/stm32f4xx_can.c ****   RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1591              		.loc 1 893 66
 1592 000e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1593 0010 FA68     		ldr	r2, [r7, #12]
 1594 0012 1B33     		adds	r3, r3, #27
 1595 0014 1B01     		lsls	r3, r3, #4
 1596 0016 1344     		add	r3, r3, r2
 1597 0018 1B68     		ldr	r3, [r3]
 1598              		.loc 1 893 34
 1599 001a DBB2     		uxtb	r3, r3
 1600 001c 03F00403 		and	r3, r3, #4
 1601 0020 DAB2     		uxtb	r2, r3
 1602              		.loc 1 893 18
 1603 0022 7B68     		ldr	r3, [r7, #4]
 1604 0024 1A72     		strb	r2, [r3, #8]
 894:./Lib/Src/stm32f4xx_can.c ****   if (RxMessage->IDE == CAN_Id_Standard)
 1605              		.loc 1 894 16
 1606 0026 7B68     		ldr	r3, [r7, #4]
 1607 0028 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1608              		.loc 1 894 6
 1609 002a 002B     		cmp	r3, #0
 1610 002c 0BD1     		bne	.L87
 895:./Lib/Src/stm32f4xx_can.c ****   {
 896:./Lib/Src/stm32f4xx_can.c ****     RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 1611              		.loc 1 896 78
 1612 002e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1613 0030 FA68     		ldr	r2, [r7, #12]
 1614 0032 1B33     		adds	r3, r3, #27
 1615 0034 1B01     		lsls	r3, r3, #4
 1616 0036 1344     		add	r3, r3, r2
 1617 0038 1B68     		ldr	r3, [r3]
 1618              		.loc 1 896 83
 1619 003a 5B0D     		lsrs	r3, r3, #21
 1620              		.loc 1 896 45
 1621 003c C3F30A02 		ubfx	r2, r3, #0, #11
 1622              		.loc 1 896 22
 1623 0040 7B68     		ldr	r3, [r7, #4]
 1624 0042 1A60     		str	r2, [r3]
 1625 0044 0AE0     		b	.L88
 1626              	.L87:
ARM GAS  /tmp/cc1QyFkl.s 			page 46


 897:./Lib/Src/stm32f4xx_can.c ****   }
 898:./Lib/Src/stm32f4xx_can.c ****   else
 899:./Lib/Src/stm32f4xx_can.c ****   {
 900:./Lib/Src/stm32f4xx_can.c ****     RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 1627              		.loc 1 900 78
 1628 0046 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1629 0048 FA68     		ldr	r2, [r7, #12]
 1630 004a 1B33     		adds	r3, r3, #27
 1631 004c 1B01     		lsls	r3, r3, #4
 1632 004e 1344     		add	r3, r3, r2
 1633 0050 1B68     		ldr	r3, [r3]
 1634              		.loc 1 900 83
 1635 0052 DB08     		lsrs	r3, r3, #3
 1636              		.loc 1 900 45
 1637 0054 23F06042 		bic	r2, r3, #-536870912
 1638              		.loc 1 900 22
 1639 0058 7B68     		ldr	r3, [r7, #4]
 1640 005a 5A60     		str	r2, [r3, #4]
 1641              	.L88:
 901:./Lib/Src/stm32f4xx_can.c ****   }
 902:./Lib/Src/stm32f4xx_can.c ****   
 903:./Lib/Src/stm32f4xx_can.c ****   RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 1642              		.loc 1 903 66
 1643 005c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1644 005e FA68     		ldr	r2, [r7, #12]
 1645 0060 1B33     		adds	r3, r3, #27
 1646 0062 1B01     		lsls	r3, r3, #4
 1647 0064 1344     		add	r3, r3, r2
 1648 0066 1B68     		ldr	r3, [r3]
 1649              		.loc 1 903 34
 1650 0068 DBB2     		uxtb	r3, r3
 1651 006a 03F00203 		and	r3, r3, #2
 1652 006e DAB2     		uxtb	r2, r3
 1653              		.loc 1 903 18
 1654 0070 7B68     		ldr	r3, [r7, #4]
 1655 0072 5A72     		strb	r2, [r3, #9]
 904:./Lib/Src/stm32f4xx_can.c ****   /* Get the DLC */
 905:./Lib/Src/stm32f4xx_can.c ****   RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 1656              		.loc 1 905 66
 1657 0074 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1658 0076 FA68     		ldr	r2, [r7, #12]
 1659 0078 1B33     		adds	r3, r3, #27
 1660 007a 1B01     		lsls	r3, r3, #4
 1661 007c 1344     		add	r3, r3, r2
 1662 007e 0433     		adds	r3, r3, #4
 1663 0080 1B68     		ldr	r3, [r3]
 1664              		.loc 1 905 34
 1665 0082 DBB2     		uxtb	r3, r3
 1666 0084 03F00F03 		and	r3, r3, #15
 1667 0088 DAB2     		uxtb	r2, r3
 1668              		.loc 1 905 18
 1669 008a 7B68     		ldr	r3, [r7, #4]
 1670 008c 9A72     		strb	r2, [r3, #10]
 906:./Lib/Src/stm32f4xx_can.c ****   /* Get the FMI */
 907:./Lib/Src/stm32f4xx_can.c ****   RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 1671              		.loc 1 907 67
 1672 008e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
ARM GAS  /tmp/cc1QyFkl.s 			page 47


 1673 0090 FA68     		ldr	r2, [r7, #12]
 1674 0092 1B33     		adds	r3, r3, #27
 1675 0094 1B01     		lsls	r3, r3, #4
 1676 0096 1344     		add	r3, r3, r2
 1677 0098 0433     		adds	r3, r3, #4
 1678 009a 1B68     		ldr	r3, [r3]
 1679              		.loc 1 907 73
 1680 009c 1B0A     		lsrs	r3, r3, #8
 1681              		.loc 1 907 18
 1682 009e DAB2     		uxtb	r2, r3
 1683 00a0 7B68     		ldr	r3, [r7, #4]
 1684 00a2 DA74     		strb	r2, [r3, #19]
 908:./Lib/Src/stm32f4xx_can.c ****   /* Get the data field */
 909:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 1685              		.loc 1 909 70
 1686 00a4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1687 00a6 FA68     		ldr	r2, [r7, #12]
 1688 00a8 1B01     		lsls	r3, r3, #4
 1689 00aa 1344     		add	r3, r3, r2
 1690 00ac 03F5DC73 		add	r3, r3, #440
 1691 00b0 1B68     		ldr	r3, [r3]
 1692              		.loc 1 909 22
 1693 00b2 DAB2     		uxtb	r2, r3
 1694 00b4 7B68     		ldr	r3, [r7, #4]
 1695 00b6 DA72     		strb	r2, [r3, #11]
 910:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 1696              		.loc 1 910 71
 1697 00b8 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1698 00ba FA68     		ldr	r2, [r7, #12]
 1699 00bc 1B01     		lsls	r3, r3, #4
 1700 00be 1344     		add	r3, r3, r2
 1701 00c0 03F5DC73 		add	r3, r3, #440
 1702 00c4 1B68     		ldr	r3, [r3]
 1703              		.loc 1 910 77
 1704 00c6 1B0A     		lsrs	r3, r3, #8
 1705              		.loc 1 910 22
 1706 00c8 DAB2     		uxtb	r2, r3
 1707 00ca 7B68     		ldr	r3, [r7, #4]
 1708 00cc 1A73     		strb	r2, [r3, #12]
 911:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 1709              		.loc 1 911 71
 1710 00ce FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1711 00d0 FA68     		ldr	r2, [r7, #12]
 1712 00d2 1B01     		lsls	r3, r3, #4
 1713 00d4 1344     		add	r3, r3, r2
 1714 00d6 03F5DC73 		add	r3, r3, #440
 1715 00da 1B68     		ldr	r3, [r3]
 1716              		.loc 1 911 77
 1717 00dc 1B0C     		lsrs	r3, r3, #16
 1718              		.loc 1 911 22
 1719 00de DAB2     		uxtb	r2, r3
 1720 00e0 7B68     		ldr	r3, [r7, #4]
 1721 00e2 5A73     		strb	r2, [r3, #13]
 912:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 1722              		.loc 1 912 71
 1723 00e4 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1724 00e6 FA68     		ldr	r2, [r7, #12]
ARM GAS  /tmp/cc1QyFkl.s 			page 48


 1725 00e8 1B01     		lsls	r3, r3, #4
 1726 00ea 1344     		add	r3, r3, r2
 1727 00ec 03F5DC73 		add	r3, r3, #440
 1728 00f0 1B68     		ldr	r3, [r3]
 1729              		.loc 1 912 77
 1730 00f2 1B0E     		lsrs	r3, r3, #24
 1731              		.loc 1 912 22
 1732 00f4 DAB2     		uxtb	r2, r3
 1733 00f6 7B68     		ldr	r3, [r7, #4]
 1734 00f8 9A73     		strb	r2, [r3, #14]
 913:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 1735              		.loc 1 913 70
 1736 00fa FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1737 00fc FA68     		ldr	r2, [r7, #12]
 1738 00fe 1B01     		lsls	r3, r3, #4
 1739 0100 1344     		add	r3, r3, r2
 1740 0102 03F5DE73 		add	r3, r3, #444
 1741 0106 1B68     		ldr	r3, [r3]
 1742              		.loc 1 913 22
 1743 0108 DAB2     		uxtb	r2, r3
 1744 010a 7B68     		ldr	r3, [r7, #4]
 1745 010c DA73     		strb	r2, [r3, #15]
 914:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 1746              		.loc 1 914 71
 1747 010e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1748 0110 FA68     		ldr	r2, [r7, #12]
 1749 0112 1B01     		lsls	r3, r3, #4
 1750 0114 1344     		add	r3, r3, r2
 1751 0116 03F5DE73 		add	r3, r3, #444
 1752 011a 1B68     		ldr	r3, [r3]
 1753              		.loc 1 914 77
 1754 011c 1B0A     		lsrs	r3, r3, #8
 1755              		.loc 1 914 22
 1756 011e DAB2     		uxtb	r2, r3
 1757 0120 7B68     		ldr	r3, [r7, #4]
 1758 0122 1A74     		strb	r2, [r3, #16]
 915:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 1759              		.loc 1 915 71
 1760 0124 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1761 0126 FA68     		ldr	r2, [r7, #12]
 1762 0128 1B01     		lsls	r3, r3, #4
 1763 012a 1344     		add	r3, r3, r2
 1764 012c 03F5DE73 		add	r3, r3, #444
 1765 0130 1B68     		ldr	r3, [r3]
 1766              		.loc 1 915 77
 1767 0132 1B0C     		lsrs	r3, r3, #16
 1768              		.loc 1 915 22
 1769 0134 DAB2     		uxtb	r2, r3
 1770 0136 7B68     		ldr	r3, [r7, #4]
 1771 0138 5A74     		strb	r2, [r3, #17]
 916:./Lib/Src/stm32f4xx_can.c ****   RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 1772              		.loc 1 916 71
 1773 013a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1774 013c FA68     		ldr	r2, [r7, #12]
 1775 013e 1B01     		lsls	r3, r3, #4
 1776 0140 1344     		add	r3, r3, r2
 1777 0142 03F5DE73 		add	r3, r3, #444
ARM GAS  /tmp/cc1QyFkl.s 			page 49


 1778 0146 1B68     		ldr	r3, [r3]
 1779              		.loc 1 916 77
 1780 0148 1B0E     		lsrs	r3, r3, #24
 1781              		.loc 1 916 22
 1782 014a DAB2     		uxtb	r2, r3
 1783 014c 7B68     		ldr	r3, [r7, #4]
 1784 014e 9A74     		strb	r2, [r3, #18]
 917:./Lib/Src/stm32f4xx_can.c ****   /* Release the FIFO */
 918:./Lib/Src/stm32f4xx_can.c ****   /* Release FIFO0 */
 919:./Lib/Src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1785              		.loc 1 919 6
 1786 0150 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1787 0152 002B     		cmp	r3, #0
 1788 0154 03D1     		bne	.L89
 920:./Lib/Src/stm32f4xx_can.c ****   {
 921:./Lib/Src/stm32f4xx_can.c ****     CANx->RF0R = CAN_RF0R_RFOM0;
 1789              		.loc 1 921 16
 1790 0156 FB68     		ldr	r3, [r7, #12]
 1791 0158 2022     		movs	r2, #32
 1792 015a DA60     		str	r2, [r3, #12]
 922:./Lib/Src/stm32f4xx_can.c ****   }
 923:./Lib/Src/stm32f4xx_can.c ****   /* Release FIFO1 */
 924:./Lib/Src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 925:./Lib/Src/stm32f4xx_can.c ****   {
 926:./Lib/Src/stm32f4xx_can.c ****     CANx->RF1R = CAN_RF1R_RFOM1;
 927:./Lib/Src/stm32f4xx_can.c ****   }
 928:./Lib/Src/stm32f4xx_can.c **** }
 1793              		.loc 1 928 1
 1794 015c 02E0     		b	.L91
 1795              	.L89:
 926:./Lib/Src/stm32f4xx_can.c ****   }
 1796              		.loc 1 926 16
 1797 015e FB68     		ldr	r3, [r7, #12]
 1798 0160 2022     		movs	r2, #32
 1799 0162 1A61     		str	r2, [r3, #16]
 1800              	.L91:
 1801              		.loc 1 928 1
 1802 0164 00BF     		nop
 1803 0166 1437     		adds	r7, r7, #20
 1804              		.cfi_def_cfa_offset 4
 1805 0168 BD46     		mov	sp, r7
 1806              		.cfi_def_cfa_register 13
 1807              		@ sp needed
 1808 016a 5DF8047B 		ldr	r7, [sp], #4
 1809              		.cfi_restore 7
 1810              		.cfi_def_cfa_offset 0
 1811 016e 7047     		bx	lr
 1812              		.cfi_endproc
 1813              	.LFE133:
 1815              		.section	.text.CAN_FIFORelease,"ax",%progbits
 1816              		.align	1
 1817              		.global	CAN_FIFORelease
 1818              		.syntax unified
 1819              		.thumb
 1820              		.thumb_func
 1822              	CAN_FIFORelease:
 1823              	.LFB134:
ARM GAS  /tmp/cc1QyFkl.s 			page 50


 929:./Lib/Src/stm32f4xx_can.c **** 
 930:./Lib/Src/stm32f4xx_can.c **** /**
 931:./Lib/Src/stm32f4xx_can.c ****   * @brief  Releases the specified receive FIFO.
 932:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 933:./Lib/Src/stm32f4xx_can.c ****   * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
 934:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 935:./Lib/Src/stm32f4xx_can.c ****   * @retval None
 936:./Lib/Src/stm32f4xx_can.c ****   */
 937:./Lib/Src/stm32f4xx_can.c **** void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
 938:./Lib/Src/stm32f4xx_can.c **** {
 1824              		.loc 1 938 1
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 8
 1827              		@ frame_needed = 1, uses_anonymous_args = 0
 1828              		@ link register save eliminated.
 1829 0000 80B4     		push	{r7}
 1830              		.cfi_def_cfa_offset 4
 1831              		.cfi_offset 7, -4
 1832 0002 83B0     		sub	sp, sp, #12
 1833              		.cfi_def_cfa_offset 16
 1834 0004 00AF     		add	r7, sp, #0
 1835              		.cfi_def_cfa_register 7
 1836 0006 7860     		str	r0, [r7, #4]
 1837 0008 0B46     		mov	r3, r1
 1838 000a FB70     		strb	r3, [r7, #3]
 939:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 940:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 941:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 942:./Lib/Src/stm32f4xx_can.c ****   /* Release FIFO0 */
 943:./Lib/Src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1839              		.loc 1 943 6
 1840 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1841 000e 002B     		cmp	r3, #0
 1842 0010 03D1     		bne	.L93
 944:./Lib/Src/stm32f4xx_can.c ****   {
 945:./Lib/Src/stm32f4xx_can.c ****     CANx->RF0R = CAN_RF0R_RFOM0;
 1843              		.loc 1 945 16
 1844 0012 7B68     		ldr	r3, [r7, #4]
 1845 0014 2022     		movs	r2, #32
 1846 0016 DA60     		str	r2, [r3, #12]
 946:./Lib/Src/stm32f4xx_can.c ****   }
 947:./Lib/Src/stm32f4xx_can.c ****   /* Release FIFO1 */
 948:./Lib/Src/stm32f4xx_can.c ****   else /* FIFONumber == CAN_FIFO1 */
 949:./Lib/Src/stm32f4xx_can.c ****   {
 950:./Lib/Src/stm32f4xx_can.c ****     CANx->RF1R = CAN_RF1R_RFOM1;
 951:./Lib/Src/stm32f4xx_can.c ****   }
 952:./Lib/Src/stm32f4xx_can.c **** }
 1847              		.loc 1 952 1
 1848 0018 02E0     		b	.L95
 1849              	.L93:
 950:./Lib/Src/stm32f4xx_can.c ****   }
 1850              		.loc 1 950 16
 1851 001a 7B68     		ldr	r3, [r7, #4]
 1852 001c 2022     		movs	r2, #32
 1853 001e 1A61     		str	r2, [r3, #16]
 1854              	.L95:
 1855              		.loc 1 952 1
ARM GAS  /tmp/cc1QyFkl.s 			page 51


 1856 0020 00BF     		nop
 1857 0022 0C37     		adds	r7, r7, #12
 1858              		.cfi_def_cfa_offset 4
 1859 0024 BD46     		mov	sp, r7
 1860              		.cfi_def_cfa_register 13
 1861              		@ sp needed
 1862 0026 5DF8047B 		ldr	r7, [sp], #4
 1863              		.cfi_restore 7
 1864              		.cfi_def_cfa_offset 0
 1865 002a 7047     		bx	lr
 1866              		.cfi_endproc
 1867              	.LFE134:
 1869              		.section	.text.CAN_MessagePending,"ax",%progbits
 1870              		.align	1
 1871              		.global	CAN_MessagePending
 1872              		.syntax unified
 1873              		.thumb
 1874              		.thumb_func
 1876              	CAN_MessagePending:
 1877              	.LFB135:
 953:./Lib/Src/stm32f4xx_can.c **** 
 954:./Lib/Src/stm32f4xx_can.c **** /**
 955:./Lib/Src/stm32f4xx_can.c ****   * @brief  Returns the number of pending received messages.
 956:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
 957:./Lib/Src/stm32f4xx_can.c ****   * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
 958:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
 959:./Lib/Src/stm32f4xx_can.c ****   * @retval NbMessage : which is the number of pending message.
 960:./Lib/Src/stm32f4xx_can.c ****   */
 961:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
 962:./Lib/Src/stm32f4xx_can.c **** {
 1878              		.loc 1 962 1
 1879              		.cfi_startproc
 1880              		@ args = 0, pretend = 0, frame = 16
 1881              		@ frame_needed = 1, uses_anonymous_args = 0
 1882              		@ link register save eliminated.
 1883 0000 80B4     		push	{r7}
 1884              		.cfi_def_cfa_offset 4
 1885              		.cfi_offset 7, -4
 1886 0002 85B0     		sub	sp, sp, #20
 1887              		.cfi_def_cfa_offset 24
 1888 0004 00AF     		add	r7, sp, #0
 1889              		.cfi_def_cfa_register 7
 1890 0006 7860     		str	r0, [r7, #4]
 1891 0008 0B46     		mov	r3, r1
 1892 000a FB70     		strb	r3, [r7, #3]
 963:./Lib/Src/stm32f4xx_can.c ****   uint8_t message_pending=0;
 1893              		.loc 1 963 11
 1894 000c 0023     		movs	r3, #0
 1895 000e FB73     		strb	r3, [r7, #15]
 964:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
 965:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
 966:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_FIFO(FIFONumber));
 967:./Lib/Src/stm32f4xx_can.c ****   if (FIFONumber == CAN_FIFO0)
 1896              		.loc 1 967 6
 1897 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1898 0012 002B     		cmp	r3, #0
 1899 0014 06D1     		bne	.L97
ARM GAS  /tmp/cc1QyFkl.s 			page 52


 968:./Lib/Src/stm32f4xx_can.c ****   {
 969:./Lib/Src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 1900              		.loc 1 969 37
 1901 0016 7B68     		ldr	r3, [r7, #4]
 1902 0018 DB68     		ldr	r3, [r3, #12]
 1903              		.loc 1 969 23
 1904 001a DBB2     		uxtb	r3, r3
 1905              		.loc 1 969 21
 1906 001c 03F00303 		and	r3, r3, #3
 1907 0020 FB73     		strb	r3, [r7, #15]
 1908 0022 0BE0     		b	.L98
 1909              	.L97:
 970:./Lib/Src/stm32f4xx_can.c ****   }
 971:./Lib/Src/stm32f4xx_can.c ****   else if (FIFONumber == CAN_FIFO1)
 1910              		.loc 1 971 11
 1911 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1912 0026 012B     		cmp	r3, #1
 1913 0028 06D1     		bne	.L99
 972:./Lib/Src/stm32f4xx_can.c ****   {
 973:./Lib/Src/stm32f4xx_can.c ****     message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 1914              		.loc 1 973 37
 1915 002a 7B68     		ldr	r3, [r7, #4]
 1916 002c 1B69     		ldr	r3, [r3, #16]
 1917              		.loc 1 973 23
 1918 002e DBB2     		uxtb	r3, r3
 1919              		.loc 1 973 21
 1920 0030 03F00303 		and	r3, r3, #3
 1921 0034 FB73     		strb	r3, [r7, #15]
 1922 0036 01E0     		b	.L98
 1923              	.L99:
 974:./Lib/Src/stm32f4xx_can.c ****   }
 975:./Lib/Src/stm32f4xx_can.c ****   else
 976:./Lib/Src/stm32f4xx_can.c ****   {
 977:./Lib/Src/stm32f4xx_can.c ****     message_pending = 0;
 1924              		.loc 1 977 21
 1925 0038 0023     		movs	r3, #0
 1926 003a FB73     		strb	r3, [r7, #15]
 1927              	.L98:
 978:./Lib/Src/stm32f4xx_can.c ****   }
 979:./Lib/Src/stm32f4xx_can.c ****   return message_pending;
 1928              		.loc 1 979 10
 1929 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 980:./Lib/Src/stm32f4xx_can.c **** }
 1930              		.loc 1 980 1
 1931 003e 1846     		mov	r0, r3
 1932 0040 1437     		adds	r7, r7, #20
 1933              		.cfi_def_cfa_offset 4
 1934 0042 BD46     		mov	sp, r7
 1935              		.cfi_def_cfa_register 13
 1936              		@ sp needed
 1937 0044 5DF8047B 		ldr	r7, [sp], #4
 1938              		.cfi_restore 7
 1939              		.cfi_def_cfa_offset 0
 1940 0048 7047     		bx	lr
 1941              		.cfi_endproc
 1942              	.LFE135:
 1944              		.section	.text.CAN_OperatingModeRequest,"ax",%progbits
ARM GAS  /tmp/cc1QyFkl.s 			page 53


 1945              		.align	1
 1946              		.global	CAN_OperatingModeRequest
 1947              		.syntax unified
 1948              		.thumb
 1949              		.thumb_func
 1951              	CAN_OperatingModeRequest:
 1952              	.LFB136:
 981:./Lib/Src/stm32f4xx_can.c **** /**
 982:./Lib/Src/stm32f4xx_can.c ****   * @}
 983:./Lib/Src/stm32f4xx_can.c ****   */
 984:./Lib/Src/stm32f4xx_can.c **** 
 985:./Lib/Src/stm32f4xx_can.c **** 
 986:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN_Group4 CAN Operation modes functions
 987:./Lib/Src/stm32f4xx_can.c ****  *  @brief    CAN Operation modes functions 
 988:./Lib/Src/stm32f4xx_can.c ****  *
 989:./Lib/Src/stm32f4xx_can.c **** @verbatim    
 990:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
 991:./Lib/Src/stm32f4xx_can.c ****                     ##### CAN Operation modes functions #####
 992:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================  
 993:./Lib/Src/stm32f4xx_can.c ****     [..] This section provides functions allowing to select the CAN Operation modes
 994:./Lib/Src/stm32f4xx_can.c ****       (+) sleep mode
 995:./Lib/Src/stm32f4xx_can.c ****       (+) normal mode 
 996:./Lib/Src/stm32f4xx_can.c ****       (+) initialization mode
 997:./Lib/Src/stm32f4xx_can.c ****    
 998:./Lib/Src/stm32f4xx_can.c **** @endverbatim
 999:./Lib/Src/stm32f4xx_can.c ****   * @{
1000:./Lib/Src/stm32f4xx_can.c ****   */
1001:./Lib/Src/stm32f4xx_can.c ****   
1002:./Lib/Src/stm32f4xx_can.c ****   
1003:./Lib/Src/stm32f4xx_can.c **** /**
1004:./Lib/Src/stm32f4xx_can.c ****   * @brief  Selects the CAN Operation mode.
1005:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_OperatingMode: CAN Operating Mode.
1006:./Lib/Src/stm32f4xx_can.c ****   *         This parameter can be one of @ref CAN_OperatingMode_TypeDef enumeration.
1007:./Lib/Src/stm32f4xx_can.c ****   * @retval status of the requested mode which can be 
1008:./Lib/Src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
1009:./Lib/Src/stm32f4xx_can.c ****   *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
1010:./Lib/Src/stm32f4xx_can.c ****   */
1011:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
1012:./Lib/Src/stm32f4xx_can.c **** {
 1953              		.loc 1 1012 1
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 16
 1956              		@ frame_needed = 1, uses_anonymous_args = 0
 1957              		@ link register save eliminated.
 1958 0000 80B4     		push	{r7}
 1959              		.cfi_def_cfa_offset 4
 1960              		.cfi_offset 7, -4
 1961 0002 85B0     		sub	sp, sp, #20
 1962              		.cfi_def_cfa_offset 24
 1963 0004 00AF     		add	r7, sp, #0
 1964              		.cfi_def_cfa_register 7
 1965 0006 7860     		str	r0, [r7, #4]
 1966 0008 0B46     		mov	r3, r1
 1967 000a FB70     		strb	r3, [r7, #3]
1013:./Lib/Src/stm32f4xx_can.c ****   uint8_t status = CAN_ModeStatus_Failed;
 1968              		.loc 1 1013 11
 1969 000c 0023     		movs	r3, #0
ARM GAS  /tmp/cc1QyFkl.s 			page 54


 1970 000e FB73     		strb	r3, [r7, #15]
1014:./Lib/Src/stm32f4xx_can.c ****   
1015:./Lib/Src/stm32f4xx_can.c ****   /* Timeout for INAK or also for SLAK bits*/
1016:./Lib/Src/stm32f4xx_can.c ****   uint32_t timeout = INAK_TIMEOUT; 
 1971              		.loc 1 1016 12
 1972 0010 4FF6FF73 		movw	r3, #65535
 1973 0014 BB60     		str	r3, [r7, #8]
1017:./Lib/Src/stm32f4xx_can.c **** 
1018:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1019:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1020:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
1021:./Lib/Src/stm32f4xx_can.c **** 
1022:./Lib/Src/stm32f4xx_can.c ****   if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 1974              		.loc 1 1022 6
 1975 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1976 0018 002B     		cmp	r3, #0
 1977 001a 20D1     		bne	.L102
1023:./Lib/Src/stm32f4xx_can.c ****   {
1024:./Lib/Src/stm32f4xx_can.c ****     /* Request initialisation */
1025:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 1978              		.loc 1 1025 33
 1979 001c 7B68     		ldr	r3, [r7, #4]
 1980 001e 1B68     		ldr	r3, [r3]
 1981              		.loc 1 1025 17
 1982 0020 23F00303 		bic	r3, r3, #3
 1983 0024 43F00102 		orr	r2, r3, #1
 1984              		.loc 1 1025 15
 1985 0028 7B68     		ldr	r3, [r7, #4]
 1986 002a 1A60     		str	r2, [r3]
1026:./Lib/Src/stm32f4xx_can.c **** 
1027:./Lib/Src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1028:./Lib/Src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 1987              		.loc 1 1028 11
 1988 002c 02E0     		b	.L103
 1989              	.L105:
1029:./Lib/Src/stm32f4xx_can.c ****     {
1030:./Lib/Src/stm32f4xx_can.c ****       timeout--;
 1990              		.loc 1 1030 14
 1991 002e BB68     		ldr	r3, [r7, #8]
 1992 0030 013B     		subs	r3, r3, #1
 1993 0032 BB60     		str	r3, [r7, #8]
 1994              	.L103:
1028:./Lib/Src/stm32f4xx_can.c ****     {
 1995              		.loc 1 1028 18
 1996 0034 7B68     		ldr	r3, [r7, #4]
 1997 0036 5B68     		ldr	r3, [r3, #4]
1028:./Lib/Src/stm32f4xx_can.c ****     {
 1998              		.loc 1 1028 24
 1999 0038 03F00303 		and	r3, r3, #3
1028:./Lib/Src/stm32f4xx_can.c ****     {
 2000              		.loc 1 1028 58
 2001 003c 012B     		cmp	r3, #1
 2002 003e 02D0     		beq	.L104
1028:./Lib/Src/stm32f4xx_can.c ****     {
 2003              		.loc 1 1028 58 is_stmt 0 discriminator 1
 2004 0040 BB68     		ldr	r3, [r7, #8]
 2005 0042 002B     		cmp	r3, #0
ARM GAS  /tmp/cc1QyFkl.s 			page 55


 2006 0044 F3D1     		bne	.L105
 2007              	.L104:
1031:./Lib/Src/stm32f4xx_can.c ****     }
1032:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 2008              		.loc 1 1032 14 is_stmt 1
 2009 0046 7B68     		ldr	r3, [r7, #4]
 2010 0048 5B68     		ldr	r3, [r3, #4]
 2011              		.loc 1 1032 20
 2012 004a 03F00303 		and	r3, r3, #3
 2013              		.loc 1 1032 8
 2014 004e 012B     		cmp	r3, #1
 2015 0050 02D0     		beq	.L106
1033:./Lib/Src/stm32f4xx_can.c ****     {
1034:./Lib/Src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 2016              		.loc 1 1034 14
 2017 0052 0023     		movs	r3, #0
 2018 0054 FB73     		strb	r3, [r7, #15]
 2019 0056 4AE0     		b	.L107
 2020              	.L106:
1035:./Lib/Src/stm32f4xx_can.c ****     }
1036:./Lib/Src/stm32f4xx_can.c ****     else
1037:./Lib/Src/stm32f4xx_can.c ****     {
1038:./Lib/Src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 2021              		.loc 1 1038 14
 2022 0058 0123     		movs	r3, #1
 2023 005a FB73     		strb	r3, [r7, #15]
 2024 005c 47E0     		b	.L107
 2025              	.L102:
1039:./Lib/Src/stm32f4xx_can.c ****     }
1040:./Lib/Src/stm32f4xx_can.c ****   }
1041:./Lib/Src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 2026              		.loc 1 1041 12
 2027 005e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2028 0060 012B     		cmp	r3, #1
 2029 0062 1ED1     		bne	.L108
1042:./Lib/Src/stm32f4xx_can.c ****   {
1043:./Lib/Src/stm32f4xx_can.c ****     /* Request leave initialisation and sleep mode  and enter Normal mode */
1044:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 2030              		.loc 1 1044 9
 2031 0064 7B68     		ldr	r3, [r7, #4]
 2032 0066 1B68     		ldr	r3, [r3]
 2033              		.loc 1 1044 15
 2034 0068 23F00302 		bic	r2, r3, #3
 2035 006c 7B68     		ldr	r3, [r7, #4]
 2036 006e 1A60     		str	r2, [r3]
1045:./Lib/Src/stm32f4xx_can.c **** 
1046:./Lib/Src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1047:./Lib/Src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 2037              		.loc 1 1047 11
 2038 0070 02E0     		b	.L109
 2039              	.L111:
1048:./Lib/Src/stm32f4xx_can.c ****     {
1049:./Lib/Src/stm32f4xx_can.c ****       timeout--;
 2040              		.loc 1 1049 14
 2041 0072 BB68     		ldr	r3, [r7, #8]
 2042 0074 013B     		subs	r3, r3, #1
 2043 0076 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/cc1QyFkl.s 			page 56


 2044              	.L109:
1047:./Lib/Src/stm32f4xx_can.c ****     {
 2045              		.loc 1 1047 18
 2046 0078 7B68     		ldr	r3, [r7, #4]
 2047 007a 5B68     		ldr	r3, [r3, #4]
1047:./Lib/Src/stm32f4xx_can.c ****     {
 2048              		.loc 1 1047 24
 2049 007c 03F00303 		and	r3, r3, #3
1047:./Lib/Src/stm32f4xx_can.c ****     {
 2050              		.loc 1 1047 47
 2051 0080 002B     		cmp	r3, #0
 2052 0082 02D0     		beq	.L110
1047:./Lib/Src/stm32f4xx_can.c ****     {
 2053              		.loc 1 1047 47 is_stmt 0 discriminator 1
 2054 0084 BB68     		ldr	r3, [r7, #8]
 2055 0086 002B     		cmp	r3, #0
 2056 0088 F3D1     		bne	.L111
 2057              	.L110:
1050:./Lib/Src/stm32f4xx_can.c ****     }
1051:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != 0)
 2058              		.loc 1 1051 14 is_stmt 1
 2059 008a 7B68     		ldr	r3, [r7, #4]
 2060 008c 5B68     		ldr	r3, [r3, #4]
 2061              		.loc 1 1051 20
 2062 008e 03F00303 		and	r3, r3, #3
 2063              		.loc 1 1051 8
 2064 0092 002B     		cmp	r3, #0
 2065 0094 02D0     		beq	.L112
1052:./Lib/Src/stm32f4xx_can.c ****     {
1053:./Lib/Src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 2066              		.loc 1 1053 14
 2067 0096 0023     		movs	r3, #0
 2068 0098 FB73     		strb	r3, [r7, #15]
 2069 009a 28E0     		b	.L107
 2070              	.L112:
1054:./Lib/Src/stm32f4xx_can.c ****     }
1055:./Lib/Src/stm32f4xx_can.c ****     else
1056:./Lib/Src/stm32f4xx_can.c ****     {
1057:./Lib/Src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
 2071              		.loc 1 1057 14
 2072 009c 0123     		movs	r3, #1
 2073 009e FB73     		strb	r3, [r7, #15]
 2074 00a0 25E0     		b	.L107
 2075              	.L108:
1058:./Lib/Src/stm32f4xx_can.c ****     }
1059:./Lib/Src/stm32f4xx_can.c ****   }
1060:./Lib/Src/stm32f4xx_can.c ****   else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 2076              		.loc 1 1060 12
 2077 00a2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2078 00a4 022B     		cmp	r3, #2
 2079 00a6 20D1     		bne	.L113
1061:./Lib/Src/stm32f4xx_can.c ****   {
1062:./Lib/Src/stm32f4xx_can.c ****     /* Request Sleep mode */
1063:./Lib/Src/stm32f4xx_can.c ****     CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 2080              		.loc 1 1063 33
 2081 00a8 7B68     		ldr	r3, [r7, #4]
 2082 00aa 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc1QyFkl.s 			page 57


 2083              		.loc 1 1063 17
 2084 00ac 23F00303 		bic	r3, r3, #3
 2085 00b0 43F00202 		orr	r2, r3, #2
 2086              		.loc 1 1063 15
 2087 00b4 7B68     		ldr	r3, [r7, #4]
 2088 00b6 1A60     		str	r2, [r3]
1064:./Lib/Src/stm32f4xx_can.c **** 
1065:./Lib/Src/stm32f4xx_can.c ****     /* Wait the acknowledge */
1066:./Lib/Src/stm32f4xx_can.c ****     while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 2089              		.loc 1 1066 11
 2090 00b8 02E0     		b	.L114
 2091              	.L116:
1067:./Lib/Src/stm32f4xx_can.c ****     {
1068:./Lib/Src/stm32f4xx_can.c ****       timeout--;
 2092              		.loc 1 1068 14
 2093 00ba BB68     		ldr	r3, [r7, #8]
 2094 00bc 013B     		subs	r3, r3, #1
 2095 00be BB60     		str	r3, [r7, #8]
 2096              	.L114:
1066:./Lib/Src/stm32f4xx_can.c ****     {
 2097              		.loc 1 1066 18
 2098 00c0 7B68     		ldr	r3, [r7, #4]
 2099 00c2 5B68     		ldr	r3, [r3, #4]
1066:./Lib/Src/stm32f4xx_can.c ****     {
 2100              		.loc 1 1066 24
 2101 00c4 03F00303 		and	r3, r3, #3
1066:./Lib/Src/stm32f4xx_can.c ****     {
 2102              		.loc 1 1066 58
 2103 00c8 022B     		cmp	r3, #2
 2104 00ca 02D0     		beq	.L115
1066:./Lib/Src/stm32f4xx_can.c ****     {
 2105              		.loc 1 1066 58 is_stmt 0 discriminator 1
 2106 00cc BB68     		ldr	r3, [r7, #8]
 2107 00ce 002B     		cmp	r3, #0
 2108 00d0 F3D1     		bne	.L116
 2109              	.L115:
1069:./Lib/Src/stm32f4xx_can.c ****     }
1070:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 2110              		.loc 1 1070 14 is_stmt 1
 2111 00d2 7B68     		ldr	r3, [r7, #4]
 2112 00d4 5B68     		ldr	r3, [r3, #4]
 2113              		.loc 1 1070 20
 2114 00d6 03F00303 		and	r3, r3, #3
 2115              		.loc 1 1070 8
 2116 00da 022B     		cmp	r3, #2
 2117 00dc 02D0     		beq	.L117
1071:./Lib/Src/stm32f4xx_can.c ****     {
1072:./Lib/Src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Failed;
 2118              		.loc 1 1072 14
 2119 00de 0023     		movs	r3, #0
 2120 00e0 FB73     		strb	r3, [r7, #15]
 2121 00e2 04E0     		b	.L107
 2122              	.L117:
1073:./Lib/Src/stm32f4xx_can.c ****     }
1074:./Lib/Src/stm32f4xx_can.c ****     else
1075:./Lib/Src/stm32f4xx_can.c ****     {
1076:./Lib/Src/stm32f4xx_can.c ****       status = CAN_ModeStatus_Success;
ARM GAS  /tmp/cc1QyFkl.s 			page 58


 2123              		.loc 1 1076 14
 2124 00e4 0123     		movs	r3, #1
 2125 00e6 FB73     		strb	r3, [r7, #15]
 2126 00e8 01E0     		b	.L107
 2127              	.L113:
1077:./Lib/Src/stm32f4xx_can.c ****     }
1078:./Lib/Src/stm32f4xx_can.c ****   }
1079:./Lib/Src/stm32f4xx_can.c ****   else
1080:./Lib/Src/stm32f4xx_can.c ****   {
1081:./Lib/Src/stm32f4xx_can.c ****     status = CAN_ModeStatus_Failed;
 2128              		.loc 1 1081 12
 2129 00ea 0023     		movs	r3, #0
 2130 00ec FB73     		strb	r3, [r7, #15]
 2131              	.L107:
1082:./Lib/Src/stm32f4xx_can.c ****   }
1083:./Lib/Src/stm32f4xx_can.c **** 
1084:./Lib/Src/stm32f4xx_can.c ****   return  (uint8_t) status;
 2132              		.loc 1 1084 11
 2133 00ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1085:./Lib/Src/stm32f4xx_can.c **** }
 2134              		.loc 1 1085 1
 2135 00f0 1846     		mov	r0, r3
 2136 00f2 1437     		adds	r7, r7, #20
 2137              		.cfi_def_cfa_offset 4
 2138 00f4 BD46     		mov	sp, r7
 2139              		.cfi_def_cfa_register 13
 2140              		@ sp needed
 2141 00f6 5DF8047B 		ldr	r7, [sp], #4
 2142              		.cfi_restore 7
 2143              		.cfi_def_cfa_offset 0
 2144 00fa 7047     		bx	lr
 2145              		.cfi_endproc
 2146              	.LFE136:
 2148              		.section	.text.CAN_Sleep,"ax",%progbits
 2149              		.align	1
 2150              		.global	CAN_Sleep
 2151              		.syntax unified
 2152              		.thumb
 2153              		.thumb_func
 2155              	CAN_Sleep:
 2156              	.LFB137:
1086:./Lib/Src/stm32f4xx_can.c **** 
1087:./Lib/Src/stm32f4xx_can.c **** /**
1088:./Lib/Src/stm32f4xx_can.c ****   * @brief  Enters the Sleep (low power) mode.
1089:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1090:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1091:./Lib/Src/stm32f4xx_can.c ****   * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
1092:./Lib/Src/stm32f4xx_can.c ****   */
1093:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_Sleep(CAN_TypeDef* CANx)
1094:./Lib/Src/stm32f4xx_can.c **** {
 2157              		.loc 1 1094 1
 2158              		.cfi_startproc
 2159              		@ args = 0, pretend = 0, frame = 16
 2160              		@ frame_needed = 1, uses_anonymous_args = 0
 2161              		@ link register save eliminated.
 2162 0000 80B4     		push	{r7}
 2163              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc1QyFkl.s 			page 59


 2164              		.cfi_offset 7, -4
 2165 0002 85B0     		sub	sp, sp, #20
 2166              		.cfi_def_cfa_offset 24
 2167 0004 00AF     		add	r7, sp, #0
 2168              		.cfi_def_cfa_register 7
 2169 0006 7860     		str	r0, [r7, #4]
1095:./Lib/Src/stm32f4xx_can.c ****   uint8_t sleepstatus = CAN_Sleep_Failed;
 2170              		.loc 1 1095 11
 2171 0008 0023     		movs	r3, #0
 2172 000a FB73     		strb	r3, [r7, #15]
1096:./Lib/Src/stm32f4xx_can.c ****   
1097:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1098:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1099:./Lib/Src/stm32f4xx_can.c ****     
1100:./Lib/Src/stm32f4xx_can.c ****   /* Request Sleep mode */
1101:./Lib/Src/stm32f4xx_can.c ****    CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 2173              		.loc 1 1101 23
 2174 000c 7B68     		ldr	r3, [r7, #4]
 2175 000e 1B68     		ldr	r3, [r3]
 2176              		.loc 1 1101 69
 2177 0010 23F00303 		bic	r3, r3, #3
 2178 0014 43F00202 		orr	r2, r3, #2
 2179              		.loc 1 1101 14
 2180 0018 7B68     		ldr	r3, [r7, #4]
 2181 001a 1A60     		str	r2, [r3]
1102:./Lib/Src/stm32f4xx_can.c ****    
1103:./Lib/Src/stm32f4xx_can.c ****   /* Sleep mode status */
1104:./Lib/Src/stm32f4xx_can.c ****   if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 2182              		.loc 1 1104 12
 2183 001c 7B68     		ldr	r3, [r7, #4]
 2184 001e 5B68     		ldr	r3, [r3, #4]
 2185              		.loc 1 1104 18
 2186 0020 03F00303 		and	r3, r3, #3
 2187              		.loc 1 1104 6
 2188 0024 022B     		cmp	r3, #2
 2189 0026 01D1     		bne	.L120
1105:./Lib/Src/stm32f4xx_can.c ****   {
1106:./Lib/Src/stm32f4xx_can.c ****     /* Sleep mode not entered */
1107:./Lib/Src/stm32f4xx_can.c ****     sleepstatus =  CAN_Sleep_Ok;
 2190              		.loc 1 1107 17
 2191 0028 0123     		movs	r3, #1
 2192 002a FB73     		strb	r3, [r7, #15]
 2193              	.L120:
1108:./Lib/Src/stm32f4xx_can.c ****   }
1109:./Lib/Src/stm32f4xx_can.c ****   /* return sleep mode status */
1110:./Lib/Src/stm32f4xx_can.c ****    return (uint8_t)sleepstatus;
 2194              		.loc 1 1110 11
 2195 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1111:./Lib/Src/stm32f4xx_can.c **** }
 2196              		.loc 1 1111 1
 2197 002e 1846     		mov	r0, r3
 2198 0030 1437     		adds	r7, r7, #20
 2199              		.cfi_def_cfa_offset 4
 2200 0032 BD46     		mov	sp, r7
 2201              		.cfi_def_cfa_register 13
 2202              		@ sp needed
 2203 0034 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cc1QyFkl.s 			page 60


 2204              		.cfi_restore 7
 2205              		.cfi_def_cfa_offset 0
 2206 0038 7047     		bx	lr
 2207              		.cfi_endproc
 2208              	.LFE137:
 2210              		.section	.text.CAN_WakeUp,"ax",%progbits
 2211              		.align	1
 2212              		.global	CAN_WakeUp
 2213              		.syntax unified
 2214              		.thumb
 2215              		.thumb_func
 2217              	CAN_WakeUp:
 2218              	.LFB138:
1112:./Lib/Src/stm32f4xx_can.c **** 
1113:./Lib/Src/stm32f4xx_can.c **** /**
1114:./Lib/Src/stm32f4xx_can.c ****   * @brief  Wakes up the CAN peripheral from sleep mode .
1115:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1116:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1117:./Lib/Src/stm32f4xx_can.c ****   * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
1118:./Lib/Src/stm32f4xx_can.c ****   */
1119:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
1120:./Lib/Src/stm32f4xx_can.c **** {
 2219              		.loc 1 1120 1
 2220              		.cfi_startproc
 2221              		@ args = 0, pretend = 0, frame = 16
 2222              		@ frame_needed = 1, uses_anonymous_args = 0
 2223              		@ link register save eliminated.
 2224 0000 80B4     		push	{r7}
 2225              		.cfi_def_cfa_offset 4
 2226              		.cfi_offset 7, -4
 2227 0002 85B0     		sub	sp, sp, #20
 2228              		.cfi_def_cfa_offset 24
 2229 0004 00AF     		add	r7, sp, #0
 2230              		.cfi_def_cfa_register 7
 2231 0006 7860     		str	r0, [r7, #4]
1121:./Lib/Src/stm32f4xx_can.c ****   uint32_t wait_slak = SLAK_TIMEOUT;
 2232              		.loc 1 1121 12
 2233 0008 4FF6FF73 		movw	r3, #65535
 2234 000c FB60     		str	r3, [r7, #12]
1122:./Lib/Src/stm32f4xx_can.c ****   uint8_t wakeupstatus = CAN_WakeUp_Failed;
 2235              		.loc 1 1122 11
 2236 000e 0023     		movs	r3, #0
 2237 0010 FB72     		strb	r3, [r7, #11]
1123:./Lib/Src/stm32f4xx_can.c ****   
1124:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1125:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1126:./Lib/Src/stm32f4xx_can.c ****     
1127:./Lib/Src/stm32f4xx_can.c ****   /* Wake up request */
1128:./Lib/Src/stm32f4xx_can.c ****   CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 2238              		.loc 1 1128 7
 2239 0012 7B68     		ldr	r3, [r7, #4]
 2240 0014 1B68     		ldr	r3, [r3]
 2241              		.loc 1 1128 13
 2242 0016 23F00202 		bic	r2, r3, #2
 2243 001a 7B68     		ldr	r3, [r7, #4]
 2244 001c 1A60     		str	r2, [r3]
1129:./Lib/Src/stm32f4xx_can.c ****     
ARM GAS  /tmp/cc1QyFkl.s 			page 61


1130:./Lib/Src/stm32f4xx_can.c ****   /* Sleep mode status */
1131:./Lib/Src/stm32f4xx_can.c ****   while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 2245              		.loc 1 1131 8
 2246 001e 02E0     		b	.L123
 2247              	.L125:
1132:./Lib/Src/stm32f4xx_can.c ****   {
1133:./Lib/Src/stm32f4xx_can.c ****    wait_slak--;
 2248              		.loc 1 1133 13
 2249 0020 FB68     		ldr	r3, [r7, #12]
 2250 0022 013B     		subs	r3, r3, #1
 2251 0024 FB60     		str	r3, [r7, #12]
 2252              	.L123:
1131:./Lib/Src/stm32f4xx_can.c ****   {
 2253              		.loc 1 1131 15
 2254 0026 7B68     		ldr	r3, [r7, #4]
 2255 0028 5B68     		ldr	r3, [r3, #4]
1131:./Lib/Src/stm32f4xx_can.c ****   {
 2256              		.loc 1 1131 21
 2257 002a 03F00203 		and	r3, r3, #2
1131:./Lib/Src/stm32f4xx_can.c ****   {
 2258              		.loc 1 1131 53
 2259 002e 022B     		cmp	r3, #2
 2260 0030 02D1     		bne	.L124
1131:./Lib/Src/stm32f4xx_can.c ****   {
 2261              		.loc 1 1131 53 is_stmt 0 discriminator 1
 2262 0032 FB68     		ldr	r3, [r7, #12]
 2263 0034 002B     		cmp	r3, #0
 2264 0036 F3D1     		bne	.L125
 2265              	.L124:
1134:./Lib/Src/stm32f4xx_can.c ****   }
1135:./Lib/Src/stm32f4xx_can.c ****   if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 2266              		.loc 1 1135 11 is_stmt 1
 2267 0038 7B68     		ldr	r3, [r7, #4]
 2268 003a 5B68     		ldr	r3, [r3, #4]
 2269              		.loc 1 1135 17
 2270 003c 03F00203 		and	r3, r3, #2
 2271              		.loc 1 1135 5
 2272 0040 022B     		cmp	r3, #2
 2273 0042 01D0     		beq	.L126
1136:./Lib/Src/stm32f4xx_can.c ****   {
1137:./Lib/Src/stm32f4xx_can.c ****    /* wake up done : Sleep mode exited */
1138:./Lib/Src/stm32f4xx_can.c ****     wakeupstatus = CAN_WakeUp_Ok;
 2274              		.loc 1 1138 18
 2275 0044 0123     		movs	r3, #1
 2276 0046 FB72     		strb	r3, [r7, #11]
 2277              	.L126:
1139:./Lib/Src/stm32f4xx_can.c ****   }
1140:./Lib/Src/stm32f4xx_can.c ****   /* return wakeup status */
1141:./Lib/Src/stm32f4xx_can.c ****   return (uint8_t)wakeupstatus;
 2278              		.loc 1 1141 10
 2279 0048 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1142:./Lib/Src/stm32f4xx_can.c **** }
 2280              		.loc 1 1142 1
 2281 004a 1846     		mov	r0, r3
 2282 004c 1437     		adds	r7, r7, #20
 2283              		.cfi_def_cfa_offset 4
 2284 004e BD46     		mov	sp, r7
ARM GAS  /tmp/cc1QyFkl.s 			page 62


 2285              		.cfi_def_cfa_register 13
 2286              		@ sp needed
 2287 0050 5DF8047B 		ldr	r7, [sp], #4
 2288              		.cfi_restore 7
 2289              		.cfi_def_cfa_offset 0
 2290 0054 7047     		bx	lr
 2291              		.cfi_endproc
 2292              	.LFE138:
 2294              		.section	.text.CAN_GetLastErrorCode,"ax",%progbits
 2295              		.align	1
 2296              		.global	CAN_GetLastErrorCode
 2297              		.syntax unified
 2298              		.thumb
 2299              		.thumb_func
 2301              	CAN_GetLastErrorCode:
 2302              	.LFB139:
1143:./Lib/Src/stm32f4xx_can.c **** /**
1144:./Lib/Src/stm32f4xx_can.c ****   * @}
1145:./Lib/Src/stm32f4xx_can.c ****   */
1146:./Lib/Src/stm32f4xx_can.c **** 
1147:./Lib/Src/stm32f4xx_can.c **** 
1148:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN_Group5 CAN Bus Error management functions
1149:./Lib/Src/stm32f4xx_can.c ****  *  @brief    CAN Bus Error management functions 
1150:./Lib/Src/stm32f4xx_can.c ****  *
1151:./Lib/Src/stm32f4xx_can.c **** @verbatim    
1152:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
1153:./Lib/Src/stm32f4xx_can.c ****                 ##### CAN Bus Error management functions #####
1154:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================  
1155:./Lib/Src/stm32f4xx_can.c ****     [..] This section provides functions allowing to 
1156:./Lib/Src/stm32f4xx_can.c ****       (+) Return the CANx's last error code (LEC)
1157:./Lib/Src/stm32f4xx_can.c ****       (+) Return the CANx Receive Error Counter (REC)
1158:./Lib/Src/stm32f4xx_can.c ****       (+) Return the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1159:./Lib/Src/stm32f4xx_can.c ****    
1160:./Lib/Src/stm32f4xx_can.c ****       -@- If TEC is greater than 255, The CAN is in bus-off state.
1161:./Lib/Src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 96, an Error warning flag occurs.
1162:./Lib/Src/stm32f4xx_can.c ****       -@- if REC or TEC are greater than 127, an Error Passive Flag occurs.
1163:./Lib/Src/stm32f4xx_can.c ****                         
1164:./Lib/Src/stm32f4xx_can.c **** @endverbatim
1165:./Lib/Src/stm32f4xx_can.c ****   * @{
1166:./Lib/Src/stm32f4xx_can.c ****   */
1167:./Lib/Src/stm32f4xx_can.c ****   
1168:./Lib/Src/stm32f4xx_can.c **** /**
1169:./Lib/Src/stm32f4xx_can.c ****   * @brief  Returns the CANx's last error code (LEC).
1170:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1171:./Lib/Src/stm32f4xx_can.c ****   * @retval Error code: 
1172:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_NoErr: No Error  
1173:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_StuffErr: Stuff Error
1174:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_FormErr: Form Error
1175:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_ACKErr : Acknowledgment Error
1176:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitRecessiveErr: Bit Recessive Error
1177:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
1178:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_CRCErr: CRC Error
1179:./Lib/Src/stm32f4xx_can.c ****   *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
1180:./Lib/Src/stm32f4xx_can.c ****   */
1181:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
1182:./Lib/Src/stm32f4xx_can.c **** {
 2303              		.loc 1 1182 1
ARM GAS  /tmp/cc1QyFkl.s 			page 63


 2304              		.cfi_startproc
 2305              		@ args = 0, pretend = 0, frame = 16
 2306              		@ frame_needed = 1, uses_anonymous_args = 0
 2307              		@ link register save eliminated.
 2308 0000 80B4     		push	{r7}
 2309              		.cfi_def_cfa_offset 4
 2310              		.cfi_offset 7, -4
 2311 0002 85B0     		sub	sp, sp, #20
 2312              		.cfi_def_cfa_offset 24
 2313 0004 00AF     		add	r7, sp, #0
 2314              		.cfi_def_cfa_register 7
 2315 0006 7860     		str	r0, [r7, #4]
1183:./Lib/Src/stm32f4xx_can.c ****   uint8_t errorcode=0;
 2316              		.loc 1 1183 11
 2317 0008 0023     		movs	r3, #0
 2318 000a FB73     		strb	r3, [r7, #15]
1184:./Lib/Src/stm32f4xx_can.c ****   
1185:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1186:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1187:./Lib/Src/stm32f4xx_can.c ****   
1188:./Lib/Src/stm32f4xx_can.c ****   /* Get the error code*/
1189:./Lib/Src/stm32f4xx_can.c ****   errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 2319              		.loc 1 1189 30
 2320 000c 7B68     		ldr	r3, [r7, #4]
 2321 000e 9B69     		ldr	r3, [r3, #24]
 2322              		.loc 1 1189 37
 2323 0010 DBB2     		uxtb	r3, r3
 2324              		.loc 1 1189 13
 2325 0012 03F07003 		and	r3, r3, #112
 2326 0016 FB73     		strb	r3, [r7, #15]
1190:./Lib/Src/stm32f4xx_can.c ****   
1191:./Lib/Src/stm32f4xx_can.c ****   /* Return the error code*/
1192:./Lib/Src/stm32f4xx_can.c ****   return errorcode;
 2327              		.loc 1 1192 10
 2328 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1193:./Lib/Src/stm32f4xx_can.c **** }
 2329              		.loc 1 1193 1
 2330 001a 1846     		mov	r0, r3
 2331 001c 1437     		adds	r7, r7, #20
 2332              		.cfi_def_cfa_offset 4
 2333 001e BD46     		mov	sp, r7
 2334              		.cfi_def_cfa_register 13
 2335              		@ sp needed
 2336 0020 5DF8047B 		ldr	r7, [sp], #4
 2337              		.cfi_restore 7
 2338              		.cfi_def_cfa_offset 0
 2339 0024 7047     		bx	lr
 2340              		.cfi_endproc
 2341              	.LFE139:
 2343              		.section	.text.CAN_GetReceiveErrorCounter,"ax",%progbits
 2344              		.align	1
 2345              		.global	CAN_GetReceiveErrorCounter
 2346              		.syntax unified
 2347              		.thumb
 2348              		.thumb_func
 2350              	CAN_GetReceiveErrorCounter:
 2351              	.LFB140:
ARM GAS  /tmp/cc1QyFkl.s 			page 64


1194:./Lib/Src/stm32f4xx_can.c **** 
1195:./Lib/Src/stm32f4xx_can.c **** /**
1196:./Lib/Src/stm32f4xx_can.c ****   * @brief  Returns the CANx Receive Error Counter (REC).
1197:./Lib/Src/stm32f4xx_can.c ****   * @note   In case of an error during reception, this counter is incremented 
1198:./Lib/Src/stm32f4xx_can.c ****   *         by 1 or by 8 depending on the error condition as defined by the CAN 
1199:./Lib/Src/stm32f4xx_can.c ****   *         standard. After every successful reception, the counter is 
1200:./Lib/Src/stm32f4xx_can.c ****   *         decremented by 1 or reset to 120 if its value was higher than 128. 
1201:./Lib/Src/stm32f4xx_can.c ****   *         When the counter value exceeds 127, the CAN controller enters the 
1202:./Lib/Src/stm32f4xx_can.c ****   *         error passive state.  
1203:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1204:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1205:./Lib/Src/stm32f4xx_can.c ****   * @retval CAN Receive Error Counter. 
1206:./Lib/Src/stm32f4xx_can.c ****   */
1207:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
1208:./Lib/Src/stm32f4xx_can.c **** {
 2352              		.loc 1 1208 1
 2353              		.cfi_startproc
 2354              		@ args = 0, pretend = 0, frame = 16
 2355              		@ frame_needed = 1, uses_anonymous_args = 0
 2356              		@ link register save eliminated.
 2357 0000 80B4     		push	{r7}
 2358              		.cfi_def_cfa_offset 4
 2359              		.cfi_offset 7, -4
 2360 0002 85B0     		sub	sp, sp, #20
 2361              		.cfi_def_cfa_offset 24
 2362 0004 00AF     		add	r7, sp, #0
 2363              		.cfi_def_cfa_register 7
 2364 0006 7860     		str	r0, [r7, #4]
1209:./Lib/Src/stm32f4xx_can.c ****   uint8_t counter=0;
 2365              		.loc 1 1209 11
 2366 0008 0023     		movs	r3, #0
 2367 000a FB73     		strb	r3, [r7, #15]
1210:./Lib/Src/stm32f4xx_can.c ****   
1211:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1212:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1213:./Lib/Src/stm32f4xx_can.c ****   
1214:./Lib/Src/stm32f4xx_can.c ****   /* Get the Receive Error Counter*/
1215:./Lib/Src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 2368              		.loc 1 1215 28
 2369 000c 7B68     		ldr	r3, [r7, #4]
 2370 000e 9B69     		ldr	r3, [r3, #24]
 2371              		.loc 1 1215 48
 2372 0010 1B0E     		lsrs	r3, r3, #24
 2373              		.loc 1 1215 11
 2374 0012 FB73     		strb	r3, [r7, #15]
1216:./Lib/Src/stm32f4xx_can.c ****   
1217:./Lib/Src/stm32f4xx_can.c ****   /* Return the Receive Error Counter*/
1218:./Lib/Src/stm32f4xx_can.c ****   return counter;
 2375              		.loc 1 1218 10
 2376 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1219:./Lib/Src/stm32f4xx_can.c **** }
 2377              		.loc 1 1219 1
 2378 0016 1846     		mov	r0, r3
 2379 0018 1437     		adds	r7, r7, #20
 2380              		.cfi_def_cfa_offset 4
 2381 001a BD46     		mov	sp, r7
 2382              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cc1QyFkl.s 			page 65


 2383              		@ sp needed
 2384 001c 5DF8047B 		ldr	r7, [sp], #4
 2385              		.cfi_restore 7
 2386              		.cfi_def_cfa_offset 0
 2387 0020 7047     		bx	lr
 2388              		.cfi_endproc
 2389              	.LFE140:
 2391              		.section	.text.CAN_GetLSBTransmitErrorCounter,"ax",%progbits
 2392              		.align	1
 2393              		.global	CAN_GetLSBTransmitErrorCounter
 2394              		.syntax unified
 2395              		.thumb
 2396              		.thumb_func
 2398              	CAN_GetLSBTransmitErrorCounter:
 2399              	.LFB141:
1220:./Lib/Src/stm32f4xx_can.c **** 
1221:./Lib/Src/stm32f4xx_can.c **** 
1222:./Lib/Src/stm32f4xx_can.c **** /**
1223:./Lib/Src/stm32f4xx_can.c ****   * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
1224:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1225:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1226:./Lib/Src/stm32f4xx_can.c ****   * @retval LSB of the 9-bit CAN Transmit Error Counter. 
1227:./Lib/Src/stm32f4xx_can.c ****   */
1228:./Lib/Src/stm32f4xx_can.c **** uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
1229:./Lib/Src/stm32f4xx_can.c **** {
 2400              		.loc 1 1229 1
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 16
 2403              		@ frame_needed = 1, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
 2405 0000 80B4     		push	{r7}
 2406              		.cfi_def_cfa_offset 4
 2407              		.cfi_offset 7, -4
 2408 0002 85B0     		sub	sp, sp, #20
 2409              		.cfi_def_cfa_offset 24
 2410 0004 00AF     		add	r7, sp, #0
 2411              		.cfi_def_cfa_register 7
 2412 0006 7860     		str	r0, [r7, #4]
1230:./Lib/Src/stm32f4xx_can.c ****   uint8_t counter=0;
 2413              		.loc 1 1230 11
 2414 0008 0023     		movs	r3, #0
 2415 000a FB73     		strb	r3, [r7, #15]
1231:./Lib/Src/stm32f4xx_can.c ****   
1232:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1233:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1234:./Lib/Src/stm32f4xx_can.c ****   
1235:./Lib/Src/stm32f4xx_can.c ****   /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
1236:./Lib/Src/stm32f4xx_can.c ****   counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 2416              		.loc 1 1236 28
 2417 000c 7B68     		ldr	r3, [r7, #4]
 2418 000e 9B69     		ldr	r3, [r3, #24]
 2419              		.loc 1 1236 48
 2420 0010 1B0C     		lsrs	r3, r3, #16
 2421              		.loc 1 1236 11
 2422 0012 FB73     		strb	r3, [r7, #15]
1237:./Lib/Src/stm32f4xx_can.c ****   
1238:./Lib/Src/stm32f4xx_can.c ****   /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
ARM GAS  /tmp/cc1QyFkl.s 			page 66


1239:./Lib/Src/stm32f4xx_can.c ****   return counter;
 2423              		.loc 1 1239 10
 2424 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1240:./Lib/Src/stm32f4xx_can.c **** }
 2425              		.loc 1 1240 1
 2426 0016 1846     		mov	r0, r3
 2427 0018 1437     		adds	r7, r7, #20
 2428              		.cfi_def_cfa_offset 4
 2429 001a BD46     		mov	sp, r7
 2430              		.cfi_def_cfa_register 13
 2431              		@ sp needed
 2432 001c 5DF8047B 		ldr	r7, [sp], #4
 2433              		.cfi_restore 7
 2434              		.cfi_def_cfa_offset 0
 2435 0020 7047     		bx	lr
 2436              		.cfi_endproc
 2437              	.LFE141:
 2439              		.section	.text.CAN_ITConfig,"ax",%progbits
 2440              		.align	1
 2441              		.global	CAN_ITConfig
 2442              		.syntax unified
 2443              		.thumb
 2444              		.thumb_func
 2446              	CAN_ITConfig:
 2447              	.LFB142:
1241:./Lib/Src/stm32f4xx_can.c **** /**
1242:./Lib/Src/stm32f4xx_can.c ****   * @}
1243:./Lib/Src/stm32f4xx_can.c ****   */
1244:./Lib/Src/stm32f4xx_can.c **** 
1245:./Lib/Src/stm32f4xx_can.c **** /** @defgroup CAN_Group6 Interrupts and flags management functions
1246:./Lib/Src/stm32f4xx_can.c ****  *  @brief   Interrupts and flags management functions
1247:./Lib/Src/stm32f4xx_can.c ****  *
1248:./Lib/Src/stm32f4xx_can.c **** @verbatim   
1249:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================
1250:./Lib/Src/stm32f4xx_can.c ****               ##### Interrupts and flags management functions #####
1251:./Lib/Src/stm32f4xx_can.c ****  ===============================================================================  
1252:./Lib/Src/stm32f4xx_can.c **** 
1253:./Lib/Src/stm32f4xx_can.c ****      [..] This section provides functions allowing to configure the CAN Interrupts 
1254:./Lib/Src/stm32f4xx_can.c ****           and to get the status and clear flags and Interrupts pending bits.
1255:./Lib/Src/stm32f4xx_can.c ****   
1256:./Lib/Src/stm32f4xx_can.c ****           The CAN provides 14 Interrupts sources and 15 Flags:
1257:./Lib/Src/stm32f4xx_can.c **** 
1258:./Lib/Src/stm32f4xx_can.c ****    
1259:./Lib/Src/stm32f4xx_can.c ****   *** Flags ***
1260:./Lib/Src/stm32f4xx_can.c ****   =============
1261:./Lib/Src/stm32f4xx_can.c ****     [..] The 15 flags can be divided on 4 groups: 
1262:./Lib/Src/stm32f4xx_can.c **** 
1263:./Lib/Src/stm32f4xx_can.c ****       (+) Transmit Flags
1264:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP0, 
1265:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP1, 
1266:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_RQCP2  : Request completed MailBoxes 0, 1 and 2  Flags
1267:./Lib/Src/stm32f4xx_can.c ****                                Set when the last request (transmit or abort)
1268:./Lib/Src/stm32f4xx_can.c ****                                has been performed. 
1269:./Lib/Src/stm32f4xx_can.c **** 
1270:./Lib/Src/stm32f4xx_can.c ****       (+) Receive Flags
1271:./Lib/Src/stm32f4xx_can.c **** 
1272:./Lib/Src/stm32f4xx_can.c **** 
ARM GAS  /tmp/cc1QyFkl.s 			page 67


1273:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP0,
1274:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_FMP1   : FIFO 0 and 1 Message Pending Flags 
1275:./Lib/Src/stm32f4xx_can.c ****                                set to signal that messages are pending in the receive 
1276:./Lib/Src/stm32f4xx_can.c ****                                FIFO.
1277:./Lib/Src/stm32f4xx_can.c ****                                These Flags are cleared only by hardware. 
1278:./Lib/Src/stm32f4xx_can.c **** 
1279:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF0,
1280:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_FF1    : FIFO 0 and 1 Full Flags
1281:./Lib/Src/stm32f4xx_can.c ****                                set when three messages are stored in the selected 
1282:./Lib/Src/stm32f4xx_can.c ****                                FIFO.                        
1283:./Lib/Src/stm32f4xx_can.c **** 
1284:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV0              
1285:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_FOV1   : FIFO 0 and 1 Overrun Flags
1286:./Lib/Src/stm32f4xx_can.c ****                                set when a new message has been received and passed 
1287:./Lib/Src/stm32f4xx_can.c ****                                the filter while the FIFO was full.         
1288:./Lib/Src/stm32f4xx_can.c **** 
1289:./Lib/Src/stm32f4xx_can.c ****       (+) Operating Mode Flags
1290:./Lib/Src/stm32f4xx_can.c **** 
1291:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_WKU    : Wake up Flag
1292:./Lib/Src/stm32f4xx_can.c ****                                set to signal that a SOF bit has been detected while 
1293:./Lib/Src/stm32f4xx_can.c ****                                the CAN hardware was in Sleep mode. 
1294:./Lib/Src/stm32f4xx_can.c ****         
1295:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_SLAK   : Sleep acknowledge Flag
1296:./Lib/Src/stm32f4xx_can.c ****                                Set to signal that the CAN has entered Sleep Mode. 
1297:./Lib/Src/stm32f4xx_can.c ****     
1298:./Lib/Src/stm32f4xx_can.c ****       (+) Error Flags
1299:./Lib/Src/stm32f4xx_can.c **** 
1300:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_EWG    : Error Warning Flag
1301:./Lib/Src/stm32f4xx_can.c ****                                Set when the warning limit has been reached (Receive 
1302:./Lib/Src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter greater than 96). 
1303:./Lib/Src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1304:./Lib/Src/stm32f4xx_can.c ****                             
1305:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_EPV    : Error Passive Flag
1306:./Lib/Src/stm32f4xx_can.c ****                                Set when the Error Passive limit has been reached 
1307:./Lib/Src/stm32f4xx_can.c ****                                (Receive Error Counter or Transmit Error Counter 
1308:./Lib/Src/stm32f4xx_can.c ****                                greater than 127).
1309:./Lib/Src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1310:./Lib/Src/stm32f4xx_can.c ****                              
1311:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_BOF    : Bus-Off Flag
1312:./Lib/Src/stm32f4xx_can.c ****                                set when CAN enters the bus-off state. The bus-off 
1313:./Lib/Src/stm32f4xx_can.c ****                                state is entered on TEC overflow, greater than 255.
1314:./Lib/Src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1315:./Lib/Src/stm32f4xx_can.c ****                                    
1316:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_FLAG_LEC    : Last error code Flag
1317:./Lib/Src/stm32f4xx_can.c ****                                set If a message has been transferred (reception or
1318:./Lib/Src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.              
1319:./Lib/Src/stm32f4xx_can.c ****                            
1320:./Lib/Src/stm32f4xx_can.c ****   *** Interrupts ***
1321:./Lib/Src/stm32f4xx_can.c ****   ==================
1322:./Lib/Src/stm32f4xx_can.c ****     [..] The 14 interrupts can be divided on 4 groups: 
1323:./Lib/Src/stm32f4xx_can.c ****   
1324:./Lib/Src/stm32f4xx_can.c ****       (+) Transmit interrupt
1325:./Lib/Src/stm32f4xx_can.c ****   
1326:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_TME   :  Transmit mailbox empty Interrupt
1327:./Lib/Src/stm32f4xx_can.c ****                              if enabled, this interrupt source is pending when 
1328:./Lib/Src/stm32f4xx_can.c ****                              no transmit request are pending for Tx mailboxes.      
1329:./Lib/Src/stm32f4xx_can.c **** 
ARM GAS  /tmp/cc1QyFkl.s 			page 68


1330:./Lib/Src/stm32f4xx_can.c ****       (+) Receive Interrupts
1331:./Lib/Src/stm32f4xx_can.c ****          
1332:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_FMP0,
1333:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_FMP1    :  FIFO 0 and FIFO1 message pending Interrupts
1334:./Lib/Src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1335:./Lib/Src/stm32f4xx_can.c ****                                when messages are pending in the receive FIFO.
1336:./Lib/Src/stm32f4xx_can.c ****                                The corresponding interrupt pending bits are cleared 
1337:./Lib/Src/stm32f4xx_can.c ****                                only by hardware.
1338:./Lib/Src/stm32f4xx_can.c ****                 
1339:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_FF0,              
1340:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_FF1     :  FIFO 0 and FIFO1 full Interrupts
1341:./Lib/Src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1342:./Lib/Src/stm32f4xx_can.c ****                                when three messages are stored in the selected FIFO.
1343:./Lib/Src/stm32f4xx_can.c ****         
1344:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_FOV0,        
1345:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_FOV1    :  FIFO 0 and FIFO1 overrun Interrupts        
1346:./Lib/Src/stm32f4xx_can.c ****                                if enabled, these interrupt sources are pending 
1347:./Lib/Src/stm32f4xx_can.c ****                                when a new message has been received and passed 
1348:./Lib/Src/stm32f4xx_can.c ****                                the filter while the FIFO was full.
1349:./Lib/Src/stm32f4xx_can.c **** 
1350:./Lib/Src/stm32f4xx_can.c ****       (+) Operating Mode Interrupts
1351:./Lib/Src/stm32f4xx_can.c ****          
1352:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_WKU     :  Wake-up Interrupt
1353:./Lib/Src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1354:./Lib/Src/stm32f4xx_can.c ****                                a SOF bit has been detected while the CAN hardware 
1355:./Lib/Src/stm32f4xx_can.c ****                                was in Sleep mode.
1356:./Lib/Src/stm32f4xx_can.c ****                                   
1357:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_SLK     :  Sleep acknowledge Interrupt
1358:./Lib/Src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1359:./Lib/Src/stm32f4xx_can.c ****                                the CAN has entered Sleep Mode.       
1360:./Lib/Src/stm32f4xx_can.c **** 
1361:./Lib/Src/stm32f4xx_can.c ****       (+) Error Interrupts 
1362:./Lib/Src/stm32f4xx_can.c ****         
1363:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_EWG     :  Error warning Interrupt 
1364:./Lib/Src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1365:./Lib/Src/stm32f4xx_can.c ****                                the warning limit has been reached (Receive Error 
1366:./Lib/Src/stm32f4xx_can.c ****                                Counter or Transmit Error Counter=96). 
1367:./Lib/Src/stm32f4xx_can.c ****                                
1368:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_EPV     :  Error passive Interrupt        
1369:./Lib/Src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1370:./Lib/Src/stm32f4xx_can.c ****                                the Error Passive limit has been reached (Receive 
1371:./Lib/Src/stm32f4xx_can.c ****                                Error Counter or Transmit Error Counter>127).
1372:./Lib/Src/stm32f4xx_can.c ****                           
1373:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_BOF     :  Bus-off Interrupt
1374:./Lib/Src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when
1375:./Lib/Src/stm32f4xx_can.c ****                                CAN enters the bus-off state. The bus-off state is 
1376:./Lib/Src/stm32f4xx_can.c ****                                entered on TEC overflow, greater than 255.
1377:./Lib/Src/stm32f4xx_can.c ****                                This Flag is cleared only by hardware.
1378:./Lib/Src/stm32f4xx_can.c ****                                   
1379:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_LEC     :  Last error code Interrupt        
1380:./Lib/Src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending  when
1381:./Lib/Src/stm32f4xx_can.c ****                                a message has been transferred (reception or
1382:./Lib/Src/stm32f4xx_can.c ****                                transmission) with error, and the error code is hold.
1383:./Lib/Src/stm32f4xx_can.c ****                           
1384:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_IT_ERR     :  Error Interrupt
1385:./Lib/Src/stm32f4xx_can.c ****                                if enabled, this interrupt source is pending when 
1386:./Lib/Src/stm32f4xx_can.c ****                                an error condition is pending.      
ARM GAS  /tmp/cc1QyFkl.s 			page 69


1387:./Lib/Src/stm32f4xx_can.c ****                       
1388:./Lib/Src/stm32f4xx_can.c ****     [..] Managing the CAN controller events :
1389:./Lib/Src/stm32f4xx_can.c ****  
1390:./Lib/Src/stm32f4xx_can.c ****          The user should identify which mode will be used in his application to 
1391:./Lib/Src/stm32f4xx_can.c ****          manage the CAN controller events: Polling mode or Interrupt mode.
1392:./Lib/Src/stm32f4xx_can.c ****   
1393:./Lib/Src/stm32f4xx_can.c ****       (#) In the Polling Mode it is advised to use the following functions:
1394:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_GetFlagStatus() : to check if flags events occur. 
1395:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_ClearFlag()     : to clear the flags events.
1396:./Lib/Src/stm32f4xx_can.c ****   
1397:./Lib/Src/stm32f4xx_can.c **** 
1398:./Lib/Src/stm32f4xx_can.c ****   
1399:./Lib/Src/stm32f4xx_can.c ****       (#) In the Interrupt Mode it is advised to use the following functions:
1400:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_ITConfig()       : to enable or disable the interrupt source.
1401:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_GetITStatus()    : to check if Interrupt occurs.
1402:./Lib/Src/stm32f4xx_can.c ****         (++) CAN_ClearITPendingBit() : to clear the Interrupt pending Bit 
1403:./Lib/Src/stm32f4xx_can.c ****             (corresponding Flag).
1404:./Lib/Src/stm32f4xx_can.c ****         -@@-  This function has no impact on CAN_IT_FMP0 and CAN_IT_FMP1 Interrupts 
1405:./Lib/Src/stm32f4xx_can.c ****              pending bits since there are cleared only by hardware. 
1406:./Lib/Src/stm32f4xx_can.c ****   
1407:./Lib/Src/stm32f4xx_can.c **** @endverbatim
1408:./Lib/Src/stm32f4xx_can.c ****   * @{
1409:./Lib/Src/stm32f4xx_can.c ****   */ 
1410:./Lib/Src/stm32f4xx_can.c **** /**
1411:./Lib/Src/stm32f4xx_can.c ****   * @brief  Enables or disables the specified CANx interrupts.
1412:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1413:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt sources to be enabled or disabled.
1414:./Lib/Src/stm32f4xx_can.c ****   *          This parameter can be: 
1415:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1416:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1417:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1418:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1419:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1420:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1421:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1422:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1423:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1424:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1425:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1426:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1427:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1428:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1429:./Lib/Src/stm32f4xx_can.c ****   * @param  NewState: new state of the CAN interrupts.
1430:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1431:./Lib/Src/stm32f4xx_can.c ****   *          This parameter can be: ENABLE or DISABLE.
1432:./Lib/Src/stm32f4xx_can.c ****   * @retval None
1433:./Lib/Src/stm32f4xx_can.c ****   */
1434:./Lib/Src/stm32f4xx_can.c **** void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
1435:./Lib/Src/stm32f4xx_can.c **** {
 2448              		.loc 1 1435 1
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 16
 2451              		@ frame_needed = 1, uses_anonymous_args = 0
 2452              		@ link register save eliminated.
 2453 0000 80B4     		push	{r7}
 2454              		.cfi_def_cfa_offset 4
 2455              		.cfi_offset 7, -4
ARM GAS  /tmp/cc1QyFkl.s 			page 70


 2456 0002 85B0     		sub	sp, sp, #20
 2457              		.cfi_def_cfa_offset 24
 2458 0004 00AF     		add	r7, sp, #0
 2459              		.cfi_def_cfa_register 7
 2460 0006 F860     		str	r0, [r7, #12]
 2461 0008 B960     		str	r1, [r7, #8]
 2462 000a 1346     		mov	r3, r2
 2463 000c FB71     		strb	r3, [r7, #7]
1436:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1437:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1438:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1439:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1440:./Lib/Src/stm32f4xx_can.c **** 
1441:./Lib/Src/stm32f4xx_can.c ****   if (NewState != DISABLE)
 2464              		.loc 1 1441 6
 2465 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2466 0010 002B     		cmp	r3, #0
 2467 0012 06D0     		beq	.L135
1442:./Lib/Src/stm32f4xx_can.c ****   {
1443:./Lib/Src/stm32f4xx_can.c ****     /* Enable the selected CANx interrupt */
1444:./Lib/Src/stm32f4xx_can.c ****     CANx->IER |= CAN_IT;
 2468              		.loc 1 1444 9
 2469 0014 FB68     		ldr	r3, [r7, #12]
 2470 0016 5A69     		ldr	r2, [r3, #20]
 2471              		.loc 1 1444 15
 2472 0018 BB68     		ldr	r3, [r7, #8]
 2473 001a 1A43     		orrs	r2, r2, r3
 2474 001c FB68     		ldr	r3, [r7, #12]
 2475 001e 5A61     		str	r2, [r3, #20]
1445:./Lib/Src/stm32f4xx_can.c ****   }
1446:./Lib/Src/stm32f4xx_can.c ****   else
1447:./Lib/Src/stm32f4xx_can.c ****   {
1448:./Lib/Src/stm32f4xx_can.c ****     /* Disable the selected CANx interrupt */
1449:./Lib/Src/stm32f4xx_can.c ****     CANx->IER &= ~CAN_IT;
1450:./Lib/Src/stm32f4xx_can.c ****   }
1451:./Lib/Src/stm32f4xx_can.c **** }
 2476              		.loc 1 1451 1
 2477 0020 06E0     		b	.L137
 2478              	.L135:
1449:./Lib/Src/stm32f4xx_can.c ****   }
 2479              		.loc 1 1449 9
 2480 0022 FB68     		ldr	r3, [r7, #12]
 2481 0024 5A69     		ldr	r2, [r3, #20]
1449:./Lib/Src/stm32f4xx_can.c ****   }
 2482              		.loc 1 1449 18
 2483 0026 BB68     		ldr	r3, [r7, #8]
 2484 0028 DB43     		mvns	r3, r3
1449:./Lib/Src/stm32f4xx_can.c ****   }
 2485              		.loc 1 1449 15
 2486 002a 1A40     		ands	r2, r2, r3
 2487 002c FB68     		ldr	r3, [r7, #12]
 2488 002e 5A61     		str	r2, [r3, #20]
 2489              	.L137:
 2490              		.loc 1 1451 1
 2491 0030 00BF     		nop
 2492 0032 1437     		adds	r7, r7, #20
 2493              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc1QyFkl.s 			page 71


 2494 0034 BD46     		mov	sp, r7
 2495              		.cfi_def_cfa_register 13
 2496              		@ sp needed
 2497 0036 5DF8047B 		ldr	r7, [sp], #4
 2498              		.cfi_restore 7
 2499              		.cfi_def_cfa_offset 0
 2500 003a 7047     		bx	lr
 2501              		.cfi_endproc
 2502              	.LFE142:
 2504              		.section	.text.CAN_GetFlagStatus,"ax",%progbits
 2505              		.align	1
 2506              		.global	CAN_GetFlagStatus
 2507              		.syntax unified
 2508              		.thumb
 2509              		.thumb_func
 2511              	CAN_GetFlagStatus:
 2512              	.LFB143:
1452:./Lib/Src/stm32f4xx_can.c **** /**
1453:./Lib/Src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CAN flag is set or not.
1454:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1455:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to check.
1456:./Lib/Src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1457:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1458:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1459:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag
1460:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP0: FIFO 0 Message Pending Flag   
1461:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1462:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag 
1463:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FMP1: FIFO 1 Message Pending Flag   
1464:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1465:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1466:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1467:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag 
1468:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EWG: Error Warning Flag
1469:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_EPV: Error Passive Flag  
1470:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_BOF: Bus-Off Flag    
1471:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1472:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1473:./Lib/Src/stm32f4xx_can.c ****   * @retval The new state of CAN_FLAG (SET or RESET).
1474:./Lib/Src/stm32f4xx_can.c ****   */
1475:./Lib/Src/stm32f4xx_can.c **** FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1476:./Lib/Src/stm32f4xx_can.c **** {
 2513              		.loc 1 1476 1
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 16
 2516              		@ frame_needed = 1, uses_anonymous_args = 0
 2517              		@ link register save eliminated.
 2518 0000 80B4     		push	{r7}
 2519              		.cfi_def_cfa_offset 4
 2520              		.cfi_offset 7, -4
 2521 0002 85B0     		sub	sp, sp, #20
 2522              		.cfi_def_cfa_offset 24
 2523 0004 00AF     		add	r7, sp, #0
 2524              		.cfi_def_cfa_register 7
 2525 0006 7860     		str	r0, [r7, #4]
 2526 0008 3960     		str	r1, [r7]
1477:./Lib/Src/stm32f4xx_can.c ****   FlagStatus bitstatus = RESET;
ARM GAS  /tmp/cc1QyFkl.s 			page 72


 2527              		.loc 1 1477 14
 2528 000a 0023     		movs	r3, #0
 2529 000c FB73     		strb	r3, [r7, #15]
1478:./Lib/Src/stm32f4xx_can.c ****   
1479:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1480:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1481:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
1482:./Lib/Src/stm32f4xx_can.c ****   
1483:./Lib/Src/stm32f4xx_can.c **** 
1484:./Lib/Src/stm32f4xx_can.c ****   if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 2530              		.loc 1 1484 16
 2531 000e 3B68     		ldr	r3, [r7]
 2532 0010 03F47003 		and	r3, r3, #15728640
 2533              		.loc 1 1484 5
 2534 0014 002B     		cmp	r3, #0
 2535 0016 0DD0     		beq	.L139
1485:./Lib/Src/stm32f4xx_can.c ****   { 
1486:./Lib/Src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1487:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 2536              		.loc 1 1487 14
 2537 0018 7B68     		ldr	r3, [r7, #4]
 2538 001a 9A69     		ldr	r2, [r3, #24]
 2539              		.loc 1 1487 20
 2540 001c 3B68     		ldr	r3, [r7]
 2541 001e 1340     		ands	r3, r3, r2
 2542 0020 C3F31303 		ubfx	r3, r3, #0, #20
 2543              		.loc 1 1487 8
 2544 0024 002B     		cmp	r3, #0
 2545 0026 02D0     		beq	.L140
1488:./Lib/Src/stm32f4xx_can.c ****     { 
1489:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1490:./Lib/Src/stm32f4xx_can.c ****       bitstatus = SET;
 2546              		.loc 1 1490 17
 2547 0028 0123     		movs	r3, #1
 2548 002a FB73     		strb	r3, [r7, #15]
 2549 002c 48E0     		b	.L141
 2550              	.L140:
1491:./Lib/Src/stm32f4xx_can.c ****     }
1492:./Lib/Src/stm32f4xx_can.c ****     else
1493:./Lib/Src/stm32f4xx_can.c ****     { 
1494:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1495:./Lib/Src/stm32f4xx_can.c ****       bitstatus = RESET;
 2551              		.loc 1 1495 17
 2552 002e 0023     		movs	r3, #0
 2553 0030 FB73     		strb	r3, [r7, #15]
 2554 0032 45E0     		b	.L141
 2555              	.L139:
1496:./Lib/Src/stm32f4xx_can.c ****     }
1497:./Lib/Src/stm32f4xx_can.c ****   }
1498:./Lib/Src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 2556              		.loc 1 1498 21
 2557 0034 3B68     		ldr	r3, [r7]
 2558 0036 03F08073 		and	r3, r3, #16777216
 2559              		.loc 1 1498 10
 2560 003a 002B     		cmp	r3, #0
 2561 003c 0DD0     		beq	.L142
1499:./Lib/Src/stm32f4xx_can.c ****   { 
ARM GAS  /tmp/cc1QyFkl.s 			page 73


1500:./Lib/Src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1501:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 2562              		.loc 1 1501 14
 2563 003e 7B68     		ldr	r3, [r7, #4]
 2564 0040 5A68     		ldr	r2, [r3, #4]
 2565              		.loc 1 1501 20
 2566 0042 3B68     		ldr	r3, [r7]
 2567 0044 1340     		ands	r3, r3, r2
 2568 0046 C3F31303 		ubfx	r3, r3, #0, #20
 2569              		.loc 1 1501 8
 2570 004a 002B     		cmp	r3, #0
 2571 004c 02D0     		beq	.L143
1502:./Lib/Src/stm32f4xx_can.c ****     { 
1503:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1504:./Lib/Src/stm32f4xx_can.c ****       bitstatus = SET;
 2572              		.loc 1 1504 17
 2573 004e 0123     		movs	r3, #1
 2574 0050 FB73     		strb	r3, [r7, #15]
 2575 0052 35E0     		b	.L141
 2576              	.L143:
1505:./Lib/Src/stm32f4xx_can.c ****     }
1506:./Lib/Src/stm32f4xx_can.c ****     else
1507:./Lib/Src/stm32f4xx_can.c ****     { 
1508:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1509:./Lib/Src/stm32f4xx_can.c ****       bitstatus = RESET;
 2577              		.loc 1 1509 17
 2578 0054 0023     		movs	r3, #0
 2579 0056 FB73     		strb	r3, [r7, #15]
 2580 0058 32E0     		b	.L141
 2581              	.L142:
1510:./Lib/Src/stm32f4xx_can.c ****     }
1511:./Lib/Src/stm32f4xx_can.c ****   }
1512:./Lib/Src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 2582              		.loc 1 1512 21
 2583 005a 3B68     		ldr	r3, [r7]
 2584 005c 03F00063 		and	r3, r3, #134217728
 2585              		.loc 1 1512 10
 2586 0060 002B     		cmp	r3, #0
 2587 0062 0DD0     		beq	.L144
1513:./Lib/Src/stm32f4xx_can.c ****   { 
1514:./Lib/Src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1515:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 2588              		.loc 1 1515 14
 2589 0064 7B68     		ldr	r3, [r7, #4]
 2590 0066 9A68     		ldr	r2, [r3, #8]
 2591              		.loc 1 1515 20
 2592 0068 3B68     		ldr	r3, [r7]
 2593 006a 1340     		ands	r3, r3, r2
 2594 006c C3F31303 		ubfx	r3, r3, #0, #20
 2595              		.loc 1 1515 8
 2596 0070 002B     		cmp	r3, #0
 2597 0072 02D0     		beq	.L145
1516:./Lib/Src/stm32f4xx_can.c ****     { 
1517:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1518:./Lib/Src/stm32f4xx_can.c ****       bitstatus = SET;
 2598              		.loc 1 1518 17
 2599 0074 0123     		movs	r3, #1
ARM GAS  /tmp/cc1QyFkl.s 			page 74


 2600 0076 FB73     		strb	r3, [r7, #15]
 2601 0078 22E0     		b	.L141
 2602              	.L145:
1519:./Lib/Src/stm32f4xx_can.c ****     }
1520:./Lib/Src/stm32f4xx_can.c ****     else
1521:./Lib/Src/stm32f4xx_can.c ****     { 
1522:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1523:./Lib/Src/stm32f4xx_can.c ****       bitstatus = RESET;
 2603              		.loc 1 1523 17
 2604 007a 0023     		movs	r3, #0
 2605 007c FB73     		strb	r3, [r7, #15]
 2606 007e 1FE0     		b	.L141
 2607              	.L144:
1524:./Lib/Src/stm32f4xx_can.c ****     }
1525:./Lib/Src/stm32f4xx_can.c ****   }
1526:./Lib/Src/stm32f4xx_can.c ****   else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 2608              		.loc 1 1526 21
 2609 0080 3B68     		ldr	r3, [r7]
 2610 0082 03F00073 		and	r3, r3, #33554432
 2611              		.loc 1 1526 10
 2612 0086 002B     		cmp	r3, #0
 2613 0088 0DD0     		beq	.L146
1527:./Lib/Src/stm32f4xx_can.c ****   { 
1528:./Lib/Src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1529:./Lib/Src/stm32f4xx_can.c ****     if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 2614              		.loc 1 1529 14
 2615 008a 7B68     		ldr	r3, [r7, #4]
 2616 008c DA68     		ldr	r2, [r3, #12]
 2617              		.loc 1 1529 21
 2618 008e 3B68     		ldr	r3, [r7]
 2619 0090 1340     		ands	r3, r3, r2
 2620 0092 C3F31303 		ubfx	r3, r3, #0, #20
 2621              		.loc 1 1529 8
 2622 0096 002B     		cmp	r3, #0
 2623 0098 02D0     		beq	.L147
1530:./Lib/Src/stm32f4xx_can.c ****     { 
1531:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1532:./Lib/Src/stm32f4xx_can.c ****       bitstatus = SET;
 2624              		.loc 1 1532 17
 2625 009a 0123     		movs	r3, #1
 2626 009c FB73     		strb	r3, [r7, #15]
 2627 009e 0FE0     		b	.L141
 2628              	.L147:
1533:./Lib/Src/stm32f4xx_can.c ****     }
1534:./Lib/Src/stm32f4xx_can.c ****     else
1535:./Lib/Src/stm32f4xx_can.c ****     { 
1536:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1537:./Lib/Src/stm32f4xx_can.c ****       bitstatus = RESET;
 2629              		.loc 1 1537 17
 2630 00a0 0023     		movs	r3, #0
 2631 00a2 FB73     		strb	r3, [r7, #15]
 2632 00a4 0CE0     		b	.L141
 2633              	.L146:
1538:./Lib/Src/stm32f4xx_can.c ****     }
1539:./Lib/Src/stm32f4xx_can.c ****   }
1540:./Lib/Src/stm32f4xx_can.c ****   else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
1541:./Lib/Src/stm32f4xx_can.c ****   { 
ARM GAS  /tmp/cc1QyFkl.s 			page 75


1542:./Lib/Src/stm32f4xx_can.c ****     /* Check the status of the specified CAN flag */
1543:./Lib/Src/stm32f4xx_can.c ****     if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 2634              		.loc 1 1543 24
 2635 00a6 7B68     		ldr	r3, [r7, #4]
 2636 00a8 1A69     		ldr	r2, [r3, #16]
 2637              		.loc 1 1543 9
 2638 00aa 3B68     		ldr	r3, [r7]
 2639 00ac 1340     		ands	r3, r3, r2
 2640 00ae C3F31303 		ubfx	r3, r3, #0, #20
 2641              		.loc 1 1543 8
 2642 00b2 002B     		cmp	r3, #0
 2643 00b4 02D0     		beq	.L148
1544:./Lib/Src/stm32f4xx_can.c ****     { 
1545:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is set */
1546:./Lib/Src/stm32f4xx_can.c ****       bitstatus = SET;
 2644              		.loc 1 1546 17
 2645 00b6 0123     		movs	r3, #1
 2646 00b8 FB73     		strb	r3, [r7, #15]
 2647 00ba 01E0     		b	.L141
 2648              	.L148:
1547:./Lib/Src/stm32f4xx_can.c ****     }
1548:./Lib/Src/stm32f4xx_can.c ****     else
1549:./Lib/Src/stm32f4xx_can.c ****     { 
1550:./Lib/Src/stm32f4xx_can.c ****       /* CAN_FLAG is reset */
1551:./Lib/Src/stm32f4xx_can.c ****       bitstatus = RESET;
 2649              		.loc 1 1551 17
 2650 00bc 0023     		movs	r3, #0
 2651 00be FB73     		strb	r3, [r7, #15]
 2652              	.L141:
1552:./Lib/Src/stm32f4xx_can.c ****     }
1553:./Lib/Src/stm32f4xx_can.c ****   }
1554:./Lib/Src/stm32f4xx_can.c ****   /* Return the CAN_FLAG status */
1555:./Lib/Src/stm32f4xx_can.c ****   return  bitstatus;
 2653              		.loc 1 1555 11
 2654 00c0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1556:./Lib/Src/stm32f4xx_can.c **** }
 2655              		.loc 1 1556 1
 2656 00c2 1846     		mov	r0, r3
 2657 00c4 1437     		adds	r7, r7, #20
 2658              		.cfi_def_cfa_offset 4
 2659 00c6 BD46     		mov	sp, r7
 2660              		.cfi_def_cfa_register 13
 2661              		@ sp needed
 2662 00c8 5DF8047B 		ldr	r7, [sp], #4
 2663              		.cfi_restore 7
 2664              		.cfi_def_cfa_offset 0
 2665 00cc 7047     		bx	lr
 2666              		.cfi_endproc
 2667              	.LFE143:
 2669              		.section	.text.CAN_ClearFlag,"ax",%progbits
 2670              		.align	1
 2671              		.global	CAN_ClearFlag
 2672              		.syntax unified
 2673              		.thumb
 2674              		.thumb_func
 2676              	CAN_ClearFlag:
 2677              	.LFB144:
ARM GAS  /tmp/cc1QyFkl.s 			page 76


1557:./Lib/Src/stm32f4xx_can.c **** 
1558:./Lib/Src/stm32f4xx_can.c **** /**
1559:./Lib/Src/stm32f4xx_can.c ****   * @brief  Clears the CAN's pending flags.
1560:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1561:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_FLAG: specifies the flag to clear.
1562:./Lib/Src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1563:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP0: Request MailBox0 Flag
1564:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP1: Request MailBox1 Flag
1565:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_RQCP2: Request MailBox2 Flag 
1566:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF0: FIFO 0 Full Flag       
1567:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV0: FIFO 0 Overrun Flag  
1568:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FF1: FIFO 1 Full Flag        
1569:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_FOV1: FIFO 1 Overrun Flag     
1570:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_WKU: Wake up Flag
1571:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
1572:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_FLAG_LEC: Last error code Flag
1573:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1574:./Lib/Src/stm32f4xx_can.c ****   * @retval None
1575:./Lib/Src/stm32f4xx_can.c ****   */
1576:./Lib/Src/stm32f4xx_can.c **** void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
1577:./Lib/Src/stm32f4xx_can.c **** {
 2678              		.loc 1 1577 1
 2679              		.cfi_startproc
 2680              		@ args = 0, pretend = 0, frame = 16
 2681              		@ frame_needed = 1, uses_anonymous_args = 0
 2682              		@ link register save eliminated.
 2683 0000 80B4     		push	{r7}
 2684              		.cfi_def_cfa_offset 4
 2685              		.cfi_offset 7, -4
 2686 0002 85B0     		sub	sp, sp, #20
 2687              		.cfi_def_cfa_offset 24
 2688 0004 00AF     		add	r7, sp, #0
 2689              		.cfi_def_cfa_register 7
 2690 0006 7860     		str	r0, [r7, #4]
 2691 0008 3960     		str	r1, [r7]
1578:./Lib/Src/stm32f4xx_can.c ****   uint32_t flagtmp=0;
 2692              		.loc 1 1578 12
 2693 000a 0023     		movs	r3, #0
 2694 000c FB60     		str	r3, [r7, #12]
1579:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1580:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1581:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
1582:./Lib/Src/stm32f4xx_can.c ****   
1583:./Lib/Src/stm32f4xx_can.c ****   if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 2695              		.loc 1 1583 6
 2696 000e 3B68     		ldr	r3, [r7]
 2697 0010 174A     		ldr	r2, .L157
 2698 0012 9342     		cmp	r3, r2
 2699 0014 03D1     		bne	.L151
1584:./Lib/Src/stm32f4xx_can.c ****   {
1585:./Lib/Src/stm32f4xx_can.c ****     /* Clear the selected CAN flags */
1586:./Lib/Src/stm32f4xx_can.c ****     CANx->ESR = (uint32_t)RESET;
 2700              		.loc 1 1586 15
 2701 0016 7B68     		ldr	r3, [r7, #4]
 2702 0018 0022     		movs	r2, #0
 2703 001a 9A61     		str	r2, [r3, #24]
1587:./Lib/Src/stm32f4xx_can.c ****   }
ARM GAS  /tmp/cc1QyFkl.s 			page 77


1588:./Lib/Src/stm32f4xx_can.c ****   else /* MSR or TSR or RF0R or RF1R */
1589:./Lib/Src/stm32f4xx_can.c ****   {
1590:./Lib/Src/stm32f4xx_can.c ****     flagtmp = CAN_FLAG & 0x000FFFFF;
1591:./Lib/Src/stm32f4xx_can.c **** 
1592:./Lib/Src/stm32f4xx_can.c ****     if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
1593:./Lib/Src/stm32f4xx_can.c ****     {
1594:./Lib/Src/stm32f4xx_can.c ****       /* Receive Flags */
1595:./Lib/Src/stm32f4xx_can.c ****       CANx->RF0R = (uint32_t)(flagtmp);
1596:./Lib/Src/stm32f4xx_can.c ****     }
1597:./Lib/Src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
1598:./Lib/Src/stm32f4xx_can.c ****     {
1599:./Lib/Src/stm32f4xx_can.c ****       /* Receive Flags */
1600:./Lib/Src/stm32f4xx_can.c ****       CANx->RF1R = (uint32_t)(flagtmp);
1601:./Lib/Src/stm32f4xx_can.c ****     }
1602:./Lib/Src/stm32f4xx_can.c ****     else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
1603:./Lib/Src/stm32f4xx_can.c ****     {
1604:./Lib/Src/stm32f4xx_can.c ****       /* Transmit Flags */
1605:./Lib/Src/stm32f4xx_can.c ****       CANx->TSR = (uint32_t)(flagtmp);
1606:./Lib/Src/stm32f4xx_can.c ****     }
1607:./Lib/Src/stm32f4xx_can.c ****     else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
1608:./Lib/Src/stm32f4xx_can.c ****     {
1609:./Lib/Src/stm32f4xx_can.c ****       /* Operating mode Flags */
1610:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = (uint32_t)(flagtmp);
1611:./Lib/Src/stm32f4xx_can.c ****     }
1612:./Lib/Src/stm32f4xx_can.c ****   }
1613:./Lib/Src/stm32f4xx_can.c **** }
 2704              		.loc 1 1613 1
 2705 001c 21E0     		b	.L156
 2706              	.L151:
1590:./Lib/Src/stm32f4xx_can.c **** 
 2707              		.loc 1 1590 13
 2708 001e 3B68     		ldr	r3, [r7]
 2709 0020 C3F31303 		ubfx	r3, r3, #0, #20
 2710 0024 FB60     		str	r3, [r7, #12]
1592:./Lib/Src/stm32f4xx_can.c ****     {
 2711              		.loc 1 1592 19
 2712 0026 3B68     		ldr	r3, [r7]
 2713 0028 03F00073 		and	r3, r3, #33554432
1592:./Lib/Src/stm32f4xx_can.c ****     {
 2714              		.loc 1 1592 8
 2715 002c 002B     		cmp	r3, #0
 2716 002e 03D0     		beq	.L153
1595:./Lib/Src/stm32f4xx_can.c ****     }
 2717              		.loc 1 1595 18
 2718 0030 7B68     		ldr	r3, [r7, #4]
 2719 0032 FA68     		ldr	r2, [r7, #12]
 2720 0034 DA60     		str	r2, [r3, #12]
 2721              		.loc 1 1613 1
 2722 0036 14E0     		b	.L156
 2723              	.L153:
1597:./Lib/Src/stm32f4xx_can.c ****     {
 2724              		.loc 1 1597 24
 2725 0038 3B68     		ldr	r3, [r7]
 2726 003a 03F08063 		and	r3, r3, #67108864
1597:./Lib/Src/stm32f4xx_can.c ****     {
 2727              		.loc 1 1597 13
 2728 003e 002B     		cmp	r3, #0
ARM GAS  /tmp/cc1QyFkl.s 			page 78


 2729 0040 03D0     		beq	.L154
1600:./Lib/Src/stm32f4xx_can.c ****     }
 2730              		.loc 1 1600 18
 2731 0042 7B68     		ldr	r3, [r7, #4]
 2732 0044 FA68     		ldr	r2, [r7, #12]
 2733 0046 1A61     		str	r2, [r3, #16]
 2734              		.loc 1 1613 1
 2735 0048 0BE0     		b	.L156
 2736              	.L154:
1602:./Lib/Src/stm32f4xx_can.c ****     {
 2737              		.loc 1 1602 24
 2738 004a 3B68     		ldr	r3, [r7]
 2739 004c 03F00063 		and	r3, r3, #134217728
1602:./Lib/Src/stm32f4xx_can.c ****     {
 2740              		.loc 1 1602 13
 2741 0050 002B     		cmp	r3, #0
 2742 0052 03D0     		beq	.L155
1605:./Lib/Src/stm32f4xx_can.c ****     }
 2743              		.loc 1 1605 17
 2744 0054 7B68     		ldr	r3, [r7, #4]
 2745 0056 FA68     		ldr	r2, [r7, #12]
 2746 0058 9A60     		str	r2, [r3, #8]
 2747              		.loc 1 1613 1
 2748 005a 02E0     		b	.L156
 2749              	.L155:
1610:./Lib/Src/stm32f4xx_can.c ****     }
 2750              		.loc 1 1610 17
 2751 005c 7B68     		ldr	r3, [r7, #4]
 2752 005e FA68     		ldr	r2, [r7, #12]
 2753 0060 5A60     		str	r2, [r3, #4]
 2754              	.L156:
 2755              		.loc 1 1613 1
 2756 0062 00BF     		nop
 2757 0064 1437     		adds	r7, r7, #20
 2758              		.cfi_def_cfa_offset 4
 2759 0066 BD46     		mov	sp, r7
 2760              		.cfi_def_cfa_register 13
 2761              		@ sp needed
 2762 0068 5DF8047B 		ldr	r7, [sp], #4
 2763              		.cfi_restore 7
 2764              		.cfi_def_cfa_offset 0
 2765 006c 7047     		bx	lr
 2766              	.L158:
 2767 006e 00BF     		.align	2
 2768              	.L157:
 2769 0070 7000F030 		.word	821035120
 2770              		.cfi_endproc
 2771              	.LFE144:
 2773              		.section	.text.CAN_GetITStatus,"ax",%progbits
 2774              		.align	1
 2775              		.global	CAN_GetITStatus
 2776              		.syntax unified
 2777              		.thumb
 2778              		.thumb_func
 2780              	CAN_GetITStatus:
 2781              	.LFB145:
1614:./Lib/Src/stm32f4xx_can.c **** 
ARM GAS  /tmp/cc1QyFkl.s 			page 79


1615:./Lib/Src/stm32f4xx_can.c **** /**
1616:./Lib/Src/stm32f4xx_can.c ****   * @brief  Checks whether the specified CANx interrupt has occurred or not.
1617:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1618:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the CAN interrupt source to check.
1619:./Lib/Src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1620:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt 
1621:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP0: FIFO 0 message pending Interrupt 
1622:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1623:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1624:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FMP1: FIFO 1 message pending Interrupt 
1625:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1626:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1627:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1628:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1629:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1630:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1631:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1632:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1633:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1634:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1635:./Lib/Src/stm32f4xx_can.c ****   * @retval The current state of CAN_IT (SET or RESET).
1636:./Lib/Src/stm32f4xx_can.c ****   */
1637:./Lib/Src/stm32f4xx_can.c **** ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
1638:./Lib/Src/stm32f4xx_can.c **** {
 2782              		.loc 1 1638 1
 2783              		.cfi_startproc
 2784              		@ args = 0, pretend = 0, frame = 16
 2785              		@ frame_needed = 1, uses_anonymous_args = 0
 2786 0000 80B5     		push	{r7, lr}
 2787              		.cfi_def_cfa_offset 8
 2788              		.cfi_offset 7, -8
 2789              		.cfi_offset 14, -4
 2790 0002 84B0     		sub	sp, sp, #16
 2791              		.cfi_def_cfa_offset 24
 2792 0004 00AF     		add	r7, sp, #0
 2793              		.cfi_def_cfa_register 7
 2794 0006 7860     		str	r0, [r7, #4]
 2795 0008 3960     		str	r1, [r7]
1639:./Lib/Src/stm32f4xx_can.c ****   ITStatus itstatus = RESET;
 2796              		.loc 1 1639 12
 2797 000a 0023     		movs	r3, #0
 2798 000c FB73     		strb	r3, [r7, #15]
1640:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1641:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1642:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_IT(CAN_IT));
1643:./Lib/Src/stm32f4xx_can.c ****   
1644:./Lib/Src/stm32f4xx_can.c ****   /* check the interrupt enable bit */
1645:./Lib/Src/stm32f4xx_can.c ****  if((CANx->IER & CAN_IT) != RESET)
 2799              		.loc 1 1645 10
 2800 000e 7B68     		ldr	r3, [r7, #4]
 2801 0010 5A69     		ldr	r2, [r3, #20]
 2802              		.loc 1 1645 16
 2803 0012 3B68     		ldr	r3, [r7]
 2804 0014 1340     		ands	r3, r3, r2
 2805              		.loc 1 1645 4
 2806 0016 002B     		cmp	r3, #0
 2807 0018 00F01B81 		beq	.L160
ARM GAS  /tmp/cc1QyFkl.s 			page 80


1646:./Lib/Src/stm32f4xx_can.c ****  {
1647:./Lib/Src/stm32f4xx_can.c ****    /* in case the Interrupt is enabled, .... */
1648:./Lib/Src/stm32f4xx_can.c ****     switch (CAN_IT)
 2808              		.loc 1 1648 5
 2809 001c 3B68     		ldr	r3, [r7]
 2810 001e B3F5003F 		cmp	r3, #131072
 2811 0022 00F0DD80 		beq	.L161
 2812 0026 3B68     		ldr	r3, [r7]
 2813 0028 B3F5003F 		cmp	r3, #131072
 2814 002c 00F20E81 		bhi	.L162
 2815 0030 3B68     		ldr	r3, [r7]
 2816 0032 B3F5803F 		cmp	r3, #65536
 2817 0036 00F0CA80 		beq	.L163
 2818 003a 3B68     		ldr	r3, [r7]
 2819 003c B3F5803F 		cmp	r3, #65536
 2820 0040 00F20481 		bhi	.L162
 2821 0044 3B68     		ldr	r3, [r7]
 2822 0046 B3F5004F 		cmp	r3, #32768
 2823 004a 00F0F680 		beq	.L164
 2824 004e 3B68     		ldr	r3, [r7]
 2825 0050 B3F5004F 		cmp	r3, #32768
 2826 0054 00F2FA80 		bhi	.L162
 2827 0058 3B68     		ldr	r3, [r7]
 2828 005a B3F5006F 		cmp	r3, #2048
 2829 005e 00F0E380 		beq	.L165
 2830 0062 3B68     		ldr	r3, [r7]
 2831 0064 B3F5006F 		cmp	r3, #2048
 2832 0068 00F2F080 		bhi	.L162
 2833 006c 3B68     		ldr	r3, [r7]
 2834 006e B3F5806F 		cmp	r3, #1024
 2835 0072 00F0D080 		beq	.L166
 2836 0076 3B68     		ldr	r3, [r7]
 2837 0078 B3F5806F 		cmp	r3, #1024
 2838 007c 00F2E680 		bhi	.L162
 2839 0080 3B68     		ldr	r3, [r7]
 2840 0082 B3F5007F 		cmp	r3, #512
 2841 0086 00F0BD80 		beq	.L167
 2842 008a 3B68     		ldr	r3, [r7]
 2843 008c B3F5007F 		cmp	r3, #512
 2844 0090 00F2DC80 		bhi	.L162
 2845 0094 3B68     		ldr	r3, [r7]
 2846 0096 B3F5807F 		cmp	r3, #256
 2847 009a 00F0AA80 		beq	.L168
 2848 009e 3B68     		ldr	r3, [r7]
 2849 00a0 B3F5807F 		cmp	r3, #256
 2850 00a4 00F2D280 		bhi	.L162
 2851 00a8 3B68     		ldr	r3, [r7]
 2852 00aa 202B     		cmp	r3, #32
 2853 00ac 4CD8     		bhi	.L169
 2854 00ae 3B68     		ldr	r3, [r7]
 2855 00b0 002B     		cmp	r3, #0
 2856 00b2 00F0CB80 		beq	.L162
 2857 00b6 3B68     		ldr	r3, [r7]
 2858 00b8 013B     		subs	r3, r3, #1
 2859 00ba 1F2B     		cmp	r3, #31
 2860 00bc 00F2C680 		bhi	.L162
 2861 00c0 01A2     		adr	r2, .L171
ARM GAS  /tmp/cc1QyFkl.s 			page 81


 2862 00c2 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2863 00c6 00BF     		.p2align 2
 2864              	.L171:
 2865 00c8 51010000 		.word	.L176+1
 2866 00cc 63010000 		.word	.L175+1
 2867 00d0 4D020000 		.word	.L162+1
 2868 00d4 75010000 		.word	.L174+1
 2869 00d8 4D020000 		.word	.L162+1
 2870 00dc 4D020000 		.word	.L162+1
 2871 00e0 4D020000 		.word	.L162+1
 2872 00e4 87010000 		.word	.L173+1
 2873 00e8 4D020000 		.word	.L162+1
 2874 00ec 4D020000 		.word	.L162+1
 2875 00f0 4D020000 		.word	.L162+1
 2876 00f4 4D020000 		.word	.L162+1
 2877 00f8 4D020000 		.word	.L162+1
 2878 00fc 4D020000 		.word	.L162+1
 2879 0100 4D020000 		.word	.L162+1
 2880 0104 99010000 		.word	.L172+1
 2881 0108 4D020000 		.word	.L162+1
 2882 010c 4D020000 		.word	.L162+1
 2883 0110 4D020000 		.word	.L162+1
 2884 0114 4D020000 		.word	.L162+1
 2885 0118 4D020000 		.word	.L162+1
 2886 011c 4D020000 		.word	.L162+1
 2887 0120 4D020000 		.word	.L162+1
 2888 0124 4D020000 		.word	.L162+1
 2889 0128 4D020000 		.word	.L162+1
 2890 012c 4D020000 		.word	.L162+1
 2891 0130 4D020000 		.word	.L162+1
 2892 0134 4D020000 		.word	.L162+1
 2893 0138 4D020000 		.word	.L162+1
 2894 013c 4D020000 		.word	.L162+1
 2895 0140 4D020000 		.word	.L162+1
 2896 0144 AB010000 		.word	.L170+1
 2897              		.p2align 1
 2898              	.L169:
 2899 0148 3B68     		ldr	r3, [r7]
 2900 014a 402B     		cmp	r3, #64
 2901 014c 36D0     		beq	.L177
 2902 014e 7DE0     		b	.L162
 2903              	.L176:
1649:./Lib/Src/stm32f4xx_can.c ****     {
1650:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_TME:
1651:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_TSR_RQCPx bits */
1652:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 2904              		.loc 1 1652 38
 2905 0150 7B68     		ldr	r3, [r7, #4]
 2906 0152 9B68     		ldr	r3, [r3, #8]
 2907              		.loc 1 1652 20
 2908 0154 4249     		ldr	r1, .L182
 2909 0156 1846     		mov	r0, r3
 2910 0158 FFF7FEFF 		bl	CheckITStatus
 2911 015c 0346     		mov	r3, r0
 2912 015e FB73     		strb	r3, [r7, #15]
1653:./Lib/Src/stm32f4xx_can.c ****         break;
 2913              		.loc 1 1653 9
ARM GAS  /tmp/cc1QyFkl.s 			page 82


 2914 0160 79E0     		b	.L179
 2915              	.L175:
1654:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_FMP0:
1655:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FMP0 bit */
1656:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 2916              		.loc 1 1656 38
 2917 0162 7B68     		ldr	r3, [r7, #4]
 2918 0164 DB68     		ldr	r3, [r3, #12]
 2919              		.loc 1 1656 20
 2920 0166 0321     		movs	r1, #3
 2921 0168 1846     		mov	r0, r3
 2922 016a FFF7FEFF 		bl	CheckITStatus
 2923 016e 0346     		mov	r3, r0
 2924 0170 FB73     		strb	r3, [r7, #15]
1657:./Lib/Src/stm32f4xx_can.c ****         break;
 2925              		.loc 1 1657 9
 2926 0172 70E0     		b	.L179
 2927              	.L174:
1658:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_FF0:
1659:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FULL0 bit */
1660:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 2928              		.loc 1 1660 38
 2929 0174 7B68     		ldr	r3, [r7, #4]
 2930 0176 DB68     		ldr	r3, [r3, #12]
 2931              		.loc 1 1660 20
 2932 0178 0821     		movs	r1, #8
 2933 017a 1846     		mov	r0, r3
 2934 017c FFF7FEFF 		bl	CheckITStatus
 2935 0180 0346     		mov	r3, r0
 2936 0182 FB73     		strb	r3, [r7, #15]
1661:./Lib/Src/stm32f4xx_can.c ****         break;
 2937              		.loc 1 1661 9
 2938 0184 67E0     		b	.L179
 2939              	.L173:
1662:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_FOV0:
1663:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_RF0R_FOVR0 bit */
1664:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 2940              		.loc 1 1664 38
 2941 0186 7B68     		ldr	r3, [r7, #4]
 2942 0188 DB68     		ldr	r3, [r3, #12]
 2943              		.loc 1 1664 20
 2944 018a 1021     		movs	r1, #16
 2945 018c 1846     		mov	r0, r3
 2946 018e FFF7FEFF 		bl	CheckITStatus
 2947 0192 0346     		mov	r3, r0
 2948 0194 FB73     		strb	r3, [r7, #15]
1665:./Lib/Src/stm32f4xx_can.c ****         break;
 2949              		.loc 1 1665 9
 2950 0196 5EE0     		b	.L179
 2951              	.L172:
1666:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_FMP1:
1667:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FMP1 bit */
1668:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 2952              		.loc 1 1668 38
 2953 0198 7B68     		ldr	r3, [r7, #4]
 2954 019a 1B69     		ldr	r3, [r3, #16]
 2955              		.loc 1 1668 20
ARM GAS  /tmp/cc1QyFkl.s 			page 83


 2956 019c 0321     		movs	r1, #3
 2957 019e 1846     		mov	r0, r3
 2958 01a0 FFF7FEFF 		bl	CheckITStatus
 2959 01a4 0346     		mov	r3, r0
 2960 01a6 FB73     		strb	r3, [r7, #15]
1669:./Lib/Src/stm32f4xx_can.c ****         break;
 2961              		.loc 1 1669 9
 2962 01a8 55E0     		b	.L179
 2963              	.L170:
1670:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_FF1:
1671:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FULL1 bit */
1672:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 2964              		.loc 1 1672 38
 2965 01aa 7B68     		ldr	r3, [r7, #4]
 2966 01ac 1B69     		ldr	r3, [r3, #16]
 2967              		.loc 1 1672 20
 2968 01ae 0821     		movs	r1, #8
 2969 01b0 1846     		mov	r0, r3
 2970 01b2 FFF7FEFF 		bl	CheckITStatus
 2971 01b6 0346     		mov	r3, r0
 2972 01b8 FB73     		strb	r3, [r7, #15]
1673:./Lib/Src/stm32f4xx_can.c ****         break;
 2973              		.loc 1 1673 9
 2974 01ba 4CE0     		b	.L179
 2975              	.L177:
1674:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_FOV1:
1675:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_RF1R_FOVR1 bit */
1676:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 2976              		.loc 1 1676 38
 2977 01bc 7B68     		ldr	r3, [r7, #4]
 2978 01be 1B69     		ldr	r3, [r3, #16]
 2979              		.loc 1 1676 20
 2980 01c0 1021     		movs	r1, #16
 2981 01c2 1846     		mov	r0, r3
 2982 01c4 FFF7FEFF 		bl	CheckITStatus
 2983 01c8 0346     		mov	r3, r0
 2984 01ca FB73     		strb	r3, [r7, #15]
1677:./Lib/Src/stm32f4xx_can.c ****         break;
 2985              		.loc 1 1677 9
 2986 01cc 43E0     		b	.L179
 2987              	.L163:
1678:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_WKU:
1679:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_MSR_WKUI bit */
1680:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 2988              		.loc 1 1680 38
 2989 01ce 7B68     		ldr	r3, [r7, #4]
 2990 01d0 5B68     		ldr	r3, [r3, #4]
 2991              		.loc 1 1680 20
 2992 01d2 0821     		movs	r1, #8
 2993 01d4 1846     		mov	r0, r3
 2994 01d6 FFF7FEFF 		bl	CheckITStatus
 2995 01da 0346     		mov	r3, r0
 2996 01dc FB73     		strb	r3, [r7, #15]
1681:./Lib/Src/stm32f4xx_can.c ****         break;
 2997              		.loc 1 1681 9
 2998 01de 3AE0     		b	.L179
 2999              	.L161:
ARM GAS  /tmp/cc1QyFkl.s 			page 84


1682:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_SLK:
1683:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_MSR_SLAKI bit */
1684:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 3000              		.loc 1 1684 38
 3001 01e0 7B68     		ldr	r3, [r7, #4]
 3002 01e2 5B68     		ldr	r3, [r3, #4]
 3003              		.loc 1 1684 20
 3004 01e4 1021     		movs	r1, #16
 3005 01e6 1846     		mov	r0, r3
 3006 01e8 FFF7FEFF 		bl	CheckITStatus
 3007 01ec 0346     		mov	r3, r0
 3008 01ee FB73     		strb	r3, [r7, #15]
1685:./Lib/Src/stm32f4xx_can.c ****         break;
 3009              		.loc 1 1685 9
 3010 01f0 31E0     		b	.L179
 3011              	.L168:
1686:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_EWG:
1687:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_ESR_EWGF bit */
1688:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 3012              		.loc 1 1688 38
 3013 01f2 7B68     		ldr	r3, [r7, #4]
 3014 01f4 9B69     		ldr	r3, [r3, #24]
 3015              		.loc 1 1688 20
 3016 01f6 0121     		movs	r1, #1
 3017 01f8 1846     		mov	r0, r3
 3018 01fa FFF7FEFF 		bl	CheckITStatus
 3019 01fe 0346     		mov	r3, r0
 3020 0200 FB73     		strb	r3, [r7, #15]
1689:./Lib/Src/stm32f4xx_can.c ****         break;
 3021              		.loc 1 1689 9
 3022 0202 28E0     		b	.L179
 3023              	.L167:
1690:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_EPV:
1691:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_ESR_EPVF bit */
1692:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 3024              		.loc 1 1692 38
 3025 0204 7B68     		ldr	r3, [r7, #4]
 3026 0206 9B69     		ldr	r3, [r3, #24]
 3027              		.loc 1 1692 20
 3028 0208 0221     		movs	r1, #2
 3029 020a 1846     		mov	r0, r3
 3030 020c FFF7FEFF 		bl	CheckITStatus
 3031 0210 0346     		mov	r3, r0
 3032 0212 FB73     		strb	r3, [r7, #15]
1693:./Lib/Src/stm32f4xx_can.c ****         break;
 3033              		.loc 1 1693 9
 3034 0214 1FE0     		b	.L179
 3035              	.L166:
1694:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_BOF:
1695:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_ESR_BOFF bit */
1696:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 3036              		.loc 1 1696 38
 3037 0216 7B68     		ldr	r3, [r7, #4]
 3038 0218 9B69     		ldr	r3, [r3, #24]
 3039              		.loc 1 1696 20
 3040 021a 0421     		movs	r1, #4
 3041 021c 1846     		mov	r0, r3
ARM GAS  /tmp/cc1QyFkl.s 			page 85


 3042 021e FFF7FEFF 		bl	CheckITStatus
 3043 0222 0346     		mov	r3, r0
 3044 0224 FB73     		strb	r3, [r7, #15]
1697:./Lib/Src/stm32f4xx_can.c ****         break;
 3045              		.loc 1 1697 9
 3046 0226 16E0     		b	.L179
 3047              	.L165:
1698:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_LEC:
1699:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_ESR_LEC bit */
1700:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 3048              		.loc 1 1700 38
 3049 0228 7B68     		ldr	r3, [r7, #4]
 3050 022a 9B69     		ldr	r3, [r3, #24]
 3051              		.loc 1 1700 20
 3052 022c 7021     		movs	r1, #112
 3053 022e 1846     		mov	r0, r3
 3054 0230 FFF7FEFF 		bl	CheckITStatus
 3055 0234 0346     		mov	r3, r0
 3056 0236 FB73     		strb	r3, [r7, #15]
1701:./Lib/Src/stm32f4xx_can.c ****         break;
 3057              		.loc 1 1701 9
 3058 0238 0DE0     		b	.L179
 3059              	.L164:
1702:./Lib/Src/stm32f4xx_can.c ****       case CAN_IT_ERR:
1703:./Lib/Src/stm32f4xx_can.c ****         /* Check CAN_MSR_ERRI bit */ 
1704:./Lib/Src/stm32f4xx_can.c ****         itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 3060              		.loc 1 1704 38
 3061 023a 7B68     		ldr	r3, [r7, #4]
 3062 023c 5B68     		ldr	r3, [r3, #4]
 3063              		.loc 1 1704 20
 3064 023e 0421     		movs	r1, #4
 3065 0240 1846     		mov	r0, r3
 3066 0242 FFF7FEFF 		bl	CheckITStatus
 3067 0246 0346     		mov	r3, r0
 3068 0248 FB73     		strb	r3, [r7, #15]
1705:./Lib/Src/stm32f4xx_can.c ****         break;
 3069              		.loc 1 1705 9
 3070 024a 04E0     		b	.L179
 3071              	.L162:
1706:./Lib/Src/stm32f4xx_can.c ****       default:
1707:./Lib/Src/stm32f4xx_can.c ****         /* in case of error, return RESET */
1708:./Lib/Src/stm32f4xx_can.c ****         itstatus = RESET;
 3072              		.loc 1 1708 18
 3073 024c 0023     		movs	r3, #0
 3074 024e FB73     		strb	r3, [r7, #15]
1709:./Lib/Src/stm32f4xx_can.c ****         break;
 3075              		.loc 1 1709 9
 3076 0250 01E0     		b	.L179
 3077              	.L160:
1710:./Lib/Src/stm32f4xx_can.c ****     }
1711:./Lib/Src/stm32f4xx_can.c ****   }
1712:./Lib/Src/stm32f4xx_can.c ****   else
1713:./Lib/Src/stm32f4xx_can.c ****   {
1714:./Lib/Src/stm32f4xx_can.c ****    /* in case the Interrupt is not enabled, return RESET */
1715:./Lib/Src/stm32f4xx_can.c ****     itstatus  = RESET;
 3078              		.loc 1 1715 15
 3079 0252 0023     		movs	r3, #0
ARM GAS  /tmp/cc1QyFkl.s 			page 86


 3080 0254 FB73     		strb	r3, [r7, #15]
 3081              	.L179:
1716:./Lib/Src/stm32f4xx_can.c ****   }
1717:./Lib/Src/stm32f4xx_can.c ****   
1718:./Lib/Src/stm32f4xx_can.c ****   /* Return the CAN_IT status */
1719:./Lib/Src/stm32f4xx_can.c ****   return  itstatus;
 3082              		.loc 1 1719 11
 3083 0256 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1720:./Lib/Src/stm32f4xx_can.c **** }
 3084              		.loc 1 1720 1
 3085 0258 1846     		mov	r0, r3
 3086 025a 1037     		adds	r7, r7, #16
 3087              		.cfi_def_cfa_offset 8
 3088 025c BD46     		mov	sp, r7
 3089              		.cfi_def_cfa_register 13
 3090              		@ sp needed
 3091 025e 80BD     		pop	{r7, pc}
 3092              	.L183:
 3093              		.align	2
 3094              	.L182:
 3095 0260 01010100 		.word	65793
 3096              		.cfi_endproc
 3097              	.LFE145:
 3099              		.section	.text.CAN_ClearITPendingBit,"ax",%progbits
 3100              		.align	1
 3101              		.global	CAN_ClearITPendingBit
 3102              		.syntax unified
 3103              		.thumb
 3104              		.thumb_func
 3106              	CAN_ClearITPendingBit:
 3107              	.LFB146:
1721:./Lib/Src/stm32f4xx_can.c **** 
1722:./Lib/Src/stm32f4xx_can.c **** /**
1723:./Lib/Src/stm32f4xx_can.c ****   * @brief  Clears the CANx's interrupt pending bits.
1724:./Lib/Src/stm32f4xx_can.c ****   * @param  CANx: where x can be 1,2 or 3 to select the CAN peripheral.
1725:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_IT: specifies the interrupt pending bit to clear.
1726:./Lib/Src/stm32f4xx_can.c ****   *          This parameter can be one of the following values:
1727:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_TME: Transmit mailbox empty Interrupt
1728:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF0: FIFO 0 full Interrupt
1729:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV0: FIFO 0 overrun Interrupt
1730:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FF1: FIFO 1 full Interrupt
1731:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_FOV1: FIFO 1 overrun Interrupt
1732:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_WKU: Wake-up Interrupt
1733:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_SLK: Sleep acknowledge Interrupt  
1734:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_EWG: Error warning Interrupt
1735:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_EPV: Error passive Interrupt
1736:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_BOF: Bus-off Interrupt  
1737:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_LEC: Last error code Interrupt
1738:./Lib/Src/stm32f4xx_can.c ****   *            @arg CAN_IT_ERR: Error Interrupt
1739:./Lib/Src/stm32f4xx_can.c ****   * @note   CAN3 peripheral is available only for STM32F413_423xx devices
1740:./Lib/Src/stm32f4xx_can.c ****   * @retval None
1741:./Lib/Src/stm32f4xx_can.c ****   */
1742:./Lib/Src/stm32f4xx_can.c **** void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
1743:./Lib/Src/stm32f4xx_can.c **** {
 3108              		.loc 1 1743 1
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc1QyFkl.s 			page 87


 3111              		@ frame_needed = 1, uses_anonymous_args = 0
 3112              		@ link register save eliminated.
 3113 0000 80B4     		push	{r7}
 3114              		.cfi_def_cfa_offset 4
 3115              		.cfi_offset 7, -4
 3116 0002 83B0     		sub	sp, sp, #12
 3117              		.cfi_def_cfa_offset 16
 3118 0004 00AF     		add	r7, sp, #0
 3119              		.cfi_def_cfa_register 7
 3120 0006 7860     		str	r0, [r7, #4]
 3121 0008 3960     		str	r1, [r7]
1744:./Lib/Src/stm32f4xx_can.c ****   /* Check the parameters */
1745:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_ALL_PERIPH(CANx));
1746:./Lib/Src/stm32f4xx_can.c ****   assert_param(IS_CAN_CLEAR_IT(CAN_IT));
1747:./Lib/Src/stm32f4xx_can.c **** 
1748:./Lib/Src/stm32f4xx_can.c ****   switch (CAN_IT)
 3122              		.loc 1 1748 3
 3123 000a 3B68     		ldr	r3, [r7]
 3124 000c B3F5003F 		cmp	r3, #131072
 3125 0010 00F0AA80 		beq	.L185
 3126 0014 3B68     		ldr	r3, [r7]
 3127 0016 B3F5003F 		cmp	r3, #131072
 3128 001a 00F2C380 		bhi	.L201
 3129 001e 3B68     		ldr	r3, [r7]
 3130 0020 B3F5803F 		cmp	r3, #65536
 3131 0024 00F09C80 		beq	.L187
 3132 0028 3B68     		ldr	r3, [r7]
 3133 002a B3F5803F 		cmp	r3, #65536
 3134 002e 00F2B980 		bhi	.L201
 3135 0032 3B68     		ldr	r3, [r7]
 3136 0034 B3F5004F 		cmp	r3, #32768
 3137 0038 00F0AD80 		beq	.L188
 3138 003c 3B68     		ldr	r3, [r7]
 3139 003e B3F5004F 		cmp	r3, #32768
 3140 0042 00F2AF80 		bhi	.L201
 3141 0046 3B68     		ldr	r3, [r7]
 3142 0048 B3F5006F 		cmp	r3, #2048
 3143 004c 00F09C80 		beq	.L189
 3144 0050 3B68     		ldr	r3, [r7]
 3145 0052 B3F5006F 		cmp	r3, #2048
 3146 0056 00F2A580 		bhi	.L201
 3147 005a 3B68     		ldr	r3, [r7]
 3148 005c B3F5806F 		cmp	r3, #1024
 3149 0060 00F08E80 		beq	.L190
 3150 0064 3B68     		ldr	r3, [r7]
 3151 0066 B3F5806F 		cmp	r3, #1024
 3152 006a 00F29B80 		bhi	.L201
 3153 006e 3B68     		ldr	r3, [r7]
 3154 0070 B3F5007F 		cmp	r3, #512
 3155 0074 00F08080 		beq	.L191
 3156 0078 3B68     		ldr	r3, [r7]
 3157 007a B3F5007F 		cmp	r3, #512
 3158 007e 00F29180 		bhi	.L201
 3159 0082 3B68     		ldr	r3, [r7]
 3160 0084 B3F5807F 		cmp	r3, #256
 3161 0088 72D0     		beq	.L192
 3162 008a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc1QyFkl.s 			page 88


 3163 008c B3F5807F 		cmp	r3, #256
 3164 0090 00F28880 		bhi	.L201
 3165 0094 3B68     		ldr	r3, [r7]
 3166 0096 202B     		cmp	r3, #32
 3167 0098 4AD8     		bhi	.L193
 3168 009a 3B68     		ldr	r3, [r7]
 3169 009c 002B     		cmp	r3, #0
 3170 009e 00F08180 		beq	.L201
 3171 00a2 3B68     		ldr	r3, [r7]
 3172 00a4 013B     		subs	r3, r3, #1
 3173 00a6 1F2B     		cmp	r3, #31
 3174 00a8 7CD8     		bhi	.L201
 3175 00aa 01A2     		adr	r2, .L195
 3176 00ac 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3177              		.p2align 2
 3178              	.L195:
 3179 00b0 39010000 		.word	.L198+1
 3180 00b4 A5010000 		.word	.L201+1
 3181 00b8 A5010000 		.word	.L201+1
 3182 00bc 41010000 		.word	.L197+1
 3183 00c0 A5010000 		.word	.L201+1
 3184 00c4 A5010000 		.word	.L201+1
 3185 00c8 A5010000 		.word	.L201+1
 3186 00cc 49010000 		.word	.L196+1
 3187 00d0 A5010000 		.word	.L201+1
 3188 00d4 A5010000 		.word	.L201+1
 3189 00d8 A5010000 		.word	.L201+1
 3190 00dc A5010000 		.word	.L201+1
 3191 00e0 A5010000 		.word	.L201+1
 3192 00e4 A5010000 		.word	.L201+1
 3193 00e8 A5010000 		.word	.L201+1
 3194 00ec A5010000 		.word	.L201+1
 3195 00f0 A5010000 		.word	.L201+1
 3196 00f4 A5010000 		.word	.L201+1
 3197 00f8 A5010000 		.word	.L201+1
 3198 00fc A5010000 		.word	.L201+1
 3199 0100 A5010000 		.word	.L201+1
 3200 0104 A5010000 		.word	.L201+1
 3201 0108 A5010000 		.word	.L201+1
 3202 010c A5010000 		.word	.L201+1
 3203 0110 A5010000 		.word	.L201+1
 3204 0114 A5010000 		.word	.L201+1
 3205 0118 A5010000 		.word	.L201+1
 3206 011c A5010000 		.word	.L201+1
 3207 0120 A5010000 		.word	.L201+1
 3208 0124 A5010000 		.word	.L201+1
 3209 0128 A5010000 		.word	.L201+1
 3210 012c 51010000 		.word	.L194+1
 3211              		.p2align 1
 3212              	.L193:
 3213 0130 3B68     		ldr	r3, [r7]
 3214 0132 402B     		cmp	r3, #64
 3215 0134 10D0     		beq	.L199
1749:./Lib/Src/stm32f4xx_can.c ****   {
1750:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_TME:
1751:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_TSR_RQCPx (rc_w1)*/
1752:./Lib/Src/stm32f4xx_can.c ****       CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
ARM GAS  /tmp/cc1QyFkl.s 			page 89


1753:./Lib/Src/stm32f4xx_can.c ****       break;
1754:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FF0:
1755:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FULL0 (rc_w1)*/
1756:./Lib/Src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FULL0; 
1757:./Lib/Src/stm32f4xx_can.c ****       break;
1758:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
1759:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
1760:./Lib/Src/stm32f4xx_can.c ****       CANx->RF0R = CAN_RF0R_FOVR0; 
1761:./Lib/Src/stm32f4xx_can.c ****       break;
1762:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FF1:
1763:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FULL1 (rc_w1)*/
1764:./Lib/Src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FULL1;  
1765:./Lib/Src/stm32f4xx_can.c ****       break;
1766:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
1767:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
1768:./Lib/Src/stm32f4xx_can.c ****       CANx->RF1R = CAN_RF1R_FOVR1; 
1769:./Lib/Src/stm32f4xx_can.c ****       break;
1770:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_WKU:
1771:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_WKUI (rc_w1)*/
1772:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_WKUI;  
1773:./Lib/Src/stm32f4xx_can.c ****       break;
1774:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_SLK:
1775:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
1776:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_SLAKI;   
1777:./Lib/Src/stm32f4xx_can.c ****       break;
1778:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_EWG:
1779:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1780:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI;
1781:./Lib/Src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
1782:./Lib/Src/stm32f4xx_can.c ****       break;
1783:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_EPV:
1784:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1785:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1786:./Lib/Src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1787:./Lib/Src/stm32f4xx_can.c ****       break;
1788:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_BOF:
1789:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */ 
1790:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1791:./Lib/Src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
1792:./Lib/Src/stm32f4xx_can.c ****        break;
1793:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_LEC:
1794:./Lib/Src/stm32f4xx_can.c ****       /*  Clear LEC bits */
1795:./Lib/Src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1796:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1797:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1798:./Lib/Src/stm32f4xx_can.c ****       break;
1799:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_ERR:
1800:./Lib/Src/stm32f4xx_can.c ****       /*Clear LEC bits */
1801:./Lib/Src/stm32f4xx_can.c ****       CANx->ESR = RESET; 
1802:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
1803:./Lib/Src/stm32f4xx_can.c ****       CANx->MSR = CAN_MSR_ERRI; 
1804:./Lib/Src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
1805:./Lib/Src/stm32f4xx_can.c ****        break;
1806:./Lib/Src/stm32f4xx_can.c ****     default:
1807:./Lib/Src/stm32f4xx_can.c ****        break;
 3216              		.loc 1 1807 8
 3217 0136 35E0     		b	.L201
ARM GAS  /tmp/cc1QyFkl.s 			page 90


 3218              	.L198:
1752:./Lib/Src/stm32f4xx_can.c ****       break;
 3219              		.loc 1 1752 17
 3220 0138 7B68     		ldr	r3, [r7, #4]
 3221 013a 1E4A     		ldr	r2, .L203
 3222 013c 9A60     		str	r2, [r3, #8]
1753:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FF0:
 3223              		.loc 1 1753 7
 3224 013e 32E0     		b	.L200
 3225              	.L197:
1756:./Lib/Src/stm32f4xx_can.c ****       break;
 3226              		.loc 1 1756 18
 3227 0140 7B68     		ldr	r3, [r7, #4]
 3228 0142 0822     		movs	r2, #8
 3229 0144 DA60     		str	r2, [r3, #12]
1757:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FOV0:
 3230              		.loc 1 1757 7
 3231 0146 2EE0     		b	.L200
 3232              	.L196:
1760:./Lib/Src/stm32f4xx_can.c ****       break;
 3233              		.loc 1 1760 18
 3234 0148 7B68     		ldr	r3, [r7, #4]
 3235 014a 1022     		movs	r2, #16
 3236 014c DA60     		str	r2, [r3, #12]
1761:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FF1:
 3237              		.loc 1 1761 7
 3238 014e 2AE0     		b	.L200
 3239              	.L194:
1764:./Lib/Src/stm32f4xx_can.c ****       break;
 3240              		.loc 1 1764 18
 3241 0150 7B68     		ldr	r3, [r7, #4]
 3242 0152 0822     		movs	r2, #8
 3243 0154 1A61     		str	r2, [r3, #16]
1765:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_FOV1:
 3244              		.loc 1 1765 7
 3245 0156 26E0     		b	.L200
 3246              	.L199:
1768:./Lib/Src/stm32f4xx_can.c ****       break;
 3247              		.loc 1 1768 18
 3248 0158 7B68     		ldr	r3, [r7, #4]
 3249 015a 1022     		movs	r2, #16
 3250 015c 1A61     		str	r2, [r3, #16]
1769:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_WKU:
 3251              		.loc 1 1769 7
 3252 015e 22E0     		b	.L200
 3253              	.L187:
1772:./Lib/Src/stm32f4xx_can.c ****       break;
 3254              		.loc 1 1772 17
 3255 0160 7B68     		ldr	r3, [r7, #4]
 3256 0162 0822     		movs	r2, #8
 3257 0164 5A60     		str	r2, [r3, #4]
1773:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_SLK:
 3258              		.loc 1 1773 7
 3259 0166 1EE0     		b	.L200
 3260              	.L185:
1776:./Lib/Src/stm32f4xx_can.c ****       break;
 3261              		.loc 1 1776 17
ARM GAS  /tmp/cc1QyFkl.s 			page 91


 3262 0168 7B68     		ldr	r3, [r7, #4]
 3263 016a 1022     		movs	r2, #16
 3264 016c 5A60     		str	r2, [r3, #4]
1777:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_EWG:
 3265              		.loc 1 1777 7
 3266 016e 1AE0     		b	.L200
 3267              	.L192:
1780:./Lib/Src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
 3268              		.loc 1 1780 17
 3269 0170 7B68     		ldr	r3, [r7, #4]
 3270 0172 0422     		movs	r2, #4
 3271 0174 5A60     		str	r2, [r3, #4]
1782:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_EPV:
 3272              		.loc 1 1782 7
 3273 0176 16E0     		b	.L200
 3274              	.L191:
1785:./Lib/Src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 3275              		.loc 1 1785 17
 3276 0178 7B68     		ldr	r3, [r7, #4]
 3277 017a 0422     		movs	r2, #4
 3278 017c 5A60     		str	r2, [r3, #4]
1787:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_BOF:
 3279              		.loc 1 1787 7
 3280 017e 12E0     		b	.L200
 3281              	.L190:
1790:./Lib/Src/stm32f4xx_can.c ****        /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
 3282              		.loc 1 1790 17
 3283 0180 7B68     		ldr	r3, [r7, #4]
 3284 0182 0422     		movs	r2, #4
 3285 0184 5A60     		str	r2, [r3, #4]
1792:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_LEC:
 3286              		.loc 1 1792 8
 3287 0186 0EE0     		b	.L200
 3288              	.L189:
1795:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 3289              		.loc 1 1795 17
 3290 0188 7B68     		ldr	r3, [r7, #4]
 3291 018a 0022     		movs	r2, #0
 3292 018c 9A61     		str	r2, [r3, #24]
1797:./Lib/Src/stm32f4xx_can.c ****       break;
 3293              		.loc 1 1797 17
 3294 018e 7B68     		ldr	r3, [r7, #4]
 3295 0190 0422     		movs	r2, #4
 3296 0192 5A60     		str	r2, [r3, #4]
1798:./Lib/Src/stm32f4xx_can.c ****     case CAN_IT_ERR:
 3297              		.loc 1 1798 7
 3298 0194 07E0     		b	.L200
 3299              	.L188:
1801:./Lib/Src/stm32f4xx_can.c ****       /* Clear CAN_MSR_ERRI (rc_w1) */
 3300              		.loc 1 1801 17
 3301 0196 7B68     		ldr	r3, [r7, #4]
 3302 0198 0022     		movs	r2, #0
 3303 019a 9A61     		str	r2, [r3, #24]
1803:./Lib/Src/stm32f4xx_can.c ****        /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
 3304              		.loc 1 1803 17
 3305 019c 7B68     		ldr	r3, [r7, #4]
 3306 019e 0422     		movs	r2, #4
ARM GAS  /tmp/cc1QyFkl.s 			page 92


 3307 01a0 5A60     		str	r2, [r3, #4]
1805:./Lib/Src/stm32f4xx_can.c ****     default:
 3308              		.loc 1 1805 8
 3309 01a2 00E0     		b	.L200
 3310              	.L201:
 3311              		.loc 1 1807 8
 3312 01a4 00BF     		nop
 3313              	.L200:
1808:./Lib/Src/stm32f4xx_can.c ****    }
1809:./Lib/Src/stm32f4xx_can.c **** }
 3314              		.loc 1 1809 1
 3315 01a6 00BF     		nop
 3316 01a8 0C37     		adds	r7, r7, #12
 3317              		.cfi_def_cfa_offset 4
 3318 01aa BD46     		mov	sp, r7
 3319              		.cfi_def_cfa_register 13
 3320              		@ sp needed
 3321 01ac 5DF8047B 		ldr	r7, [sp], #4
 3322              		.cfi_restore 7
 3323              		.cfi_def_cfa_offset 0
 3324 01b0 7047     		bx	lr
 3325              	.L204:
 3326 01b2 00BF     		.align	2
 3327              	.L203:
 3328 01b4 01010100 		.word	65793
 3329              		.cfi_endproc
 3330              	.LFE146:
 3332              		.section	.text.CheckITStatus,"ax",%progbits
 3333              		.align	1
 3334              		.syntax unified
 3335              		.thumb
 3336              		.thumb_func
 3338              	CheckITStatus:
 3339              	.LFB147:
1810:./Lib/Src/stm32f4xx_can.c ****  /**
1811:./Lib/Src/stm32f4xx_can.c ****   * @}
1812:./Lib/Src/stm32f4xx_can.c ****   */
1813:./Lib/Src/stm32f4xx_can.c **** 
1814:./Lib/Src/stm32f4xx_can.c **** /**
1815:./Lib/Src/stm32f4xx_can.c ****   * @brief  Checks whether the CAN interrupt has occurred or not.
1816:./Lib/Src/stm32f4xx_can.c ****   * @param  CAN_Reg: specifies the CAN interrupt register to check.
1817:./Lib/Src/stm32f4xx_can.c ****   * @param  It_Bit: specifies the interrupt source bit to check.
1818:./Lib/Src/stm32f4xx_can.c ****   * @retval The new state of the CAN Interrupt (SET or RESET).
1819:./Lib/Src/stm32f4xx_can.c ****   */
1820:./Lib/Src/stm32f4xx_can.c **** static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
1821:./Lib/Src/stm32f4xx_can.c **** {
 3340              		.loc 1 1821 1
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 16
 3343              		@ frame_needed = 1, uses_anonymous_args = 0
 3344              		@ link register save eliminated.
 3345 0000 80B4     		push	{r7}
 3346              		.cfi_def_cfa_offset 4
 3347              		.cfi_offset 7, -4
 3348 0002 85B0     		sub	sp, sp, #20
 3349              		.cfi_def_cfa_offset 24
 3350 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cc1QyFkl.s 			page 93


 3351              		.cfi_def_cfa_register 7
 3352 0006 7860     		str	r0, [r7, #4]
 3353 0008 3960     		str	r1, [r7]
1822:./Lib/Src/stm32f4xx_can.c ****   ITStatus pendingbitstatus = RESET;
 3354              		.loc 1 1822 12
 3355 000a 0023     		movs	r3, #0
 3356 000c FB73     		strb	r3, [r7, #15]
1823:./Lib/Src/stm32f4xx_can.c ****   
1824:./Lib/Src/stm32f4xx_can.c ****   if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 3357              		.loc 1 1824 16
 3358 000e 7A68     		ldr	r2, [r7, #4]
 3359 0010 3B68     		ldr	r3, [r7]
 3360 0012 1340     		ands	r3, r3, r2
 3361              		.loc 1 1824 6
 3362 0014 002B     		cmp	r3, #0
 3363 0016 02D0     		beq	.L206
1825:./Lib/Src/stm32f4xx_can.c ****   {
1826:./Lib/Src/stm32f4xx_can.c ****     /* CAN_IT is set */
1827:./Lib/Src/stm32f4xx_can.c ****     pendingbitstatus = SET;
 3364              		.loc 1 1827 22
 3365 0018 0123     		movs	r3, #1
 3366 001a FB73     		strb	r3, [r7, #15]
 3367 001c 01E0     		b	.L207
 3368              	.L206:
1828:./Lib/Src/stm32f4xx_can.c ****   }
1829:./Lib/Src/stm32f4xx_can.c ****   else
1830:./Lib/Src/stm32f4xx_can.c ****   {
1831:./Lib/Src/stm32f4xx_can.c ****     /* CAN_IT is reset */
1832:./Lib/Src/stm32f4xx_can.c ****     pendingbitstatus = RESET;
 3369              		.loc 1 1832 22
 3370 001e 0023     		movs	r3, #0
 3371 0020 FB73     		strb	r3, [r7, #15]
 3372              	.L207:
1833:./Lib/Src/stm32f4xx_can.c ****   }
1834:./Lib/Src/stm32f4xx_can.c ****   return pendingbitstatus;
 3373              		.loc 1 1834 10
 3374 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1835:./Lib/Src/stm32f4xx_can.c **** }
 3375              		.loc 1 1835 1
 3376 0024 1846     		mov	r0, r3
 3377 0026 1437     		adds	r7, r7, #20
 3378              		.cfi_def_cfa_offset 4
 3379 0028 BD46     		mov	sp, r7
 3380              		.cfi_def_cfa_register 13
 3381              		@ sp needed
 3382 002a 5DF8047B 		ldr	r7, [sp], #4
 3383              		.cfi_restore 7
 3384              		.cfi_def_cfa_offset 0
 3385 002e 7047     		bx	lr
 3386              		.cfi_endproc
 3387              	.LFE147:
 3389              		.text
 3390              	.Letext0:
 3391              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 3392              		.file 3 "./Start/stm32f4xx.h"
 3393              		.file 4 "./Lib/inc/stm32f4xx_can.h"
 3394              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/cc1QyFkl.s 			page 94


ARM GAS  /tmp/cc1QyFkl.s 			page 95


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_can.c
     /tmp/cc1QyFkl.s:21     .text.CAN_DeInit:0000000000000000 $t
     /tmp/cc1QyFkl.s:27     .text.CAN_DeInit:0000000000000000 CAN_DeInit
     /tmp/cc1QyFkl.s:78     .text.CAN_DeInit:0000000000000044 $d
     /tmp/cc1QyFkl.s:83     .text.CAN_Init:0000000000000000 $t
     /tmp/cc1QyFkl.s:89     .text.CAN_Init:0000000000000000 CAN_Init
     /tmp/cc1QyFkl.s:400    .text.CAN_FilterInit:0000000000000000 $t
     /tmp/cc1QyFkl.s:406    .text.CAN_FilterInit:0000000000000000 CAN_FilterInit
     /tmp/cc1QyFkl.s:670    .text.CAN_FilterInit:0000000000000180 $d
     /tmp/cc1QyFkl.s:675    .text.CAN_StructInit:0000000000000000 $t
     /tmp/cc1QyFkl.s:681    .text.CAN_StructInit:0000000000000000 CAN_StructInit
     /tmp/cc1QyFkl.s:755    .text.CAN_SlaveStartBank:0000000000000000 $t
     /tmp/cc1QyFkl.s:761    .text.CAN_SlaveStartBank:0000000000000000 CAN_SlaveStartBank
     /tmp/cc1QyFkl.s:825    .text.CAN_SlaveStartBank:000000000000005c $d
     /tmp/cc1QyFkl.s:830    .text.CAN_DBGFreeze:0000000000000000 $t
     /tmp/cc1QyFkl.s:836    .text.CAN_DBGFreeze:0000000000000000 CAN_DBGFreeze
     /tmp/cc1QyFkl.s:890    .text.CAN_TTComModeCmd:0000000000000000 $t
     /tmp/cc1QyFkl.s:896    .text.CAN_TTComModeCmd:0000000000000000 CAN_TTComModeCmd
     /tmp/cc1QyFkl.s:992    .text.CAN_Transmit:0000000000000000 $t
     /tmp/cc1QyFkl.s:998    .text.CAN_Transmit:0000000000000000 CAN_Transmit
     /tmp/cc1QyFkl.s:1293   .text.CAN_TransmitStatus:0000000000000000 $t
     /tmp/cc1QyFkl.s:1299   .text.CAN_TransmitStatus:0000000000000000 CAN_TransmitStatus
     /tmp/cc1QyFkl.s:1482   .text.CAN_TransmitStatus:00000000000000f0 $d
     /tmp/cc1QyFkl.s:1492   .text.CAN_CancelTransmit:0000000000000000 $t
     /tmp/cc1QyFkl.s:1498   .text.CAN_CancelTransmit:0000000000000000 CAN_CancelTransmit
     /tmp/cc1QyFkl.s:1567   .text.CAN_Receive:0000000000000000 $t
     /tmp/cc1QyFkl.s:1573   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/cc1QyFkl.s:1816   .text.CAN_FIFORelease:0000000000000000 $t
     /tmp/cc1QyFkl.s:1822   .text.CAN_FIFORelease:0000000000000000 CAN_FIFORelease
     /tmp/cc1QyFkl.s:1870   .text.CAN_MessagePending:0000000000000000 $t
     /tmp/cc1QyFkl.s:1876   .text.CAN_MessagePending:0000000000000000 CAN_MessagePending
     /tmp/cc1QyFkl.s:1945   .text.CAN_OperatingModeRequest:0000000000000000 $t
     /tmp/cc1QyFkl.s:1951   .text.CAN_OperatingModeRequest:0000000000000000 CAN_OperatingModeRequest
     /tmp/cc1QyFkl.s:2149   .text.CAN_Sleep:0000000000000000 $t
     /tmp/cc1QyFkl.s:2155   .text.CAN_Sleep:0000000000000000 CAN_Sleep
     /tmp/cc1QyFkl.s:2211   .text.CAN_WakeUp:0000000000000000 $t
     /tmp/cc1QyFkl.s:2217   .text.CAN_WakeUp:0000000000000000 CAN_WakeUp
     /tmp/cc1QyFkl.s:2295   .text.CAN_GetLastErrorCode:0000000000000000 $t
     /tmp/cc1QyFkl.s:2301   .text.CAN_GetLastErrorCode:0000000000000000 CAN_GetLastErrorCode
     /tmp/cc1QyFkl.s:2344   .text.CAN_GetReceiveErrorCounter:0000000000000000 $t
     /tmp/cc1QyFkl.s:2350   .text.CAN_GetReceiveErrorCounter:0000000000000000 CAN_GetReceiveErrorCounter
     /tmp/cc1QyFkl.s:2392   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 $t
     /tmp/cc1QyFkl.s:2398   .text.CAN_GetLSBTransmitErrorCounter:0000000000000000 CAN_GetLSBTransmitErrorCounter
     /tmp/cc1QyFkl.s:2440   .text.CAN_ITConfig:0000000000000000 $t
     /tmp/cc1QyFkl.s:2446   .text.CAN_ITConfig:0000000000000000 CAN_ITConfig
     /tmp/cc1QyFkl.s:2505   .text.CAN_GetFlagStatus:0000000000000000 $t
     /tmp/cc1QyFkl.s:2511   .text.CAN_GetFlagStatus:0000000000000000 CAN_GetFlagStatus
     /tmp/cc1QyFkl.s:2670   .text.CAN_ClearFlag:0000000000000000 $t
     /tmp/cc1QyFkl.s:2676   .text.CAN_ClearFlag:0000000000000000 CAN_ClearFlag
     /tmp/cc1QyFkl.s:2769   .text.CAN_ClearFlag:0000000000000070 $d
     /tmp/cc1QyFkl.s:2774   .text.CAN_GetITStatus:0000000000000000 $t
     /tmp/cc1QyFkl.s:2780   .text.CAN_GetITStatus:0000000000000000 CAN_GetITStatus
     /tmp/cc1QyFkl.s:2865   .text.CAN_GetITStatus:00000000000000c8 $d
     /tmp/cc1QyFkl.s:2897   .text.CAN_GetITStatus:0000000000000148 $t
     /tmp/cc1QyFkl.s:3338   .text.CheckITStatus:0000000000000000 CheckITStatus
     /tmp/cc1QyFkl.s:3095   .text.CAN_GetITStatus:0000000000000260 $d
ARM GAS  /tmp/cc1QyFkl.s 			page 96


     /tmp/cc1QyFkl.s:3100   .text.CAN_ClearITPendingBit:0000000000000000 $t
     /tmp/cc1QyFkl.s:3106   .text.CAN_ClearITPendingBit:0000000000000000 CAN_ClearITPendingBit
     /tmp/cc1QyFkl.s:3179   .text.CAN_ClearITPendingBit:00000000000000b0 $d
     /tmp/cc1QyFkl.s:3211   .text.CAN_ClearITPendingBit:0000000000000130 $t
     /tmp/cc1QyFkl.s:3328   .text.CAN_ClearITPendingBit:00000000000001b4 $d
     /tmp/cc1QyFkl.s:3333   .text.CheckITStatus:0000000000000000 $t

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
