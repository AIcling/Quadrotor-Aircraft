ARM GAS  /tmp/ccAy73nP.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_iwdg.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_iwdg.c"
  20              		.section	.text.IWDG_WriteAccessCmd,"ax",%progbits
  21              		.align	1
  22              		.global	IWDG_WriteAccessCmd
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	IWDG_WriteAccessCmd:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_iwdg.c **** /**
   2:./Lib/Src/stm32f4xx_iwdg.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_iwdg.c ****   * @file    stm32f4xx_iwdg.c
   4:./Lib/Src/stm32f4xx_iwdg.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_iwdg.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_iwdg.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_iwdg.c ****   *          functionalities of the Independent watchdog (IWDG) peripheral:           
   9:./Lib/Src/stm32f4xx_iwdg.c ****   *           + Prescaler and Counter configuration
  10:./Lib/Src/stm32f4xx_iwdg.c ****   *           + IWDG activation
  11:./Lib/Src/stm32f4xx_iwdg.c ****   *           + Flag management
  12:./Lib/Src/stm32f4xx_iwdg.c ****   *
  13:./Lib/Src/stm32f4xx_iwdg.c ****     @verbatim    
  14:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================
  15:./Lib/Src/stm32f4xx_iwdg.c ****                           ##### IWDG features #####
  16:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================
  17:./Lib/Src/stm32f4xx_iwdg.c ****     [..]  
  18:./Lib/Src/stm32f4xx_iwdg.c ****       The IWDG can be started by either software or hardware (configurable
  19:./Lib/Src/stm32f4xx_iwdg.c ****       through option byte).
  20:./Lib/Src/stm32f4xx_iwdg.c ****               
  21:./Lib/Src/stm32f4xx_iwdg.c ****       The IWDG is clocked by its own dedicated low-speed clock (LSI) and
  22:./Lib/Src/stm32f4xx_iwdg.c ****       thus stays active even if the main clock fails.
  23:./Lib/Src/stm32f4xx_iwdg.c ****       Once the IWDG is started, the LSI is forced ON and cannot be disabled
  24:./Lib/Src/stm32f4xx_iwdg.c ****       (LSI cannot be disabled too), and the counter starts counting down from 
  25:./Lib/Src/stm32f4xx_iwdg.c ****       the reset value of 0xFFF. When it reaches the end of count value (0x000)
  26:./Lib/Src/stm32f4xx_iwdg.c ****       a system reset is generated.
  27:./Lib/Src/stm32f4xx_iwdg.c ****       The IWDG counter should be reloaded at regular intervals to prevent
  28:./Lib/Src/stm32f4xx_iwdg.c ****       an MCU reset.
  29:./Lib/Src/stm32f4xx_iwdg.c ****                              
  30:./Lib/Src/stm32f4xx_iwdg.c ****       The IWDG is implemented in the VDD voltage domain that is still functional
ARM GAS  /tmp/ccAy73nP.s 			page 2


  31:./Lib/Src/stm32f4xx_iwdg.c ****       in STOP and STANDBY mode (IWDG reset can wake-up from STANDBY).          
  32:./Lib/Src/stm32f4xx_iwdg.c ****               
  33:./Lib/Src/stm32f4xx_iwdg.c ****       IWDGRST flag in RCC_CSR register can be used to inform when a IWDG
  34:./Lib/Src/stm32f4xx_iwdg.c ****       reset occurs.
  35:./Lib/Src/stm32f4xx_iwdg.c ****               
  36:./Lib/Src/stm32f4xx_iwdg.c ****       Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
  37:./Lib/Src/stm32f4xx_iwdg.c ****       The IWDG timeout may vary due to LSI frequency dispersion. STM32F4xx
  38:./Lib/Src/stm32f4xx_iwdg.c ****       devices provide the capability to measure the LSI frequency (LSI clock
  39:./Lib/Src/stm32f4xx_iwdg.c ****       connected internally to TIM5 CH4 input capture). The measured value
  40:./Lib/Src/stm32f4xx_iwdg.c ****       can be used to have an IWDG timeout with an acceptable accuracy. 
  41:./Lib/Src/stm32f4xx_iwdg.c ****       For more information, please refer to the STM32F4xx Reference manual
  42:./Lib/Src/stm32f4xx_iwdg.c ****             
  43:./Lib/Src/stm32f4xx_iwdg.c ****                      ##### How to use this driver #####
  44:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================
  45:./Lib/Src/stm32f4xx_iwdg.c ****     [..]
  46:./Lib/Src/stm32f4xx_iwdg.c ****       (#) Enable write access to IWDG_PR and IWDG_RLR registers using
  47:./Lib/Src/stm32f4xx_iwdg.c ****           IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable) function
  48:./Lib/Src/stm32f4xx_iwdg.c ****                  
  49:./Lib/Src/stm32f4xx_iwdg.c ****       (#) Configure the IWDG prescaler using IWDG_SetPrescaler() function
  50:./Lib/Src/stm32f4xx_iwdg.c ****               
  51:./Lib/Src/stm32f4xx_iwdg.c ****       (#) Configure the IWDG counter value using IWDG_SetReload() function.
  52:./Lib/Src/stm32f4xx_iwdg.c ****           This value will be loaded in the IWDG counter each time the counter
  53:./Lib/Src/stm32f4xx_iwdg.c ****           is reloaded, then the IWDG will start counting down from this value.
  54:./Lib/Src/stm32f4xx_iwdg.c ****               
  55:./Lib/Src/stm32f4xx_iwdg.c ****       (#) Start the IWDG using IWDG_Enable() function, when the IWDG is used
  56:./Lib/Src/stm32f4xx_iwdg.c ****           in software mode (no need to enable the LSI, it will be enabled
  57:./Lib/Src/stm32f4xx_iwdg.c ****           by hardware)
  58:./Lib/Src/stm32f4xx_iwdg.c ****                
  59:./Lib/Src/stm32f4xx_iwdg.c ****       (#) Then the application program must reload the IWDG counter at regular
  60:./Lib/Src/stm32f4xx_iwdg.c ****           intervals during normal operation to prevent an MCU reset, using
  61:./Lib/Src/stm32f4xx_iwdg.c ****           IWDG_ReloadCounter() function.      
  62:./Lib/Src/stm32f4xx_iwdg.c ****             
  63:./Lib/Src/stm32f4xx_iwdg.c ****     @endverbatim    
  64:./Lib/Src/stm32f4xx_iwdg.c ****   ******************************************************************************
  65:./Lib/Src/stm32f4xx_iwdg.c ****   * @attention
  66:./Lib/Src/stm32f4xx_iwdg.c ****   *
  67:./Lib/Src/stm32f4xx_iwdg.c ****   * Copyright (c) 2016 STMicroelectronics.
  68:./Lib/Src/stm32f4xx_iwdg.c ****   * All rights reserved.
  69:./Lib/Src/stm32f4xx_iwdg.c ****   *
  70:./Lib/Src/stm32f4xx_iwdg.c ****   * This software is licensed under terms that can be found in the LICENSE file
  71:./Lib/Src/stm32f4xx_iwdg.c ****   * in the root directory of this software component.
  72:./Lib/Src/stm32f4xx_iwdg.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  73:./Lib/Src/stm32f4xx_iwdg.c ****   *
  74:./Lib/Src/stm32f4xx_iwdg.c ****   ******************************************************************************
  75:./Lib/Src/stm32f4xx_iwdg.c ****   */
  76:./Lib/Src/stm32f4xx_iwdg.c **** 
  77:./Lib/Src/stm32f4xx_iwdg.c **** /* Includes ------------------------------------------------------------------*/
  78:./Lib/Src/stm32f4xx_iwdg.c **** #include "stm32f4xx_iwdg.h"
  79:./Lib/Src/stm32f4xx_iwdg.c **** 
  80:./Lib/Src/stm32f4xx_iwdg.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  81:./Lib/Src/stm32f4xx_iwdg.c ****   * @{
  82:./Lib/Src/stm32f4xx_iwdg.c ****   */
  83:./Lib/Src/stm32f4xx_iwdg.c **** 
  84:./Lib/Src/stm32f4xx_iwdg.c **** /** @defgroup IWDG 
  85:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief IWDG driver modules
  86:./Lib/Src/stm32f4xx_iwdg.c ****   * @{
  87:./Lib/Src/stm32f4xx_iwdg.c ****   */ 
ARM GAS  /tmp/ccAy73nP.s 			page 3


  88:./Lib/Src/stm32f4xx_iwdg.c **** 
  89:./Lib/Src/stm32f4xx_iwdg.c **** /* Private typedef -----------------------------------------------------------*/
  90:./Lib/Src/stm32f4xx_iwdg.c **** /* Private define ------------------------------------------------------------*/
  91:./Lib/Src/stm32f4xx_iwdg.c **** 
  92:./Lib/Src/stm32f4xx_iwdg.c **** /* KR register bit mask */
  93:./Lib/Src/stm32f4xx_iwdg.c **** #define KR_KEY_RELOAD    ((uint16_t)0xAAAA)
  94:./Lib/Src/stm32f4xx_iwdg.c **** #define KR_KEY_ENABLE    ((uint16_t)0xCCCC)
  95:./Lib/Src/stm32f4xx_iwdg.c **** 
  96:./Lib/Src/stm32f4xx_iwdg.c **** /* Private macro -------------------------------------------------------------*/
  97:./Lib/Src/stm32f4xx_iwdg.c **** /* Private variables ---------------------------------------------------------*/
  98:./Lib/Src/stm32f4xx_iwdg.c **** /* Private function prototypes -----------------------------------------------*/
  99:./Lib/Src/stm32f4xx_iwdg.c **** /* Private functions ---------------------------------------------------------*/
 100:./Lib/Src/stm32f4xx_iwdg.c **** 
 101:./Lib/Src/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Private_Functions
 102:./Lib/Src/stm32f4xx_iwdg.c ****   * @{
 103:./Lib/Src/stm32f4xx_iwdg.c ****   */
 104:./Lib/Src/stm32f4xx_iwdg.c **** 
 105:./Lib/Src/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Group1 Prescaler and Counter configuration functions
 106:./Lib/Src/stm32f4xx_iwdg.c ****  *  @brief   Prescaler and Counter configuration functions
 107:./Lib/Src/stm32f4xx_iwdg.c ****  *
 108:./Lib/Src/stm32f4xx_iwdg.c **** @verbatim   
 109:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================
 110:./Lib/Src/stm32f4xx_iwdg.c ****               ##### Prescaler and Counter configuration functions #####
 111:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================  
 112:./Lib/Src/stm32f4xx_iwdg.c **** 
 113:./Lib/Src/stm32f4xx_iwdg.c **** @endverbatim
 114:./Lib/Src/stm32f4xx_iwdg.c ****   * @{
 115:./Lib/Src/stm32f4xx_iwdg.c ****   */
 116:./Lib/Src/stm32f4xx_iwdg.c **** 
 117:./Lib/Src/stm32f4xx_iwdg.c **** /**
 118:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief  Enables or disables write access to IWDG_PR and IWDG_RLR registers.
 119:./Lib/Src/stm32f4xx_iwdg.c ****   * @param  IWDG_WriteAccess: new state of write access to IWDG_PR and IWDG_RLR registers.
 120:./Lib/Src/stm32f4xx_iwdg.c ****   *          This parameter can be one of the following values:
 121:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
 122:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR register
 123:./Lib/Src/stm32f4xx_iwdg.c ****   * @retval None
 124:./Lib/Src/stm32f4xx_iwdg.c ****   */
 125:./Lib/Src/stm32f4xx_iwdg.c **** void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
 126:./Lib/Src/stm32f4xx_iwdg.c **** {
  29              		.loc 1 126 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 0346     		mov	r3, r0
  42 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 127:./Lib/Src/stm32f4xx_iwdg.c ****   /* Check the parameters */
 128:./Lib/Src/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
 129:./Lib/Src/stm32f4xx_iwdg.c ****   IWDG->KR = IWDG_WriteAccess;
  43              		.loc 1 129 7
ARM GAS  /tmp/ccAy73nP.s 			page 4


  44 000a 044A     		ldr	r2, .L2
  45              		.loc 1 129 12
  46 000c FB88     		ldrh	r3, [r7, #6]
  47 000e 1360     		str	r3, [r2]
 130:./Lib/Src/stm32f4xx_iwdg.c **** }
  48              		.loc 1 130 1
  49 0010 00BF     		nop
  50 0012 0C37     		adds	r7, r7, #12
  51              		.cfi_def_cfa_offset 4
  52 0014 BD46     		mov	sp, r7
  53              		.cfi_def_cfa_register 13
  54              		@ sp needed
  55 0016 5DF8047B 		ldr	r7, [sp], #4
  56              		.cfi_restore 7
  57              		.cfi_def_cfa_offset 0
  58 001a 7047     		bx	lr
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 001c 00300040 		.word	1073754112
  63              		.cfi_endproc
  64              	.LFE123:
  66              		.section	.text.IWDG_SetPrescaler,"ax",%progbits
  67              		.align	1
  68              		.global	IWDG_SetPrescaler
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  73              	IWDG_SetPrescaler:
  74              	.LFB124:
 131:./Lib/Src/stm32f4xx_iwdg.c **** 
 132:./Lib/Src/stm32f4xx_iwdg.c **** /**
 133:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief  Sets IWDG Prescaler value.
 134:./Lib/Src/stm32f4xx_iwdg.c ****   * @param  IWDG_Prescaler: specifies the IWDG Prescaler value.
 135:./Lib/Src/stm32f4xx_iwdg.c ****   *          This parameter can be one of the following values:
 136:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_4: IWDG prescaler set to 4
 137:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_8: IWDG prescaler set to 8
 138:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_16: IWDG prescaler set to 16
 139:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_32: IWDG prescaler set to 32
 140:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_64: IWDG prescaler set to 64
 141:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
 142:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
 143:./Lib/Src/stm32f4xx_iwdg.c ****   * @retval None
 144:./Lib/Src/stm32f4xx_iwdg.c ****   */
 145:./Lib/Src/stm32f4xx_iwdg.c **** void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
 146:./Lib/Src/stm32f4xx_iwdg.c **** {
  75              		.loc 1 146 1
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80 0000 80B4     		push	{r7}
  81              		.cfi_def_cfa_offset 4
  82              		.cfi_offset 7, -4
  83 0002 83B0     		sub	sp, sp, #12
  84              		.cfi_def_cfa_offset 16
  85 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccAy73nP.s 			page 5


  86              		.cfi_def_cfa_register 7
  87 0006 0346     		mov	r3, r0
  88 0008 FB71     		strb	r3, [r7, #7]
 147:./Lib/Src/stm32f4xx_iwdg.c ****   /* Check the parameters */
 148:./Lib/Src/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
 149:./Lib/Src/stm32f4xx_iwdg.c ****   IWDG->PR = IWDG_Prescaler;
  89              		.loc 1 149 7
  90 000a 044A     		ldr	r2, .L5
  91              		.loc 1 149 12
  92 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  93 000e 5360     		str	r3, [r2, #4]
 150:./Lib/Src/stm32f4xx_iwdg.c **** }
  94              		.loc 1 150 1
  95 0010 00BF     		nop
  96 0012 0C37     		adds	r7, r7, #12
  97              		.cfi_def_cfa_offset 4
  98 0014 BD46     		mov	sp, r7
  99              		.cfi_def_cfa_register 13
 100              		@ sp needed
 101 0016 5DF8047B 		ldr	r7, [sp], #4
 102              		.cfi_restore 7
 103              		.cfi_def_cfa_offset 0
 104 001a 7047     		bx	lr
 105              	.L6:
 106              		.align	2
 107              	.L5:
 108 001c 00300040 		.word	1073754112
 109              		.cfi_endproc
 110              	.LFE124:
 112              		.section	.text.IWDG_SetReload,"ax",%progbits
 113              		.align	1
 114              		.global	IWDG_SetReload
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 119              	IWDG_SetReload:
 120              	.LFB125:
 151:./Lib/Src/stm32f4xx_iwdg.c **** 
 152:./Lib/Src/stm32f4xx_iwdg.c **** /**
 153:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief  Sets IWDG Reload value.
 154:./Lib/Src/stm32f4xx_iwdg.c ****   * @param  Reload: specifies the IWDG Reload value.
 155:./Lib/Src/stm32f4xx_iwdg.c ****   *          This parameter must be a number between 0 and 0x0FFF.
 156:./Lib/Src/stm32f4xx_iwdg.c ****   * @retval None
 157:./Lib/Src/stm32f4xx_iwdg.c ****   */
 158:./Lib/Src/stm32f4xx_iwdg.c **** void IWDG_SetReload(uint16_t Reload)
 159:./Lib/Src/stm32f4xx_iwdg.c **** {
 121              		.loc 1 159 1
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 8
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 7, -4
 129 0002 83B0     		sub	sp, sp, #12
 130              		.cfi_def_cfa_offset 16
 131 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccAy73nP.s 			page 6


 132              		.cfi_def_cfa_register 7
 133 0006 0346     		mov	r3, r0
 134 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 160:./Lib/Src/stm32f4xx_iwdg.c ****   /* Check the parameters */
 161:./Lib/Src/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_RELOAD(Reload));
 162:./Lib/Src/stm32f4xx_iwdg.c ****   IWDG->RLR = Reload;
 135              		.loc 1 162 7
 136 000a 044A     		ldr	r2, .L8
 137              		.loc 1 162 13
 138 000c FB88     		ldrh	r3, [r7, #6]
 139 000e 9360     		str	r3, [r2, #8]
 163:./Lib/Src/stm32f4xx_iwdg.c **** }
 140              		.loc 1 163 1
 141 0010 00BF     		nop
 142 0012 0C37     		adds	r7, r7, #12
 143              		.cfi_def_cfa_offset 4
 144 0014 BD46     		mov	sp, r7
 145              		.cfi_def_cfa_register 13
 146              		@ sp needed
 147 0016 5DF8047B 		ldr	r7, [sp], #4
 148              		.cfi_restore 7
 149              		.cfi_def_cfa_offset 0
 150 001a 7047     		bx	lr
 151              	.L9:
 152              		.align	2
 153              	.L8:
 154 001c 00300040 		.word	1073754112
 155              		.cfi_endproc
 156              	.LFE125:
 158              		.section	.text.IWDG_ReloadCounter,"ax",%progbits
 159              		.align	1
 160              		.global	IWDG_ReloadCounter
 161              		.syntax unified
 162              		.thumb
 163              		.thumb_func
 165              	IWDG_ReloadCounter:
 166              	.LFB126:
 164:./Lib/Src/stm32f4xx_iwdg.c **** 
 165:./Lib/Src/stm32f4xx_iwdg.c **** /**
 166:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief  Reloads IWDG counter with value defined in the reload register
 167:./Lib/Src/stm32f4xx_iwdg.c ****   *         (write access to IWDG_PR and IWDG_RLR registers disabled).
 168:./Lib/Src/stm32f4xx_iwdg.c ****   * @param  None
 169:./Lib/Src/stm32f4xx_iwdg.c ****   * @retval None
 170:./Lib/Src/stm32f4xx_iwdg.c ****   */
 171:./Lib/Src/stm32f4xx_iwdg.c **** void IWDG_ReloadCounter(void)
 172:./Lib/Src/stm32f4xx_iwdg.c **** {
 167              		.loc 1 172 1
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 1, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 80B4     		push	{r7}
 173              		.cfi_def_cfa_offset 4
 174              		.cfi_offset 7, -4
 175 0002 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 173:./Lib/Src/stm32f4xx_iwdg.c ****   IWDG->KR = KR_KEY_RELOAD;
ARM GAS  /tmp/ccAy73nP.s 			page 7


 177              		.loc 1 173 7
 178 0004 044B     		ldr	r3, .L11
 179              		.loc 1 173 12
 180 0006 4AF6AA22 		movw	r2, #43690
 181 000a 1A60     		str	r2, [r3]
 174:./Lib/Src/stm32f4xx_iwdg.c **** }
 182              		.loc 1 174 1
 183 000c 00BF     		nop
 184 000e BD46     		mov	sp, r7
 185              		.cfi_def_cfa_register 13
 186              		@ sp needed
 187 0010 5DF8047B 		ldr	r7, [sp], #4
 188              		.cfi_restore 7
 189              		.cfi_def_cfa_offset 0
 190 0014 7047     		bx	lr
 191              	.L12:
 192 0016 00BF     		.align	2
 193              	.L11:
 194 0018 00300040 		.word	1073754112
 195              		.cfi_endproc
 196              	.LFE126:
 198              		.section	.text.IWDG_Enable,"ax",%progbits
 199              		.align	1
 200              		.global	IWDG_Enable
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 205              	IWDG_Enable:
 206              	.LFB127:
 175:./Lib/Src/stm32f4xx_iwdg.c **** 
 176:./Lib/Src/stm32f4xx_iwdg.c **** /**
 177:./Lib/Src/stm32f4xx_iwdg.c ****   * @}
 178:./Lib/Src/stm32f4xx_iwdg.c ****   */
 179:./Lib/Src/stm32f4xx_iwdg.c **** 
 180:./Lib/Src/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Group2 IWDG activation function
 181:./Lib/Src/stm32f4xx_iwdg.c ****  *  @brief   IWDG activation function 
 182:./Lib/Src/stm32f4xx_iwdg.c ****  *
 183:./Lib/Src/stm32f4xx_iwdg.c **** @verbatim   
 184:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================
 185:./Lib/Src/stm32f4xx_iwdg.c ****                     ##### IWDG activation function #####
 186:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================  
 187:./Lib/Src/stm32f4xx_iwdg.c **** 
 188:./Lib/Src/stm32f4xx_iwdg.c **** @endverbatim
 189:./Lib/Src/stm32f4xx_iwdg.c ****   * @{
 190:./Lib/Src/stm32f4xx_iwdg.c ****   */
 191:./Lib/Src/stm32f4xx_iwdg.c **** 
 192:./Lib/Src/stm32f4xx_iwdg.c **** /**
 193:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
 194:./Lib/Src/stm32f4xx_iwdg.c ****   * @param  None
 195:./Lib/Src/stm32f4xx_iwdg.c ****   * @retval None
 196:./Lib/Src/stm32f4xx_iwdg.c ****   */
 197:./Lib/Src/stm32f4xx_iwdg.c **** void IWDG_Enable(void)
 198:./Lib/Src/stm32f4xx_iwdg.c **** {
 207              		.loc 1 198 1
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccAy73nP.s 			page 8


 211              		@ link register save eliminated.
 212 0000 80B4     		push	{r7}
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 7, -4
 215 0002 00AF     		add	r7, sp, #0
 216              		.cfi_def_cfa_register 7
 199:./Lib/Src/stm32f4xx_iwdg.c ****   IWDG->KR = KR_KEY_ENABLE;
 217              		.loc 1 199 7
 218 0004 044B     		ldr	r3, .L14
 219              		.loc 1 199 12
 220 0006 4CF6CC42 		movw	r2, #52428
 221 000a 1A60     		str	r2, [r3]
 200:./Lib/Src/stm32f4xx_iwdg.c **** }
 222              		.loc 1 200 1
 223 000c 00BF     		nop
 224 000e BD46     		mov	sp, r7
 225              		.cfi_def_cfa_register 13
 226              		@ sp needed
 227 0010 5DF8047B 		ldr	r7, [sp], #4
 228              		.cfi_restore 7
 229              		.cfi_def_cfa_offset 0
 230 0014 7047     		bx	lr
 231              	.L15:
 232 0016 00BF     		.align	2
 233              	.L14:
 234 0018 00300040 		.word	1073754112
 235              		.cfi_endproc
 236              	.LFE127:
 238              		.section	.text.IWDG_GetFlagStatus,"ax",%progbits
 239              		.align	1
 240              		.global	IWDG_GetFlagStatus
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 245              	IWDG_GetFlagStatus:
 246              	.LFB128:
 201:./Lib/Src/stm32f4xx_iwdg.c **** 
 202:./Lib/Src/stm32f4xx_iwdg.c **** /**
 203:./Lib/Src/stm32f4xx_iwdg.c ****   * @}
 204:./Lib/Src/stm32f4xx_iwdg.c ****   */
 205:./Lib/Src/stm32f4xx_iwdg.c **** 
 206:./Lib/Src/stm32f4xx_iwdg.c **** /** @defgroup IWDG_Group3 Flag management function 
 207:./Lib/Src/stm32f4xx_iwdg.c ****  *  @brief  Flag management function  
 208:./Lib/Src/stm32f4xx_iwdg.c ****  *
 209:./Lib/Src/stm32f4xx_iwdg.c **** @verbatim   
 210:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================
 211:./Lib/Src/stm32f4xx_iwdg.c ****                     ##### Flag management function #####
 212:./Lib/Src/stm32f4xx_iwdg.c ****  ===============================================================================  
 213:./Lib/Src/stm32f4xx_iwdg.c **** 
 214:./Lib/Src/stm32f4xx_iwdg.c **** @endverbatim
 215:./Lib/Src/stm32f4xx_iwdg.c ****   * @{
 216:./Lib/Src/stm32f4xx_iwdg.c ****   */
 217:./Lib/Src/stm32f4xx_iwdg.c **** 
 218:./Lib/Src/stm32f4xx_iwdg.c **** /**
 219:./Lib/Src/stm32f4xx_iwdg.c ****   * @brief  Checks whether the specified IWDG flag is set or not.
 220:./Lib/Src/stm32f4xx_iwdg.c ****   * @param  IWDG_FLAG: specifies the flag to check.
 221:./Lib/Src/stm32f4xx_iwdg.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccAy73nP.s 			page 9


 222:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
 223:./Lib/Src/stm32f4xx_iwdg.c ****   *            @arg IWDG_FLAG_RVU: Reload Value Update on going
 224:./Lib/Src/stm32f4xx_iwdg.c ****   * @retval The new state of IWDG_FLAG (SET or RESET).
 225:./Lib/Src/stm32f4xx_iwdg.c ****   */
 226:./Lib/Src/stm32f4xx_iwdg.c **** FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
 227:./Lib/Src/stm32f4xx_iwdg.c **** {
 247              		.loc 1 227 1
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 16
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252 0000 80B4     		push	{r7}
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 85B0     		sub	sp, sp, #20
 256              		.cfi_def_cfa_offset 24
 257 0004 00AF     		add	r7, sp, #0
 258              		.cfi_def_cfa_register 7
 259 0006 0346     		mov	r3, r0
 260 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 228:./Lib/Src/stm32f4xx_iwdg.c ****   FlagStatus bitstatus = RESET;
 261              		.loc 1 228 14
 262 000a 0023     		movs	r3, #0
 263 000c FB73     		strb	r3, [r7, #15]
 229:./Lib/Src/stm32f4xx_iwdg.c ****   /* Check the parameters */
 230:./Lib/Src/stm32f4xx_iwdg.c ****   assert_param(IS_IWDG_FLAG(IWDG_FLAG));
 231:./Lib/Src/stm32f4xx_iwdg.c ****   if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 264              		.loc 1 231 12
 265 000e 094B     		ldr	r3, .L20
 266 0010 DA68     		ldr	r2, [r3, #12]
 267              		.loc 1 231 17
 268 0012 FB88     		ldrh	r3, [r7, #6]
 269 0014 1340     		ands	r3, r3, r2
 270              		.loc 1 231 6
 271 0016 002B     		cmp	r3, #0
 272 0018 02D0     		beq	.L17
 232:./Lib/Src/stm32f4xx_iwdg.c ****   {
 233:./Lib/Src/stm32f4xx_iwdg.c ****     bitstatus = SET;
 273              		.loc 1 233 15
 274 001a 0123     		movs	r3, #1
 275 001c FB73     		strb	r3, [r7, #15]
 276 001e 01E0     		b	.L18
 277              	.L17:
 234:./Lib/Src/stm32f4xx_iwdg.c ****   }
 235:./Lib/Src/stm32f4xx_iwdg.c ****   else
 236:./Lib/Src/stm32f4xx_iwdg.c ****   {
 237:./Lib/Src/stm32f4xx_iwdg.c ****     bitstatus = RESET;
 278              		.loc 1 237 15
 279 0020 0023     		movs	r3, #0
 280 0022 FB73     		strb	r3, [r7, #15]
 281              	.L18:
 238:./Lib/Src/stm32f4xx_iwdg.c ****   }
 239:./Lib/Src/stm32f4xx_iwdg.c ****   /* Return the flag status */
 240:./Lib/Src/stm32f4xx_iwdg.c ****   return bitstatus;
 282              		.loc 1 240 10
 283 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 241:./Lib/Src/stm32f4xx_iwdg.c **** }
ARM GAS  /tmp/ccAy73nP.s 			page 10


 284              		.loc 1 241 1
 285 0026 1846     		mov	r0, r3
 286 0028 1437     		adds	r7, r7, #20
 287              		.cfi_def_cfa_offset 4
 288 002a BD46     		mov	sp, r7
 289              		.cfi_def_cfa_register 13
 290              		@ sp needed
 291 002c 5DF8047B 		ldr	r7, [sp], #4
 292              		.cfi_restore 7
 293              		.cfi_def_cfa_offset 0
 294 0030 7047     		bx	lr
 295              	.L21:
 296 0032 00BF     		.align	2
 297              	.L20:
 298 0034 00300040 		.word	1073754112
 299              		.cfi_endproc
 300              	.LFE128:
 302              		.text
 303              	.Letext0:
 304              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 305              		.file 3 "./Start/stm32f4xx.h"
ARM GAS  /tmp/ccAy73nP.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_iwdg.c
     /tmp/ccAy73nP.s:21     .text.IWDG_WriteAccessCmd:0000000000000000 $t
     /tmp/ccAy73nP.s:27     .text.IWDG_WriteAccessCmd:0000000000000000 IWDG_WriteAccessCmd
     /tmp/ccAy73nP.s:62     .text.IWDG_WriteAccessCmd:000000000000001c $d
     /tmp/ccAy73nP.s:67     .text.IWDG_SetPrescaler:0000000000000000 $t
     /tmp/ccAy73nP.s:73     .text.IWDG_SetPrescaler:0000000000000000 IWDG_SetPrescaler
     /tmp/ccAy73nP.s:108    .text.IWDG_SetPrescaler:000000000000001c $d
     /tmp/ccAy73nP.s:113    .text.IWDG_SetReload:0000000000000000 $t
     /tmp/ccAy73nP.s:119    .text.IWDG_SetReload:0000000000000000 IWDG_SetReload
     /tmp/ccAy73nP.s:154    .text.IWDG_SetReload:000000000000001c $d
     /tmp/ccAy73nP.s:159    .text.IWDG_ReloadCounter:0000000000000000 $t
     /tmp/ccAy73nP.s:165    .text.IWDG_ReloadCounter:0000000000000000 IWDG_ReloadCounter
     /tmp/ccAy73nP.s:194    .text.IWDG_ReloadCounter:0000000000000018 $d
     /tmp/ccAy73nP.s:199    .text.IWDG_Enable:0000000000000000 $t
     /tmp/ccAy73nP.s:205    .text.IWDG_Enable:0000000000000000 IWDG_Enable
     /tmp/ccAy73nP.s:234    .text.IWDG_Enable:0000000000000018 $d
     /tmp/ccAy73nP.s:239    .text.IWDG_GetFlagStatus:0000000000000000 $t
     /tmp/ccAy73nP.s:245    .text.IWDG_GetFlagStatus:0000000000000000 IWDG_GetFlagStatus
     /tmp/ccAy73nP.s:298    .text.IWDG_GetFlagStatus:0000000000000034 $d

NO UNDEFINED SYMBOLS
