ARM GAS  /tmp/ccHYJizt.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_rtc.c"
  20              		.section	.text.RTC_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	RTC_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	RTC_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_rtc.c **** /**
   2:./Lib/Src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:./Lib/Src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_rtc.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_rtc.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:./Lib/Src/stm32f4xx_rtc.c ****   *           + Initialization
  10:./Lib/Src/stm32f4xx_rtc.c ****   *           + Calendar (Time and Date) configuration
  11:./Lib/Src/stm32f4xx_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  12:./Lib/Src/stm32f4xx_rtc.c ****   *           + WakeUp Timer configuration
  13:./Lib/Src/stm32f4xx_rtc.c ****   *           + Daylight Saving configuration
  14:./Lib/Src/stm32f4xx_rtc.c ****   *           + Output pin Configuration
  15:./Lib/Src/stm32f4xx_rtc.c ****   *           + Coarse digital Calibration configuration
  16:./Lib/Src/stm32f4xx_rtc.c ****   *           + Smooth digital Calibration configuration
  17:./Lib/Src/stm32f4xx_rtc.c ****   *           + TimeStamp configuration
  18:./Lib/Src/stm32f4xx_rtc.c ****   *           + Tampers configuration
  19:./Lib/Src/stm32f4xx_rtc.c ****   *           + Backup Data Registers configuration
  20:./Lib/Src/stm32f4xx_rtc.c ****   *           + Shift control synchronisation    
  21:./Lib/Src/stm32f4xx_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:./Lib/Src/stm32f4xx_rtc.c ****   *           + Interrupts and flags management
  23:./Lib/Src/stm32f4xx_rtc.c ****   *
  24:./Lib/Src/stm32f4xx_rtc.c **** @verbatim
  25:./Lib/Src/stm32f4xx_rtc.c **** 
  26:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
  27:./Lib/Src/stm32f4xx_rtc.c ****               ##### Backup Domain Operating Condition #####
  28:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
  29:./Lib/Src/stm32f4xx_rtc.c ****  [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  30:./Lib/Src/stm32f4xx_rtc.c ****       SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
ARM GAS  /tmp/ccHYJizt.s 			page 2


  31:./Lib/Src/stm32f4xx_rtc.c ****       VDD supply is powered off.
  32:./Lib/Src/stm32f4xx_rtc.c ****       To retain the content of the RTC backup registers, backup SRAM, and supply 
  33:./Lib/Src/stm32f4xx_rtc.c ****       the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  34:./Lib/Src/stm32f4xx_rtc.c ****       standby voltage supplied by a battery or by another source.
  35:./Lib/Src/stm32f4xx_rtc.c **** 
  36:./Lib/Src/stm32f4xx_rtc.c ****  [..] To allow the RTC to operate even when the main digital supply (VDD) is turned
  37:./Lib/Src/stm32f4xx_rtc.c ****       off, the VBAT pin powers the following blocks:
  38:./Lib/Src/stm32f4xx_rtc.c ****    (#) The RTC
  39:./Lib/Src/stm32f4xx_rtc.c ****    (#) The LSE oscillator
  40:./Lib/Src/stm32f4xx_rtc.c ****    (#) The backup SRAM when the low power backup regulator is enabled
  41:./Lib/Src/stm32f4xx_rtc.c ****    (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
  42:./Lib/Src/stm32f4xx_rtc.c ****   
  43:./Lib/Src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  44:./Lib/Src/stm32f4xx_rtc.c ****       the following functions are available:
  45:./Lib/Src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as either GPIO or LSE pins
  46:./Lib/Src/stm32f4xx_rtc.c ****    (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  47:./Lib/Src/stm32f4xx_rtc.c ****    (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  48:./Lib/Src/stm32f4xx_rtc.c ****   
  49:./Lib/Src/stm32f4xx_rtc.c ****  [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  50:./Lib/Src/stm32f4xx_rtc.c ****       because VDD is not present), the following functions are available:
  51:./Lib/Src/stm32f4xx_rtc.c ****    (#) PC14 and PC15 can be used as LSE pins only
  52:./Lib/Src/stm32f4xx_rtc.c ****    (#) PC13 can be used as the RTC_AF1 pin 
  53:./Lib/Src/stm32f4xx_rtc.c ****    (#) PI8 can be used as the RTC_AF2 pin
  54:./Lib/Src/stm32f4xx_rtc.c ****   
  55:./Lib/Src/stm32f4xx_rtc.c ****             
  56:./Lib/Src/stm32f4xx_rtc.c ****                    ##### Backup Domain Reset #####
  57:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
  58:./Lib/Src/stm32f4xx_rtc.c ****  [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  59:./Lib/Src/stm32f4xx_rtc.c ****       to their reset values. The BKPSRAM is not affected by this reset. The only
  60:./Lib/Src/stm32f4xx_rtc.c ****       way of resetting the BKPSRAM is through the Flash interface by requesting 
  61:./Lib/Src/stm32f4xx_rtc.c ****       a protection level change from 1 to 0.
  62:./Lib/Src/stm32f4xx_rtc.c ****  [..] A backup domain reset is generated when one of the following events occurs:
  63:./Lib/Src/stm32f4xx_rtc.c ****    (#) Software reset, triggered by setting the BDRST bit in the 
  64:./Lib/Src/stm32f4xx_rtc.c ****        RCC Backup domain control register (RCC_BDCR). You can use the
  65:./Lib/Src/stm32f4xx_rtc.c ****        RCC_BackupResetCmd().
  66:./Lib/Src/stm32f4xx_rtc.c ****    (#) VDD or VBAT power on, if both supplies have previously been powered off.
  67:./Lib/Src/stm32f4xx_rtc.c ****   
  68:./Lib/Src/stm32f4xx_rtc.c **** 
  69:./Lib/Src/stm32f4xx_rtc.c ****                    ##### Backup Domain Access #####
  70:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
  71:./Lib/Src/stm32f4xx_rtc.c ****  [..] After reset, the backup domain (RTC registers, RTC backup data 
  72:./Lib/Src/stm32f4xx_rtc.c ****       registers and backup SRAM) is protected against possible unwanted write 
  73:./Lib/Src/stm32f4xx_rtc.c ****       accesses. 
  74:./Lib/Src/stm32f4xx_rtc.c ****  [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  75:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the Power Controller (PWR) APB1 interface clock using the
  76:./Lib/Src/stm32f4xx_rtc.c ****        RCC_APB1PeriphClockCmd() function.
  77:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  78:./Lib/Src/stm32f4xx_rtc.c ****    (+) Select the RTC clock source using the RCC_RTCCLKConfig() function.
  79:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable RTC Clock using the RCC_RTCCLKCmd() function.
  80:./Lib/Src/stm32f4xx_rtc.c ****   
  81:./Lib/Src/stm32f4xx_rtc.c ****   
  82:./Lib/Src/stm32f4xx_rtc.c ****                   ##### How to use RTC Driver #####
  83:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
  84:./Lib/Src/stm32f4xx_rtc.c ****  [..] 
  85:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the RTC domain access (see description in the section above)
  86:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  87:./Lib/Src/stm32f4xx_rtc.c ****        format using the RTC_Init() function.
ARM GAS  /tmp/ccHYJizt.s 			page 3


  88:./Lib/Src/stm32f4xx_rtc.c ****   
  89:./Lib/Src/stm32f4xx_rtc.c ****  *** Time and Date configuration ***
  90:./Lib/Src/stm32f4xx_rtc.c ****  ===================================
  91:./Lib/Src/stm32f4xx_rtc.c ****  [..] 
  92:./Lib/Src/stm32f4xx_rtc.c ****    (+) To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  93:./Lib/Src/stm32f4xx_rtc.c ****        and RTC_SetDate() functions.
  94:./Lib/Src/stm32f4xx_rtc.c ****    (+) To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate() functions.
  95:./Lib/Src/stm32f4xx_rtc.c ****    (+) Use the RTC_DayLightSavingConfig() function to add or sub one
  96:./Lib/Src/stm32f4xx_rtc.c ****        hour to the RTC Calendar.    
  97:./Lib/Src/stm32f4xx_rtc.c ****   
  98:./Lib/Src/stm32f4xx_rtc.c ****  *** Alarm configuration ***
  99:./Lib/Src/stm32f4xx_rtc.c ****  ===========================
 100:./Lib/Src/stm32f4xx_rtc.c ****  [..]
 101:./Lib/Src/stm32f4xx_rtc.c ****    (+) To configure the RTC Alarm use the RTC_SetAlarm() function.
 102:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 103:./Lib/Src/stm32f4xx_rtc.c ****    (+) To read the RTC Alarm, use the RTC_GetAlarm() function.
 104:./Lib/Src/stm32f4xx_rtc.c ****    (+) To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 105:./Lib/Src/stm32f4xx_rtc.c ****   
 106:./Lib/Src/stm32f4xx_rtc.c ****  *** RTC Wakeup configuration ***
 107:./Lib/Src/stm32f4xx_rtc.c ****  ================================
 108:./Lib/Src/stm32f4xx_rtc.c ****  [..] 
 109:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:./Lib/Src/stm32f4xx_rtc.c ****        function.
 111:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() function  
 112:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 113:./Lib/Src/stm32f4xx_rtc.c ****    (+) To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 114:./Lib/Src/stm32f4xx_rtc.c ****        function.
 115:./Lib/Src/stm32f4xx_rtc.c ****   
 116:./Lib/Src/stm32f4xx_rtc.c ****  *** Outputs configuration ***
 117:./Lib/Src/stm32f4xx_rtc.c ****  =============================
 118:./Lib/Src/stm32f4xx_rtc.c ****  [..] The RTC has 2 different outputs:
 119:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 120:./Lib/Src/stm32f4xx_rtc.c ****        and WaKeUp signals. To output the selected RTC signal on RTC_AF1 pin, use the 
 121:./Lib/Src/stm32f4xx_rtc.c ****        RTC_OutputConfig() function.                
 122:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFO_CALIB: this output is 512Hz signal or 1Hz. To output the RTC Clock on 
 123:./Lib/Src/stm32f4xx_rtc.c ****        RTC_AF1 pin, use the RTC_CalibOutputCmd() function.
 124:./Lib/Src/stm32f4xx_rtc.c ****   
 125:./Lib/Src/stm32f4xx_rtc.c ****  *** Smooth digital Calibration configuration ***
 126:./Lib/Src/stm32f4xx_rtc.c ****  ================================================    
 127:./Lib/Src/stm32f4xx_rtc.c ****  [..]
 128:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the RTC Original Digital Calibration Value and the corresponding
 129:./Lib/Src/stm32f4xx_rtc.c ****        calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 130:./Lib/Src/stm32f4xx_rtc.c ****        function.
 131:./Lib/Src/stm32f4xx_rtc.c ****   
 132:./Lib/Src/stm32f4xx_rtc.c ****  *** Coarse digital Calibration configuration ***
 133:./Lib/Src/stm32f4xx_rtc.c ****  ================================================
 134:./Lib/Src/stm32f4xx_rtc.c ****  [..]
 135:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the RTC Coarse Calibration Value and the corresponding
 136:./Lib/Src/stm32f4xx_rtc.c ****        sign using the RTC_CoarseCalibConfig() function.
 137:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() function  
 138:./Lib/Src/stm32f4xx_rtc.c ****   
 139:./Lib/Src/stm32f4xx_rtc.c ****  *** TimeStamp configuration ***
 140:./Lib/Src/stm32f4xx_rtc.c ****  ===============================
 141:./Lib/Src/stm32f4xx_rtc.c ****  [..]
 142:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the RTC_AF1 trigger and enables the RTC TimeStamp using the RTC
 143:./Lib/Src/stm32f4xx_rtc.c ****       _TimeStampCmd() function.
 144:./Lib/Src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp Time and Date register, use the RTC_GetTimeStamp()
ARM GAS  /tmp/ccHYJizt.s 			page 4


 145:./Lib/Src/stm32f4xx_rtc.c ****        function.
 146:./Lib/Src/stm32f4xx_rtc.c ****    (+) To read the RTC TimeStamp SubSecond register, use the 
 147:./Lib/Src/stm32f4xx_rtc.c ****        RTC_GetTimeStampSubSecond() function.
 148:./Lib/Src/stm32f4xx_rtc.c ****    (+) The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 149:./Lib/Src/stm32f4xx_rtc.c ****        or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 150:./Lib/Src/stm32f4xx_rtc.c ****        RTC_TAFCR register. You can use the  RTC_TamperPinSelection() function to
 151:./Lib/Src/stm32f4xx_rtc.c ****        select the corresponding pin.     
 152:./Lib/Src/stm32f4xx_rtc.c ****   
 153:./Lib/Src/stm32f4xx_rtc.c ****  *** Tamper configuration ***
 154:./Lib/Src/stm32f4xx_rtc.c ****  ============================
 155:./Lib/Src/stm32f4xx_rtc.c ****  [..]
 156:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:./Lib/Src/stm32f4xx_rtc.c ****        function. 
 159:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:./Lib/Src/stm32f4xx_rtc.c ****        filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() 
 161:./Lib/Src/stm32f4xx_rtc.c ****        function.
 162:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 163:./Lib/Src/stm32f4xx_rtc.c ****        function.
 164:./Lib/Src/stm32f4xx_rtc.c ****    (+) Configure the Tamper precharge or discharge duration using 
 165:./Lib/Src/stm32f4xx_rtc.c ****        RTC_TamperPinsPrechargeDuration() function.
 166:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 167:./Lib/Src/stm32f4xx_rtc.c ****    (+) Enable the Time stamp on Tamper detection event using  
 168:./Lib/Src/stm32f4xx_rtc.c ****        TC_TSOnTamperDetecCmd() function.
 169:./Lib/Src/stm32f4xx_rtc.c ****    (+) The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 170:./Lib/Src/stm32f4xx_rtc.c ****        or RTC_AF2 depending on the value of the TSINSEL bit in the RTC_TAFCR 
 171:./Lib/Src/stm32f4xx_rtc.c ****        register. You can use the  RTC_TimeStampPinSelection() function to select 
 172:./Lib/Src/stm32f4xx_rtc.c ****        the corresponding pin. 
 173:./Lib/Src/stm32f4xx_rtc.c ****   
 174:./Lib/Src/stm32f4xx_rtc.c ****  *** Backup Data Registers configuration ***
 175:./Lib/Src/stm32f4xx_rtc.c ****  ===========================================
 176:./Lib/Src/stm32f4xx_rtc.c ****  [..]
 177:./Lib/Src/stm32f4xx_rtc.c ****    (+) To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 178:./Lib/Src/stm32f4xx_rtc.c ****        function.  
 179:./Lib/Src/stm32f4xx_rtc.c ****    (+) To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 180:./Lib/Src/stm32f4xx_rtc.c ****        function.
 181:./Lib/Src/stm32f4xx_rtc.c ****    
 182:./Lib/Src/stm32f4xx_rtc.c **** 
 183:./Lib/Src/stm32f4xx_rtc.c ****                   ##### RTC and low power modes #####
 184:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
 185:./Lib/Src/stm32f4xx_rtc.c ****  [..] The MCU can be woken up from a low power mode by an RTC alternate 
 186:./Lib/Src/stm32f4xx_rtc.c ****       function.
 187:./Lib/Src/stm32f4xx_rtc.c ****  [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 188:./Lib/Src/stm32f4xx_rtc.c ****       RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 189:./Lib/Src/stm32f4xx_rtc.c ****       These RTC alternate functions can wake up the system from the Stop and 
 190:./Lib/Src/stm32f4xx_rtc.c ****       Standby lowpower modes.
 191:./Lib/Src/stm32f4xx_rtc.c ****  [..] The system can also wake up from low power modes without depending 
 192:./Lib/Src/stm32f4xx_rtc.c ****       on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 193:./Lib/Src/stm32f4xx_rtc.c ****       or the RTC wakeup events.
 194:./Lib/Src/stm32f4xx_rtc.c ****  [..] The RTC provides a programmable time base for waking up from the 
 195:./Lib/Src/stm32f4xx_rtc.c ****       Stop or Standby mode at regular intervals.
 196:./Lib/Src/stm32f4xx_rtc.c ****       Wakeup from STOP and Standby modes is possible only when the RTC clock source
 197:./Lib/Src/stm32f4xx_rtc.c ****       is LSE or LSI.
 198:./Lib/Src/stm32f4xx_rtc.c ****   
 199:./Lib/Src/stm32f4xx_rtc.c **** 
 200:./Lib/Src/stm32f4xx_rtc.c ****           ##### Selection of RTC_AF1 alternate functions #####
 201:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
ARM GAS  /tmp/ccHYJizt.s 			page 5


 202:./Lib/Src/stm32f4xx_rtc.c ****  [..] The RTC_AF1 pin (PC13) can be used for the following purposes:
 203:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFO_ALARM output
 204:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFO_CALIB output
 205:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 206:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 207:./Lib/Src/stm32f4xx_rtc.c ****  
 208:./Lib/Src/stm32f4xx_rtc.c ****  [..]   
 209:./Lib/Src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 210:./Lib/Src/stm32f4xx_rtc.c ****    |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |
 211:./Lib/Src/stm32f4xx_rtc.c ****    |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |
 212:./Lib/Src/stm32f4xx_rtc.c ****    |  and function   |          |          |           |              | selection  |  selection   |
 213:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 214:./Lib/Src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 215:./Lib/Src/stm32f4xx_rtc.c ****    |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 216:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 217:./Lib/Src/stm32f4xx_rtc.c ****    |   Alarm out     |          |          |           |              |    Don't   |     Don't    |
 218:./Lib/Src/stm32f4xx_rtc.c ****    |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     |
 219:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 220:./Lib/Src/stm32f4xx_rtc.c ****    | Calibration out |          |          |           |              |    Don't   |     Don't    |
 221:./Lib/Src/stm32f4xx_rtc.c ****    |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     |
 222:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 223:./Lib/Src/stm32f4xx_rtc.c ****    |  TAMPER input   |          |          |           |              |            |     Don't    |
 224:./Lib/Src/stm32f4xx_rtc.c ****    |   floating      |     0    |    0     |     1     |      0       |      0     |     care     |
 225:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 226:./Lib/Src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |          |          |           |              |            |              |
 227:./Lib/Src/stm32f4xx_rtc.c ****    |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       |
 228:./Lib/Src/stm32f4xx_rtc.c ****    |   floating      |          |          |           |              |            |              |
 229:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 230:./Lib/Src/stm32f4xx_rtc.c ****    | TIMESTAMP input |          |          |           |              |    Don't   |              |
 231:./Lib/Src/stm32f4xx_rtc.c ****    |    floating     |     0    |    0     |     0     |      1       |    care    |      0       |
 232:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|----------|----------|-----------|--------------|------------|--------------|
 233:./Lib/Src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  |
 234:./Lib/Src/stm32f4xx_rtc.c ****    +-----------------------------------------------------------------------------------------------
 235:./Lib/Src/stm32f4xx_rtc.c **** 
 236:./Lib/Src/stm32f4xx_rtc.c ****             
 237:./Lib/Src/stm32f4xx_rtc.c ****         #####  Selection of RTC_AF2 alternate functions #####
 238:./Lib/Src/stm32f4xx_rtc.c ****  ===================================================================
 239:./Lib/Src/stm32f4xx_rtc.c ****  [..] The RTC_AF2 pin (PI8) can be used for the following purposes:
 240:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFI_TAMPER
 241:./Lib/Src/stm32f4xx_rtc.c ****    (+) AFI_TIMESTAMP
 242:./Lib/Src/stm32f4xx_rtc.c ****  [..]
 243:./Lib/Src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+
 244:./Lib/Src/stm32f4xx_rtc.c ****    |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 245:./Lib/Src/stm32f4xx_rtc.c ****    |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 246:./Lib/Src/stm32f4xx_rtc.c ****    |  and function   |           |              | selection  |  selection   |Configuration |
 247:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 248:./Lib/Src/stm32f4xx_rtc.c ****    |  TAMPER input   |           |              |            |     Don't    |              |
 249:./Lib/Src/stm32f4xx_rtc.c ****    |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 250:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 251:./Lib/Src/stm32f4xx_rtc.c ****    |  TIMESTAMP and  |           |              |            |              |              |
 252:./Lib/Src/stm32f4xx_rtc.c ****    |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 253:./Lib/Src/stm32f4xx_rtc.c ****    |   floating      |           |              |            |              |              |
 254:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 255:./Lib/Src/stm32f4xx_rtc.c ****    | TIMESTAMP input |           |              |    Don't   |              |              |
 256:./Lib/Src/stm32f4xx_rtc.c ****    |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 257:./Lib/Src/stm32f4xx_rtc.c ****    |-----------------|-----------|--------------|------------|--------------|--------------|
 258:./Lib/Src/stm32f4xx_rtc.c ****    |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
ARM GAS  /tmp/ccHYJizt.s 			page 6


 259:./Lib/Src/stm32f4xx_rtc.c ****    +---------------------------------------------------------------------------------------+   
 260:./Lib/Src/stm32f4xx_rtc.c ****  
 261:./Lib/Src/stm32f4xx_rtc.c ****      
 262:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
 263:./Lib/Src/stm32f4xx_rtc.c ****   
 264:./Lib/Src/stm32f4xx_rtc.c ****   ******************************************************************************
 265:./Lib/Src/stm32f4xx_rtc.c ****   * @attention
 266:./Lib/Src/stm32f4xx_rtc.c ****   *
 267:./Lib/Src/stm32f4xx_rtc.c ****   * Copyright (c) 2016 STMicroelectronics.
 268:./Lib/Src/stm32f4xx_rtc.c ****   * All rights reserved.
 269:./Lib/Src/stm32f4xx_rtc.c ****   *
 270:./Lib/Src/stm32f4xx_rtc.c ****   * This software is licensed under terms that can be found in the LICENSE file
 271:./Lib/Src/stm32f4xx_rtc.c ****   * in the root directory of this software component.
 272:./Lib/Src/stm32f4xx_rtc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 273:./Lib/Src/stm32f4xx_rtc.c ****   *
 274:./Lib/Src/stm32f4xx_rtc.c ****   ******************************************************************************
 275:./Lib/Src/stm32f4xx_rtc.c ****   */
 276:./Lib/Src/stm32f4xx_rtc.c **** 
 277:./Lib/Src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 278:./Lib/Src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 279:./Lib/Src/stm32f4xx_rtc.c **** 
 280:./Lib/Src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:./Lib/Src/stm32f4xx_rtc.c ****   * @{
 282:./Lib/Src/stm32f4xx_rtc.c ****   */
 283:./Lib/Src/stm32f4xx_rtc.c **** 
 284:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:./Lib/Src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:./Lib/Src/stm32f4xx_rtc.c ****   * @{
 287:./Lib/Src/stm32f4xx_rtc.c ****   */
 288:./Lib/Src/stm32f4xx_rtc.c **** 
 289:./Lib/Src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:./Lib/Src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:./Lib/Src/stm32f4xx_rtc.c **** 
 292:./Lib/Src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:./Lib/Src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:./Lib/Src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:./Lib/Src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:./Lib/Src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:./Lib/Src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:./Lib/Src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:./Lib/Src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:./Lib/Src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F | \
 301:./Lib/Src/stm32f4xx_rtc.c ****                                             RTC_FLAG_TAMP2F | RTC_FLAG_RECALPF | RTC_FLAG_SHPF))
 302:./Lib/Src/stm32f4xx_rtc.c **** 
 303:./Lib/Src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 304:./Lib/Src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 305:./Lib/Src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 306:./Lib/Src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 307:./Lib/Src/stm32f4xx_rtc.c **** 
 308:./Lib/Src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 309:./Lib/Src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 310:./Lib/Src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 311:./Lib/Src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 312:./Lib/Src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 313:./Lib/Src/stm32f4xx_rtc.c **** 
 314:./Lib/Src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 315:./Lib/Src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccHYJizt.s 			page 7


 316:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 317:./Lib/Src/stm32f4xx_rtc.c ****   * @{
 318:./Lib/Src/stm32f4xx_rtc.c ****   */ 
 319:./Lib/Src/stm32f4xx_rtc.c **** 
 320:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 321:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 322:./Lib/Src/stm32f4xx_rtc.c ****  *
 323:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
 324:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
 325:./Lib/Src/stm32f4xx_rtc.c ****              ##### Initialization and Configuration functions #####
 326:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
 327:./Lib/Src/stm32f4xx_rtc.c ****  
 328:./Lib/Src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to initialize and configure the RTC
 329:./Lib/Src/stm32f4xx_rtc.c ****       Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 330:./Lib/Src/stm32f4xx_rtc.c ****       Write protection, enter and exit the RTC initialization mode, RTC registers
 331:./Lib/Src/stm32f4xx_rtc.c ****       synchronization check and reference clock detection enable.
 332:./Lib/Src/stm32f4xx_rtc.c ****   
 333:./Lib/Src/stm32f4xx_rtc.c ****    (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 334:./Lib/Src/stm32f4xx_rtc.c ****        split into 2 programmable prescalers to minimize power consumption.
 335:./Lib/Src/stm32f4xx_rtc.c ****        (++) A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 336:./Lib/Src/stm32f4xx_rtc.c ****        (++) When both prescalers are used, it is recommended to configure the 
 337:./Lib/Src/stm32f4xx_rtc.c ****             asynchronous prescaler to a high value to minimize consumption.
 338:./Lib/Src/stm32f4xx_rtc.c **** 
 339:./Lib/Src/stm32f4xx_rtc.c ****    (#) All RTC registers are Write protected. Writing to the RTC registers
 340:./Lib/Src/stm32f4xx_rtc.c ****        is enabled by writing a key into the Write Protection register, RTC_WPR.
 341:./Lib/Src/stm32f4xx_rtc.c **** 
 342:./Lib/Src/stm32f4xx_rtc.c ****    (#) To Configure the RTC Calendar, user application should enter initialization
 343:./Lib/Src/stm32f4xx_rtc.c ****        mode. In this mode, the calendar counter is stopped and its value can be 
 344:./Lib/Src/stm32f4xx_rtc.c ****        updated. When the initialization sequence is complete, the calendar restarts 
 345:./Lib/Src/stm32f4xx_rtc.c ****        counting after 4 RTCCLK cycles.
 346:./Lib/Src/stm32f4xx_rtc.c **** 
 347:./Lib/Src/stm32f4xx_rtc.c ****    (#) To read the calendar through the shadow registers after Calendar initialization,
 348:./Lib/Src/stm32f4xx_rtc.c ****        calendar update or after wakeup from low power modes the software must first 
 349:./Lib/Src/stm32f4xx_rtc.c ****        clear the RSF flag. The software must then wait until it is set again before 
 350:./Lib/Src/stm32f4xx_rtc.c ****        reading the calendar, which means that the calendar registers have been 
 351:./Lib/Src/stm32f4xx_rtc.c ****        correctly copied into the RTC_TR and RTC_DR shadow registers.
 352:./Lib/Src/stm32f4xx_rtc.c ****        The RTC_WaitForSynchro() function implements the above software sequence 
 353:./Lib/Src/stm32f4xx_rtc.c ****        (RSF clear and RSF check).
 354:./Lib/Src/stm32f4xx_rtc.c **** 
 355:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
 356:./Lib/Src/stm32f4xx_rtc.c ****   * @{
 357:./Lib/Src/stm32f4xx_rtc.c ****   */
 358:./Lib/Src/stm32f4xx_rtc.c **** 
 359:./Lib/Src/stm32f4xx_rtc.c **** /**
 360:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 361:./Lib/Src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 362:./Lib/Src/stm32f4xx_rtc.c ****   *         registers.       
 363:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
 364:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 365:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 366:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 367:./Lib/Src/stm32f4xx_rtc.c ****   */
 368:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 369:./Lib/Src/stm32f4xx_rtc.c **** {
  29              		.loc 1 369 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccHYJizt.s 			page 8


  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
 370:./Lib/Src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  41              		.loc 1 370 17
  42 0006 0023     		movs	r3, #0
  43 0008 7B60     		str	r3, [r7, #4]
 371:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  44              		.loc 1 371 12
  45 000a 0023     		movs	r3, #0
  46 000c BB60     		str	r3, [r7, #8]
 372:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  47              		.loc 1 372 15
  48 000e 0023     		movs	r3, #0
  49 0010 FB73     		strb	r3, [r7, #15]
 373:./Lib/Src/stm32f4xx_rtc.c ****   
 374:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 375:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  50              		.loc 1 375 6
  51 0012 364B     		ldr	r3, .L9
  52              		.loc 1 375 12
  53 0014 CA22     		movs	r2, #202
  54 0016 5A62     		str	r2, [r3, #36]
 376:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  55              		.loc 1 376 6
  56 0018 344B     		ldr	r3, .L9
  57              		.loc 1 376 12
  58 001a 5322     		movs	r2, #83
  59 001c 5A62     		str	r2, [r3, #36]
 377:./Lib/Src/stm32f4xx_rtc.c **** 
 378:./Lib/Src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 379:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  60              		.loc 1 379 7
  61 001e FFF7FEFF 		bl	RTC_EnterInitMode
  62 0022 0346     		mov	r3, r0
  63              		.loc 1 379 6
  64 0024 002B     		cmp	r3, #0
  65 0026 02D1     		bne	.L2
 380:./Lib/Src/stm32f4xx_rtc.c ****   {
 381:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
  66              		.loc 1 381 12
  67 0028 0023     		movs	r3, #0
  68 002a FB73     		strb	r3, [r7, #15]
  69 002c 55E0     		b	.L3
  70              	.L2:
 382:./Lib/Src/stm32f4xx_rtc.c ****   }  
 383:./Lib/Src/stm32f4xx_rtc.c ****   else
 384:./Lib/Src/stm32f4xx_rtc.c ****   {
 385:./Lib/Src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 386:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  71              		.loc 1 386 8
ARM GAS  /tmp/ccHYJizt.s 			page 9


  72 002e 2F4B     		ldr	r3, .L9
  73              		.loc 1 386 13
  74 0030 0022     		movs	r2, #0
  75 0032 1A60     		str	r2, [r3]
 387:./Lib/Src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  76              		.loc 1 387 8
  77 0034 2D4B     		ldr	r3, .L9
  78              		.loc 1 387 13
  79 0036 42F20112 		movw	r2, #8449
  80 003a 5A60     		str	r2, [r3, #4]
 388:./Lib/Src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 389:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  81              		.loc 1 389 8
  82 003c 2B4B     		ldr	r3, .L9
  83 003e 9B68     		ldr	r3, [r3, #8]
  84 0040 2A4A     		ldr	r2, .L9
  85              		.loc 1 389 13
  86 0042 03F00703 		and	r3, r3, #7
  87 0046 9360     		str	r3, [r2, #8]
  88              	.L5:
 390:./Lib/Src/stm32f4xx_rtc.c ****   
 391:./Lib/Src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 392:./Lib/Src/stm32f4xx_rtc.c ****     do
 393:./Lib/Src/stm32f4xx_rtc.c ****     {
 394:./Lib/Src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  89              		.loc 1 394 24 discriminator 2
  90 0048 284B     		ldr	r3, .L9
  91 004a DB68     		ldr	r3, [r3, #12]
  92              		.loc 1 394 19 discriminator 2
  93 004c 03F00403 		and	r3, r3, #4
  94 0050 BB60     		str	r3, [r7, #8]
 395:./Lib/Src/stm32f4xx_rtc.c ****       wutcounter++;  
  95              		.loc 1 395 17 discriminator 2
  96 0052 7B68     		ldr	r3, [r7, #4]
  97 0054 0133     		adds	r3, r3, #1
  98 0056 7B60     		str	r3, [r7, #4]
 396:./Lib/Src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
  99              		.loc 1 396 25 discriminator 2
 100 0058 7B68     		ldr	r3, [r7, #4]
 101              		.loc 1 396 46 discriminator 2
 102 005a B3F5803F 		cmp	r3, #65536
 103 005e 02D0     		beq	.L4
 104              		.loc 1 396 46 is_stmt 0 discriminator 1
 105 0060 BB68     		ldr	r3, [r7, #8]
 106 0062 002B     		cmp	r3, #0
 107 0064 F0D0     		beq	.L5
 108              	.L4:
 397:./Lib/Src/stm32f4xx_rtc.c ****     
 398:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 109              		.loc 1 398 13 is_stmt 1
 110 0066 214B     		ldr	r3, .L9
 111 0068 DB68     		ldr	r3, [r3, #12]
 112              		.loc 1 398 19
 113 006a 03F00403 		and	r3, r3, #4
 114              		.loc 1 398 8
 115 006e 002B     		cmp	r3, #0
 116 0070 02D1     		bne	.L6
ARM GAS  /tmp/ccHYJizt.s 			page 10


 399:./Lib/Src/stm32f4xx_rtc.c ****     {
 400:./Lib/Src/stm32f4xx_rtc.c ****       status = ERROR;
 117              		.loc 1 400 14
 118 0072 0023     		movs	r3, #0
 119 0074 FB73     		strb	r3, [r7, #15]
 120 0076 30E0     		b	.L3
 121              	.L6:
 401:./Lib/Src/stm32f4xx_rtc.c ****     }
 402:./Lib/Src/stm32f4xx_rtc.c ****     else
 403:./Lib/Src/stm32f4xx_rtc.c ****     {
 404:./Lib/Src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 405:./Lib/Src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 122              		.loc 1 405 10
 123 0078 1C4B     		ldr	r3, .L9
 124 007a 9B68     		ldr	r3, [r3, #8]
 125 007c 1B4B     		ldr	r3, .L9
 126              		.loc 1 405 15
 127 007e 0022     		movs	r2, #0
 128 0080 9A60     		str	r2, [r3, #8]
 406:./Lib/Src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 129              		.loc 1 406 10
 130 0082 1A4B     		ldr	r3, .L9
 131              		.loc 1 406 17
 132 0084 4FF6FF72 		movw	r2, #65535
 133 0088 5A61     		str	r2, [r3, #20]
 407:./Lib/Src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 134              		.loc 1 407 10
 135 008a 184B     		ldr	r3, .L9
 136              		.loc 1 407 17
 137 008c 184A     		ldr	r2, .L9+4
 138 008e 1A61     		str	r2, [r3, #16]
 408:./Lib/Src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 139              		.loc 1 408 10
 140 0090 164B     		ldr	r3, .L9
 141              		.loc 1 408 19
 142 0092 0022     		movs	r2, #0
 143 0094 9A61     		str	r2, [r3, #24]
 409:./Lib/Src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 144              		.loc 1 409 10
 145 0096 154B     		ldr	r3, .L9
 146              		.loc 1 409 19
 147 0098 0022     		movs	r2, #0
 148 009a DA61     		str	r2, [r3, #28]
 410:./Lib/Src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 149              		.loc 1 410 10
 150 009c 134B     		ldr	r3, .L9
 151              		.loc 1 410 19
 152 009e 0022     		movs	r2, #0
 153 00a0 1A62     		str	r2, [r3, #32]
 411:./Lib/Src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)0x00000000;
 154              		.loc 1 411 10
 155 00a2 124B     		ldr	r3, .L9
 156              		.loc 1 411 19
 157 00a4 0022     		movs	r2, #0
 158 00a6 DA62     		str	r2, [r3, #44]
 412:./Lib/Src/stm32f4xx_rtc.c ****       RTC->CALR = (uint32_t)0x00000000;
 159              		.loc 1 412 10
ARM GAS  /tmp/ccHYJizt.s 			page 11


 160 00a8 104B     		ldr	r3, .L9
 161              		.loc 1 412 17
 162 00aa 0022     		movs	r2, #0
 163 00ac DA63     		str	r2, [r3, #60]
 413:./Lib/Src/stm32f4xx_rtc.c ****       RTC->ALRMASSR = (uint32_t)0x00000000;
 164              		.loc 1 413 10
 165 00ae 0F4B     		ldr	r3, .L9
 166              		.loc 1 413 21
 167 00b0 0022     		movs	r2, #0
 168 00b2 5A64     		str	r2, [r3, #68]
 414:./Lib/Src/stm32f4xx_rtc.c ****       RTC->ALRMBSSR = (uint32_t)0x00000000;
 169              		.loc 1 414 10
 170 00b4 0D4B     		ldr	r3, .L9
 171              		.loc 1 414 21
 172 00b6 0022     		movs	r2, #0
 173 00b8 9A64     		str	r2, [r3, #72]
 415:./Lib/Src/stm32f4xx_rtc.c ****       
 416:./Lib/Src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 417:./Lib/Src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 174              		.loc 1 417 10
 175 00ba 0C4B     		ldr	r3, .L9
 176              		.loc 1 417 16
 177 00bc 0022     		movs	r2, #0
 178 00be DA60     		str	r2, [r3, #12]
 418:./Lib/Src/stm32f4xx_rtc.c ****       
 419:./Lib/Src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 420:./Lib/Src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 179              		.loc 1 420 10
 180 00c0 0A4B     		ldr	r3, .L9
 181              		.loc 1 420 18
 182 00c2 0022     		movs	r2, #0
 183 00c4 1A64     		str	r2, [r3, #64]
 421:./Lib/Src/stm32f4xx_rtc.c ****   
 422:./Lib/Src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 184              		.loc 1 422 10
 185 00c6 FFF7FEFF 		bl	RTC_WaitForSynchro
 186 00ca 0346     		mov	r3, r0
 187              		.loc 1 422 9
 188 00cc 002B     		cmp	r3, #0
 189 00ce 02D1     		bne	.L7
 423:./Lib/Src/stm32f4xx_rtc.c ****       {
 424:./Lib/Src/stm32f4xx_rtc.c ****         status = ERROR;
 190              		.loc 1 424 16
 191 00d0 0023     		movs	r3, #0
 192 00d2 FB73     		strb	r3, [r7, #15]
 193 00d4 01E0     		b	.L3
 194              	.L7:
 425:./Lib/Src/stm32f4xx_rtc.c ****       }
 426:./Lib/Src/stm32f4xx_rtc.c ****       else
 427:./Lib/Src/stm32f4xx_rtc.c ****       {
 428:./Lib/Src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 195              		.loc 1 428 16
 196 00d6 0123     		movs	r3, #1
 197 00d8 FB73     		strb	r3, [r7, #15]
 198              	.L3:
 429:./Lib/Src/stm32f4xx_rtc.c ****       }
 430:./Lib/Src/stm32f4xx_rtc.c ****     }
ARM GAS  /tmp/ccHYJizt.s 			page 12


 431:./Lib/Src/stm32f4xx_rtc.c ****   }
 432:./Lib/Src/stm32f4xx_rtc.c ****   
 433:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 434:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 199              		.loc 1 434 6
 200 00da 044B     		ldr	r3, .L9
 201              		.loc 1 434 12
 202 00dc FF22     		movs	r2, #255
 203 00de 5A62     		str	r2, [r3, #36]
 435:./Lib/Src/stm32f4xx_rtc.c ****   
 436:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 204              		.loc 1 436 10
 205 00e0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 437:./Lib/Src/stm32f4xx_rtc.c **** }
 206              		.loc 1 437 1
 207 00e2 1846     		mov	r0, r3
 208 00e4 1037     		adds	r7, r7, #16
 209              		.cfi_def_cfa_offset 8
 210 00e6 BD46     		mov	sp, r7
 211              		.cfi_def_cfa_register 13
 212              		@ sp needed
 213 00e8 80BD     		pop	{r7, pc}
 214              	.L10:
 215 00ea 00BF     		.align	2
 216              	.L9:
 217 00ec 00280040 		.word	1073752064
 218 00f0 FF007F00 		.word	8323327
 219              		.cfi_endproc
 220              	.LFE123:
 222              		.section	.text.RTC_Init,"ax",%progbits
 223              		.align	1
 224              		.global	RTC_Init
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 229              	RTC_Init:
 230              	.LFB124:
 438:./Lib/Src/stm32f4xx_rtc.c **** 
 439:./Lib/Src/stm32f4xx_rtc.c **** /**
 440:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 441:./Lib/Src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 442:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 443:./Lib/Src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 444:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 445:./Lib/Src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 446:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 447:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 448:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 449:./Lib/Src/stm32f4xx_rtc.c ****   */
 450:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 451:./Lib/Src/stm32f4xx_rtc.c **** {
 231              		.loc 1 451 1
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 16
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0000 80B5     		push	{r7, lr}
 236              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccHYJizt.s 			page 13


 237              		.cfi_offset 7, -8
 238              		.cfi_offset 14, -4
 239 0002 84B0     		sub	sp, sp, #16
 240              		.cfi_def_cfa_offset 24
 241 0004 00AF     		add	r7, sp, #0
 242              		.cfi_def_cfa_register 7
 243 0006 7860     		str	r0, [r7, #4]
 452:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 244              		.loc 1 452 15
 245 0008 0023     		movs	r3, #0
 246 000a FB73     		strb	r3, [r7, #15]
 453:./Lib/Src/stm32f4xx_rtc.c ****   
 454:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
 455:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 456:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 457:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 458:./Lib/Src/stm32f4xx_rtc.c **** 
 459:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 460:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 247              		.loc 1 460 6
 248 000c 194B     		ldr	r3, .L15
 249              		.loc 1 460 12
 250 000e CA22     		movs	r2, #202
 251 0010 5A62     		str	r2, [r3, #36]
 461:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 252              		.loc 1 461 6
 253 0012 184B     		ldr	r3, .L15
 254              		.loc 1 461 12
 255 0014 5322     		movs	r2, #83
 256 0016 5A62     		str	r2, [r3, #36]
 462:./Lib/Src/stm32f4xx_rtc.c **** 
 463:./Lib/Src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 464:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 257              		.loc 1 464 7
 258 0018 FFF7FEFF 		bl	RTC_EnterInitMode
 259 001c 0346     		mov	r3, r0
 260              		.loc 1 464 6
 261 001e 002B     		cmp	r3, #0
 262 0020 02D1     		bne	.L12
 465:./Lib/Src/stm32f4xx_rtc.c ****   {
 466:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 263              		.loc 1 466 12
 264 0022 0023     		movs	r3, #0
 265 0024 FB73     		strb	r3, [r7, #15]
 266 0026 1CE0     		b	.L13
 267              	.L12:
 467:./Lib/Src/stm32f4xx_rtc.c ****   } 
 468:./Lib/Src/stm32f4xx_rtc.c ****   else
 469:./Lib/Src/stm32f4xx_rtc.c ****   {
 470:./Lib/Src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 471:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 268              		.loc 1 471 8
 269 0028 124B     		ldr	r3, .L15
 270 002a 9B68     		ldr	r3, [r3, #8]
 271 002c 114A     		ldr	r2, .L15
 272              		.loc 1 471 13
 273 002e 23F04003 		bic	r3, r3, #64
ARM GAS  /tmp/ccHYJizt.s 			page 14


 274 0032 9360     		str	r3, [r2, #8]
 472:./Lib/Src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 473:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 275              		.loc 1 473 8
 276 0034 0F4B     		ldr	r3, .L15
 277 0036 9A68     		ldr	r2, [r3, #8]
 278              		.loc 1 473 43
 279 0038 7B68     		ldr	r3, [r7, #4]
 280 003a 1B68     		ldr	r3, [r3]
 281              		.loc 1 473 8
 282 003c 0D49     		ldr	r1, .L15
 283              		.loc 1 473 13
 284 003e 1343     		orrs	r3, r3, r2
 285 0040 8B60     		str	r3, [r1, #8]
 474:./Lib/Src/stm32f4xx_rtc.c ****   
 475:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 476:./Lib/Src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 286              		.loc 1 476 8
 287 0042 0C4A     		ldr	r2, .L15
 288              		.loc 1 476 42
 289 0044 7B68     		ldr	r3, [r7, #4]
 290 0046 9B68     		ldr	r3, [r3, #8]
 291              		.loc 1 476 15
 292 0048 1361     		str	r3, [r2, #16]
 477:./Lib/Src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 293              		.loc 1 477 8
 294 004a 0A4B     		ldr	r3, .L15
 295 004c 1A69     		ldr	r2, [r3, #16]
 296              		.loc 1 477 43
 297 004e 7B68     		ldr	r3, [r7, #4]
 298 0050 5B68     		ldr	r3, [r3, #4]
 299              		.loc 1 477 62
 300 0052 1B04     		lsls	r3, r3, #16
 301              		.loc 1 477 8
 302 0054 0749     		ldr	r1, .L15
 303              		.loc 1 477 15
 304 0056 1343     		orrs	r3, r3, r2
 305 0058 0B61     		str	r3, [r1, #16]
 478:./Lib/Src/stm32f4xx_rtc.c **** 
 479:./Lib/Src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 480:./Lib/Src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 306              		.loc 1 480 5
 307 005a FFF7FEFF 		bl	RTC_ExitInitMode
 481:./Lib/Src/stm32f4xx_rtc.c **** 
 482:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 308              		.loc 1 482 12
 309 005e 0123     		movs	r3, #1
 310 0060 FB73     		strb	r3, [r7, #15]
 311              	.L13:
 483:./Lib/Src/stm32f4xx_rtc.c ****   }
 484:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 485:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 312              		.loc 1 485 6
 313 0062 044B     		ldr	r3, .L15
 314              		.loc 1 485 12
 315 0064 FF22     		movs	r2, #255
 316 0066 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccHYJizt.s 			page 15


 486:./Lib/Src/stm32f4xx_rtc.c ****   
 487:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 317              		.loc 1 487 10
 318 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 488:./Lib/Src/stm32f4xx_rtc.c **** }
 319              		.loc 1 488 1
 320 006a 1846     		mov	r0, r3
 321 006c 1037     		adds	r7, r7, #16
 322              		.cfi_def_cfa_offset 8
 323 006e BD46     		mov	sp, r7
 324              		.cfi_def_cfa_register 13
 325              		@ sp needed
 326 0070 80BD     		pop	{r7, pc}
 327              	.L16:
 328 0072 00BF     		.align	2
 329              	.L15:
 330 0074 00280040 		.word	1073752064
 331              		.cfi_endproc
 332              	.LFE124:
 334              		.section	.text.RTC_StructInit,"ax",%progbits
 335              		.align	1
 336              		.global	RTC_StructInit
 337              		.syntax unified
 338              		.thumb
 339              		.thumb_func
 341              	RTC_StructInit:
 342              	.LFB125:
 489:./Lib/Src/stm32f4xx_rtc.c **** 
 490:./Lib/Src/stm32f4xx_rtc.c **** /**
 491:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 492:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 493:./Lib/Src/stm32f4xx_rtc.c ****   *         initialized.
 494:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
 495:./Lib/Src/stm32f4xx_rtc.c ****   */
 496:./Lib/Src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 497:./Lib/Src/stm32f4xx_rtc.c **** {
 343              		.loc 1 497 1
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 8
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348 0000 80B4     		push	{r7}
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 0002 83B0     		sub	sp, sp, #12
 352              		.cfi_def_cfa_offset 16
 353 0004 00AF     		add	r7, sp, #0
 354              		.cfi_def_cfa_register 7
 355 0006 7860     		str	r0, [r7, #4]
 498:./Lib/Src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 499:./Lib/Src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 356              		.loc 1 499 34
 357 0008 7B68     		ldr	r3, [r7, #4]
 358 000a 0022     		movs	r2, #0
 359 000c 1A60     		str	r2, [r3]
 500:./Lib/Src/stm32f4xx_rtc.c ****     
 501:./Lib/Src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
ARM GAS  /tmp/ccHYJizt.s 			page 16


 502:./Lib/Src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 360              		.loc 1 502 36
 361 000e 7B68     		ldr	r3, [r7, #4]
 362 0010 7F22     		movs	r2, #127
 363 0012 5A60     		str	r2, [r3, #4]
 503:./Lib/Src/stm32f4xx_rtc.c **** 
 504:./Lib/Src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 505:./Lib/Src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 364              		.loc 1 505 35
 365 0014 7B68     		ldr	r3, [r7, #4]
 366 0016 FF22     		movs	r2, #255
 367 0018 9A60     		str	r2, [r3, #8]
 506:./Lib/Src/stm32f4xx_rtc.c **** }
 368              		.loc 1 506 1
 369 001a 00BF     		nop
 370 001c 0C37     		adds	r7, r7, #12
 371              		.cfi_def_cfa_offset 4
 372 001e BD46     		mov	sp, r7
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 0020 5DF8047B 		ldr	r7, [sp], #4
 376              		.cfi_restore 7
 377              		.cfi_def_cfa_offset 0
 378 0024 7047     		bx	lr
 379              		.cfi_endproc
 380              	.LFE125:
 382              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 383              		.align	1
 384              		.global	RTC_WriteProtectionCmd
 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
 389              	RTC_WriteProtectionCmd:
 390              	.LFB126:
 507:./Lib/Src/stm32f4xx_rtc.c **** 
 508:./Lib/Src/stm32f4xx_rtc.c **** /**
 509:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 510:./Lib/Src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 511:./Lib/Src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 512:./Lib/Src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 513:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 514:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 515:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 516:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
 517:./Lib/Src/stm32f4xx_rtc.c ****   */
 518:./Lib/Src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 519:./Lib/Src/stm32f4xx_rtc.c **** {
 391              		.loc 1 519 1
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 8
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 7, -4
 399 0002 83B0     		sub	sp, sp, #12
 400              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccHYJizt.s 			page 17


 401 0004 00AF     		add	r7, sp, #0
 402              		.cfi_def_cfa_register 7
 403 0006 0346     		mov	r3, r0
 404 0008 FB71     		strb	r3, [r7, #7]
 520:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
 521:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 522:./Lib/Src/stm32f4xx_rtc.c ****     
 523:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 405              		.loc 1 523 6
 406 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 407 000c 002B     		cmp	r3, #0
 408 000e 03D0     		beq	.L19
 524:./Lib/Src/stm32f4xx_rtc.c ****   {
 525:./Lib/Src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 526:./Lib/Src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 409              		.loc 1 526 8
 410 0010 074B     		ldr	r3, .L22
 411              		.loc 1 526 14
 412 0012 FF22     		movs	r2, #255
 413 0014 5A62     		str	r2, [r3, #36]
 527:./Lib/Src/stm32f4xx_rtc.c ****   }
 528:./Lib/Src/stm32f4xx_rtc.c ****   else
 529:./Lib/Src/stm32f4xx_rtc.c ****   {
 530:./Lib/Src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 531:./Lib/Src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 532:./Lib/Src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 533:./Lib/Src/stm32f4xx_rtc.c ****   }
 534:./Lib/Src/stm32f4xx_rtc.c **** }
 414              		.loc 1 534 1
 415 0016 05E0     		b	.L21
 416              	.L19:
 531:./Lib/Src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 417              		.loc 1 531 8
 418 0018 054B     		ldr	r3, .L22
 531:./Lib/Src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 419              		.loc 1 531 14
 420 001a CA22     		movs	r2, #202
 421 001c 5A62     		str	r2, [r3, #36]
 532:./Lib/Src/stm32f4xx_rtc.c ****   }
 422              		.loc 1 532 8
 423 001e 044B     		ldr	r3, .L22
 532:./Lib/Src/stm32f4xx_rtc.c ****   }
 424              		.loc 1 532 14
 425 0020 5322     		movs	r2, #83
 426 0022 5A62     		str	r2, [r3, #36]
 427              	.L21:
 428              		.loc 1 534 1
 429 0024 00BF     		nop
 430 0026 0C37     		adds	r7, r7, #12
 431              		.cfi_def_cfa_offset 4
 432 0028 BD46     		mov	sp, r7
 433              		.cfi_def_cfa_register 13
 434              		@ sp needed
 435 002a 5DF8047B 		ldr	r7, [sp], #4
 436              		.cfi_restore 7
 437              		.cfi_def_cfa_offset 0
 438 002e 7047     		bx	lr
ARM GAS  /tmp/ccHYJizt.s 			page 18


 439              	.L23:
 440              		.align	2
 441              	.L22:
 442 0030 00280040 		.word	1073752064
 443              		.cfi_endproc
 444              	.LFE126:
 446              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 447              		.align	1
 448              		.global	RTC_EnterInitMode
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 453              	RTC_EnterInitMode:
 454              	.LFB127:
 535:./Lib/Src/stm32f4xx_rtc.c **** 
 536:./Lib/Src/stm32f4xx_rtc.c **** /**
 537:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 538:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 539:./Lib/Src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 540:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
 541:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 542:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 543:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 544:./Lib/Src/stm32f4xx_rtc.c ****   */
 545:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 546:./Lib/Src/stm32f4xx_rtc.c **** {
 455              		.loc 1 546 1
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 16
 458              		@ frame_needed = 1, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460 0000 80B4     		push	{r7}
 461              		.cfi_def_cfa_offset 4
 462              		.cfi_offset 7, -4
 463 0002 85B0     		sub	sp, sp, #20
 464              		.cfi_def_cfa_offset 24
 465 0004 00AF     		add	r7, sp, #0
 466              		.cfi_def_cfa_register 7
 547:./Lib/Src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 467              		.loc 1 547 17
 468 0006 0023     		movs	r3, #0
 469 0008 7B60     		str	r3, [r7, #4]
 548:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 470              		.loc 1 548 15
 471 000a 0023     		movs	r3, #0
 472 000c FB73     		strb	r3, [r7, #15]
 549:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 473              		.loc 1 549 12
 474 000e 0023     		movs	r3, #0
 475 0010 BB60     		str	r3, [r7, #8]
 550:./Lib/Src/stm32f4xx_rtc.c ****      
 551:./Lib/Src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 552:./Lib/Src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 476              		.loc 1 552 11
 477 0012 174B     		ldr	r3, .L31
 478 0014 DB68     		ldr	r3, [r3, #12]
 479              		.loc 1 552 17
ARM GAS  /tmp/ccHYJizt.s 			page 19


 480 0016 03F04003 		and	r3, r3, #64
 481              		.loc 1 552 6
 482 001a 002B     		cmp	r3, #0
 483 001c 1ED1     		bne	.L25
 553:./Lib/Src/stm32f4xx_rtc.c ****   {
 554:./Lib/Src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 555:./Lib/Src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 484              		.loc 1 555 8
 485 001e 144B     		ldr	r3, .L31
 486              		.loc 1 555 14
 487 0020 4FF0FF32 		mov	r2, #-1
 488 0024 DA60     		str	r2, [r3, #12]
 489              	.L27:
 556:./Lib/Src/stm32f4xx_rtc.c ****     
 557:./Lib/Src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 558:./Lib/Src/stm32f4xx_rtc.c ****     do
 559:./Lib/Src/stm32f4xx_rtc.c ****     {
 560:./Lib/Src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 490              		.loc 1 560 23 discriminator 2
 491 0026 124B     		ldr	r3, .L31
 492 0028 DB68     		ldr	r3, [r3, #12]
 493              		.loc 1 560 18 discriminator 2
 494 002a 03F04003 		and	r3, r3, #64
 495 002e BB60     		str	r3, [r7, #8]
 561:./Lib/Src/stm32f4xx_rtc.c ****       initcounter++;  
 496              		.loc 1 561 18 discriminator 2
 497 0030 7B68     		ldr	r3, [r7, #4]
 498 0032 0133     		adds	r3, r3, #1
 499 0034 7B60     		str	r3, [r7, #4]
 562:./Lib/Src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 500              		.loc 1 562 26 discriminator 2
 501 0036 7B68     		ldr	r3, [r7, #4]
 502              		.loc 1 562 47 discriminator 2
 503 0038 B3F5803F 		cmp	r3, #65536
 504 003c 02D0     		beq	.L26
 505              		.loc 1 562 47 is_stmt 0 discriminator 1
 506 003e BB68     		ldr	r3, [r7, #8]
 507 0040 002B     		cmp	r3, #0
 508 0042 F0D0     		beq	.L27
 509              	.L26:
 563:./Lib/Src/stm32f4xx_rtc.c ****     
 564:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 510              		.loc 1 564 13 is_stmt 1
 511 0044 0A4B     		ldr	r3, .L31
 512 0046 DB68     		ldr	r3, [r3, #12]
 513              		.loc 1 564 19
 514 0048 03F04003 		and	r3, r3, #64
 515              		.loc 1 564 8
 516 004c 002B     		cmp	r3, #0
 517 004e 02D0     		beq	.L28
 565:./Lib/Src/stm32f4xx_rtc.c ****     {
 566:./Lib/Src/stm32f4xx_rtc.c ****       status = SUCCESS;
 518              		.loc 1 566 14
 519 0050 0123     		movs	r3, #1
 520 0052 FB73     		strb	r3, [r7, #15]
 521 0054 04E0     		b	.L29
 522              	.L28:
ARM GAS  /tmp/ccHYJizt.s 			page 20


 567:./Lib/Src/stm32f4xx_rtc.c ****     }
 568:./Lib/Src/stm32f4xx_rtc.c ****     else
 569:./Lib/Src/stm32f4xx_rtc.c ****     {
 570:./Lib/Src/stm32f4xx_rtc.c ****       status = ERROR;
 523              		.loc 1 570 14
 524 0056 0023     		movs	r3, #0
 525 0058 FB73     		strb	r3, [r7, #15]
 526 005a 01E0     		b	.L29
 527              	.L25:
 571:./Lib/Src/stm32f4xx_rtc.c ****     }        
 572:./Lib/Src/stm32f4xx_rtc.c ****   }
 573:./Lib/Src/stm32f4xx_rtc.c ****   else
 574:./Lib/Src/stm32f4xx_rtc.c ****   {
 575:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 528              		.loc 1 575 12
 529 005c 0123     		movs	r3, #1
 530 005e FB73     		strb	r3, [r7, #15]
 531              	.L29:
 576:./Lib/Src/stm32f4xx_rtc.c ****   } 
 577:./Lib/Src/stm32f4xx_rtc.c ****     
 578:./Lib/Src/stm32f4xx_rtc.c ****   return (status);  
 532              		.loc 1 578 10
 533 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 579:./Lib/Src/stm32f4xx_rtc.c **** }
 534              		.loc 1 579 1
 535 0062 1846     		mov	r0, r3
 536 0064 1437     		adds	r7, r7, #20
 537              		.cfi_def_cfa_offset 4
 538 0066 BD46     		mov	sp, r7
 539              		.cfi_def_cfa_register 13
 540              		@ sp needed
 541 0068 5DF8047B 		ldr	r7, [sp], #4
 542              		.cfi_restore 7
 543              		.cfi_def_cfa_offset 0
 544 006c 7047     		bx	lr
 545              	.L32:
 546 006e 00BF     		.align	2
 547              	.L31:
 548 0070 00280040 		.word	1073752064
 549              		.cfi_endproc
 550              	.LFE127:
 552              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 553              		.align	1
 554              		.global	RTC_ExitInitMode
 555              		.syntax unified
 556              		.thumb
 557              		.thumb_func
 559              	RTC_ExitInitMode:
 560              	.LFB128:
 580:./Lib/Src/stm32f4xx_rtc.c **** 
 581:./Lib/Src/stm32f4xx_rtc.c **** /**
 582:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 583:./Lib/Src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 584:./Lib/Src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 585:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 586:./Lib/Src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 587:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
ARM GAS  /tmp/ccHYJizt.s 			page 21


 588:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
 589:./Lib/Src/stm32f4xx_rtc.c ****   */
 590:./Lib/Src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 591:./Lib/Src/stm32f4xx_rtc.c **** { 
 561              		.loc 1 591 1
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 1, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 80B4     		push	{r7}
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 7, -4
 569 0002 00AF     		add	r7, sp, #0
 570              		.cfi_def_cfa_register 7
 592:./Lib/Src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 593:./Lib/Src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 571              		.loc 1 593 6
 572 0004 054B     		ldr	r3, .L34
 573 0006 DB68     		ldr	r3, [r3, #12]
 574 0008 044A     		ldr	r2, .L34
 575              		.loc 1 593 12
 576 000a 23F08003 		bic	r3, r3, #128
 577 000e D360     		str	r3, [r2, #12]
 594:./Lib/Src/stm32f4xx_rtc.c **** }
 578              		.loc 1 594 1
 579 0010 00BF     		nop
 580 0012 BD46     		mov	sp, r7
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 0014 5DF8047B 		ldr	r7, [sp], #4
 584              		.cfi_restore 7
 585              		.cfi_def_cfa_offset 0
 586 0018 7047     		bx	lr
 587              	.L35:
 588 001a 00BF     		.align	2
 589              	.L34:
 590 001c 00280040 		.word	1073752064
 591              		.cfi_endproc
 592              	.LFE128:
 594              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 595              		.align	1
 596              		.global	RTC_WaitForSynchro
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 601              	RTC_WaitForSynchro:
 602              	.LFB129:
 595:./Lib/Src/stm32f4xx_rtc.c **** 
 596:./Lib/Src/stm32f4xx_rtc.c **** /**
 597:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 598:./Lib/Src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 599:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 600:./Lib/Src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 601:./Lib/Src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 602:./Lib/Src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 603:./Lib/Src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 604:./Lib/Src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
ARM GAS  /tmp/ccHYJizt.s 			page 22


 605:./Lib/Src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 606:./Lib/Src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 607:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
 608:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 609:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 610:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 611:./Lib/Src/stm32f4xx_rtc.c ****   */
 612:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 613:./Lib/Src/stm32f4xx_rtc.c **** {
 603              		.loc 1 613 1
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 16
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608 0000 80B4     		push	{r7}
 609              		.cfi_def_cfa_offset 4
 610              		.cfi_offset 7, -4
 611 0002 85B0     		sub	sp, sp, #20
 612              		.cfi_def_cfa_offset 24
 613 0004 00AF     		add	r7, sp, #0
 614              		.cfi_def_cfa_register 7
 614:./Lib/Src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 615              		.loc 1 614 17
 616 0006 0023     		movs	r3, #0
 617 0008 7B60     		str	r3, [r7, #4]
 615:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 618              		.loc 1 615 15
 619 000a 0023     		movs	r3, #0
 620 000c FB73     		strb	r3, [r7, #15]
 616:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 621              		.loc 1 616 12
 622 000e 0023     		movs	r3, #0
 623 0010 BB60     		str	r3, [r7, #8]
 617:./Lib/Src/stm32f4xx_rtc.c **** 
 618:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 619:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 624              		.loc 1 619 6
 625 0012 184B     		ldr	r3, .L42
 626              		.loc 1 619 12
 627 0014 CA22     		movs	r2, #202
 628 0016 5A62     		str	r2, [r3, #36]
 620:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 629              		.loc 1 620 6
 630 0018 164B     		ldr	r3, .L42
 631              		.loc 1 620 12
 632 001a 5322     		movs	r2, #83
 633 001c 5A62     		str	r2, [r3, #36]
 621:./Lib/Src/stm32f4xx_rtc.c ****     
 622:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 623:./Lib/Src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 634              		.loc 1 623 6
 635 001e 154B     		ldr	r3, .L42
 636 0020 DB68     		ldr	r3, [r3, #12]
 637 0022 144A     		ldr	r2, .L42
 638              		.loc 1 623 12
 639 0024 23F0A003 		bic	r3, r3, #160
 640 0028 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccHYJizt.s 			page 23


 641              	.L38:
 624:./Lib/Src/stm32f4xx_rtc.c ****     
 625:./Lib/Src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 626:./Lib/Src/stm32f4xx_rtc.c ****   do
 627:./Lib/Src/stm32f4xx_rtc.c ****   {
 628:./Lib/Src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 642              		.loc 1 628 24 discriminator 2
 643 002a 124B     		ldr	r3, .L42
 644 002c DB68     		ldr	r3, [r3, #12]
 645              		.loc 1 628 19 discriminator 2
 646 002e 03F02003 		and	r3, r3, #32
 647 0032 BB60     		str	r3, [r7, #8]
 629:./Lib/Src/stm32f4xx_rtc.c ****     synchrocounter++;  
 648              		.loc 1 629 19 discriminator 2
 649 0034 7B68     		ldr	r3, [r7, #4]
 650 0036 0133     		adds	r3, r3, #1
 651 0038 7B60     		str	r3, [r7, #4]
 630:./Lib/Src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 652              		.loc 1 630 27 discriminator 2
 653 003a 7B68     		ldr	r3, [r7, #4]
 654              		.loc 1 630 47 discriminator 2
 655 003c B3F5003F 		cmp	r3, #131072
 656 0040 02D0     		beq	.L37
 657              		.loc 1 630 47 is_stmt 0 discriminator 1
 658 0042 BB68     		ldr	r3, [r7, #8]
 659 0044 002B     		cmp	r3, #0
 660 0046 F0D0     		beq	.L38
 661              	.L37:
 631:./Lib/Src/stm32f4xx_rtc.c ****     
 632:./Lib/Src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 662              		.loc 1 632 11 is_stmt 1
 663 0048 0A4B     		ldr	r3, .L42
 664 004a DB68     		ldr	r3, [r3, #12]
 665              		.loc 1 632 17
 666 004c 03F02003 		and	r3, r3, #32
 667              		.loc 1 632 6
 668 0050 002B     		cmp	r3, #0
 669 0052 02D0     		beq	.L39
 633:./Lib/Src/stm32f4xx_rtc.c ****   {
 634:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;
 670              		.loc 1 634 12
 671 0054 0123     		movs	r3, #1
 672 0056 FB73     		strb	r3, [r7, #15]
 673 0058 01E0     		b	.L40
 674              	.L39:
 635:./Lib/Src/stm32f4xx_rtc.c ****   }
 636:./Lib/Src/stm32f4xx_rtc.c ****   else
 637:./Lib/Src/stm32f4xx_rtc.c ****   {
 638:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 675              		.loc 1 638 12
 676 005a 0023     		movs	r3, #0
 677 005c FB73     		strb	r3, [r7, #15]
 678              	.L40:
 639:./Lib/Src/stm32f4xx_rtc.c ****   }        
 640:./Lib/Src/stm32f4xx_rtc.c **** 
 641:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 642:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
ARM GAS  /tmp/ccHYJizt.s 			page 24


 679              		.loc 1 642 6
 680 005e 054B     		ldr	r3, .L42
 681              		.loc 1 642 12
 682 0060 FF22     		movs	r2, #255
 683 0062 5A62     		str	r2, [r3, #36]
 643:./Lib/Src/stm32f4xx_rtc.c ****     
 644:./Lib/Src/stm32f4xx_rtc.c ****   return (status); 
 684              		.loc 1 644 10
 685 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 645:./Lib/Src/stm32f4xx_rtc.c **** }
 686              		.loc 1 645 1
 687 0066 1846     		mov	r0, r3
 688 0068 1437     		adds	r7, r7, #20
 689              		.cfi_def_cfa_offset 4
 690 006a BD46     		mov	sp, r7
 691              		.cfi_def_cfa_register 13
 692              		@ sp needed
 693 006c 5DF8047B 		ldr	r7, [sp], #4
 694              		.cfi_restore 7
 695              		.cfi_def_cfa_offset 0
 696 0070 7047     		bx	lr
 697              	.L43:
 698 0072 00BF     		.align	2
 699              	.L42:
 700 0074 00280040 		.word	1073752064
 701              		.cfi_endproc
 702              	.LFE129:
 704              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 705              		.align	1
 706              		.global	RTC_RefClockCmd
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 711              	RTC_RefClockCmd:
 712              	.LFB130:
 646:./Lib/Src/stm32f4xx_rtc.c **** 
 647:./Lib/Src/stm32f4xx_rtc.c **** /**
 648:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 649:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 650:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 651:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 652:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 653:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 654:./Lib/Src/stm32f4xx_rtc.c ****   */
 655:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 656:./Lib/Src/stm32f4xx_rtc.c **** { 
 713              		.loc 1 656 1
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 16
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 80B5     		push	{r7, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 84B0     		sub	sp, sp, #16
 722              		.cfi_def_cfa_offset 24
 723 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccHYJizt.s 			page 25


 724              		.cfi_def_cfa_register 7
 725 0006 0346     		mov	r3, r0
 726 0008 FB71     		strb	r3, [r7, #7]
 657:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 727              		.loc 1 657 15
 728 000a 0023     		movs	r3, #0
 729 000c FB73     		strb	r3, [r7, #15]
 658:./Lib/Src/stm32f4xx_rtc.c ****   
 659:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
 660:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 661:./Lib/Src/stm32f4xx_rtc.c ****   
 662:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 663:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 730              		.loc 1 663 6
 731 000e 154B     		ldr	r3, .L50
 732              		.loc 1 663 12
 733 0010 CA22     		movs	r2, #202
 734 0012 5A62     		str	r2, [r3, #36]
 664:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 735              		.loc 1 664 6
 736 0014 134B     		ldr	r3, .L50
 737              		.loc 1 664 12
 738 0016 5322     		movs	r2, #83
 739 0018 5A62     		str	r2, [r3, #36]
 665:./Lib/Src/stm32f4xx_rtc.c ****     
 666:./Lib/Src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 667:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 740              		.loc 1 667 7
 741 001a FFF7FEFF 		bl	RTC_EnterInitMode
 742 001e 0346     		mov	r3, r0
 743              		.loc 1 667 6
 744 0020 002B     		cmp	r3, #0
 745 0022 02D1     		bne	.L45
 668:./Lib/Src/stm32f4xx_rtc.c ****   {
 669:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 746              		.loc 1 669 12
 747 0024 0023     		movs	r3, #0
 748 0026 FB73     		strb	r3, [r7, #15]
 749 0028 13E0     		b	.L46
 750              	.L45:
 670:./Lib/Src/stm32f4xx_rtc.c ****   } 
 671:./Lib/Src/stm32f4xx_rtc.c ****   else
 672:./Lib/Src/stm32f4xx_rtc.c ****   {  
 673:./Lib/Src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 751              		.loc 1 673 8
 752 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 753 002c 002B     		cmp	r3, #0
 754 002e 06D0     		beq	.L47
 674:./Lib/Src/stm32f4xx_rtc.c ****     {
 675:./Lib/Src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 676:./Lib/Src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 755              		.loc 1 676 10
 756 0030 0C4B     		ldr	r3, .L50
 757 0032 9B68     		ldr	r3, [r3, #8]
 758 0034 0B4A     		ldr	r2, .L50
 759              		.loc 1 676 15
 760 0036 43F01003 		orr	r3, r3, #16
ARM GAS  /tmp/ccHYJizt.s 			page 26


 761 003a 9360     		str	r3, [r2, #8]
 762 003c 05E0     		b	.L48
 763              	.L47:
 677:./Lib/Src/stm32f4xx_rtc.c ****     }
 678:./Lib/Src/stm32f4xx_rtc.c ****     else
 679:./Lib/Src/stm32f4xx_rtc.c ****     {
 680:./Lib/Src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 681:./Lib/Src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 764              		.loc 1 681 10
 765 003e 094B     		ldr	r3, .L50
 766 0040 9B68     		ldr	r3, [r3, #8]
 767 0042 084A     		ldr	r2, .L50
 768              		.loc 1 681 15
 769 0044 23F01003 		bic	r3, r3, #16
 770 0048 9360     		str	r3, [r2, #8]
 771              	.L48:
 682:./Lib/Src/stm32f4xx_rtc.c ****     }
 683:./Lib/Src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 684:./Lib/Src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 772              		.loc 1 684 5
 773 004a FFF7FEFF 		bl	RTC_ExitInitMode
 685:./Lib/Src/stm32f4xx_rtc.c ****     
 686:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;
 774              		.loc 1 686 12
 775 004e 0123     		movs	r3, #1
 776 0050 FB73     		strb	r3, [r7, #15]
 777              	.L46:
 687:./Lib/Src/stm32f4xx_rtc.c ****   }
 688:./Lib/Src/stm32f4xx_rtc.c ****   
 689:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 690:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 778              		.loc 1 690 6
 779 0052 044B     		ldr	r3, .L50
 780              		.loc 1 690 12
 781 0054 FF22     		movs	r2, #255
 782 0056 5A62     		str	r2, [r3, #36]
 691:./Lib/Src/stm32f4xx_rtc.c ****   
 692:./Lib/Src/stm32f4xx_rtc.c ****   return status; 
 783              		.loc 1 692 10
 784 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 693:./Lib/Src/stm32f4xx_rtc.c **** }
 785              		.loc 1 693 1
 786 005a 1846     		mov	r0, r3
 787 005c 1037     		adds	r7, r7, #16
 788              		.cfi_def_cfa_offset 8
 789 005e BD46     		mov	sp, r7
 790              		.cfi_def_cfa_register 13
 791              		@ sp needed
 792 0060 80BD     		pop	{r7, pc}
 793              	.L51:
 794 0062 00BF     		.align	2
 795              	.L50:
 796 0064 00280040 		.word	1073752064
 797              		.cfi_endproc
 798              	.LFE130:
 800              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 801              		.align	1
ARM GAS  /tmp/ccHYJizt.s 			page 27


 802              		.global	RTC_BypassShadowCmd
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 807              	RTC_BypassShadowCmd:
 808              	.LFB131:
 694:./Lib/Src/stm32f4xx_rtc.c **** 
 695:./Lib/Src/stm32f4xx_rtc.c **** /**
 696:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 697:./Lib/Src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 698:./Lib/Src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 699:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 700:./Lib/Src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 701:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
 702:./Lib/Src/stm32f4xx_rtc.c **** */
 703:./Lib/Src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 704:./Lib/Src/stm32f4xx_rtc.c **** {
 809              		.loc 1 704 1
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 8
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 814 0000 80B4     		push	{r7}
 815              		.cfi_def_cfa_offset 4
 816              		.cfi_offset 7, -4
 817 0002 83B0     		sub	sp, sp, #12
 818              		.cfi_def_cfa_offset 16
 819 0004 00AF     		add	r7, sp, #0
 820              		.cfi_def_cfa_register 7
 821 0006 0346     		mov	r3, r0
 822 0008 FB71     		strb	r3, [r7, #7]
 705:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
 706:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 707:./Lib/Src/stm32f4xx_rtc.c **** 
 708:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 709:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 823              		.loc 1 709 6
 824 000a 0F4B     		ldr	r3, .L55
 825              		.loc 1 709 12
 826 000c CA22     		movs	r2, #202
 827 000e 5A62     		str	r2, [r3, #36]
 710:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 828              		.loc 1 710 6
 829 0010 0D4B     		ldr	r3, .L55
 830              		.loc 1 710 12
 831 0012 5322     		movs	r2, #83
 832 0014 5A62     		str	r2, [r3, #36]
 711:./Lib/Src/stm32f4xx_rtc.c ****   
 712:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 833              		.loc 1 712 6
 834 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 835 0018 002B     		cmp	r3, #0
 836 001a 06D0     		beq	.L53
 713:./Lib/Src/stm32f4xx_rtc.c ****   {
 714:./Lib/Src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 715:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 837              		.loc 1 715 8
ARM GAS  /tmp/ccHYJizt.s 			page 28


 838 001c 0A4B     		ldr	r3, .L55
 839 001e 9B68     		ldr	r3, [r3, #8]
 840 0020 094A     		ldr	r2, .L55
 841              		.loc 1 715 13
 842 0022 43F02003 		orr	r3, r3, #32
 843 0026 9360     		str	r3, [r2, #8]
 844 0028 05E0     		b	.L54
 845              	.L53:
 716:./Lib/Src/stm32f4xx_rtc.c ****   }
 717:./Lib/Src/stm32f4xx_rtc.c ****   else
 718:./Lib/Src/stm32f4xx_rtc.c ****   {
 719:./Lib/Src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 720:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 846              		.loc 1 720 8
 847 002a 074B     		ldr	r3, .L55
 848 002c 9B68     		ldr	r3, [r3, #8]
 849 002e 064A     		ldr	r2, .L55
 850              		.loc 1 720 13
 851 0030 03F0DF03 		and	r3, r3, #223
 852 0034 9360     		str	r3, [r2, #8]
 853              	.L54:
 721:./Lib/Src/stm32f4xx_rtc.c ****   }
 722:./Lib/Src/stm32f4xx_rtc.c **** 
 723:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 724:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 854              		.loc 1 724 6
 855 0036 044B     		ldr	r3, .L55
 856              		.loc 1 724 12
 857 0038 FF22     		movs	r2, #255
 858 003a 5A62     		str	r2, [r3, #36]
 725:./Lib/Src/stm32f4xx_rtc.c **** }
 859              		.loc 1 725 1
 860 003c 00BF     		nop
 861 003e 0C37     		adds	r7, r7, #12
 862              		.cfi_def_cfa_offset 4
 863 0040 BD46     		mov	sp, r7
 864              		.cfi_def_cfa_register 13
 865              		@ sp needed
 866 0042 5DF8047B 		ldr	r7, [sp], #4
 867              		.cfi_restore 7
 868              		.cfi_def_cfa_offset 0
 869 0046 7047     		bx	lr
 870              	.L56:
 871              		.align	2
 872              	.L55:
 873 0048 00280040 		.word	1073752064
 874              		.cfi_endproc
 875              	.LFE131:
 877              		.section	.text.RTC_SetTime,"ax",%progbits
 878              		.align	1
 879              		.global	RTC_SetTime
 880              		.syntax unified
 881              		.thumb
 882              		.thumb_func
 884              	RTC_SetTime:
 885              	.LFB132:
 726:./Lib/Src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccHYJizt.s 			page 29


 727:./Lib/Src/stm32f4xx_rtc.c **** /**
 728:./Lib/Src/stm32f4xx_rtc.c ****   * @}
 729:./Lib/Src/stm32f4xx_rtc.c ****   */
 730:./Lib/Src/stm32f4xx_rtc.c **** 
 731:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 732:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 733:./Lib/Src/stm32f4xx_rtc.c ****  *
 734:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
 735:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
 736:./Lib/Src/stm32f4xx_rtc.c ****                  ##### Time and Date configuration functions #####
 737:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
 738:./Lib/Src/stm32f4xx_rtc.c ****  
 739:./Lib/Src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Calendar
 740:./Lib/Src/stm32f4xx_rtc.c ****       (Time and Date).
 741:./Lib/Src/stm32f4xx_rtc.c **** 
 742:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
 743:./Lib/Src/stm32f4xx_rtc.c ****   * @{
 744:./Lib/Src/stm32f4xx_rtc.c ****   */
 745:./Lib/Src/stm32f4xx_rtc.c **** 
 746:./Lib/Src/stm32f4xx_rtc.c **** /**
 747:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 748:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 749:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 750:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 751:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 752:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 753:./Lib/Src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 754:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 755:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 756:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 757:./Lib/Src/stm32f4xx_rtc.c ****   */
 758:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 759:./Lib/Src/stm32f4xx_rtc.c **** {
 886              		.loc 1 759 1
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 16
 889              		@ frame_needed = 1, uses_anonymous_args = 0
 890 0000 90B5     		push	{r4, r7, lr}
 891              		.cfi_def_cfa_offset 12
 892              		.cfi_offset 4, -12
 893              		.cfi_offset 7, -8
 894              		.cfi_offset 14, -4
 895 0002 85B0     		sub	sp, sp, #20
 896              		.cfi_def_cfa_offset 32
 897 0004 00AF     		add	r7, sp, #0
 898              		.cfi_def_cfa_register 7
 899 0006 7860     		str	r0, [r7, #4]
 900 0008 3960     		str	r1, [r7]
 760:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 901              		.loc 1 760 12
 902 000a 0023     		movs	r3, #0
 903 000c FB60     		str	r3, [r7, #12]
 761:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 904              		.loc 1 761 15
 905 000e 0023     		movs	r3, #0
 906 0010 FB72     		strb	r3, [r7, #11]
 762:./Lib/Src/stm32f4xx_rtc.c ****     
ARM GAS  /tmp/ccHYJizt.s 			page 30


 763:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
 764:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 765:./Lib/Src/stm32f4xx_rtc.c ****   
 766:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 907              		.loc 1 766 6
 908 0012 7B68     		ldr	r3, [r7, #4]
 909 0014 002B     		cmp	r3, #0
 910 0016 09D1     		bne	.L58
 767:./Lib/Src/stm32f4xx_rtc.c ****   {
 768:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 911              		.loc 1 768 13
 912 0018 3D4B     		ldr	r3, .L68
 913 001a 9B68     		ldr	r3, [r3, #8]
 914              		.loc 1 768 18
 915 001c 03F04003 		and	r3, r3, #64
 916              		.loc 1 768 8
 917 0020 002B     		cmp	r3, #0
 918 0022 14D1     		bne	.L59
 769:./Lib/Src/stm32f4xx_rtc.c ****     {
 770:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 771:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 772:./Lib/Src/stm32f4xx_rtc.c ****     } 
 773:./Lib/Src/stm32f4xx_rtc.c ****     else
 774:./Lib/Src/stm32f4xx_rtc.c ****     {
 775:./Lib/Src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 919              		.loc 1 775 31
 920 0024 3B68     		ldr	r3, [r7]
 921 0026 0022     		movs	r2, #0
 922 0028 DA70     		strb	r2, [r3, #3]
 923 002a 10E0     		b	.L59
 924              	.L58:
 776:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 777:./Lib/Src/stm32f4xx_rtc.c ****     }
 778:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 779:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 780:./Lib/Src/stm32f4xx_rtc.c ****   }
 781:./Lib/Src/stm32f4xx_rtc.c ****   else
 782:./Lib/Src/stm32f4xx_rtc.c ****   {
 783:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 925              		.loc 1 783 13
 926 002c 384B     		ldr	r3, .L68
 927 002e 9B68     		ldr	r3, [r3, #8]
 928              		.loc 1 783 18
 929 0030 03F04003 		and	r3, r3, #64
 930              		.loc 1 783 8
 931 0034 002B     		cmp	r3, #0
 932 0036 07D0     		beq	.L60
 784:./Lib/Src/stm32f4xx_rtc.c ****     {
 785:./Lib/Src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 933              		.loc 1 785 16
 934 0038 3B68     		ldr	r3, [r7]
 935 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 936 003c 1846     		mov	r0, r3
 937 003e FFF7FEFF 		bl	RTC_Bcd2ToByte
 938 0042 0346     		mov	r3, r0
 939              		.loc 1 785 14
 940 0044 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccHYJizt.s 			page 31


 941 0046 02E0     		b	.L59
 942              	.L60:
 786:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 787:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 788:./Lib/Src/stm32f4xx_rtc.c ****     } 
 789:./Lib/Src/stm32f4xx_rtc.c ****     else
 790:./Lib/Src/stm32f4xx_rtc.c ****     {
 791:./Lib/Src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 943              		.loc 1 791 31
 944 0048 3B68     		ldr	r3, [r7]
 945 004a 0022     		movs	r2, #0
 946 004c DA70     		strb	r2, [r3, #3]
 947              	.L59:
 792:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 793:./Lib/Src/stm32f4xx_rtc.c ****     }
 794:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 795:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 796:./Lib/Src/stm32f4xx_rtc.c ****   }
 797:./Lib/Src/stm32f4xx_rtc.c ****   
 798:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 799:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 948              		.loc 1 799 6
 949 004e 7B68     		ldr	r3, [r7, #4]
 950 0050 002B     		cmp	r3, #0
 951 0052 0FD0     		beq	.L61
 800:./Lib/Src/stm32f4xx_rtc.c ****   {
 801:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 952              		.loc 1 801 41
 953 0054 3B68     		ldr	r3, [r7]
 954 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 955              		.loc 1 801 54
 956 0058 1A04     		lsls	r2, r3, #16
 802:./Lib/Src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 957              		.loc 1 802 40
 958 005a 3B68     		ldr	r3, [r7]
 959 005c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 960              		.loc 1 802 55
 961 005e 1B02     		lsls	r3, r3, #8
 801:./Lib/Src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 962              		.loc 1 801 61
 963 0060 1343     		orrs	r3, r3, r2
 803:./Lib/Src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 964              		.loc 1 803 39
 965 0062 3A68     		ldr	r2, [r7]
 966 0064 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 802:./Lib/Src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 967              		.loc 1 802 61
 968 0066 1A43     		orrs	r2, r2, r3
 804:./Lib/Src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 969              		.loc 1 804 40
 970 0068 3B68     		ldr	r3, [r7]
 971 006a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 972              		.loc 1 804 51
 973 006c 1B04     		lsls	r3, r3, #16
 801:./Lib/Src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 974              		.loc 1 801 12
 975 006e 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccHYJizt.s 			page 32


 976 0070 FB60     		str	r3, [r7, #12]
 977 0072 1BE0     		b	.L62
 978              	.L61:
 805:./Lib/Src/stm32f4xx_rtc.c ****   }  
 806:./Lib/Src/stm32f4xx_rtc.c ****   else
 807:./Lib/Src/stm32f4xx_rtc.c ****   {
 808:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 979              		.loc 1 808 36
 980 0074 3B68     		ldr	r3, [r7]
 981 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 0078 1846     		mov	r0, r3
 983 007a FFF7FEFF 		bl	RTC_ByteToBcd2
 984 007e 0346     		mov	r3, r0
 985              		.loc 1 808 78
 986 0080 1C04     		lsls	r4, r3, #16
 809:./Lib/Src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 987              		.loc 1 809 31
 988 0082 3B68     		ldr	r3, [r7]
 989 0084 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 990 0086 1846     		mov	r0, r3
 991 0088 FFF7FEFF 		bl	RTC_ByteToBcd2
 992 008c 0346     		mov	r3, r0
 993              		.loc 1 809 75
 994 008e 1B02     		lsls	r3, r3, #8
 808:./Lib/Src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 995              		.loc 1 808 85
 996 0090 1C43     		orrs	r4, r4, r3
 810:./Lib/Src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 997              		.loc 1 810 31
 998 0092 3B68     		ldr	r3, [r7]
 999 0094 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1000 0096 1846     		mov	r0, r3
 1001 0098 FFF7FEFF 		bl	RTC_ByteToBcd2
 1002 009c 0346     		mov	r3, r0
 809:./Lib/Src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1003              		.loc 1 809 81
 1004 009e 44EA0302 		orr	r2, r4, r3
 811:./Lib/Src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 1005              		.loc 1 811 46
 1006 00a2 3B68     		ldr	r3, [r7]
 1007 00a4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1008              		.loc 1 811 57
 1009 00a6 1B04     		lsls	r3, r3, #16
 808:./Lib/Src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 1010              		.loc 1 808 12
 1011 00a8 1343     		orrs	r3, r3, r2
 1012 00aa FB60     		str	r3, [r7, #12]
 1013              	.L62:
 812:./Lib/Src/stm32f4xx_rtc.c ****   }  
 813:./Lib/Src/stm32f4xx_rtc.c **** 
 814:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 815:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1014              		.loc 1 815 6
 1015 00ac 184B     		ldr	r3, .L68
 1016              		.loc 1 815 12
 1017 00ae CA22     		movs	r2, #202
 1018 00b0 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccHYJizt.s 			page 33


 816:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1019              		.loc 1 816 6
 1020 00b2 174B     		ldr	r3, .L68
 1021              		.loc 1 816 12
 1022 00b4 5322     		movs	r2, #83
 1023 00b6 5A62     		str	r2, [r3, #36]
 817:./Lib/Src/stm32f4xx_rtc.c **** 
 818:./Lib/Src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 819:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1024              		.loc 1 819 7
 1025 00b8 FFF7FEFF 		bl	RTC_EnterInitMode
 1026 00bc 0346     		mov	r3, r0
 1027              		.loc 1 819 6
 1028 00be 002B     		cmp	r3, #0
 1029 00c0 02D1     		bne	.L63
 820:./Lib/Src/stm32f4xx_rtc.c ****   {
 821:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 1030              		.loc 1 821 12
 1031 00c2 0023     		movs	r3, #0
 1032 00c4 FB72     		strb	r3, [r7, #11]
 1033 00c6 1BE0     		b	.L64
 1034              	.L63:
 822:./Lib/Src/stm32f4xx_rtc.c ****   } 
 823:./Lib/Src/stm32f4xx_rtc.c ****   else
 824:./Lib/Src/stm32f4xx_rtc.c ****   {
 825:./Lib/Src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 826:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 1035              		.loc 1 826 8
 1036 00c8 114A     		ldr	r2, .L68
 1037              		.loc 1 826 15
 1038 00ca FB68     		ldr	r3, [r7, #12]
 1039 00cc 03F07F33 		and	r3, r3, #2139062143
 1040 00d0 23F0FE43 		bic	r3, r3, #2130706432
 1041              		.loc 1 826 13
 1042 00d4 1360     		str	r3, [r2]
 827:./Lib/Src/stm32f4xx_rtc.c **** 
 828:./Lib/Src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 829:./Lib/Src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1043              		.loc 1 829 5
 1044 00d6 FFF7FEFF 		bl	RTC_ExitInitMode
 830:./Lib/Src/stm32f4xx_rtc.c **** 
 831:./Lib/Src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 832:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1045              		.loc 1 832 13
 1046 00da 0D4B     		ldr	r3, .L68
 1047 00dc 9B68     		ldr	r3, [r3, #8]
 1048              		.loc 1 832 18
 1049 00de 03F02003 		and	r3, r3, #32
 1050              		.loc 1 832 8
 1051 00e2 002B     		cmp	r3, #0
 1052 00e4 0AD1     		bne	.L65
 833:./Lib/Src/stm32f4xx_rtc.c ****     {
 834:./Lib/Src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1053              		.loc 1 834 8
 1054 00e6 FFF7FEFF 		bl	RTC_WaitForSynchro
 1055 00ea 0346     		mov	r3, r0
 1056              		.loc 1 834 7
ARM GAS  /tmp/ccHYJizt.s 			page 34


 1057 00ec 002B     		cmp	r3, #0
 1058 00ee 02D1     		bne	.L66
 835:./Lib/Src/stm32f4xx_rtc.c ****     {
 836:./Lib/Src/stm32f4xx_rtc.c ****       status = ERROR;
 1059              		.loc 1 836 14
 1060 00f0 0023     		movs	r3, #0
 1061 00f2 FB72     		strb	r3, [r7, #11]
 1062 00f4 04E0     		b	.L64
 1063              	.L66:
 837:./Lib/Src/stm32f4xx_rtc.c ****     }
 838:./Lib/Src/stm32f4xx_rtc.c ****     else
 839:./Lib/Src/stm32f4xx_rtc.c ****     {
 840:./Lib/Src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1064              		.loc 1 840 14
 1065 00f6 0123     		movs	r3, #1
 1066 00f8 FB72     		strb	r3, [r7, #11]
 1067 00fa 01E0     		b	.L64
 1068              	.L65:
 841:./Lib/Src/stm32f4xx_rtc.c ****     }
 842:./Lib/Src/stm32f4xx_rtc.c ****   }
 843:./Lib/Src/stm32f4xx_rtc.c ****     else
 844:./Lib/Src/stm32f4xx_rtc.c ****     {
 845:./Lib/Src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1069              		.loc 1 845 14
 1070 00fc 0123     		movs	r3, #1
 1071 00fe FB72     		strb	r3, [r7, #11]
 1072              	.L64:
 846:./Lib/Src/stm32f4xx_rtc.c ****     }
 847:./Lib/Src/stm32f4xx_rtc.c ****   }
 848:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 849:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 1073              		.loc 1 849 6
 1074 0100 034B     		ldr	r3, .L68
 1075              		.loc 1 849 12
 1076 0102 FF22     		movs	r2, #255
 1077 0104 5A62     		str	r2, [r3, #36]
 850:./Lib/Src/stm32f4xx_rtc.c ****     
 851:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 1078              		.loc 1 851 10
 1079 0106 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 852:./Lib/Src/stm32f4xx_rtc.c **** }
 1080              		.loc 1 852 1
 1081 0108 1846     		mov	r0, r3
 1082 010a 1437     		adds	r7, r7, #20
 1083              		.cfi_def_cfa_offset 12
 1084 010c BD46     		mov	sp, r7
 1085              		.cfi_def_cfa_register 13
 1086              		@ sp needed
 1087 010e 90BD     		pop	{r4, r7, pc}
 1088              	.L69:
 1089              		.align	2
 1090              	.L68:
 1091 0110 00280040 		.word	1073752064
 1092              		.cfi_endproc
 1093              	.LFE132:
 1095              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 1096              		.align	1
ARM GAS  /tmp/ccHYJizt.s 			page 35


 1097              		.global	RTC_TimeStructInit
 1098              		.syntax unified
 1099              		.thumb
 1100              		.thumb_func
 1102              	RTC_TimeStructInit:
 1103              	.LFB133:
 853:./Lib/Src/stm32f4xx_rtc.c **** 
 854:./Lib/Src/stm32f4xx_rtc.c **** /**
 855:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 856:./Lib/Src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 857:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 858:./Lib/Src/stm32f4xx_rtc.c ****   *         initialized.
 859:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
 860:./Lib/Src/stm32f4xx_rtc.c ****   */
 861:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 862:./Lib/Src/stm32f4xx_rtc.c **** {
 1104              		.loc 1 862 1
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 8
 1107              		@ frame_needed = 1, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 1109 0000 80B4     		push	{r7}
 1110              		.cfi_def_cfa_offset 4
 1111              		.cfi_offset 7, -4
 1112 0002 83B0     		sub	sp, sp, #12
 1113              		.cfi_def_cfa_offset 16
 1114 0004 00AF     		add	r7, sp, #0
 1115              		.cfi_def_cfa_register 7
 1116 0006 7860     		str	r0, [r7, #4]
 863:./Lib/Src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 864:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1117              		.loc 1 864 27
 1118 0008 7B68     		ldr	r3, [r7, #4]
 1119 000a 0022     		movs	r2, #0
 1120 000c DA70     		strb	r2, [r3, #3]
 865:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1121              		.loc 1 865 29
 1122 000e 7B68     		ldr	r3, [r7, #4]
 1123 0010 0022     		movs	r2, #0
 1124 0012 1A70     		strb	r2, [r3]
 866:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1125              		.loc 1 866 31
 1126 0014 7B68     		ldr	r3, [r7, #4]
 1127 0016 0022     		movs	r2, #0
 1128 0018 5A70     		strb	r2, [r3, #1]
 867:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1129              		.loc 1 867 31
 1130 001a 7B68     		ldr	r3, [r7, #4]
 1131 001c 0022     		movs	r2, #0
 1132 001e 9A70     		strb	r2, [r3, #2]
 868:./Lib/Src/stm32f4xx_rtc.c **** }
 1133              		.loc 1 868 1
 1134 0020 00BF     		nop
 1135 0022 0C37     		adds	r7, r7, #12
 1136              		.cfi_def_cfa_offset 4
 1137 0024 BD46     		mov	sp, r7
 1138              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccHYJizt.s 			page 36


 1139              		@ sp needed
 1140 0026 5DF8047B 		ldr	r7, [sp], #4
 1141              		.cfi_restore 7
 1142              		.cfi_def_cfa_offset 0
 1143 002a 7047     		bx	lr
 1144              		.cfi_endproc
 1145              	.LFE133:
 1147              		.section	.text.RTC_GetTime,"ax",%progbits
 1148              		.align	1
 1149              		.global	RTC_GetTime
 1150              		.syntax unified
 1151              		.thumb
 1152              		.thumb_func
 1154              	RTC_GetTime:
 1155              	.LFB134:
 869:./Lib/Src/stm32f4xx_rtc.c **** 
 870:./Lib/Src/stm32f4xx_rtc.c **** /**
 871:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 872:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 873:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 874:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 875:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 876:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 877:./Lib/Src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 878:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
 879:./Lib/Src/stm32f4xx_rtc.c ****   */
 880:./Lib/Src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 881:./Lib/Src/stm32f4xx_rtc.c **** {
 1156              		.loc 1 881 1
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 16
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160 0000 80B5     		push	{r7, lr}
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 7, -8
 1163              		.cfi_offset 14, -4
 1164 0002 84B0     		sub	sp, sp, #16
 1165              		.cfi_def_cfa_offset 24
 1166 0004 00AF     		add	r7, sp, #0
 1167              		.cfi_def_cfa_register 7
 1168 0006 7860     		str	r0, [r7, #4]
 1169 0008 3960     		str	r1, [r7]
 882:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1170              		.loc 1 882 12
 1171 000a 0023     		movs	r3, #0
 1172 000c FB60     		str	r3, [r7, #12]
 883:./Lib/Src/stm32f4xx_rtc.c **** 
 884:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
 885:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 886:./Lib/Src/stm32f4xx_rtc.c **** 
 887:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 888:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1173              		.loc 1 888 26
 1174 000e 244B     		ldr	r3, .L74
 1175 0010 1B68     		ldr	r3, [r3]
 1176              		.loc 1 888 10
 1177 0012 03F07F33 		and	r3, r3, #2139062143
ARM GAS  /tmp/ccHYJizt.s 			page 37


 1178 0016 23F0FE43 		bic	r3, r3, #2130706432
 1179 001a FB60     		str	r3, [r7, #12]
 889:./Lib/Src/stm32f4xx_rtc.c ****   
 890:./Lib/Src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 891:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1180              		.loc 1 891 76
 1181 001c FB68     		ldr	r3, [r7, #12]
 1182 001e 1B0C     		lsrs	r3, r3, #16
 1183              		.loc 1 891 31
 1184 0020 DBB2     		uxtb	r3, r3
 1185 0022 03F03F03 		and	r3, r3, #63
 1186 0026 DAB2     		uxtb	r2, r3
 1187              		.loc 1 891 29
 1188 0028 3B68     		ldr	r3, [r7]
 1189 002a 1A70     		strb	r2, [r3]
 892:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1190              		.loc 1 892 80
 1191 002c FB68     		ldr	r3, [r7, #12]
 1192 002e 1B0A     		lsrs	r3, r3, #8
 1193              		.loc 1 892 33
 1194 0030 DBB2     		uxtb	r3, r3
 1195 0032 03F07F03 		and	r3, r3, #127
 1196 0036 DAB2     		uxtb	r2, r3
 1197              		.loc 1 892 31
 1198 0038 3B68     		ldr	r3, [r7]
 1199 003a 5A70     		strb	r2, [r3, #1]
 893:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1200              		.loc 1 893 33
 1201 003c FB68     		ldr	r3, [r7, #12]
 1202 003e DBB2     		uxtb	r3, r3
 1203 0040 03F07F03 		and	r3, r3, #127
 1204 0044 DAB2     		uxtb	r2, r3
 1205              		.loc 1 893 31
 1206 0046 3B68     		ldr	r3, [r7]
 1207 0048 9A70     		strb	r2, [r3, #2]
 894:./Lib/Src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1208              		.loc 1 894 62
 1209 004a FB68     		ldr	r3, [r7, #12]
 1210 004c 1B0C     		lsrs	r3, r3, #16
 1211              		.loc 1 894 29
 1212 004e DBB2     		uxtb	r3, r3
 1213 0050 03F04003 		and	r3, r3, #64
 1214 0054 DAB2     		uxtb	r2, r3
 1215              		.loc 1 894 27
 1216 0056 3B68     		ldr	r3, [r7]
 1217 0058 DA70     		strb	r2, [r3, #3]
 895:./Lib/Src/stm32f4xx_rtc.c **** 
 896:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 897:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1218              		.loc 1 897 6
 1219 005a 7B68     		ldr	r3, [r7, #4]
 1220 005c 002B     		cmp	r3, #0
 1221 005e 1AD1     		bne	.L73
 898:./Lib/Src/stm32f4xx_rtc.c ****   {
 899:./Lib/Src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 900:./Lib/Src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1222              		.loc 1 900 42
ARM GAS  /tmp/ccHYJizt.s 			page 38


 1223 0060 3B68     		ldr	r3, [r7]
 1224 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1225 0064 1846     		mov	r0, r3
 1226 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1227 006a 0346     		mov	r3, r0
 1228 006c 1A46     		mov	r2, r3
 1229              		.loc 1 900 31
 1230 006e 3B68     		ldr	r3, [r7]
 1231 0070 1A70     		strb	r2, [r3]
 901:./Lib/Src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1232              		.loc 1 901 44
 1233 0072 3B68     		ldr	r3, [r7]
 1234 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1235 0076 1846     		mov	r0, r3
 1236 0078 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1237 007c 0346     		mov	r3, r0
 1238 007e 1A46     		mov	r2, r3
 1239              		.loc 1 901 33
 1240 0080 3B68     		ldr	r3, [r7]
 1241 0082 5A70     		strb	r2, [r3, #1]
 902:./Lib/Src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1242              		.loc 1 902 44
 1243 0084 3B68     		ldr	r3, [r7]
 1244 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1245 0088 1846     		mov	r0, r3
 1246 008a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1247 008e 0346     		mov	r3, r0
 1248 0090 1A46     		mov	r2, r3
 1249              		.loc 1 902 33
 1250 0092 3B68     		ldr	r3, [r7]
 1251 0094 9A70     		strb	r2, [r3, #2]
 1252              	.L73:
 903:./Lib/Src/stm32f4xx_rtc.c ****   }
 904:./Lib/Src/stm32f4xx_rtc.c **** }
 1253              		.loc 1 904 1
 1254 0096 00BF     		nop
 1255 0098 1037     		adds	r7, r7, #16
 1256              		.cfi_def_cfa_offset 8
 1257 009a BD46     		mov	sp, r7
 1258              		.cfi_def_cfa_register 13
 1259              		@ sp needed
 1260 009c 80BD     		pop	{r7, pc}
 1261              	.L75:
 1262 009e 00BF     		.align	2
 1263              	.L74:
 1264 00a0 00280040 		.word	1073752064
 1265              		.cfi_endproc
 1266              	.LFE134:
 1268              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1269              		.align	1
 1270              		.global	RTC_GetSubSecond
 1271              		.syntax unified
 1272              		.thumb
 1273              		.thumb_func
 1275              	RTC_GetSubSecond:
 1276              	.LFB135:
 905:./Lib/Src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccHYJizt.s 			page 39


 906:./Lib/Src/stm32f4xx_rtc.c **** /**
 907:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Sub seconds value.
 908:./Lib/Src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 909:./Lib/Src/stm32f4xx_rtc.c ****   *         SSR register.
 910:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
 911:./Lib/Src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Sub seconds value.
 912:./Lib/Src/stm32f4xx_rtc.c ****   */
 913:./Lib/Src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 914:./Lib/Src/stm32f4xx_rtc.c **** {
 1277              		.loc 1 914 1
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 8
 1280              		@ frame_needed = 1, uses_anonymous_args = 0
 1281              		@ link register save eliminated.
 1282 0000 80B4     		push	{r7}
 1283              		.cfi_def_cfa_offset 4
 1284              		.cfi_offset 7, -4
 1285 0002 83B0     		sub	sp, sp, #12
 1286              		.cfi_def_cfa_offset 16
 1287 0004 00AF     		add	r7, sp, #0
 1288              		.cfi_def_cfa_register 7
 915:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1289              		.loc 1 915 12
 1290 0006 0023     		movs	r3, #0
 1291 0008 7B60     		str	r3, [r7, #4]
 916:./Lib/Src/stm32f4xx_rtc.c ****   
 917:./Lib/Src/stm32f4xx_rtc.c ****   /* Get sub seconds values from the correspondent registers*/
 918:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1292              		.loc 1 918 26
 1293 000a 064B     		ldr	r3, .L78
 1294              		.loc 1 918 10
 1295 000c 9B6A     		ldr	r3, [r3, #40]
 1296 000e 7B60     		str	r3, [r7, #4]
 919:./Lib/Src/stm32f4xx_rtc.c ****   
 920:./Lib/Src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 921:./Lib/Src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1297              		.loc 1 921 14
 1298 0010 044B     		ldr	r3, .L78
 1299              		.loc 1 921 3
 1300 0012 5B68     		ldr	r3, [r3, #4]
 922:./Lib/Src/stm32f4xx_rtc.c ****   
 923:./Lib/Src/stm32f4xx_rtc.c ****   return (tmpreg);
 1301              		.loc 1 923 10
 1302 0014 7B68     		ldr	r3, [r7, #4]
 924:./Lib/Src/stm32f4xx_rtc.c **** }
 1303              		.loc 1 924 1
 1304 0016 1846     		mov	r0, r3
 1305 0018 0C37     		adds	r7, r7, #12
 1306              		.cfi_def_cfa_offset 4
 1307 001a BD46     		mov	sp, r7
 1308              		.cfi_def_cfa_register 13
 1309              		@ sp needed
 1310 001c 5DF8047B 		ldr	r7, [sp], #4
 1311              		.cfi_restore 7
 1312              		.cfi_def_cfa_offset 0
 1313 0020 7047     		bx	lr
 1314              	.L79:
ARM GAS  /tmp/ccHYJizt.s 			page 40


 1315 0022 00BF     		.align	2
 1316              	.L78:
 1317 0024 00280040 		.word	1073752064
 1318              		.cfi_endproc
 1319              	.LFE135:
 1321              		.section	.text.RTC_SetDate,"ax",%progbits
 1322              		.align	1
 1323              		.global	RTC_SetDate
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1328              	RTC_SetDate:
 1329              	.LFB136:
 925:./Lib/Src/stm32f4xx_rtc.c **** 
 926:./Lib/Src/stm32f4xx_rtc.c **** /**
 927:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 928:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 929:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 930:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 931:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 932:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 933:./Lib/Src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 934:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 935:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 936:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 937:./Lib/Src/stm32f4xx_rtc.c ****   */
 938:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 939:./Lib/Src/stm32f4xx_rtc.c **** {
 1330              		.loc 1 939 1
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 16
 1333              		@ frame_needed = 1, uses_anonymous_args = 0
 1334 0000 90B5     		push	{r4, r7, lr}
 1335              		.cfi_def_cfa_offset 12
 1336              		.cfi_offset 4, -12
 1337              		.cfi_offset 7, -8
 1338              		.cfi_offset 14, -4
 1339 0002 85B0     		sub	sp, sp, #20
 1340              		.cfi_def_cfa_offset 32
 1341 0004 00AF     		add	r7, sp, #0
 1342              		.cfi_def_cfa_register 7
 1343 0006 7860     		str	r0, [r7, #4]
 1344 0008 3960     		str	r1, [r7]
 940:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1345              		.loc 1 940 12
 1346 000a 0023     		movs	r3, #0
 1347 000c FB60     		str	r3, [r7, #12]
 941:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1348              		.loc 1 941 15
 1349 000e 0023     		movs	r3, #0
 1350 0010 FB72     		strb	r3, [r7, #11]
 942:./Lib/Src/stm32f4xx_rtc.c ****   
 943:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
 944:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 945:./Lib/Src/stm32f4xx_rtc.c **** 
 946:./Lib/Src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1351              		.loc 1 946 6
ARM GAS  /tmp/ccHYJizt.s 			page 41


 1352 0012 7B68     		ldr	r3, [r7, #4]
 1353 0014 002B     		cmp	r3, #0
 1354 0016 0ED1     		bne	.L81
 1355              		.loc 1 946 57 discriminator 1
 1356 0018 3B68     		ldr	r3, [r7]
 1357 001a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1358              		.loc 1 946 69 discriminator 1
 1359 001c 03F01003 		and	r3, r3, #16
 1360              		.loc 1 946 38 discriminator 1
 1361 0020 002B     		cmp	r3, #0
 1362 0022 08D0     		beq	.L81
 947:./Lib/Src/stm32f4xx_rtc.c ****   {
 948:./Lib/Src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1363              		.loc 1 948 48
 1364 0024 3B68     		ldr	r3, [r7]
 1365 0026 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1366              		.loc 1 948 60
 1367 0028 23F01003 		bic	r3, r3, #16
 1368 002c DBB2     		uxtb	r3, r3
 1369              		.loc 1 948 81
 1370 002e 0A33     		adds	r3, r3, #10
 1371 0030 DAB2     		uxtb	r2, r3
 1372              		.loc 1 948 31
 1373 0032 3B68     		ldr	r3, [r7]
 1374 0034 5A70     		strb	r2, [r3, #1]
 1375              	.L81:
 949:./Lib/Src/stm32f4xx_rtc.c ****   }  
 950:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1376              		.loc 1 950 6
 1377 0036 7B68     		ldr	r3, [r7, #4]
 1378 0038 002B     		cmp	r3, #0
 1379 003a 0DD0     		beq	.L82
 951:./Lib/Src/stm32f4xx_rtc.c ****   {
 952:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 953:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 954:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 955:./Lib/Src/stm32f4xx_rtc.c ****   }
 956:./Lib/Src/stm32f4xx_rtc.c ****   else
 957:./Lib/Src/stm32f4xx_rtc.c ****   {
 958:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 959:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1380              		.loc 1 959 14
 1381 003c 3B68     		ldr	r3, [r7]
 1382 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1383 0040 1846     		mov	r0, r3
 1384 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1385 0046 0346     		mov	r3, r0
 1386              		.loc 1 959 12
 1387 0048 FB60     		str	r3, [r7, #12]
 960:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 961:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1388              		.loc 1 961 14
 1389 004a 3B68     		ldr	r3, [r7]
 1390 004c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1391 004e 1846     		mov	r0, r3
 1392 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1393 0054 0346     		mov	r3, r0
ARM GAS  /tmp/ccHYJizt.s 			page 42


 1394              		.loc 1 961 12
 1395 0056 FB60     		str	r3, [r7, #12]
 1396              	.L82:
 962:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 963:./Lib/Src/stm32f4xx_rtc.c ****   }
 964:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 965:./Lib/Src/stm32f4xx_rtc.c **** 
 966:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 967:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1397              		.loc 1 967 6
 1398 0058 7B68     		ldr	r3, [r7, #4]
 1399 005a 002B     		cmp	r3, #0
 1400 005c 0FD0     		beq	.L83
 968:./Lib/Src/stm32f4xx_rtc.c ****   {
 969:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1401              		.loc 1 969 41
 1402 005e 3B68     		ldr	r3, [r7]
 1403 0060 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1404              		.loc 1 969 53
 1405 0062 1A04     		lsls	r2, r3, #16
 970:./Lib/Src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1406              		.loc 1 970 41
 1407 0064 3B68     		ldr	r3, [r7]
 1408 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1409              		.loc 1 970 54
 1410 0068 1B02     		lsls	r3, r3, #8
 969:./Lib/Src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1411              		.loc 1 969 60
 1412 006a 1343     		orrs	r3, r3, r2
 971:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1413              		.loc 1 971 40
 1414 006c 3A68     		ldr	r2, [r7]
 1415 006e 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 970:./Lib/Src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1416              		.loc 1 970 60
 1417 0070 1A43     		orrs	r2, r2, r3
 972:./Lib/Src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1418              		.loc 1 972 41
 1419 0072 3B68     		ldr	r3, [r7]
 1420 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1421              		.loc 1 972 56
 1422 0076 5B03     		lsls	r3, r3, #13
 969:./Lib/Src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1423              		.loc 1 969 12
 1424 0078 1343     		orrs	r3, r3, r2
 1425 007a FB60     		str	r3, [r7, #12]
 1426 007c 1BE0     		b	.L84
 1427              	.L83:
 973:./Lib/Src/stm32f4xx_rtc.c ****   }  
 974:./Lib/Src/stm32f4xx_rtc.c ****   else
 975:./Lib/Src/stm32f4xx_rtc.c ****   {
 976:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1428              		.loc 1 976 26
 1429 007e 3B68     		ldr	r3, [r7]
 1430 0080 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1431 0082 1846     		mov	r0, r3
 1432 0084 FFF7FEFF 		bl	RTC_ByteToBcd2
ARM GAS  /tmp/ccHYJizt.s 			page 43


 1433 0088 0346     		mov	r3, r0
 1434              		.loc 1 976 67
 1435 008a 1C04     		lsls	r4, r3, #16
 977:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1436              		.loc 1 977 26
 1437 008c 3B68     		ldr	r3, [r7]
 1438 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1439 0090 1846     		mov	r0, r3
 1440 0092 FFF7FEFF 		bl	RTC_ByteToBcd2
 1441 0096 0346     		mov	r3, r0
 1442              		.loc 1 977 68
 1443 0098 1B02     		lsls	r3, r3, #8
 976:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1444              		.loc 1 976 74
 1445 009a 1C43     		orrs	r4, r4, r3
 978:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1446              		.loc 1 978 26
 1447 009c 3B68     		ldr	r3, [r7]
 1448 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1449 00a0 1846     		mov	r0, r3
 1450 00a2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1451 00a6 0346     		mov	r3, r0
 977:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1452              		.loc 1 977 74
 1453 00a8 44EA0302 		orr	r2, r4, r3
 979:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1454              		.loc 1 979 40
 1455 00ac 3B68     		ldr	r3, [r7]
 1456 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1457              		.loc 1 979 54
 1458 00b0 5B03     		lsls	r3, r3, #13
 976:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1459              		.loc 1 976 12
 1460 00b2 1343     		orrs	r3, r3, r2
 1461 00b4 FB60     		str	r3, [r7, #12]
 1462              	.L84:
 980:./Lib/Src/stm32f4xx_rtc.c ****   }
 981:./Lib/Src/stm32f4xx_rtc.c **** 
 982:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 983:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1463              		.loc 1 983 6
 1464 00b6 194B     		ldr	r3, .L90
 1465              		.loc 1 983 12
 1466 00b8 CA22     		movs	r2, #202
 1467 00ba 5A62     		str	r2, [r3, #36]
 984:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1468              		.loc 1 984 6
 1469 00bc 174B     		ldr	r3, .L90
 1470              		.loc 1 984 12
 1471 00be 5322     		movs	r2, #83
 1472 00c0 5A62     		str	r2, [r3, #36]
 985:./Lib/Src/stm32f4xx_rtc.c **** 
 986:./Lib/Src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 987:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1473              		.loc 1 987 7
 1474 00c2 FFF7FEFF 		bl	RTC_EnterInitMode
 1475 00c6 0346     		mov	r3, r0
ARM GAS  /tmp/ccHYJizt.s 			page 44


 1476              		.loc 1 987 6
 1477 00c8 002B     		cmp	r3, #0
 1478 00ca 02D1     		bne	.L85
 988:./Lib/Src/stm32f4xx_rtc.c ****   {
 989:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 1479              		.loc 1 989 12
 1480 00cc 0023     		movs	r3, #0
 1481 00ce FB72     		strb	r3, [r7, #11]
 1482 00d0 1BE0     		b	.L86
 1483              	.L85:
 990:./Lib/Src/stm32f4xx_rtc.c ****   } 
 991:./Lib/Src/stm32f4xx_rtc.c ****   else
 992:./Lib/Src/stm32f4xx_rtc.c ****   {
 993:./Lib/Src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 994:./Lib/Src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1484              		.loc 1 994 8
 1485 00d2 124A     		ldr	r2, .L90
 1486              		.loc 1 994 15
 1487 00d4 FB68     		ldr	r3, [r7, #12]
 1488 00d6 23F07F43 		bic	r3, r3, #-16777216
 1489 00da 23F0C003 		bic	r3, r3, #192
 1490              		.loc 1 994 13
 1491 00de 5360     		str	r3, [r2, #4]
 995:./Lib/Src/stm32f4xx_rtc.c **** 
 996:./Lib/Src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 997:./Lib/Src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1492              		.loc 1 997 5
 1493 00e0 FFF7FEFF 		bl	RTC_ExitInitMode
 998:./Lib/Src/stm32f4xx_rtc.c **** 
 999:./Lib/Src/stm32f4xx_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
1000:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 1494              		.loc 1 1000 13
 1495 00e4 0D4B     		ldr	r3, .L90
 1496 00e6 9B68     		ldr	r3, [r3, #8]
 1497              		.loc 1 1000 18
 1498 00e8 03F02003 		and	r3, r3, #32
 1499              		.loc 1 1000 8
 1500 00ec 002B     		cmp	r3, #0
 1501 00ee 0AD1     		bne	.L87
1001:./Lib/Src/stm32f4xx_rtc.c ****     {
1002:./Lib/Src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1502              		.loc 1 1002 8
 1503 00f0 FFF7FEFF 		bl	RTC_WaitForSynchro
 1504 00f4 0346     		mov	r3, r0
 1505              		.loc 1 1002 7
 1506 00f6 002B     		cmp	r3, #0
 1507 00f8 02D1     		bne	.L88
1003:./Lib/Src/stm32f4xx_rtc.c ****     {
1004:./Lib/Src/stm32f4xx_rtc.c ****       status = ERROR;
 1508              		.loc 1 1004 14
 1509 00fa 0023     		movs	r3, #0
 1510 00fc FB72     		strb	r3, [r7, #11]
 1511 00fe 04E0     		b	.L86
 1512              	.L88:
1005:./Lib/Src/stm32f4xx_rtc.c ****     }
1006:./Lib/Src/stm32f4xx_rtc.c ****     else
1007:./Lib/Src/stm32f4xx_rtc.c ****     {
ARM GAS  /tmp/ccHYJizt.s 			page 45


1008:./Lib/Src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1513              		.loc 1 1008 14
 1514 0100 0123     		movs	r3, #1
 1515 0102 FB72     		strb	r3, [r7, #11]
 1516 0104 01E0     		b	.L86
 1517              	.L87:
1009:./Lib/Src/stm32f4xx_rtc.c ****     }
1010:./Lib/Src/stm32f4xx_rtc.c ****   }
1011:./Lib/Src/stm32f4xx_rtc.c ****     else
1012:./Lib/Src/stm32f4xx_rtc.c ****     {
1013:./Lib/Src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1518              		.loc 1 1013 14
 1519 0106 0123     		movs	r3, #1
 1520 0108 FB72     		strb	r3, [r7, #11]
 1521              	.L86:
1014:./Lib/Src/stm32f4xx_rtc.c ****     }
1015:./Lib/Src/stm32f4xx_rtc.c ****   }
1016:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1017:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1522              		.loc 1 1017 6
 1523 010a 044B     		ldr	r3, .L90
 1524              		.loc 1 1017 12
 1525 010c FF22     		movs	r2, #255
 1526 010e 5A62     		str	r2, [r3, #36]
1018:./Lib/Src/stm32f4xx_rtc.c ****   
1019:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 1527              		.loc 1 1019 10
 1528 0110 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1020:./Lib/Src/stm32f4xx_rtc.c **** }
 1529              		.loc 1 1020 1
 1530 0112 1846     		mov	r0, r3
 1531 0114 1437     		adds	r7, r7, #20
 1532              		.cfi_def_cfa_offset 12
 1533 0116 BD46     		mov	sp, r7
 1534              		.cfi_def_cfa_register 13
 1535              		@ sp needed
 1536 0118 90BD     		pop	{r4, r7, pc}
 1537              	.L91:
 1538 011a 00BF     		.align	2
 1539              	.L90:
 1540 011c 00280040 		.word	1073752064
 1541              		.cfi_endproc
 1542              	.LFE136:
 1544              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1545              		.align	1
 1546              		.global	RTC_DateStructInit
 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1551              	RTC_DateStructInit:
 1552              	.LFB137:
1021:./Lib/Src/stm32f4xx_rtc.c **** 
1022:./Lib/Src/stm32f4xx_rtc.c **** /**
1023:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1024:./Lib/Src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1025:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1026:./Lib/Src/stm32f4xx_rtc.c ****   *         initialized.
ARM GAS  /tmp/ccHYJizt.s 			page 46


1027:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1028:./Lib/Src/stm32f4xx_rtc.c ****   */
1029:./Lib/Src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1030:./Lib/Src/stm32f4xx_rtc.c **** {
 1553              		.loc 1 1030 1
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 8
 1556              		@ frame_needed = 1, uses_anonymous_args = 0
 1557              		@ link register save eliminated.
 1558 0000 80B4     		push	{r7}
 1559              		.cfi_def_cfa_offset 4
 1560              		.cfi_offset 7, -4
 1561 0002 83B0     		sub	sp, sp, #12
 1562              		.cfi_def_cfa_offset 16
 1563 0004 00AF     		add	r7, sp, #0
 1564              		.cfi_def_cfa_register 7
 1565 0006 7860     		str	r0, [r7, #4]
1031:./Lib/Src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1032:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1566              		.loc 1 1032 31
 1567 0008 7B68     		ldr	r3, [r7, #4]
 1568 000a 0122     		movs	r2, #1
 1569 000c 1A70     		strb	r2, [r3]
1033:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1570              		.loc 1 1033 28
 1571 000e 7B68     		ldr	r3, [r7, #4]
 1572 0010 0122     		movs	r2, #1
 1573 0012 9A70     		strb	r2, [r3, #2]
1034:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1574              		.loc 1 1034 29
 1575 0014 7B68     		ldr	r3, [r7, #4]
 1576 0016 0122     		movs	r2, #1
 1577 0018 5A70     		strb	r2, [r3, #1]
1035:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1578              		.loc 1 1035 28
 1579 001a 7B68     		ldr	r3, [r7, #4]
 1580 001c 0022     		movs	r2, #0
 1581 001e DA70     		strb	r2, [r3, #3]
1036:./Lib/Src/stm32f4xx_rtc.c **** }
 1582              		.loc 1 1036 1
 1583 0020 00BF     		nop
 1584 0022 0C37     		adds	r7, r7, #12
 1585              		.cfi_def_cfa_offset 4
 1586 0024 BD46     		mov	sp, r7
 1587              		.cfi_def_cfa_register 13
 1588              		@ sp needed
 1589 0026 5DF8047B 		ldr	r7, [sp], #4
 1590              		.cfi_restore 7
 1591              		.cfi_def_cfa_offset 0
 1592 002a 7047     		bx	lr
 1593              		.cfi_endproc
 1594              	.LFE137:
 1596              		.section	.text.RTC_GetDate,"ax",%progbits
 1597              		.align	1
 1598              		.global	RTC_GetDate
 1599              		.syntax unified
 1600              		.thumb
ARM GAS  /tmp/ccHYJizt.s 			page 47


 1601              		.thumb_func
 1603              	RTC_GetDate:
 1604              	.LFB138:
1037:./Lib/Src/stm32f4xx_rtc.c **** 
1038:./Lib/Src/stm32f4xx_rtc.c **** /**
1039:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1040:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1041:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1042:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1043:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1044:./Lib/Src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1045:./Lib/Src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1046:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1047:./Lib/Src/stm32f4xx_rtc.c ****   */
1048:./Lib/Src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1049:./Lib/Src/stm32f4xx_rtc.c **** {
 1605              		.loc 1 1049 1
 1606              		.cfi_startproc
 1607              		@ args = 0, pretend = 0, frame = 16
 1608              		@ frame_needed = 1, uses_anonymous_args = 0
 1609 0000 80B5     		push	{r7, lr}
 1610              		.cfi_def_cfa_offset 8
 1611              		.cfi_offset 7, -8
 1612              		.cfi_offset 14, -4
 1613 0002 84B0     		sub	sp, sp, #16
 1614              		.cfi_def_cfa_offset 24
 1615 0004 00AF     		add	r7, sp, #0
 1616              		.cfi_def_cfa_register 7
 1617 0006 7860     		str	r0, [r7, #4]
 1618 0008 3960     		str	r1, [r7]
1050:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1619              		.loc 1 1050 12
 1620 000a 0023     		movs	r3, #0
 1621 000c FB60     		str	r3, [r7, #12]
1051:./Lib/Src/stm32f4xx_rtc.c **** 
1052:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1053:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1054:./Lib/Src/stm32f4xx_rtc.c ****   
1055:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1056:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1622              		.loc 1 1056 26
 1623 000e 224B     		ldr	r3, .L96
 1624 0010 5B68     		ldr	r3, [r3, #4]
 1625              		.loc 1 1056 10
 1626 0012 23F07F43 		bic	r3, r3, #-16777216
 1627 0016 23F0C003 		bic	r3, r3, #192
 1628 001a FB60     		str	r3, [r7, #12]
1057:./Lib/Src/stm32f4xx_rtc.c **** 
1058:./Lib/Src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1059:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1629              		.loc 1 1059 75
 1630 001c FB68     		ldr	r3, [r7, #12]
 1631 001e 1B0C     		lsrs	r3, r3, #16
 1632              		.loc 1 1059 30
 1633 0020 DAB2     		uxtb	r2, r3
 1634              		.loc 1 1059 28
 1635 0022 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccHYJizt.s 			page 48


 1636 0024 DA70     		strb	r2, [r3, #3]
1060:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1637              		.loc 1 1060 76
 1638 0026 FB68     		ldr	r3, [r7, #12]
 1639 0028 1B0A     		lsrs	r3, r3, #8
 1640              		.loc 1 1060 31
 1641 002a DBB2     		uxtb	r3, r3
 1642 002c 03F01F03 		and	r3, r3, #31
 1643 0030 DAB2     		uxtb	r2, r3
 1644              		.loc 1 1060 29
 1645 0032 3B68     		ldr	r3, [r7]
 1646 0034 5A70     		strb	r2, [r3, #1]
1061:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1647              		.loc 1 1061 30
 1648 0036 FB68     		ldr	r3, [r7, #12]
 1649 0038 DBB2     		uxtb	r3, r3
 1650 003a 03F03F03 		and	r3, r3, #63
 1651 003e DAB2     		uxtb	r2, r3
 1652              		.loc 1 1061 28
 1653 0040 3B68     		ldr	r3, [r7]
 1654 0042 9A70     		strb	r2, [r3, #2]
1062:./Lib/Src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1655              		.loc 1 1062 67
 1656 0044 FB68     		ldr	r3, [r7, #12]
 1657 0046 5B0B     		lsrs	r3, r3, #13
 1658              		.loc 1 1062 33
 1659 0048 DBB2     		uxtb	r3, r3
 1660 004a 03F00703 		and	r3, r3, #7
 1661 004e DAB2     		uxtb	r2, r3
 1662              		.loc 1 1062 31
 1663 0050 3B68     		ldr	r3, [r7]
 1664 0052 1A70     		strb	r2, [r3]
1063:./Lib/Src/stm32f4xx_rtc.c **** 
1064:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1065:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1665              		.loc 1 1065 6
 1666 0054 7B68     		ldr	r3, [r7, #4]
 1667 0056 002B     		cmp	r3, #0
 1668 0058 1AD1     		bne	.L95
1066:./Lib/Src/stm32f4xx_rtc.c ****   {
1067:./Lib/Src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1068:./Lib/Src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1669              		.loc 1 1068 41
 1670 005a 3B68     		ldr	r3, [r7]
 1671 005c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1672 005e 1846     		mov	r0, r3
 1673 0060 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1674 0064 0346     		mov	r3, r0
 1675 0066 1A46     		mov	r2, r3
 1676              		.loc 1 1068 30
 1677 0068 3B68     		ldr	r3, [r7]
 1678 006a DA70     		strb	r2, [r3, #3]
1069:./Lib/Src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1679              		.loc 1 1069 42
 1680 006c 3B68     		ldr	r3, [r7]
 1681 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1682 0070 1846     		mov	r0, r3
ARM GAS  /tmp/ccHYJizt.s 			page 49


 1683 0072 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1684 0076 0346     		mov	r3, r0
 1685 0078 1A46     		mov	r2, r3
 1686              		.loc 1 1069 31
 1687 007a 3B68     		ldr	r3, [r7]
 1688 007c 5A70     		strb	r2, [r3, #1]
1070:./Lib/Src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1689              		.loc 1 1070 41
 1690 007e 3B68     		ldr	r3, [r7]
 1691 0080 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1692 0082 1846     		mov	r0, r3
 1693 0084 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1694 0088 0346     		mov	r3, r0
 1695 008a 1A46     		mov	r2, r3
 1696              		.loc 1 1070 30
 1697 008c 3B68     		ldr	r3, [r7]
 1698 008e 9A70     		strb	r2, [r3, #2]
 1699              	.L95:
1071:./Lib/Src/stm32f4xx_rtc.c ****   }
1072:./Lib/Src/stm32f4xx_rtc.c **** }
 1700              		.loc 1 1072 1
 1701 0090 00BF     		nop
 1702 0092 1037     		adds	r7, r7, #16
 1703              		.cfi_def_cfa_offset 8
 1704 0094 BD46     		mov	sp, r7
 1705              		.cfi_def_cfa_register 13
 1706              		@ sp needed
 1707 0096 80BD     		pop	{r7, pc}
 1708              	.L97:
 1709              		.align	2
 1710              	.L96:
 1711 0098 00280040 		.word	1073752064
 1712              		.cfi_endproc
 1713              	.LFE138:
 1715              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1716              		.align	1
 1717              		.global	RTC_SetAlarm
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1722              	RTC_SetAlarm:
 1723              	.LFB139:
1073:./Lib/Src/stm32f4xx_rtc.c **** 
1074:./Lib/Src/stm32f4xx_rtc.c **** /**
1075:./Lib/Src/stm32f4xx_rtc.c ****   * @}
1076:./Lib/Src/stm32f4xx_rtc.c ****   */
1077:./Lib/Src/stm32f4xx_rtc.c **** 
1078:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1079:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1080:./Lib/Src/stm32f4xx_rtc.c ****  *
1081:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
1082:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
1083:./Lib/Src/stm32f4xx_rtc.c ****          ##### Alarms A and B configuration functions #####
1084:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
1085:./Lib/Src/stm32f4xx_rtc.c ****  
1086:./Lib/Src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC Alarms.
1087:./Lib/Src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccHYJizt.s 			page 50


1088:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
1089:./Lib/Src/stm32f4xx_rtc.c ****   * @{
1090:./Lib/Src/stm32f4xx_rtc.c ****   */
1091:./Lib/Src/stm32f4xx_rtc.c **** 
1092:./Lib/Src/stm32f4xx_rtc.c **** /**
1093:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1094:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1095:./Lib/Src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1096:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1097:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1098:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1099:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1100:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1101:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1102:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1103:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1104:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1105:./Lib/Src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1106:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1107:./Lib/Src/stm32f4xx_rtc.c ****   */
1108:./Lib/Src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1109:./Lib/Src/stm32f4xx_rtc.c **** {
 1724              		.loc 1 1109 1
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 24
 1727              		@ frame_needed = 1, uses_anonymous_args = 0
 1728 0000 90B5     		push	{r4, r7, lr}
 1729              		.cfi_def_cfa_offset 12
 1730              		.cfi_offset 4, -12
 1731              		.cfi_offset 7, -8
 1732              		.cfi_offset 14, -4
 1733 0002 87B0     		sub	sp, sp, #28
 1734              		.cfi_def_cfa_offset 40
 1735 0004 00AF     		add	r7, sp, #0
 1736              		.cfi_def_cfa_register 7
 1737 0006 F860     		str	r0, [r7, #12]
 1738 0008 B960     		str	r1, [r7, #8]
 1739 000a 7A60     		str	r2, [r7, #4]
1110:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1740              		.loc 1 1110 12
 1741 000c 0023     		movs	r3, #0
 1742 000e 7B61     		str	r3, [r7, #20]
1111:./Lib/Src/stm32f4xx_rtc.c ****   
1112:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1113:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1114:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1115:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1116:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1117:./Lib/Src/stm32f4xx_rtc.c **** 
1118:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1743              		.loc 1 1118 6
 1744 0010 FB68     		ldr	r3, [r7, #12]
 1745 0012 002B     		cmp	r3, #0
 1746 0014 09D1     		bne	.L99
1119:./Lib/Src/stm32f4xx_rtc.c ****   {
1120:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1747              		.loc 1 1120 13
ARM GAS  /tmp/ccHYJizt.s 			page 51


 1748 0016 474B     		ldr	r3, .L109
 1749 0018 9B68     		ldr	r3, [r3, #8]
 1750              		.loc 1 1120 18
 1751 001a 03F04003 		and	r3, r3, #64
 1752              		.loc 1 1120 8
 1753 001e 002B     		cmp	r3, #0
 1754 0020 27D1     		bne	.L101
1121:./Lib/Src/stm32f4xx_rtc.c ****     {
1122:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1123:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1124:./Lib/Src/stm32f4xx_rtc.c ****     } 
1125:./Lib/Src/stm32f4xx_rtc.c ****     else
1126:./Lib/Src/stm32f4xx_rtc.c ****     {
1127:./Lib/Src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1755              		.loc 1 1127 46
 1756 0022 7B68     		ldr	r3, [r7, #4]
 1757 0024 0022     		movs	r2, #0
 1758 0026 DA70     		strb	r2, [r3, #3]
 1759 0028 23E0     		b	.L101
 1760              	.L99:
1128:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1129:./Lib/Src/stm32f4xx_rtc.c ****     }
1130:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1131:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1132:./Lib/Src/stm32f4xx_rtc.c ****     
1133:./Lib/Src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1134:./Lib/Src/stm32f4xx_rtc.c ****     {
1135:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1136:./Lib/Src/stm32f4xx_rtc.c ****     }
1137:./Lib/Src/stm32f4xx_rtc.c ****     else
1138:./Lib/Src/stm32f4xx_rtc.c ****     {
1139:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1140:./Lib/Src/stm32f4xx_rtc.c ****     }
1141:./Lib/Src/stm32f4xx_rtc.c ****   }
1142:./Lib/Src/stm32f4xx_rtc.c ****   else
1143:./Lib/Src/stm32f4xx_rtc.c ****   {
1144:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1761              		.loc 1 1144 13
 1762 002a 424B     		ldr	r3, .L109
 1763 002c 9B68     		ldr	r3, [r3, #8]
 1764              		.loc 1 1144 18
 1765 002e 03F04003 		and	r3, r3, #64
 1766              		.loc 1 1144 8
 1767 0032 002B     		cmp	r3, #0
 1768 0034 07D0     		beq	.L102
1145:./Lib/Src/stm32f4xx_rtc.c ****     {
1146:./Lib/Src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1769              		.loc 1 1146 16
 1770 0036 7B68     		ldr	r3, [r7, #4]
 1771 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1772 003a 1846     		mov	r0, r3
 1773 003c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1774 0040 0346     		mov	r3, r0
 1775              		.loc 1 1146 14
 1776 0042 7B61     		str	r3, [r7, #20]
 1777 0044 02E0     		b	.L103
 1778              	.L102:
ARM GAS  /tmp/ccHYJizt.s 			page 52


1147:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1148:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1149:./Lib/Src/stm32f4xx_rtc.c ****     } 
1150:./Lib/Src/stm32f4xx_rtc.c ****     else
1151:./Lib/Src/stm32f4xx_rtc.c ****     {
1152:./Lib/Src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1779              		.loc 1 1152 46
 1780 0046 7B68     		ldr	r3, [r7, #4]
 1781 0048 0022     		movs	r2, #0
 1782 004a DA70     		strb	r2, [r3, #3]
 1783              	.L103:
1153:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1154:./Lib/Src/stm32f4xx_rtc.c ****     }
1155:./Lib/Src/stm32f4xx_rtc.c ****     
1156:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1157:./Lib/Src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1158:./Lib/Src/stm32f4xx_rtc.c ****     
1159:./Lib/Src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1784              		.loc 1 1159 23
 1785 004c 7B68     		ldr	r3, [r7, #4]
 1786 004e 9B68     		ldr	r3, [r3, #8]
 1787              		.loc 1 1159 7
 1788 0050 002B     		cmp	r3, #0
 1789 0052 07D1     		bne	.L104
1160:./Lib/Src/stm32f4xx_rtc.c ****     {
1161:./Lib/Src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1790              		.loc 1 1161 16
 1791 0054 7B68     		ldr	r3, [r7, #4]
 1792 0056 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1793 0058 1846     		mov	r0, r3
 1794 005a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1795 005e 0346     		mov	r3, r0
 1796              		.loc 1 1161 14
 1797 0060 7B61     		str	r3, [r7, #20]
 1798 0062 06E0     		b	.L101
 1799              	.L104:
1162:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1163:./Lib/Src/stm32f4xx_rtc.c ****     }
1164:./Lib/Src/stm32f4xx_rtc.c ****     else
1165:./Lib/Src/stm32f4xx_rtc.c ****     {
1166:./Lib/Src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1800              		.loc 1 1166 16
 1801 0064 7B68     		ldr	r3, [r7, #4]
 1802 0066 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1803 0068 1846     		mov	r0, r3
 1804 006a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1805 006e 0346     		mov	r3, r0
 1806              		.loc 1 1166 14
 1807 0070 7B61     		str	r3, [r7, #20]
 1808              	.L101:
1167:./Lib/Src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1168:./Lib/Src/stm32f4xx_rtc.c ****     }    
1169:./Lib/Src/stm32f4xx_rtc.c ****   }
1170:./Lib/Src/stm32f4xx_rtc.c **** 
1171:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1172:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1809              		.loc 1 1172 6
ARM GAS  /tmp/ccHYJizt.s 			page 53


 1810 0072 FB68     		ldr	r3, [r7, #12]
 1811 0074 002B     		cmp	r3, #0
 1812 0076 19D0     		beq	.L105
1173:./Lib/Src/stm32f4xx_rtc.c ****   {
1174:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1813              		.loc 1 1174 57
 1814 0078 7B68     		ldr	r3, [r7, #4]
 1815 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1816              		.loc 1 1174 69
 1817 007c 1A04     		lsls	r2, r3, #16
1175:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1818              		.loc 1 1175 57
 1819 007e 7B68     		ldr	r3, [r7, #4]
 1820 0080 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1821              		.loc 1 1175 71
 1822 0082 1B02     		lsls	r3, r3, #8
1174:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1823              		.loc 1 1174 76
 1824 0084 1343     		orrs	r3, r3, r2
1176:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1825              		.loc 1 1176 56
 1826 0086 7A68     		ldr	r2, [r7, #4]
 1827 0088 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
1175:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1828              		.loc 1 1175 77
 1829 008a 1A43     		orrs	r2, r2, r3
1177:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1830              		.loc 1 1177 57
 1831 008c 7B68     		ldr	r3, [r7, #4]
 1832 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1833              		.loc 1 1177 67
 1834 0090 1B04     		lsls	r3, r3, #16
1176:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1835              		.loc 1 1176 70
 1836 0092 1A43     		orrs	r2, r2, r3
1178:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1837              		.loc 1 1178 42
 1838 0094 7B68     		ldr	r3, [r7, #4]
 1839 0096 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1840              		.loc 1 1178 66
 1841 0098 1B06     		lsls	r3, r3, #24
1177:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1842              		.loc 1 1177 74
 1843 009a 1A43     		orrs	r2, r2, r3
1179:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1844              		.loc 1 1179 41
 1845 009c 7B68     		ldr	r3, [r7, #4]
 1846 009e 9B68     		ldr	r3, [r3, #8]
1178:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1847              		.loc 1 1178 73
 1848 00a0 1A43     		orrs	r2, r2, r3
1180:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1849              		.loc 1 1180 41
 1850 00a2 7B68     		ldr	r3, [r7, #4]
 1851 00a4 5B68     		ldr	r3, [r3, #4]
1174:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1852              		.loc 1 1174 12
ARM GAS  /tmp/ccHYJizt.s 			page 54


 1853 00a6 1343     		orrs	r3, r3, r2
 1854 00a8 7B61     		str	r3, [r7, #20]
 1855 00aa 2BE0     		b	.L106
 1856              	.L105:
1181:./Lib/Src/stm32f4xx_rtc.c ****   }  
1182:./Lib/Src/stm32f4xx_rtc.c ****   else
1183:./Lib/Src/stm32f4xx_rtc.c ****   {
1184:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1857              		.loc 1 1184 26
 1858 00ac 7B68     		ldr	r3, [r7, #4]
 1859 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1860 00b0 1846     		mov	r0, r3
 1861 00b2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1862 00b6 0346     		mov	r3, r0
 1863              		.loc 1 1184 83
 1864 00b8 1C04     		lsls	r4, r3, #16
1185:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1865              		.loc 1 1185 26
 1866 00ba 7B68     		ldr	r3, [r7, #4]
 1867 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1868 00be 1846     		mov	r0, r3
 1869 00c0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1870 00c4 0346     		mov	r3, r0
 1871              		.loc 1 1185 85
 1872 00c6 1B02     		lsls	r3, r3, #8
1184:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1873              		.loc 1 1184 90
 1874 00c8 1C43     		orrs	r4, r4, r3
1186:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1875              		.loc 1 1186 26
 1876 00ca 7B68     		ldr	r3, [r7, #4]
 1877 00cc 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1878 00ce 1846     		mov	r0, r3
 1879 00d0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1880 00d4 0346     		mov	r3, r0
1185:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1881              		.loc 1 1185 91
 1882 00d6 44EA0302 		orr	r2, r4, r3
1187:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1883              		.loc 1 1187 57
 1884 00da 7B68     		ldr	r3, [r7, #4]
 1885 00dc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1886              		.loc 1 1187 67
 1887 00de 1B04     		lsls	r3, r3, #16
1186:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1888              		.loc 1 1186 86
 1889 00e0 42EA0304 		orr	r4, r2, r3
1188:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1890              		.loc 1 1188 26
 1891 00e4 7B68     		ldr	r3, [r7, #4]
 1892 00e6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1893 00e8 1846     		mov	r0, r3
 1894 00ea FFF7FEFF 		bl	RTC_ByteToBcd2
 1895 00ee 0346     		mov	r3, r0
 1896              		.loc 1 1188 80
 1897 00f0 1B06     		lsls	r3, r3, #24
1187:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
ARM GAS  /tmp/ccHYJizt.s 			page 55


 1898              		.loc 1 1187 74
 1899 00f2 44EA0302 		orr	r2, r4, r3
1189:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1900              		.loc 1 1189 41
 1901 00f6 7B68     		ldr	r3, [r7, #4]
 1902 00f8 9B68     		ldr	r3, [r3, #8]
1188:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1903              		.loc 1 1188 87
 1904 00fa 1A43     		orrs	r2, r2, r3
1190:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1905              		.loc 1 1190 41
 1906 00fc 7B68     		ldr	r3, [r7, #4]
 1907 00fe 5B68     		ldr	r3, [r3, #4]
1184:./Lib/Src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1908              		.loc 1 1184 12
 1909 0100 1343     		orrs	r3, r3, r2
 1910 0102 7B61     		str	r3, [r7, #20]
 1911              	.L106:
1191:./Lib/Src/stm32f4xx_rtc.c ****   } 
1192:./Lib/Src/stm32f4xx_rtc.c **** 
1193:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1194:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1912              		.loc 1 1194 6
 1913 0104 0B4B     		ldr	r3, .L109
 1914              		.loc 1 1194 12
 1915 0106 CA22     		movs	r2, #202
 1916 0108 5A62     		str	r2, [r3, #36]
1195:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1917              		.loc 1 1195 6
 1918 010a 0A4B     		ldr	r3, .L109
 1919              		.loc 1 1195 12
 1920 010c 5322     		movs	r2, #83
 1921 010e 5A62     		str	r2, [r3, #36]
1196:./Lib/Src/stm32f4xx_rtc.c **** 
1197:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1198:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1922              		.loc 1 1198 6
 1923 0110 BB68     		ldr	r3, [r7, #8]
 1924 0112 B3F5807F 		cmp	r3, #256
 1925 0116 03D1     		bne	.L107
1199:./Lib/Src/stm32f4xx_rtc.c ****   {
1200:./Lib/Src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1926              		.loc 1 1200 8
 1927 0118 064A     		ldr	r2, .L109
 1928              		.loc 1 1200 17
 1929 011a 7B69     		ldr	r3, [r7, #20]
 1930 011c D361     		str	r3, [r2, #28]
 1931 011e 02E0     		b	.L108
 1932              	.L107:
1201:./Lib/Src/stm32f4xx_rtc.c ****   }
1202:./Lib/Src/stm32f4xx_rtc.c ****   else
1203:./Lib/Src/stm32f4xx_rtc.c ****   {
1204:./Lib/Src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1933              		.loc 1 1204 8
 1934 0120 044A     		ldr	r2, .L109
 1935              		.loc 1 1204 17
 1936 0122 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccHYJizt.s 			page 56


 1937 0124 1362     		str	r3, [r2, #32]
 1938              	.L108:
1205:./Lib/Src/stm32f4xx_rtc.c ****   }
1206:./Lib/Src/stm32f4xx_rtc.c **** 
1207:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1208:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1939              		.loc 1 1208 6
 1940 0126 034B     		ldr	r3, .L109
 1941              		.loc 1 1208 12
 1942 0128 FF22     		movs	r2, #255
 1943 012a 5A62     		str	r2, [r3, #36]
1209:./Lib/Src/stm32f4xx_rtc.c **** }
 1944              		.loc 1 1209 1
 1945 012c 00BF     		nop
 1946 012e 1C37     		adds	r7, r7, #28
 1947              		.cfi_def_cfa_offset 12
 1948 0130 BD46     		mov	sp, r7
 1949              		.cfi_def_cfa_register 13
 1950              		@ sp needed
 1951 0132 90BD     		pop	{r4, r7, pc}
 1952              	.L110:
 1953              		.align	2
 1954              	.L109:
 1955 0134 00280040 		.word	1073752064
 1956              		.cfi_endproc
 1957              	.LFE139:
 1959              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1960              		.align	1
 1961              		.global	RTC_AlarmStructInit
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1966              	RTC_AlarmStructInit:
 1967              	.LFB140:
1210:./Lib/Src/stm32f4xx_rtc.c **** 
1211:./Lib/Src/stm32f4xx_rtc.c **** /**
1212:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1213:./Lib/Src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1214:./Lib/Src/stm32f4xx_rtc.c ****   *         all fields are masked).
1215:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1216:./Lib/Src/stm32f4xx_rtc.c ****   *         will be initialized.
1217:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1218:./Lib/Src/stm32f4xx_rtc.c ****   */
1219:./Lib/Src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1220:./Lib/Src/stm32f4xx_rtc.c **** {
 1968              		.loc 1 1220 1
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 8
 1971              		@ frame_needed = 1, uses_anonymous_args = 0
 1972              		@ link register save eliminated.
 1973 0000 80B4     		push	{r7}
 1974              		.cfi_def_cfa_offset 4
 1975              		.cfi_offset 7, -4
 1976 0002 83B0     		sub	sp, sp, #12
 1977              		.cfi_def_cfa_offset 16
 1978 0004 00AF     		add	r7, sp, #0
 1979              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccHYJizt.s 			page 57


 1980 0006 7860     		str	r0, [r7, #4]
1221:./Lib/Src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1222:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1981              		.loc 1 1222 42
 1982 0008 7B68     		ldr	r3, [r7, #4]
 1983 000a 0022     		movs	r2, #0
 1984 000c DA70     		strb	r2, [r3, #3]
1223:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1985              		.loc 1 1223 44
 1986 000e 7B68     		ldr	r3, [r7, #4]
 1987 0010 0022     		movs	r2, #0
 1988 0012 1A70     		strb	r2, [r3]
1224:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1989              		.loc 1 1224 46
 1990 0014 7B68     		ldr	r3, [r7, #4]
 1991 0016 0022     		movs	r2, #0
 1992 0018 5A70     		strb	r2, [r3, #1]
1225:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1993              		.loc 1 1225 46
 1994 001a 7B68     		ldr	r3, [r7, #4]
 1995 001c 0022     		movs	r2, #0
 1996 001e 9A70     		strb	r2, [r3, #2]
1226:./Lib/Src/stm32f4xx_rtc.c **** 
1227:./Lib/Src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1228:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1997              		.loc 1 1228 44
 1998 0020 7B68     		ldr	r3, [r7, #4]
 1999 0022 0022     		movs	r2, #0
 2000 0024 9A60     		str	r2, [r3, #8]
1229:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 2001              		.loc 1 1229 41
 2002 0026 7B68     		ldr	r3, [r7, #4]
 2003 0028 0122     		movs	r2, #1
 2004 002a 1A73     		strb	r2, [r3, #12]
1230:./Lib/Src/stm32f4xx_rtc.c **** 
1231:./Lib/Src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1232:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 2005              		.loc 1 1232 34
 2006 002c 7B68     		ldr	r3, [r7, #4]
 2007 002e 0022     		movs	r2, #0
 2008 0030 5A60     		str	r2, [r3, #4]
1233:./Lib/Src/stm32f4xx_rtc.c **** }
 2009              		.loc 1 1233 1
 2010 0032 00BF     		nop
 2011 0034 0C37     		adds	r7, r7, #12
 2012              		.cfi_def_cfa_offset 4
 2013 0036 BD46     		mov	sp, r7
 2014              		.cfi_def_cfa_register 13
 2015              		@ sp needed
 2016 0038 5DF8047B 		ldr	r7, [sp], #4
 2017              		.cfi_restore 7
 2018              		.cfi_def_cfa_offset 0
 2019 003c 7047     		bx	lr
 2020              		.cfi_endproc
 2021              	.LFE140:
 2023              		.section	.text.RTC_GetAlarm,"ax",%progbits
 2024              		.align	1
ARM GAS  /tmp/ccHYJizt.s 			page 58


 2025              		.global	RTC_GetAlarm
 2026              		.syntax unified
 2027              		.thumb
 2028              		.thumb_func
 2030              	RTC_GetAlarm:
 2031              	.LFB141:
1234:./Lib/Src/stm32f4xx_rtc.c **** 
1235:./Lib/Src/stm32f4xx_rtc.c **** /**
1236:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1237:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1238:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1239:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1240:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1241:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1242:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1243:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1244:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1245:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1246:./Lib/Src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1247:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1248:./Lib/Src/stm32f4xx_rtc.c ****   */
1249:./Lib/Src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1250:./Lib/Src/stm32f4xx_rtc.c **** {
 2032              		.loc 1 1250 1
 2033              		.cfi_startproc
 2034              		@ args = 0, pretend = 0, frame = 24
 2035              		@ frame_needed = 1, uses_anonymous_args = 0
 2036 0000 80B5     		push	{r7, lr}
 2037              		.cfi_def_cfa_offset 8
 2038              		.cfi_offset 7, -8
 2039              		.cfi_offset 14, -4
 2040 0002 86B0     		sub	sp, sp, #24
 2041              		.cfi_def_cfa_offset 32
 2042 0004 00AF     		add	r7, sp, #0
 2043              		.cfi_def_cfa_register 7
 2044 0006 F860     		str	r0, [r7, #12]
 2045 0008 B960     		str	r1, [r7, #8]
 2046 000a 7A60     		str	r2, [r7, #4]
1251:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2047              		.loc 1 1251 12
 2048 000c 0023     		movs	r3, #0
 2049 000e 7B61     		str	r3, [r7, #20]
1252:./Lib/Src/stm32f4xx_rtc.c **** 
1253:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1254:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1255:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1256:./Lib/Src/stm32f4xx_rtc.c **** 
1257:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1258:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2050              		.loc 1 1258 6
 2051 0010 BB68     		ldr	r3, [r7, #8]
 2052 0012 B3F5807F 		cmp	r3, #256
 2053 0016 03D1     		bne	.L113
1259:./Lib/Src/stm32f4xx_rtc.c ****   {
1260:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 2054              		.loc 1 1260 28
 2055 0018 314B     		ldr	r3, .L117
ARM GAS  /tmp/ccHYJizt.s 			page 59


 2056              		.loc 1 1260 12
 2057 001a DB69     		ldr	r3, [r3, #28]
 2058 001c 7B61     		str	r3, [r7, #20]
 2059 001e 02E0     		b	.L114
 2060              	.L113:
1261:./Lib/Src/stm32f4xx_rtc.c ****   }
1262:./Lib/Src/stm32f4xx_rtc.c ****   else
1263:./Lib/Src/stm32f4xx_rtc.c ****   {
1264:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 2061              		.loc 1 1264 28
 2062 0020 2F4B     		ldr	r3, .L117
 2063              		.loc 1 1264 12
 2064 0022 1B6A     		ldr	r3, [r3, #32]
 2065 0024 7B61     		str	r3, [r7, #20]
 2066              	.L114:
1265:./Lib/Src/stm32f4xx_rtc.c ****   }
1266:./Lib/Src/stm32f4xx_rtc.c **** 
1267:./Lib/Src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1268:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 2067              		.loc 1 1268 46
 2068 0026 7B69     		ldr	r3, [r7, #20]
 2069 0028 1B0C     		lsrs	r3, r3, #16
 2070 002a DBB2     		uxtb	r3, r3
 2071 002c 03F03F03 		and	r3, r3, #63
 2072 0030 DAB2     		uxtb	r2, r3
 2073              		.loc 1 1268 44
 2074 0032 7B68     		ldr	r3, [r7, #4]
 2075 0034 1A70     		strb	r2, [r3]
1269:./Lib/Src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1270:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 2076              		.loc 1 1270 48
 2077 0036 7B69     		ldr	r3, [r7, #20]
 2078 0038 1B0A     		lsrs	r3, r3, #8
 2079 003a DBB2     		uxtb	r3, r3
 2080 003c 03F07F03 		and	r3, r3, #127
 2081 0040 DAB2     		uxtb	r2, r3
 2082              		.loc 1 1270 46
 2083 0042 7B68     		ldr	r3, [r7, #4]
 2084 0044 5A70     		strb	r2, [r3, #1]
1271:./Lib/Src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1272:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 2085              		.loc 1 1272 48
 2086 0046 7B69     		ldr	r3, [r7, #20]
 2087 0048 DBB2     		uxtb	r3, r3
 2088 004a 03F07F03 		and	r3, r3, #127
 2089 004e DAB2     		uxtb	r2, r3
 2090              		.loc 1 1272 46
 2091 0050 7B68     		ldr	r3, [r7, #4]
 2092 0052 9A70     		strb	r2, [r3, #2]
1273:./Lib/Src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1274:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 2093              		.loc 1 1274 44
 2094 0054 7B69     		ldr	r3, [r7, #20]
 2095 0056 1B0C     		lsrs	r3, r3, #16
 2096 0058 DBB2     		uxtb	r3, r3
 2097 005a 03F04003 		and	r3, r3, #64
 2098 005e DAB2     		uxtb	r2, r3
ARM GAS  /tmp/ccHYJizt.s 			page 60


 2099              		.loc 1 1274 42
 2100 0060 7B68     		ldr	r3, [r7, #4]
 2101 0062 DA70     		strb	r2, [r3, #3]
1275:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 2102              		.loc 1 1275 43
 2103 0064 7B69     		ldr	r3, [r7, #20]
 2104 0066 1B0E     		lsrs	r3, r3, #24
 2105 0068 DBB2     		uxtb	r3, r3
 2106 006a 03F03F03 		and	r3, r3, #63
 2107 006e DAB2     		uxtb	r2, r3
 2108              		.loc 1 1275 41
 2109 0070 7B68     		ldr	r3, [r7, #4]
 2110 0072 1A73     		strb	r2, [r3, #12]
1276:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2111              		.loc 1 1276 46
 2112 0074 7B69     		ldr	r3, [r7, #20]
 2113 0076 03F08042 		and	r2, r3, #1073741824
 2114              		.loc 1 1276 44
 2115 007a 7B68     		ldr	r3, [r7, #4]
 2116 007c 9A60     		str	r2, [r3, #8]
1277:./Lib/Src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 2117              		.loc 1 1277 36
 2118 007e 7B69     		ldr	r3, [r7, #20]
 2119 0080 03F08032 		and	r2, r3, #-2139062144
 2120              		.loc 1 1277 34
 2121 0084 7B68     		ldr	r3, [r7, #4]
 2122 0086 5A60     		str	r2, [r3, #4]
1278:./Lib/Src/stm32f4xx_rtc.c **** 
1279:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 2123              		.loc 1 1279 6
 2124 0088 FB68     		ldr	r3, [r7, #12]
 2125 008a 002B     		cmp	r3, #0
 2126 008c 23D1     		bne	.L116
1280:./Lib/Src/stm32f4xx_rtc.c ****   {
1281:./Lib/Src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2127              		.loc 1 1281 48
 2128 008e 7B68     		ldr	r3, [r7, #4]
 2129 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2130 0092 1846     		mov	r0, r3
 2131 0094 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2132 0098 0346     		mov	r3, r0
 2133 009a 1A46     		mov	r2, r3
 2134              		.loc 1 1281 46
 2135 009c 7B68     		ldr	r3, [r7, #4]
 2136 009e 1A70     		strb	r2, [r3]
1282:./Lib/Src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1283:./Lib/Src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2137              		.loc 1 1283 50
 2138 00a0 7B68     		ldr	r3, [r7, #4]
 2139 00a2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2140 00a4 1846     		mov	r0, r3
 2141 00a6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2142 00aa 0346     		mov	r3, r0
 2143 00ac 1A46     		mov	r2, r3
 2144              		.loc 1 1283 48
 2145 00ae 7B68     		ldr	r3, [r7, #4]
 2146 00b0 5A70     		strb	r2, [r3, #1]
ARM GAS  /tmp/ccHYJizt.s 			page 61


1284:./Lib/Src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1285:./Lib/Src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 2147              		.loc 1 1285 50
 2148 00b2 7B68     		ldr	r3, [r7, #4]
 2149 00b4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2150 00b6 1846     		mov	r0, r3
 2151 00b8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2152 00bc 0346     		mov	r3, r0
 2153 00be 1A46     		mov	r2, r3
 2154              		.loc 1 1285 48
 2155 00c0 7B68     		ldr	r3, [r7, #4]
 2156 00c2 9A70     		strb	r2, [r3, #2]
1286:./Lib/Src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1287:./Lib/Src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 2157              		.loc 1 1287 45
 2158 00c4 7B68     		ldr	r3, [r7, #4]
 2159 00c6 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2160 00c8 1846     		mov	r0, r3
 2161 00ca FFF7FEFF 		bl	RTC_Bcd2ToByte
 2162 00ce 0346     		mov	r3, r0
 2163 00d0 1A46     		mov	r2, r3
 2164              		.loc 1 1287 43
 2165 00d2 7B68     		ldr	r3, [r7, #4]
 2166 00d4 1A73     		strb	r2, [r3, #12]
 2167              	.L116:
1288:./Lib/Src/stm32f4xx_rtc.c ****   }  
1289:./Lib/Src/stm32f4xx_rtc.c **** }
 2168              		.loc 1 1289 1
 2169 00d6 00BF     		nop
 2170 00d8 1837     		adds	r7, r7, #24
 2171              		.cfi_def_cfa_offset 8
 2172 00da BD46     		mov	sp, r7
 2173              		.cfi_def_cfa_register 13
 2174              		@ sp needed
 2175 00dc 80BD     		pop	{r7, pc}
 2176              	.L118:
 2177 00de 00BF     		.align	2
 2178              	.L117:
 2179 00e0 00280040 		.word	1073752064
 2180              		.cfi_endproc
 2181              	.LFE141:
 2183              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 2184              		.align	1
 2185              		.global	RTC_AlarmCmd
 2186              		.syntax unified
 2187              		.thumb
 2188              		.thumb_func
 2190              	RTC_AlarmCmd:
 2191              	.LFB142:
1290:./Lib/Src/stm32f4xx_rtc.c **** 
1291:./Lib/Src/stm32f4xx_rtc.c **** /**
1292:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1293:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1294:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1295:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1296:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1297:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
ARM GAS  /tmp/ccHYJizt.s 			page 62


1298:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1299:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1300:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1301:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1302:./Lib/Src/stm32f4xx_rtc.c ****   */
1303:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1304:./Lib/Src/stm32f4xx_rtc.c **** {
 2192              		.loc 1 1304 1
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 24
 2195              		@ frame_needed = 1, uses_anonymous_args = 0
 2196              		@ link register save eliminated.
 2197 0000 80B4     		push	{r7}
 2198              		.cfi_def_cfa_offset 4
 2199              		.cfi_offset 7, -4
 2200 0002 87B0     		sub	sp, sp, #28
 2201              		.cfi_def_cfa_offset 32
 2202 0004 00AF     		add	r7, sp, #0
 2203              		.cfi_def_cfa_register 7
 2204 0006 7860     		str	r0, [r7, #4]
 2205 0008 0B46     		mov	r3, r1
 2206 000a FB70     		strb	r3, [r7, #3]
1305:./Lib/Src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 2207              		.loc 1 1305 17
 2208 000c 0023     		movs	r3, #0
 2209 000e FB60     		str	r3, [r7, #12]
1306:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 2210              		.loc 1 1306 12
 2211 0010 0023     		movs	r3, #0
 2212 0012 3B61     		str	r3, [r7, #16]
1307:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2213              		.loc 1 1307 15
 2214 0014 0023     		movs	r3, #0
 2215 0016 FB75     		strb	r3, [r7, #23]
1308:./Lib/Src/stm32f4xx_rtc.c ****     
1309:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1310:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1311:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1312:./Lib/Src/stm32f4xx_rtc.c **** 
1313:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1314:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2216              		.loc 1 1314 6
 2217 0018 1F4B     		ldr	r3, .L126
 2218              		.loc 1 1314 12
 2219 001a CA22     		movs	r2, #202
 2220 001c 5A62     		str	r2, [r3, #36]
1315:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2221              		.loc 1 1315 6
 2222 001e 1E4B     		ldr	r3, .L126
 2223              		.loc 1 1315 12
 2224 0020 5322     		movs	r2, #83
 2225 0022 5A62     		str	r2, [r3, #36]
1316:./Lib/Src/stm32f4xx_rtc.c **** 
1317:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1318:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2226              		.loc 1 1318 6
 2227 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccHYJizt.s 			page 63


 2228 0026 002B     		cmp	r3, #0
 2229 0028 08D0     		beq	.L120
1319:./Lib/Src/stm32f4xx_rtc.c ****   {
1320:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 2230              		.loc 1 1320 8
 2231 002a 1B4B     		ldr	r3, .L126
 2232 002c 9A68     		ldr	r2, [r3, #8]
 2233 002e 1A49     		ldr	r1, .L126
 2234              		.loc 1 1320 13
 2235 0030 7B68     		ldr	r3, [r7, #4]
 2236 0032 1343     		orrs	r3, r3, r2
 2237 0034 8B60     		str	r3, [r1, #8]
1321:./Lib/Src/stm32f4xx_rtc.c **** 
1322:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2238              		.loc 1 1322 12
 2239 0036 0123     		movs	r3, #1
 2240 0038 FB75     		strb	r3, [r7, #23]
 2241 003a 22E0     		b	.L121
 2242              	.L120:
1323:./Lib/Src/stm32f4xx_rtc.c ****   }
1324:./Lib/Src/stm32f4xx_rtc.c ****   else
1325:./Lib/Src/stm32f4xx_rtc.c ****   { 
1326:./Lib/Src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1327:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2243              		.loc 1 1327 8
 2244 003c 164B     		ldr	r3, .L126
 2245 003e 9A68     		ldr	r2, [r3, #8]
 2246              		.loc 1 1327 26
 2247 0040 7B68     		ldr	r3, [r7, #4]
 2248 0042 DB43     		mvns	r3, r3
 2249              		.loc 1 1327 8
 2250 0044 1449     		ldr	r1, .L126
 2251              		.loc 1 1327 13
 2252 0046 1340     		ands	r3, r3, r2
 2253 0048 8B60     		str	r3, [r1, #8]
 2254              	.L123:
1328:./Lib/Src/stm32f4xx_rtc.c ****    
1329:./Lib/Src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1330:./Lib/Src/stm32f4xx_rtc.c ****     do
1331:./Lib/Src/stm32f4xx_rtc.c ****     {
1332:./Lib/Src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2255              		.loc 1 1332 24 discriminator 2
 2256 004a 134B     		ldr	r3, .L126
 2257 004c DA68     		ldr	r2, [r3, #12]
 2258              		.loc 1 1332 43 discriminator 2
 2259 004e 7B68     		ldr	r3, [r7, #4]
 2260 0050 1B0A     		lsrs	r3, r3, #8
 2261              		.loc 1 1332 19 discriminator 2
 2262 0052 1340     		ands	r3, r3, r2
 2263 0054 3B61     		str	r3, [r7, #16]
1333:./Lib/Src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2264              		.loc 1 1333 19 discriminator 2
 2265 0056 FB68     		ldr	r3, [r7, #12]
 2266 0058 0133     		adds	r3, r3, #1
 2267 005a FB60     		str	r3, [r7, #12]
1334:./Lib/Src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2268              		.loc 1 1334 27 discriminator 2
ARM GAS  /tmp/ccHYJizt.s 			page 64


 2269 005c FB68     		ldr	r3, [r7, #12]
 2270              		.loc 1 1334 48 discriminator 2
 2271 005e B3F5803F 		cmp	r3, #65536
 2272 0062 02D0     		beq	.L122
 2273              		.loc 1 1334 48 is_stmt 0 discriminator 1
 2274 0064 3B69     		ldr	r3, [r7, #16]
 2275 0066 002B     		cmp	r3, #0
 2276 0068 EFD0     		beq	.L123
 2277              	.L122:
1335:./Lib/Src/stm32f4xx_rtc.c ****     
1336:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2278              		.loc 1 1336 13 is_stmt 1
 2279 006a 0B4B     		ldr	r3, .L126
 2280 006c DA68     		ldr	r2, [r3, #12]
 2281              		.loc 1 1336 32
 2282 006e 7B68     		ldr	r3, [r7, #4]
 2283 0070 1B0A     		lsrs	r3, r3, #8
 2284              		.loc 1 1336 19
 2285 0072 1340     		ands	r3, r3, r2
 2286              		.loc 1 1336 8
 2287 0074 002B     		cmp	r3, #0
 2288 0076 02D1     		bne	.L124
1337:./Lib/Src/stm32f4xx_rtc.c ****     {
1338:./Lib/Src/stm32f4xx_rtc.c ****       status = ERROR;
 2289              		.loc 1 1338 14
 2290 0078 0023     		movs	r3, #0
 2291 007a FB75     		strb	r3, [r7, #23]
 2292 007c 01E0     		b	.L121
 2293              	.L124:
1339:./Lib/Src/stm32f4xx_rtc.c ****     } 
1340:./Lib/Src/stm32f4xx_rtc.c ****     else
1341:./Lib/Src/stm32f4xx_rtc.c ****     {
1342:./Lib/Src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2294              		.loc 1 1342 14
 2295 007e 0123     		movs	r3, #1
 2296 0080 FB75     		strb	r3, [r7, #23]
 2297              	.L121:
1343:./Lib/Src/stm32f4xx_rtc.c ****     }        
1344:./Lib/Src/stm32f4xx_rtc.c ****   } 
1345:./Lib/Src/stm32f4xx_rtc.c **** 
1346:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1347:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2298              		.loc 1 1347 6
 2299 0082 054B     		ldr	r3, .L126
 2300              		.loc 1 1347 12
 2301 0084 FF22     		movs	r2, #255
 2302 0086 5A62     		str	r2, [r3, #36]
1348:./Lib/Src/stm32f4xx_rtc.c ****   
1349:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 2303              		.loc 1 1349 10
 2304 0088 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1350:./Lib/Src/stm32f4xx_rtc.c **** }
 2305              		.loc 1 1350 1
 2306 008a 1846     		mov	r0, r3
 2307 008c 1C37     		adds	r7, r7, #28
 2308              		.cfi_def_cfa_offset 4
 2309 008e BD46     		mov	sp, r7
ARM GAS  /tmp/ccHYJizt.s 			page 65


 2310              		.cfi_def_cfa_register 13
 2311              		@ sp needed
 2312 0090 5DF8047B 		ldr	r7, [sp], #4
 2313              		.cfi_restore 7
 2314              		.cfi_def_cfa_offset 0
 2315 0094 7047     		bx	lr
 2316              	.L127:
 2317 0096 00BF     		.align	2
 2318              	.L126:
 2319 0098 00280040 		.word	1073752064
 2320              		.cfi_endproc
 2321              	.LFE142:
 2323              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2324              		.align	1
 2325              		.global	RTC_AlarmSubSecondConfig
 2326              		.syntax unified
 2327              		.thumb
 2328              		.thumb_func
 2330              	RTC_AlarmSubSecondConfig:
 2331              	.LFB143:
1351:./Lib/Src/stm32f4xx_rtc.c **** 
1352:./Lib/Src/stm32f4xx_rtc.c **** /**
1353:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Sub seconds value and mask.*
1354:./Lib/Src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1355:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1356:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1357:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1358:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1359:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Sub seconds value.
1360:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1361:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Sub seconds Mask.
1362:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1363:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1364:./Lib/Src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1365:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1366:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1367:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1368:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1369:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1370:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1371:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1372:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1373:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1374:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1375:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1376:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1377:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1378:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1379:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1380:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1381:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1382:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1383:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1384:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1385:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1386:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1387:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
ARM GAS  /tmp/ccHYJizt.s 			page 66


1388:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1389:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1390:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1391:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1392:./Lib/Src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1393:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1394:./Lib/Src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1395:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1396:./Lib/Src/stm32f4xx_rtc.c ****   */
1397:./Lib/Src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1398:./Lib/Src/stm32f4xx_rtc.c **** {
 2332              		.loc 1 1398 1
 2333              		.cfi_startproc
 2334              		@ args = 0, pretend = 0, frame = 24
 2335              		@ frame_needed = 1, uses_anonymous_args = 0
 2336              		@ link register save eliminated.
 2337 0000 80B4     		push	{r7}
 2338              		.cfi_def_cfa_offset 4
 2339              		.cfi_offset 7, -4
 2340 0002 87B0     		sub	sp, sp, #28
 2341              		.cfi_def_cfa_offset 32
 2342 0004 00AF     		add	r7, sp, #0
 2343              		.cfi_def_cfa_register 7
 2344 0006 F860     		str	r0, [r7, #12]
 2345 0008 B960     		str	r1, [r7, #8]
 2346 000a 7A60     		str	r2, [r7, #4]
1399:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2347              		.loc 1 1399 12
 2348 000c 0023     		movs	r3, #0
 2349 000e 7B61     		str	r3, [r7, #20]
1400:./Lib/Src/stm32f4xx_rtc.c **** 
1401:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1402:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1403:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1404:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1405:./Lib/Src/stm32f4xx_rtc.c ****   
1406:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1407:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2350              		.loc 1 1407 6
 2351 0010 0E4B     		ldr	r3, .L131
 2352              		.loc 1 1407 12
 2353 0012 CA22     		movs	r2, #202
 2354 0014 5A62     		str	r2, [r3, #36]
1408:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2355              		.loc 1 1408 6
 2356 0016 0D4B     		ldr	r3, .L131
 2357              		.loc 1 1408 12
 2358 0018 5322     		movs	r2, #83
 2359 001a 5A62     		str	r2, [r3, #36]
1409:./Lib/Src/stm32f4xx_rtc.c ****   
1410:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1411:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2360              		.loc 1 1411 10
 2361 001c BA68     		ldr	r2, [r7, #8]
 2362 001e 7B68     		ldr	r3, [r7, #4]
 2363 0020 1343     		orrs	r3, r3, r2
 2364 0022 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccHYJizt.s 			page 67


1412:./Lib/Src/stm32f4xx_rtc.c ****   
1413:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2365              		.loc 1 1413 6
 2366 0024 FB68     		ldr	r3, [r7, #12]
 2367 0026 B3F5807F 		cmp	r3, #256
 2368 002a 03D1     		bne	.L129
1414:./Lib/Src/stm32f4xx_rtc.c ****   {
1415:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the Alarm A Sub Second register */
1416:./Lib/Src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2369              		.loc 1 1416 8
 2370 002c 074A     		ldr	r2, .L131
 2371              		.loc 1 1416 19
 2372 002e 7B69     		ldr	r3, [r7, #20]
 2373 0030 5364     		str	r3, [r2, #68]
 2374 0032 02E0     		b	.L130
 2375              	.L129:
1417:./Lib/Src/stm32f4xx_rtc.c ****   }
1418:./Lib/Src/stm32f4xx_rtc.c ****   else
1419:./Lib/Src/stm32f4xx_rtc.c ****   {
1420:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the Alarm B Sub Second register */
1421:./Lib/Src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2376              		.loc 1 1421 8
 2377 0034 054A     		ldr	r2, .L131
 2378              		.loc 1 1421 19
 2379 0036 7B69     		ldr	r3, [r7, #20]
 2380 0038 9364     		str	r3, [r2, #72]
 2381              	.L130:
1422:./Lib/Src/stm32f4xx_rtc.c ****   }
1423:./Lib/Src/stm32f4xx_rtc.c **** 
1424:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1425:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2382              		.loc 1 1425 6
 2383 003a 044B     		ldr	r3, .L131
 2384              		.loc 1 1425 12
 2385 003c FF22     		movs	r2, #255
 2386 003e 5A62     		str	r2, [r3, #36]
1426:./Lib/Src/stm32f4xx_rtc.c **** 
1427:./Lib/Src/stm32f4xx_rtc.c **** }
 2387              		.loc 1 1427 1
 2388 0040 00BF     		nop
 2389 0042 1C37     		adds	r7, r7, #28
 2390              		.cfi_def_cfa_offset 4
 2391 0044 BD46     		mov	sp, r7
 2392              		.cfi_def_cfa_register 13
 2393              		@ sp needed
 2394 0046 5DF8047B 		ldr	r7, [sp], #4
 2395              		.cfi_restore 7
 2396              		.cfi_def_cfa_offset 0
 2397 004a 7047     		bx	lr
 2398              	.L132:
 2399              		.align	2
 2400              	.L131:
 2401 004c 00280040 		.word	1073752064
 2402              		.cfi_endproc
 2403              	.LFE143:
 2405              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2406              		.align	1
ARM GAS  /tmp/ccHYJizt.s 			page 68


 2407              		.global	RTC_GetAlarmSubSecond
 2408              		.syntax unified
 2409              		.thumb
 2410              		.thumb_func
 2412              	RTC_GetAlarmSubSecond:
 2413              	.LFB144:
1428:./Lib/Src/stm32f4xx_rtc.c **** 
1429:./Lib/Src/stm32f4xx_rtc.c **** /**
1430:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Sub seconds value.
1431:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1432:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1433:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1434:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1435:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
1436:./Lib/Src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Sub seconds value.
1437:./Lib/Src/stm32f4xx_rtc.c ****   */
1438:./Lib/Src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1439:./Lib/Src/stm32f4xx_rtc.c **** {
 2414              		.loc 1 1439 1
 2415              		.cfi_startproc
 2416              		@ args = 0, pretend = 0, frame = 16
 2417              		@ frame_needed = 1, uses_anonymous_args = 0
 2418              		@ link register save eliminated.
 2419 0000 80B4     		push	{r7}
 2420              		.cfi_def_cfa_offset 4
 2421              		.cfi_offset 7, -4
 2422 0002 85B0     		sub	sp, sp, #20
 2423              		.cfi_def_cfa_offset 24
 2424 0004 00AF     		add	r7, sp, #0
 2425              		.cfi_def_cfa_register 7
 2426 0006 7860     		str	r0, [r7, #4]
1440:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2427              		.loc 1 1440 12
 2428 0008 0023     		movs	r3, #0
 2429 000a FB60     		str	r3, [r7, #12]
1441:./Lib/Src/stm32f4xx_rtc.c ****   
1442:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1443:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2430              		.loc 1 1443 6
 2431 000c 7B68     		ldr	r3, [r7, #4]
 2432 000e B3F5807F 		cmp	r3, #256
 2433 0012 05D1     		bne	.L134
1444:./Lib/Src/stm32f4xx_rtc.c ****   {
1445:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2434              		.loc 1 1445 29
 2435 0014 084B     		ldr	r3, .L137
 2436 0016 5B6C     		ldr	r3, [r3, #68]
 2437              		.loc 1 1445 12
 2438 0018 C3F30E03 		ubfx	r3, r3, #0, #15
 2439 001c FB60     		str	r3, [r7, #12]
 2440 001e 04E0     		b	.L135
 2441              	.L134:
1446:./Lib/Src/stm32f4xx_rtc.c ****   }
1447:./Lib/Src/stm32f4xx_rtc.c ****   else
1448:./Lib/Src/stm32f4xx_rtc.c ****   {
1449:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2442              		.loc 1 1449 29
ARM GAS  /tmp/ccHYJizt.s 			page 69


 2443 0020 054B     		ldr	r3, .L137
 2444 0022 9B6C     		ldr	r3, [r3, #72]
 2445              		.loc 1 1449 12
 2446 0024 C3F30E03 		ubfx	r3, r3, #0, #15
 2447 0028 FB60     		str	r3, [r7, #12]
 2448              	.L135:
1450:./Lib/Src/stm32f4xx_rtc.c ****   } 
1451:./Lib/Src/stm32f4xx_rtc.c ****   
1452:./Lib/Src/stm32f4xx_rtc.c ****   return (tmpreg);
 2449              		.loc 1 1452 10
 2450 002a FB68     		ldr	r3, [r7, #12]
1453:./Lib/Src/stm32f4xx_rtc.c **** }
 2451              		.loc 1 1453 1
 2452 002c 1846     		mov	r0, r3
 2453 002e 1437     		adds	r7, r7, #20
 2454              		.cfi_def_cfa_offset 4
 2455 0030 BD46     		mov	sp, r7
 2456              		.cfi_def_cfa_register 13
 2457              		@ sp needed
 2458 0032 5DF8047B 		ldr	r7, [sp], #4
 2459              		.cfi_restore 7
 2460              		.cfi_def_cfa_offset 0
 2461 0036 7047     		bx	lr
 2462              	.L138:
 2463              		.align	2
 2464              	.L137:
 2465 0038 00280040 		.word	1073752064
 2466              		.cfi_endproc
 2467              	.LFE144:
 2469              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2470              		.align	1
 2471              		.global	RTC_WakeUpClockConfig
 2472              		.syntax unified
 2473              		.thumb
 2474              		.thumb_func
 2476              	RTC_WakeUpClockConfig:
 2477              	.LFB145:
1454:./Lib/Src/stm32f4xx_rtc.c **** 
1455:./Lib/Src/stm32f4xx_rtc.c **** /**
1456:./Lib/Src/stm32f4xx_rtc.c ****   * @}
1457:./Lib/Src/stm32f4xx_rtc.c ****   */
1458:./Lib/Src/stm32f4xx_rtc.c **** 
1459:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1460:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1461:./Lib/Src/stm32f4xx_rtc.c ****  *
1462:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
1463:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
1464:./Lib/Src/stm32f4xx_rtc.c ****                  ##### WakeUp Timer configuration functions #####
1465:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
1466:./Lib/Src/stm32f4xx_rtc.c **** 
1467:./Lib/Src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to program and read the RTC WakeUp.
1468:./Lib/Src/stm32f4xx_rtc.c **** 
1469:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
1470:./Lib/Src/stm32f4xx_rtc.c ****   * @{
1471:./Lib/Src/stm32f4xx_rtc.c ****   */
1472:./Lib/Src/stm32f4xx_rtc.c **** 
1473:./Lib/Src/stm32f4xx_rtc.c **** /**
ARM GAS  /tmp/ccHYJizt.s 			page 70


1474:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1475:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1476:./Lib/Src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1477:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1478:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1479:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1480:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1481:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1482:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1483:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1484:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1485:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1486:./Lib/Src/stm32f4xx_rtc.c ****   */
1487:./Lib/Src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1488:./Lib/Src/stm32f4xx_rtc.c **** {
 2478              		.loc 1 1488 1
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 8
 2481              		@ frame_needed = 1, uses_anonymous_args = 0
 2482              		@ link register save eliminated.
 2483 0000 80B4     		push	{r7}
 2484              		.cfi_def_cfa_offset 4
 2485              		.cfi_offset 7, -4
 2486 0002 83B0     		sub	sp, sp, #12
 2487              		.cfi_def_cfa_offset 16
 2488 0004 00AF     		add	r7, sp, #0
 2489              		.cfi_def_cfa_register 7
 2490 0006 7860     		str	r0, [r7, #4]
1489:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1490:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1491:./Lib/Src/stm32f4xx_rtc.c **** 
1492:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1493:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2491              		.loc 1 1493 6
 2492 0008 0D4B     		ldr	r3, .L140
 2493              		.loc 1 1493 12
 2494 000a CA22     		movs	r2, #202
 2495 000c 5A62     		str	r2, [r3, #36]
1494:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2496              		.loc 1 1494 6
 2497 000e 0C4B     		ldr	r3, .L140
 2498              		.loc 1 1494 12
 2499 0010 5322     		movs	r2, #83
 2500 0012 5A62     		str	r2, [r3, #36]
1495:./Lib/Src/stm32f4xx_rtc.c **** 
1496:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1497:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2501              		.loc 1 1497 6
 2502 0014 0A4B     		ldr	r3, .L140
 2503 0016 9B68     		ldr	r3, [r3, #8]
 2504 0018 094A     		ldr	r2, .L140
 2505              		.loc 1 1497 11
 2506 001a 23F00703 		bic	r3, r3, #7
 2507 001e 9360     		str	r3, [r2, #8]
1498:./Lib/Src/stm32f4xx_rtc.c **** 
1499:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1500:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
ARM GAS  /tmp/ccHYJizt.s 			page 71


 2508              		.loc 1 1500 6
 2509 0020 074B     		ldr	r3, .L140
 2510 0022 9A68     		ldr	r2, [r3, #8]
 2511 0024 0649     		ldr	r1, .L140
 2512              		.loc 1 1500 11
 2513 0026 7B68     		ldr	r3, [r7, #4]
 2514 0028 1343     		orrs	r3, r3, r2
 2515 002a 8B60     		str	r3, [r1, #8]
1501:./Lib/Src/stm32f4xx_rtc.c ****   
1502:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1503:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2516              		.loc 1 1503 6
 2517 002c 044B     		ldr	r3, .L140
 2518              		.loc 1 1503 12
 2519 002e FF22     		movs	r2, #255
 2520 0030 5A62     		str	r2, [r3, #36]
1504:./Lib/Src/stm32f4xx_rtc.c **** }
 2521              		.loc 1 1504 1
 2522 0032 00BF     		nop
 2523 0034 0C37     		adds	r7, r7, #12
 2524              		.cfi_def_cfa_offset 4
 2525 0036 BD46     		mov	sp, r7
 2526              		.cfi_def_cfa_register 13
 2527              		@ sp needed
 2528 0038 5DF8047B 		ldr	r7, [sp], #4
 2529              		.cfi_restore 7
 2530              		.cfi_def_cfa_offset 0
 2531 003c 7047     		bx	lr
 2532              	.L141:
 2533 003e 00BF     		.align	2
 2534              	.L140:
 2535 0040 00280040 		.word	1073752064
 2536              		.cfi_endproc
 2537              	.LFE145:
 2539              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2540              		.align	1
 2541              		.global	RTC_SetWakeUpCounter
 2542              		.syntax unified
 2543              		.thumb
 2544              		.thumb_func
 2546              	RTC_SetWakeUpCounter:
 2547              	.LFB146:
1505:./Lib/Src/stm32f4xx_rtc.c **** 
1506:./Lib/Src/stm32f4xx_rtc.c **** /**
1507:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1508:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1509:./Lib/Src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1510:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1511:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1512:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1513:./Lib/Src/stm32f4xx_rtc.c ****   */
1514:./Lib/Src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1515:./Lib/Src/stm32f4xx_rtc.c **** {
 2548              		.loc 1 1515 1
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 8
 2551              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccHYJizt.s 			page 72


 2552              		@ link register save eliminated.
 2553 0000 80B4     		push	{r7}
 2554              		.cfi_def_cfa_offset 4
 2555              		.cfi_offset 7, -4
 2556 0002 83B0     		sub	sp, sp, #12
 2557              		.cfi_def_cfa_offset 16
 2558 0004 00AF     		add	r7, sp, #0
 2559              		.cfi_def_cfa_register 7
 2560 0006 7860     		str	r0, [r7, #4]
1516:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1517:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1518:./Lib/Src/stm32f4xx_rtc.c ****   
1519:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1520:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2561              		.loc 1 1520 6
 2562 0008 084B     		ldr	r3, .L143
 2563              		.loc 1 1520 12
 2564 000a CA22     		movs	r2, #202
 2565 000c 5A62     		str	r2, [r3, #36]
1521:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2566              		.loc 1 1521 6
 2567 000e 074B     		ldr	r3, .L143
 2568              		.loc 1 1521 12
 2569 0010 5322     		movs	r2, #83
 2570 0012 5A62     		str	r2, [r3, #36]
1522:./Lib/Src/stm32f4xx_rtc.c ****   
1523:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1524:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2571              		.loc 1 1524 6
 2572 0014 054A     		ldr	r2, .L143
 2573              		.loc 1 1524 13
 2574 0016 7B68     		ldr	r3, [r7, #4]
 2575 0018 5361     		str	r3, [r2, #20]
1525:./Lib/Src/stm32f4xx_rtc.c ****   
1526:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1527:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2576              		.loc 1 1527 6
 2577 001a 044B     		ldr	r3, .L143
 2578              		.loc 1 1527 12
 2579 001c FF22     		movs	r2, #255
 2580 001e 5A62     		str	r2, [r3, #36]
1528:./Lib/Src/stm32f4xx_rtc.c **** }
 2581              		.loc 1 1528 1
 2582 0020 00BF     		nop
 2583 0022 0C37     		adds	r7, r7, #12
 2584              		.cfi_def_cfa_offset 4
 2585 0024 BD46     		mov	sp, r7
 2586              		.cfi_def_cfa_register 13
 2587              		@ sp needed
 2588 0026 5DF8047B 		ldr	r7, [sp], #4
 2589              		.cfi_restore 7
 2590              		.cfi_def_cfa_offset 0
 2591 002a 7047     		bx	lr
 2592              	.L144:
 2593              		.align	2
 2594              	.L143:
 2595 002c 00280040 		.word	1073752064
ARM GAS  /tmp/ccHYJizt.s 			page 73


 2596              		.cfi_endproc
 2597              	.LFE146:
 2599              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2600              		.align	1
 2601              		.global	RTC_GetWakeUpCounter
 2602              		.syntax unified
 2603              		.thumb
 2604              		.thumb_func
 2606              	RTC_GetWakeUpCounter:
 2607              	.LFB147:
1529:./Lib/Src/stm32f4xx_rtc.c **** 
1530:./Lib/Src/stm32f4xx_rtc.c **** /**
1531:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1532:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
1533:./Lib/Src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1534:./Lib/Src/stm32f4xx_rtc.c ****   */
1535:./Lib/Src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1536:./Lib/Src/stm32f4xx_rtc.c **** {
 2608              		.loc 1 1536 1
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 0
 2611              		@ frame_needed = 1, uses_anonymous_args = 0
 2612              		@ link register save eliminated.
 2613 0000 80B4     		push	{r7}
 2614              		.cfi_def_cfa_offset 4
 2615              		.cfi_offset 7, -4
 2616 0002 00AF     		add	r7, sp, #0
 2617              		.cfi_def_cfa_register 7
1537:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the counter value */
1538:./Lib/Src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2618              		.loc 1 1538 25
 2619 0004 034B     		ldr	r3, .L147
 2620 0006 5B69     		ldr	r3, [r3, #20]
 2621              		.loc 1 1538 11
 2622 0008 9BB2     		uxth	r3, r3
1539:./Lib/Src/stm32f4xx_rtc.c **** }
 2623              		.loc 1 1539 1
 2624 000a 1846     		mov	r0, r3
 2625 000c BD46     		mov	sp, r7
 2626              		.cfi_def_cfa_register 13
 2627              		@ sp needed
 2628 000e 5DF8047B 		ldr	r7, [sp], #4
 2629              		.cfi_restore 7
 2630              		.cfi_def_cfa_offset 0
 2631 0012 7047     		bx	lr
 2632              	.L148:
 2633              		.align	2
 2634              	.L147:
 2635 0014 00280040 		.word	1073752064
 2636              		.cfi_endproc
 2637              	.LFE147:
 2639              		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2640              		.align	1
 2641              		.global	RTC_WakeUpCmd
 2642              		.syntax unified
 2643              		.thumb
 2644              		.thumb_func
ARM GAS  /tmp/ccHYJizt.s 			page 74


 2646              	RTC_WakeUpCmd:
 2647              	.LFB148:
1540:./Lib/Src/stm32f4xx_rtc.c **** 
1541:./Lib/Src/stm32f4xx_rtc.c **** /**
1542:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1543:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1544:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1545:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1546:./Lib/Src/stm32f4xx_rtc.c ****   */
1547:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1548:./Lib/Src/stm32f4xx_rtc.c **** {
 2648              		.loc 1 1548 1
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 24
 2651              		@ frame_needed = 1, uses_anonymous_args = 0
 2652              		@ link register save eliminated.
 2653 0000 80B4     		push	{r7}
 2654              		.cfi_def_cfa_offset 4
 2655              		.cfi_offset 7, -4
 2656 0002 87B0     		sub	sp, sp, #28
 2657              		.cfi_def_cfa_offset 32
 2658 0004 00AF     		add	r7, sp, #0
 2659              		.cfi_def_cfa_register 7
 2660 0006 0346     		mov	r3, r0
 2661 0008 FB71     		strb	r3, [r7, #7]
1549:./Lib/Src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2662              		.loc 1 1549 17
 2663 000a 0023     		movs	r3, #0
 2664 000c FB60     		str	r3, [r7, #12]
1550:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2665              		.loc 1 1550 12
 2666 000e 0023     		movs	r3, #0
 2667 0010 3B61     		str	r3, [r7, #16]
1551:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2668              		.loc 1 1551 15
 2669 0012 0023     		movs	r3, #0
 2670 0014 FB75     		strb	r3, [r7, #23]
1552:./Lib/Src/stm32f4xx_rtc.c ****   
1553:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1554:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1555:./Lib/Src/stm32f4xx_rtc.c **** 
1556:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1557:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2671              		.loc 1 1557 6
 2672 0016 1E4B     		ldr	r3, .L156
 2673              		.loc 1 1557 12
 2674 0018 CA22     		movs	r2, #202
 2675 001a 5A62     		str	r2, [r3, #36]
1558:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2676              		.loc 1 1558 6
 2677 001c 1C4B     		ldr	r3, .L156
 2678              		.loc 1 1558 12
 2679 001e 5322     		movs	r2, #83
 2680 0020 5A62     		str	r2, [r3, #36]
1559:./Lib/Src/stm32f4xx_rtc.c **** 
1560:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2681              		.loc 1 1560 6
ARM GAS  /tmp/ccHYJizt.s 			page 75


 2682 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2683 0024 002B     		cmp	r3, #0
 2684 0026 08D0     		beq	.L150
1561:./Lib/Src/stm32f4xx_rtc.c ****   {
1562:./Lib/Src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1563:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2685              		.loc 1 1563 8
 2686 0028 194B     		ldr	r3, .L156
 2687 002a 9B68     		ldr	r3, [r3, #8]
 2688 002c 184A     		ldr	r2, .L156
 2689              		.loc 1 1563 13
 2690 002e 43F48063 		orr	r3, r3, #1024
 2691 0032 9360     		str	r3, [r2, #8]
1564:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2692              		.loc 1 1564 12
 2693 0034 0123     		movs	r3, #1
 2694 0036 FB75     		strb	r3, [r7, #23]
 2695 0038 1FE0     		b	.L151
 2696              	.L150:
1565:./Lib/Src/stm32f4xx_rtc.c ****   }
1566:./Lib/Src/stm32f4xx_rtc.c ****   else
1567:./Lib/Src/stm32f4xx_rtc.c ****   {
1568:./Lib/Src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1569:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2697              		.loc 1 1569 8
 2698 003a 154B     		ldr	r3, .L156
 2699 003c 9B68     		ldr	r3, [r3, #8]
 2700 003e 144A     		ldr	r2, .L156
 2701              		.loc 1 1569 13
 2702 0040 23F48063 		bic	r3, r3, #1024
 2703 0044 9360     		str	r3, [r2, #8]
 2704              	.L153:
1570:./Lib/Src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1571:./Lib/Src/stm32f4xx_rtc.c ****     do
1572:./Lib/Src/stm32f4xx_rtc.c ****     {
1573:./Lib/Src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2705              		.loc 1 1573 24 discriminator 2
 2706 0046 124B     		ldr	r3, .L156
 2707 0048 DB68     		ldr	r3, [r3, #12]
 2708              		.loc 1 1573 19 discriminator 2
 2709 004a 03F00403 		and	r3, r3, #4
 2710 004e 3B61     		str	r3, [r7, #16]
1574:./Lib/Src/stm32f4xx_rtc.c ****       wutcounter++;  
 2711              		.loc 1 1574 17 discriminator 2
 2712 0050 FB68     		ldr	r3, [r7, #12]
 2713 0052 0133     		adds	r3, r3, #1
 2714 0054 FB60     		str	r3, [r7, #12]
1575:./Lib/Src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2715              		.loc 1 1575 25 discriminator 2
 2716 0056 FB68     		ldr	r3, [r7, #12]
 2717              		.loc 1 1575 46 discriminator 2
 2718 0058 B3F5803F 		cmp	r3, #65536
 2719 005c 02D0     		beq	.L152
 2720              		.loc 1 1575 46 is_stmt 0 discriminator 1
 2721 005e 3B69     		ldr	r3, [r7, #16]
 2722 0060 002B     		cmp	r3, #0
 2723 0062 F0D0     		beq	.L153
ARM GAS  /tmp/ccHYJizt.s 			page 76


 2724              	.L152:
1576:./Lib/Src/stm32f4xx_rtc.c ****     
1577:./Lib/Src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2725              		.loc 1 1577 13 is_stmt 1
 2726 0064 0A4B     		ldr	r3, .L156
 2727 0066 DB68     		ldr	r3, [r3, #12]
 2728              		.loc 1 1577 19
 2729 0068 03F00403 		and	r3, r3, #4
 2730              		.loc 1 1577 8
 2731 006c 002B     		cmp	r3, #0
 2732 006e 02D1     		bne	.L154
1578:./Lib/Src/stm32f4xx_rtc.c ****     {
1579:./Lib/Src/stm32f4xx_rtc.c ****       status = ERROR;
 2733              		.loc 1 1579 14
 2734 0070 0023     		movs	r3, #0
 2735 0072 FB75     		strb	r3, [r7, #23]
 2736 0074 01E0     		b	.L151
 2737              	.L154:
1580:./Lib/Src/stm32f4xx_rtc.c ****     }
1581:./Lib/Src/stm32f4xx_rtc.c ****     else
1582:./Lib/Src/stm32f4xx_rtc.c ****     {
1583:./Lib/Src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2738              		.loc 1 1583 14
 2739 0076 0123     		movs	r3, #1
 2740 0078 FB75     		strb	r3, [r7, #23]
 2741              	.L151:
1584:./Lib/Src/stm32f4xx_rtc.c ****     }    
1585:./Lib/Src/stm32f4xx_rtc.c ****   }
1586:./Lib/Src/stm32f4xx_rtc.c **** 
1587:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1588:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2742              		.loc 1 1588 6
 2743 007a 054B     		ldr	r3, .L156
 2744              		.loc 1 1588 12
 2745 007c FF22     		movs	r2, #255
 2746 007e 5A62     		str	r2, [r3, #36]
1589:./Lib/Src/stm32f4xx_rtc.c ****   
1590:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 2747              		.loc 1 1590 10
 2748 0080 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1591:./Lib/Src/stm32f4xx_rtc.c **** }
 2749              		.loc 1 1591 1
 2750 0082 1846     		mov	r0, r3
 2751 0084 1C37     		adds	r7, r7, #28
 2752              		.cfi_def_cfa_offset 4
 2753 0086 BD46     		mov	sp, r7
 2754              		.cfi_def_cfa_register 13
 2755              		@ sp needed
 2756 0088 5DF8047B 		ldr	r7, [sp], #4
 2757              		.cfi_restore 7
 2758              		.cfi_def_cfa_offset 0
 2759 008c 7047     		bx	lr
 2760              	.L157:
 2761 008e 00BF     		.align	2
 2762              	.L156:
 2763 0090 00280040 		.word	1073752064
 2764              		.cfi_endproc
ARM GAS  /tmp/ccHYJizt.s 			page 77


 2765              	.LFE148:
 2767              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2768              		.align	1
 2769              		.global	RTC_DayLightSavingConfig
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2774              	RTC_DayLightSavingConfig:
 2775              	.LFB149:
1592:./Lib/Src/stm32f4xx_rtc.c **** 
1593:./Lib/Src/stm32f4xx_rtc.c **** /**
1594:./Lib/Src/stm32f4xx_rtc.c ****   * @}
1595:./Lib/Src/stm32f4xx_rtc.c ****   */
1596:./Lib/Src/stm32f4xx_rtc.c **** 
1597:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1598:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1599:./Lib/Src/stm32f4xx_rtc.c ****  *
1600:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
1601:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
1602:./Lib/Src/stm32f4xx_rtc.c ****               ##### Daylight Saving configuration functions #####
1603:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
1604:./Lib/Src/stm32f4xx_rtc.c **** 
1605:./Lib/Src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC DayLight Saving.
1606:./Lib/Src/stm32f4xx_rtc.c **** 
1607:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
1608:./Lib/Src/stm32f4xx_rtc.c ****   * @{
1609:./Lib/Src/stm32f4xx_rtc.c ****   */
1610:./Lib/Src/stm32f4xx_rtc.c **** 
1611:./Lib/Src/stm32f4xx_rtc.c **** /**
1612:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1613:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1614:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1615:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1616:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1617:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1618:./Lib/Src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1619:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1620:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1621:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1622:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1623:./Lib/Src/stm32f4xx_rtc.c ****   */
1624:./Lib/Src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1625:./Lib/Src/stm32f4xx_rtc.c **** {
 2776              		.loc 1 1625 1
 2777              		.cfi_startproc
 2778              		@ args = 0, pretend = 0, frame = 8
 2779              		@ frame_needed = 1, uses_anonymous_args = 0
 2780              		@ link register save eliminated.
 2781 0000 80B4     		push	{r7}
 2782              		.cfi_def_cfa_offset 4
 2783              		.cfi_offset 7, -4
 2784 0002 83B0     		sub	sp, sp, #12
 2785              		.cfi_def_cfa_offset 16
 2786 0004 00AF     		add	r7, sp, #0
 2787              		.cfi_def_cfa_register 7
 2788 0006 7860     		str	r0, [r7, #4]
 2789 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccHYJizt.s 			page 78


1626:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1627:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1628:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1629:./Lib/Src/stm32f4xx_rtc.c **** 
1630:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1631:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2790              		.loc 1 1631 6
 2791 000a 0E4B     		ldr	r3, .L159
 2792              		.loc 1 1631 12
 2793 000c CA22     		movs	r2, #202
 2794 000e 5A62     		str	r2, [r3, #36]
1632:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2795              		.loc 1 1632 6
 2796 0010 0C4B     		ldr	r3, .L159
 2797              		.loc 1 1632 12
 2798 0012 5322     		movs	r2, #83
 2799 0014 5A62     		str	r2, [r3, #36]
1633:./Lib/Src/stm32f4xx_rtc.c **** 
1634:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1635:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2800              		.loc 1 1635 6
 2801 0016 0B4B     		ldr	r3, .L159
 2802 0018 9B68     		ldr	r3, [r3, #8]
 2803 001a 0A4A     		ldr	r2, .L159
 2804              		.loc 1 1635 11
 2805 001c 23F48023 		bic	r3, r3, #262144
 2806 0020 9360     		str	r3, [r2, #8]
1636:./Lib/Src/stm32f4xx_rtc.c **** 
1637:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1638:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2807              		.loc 1 1638 6
 2808 0022 084B     		ldr	r3, .L159
 2809 0024 9A68     		ldr	r2, [r3, #8]
 2810              		.loc 1 1638 44
 2811 0026 7968     		ldr	r1, [r7, #4]
 2812 0028 3B68     		ldr	r3, [r7]
 2813 002a 0B43     		orrs	r3, r3, r1
 2814              		.loc 1 1638 6
 2815 002c 0549     		ldr	r1, .L159
 2816              		.loc 1 1638 11
 2817 002e 1343     		orrs	r3, r3, r2
 2818 0030 8B60     		str	r3, [r1, #8]
1639:./Lib/Src/stm32f4xx_rtc.c **** 
1640:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1641:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2819              		.loc 1 1641 6
 2820 0032 044B     		ldr	r3, .L159
 2821              		.loc 1 1641 12
 2822 0034 FF22     		movs	r2, #255
 2823 0036 5A62     		str	r2, [r3, #36]
1642:./Lib/Src/stm32f4xx_rtc.c **** }
 2824              		.loc 1 1642 1
 2825 0038 00BF     		nop
 2826 003a 0C37     		adds	r7, r7, #12
 2827              		.cfi_def_cfa_offset 4
 2828 003c BD46     		mov	sp, r7
 2829              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccHYJizt.s 			page 79


 2830              		@ sp needed
 2831 003e 5DF8047B 		ldr	r7, [sp], #4
 2832              		.cfi_restore 7
 2833              		.cfi_def_cfa_offset 0
 2834 0042 7047     		bx	lr
 2835              	.L160:
 2836              		.align	2
 2837              	.L159:
 2838 0044 00280040 		.word	1073752064
 2839              		.cfi_endproc
 2840              	.LFE149:
 2842              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2843              		.align	1
 2844              		.global	RTC_GetStoreOperation
 2845              		.syntax unified
 2846              		.thumb
 2847              		.thumb_func
 2849              	RTC_GetStoreOperation:
 2850              	.LFB150:
1643:./Lib/Src/stm32f4xx_rtc.c **** 
1644:./Lib/Src/stm32f4xx_rtc.c **** /**
1645:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1646:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
1647:./Lib/Src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1648:./Lib/Src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1649:./Lib/Src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1650:./Lib/Src/stm32f4xx_rtc.c ****   */
1651:./Lib/Src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1652:./Lib/Src/stm32f4xx_rtc.c **** {
 2851              		.loc 1 1652 1
 2852              		.cfi_startproc
 2853              		@ args = 0, pretend = 0, frame = 0
 2854              		@ frame_needed = 1, uses_anonymous_args = 0
 2855              		@ link register save eliminated.
 2856 0000 80B4     		push	{r7}
 2857              		.cfi_def_cfa_offset 4
 2858              		.cfi_offset 7, -4
 2859 0002 00AF     		add	r7, sp, #0
 2860              		.cfi_def_cfa_register 7
1653:./Lib/Src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2861              		.loc 1 1653 14
 2862 0004 044B     		ldr	r3, .L163
 2863 0006 9B68     		ldr	r3, [r3, #8]
 2864              		.loc 1 1653 19
 2865 0008 03F48023 		and	r3, r3, #262144
1654:./Lib/Src/stm32f4xx_rtc.c **** }
 2866              		.loc 1 1654 1
 2867 000c 1846     		mov	r0, r3
 2868 000e BD46     		mov	sp, r7
 2869              		.cfi_def_cfa_register 13
 2870              		@ sp needed
 2871 0010 5DF8047B 		ldr	r7, [sp], #4
 2872              		.cfi_restore 7
 2873              		.cfi_def_cfa_offset 0
 2874 0014 7047     		bx	lr
 2875              	.L164:
 2876 0016 00BF     		.align	2
ARM GAS  /tmp/ccHYJizt.s 			page 80


 2877              	.L163:
 2878 0018 00280040 		.word	1073752064
 2879              		.cfi_endproc
 2880              	.LFE150:
 2882              		.section	.text.RTC_OutputConfig,"ax",%progbits
 2883              		.align	1
 2884              		.global	RTC_OutputConfig
 2885              		.syntax unified
 2886              		.thumb
 2887              		.thumb_func
 2889              	RTC_OutputConfig:
 2890              	.LFB151:
1655:./Lib/Src/stm32f4xx_rtc.c **** 
1656:./Lib/Src/stm32f4xx_rtc.c **** /**
1657:./Lib/Src/stm32f4xx_rtc.c ****   * @}
1658:./Lib/Src/stm32f4xx_rtc.c ****   */
1659:./Lib/Src/stm32f4xx_rtc.c **** 
1660:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1661:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1662:./Lib/Src/stm32f4xx_rtc.c ****  *
1663:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
1664:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
1665:./Lib/Src/stm32f4xx_rtc.c ****                  ##### Output pin Configuration function #####
1666:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
1667:./Lib/Src/stm32f4xx_rtc.c **** 
1668:./Lib/Src/stm32f4xx_rtc.c ****  [..] This section provide functions allowing to configure the RTC Output source.
1669:./Lib/Src/stm32f4xx_rtc.c **** 
1670:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
1671:./Lib/Src/stm32f4xx_rtc.c ****   * @{
1672:./Lib/Src/stm32f4xx_rtc.c ****   */
1673:./Lib/Src/stm32f4xx_rtc.c **** 
1674:./Lib/Src/stm32f4xx_rtc.c **** /**
1675:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1676:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1677:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1678:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1679:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1680:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1681:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1682:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1683:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1684:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1685:./Lib/Src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1686:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1687:./Lib/Src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1688:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1689:./Lib/Src/stm32f4xx_rtc.c ****   */
1690:./Lib/Src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1691:./Lib/Src/stm32f4xx_rtc.c **** {
 2891              		.loc 1 1691 1
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 8
 2894              		@ frame_needed = 1, uses_anonymous_args = 0
 2895              		@ link register save eliminated.
 2896 0000 80B4     		push	{r7}
 2897              		.cfi_def_cfa_offset 4
 2898              		.cfi_offset 7, -4
ARM GAS  /tmp/ccHYJizt.s 			page 81


 2899 0002 83B0     		sub	sp, sp, #12
 2900              		.cfi_def_cfa_offset 16
 2901 0004 00AF     		add	r7, sp, #0
 2902              		.cfi_def_cfa_register 7
 2903 0006 7860     		str	r0, [r7, #4]
 2904 0008 3960     		str	r1, [r7]
1692:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1693:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1694:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1695:./Lib/Src/stm32f4xx_rtc.c **** 
1696:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1697:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2905              		.loc 1 1697 6
 2906 000a 0E4B     		ldr	r3, .L166
 2907              		.loc 1 1697 12
 2908 000c CA22     		movs	r2, #202
 2909 000e 5A62     		str	r2, [r3, #36]
1698:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2910              		.loc 1 1698 6
 2911 0010 0C4B     		ldr	r3, .L166
 2912              		.loc 1 1698 12
 2913 0012 5322     		movs	r2, #83
 2914 0014 5A62     		str	r2, [r3, #36]
1699:./Lib/Src/stm32f4xx_rtc.c **** 
1700:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1701:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2915              		.loc 1 1701 6
 2916 0016 0B4B     		ldr	r3, .L166
 2917 0018 9B68     		ldr	r3, [r3, #8]
 2918 001a 0A4A     		ldr	r2, .L166
 2919              		.loc 1 1701 11
 2920 001c 23F4E003 		bic	r3, r3, #7340032
 2921 0020 9360     		str	r3, [r2, #8]
1702:./Lib/Src/stm32f4xx_rtc.c **** 
1703:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1704:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2922              		.loc 1 1704 6
 2923 0022 084B     		ldr	r3, .L166
 2924 0024 9A68     		ldr	r2, [r3, #8]
 2925              		.loc 1 1704 36
 2926 0026 7968     		ldr	r1, [r7, #4]
 2927 0028 3B68     		ldr	r3, [r7]
 2928 002a 0B43     		orrs	r3, r3, r1
 2929              		.loc 1 1704 6
 2930 002c 0549     		ldr	r1, .L166
 2931              		.loc 1 1704 11
 2932 002e 1343     		orrs	r3, r3, r2
 2933 0030 8B60     		str	r3, [r1, #8]
1705:./Lib/Src/stm32f4xx_rtc.c **** 
1706:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1707:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2934              		.loc 1 1707 6
 2935 0032 044B     		ldr	r3, .L166
 2936              		.loc 1 1707 12
 2937 0034 FF22     		movs	r2, #255
 2938 0036 5A62     		str	r2, [r3, #36]
1708:./Lib/Src/stm32f4xx_rtc.c **** }
ARM GAS  /tmp/ccHYJizt.s 			page 82


 2939              		.loc 1 1708 1
 2940 0038 00BF     		nop
 2941 003a 0C37     		adds	r7, r7, #12
 2942              		.cfi_def_cfa_offset 4
 2943 003c BD46     		mov	sp, r7
 2944              		.cfi_def_cfa_register 13
 2945              		@ sp needed
 2946 003e 5DF8047B 		ldr	r7, [sp], #4
 2947              		.cfi_restore 7
 2948              		.cfi_def_cfa_offset 0
 2949 0042 7047     		bx	lr
 2950              	.L167:
 2951              		.align	2
 2952              	.L166:
 2953 0044 00280040 		.word	1073752064
 2954              		.cfi_endproc
 2955              	.LFE151:
 2957              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2958              		.align	1
 2959              		.global	RTC_CoarseCalibConfig
 2960              		.syntax unified
 2961              		.thumb
 2962              		.thumb_func
 2964              	RTC_CoarseCalibConfig:
 2965              	.LFB152:
1709:./Lib/Src/stm32f4xx_rtc.c **** 
1710:./Lib/Src/stm32f4xx_rtc.c **** /**
1711:./Lib/Src/stm32f4xx_rtc.c ****   * @}
1712:./Lib/Src/stm32f4xx_rtc.c ****   */
1713:./Lib/Src/stm32f4xx_rtc.c **** 
1714:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1715:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1716:./Lib/Src/stm32f4xx_rtc.c ****  *
1717:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
1718:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
1719:./Lib/Src/stm32f4xx_rtc.c ****               ##### Digital Calibration configuration functions #####
1720:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
1721:./Lib/Src/stm32f4xx_rtc.c **** 
1722:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
1723:./Lib/Src/stm32f4xx_rtc.c ****   * @{
1724:./Lib/Src/stm32f4xx_rtc.c ****   */
1725:./Lib/Src/stm32f4xx_rtc.c **** 
1726:./Lib/Src/stm32f4xx_rtc.c **** /**
1727:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1728:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1729:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1730:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1731:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1732:./Lib/Src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1733:./Lib/Src/stm32f4xx_rtc.c ****   *    
1734:./Lib/Src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1735:./Lib/Src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1736:./Lib/Src/stm32f4xx_rtc.c ****   *           
1737:./Lib/Src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1738:./Lib/Src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1739:./Lib/Src/stm32f4xx_rtc.c ****   *           
1740:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
ARM GAS  /tmp/ccHYJizt.s 			page 83


1741:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1742:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1743:./Lib/Src/stm32f4xx_rtc.c ****   */
1744:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1745:./Lib/Src/stm32f4xx_rtc.c **** {
 2966              		.loc 1 1745 1
 2967              		.cfi_startproc
 2968              		@ args = 0, pretend = 0, frame = 16
 2969              		@ frame_needed = 1, uses_anonymous_args = 0
 2970 0000 80B5     		push	{r7, lr}
 2971              		.cfi_def_cfa_offset 8
 2972              		.cfi_offset 7, -8
 2973              		.cfi_offset 14, -4
 2974 0002 84B0     		sub	sp, sp, #16
 2975              		.cfi_def_cfa_offset 24
 2976 0004 00AF     		add	r7, sp, #0
 2977              		.cfi_def_cfa_register 7
 2978 0006 7860     		str	r0, [r7, #4]
 2979 0008 3960     		str	r1, [r7]
1746:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2980              		.loc 1 1746 15
 2981 000a 0023     		movs	r3, #0
 2982 000c FB73     		strb	r3, [r7, #15]
1747:./Lib/Src/stm32f4xx_rtc.c ****    
1748:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1749:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1750:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1751:./Lib/Src/stm32f4xx_rtc.c **** 
1752:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1753:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2983              		.loc 1 1753 6
 2984 000e 0F4B     		ldr	r3, .L172
 2985              		.loc 1 1753 12
 2986 0010 CA22     		movs	r2, #202
 2987 0012 5A62     		str	r2, [r3, #36]
1754:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2988              		.loc 1 1754 6
 2989 0014 0D4B     		ldr	r3, .L172
 2990              		.loc 1 1754 12
 2991 0016 5322     		movs	r2, #83
 2992 0018 5A62     		str	r2, [r3, #36]
1755:./Lib/Src/stm32f4xx_rtc.c **** 
1756:./Lib/Src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1757:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2993              		.loc 1 1757 7
 2994 001a FFF7FEFF 		bl	RTC_EnterInitMode
 2995 001e 0346     		mov	r3, r0
 2996              		.loc 1 1757 6
 2997 0020 002B     		cmp	r3, #0
 2998 0022 02D1     		bne	.L169
1758:./Lib/Src/stm32f4xx_rtc.c ****   {
1759:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 2999              		.loc 1 1759 12
 3000 0024 0023     		movs	r3, #0
 3001 0026 FB73     		strb	r3, [r7, #15]
 3002 0028 08E0     		b	.L170
 3003              	.L169:
ARM GAS  /tmp/ccHYJizt.s 			page 84


1760:./Lib/Src/stm32f4xx_rtc.c ****   } 
1761:./Lib/Src/stm32f4xx_rtc.c ****   else
1762:./Lib/Src/stm32f4xx_rtc.c ****   {
1763:./Lib/Src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1764:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 3004              		.loc 1 1764 8
 3005 002a 0849     		ldr	r1, .L172
 3006              		.loc 1 1764 44
 3007 002c 7A68     		ldr	r2, [r7, #4]
 3008 002e 3B68     		ldr	r3, [r7]
 3009 0030 1343     		orrs	r3, r3, r2
 3010              		.loc 1 1764 17
 3011 0032 8B61     		str	r3, [r1, #24]
1765:./Lib/Src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1766:./Lib/Src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 3012              		.loc 1 1766 5
 3013 0034 FFF7FEFF 		bl	RTC_ExitInitMode
1767:./Lib/Src/stm32f4xx_rtc.c ****     
1768:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3014              		.loc 1 1768 12
 3015 0038 0123     		movs	r3, #1
 3016 003a FB73     		strb	r3, [r7, #15]
 3017              	.L170:
1769:./Lib/Src/stm32f4xx_rtc.c ****   } 
1770:./Lib/Src/stm32f4xx_rtc.c **** 
1771:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1772:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3018              		.loc 1 1772 6
 3019 003c 034B     		ldr	r3, .L172
 3020              		.loc 1 1772 12
 3021 003e FF22     		movs	r2, #255
 3022 0040 5A62     		str	r2, [r3, #36]
1773:./Lib/Src/stm32f4xx_rtc.c ****   
1774:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 3023              		.loc 1 1774 10
 3024 0042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1775:./Lib/Src/stm32f4xx_rtc.c **** }
 3025              		.loc 1 1775 1
 3026 0044 1846     		mov	r0, r3
 3027 0046 1037     		adds	r7, r7, #16
 3028              		.cfi_def_cfa_offset 8
 3029 0048 BD46     		mov	sp, r7
 3030              		.cfi_def_cfa_register 13
 3031              		@ sp needed
 3032 004a 80BD     		pop	{r7, pc}
 3033              	.L173:
 3034              		.align	2
 3035              	.L172:
 3036 004c 00280040 		.word	1073752064
 3037              		.cfi_endproc
 3038              	.LFE152:
 3040              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 3041              		.align	1
 3042              		.global	RTC_CoarseCalibCmd
 3043              		.syntax unified
 3044              		.thumb
 3045              		.thumb_func
ARM GAS  /tmp/ccHYJizt.s 			page 85


 3047              	RTC_CoarseCalibCmd:
 3048              	.LFB153:
1776:./Lib/Src/stm32f4xx_rtc.c **** 
1777:./Lib/Src/stm32f4xx_rtc.c **** /**
1778:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1779:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1780:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1781:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1782:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1783:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1784:./Lib/Src/stm32f4xx_rtc.c ****   */
1785:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1786:./Lib/Src/stm32f4xx_rtc.c **** {
 3049              		.loc 1 1786 1
 3050              		.cfi_startproc
 3051              		@ args = 0, pretend = 0, frame = 16
 3052              		@ frame_needed = 1, uses_anonymous_args = 0
 3053 0000 80B5     		push	{r7, lr}
 3054              		.cfi_def_cfa_offset 8
 3055              		.cfi_offset 7, -8
 3056              		.cfi_offset 14, -4
 3057 0002 84B0     		sub	sp, sp, #16
 3058              		.cfi_def_cfa_offset 24
 3059 0004 00AF     		add	r7, sp, #0
 3060              		.cfi_def_cfa_register 7
 3061 0006 0346     		mov	r3, r0
 3062 0008 FB71     		strb	r3, [r7, #7]
1787:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3063              		.loc 1 1787 15
 3064 000a 0023     		movs	r3, #0
 3065 000c FB73     		strb	r3, [r7, #15]
1788:./Lib/Src/stm32f4xx_rtc.c ****   
1789:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1790:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1791:./Lib/Src/stm32f4xx_rtc.c **** 
1792:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1793:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3066              		.loc 1 1793 6
 3067 000e 154B     		ldr	r3, .L180
 3068              		.loc 1 1793 12
 3069 0010 CA22     		movs	r2, #202
 3070 0012 5A62     		str	r2, [r3, #36]
1794:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3071              		.loc 1 1794 6
 3072 0014 134B     		ldr	r3, .L180
 3073              		.loc 1 1794 12
 3074 0016 5322     		movs	r2, #83
 3075 0018 5A62     		str	r2, [r3, #36]
1795:./Lib/Src/stm32f4xx_rtc.c ****   
1796:./Lib/Src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1797:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 3076              		.loc 1 1797 7
 3077 001a FFF7FEFF 		bl	RTC_EnterInitMode
 3078 001e 0346     		mov	r3, r0
 3079              		.loc 1 1797 6
 3080 0020 002B     		cmp	r3, #0
 3081 0022 02D1     		bne	.L175
ARM GAS  /tmp/ccHYJizt.s 			page 86


1798:./Lib/Src/stm32f4xx_rtc.c ****   {
1799:./Lib/Src/stm32f4xx_rtc.c ****     status =  ERROR;
 3082              		.loc 1 1799 12
 3083 0024 0023     		movs	r3, #0
 3084 0026 FB73     		strb	r3, [r7, #15]
 3085 0028 13E0     		b	.L176
 3086              	.L175:
1800:./Lib/Src/stm32f4xx_rtc.c ****   }
1801:./Lib/Src/stm32f4xx_rtc.c ****   else
1802:./Lib/Src/stm32f4xx_rtc.c ****   {
1803:./Lib/Src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 3087              		.loc 1 1803 8
 3088 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3089 002c 002B     		cmp	r3, #0
 3090 002e 06D0     		beq	.L177
1804:./Lib/Src/stm32f4xx_rtc.c ****     {
1805:./Lib/Src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1806:./Lib/Src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 3091              		.loc 1 1806 10
 3092 0030 0C4B     		ldr	r3, .L180
 3093 0032 9B68     		ldr	r3, [r3, #8]
 3094 0034 0B4A     		ldr	r2, .L180
 3095              		.loc 1 1806 15
 3096 0036 43F08003 		orr	r3, r3, #128
 3097 003a 9360     		str	r3, [r2, #8]
 3098 003c 05E0     		b	.L178
 3099              	.L177:
1807:./Lib/Src/stm32f4xx_rtc.c ****     }
1808:./Lib/Src/stm32f4xx_rtc.c ****     else
1809:./Lib/Src/stm32f4xx_rtc.c ****     { 
1810:./Lib/Src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1811:./Lib/Src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 3100              		.loc 1 1811 10
 3101 003e 094B     		ldr	r3, .L180
 3102 0040 9B68     		ldr	r3, [r3, #8]
 3103 0042 084A     		ldr	r2, .L180
 3104              		.loc 1 1811 15
 3105 0044 23F08003 		bic	r3, r3, #128
 3106 0048 9360     		str	r3, [r2, #8]
 3107              	.L178:
1812:./Lib/Src/stm32f4xx_rtc.c ****     }
1813:./Lib/Src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1814:./Lib/Src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 3108              		.loc 1 1814 5
 3109 004a FFF7FEFF 		bl	RTC_ExitInitMode
1815:./Lib/Src/stm32f4xx_rtc.c ****     
1816:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3110              		.loc 1 1816 12
 3111 004e 0123     		movs	r3, #1
 3112 0050 FB73     		strb	r3, [r7, #15]
 3113              	.L176:
1817:./Lib/Src/stm32f4xx_rtc.c ****   } 
1818:./Lib/Src/stm32f4xx_rtc.c ****   
1819:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1820:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3114              		.loc 1 1820 6
 3115 0052 044B     		ldr	r3, .L180
ARM GAS  /tmp/ccHYJizt.s 			page 87


 3116              		.loc 1 1820 12
 3117 0054 FF22     		movs	r2, #255
 3118 0056 5A62     		str	r2, [r3, #36]
1821:./Lib/Src/stm32f4xx_rtc.c ****   
1822:./Lib/Src/stm32f4xx_rtc.c ****   return status;
 3119              		.loc 1 1822 10
 3120 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1823:./Lib/Src/stm32f4xx_rtc.c **** }
 3121              		.loc 1 1823 1
 3122 005a 1846     		mov	r0, r3
 3123 005c 1037     		adds	r7, r7, #16
 3124              		.cfi_def_cfa_offset 8
 3125 005e BD46     		mov	sp, r7
 3126              		.cfi_def_cfa_register 13
 3127              		@ sp needed
 3128 0060 80BD     		pop	{r7, pc}
 3129              	.L181:
 3130 0062 00BF     		.align	2
 3131              	.L180:
 3132 0064 00280040 		.word	1073752064
 3133              		.cfi_endproc
 3134              	.LFE153:
 3136              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 3137              		.align	1
 3138              		.global	RTC_CalibOutputCmd
 3139              		.syntax unified
 3140              		.thumb
 3141              		.thumb_func
 3143              	RTC_CalibOutputCmd:
 3144              	.LFB154:
1824:./Lib/Src/stm32f4xx_rtc.c **** 
1825:./Lib/Src/stm32f4xx_rtc.c **** /**
1826:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1827:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1828:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1829:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1830:./Lib/Src/stm32f4xx_rtc.c ****   */
1831:./Lib/Src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1832:./Lib/Src/stm32f4xx_rtc.c **** {
 3145              		.loc 1 1832 1
 3146              		.cfi_startproc
 3147              		@ args = 0, pretend = 0, frame = 8
 3148              		@ frame_needed = 1, uses_anonymous_args = 0
 3149              		@ link register save eliminated.
 3150 0000 80B4     		push	{r7}
 3151              		.cfi_def_cfa_offset 4
 3152              		.cfi_offset 7, -4
 3153 0002 83B0     		sub	sp, sp, #12
 3154              		.cfi_def_cfa_offset 16
 3155 0004 00AF     		add	r7, sp, #0
 3156              		.cfi_def_cfa_register 7
 3157 0006 0346     		mov	r3, r0
 3158 0008 FB71     		strb	r3, [r7, #7]
1833:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1834:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1835:./Lib/Src/stm32f4xx_rtc.c ****   
1836:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/ccHYJizt.s 			page 88


1837:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3159              		.loc 1 1837 6
 3160 000a 0F4B     		ldr	r3, .L185
 3161              		.loc 1 1837 12
 3162 000c CA22     		movs	r2, #202
 3163 000e 5A62     		str	r2, [r3, #36]
1838:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3164              		.loc 1 1838 6
 3165 0010 0D4B     		ldr	r3, .L185
 3166              		.loc 1 1838 12
 3167 0012 5322     		movs	r2, #83
 3168 0014 5A62     		str	r2, [r3, #36]
1839:./Lib/Src/stm32f4xx_rtc.c ****   
1840:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3169              		.loc 1 1840 6
 3170 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3171 0018 002B     		cmp	r3, #0
 3172 001a 06D0     		beq	.L183
1841:./Lib/Src/stm32f4xx_rtc.c ****   {
1842:./Lib/Src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1843:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 3173              		.loc 1 1843 8
 3174 001c 0A4B     		ldr	r3, .L185
 3175 001e 9B68     		ldr	r3, [r3, #8]
 3176 0020 094A     		ldr	r2, .L185
 3177              		.loc 1 1843 13
 3178 0022 43F40003 		orr	r3, r3, #8388608
 3179 0026 9360     		str	r3, [r2, #8]
 3180 0028 05E0     		b	.L184
 3181              	.L183:
1844:./Lib/Src/stm32f4xx_rtc.c ****   }
1845:./Lib/Src/stm32f4xx_rtc.c ****   else
1846:./Lib/Src/stm32f4xx_rtc.c ****   { 
1847:./Lib/Src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1848:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 3182              		.loc 1 1848 8
 3183 002a 074B     		ldr	r3, .L185
 3184 002c 9B68     		ldr	r3, [r3, #8]
 3185 002e 064A     		ldr	r2, .L185
 3186              		.loc 1 1848 13
 3187 0030 23F40003 		bic	r3, r3, #8388608
 3188 0034 9360     		str	r3, [r2, #8]
 3189              	.L184:
1849:./Lib/Src/stm32f4xx_rtc.c ****   }
1850:./Lib/Src/stm32f4xx_rtc.c ****   
1851:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1852:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3190              		.loc 1 1852 6
 3191 0036 044B     		ldr	r3, .L185
 3192              		.loc 1 1852 12
 3193 0038 FF22     		movs	r2, #255
 3194 003a 5A62     		str	r2, [r3, #36]
1853:./Lib/Src/stm32f4xx_rtc.c **** }
 3195              		.loc 1 1853 1
 3196 003c 00BF     		nop
 3197 003e 0C37     		adds	r7, r7, #12
 3198              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccHYJizt.s 			page 89


 3199 0040 BD46     		mov	sp, r7
 3200              		.cfi_def_cfa_register 13
 3201              		@ sp needed
 3202 0042 5DF8047B 		ldr	r7, [sp], #4
 3203              		.cfi_restore 7
 3204              		.cfi_def_cfa_offset 0
 3205 0046 7047     		bx	lr
 3206              	.L186:
 3207              		.align	2
 3208              	.L185:
 3209 0048 00280040 		.word	1073752064
 3210              		.cfi_endproc
 3211              	.LFE154:
 3213              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 3214              		.align	1
 3215              		.global	RTC_CalibOutputConfig
 3216              		.syntax unified
 3217              		.thumb
 3218              		.thumb_func
 3220              	RTC_CalibOutputConfig:
 3221              	.LFB155:
1854:./Lib/Src/stm32f4xx_rtc.c **** 
1855:./Lib/Src/stm32f4xx_rtc.c **** /**
1856:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1857:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1858:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1859:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1860:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1861:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1862:./Lib/Src/stm32f4xx_rtc.c **** */
1863:./Lib/Src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1864:./Lib/Src/stm32f4xx_rtc.c **** {
 3222              		.loc 1 1864 1
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 8
 3225              		@ frame_needed = 1, uses_anonymous_args = 0
 3226              		@ link register save eliminated.
 3227 0000 80B4     		push	{r7}
 3228              		.cfi_def_cfa_offset 4
 3229              		.cfi_offset 7, -4
 3230 0002 83B0     		sub	sp, sp, #12
 3231              		.cfi_def_cfa_offset 16
 3232 0004 00AF     		add	r7, sp, #0
 3233              		.cfi_def_cfa_register 7
 3234 0006 7860     		str	r0, [r7, #4]
1865:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1866:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1867:./Lib/Src/stm32f4xx_rtc.c **** 
1868:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1869:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3235              		.loc 1 1869 6
 3236 0008 0D4B     		ldr	r3, .L188
 3237              		.loc 1 1869 12
 3238 000a CA22     		movs	r2, #202
 3239 000c 5A62     		str	r2, [r3, #36]
1870:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3240              		.loc 1 1870 6
ARM GAS  /tmp/ccHYJizt.s 			page 90


 3241 000e 0C4B     		ldr	r3, .L188
 3242              		.loc 1 1870 12
 3243 0010 5322     		movs	r2, #83
 3244 0012 5A62     		str	r2, [r3, #36]
1871:./Lib/Src/stm32f4xx_rtc.c ****   
1872:./Lib/Src/stm32f4xx_rtc.c ****   /*clear flags before configuration */
1873:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 3245              		.loc 1 1873 6
 3246 0014 0A4B     		ldr	r3, .L188
 3247 0016 9B68     		ldr	r3, [r3, #8]
 3248 0018 094A     		ldr	r2, .L188
 3249              		.loc 1 1873 11
 3250 001a 23F40023 		bic	r3, r3, #524288
 3251 001e 9360     		str	r3, [r2, #8]
1874:./Lib/Src/stm32f4xx_rtc.c **** 
1875:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1876:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 3252              		.loc 1 1876 6
 3253 0020 074B     		ldr	r3, .L188
 3254 0022 9A68     		ldr	r2, [r3, #8]
 3255 0024 0649     		ldr	r1, .L188
 3256              		.loc 1 1876 11
 3257 0026 7B68     		ldr	r3, [r7, #4]
 3258 0028 1343     		orrs	r3, r3, r2
 3259 002a 8B60     		str	r3, [r1, #8]
1877:./Lib/Src/stm32f4xx_rtc.c **** 
1878:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1879:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3260              		.loc 1 1879 6
 3261 002c 044B     		ldr	r3, .L188
 3262              		.loc 1 1879 12
 3263 002e FF22     		movs	r2, #255
 3264 0030 5A62     		str	r2, [r3, #36]
1880:./Lib/Src/stm32f4xx_rtc.c **** }
 3265              		.loc 1 1880 1
 3266 0032 00BF     		nop
 3267 0034 0C37     		adds	r7, r7, #12
 3268              		.cfi_def_cfa_offset 4
 3269 0036 BD46     		mov	sp, r7
 3270              		.cfi_def_cfa_register 13
 3271              		@ sp needed
 3272 0038 5DF8047B 		ldr	r7, [sp], #4
 3273              		.cfi_restore 7
 3274              		.cfi_def_cfa_offset 0
 3275 003c 7047     		bx	lr
 3276              	.L189:
 3277 003e 00BF     		.align	2
 3278              	.L188:
 3279 0040 00280040 		.word	1073752064
 3280              		.cfi_endproc
 3281              	.LFE155:
 3283              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 3284              		.align	1
 3285              		.global	RTC_SmoothCalibConfig
 3286              		.syntax unified
 3287              		.thumb
 3288              		.thumb_func
ARM GAS  /tmp/ccHYJizt.s 			page 91


 3290              	RTC_SmoothCalibConfig:
 3291              	.LFB156:
1881:./Lib/Src/stm32f4xx_rtc.c **** 
1882:./Lib/Src/stm32f4xx_rtc.c **** /**
1883:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1884:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1885:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1886:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration period is 32s.
1887:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration period is 16s.
1888:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibration period is 8s.
1889:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1890:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1891:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK pulse every 2**11 pulses.
1892:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1893:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1894:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1895:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1896:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1897:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1898:./Lib/Src/stm32f4xx_rtc.c **** */
1899:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1900:./Lib/Src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1901:./Lib/Src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1902:./Lib/Src/stm32f4xx_rtc.c **** {
 3292              		.loc 1 1902 1
 3293              		.cfi_startproc
 3294              		@ args = 0, pretend = 0, frame = 24
 3295              		@ frame_needed = 1, uses_anonymous_args = 0
 3296              		@ link register save eliminated.
 3297 0000 80B4     		push	{r7}
 3298              		.cfi_def_cfa_offset 4
 3299              		.cfi_offset 7, -4
 3300 0002 87B0     		sub	sp, sp, #28
 3301              		.cfi_def_cfa_offset 32
 3302 0004 00AF     		add	r7, sp, #0
 3303              		.cfi_def_cfa_register 7
 3304 0006 F860     		str	r0, [r7, #12]
 3305 0008 B960     		str	r1, [r7, #8]
 3306 000a 7A60     		str	r2, [r7, #4]
1903:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3307              		.loc 1 1903 15
 3308 000c 0023     		movs	r3, #0
 3309 000e FB75     		strb	r3, [r7, #23]
1904:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 3310              		.loc 1 1904 12
 3311 0010 0023     		movs	r3, #0
 3312 0012 3B61     		str	r3, [r7, #16]
1905:./Lib/Src/stm32f4xx_rtc.c **** 
1906:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1907:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1908:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1909:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1910:./Lib/Src/stm32f4xx_rtc.c **** 
1911:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1912:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3313              		.loc 1 1912 6
 3314 0014 1A4B     		ldr	r3, .L197
ARM GAS  /tmp/ccHYJizt.s 			page 92


 3315              		.loc 1 1912 12
 3316 0016 CA22     		movs	r2, #202
 3317 0018 5A62     		str	r2, [r3, #36]
1913:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3318              		.loc 1 1913 6
 3319 001a 194B     		ldr	r3, .L197
 3320              		.loc 1 1913 12
 3321 001c 5322     		movs	r2, #83
 3322 001e 5A62     		str	r2, [r3, #36]
1914:./Lib/Src/stm32f4xx_rtc.c ****   
1915:./Lib/Src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1916:./Lib/Src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 3323              		.loc 1 1916 11
 3324 0020 174B     		ldr	r3, .L197
 3325 0022 DB68     		ldr	r3, [r3, #12]
 3326              		.loc 1 1916 17
 3327 0024 03F48033 		and	r3, r3, #65536
 3328              		.loc 1 1916 6
 3329 0028 002B     		cmp	r3, #0
 3330 002a 0DD0     		beq	.L191
1917:./Lib/Src/stm32f4xx_rtc.c ****   {
1918:./Lib/Src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1919:./Lib/Src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3331              		.loc 1 1919 11
 3332 002c 02E0     		b	.L192
 3333              	.L193:
1920:./Lib/Src/stm32f4xx_rtc.c ****     {
1921:./Lib/Src/stm32f4xx_rtc.c ****       recalpfcount++;
 3334              		.loc 1 1921 19
 3335 002e 3B69     		ldr	r3, [r7, #16]
 3336 0030 0133     		adds	r3, r3, #1
 3337 0032 3B61     		str	r3, [r7, #16]
 3338              	.L192:
1919:./Lib/Src/stm32f4xx_rtc.c ****     {
 3339              		.loc 1 1919 17
 3340 0034 124B     		ldr	r3, .L197
 3341 0036 DB68     		ldr	r3, [r3, #12]
1919:./Lib/Src/stm32f4xx_rtc.c ****     {
 3342              		.loc 1 1919 23
 3343 0038 03F48033 		and	r3, r3, #65536
1919:./Lib/Src/stm32f4xx_rtc.c ****     {
 3344              		.loc 1 1919 52
 3345 003c 002B     		cmp	r3, #0
 3346 003e 03D0     		beq	.L191
1919:./Lib/Src/stm32f4xx_rtc.c ****     {
 3347              		.loc 1 1919 52 is_stmt 0 discriminator 1
 3348 0040 3B69     		ldr	r3, [r7, #16]
 3349 0042 B3F5003F 		cmp	r3, #131072
 3350 0046 F2D1     		bne	.L193
 3351              	.L191:
1922:./Lib/Src/stm32f4xx_rtc.c ****     }
1923:./Lib/Src/stm32f4xx_rtc.c ****   }
1924:./Lib/Src/stm32f4xx_rtc.c **** 
1925:./Lib/Src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1926:./Lib/Src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3352              		.loc 1 1926 11 is_stmt 1
 3353 0048 0D4B     		ldr	r3, .L197
ARM GAS  /tmp/ccHYJizt.s 			page 93


 3354 004a DB68     		ldr	r3, [r3, #12]
 3355              		.loc 1 1926 17
 3356 004c 03F48033 		and	r3, r3, #65536
 3357              		.loc 1 1926 6
 3358 0050 002B     		cmp	r3, #0
 3359 0052 09D1     		bne	.L194
1927:./Lib/Src/stm32f4xx_rtc.c ****   {
1928:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1929:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3360              		.loc 1 1929 60
 3361 0054 FA68     		ldr	r2, [r7, #12]
 3362 0056 BB68     		ldr	r3, [r7, #8]
 3363 0058 1A43     		orrs	r2, r2, r3
 3364              		.loc 1 1929 8
 3365 005a 0949     		ldr	r1, .L197
 3366              		.loc 1 1929 17
 3367 005c 7B68     		ldr	r3, [r7, #4]
 3368 005e 1343     		orrs	r3, r3, r2
 3369              		.loc 1 1929 15
 3370 0060 CB63     		str	r3, [r1, #60]
1930:./Lib/Src/stm32f4xx_rtc.c **** 
1931:./Lib/Src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3371              		.loc 1 1931 12
 3372 0062 0123     		movs	r3, #1
 3373 0064 FB75     		strb	r3, [r7, #23]
 3374 0066 01E0     		b	.L195
 3375              	.L194:
1932:./Lib/Src/stm32f4xx_rtc.c ****   }
1933:./Lib/Src/stm32f4xx_rtc.c ****   else
1934:./Lib/Src/stm32f4xx_rtc.c ****   {
1935:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 3376              		.loc 1 1935 12
 3377 0068 0023     		movs	r3, #0
 3378 006a FB75     		strb	r3, [r7, #23]
 3379              	.L195:
1936:./Lib/Src/stm32f4xx_rtc.c ****   }
1937:./Lib/Src/stm32f4xx_rtc.c **** 
1938:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1939:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3380              		.loc 1 1939 6
 3381 006c 044B     		ldr	r3, .L197
 3382              		.loc 1 1939 12
 3383 006e FF22     		movs	r2, #255
 3384 0070 5A62     		str	r2, [r3, #36]
1940:./Lib/Src/stm32f4xx_rtc.c ****   
1941:./Lib/Src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3385              		.loc 1 1941 10
 3386 0072 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1942:./Lib/Src/stm32f4xx_rtc.c **** }
 3387              		.loc 1 1942 1
 3388 0074 1846     		mov	r0, r3
 3389 0076 1C37     		adds	r7, r7, #28
 3390              		.cfi_def_cfa_offset 4
 3391 0078 BD46     		mov	sp, r7
 3392              		.cfi_def_cfa_register 13
 3393              		@ sp needed
 3394 007a 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccHYJizt.s 			page 94


 3395              		.cfi_restore 7
 3396              		.cfi_def_cfa_offset 0
 3397 007e 7047     		bx	lr
 3398              	.L198:
 3399              		.align	2
 3400              	.L197:
 3401 0080 00280040 		.word	1073752064
 3402              		.cfi_endproc
 3403              	.LFE156:
 3405              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3406              		.align	1
 3407              		.global	RTC_TimeStampCmd
 3408              		.syntax unified
 3409              		.thumb
 3410              		.thumb_func
 3412              	RTC_TimeStampCmd:
 3413              	.LFB157:
1943:./Lib/Src/stm32f4xx_rtc.c **** 
1944:./Lib/Src/stm32f4xx_rtc.c **** /**
1945:./Lib/Src/stm32f4xx_rtc.c ****   * @}
1946:./Lib/Src/stm32f4xx_rtc.c ****   */
1947:./Lib/Src/stm32f4xx_rtc.c **** 
1948:./Lib/Src/stm32f4xx_rtc.c **** 
1949:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1950:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1951:./Lib/Src/stm32f4xx_rtc.c ****  *
1952:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
1953:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
1954:./Lib/Src/stm32f4xx_rtc.c ****                  ##### TimeStamp configuration functions #####
1955:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
1956:./Lib/Src/stm32f4xx_rtc.c **** 
1957:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
1958:./Lib/Src/stm32f4xx_rtc.c ****   * @{
1959:./Lib/Src/stm32f4xx_rtc.c ****   */
1960:./Lib/Src/stm32f4xx_rtc.c **** 
1961:./Lib/Src/stm32f4xx_rtc.c **** /**
1962:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1963:./Lib/Src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1964:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1965:./Lib/Src/stm32f4xx_rtc.c ****   *         activated.
1966:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1967:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1968:./Lib/Src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1969:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1970:./Lib/Src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1971:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1972:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1973:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
1974:./Lib/Src/stm32f4xx_rtc.c ****   */
1975:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1976:./Lib/Src/stm32f4xx_rtc.c **** {
 3414              		.loc 1 1976 1
 3415              		.cfi_startproc
 3416              		@ args = 0, pretend = 0, frame = 16
 3417              		@ frame_needed = 1, uses_anonymous_args = 0
 3418              		@ link register save eliminated.
 3419 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccHYJizt.s 			page 95


 3420              		.cfi_def_cfa_offset 4
 3421              		.cfi_offset 7, -4
 3422 0002 85B0     		sub	sp, sp, #20
 3423              		.cfi_def_cfa_offset 24
 3424 0004 00AF     		add	r7, sp, #0
 3425              		.cfi_def_cfa_register 7
 3426 0006 7860     		str	r0, [r7, #4]
 3427 0008 0B46     		mov	r3, r1
 3428 000a FB70     		strb	r3, [r7, #3]
1977:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3429              		.loc 1 1977 12
 3430 000c 0023     		movs	r3, #0
 3431 000e FB60     		str	r3, [r7, #12]
1978:./Lib/Src/stm32f4xx_rtc.c **** 
1979:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
1980:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1981:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1982:./Lib/Src/stm32f4xx_rtc.c **** 
1983:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1984:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3432              		.loc 1 1984 26
 3433 0010 134B     		ldr	r3, .L202
 3434 0012 9B68     		ldr	r3, [r3, #8]
 3435              		.loc 1 1984 10
 3436 0014 23F40063 		bic	r3, r3, #2048
 3437 0018 23F00803 		bic	r3, r3, #8
 3438 001c FB60     		str	r3, [r7, #12]
1985:./Lib/Src/stm32f4xx_rtc.c **** 
1986:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1987:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3439              		.loc 1 1987 6
 3440 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3441 0020 002B     		cmp	r3, #0
 3442 0022 06D0     		beq	.L200
1988:./Lib/Src/stm32f4xx_rtc.c ****   {
1989:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3443              		.loc 1 1989 12
 3444 0024 7A68     		ldr	r2, [r7, #4]
 3445 0026 FB68     		ldr	r3, [r7, #12]
 3446 0028 1343     		orrs	r3, r3, r2
 3447 002a 43F40063 		orr	r3, r3, #2048
 3448 002e FB60     		str	r3, [r7, #12]
 3449 0030 03E0     		b	.L201
 3450              	.L200:
1990:./Lib/Src/stm32f4xx_rtc.c ****   }
1991:./Lib/Src/stm32f4xx_rtc.c ****   else
1992:./Lib/Src/stm32f4xx_rtc.c ****   {
1993:./Lib/Src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3451              		.loc 1 1993 12
 3452 0032 FA68     		ldr	r2, [r7, #12]
 3453 0034 7B68     		ldr	r3, [r7, #4]
 3454 0036 1343     		orrs	r3, r3, r2
 3455 0038 FB60     		str	r3, [r7, #12]
 3456              	.L201:
1994:./Lib/Src/stm32f4xx_rtc.c ****   }
1995:./Lib/Src/stm32f4xx_rtc.c **** 
1996:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
ARM GAS  /tmp/ccHYJizt.s 			page 96


1997:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3457              		.loc 1 1997 6
 3458 003a 094B     		ldr	r3, .L202
 3459              		.loc 1 1997 12
 3460 003c CA22     		movs	r2, #202
 3461 003e 5A62     		str	r2, [r3, #36]
1998:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3462              		.loc 1 1998 6
 3463 0040 074B     		ldr	r3, .L202
 3464              		.loc 1 1998 12
 3465 0042 5322     		movs	r2, #83
 3466 0044 5A62     		str	r2, [r3, #36]
1999:./Lib/Src/stm32f4xx_rtc.c **** 
2000:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
2001:./Lib/Src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3467              		.loc 1 2001 6
 3468 0046 064A     		ldr	r2, .L202
 3469              		.loc 1 2001 11
 3470 0048 FB68     		ldr	r3, [r7, #12]
 3471 004a 9360     		str	r3, [r2, #8]
2002:./Lib/Src/stm32f4xx_rtc.c **** 
2003:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2004:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3472              		.loc 1 2004 6
 3473 004c 044B     		ldr	r3, .L202
 3474              		.loc 1 2004 12
 3475 004e FF22     		movs	r2, #255
 3476 0050 5A62     		str	r2, [r3, #36]
2005:./Lib/Src/stm32f4xx_rtc.c **** }
 3477              		.loc 1 2005 1
 3478 0052 00BF     		nop
 3479 0054 1437     		adds	r7, r7, #20
 3480              		.cfi_def_cfa_offset 4
 3481 0056 BD46     		mov	sp, r7
 3482              		.cfi_def_cfa_register 13
 3483              		@ sp needed
 3484 0058 5DF8047B 		ldr	r7, [sp], #4
 3485              		.cfi_restore 7
 3486              		.cfi_def_cfa_offset 0
 3487 005c 7047     		bx	lr
 3488              	.L203:
 3489 005e 00BF     		.align	2
 3490              	.L202:
 3491 0060 00280040 		.word	1073752064
 3492              		.cfi_endproc
 3493              	.LFE157:
 3495              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3496              		.align	1
 3497              		.global	RTC_GetTimeStamp
 3498              		.syntax unified
 3499              		.thumb
 3500              		.thumb_func
 3502              	RTC_GetTimeStamp:
 3503              	.LFB158:
2006:./Lib/Src/stm32f4xx_rtc.c **** 
2007:./Lib/Src/stm32f4xx_rtc.c **** /**
2008:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
ARM GAS  /tmp/ccHYJizt.s 			page 97


2009:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
2010:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2011:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
2012:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
2013:./Lib/Src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
2014:./Lib/Src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
2015:./Lib/Src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
2016:./Lib/Src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
2017:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2018:./Lib/Src/stm32f4xx_rtc.c ****   */
2019:./Lib/Src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2020:./Lib/Src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2021:./Lib/Src/stm32f4xx_rtc.c **** {
 3504              		.loc 1 2021 1
 3505              		.cfi_startproc
 3506              		@ args = 0, pretend = 0, frame = 24
 3507              		@ frame_needed = 1, uses_anonymous_args = 0
 3508 0000 80B5     		push	{r7, lr}
 3509              		.cfi_def_cfa_offset 8
 3510              		.cfi_offset 7, -8
 3511              		.cfi_offset 14, -4
 3512 0002 86B0     		sub	sp, sp, #24
 3513              		.cfi_def_cfa_offset 32
 3514 0004 00AF     		add	r7, sp, #0
 3515              		.cfi_def_cfa_register 7
 3516 0006 F860     		str	r0, [r7, #12]
 3517 0008 B960     		str	r1, [r7, #8]
 3518 000a 7A60     		str	r2, [r7, #4]
2022:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3519              		.loc 1 2022 12
 3520 000c 0023     		movs	r3, #0
 3521 000e 7B61     		str	r3, [r7, #20]
 3522              		.loc 1 2022 25
 3523 0010 0023     		movs	r3, #0
 3524 0012 3B61     		str	r3, [r7, #16]
2023:./Lib/Src/stm32f4xx_rtc.c **** 
2024:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2025:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2026:./Lib/Src/stm32f4xx_rtc.c **** 
2027:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2028:./Lib/Src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3525              		.loc 1 2028 27
 3526 0014 414B     		ldr	r3, .L207
 3527 0016 1B6B     		ldr	r3, [r3, #48]
 3528              		.loc 1 2028 11
 3529 0018 03F07F33 		and	r3, r3, #2139062143
 3530 001c 23F0FE43 		bic	r3, r3, #2130706432
 3531 0020 7B61     		str	r3, [r7, #20]
2029:./Lib/Src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3532              		.loc 1 2029 27
 3533 0022 3E4B     		ldr	r3, .L207
 3534 0024 5B6B     		ldr	r3, [r3, #52]
 3535              		.loc 1 2029 11
 3536 0026 23F07F43 		bic	r3, r3, #-16777216
 3537 002a 23F0C003 		bic	r3, r3, #192
 3538 002e 3B61     		str	r3, [r7, #16]
2030:./Lib/Src/stm32f4xx_rtc.c **** 
ARM GAS  /tmp/ccHYJizt.s 			page 98


2031:./Lib/Src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2032:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3539              		.loc 1 2032 82
 3540 0030 7B69     		ldr	r3, [r7, #20]
 3541 0032 1B0C     		lsrs	r3, r3, #16
 3542              		.loc 1 2032 36
 3543 0034 DBB2     		uxtb	r3, r3
 3544 0036 03F03F03 		and	r3, r3, #63
 3545 003a DAB2     		uxtb	r2, r3
 3546              		.loc 1 2032 34
 3547 003c BB68     		ldr	r3, [r7, #8]
 3548 003e 1A70     		strb	r2, [r3]
2033:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3549              		.loc 1 2033 86
 3550 0040 7B69     		ldr	r3, [r7, #20]
 3551 0042 1B0A     		lsrs	r3, r3, #8
 3552              		.loc 1 2033 38
 3553 0044 DBB2     		uxtb	r3, r3
 3554 0046 03F07F03 		and	r3, r3, #127
 3555 004a DAB2     		uxtb	r2, r3
 3556              		.loc 1 2033 36
 3557 004c BB68     		ldr	r3, [r7, #8]
 3558 004e 5A70     		strb	r2, [r3, #1]
2034:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3559              		.loc 1 2034 38
 3560 0050 7B69     		ldr	r3, [r7, #20]
 3561 0052 DBB2     		uxtb	r3, r3
 3562 0054 03F07F03 		and	r3, r3, #127
 3563 0058 DAB2     		uxtb	r2, r3
 3564              		.loc 1 2034 36
 3565 005a BB68     		ldr	r3, [r7, #8]
 3566 005c 9A70     		strb	r2, [r3, #2]
2035:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3567              		.loc 1 2035 68
 3568 005e 7B69     		ldr	r3, [r7, #20]
 3569 0060 1B0C     		lsrs	r3, r3, #16
 3570              		.loc 1 2035 34
 3571 0062 DBB2     		uxtb	r3, r3
 3572 0064 03F04003 		and	r3, r3, #64
 3573 0068 DAB2     		uxtb	r2, r3
 3574              		.loc 1 2035 32
 3575 006a BB68     		ldr	r3, [r7, #8]
 3576 006c DA70     		strb	r2, [r3, #3]
2036:./Lib/Src/stm32f4xx_rtc.c **** 
2037:./Lib/Src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2038:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3577              		.loc 1 2038 33
 3578 006e 7B68     		ldr	r3, [r7, #4]
 3579 0070 0022     		movs	r2, #0
 3580 0072 DA70     		strb	r2, [r3, #3]
2039:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3581              		.loc 1 2039 82
 3582 0074 3B69     		ldr	r3, [r7, #16]
 3583 0076 1B0A     		lsrs	r3, r3, #8
 3584              		.loc 1 2039 36
 3585 0078 DBB2     		uxtb	r3, r3
 3586 007a 03F01F03 		and	r3, r3, #31
ARM GAS  /tmp/ccHYJizt.s 			page 99


 3587 007e DAB2     		uxtb	r2, r3
 3588              		.loc 1 2039 34
 3589 0080 7B68     		ldr	r3, [r7, #4]
 3590 0082 5A70     		strb	r2, [r3, #1]
2040:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3591              		.loc 1 2040 35
 3592 0084 3B69     		ldr	r3, [r7, #16]
 3593 0086 DBB2     		uxtb	r3, r3
 3594 0088 03F03F03 		and	r3, r3, #63
 3595 008c DAB2     		uxtb	r2, r3
 3596              		.loc 1 2040 33
 3597 008e 7B68     		ldr	r3, [r7, #4]
 3598 0090 9A70     		strb	r2, [r3, #2]
2041:./Lib/Src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3599              		.loc 1 2041 73
 3600 0092 3B69     		ldr	r3, [r7, #16]
 3601 0094 5B0B     		lsrs	r3, r3, #13
 3602              		.loc 1 2041 38
 3603 0096 DBB2     		uxtb	r3, r3
 3604 0098 03F00703 		and	r3, r3, #7
 3605 009c DAB2     		uxtb	r2, r3
 3606              		.loc 1 2041 36
 3607 009e 7B68     		ldr	r3, [r7, #4]
 3608 00a0 1A70     		strb	r2, [r3]
2042:./Lib/Src/stm32f4xx_rtc.c **** 
2043:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2044:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3609              		.loc 1 2044 6
 3610 00a2 FB68     		ldr	r3, [r7, #12]
 3611 00a4 002B     		cmp	r3, #0
 3612 00a6 35D1     		bne	.L206
2045:./Lib/Src/stm32f4xx_rtc.c ****   {
2046:./Lib/Src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2047:./Lib/Src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3613              		.loc 1 2047 47
 3614 00a8 BB68     		ldr	r3, [r7, #8]
 3615 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3616 00ac 1846     		mov	r0, r3
 3617 00ae FFF7FEFF 		bl	RTC_Bcd2ToByte
 3618 00b2 0346     		mov	r3, r0
 3619 00b4 1A46     		mov	r2, r3
 3620              		.loc 1 2047 36
 3621 00b6 BB68     		ldr	r3, [r7, #8]
 3622 00b8 1A70     		strb	r2, [r3]
2048:./Lib/Src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3623              		.loc 1 2048 49
 3624 00ba BB68     		ldr	r3, [r7, #8]
 3625 00bc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3626 00be 1846     		mov	r0, r3
 3627 00c0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3628 00c4 0346     		mov	r3, r0
 3629 00c6 1A46     		mov	r2, r3
 3630              		.loc 1 2048 38
 3631 00c8 BB68     		ldr	r3, [r7, #8]
 3632 00ca 5A70     		strb	r2, [r3, #1]
2049:./Lib/Src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3633              		.loc 1 2049 49
ARM GAS  /tmp/ccHYJizt.s 			page 100


 3634 00cc BB68     		ldr	r3, [r7, #8]
 3635 00ce 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3636 00d0 1846     		mov	r0, r3
 3637 00d2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3638 00d6 0346     		mov	r3, r0
 3639 00d8 1A46     		mov	r2, r3
 3640              		.loc 1 2049 38
 3641 00da BB68     		ldr	r3, [r7, #8]
 3642 00dc 9A70     		strb	r2, [r3, #2]
2050:./Lib/Src/stm32f4xx_rtc.c **** 
2051:./Lib/Src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2052:./Lib/Src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3643              		.loc 1 2052 47
 3644 00de 7B68     		ldr	r3, [r7, #4]
 3645 00e0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3646 00e2 1846     		mov	r0, r3
 3647 00e4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3648 00e8 0346     		mov	r3, r0
 3649 00ea 1A46     		mov	r2, r3
 3650              		.loc 1 2052 36
 3651 00ec 7B68     		ldr	r3, [r7, #4]
 3652 00ee 5A70     		strb	r2, [r3, #1]
2053:./Lib/Src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3653              		.loc 1 2053 46
 3654 00f0 7B68     		ldr	r3, [r7, #4]
 3655 00f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3656 00f4 1846     		mov	r0, r3
 3657 00f6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3658 00fa 0346     		mov	r3, r0
 3659 00fc 1A46     		mov	r2, r3
 3660              		.loc 1 2053 35
 3661 00fe 7B68     		ldr	r3, [r7, #4]
 3662 0100 9A70     		strb	r2, [r3, #2]
2054:./Lib/Src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3663              		.loc 1 2054 49
 3664 0102 7B68     		ldr	r3, [r7, #4]
 3665 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3666 0106 1846     		mov	r0, r3
 3667 0108 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3668 010c 0346     		mov	r3, r0
 3669 010e 1A46     		mov	r2, r3
 3670              		.loc 1 2054 38
 3671 0110 7B68     		ldr	r3, [r7, #4]
 3672 0112 1A70     		strb	r2, [r3]
 3673              	.L206:
2055:./Lib/Src/stm32f4xx_rtc.c ****   }
2056:./Lib/Src/stm32f4xx_rtc.c **** }
 3674              		.loc 1 2056 1
 3675 0114 00BF     		nop
 3676 0116 1837     		adds	r7, r7, #24
 3677              		.cfi_def_cfa_offset 8
 3678 0118 BD46     		mov	sp, r7
 3679              		.cfi_def_cfa_register 13
 3680              		@ sp needed
 3681 011a 80BD     		pop	{r7, pc}
 3682              	.L208:
 3683              		.align	2
ARM GAS  /tmp/ccHYJizt.s 			page 101


 3684              	.L207:
 3685 011c 00280040 		.word	1073752064
 3686              		.cfi_endproc
 3687              	.LFE158:
 3689              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3690              		.align	1
 3691              		.global	RTC_GetTimeStampSubSecond
 3692              		.syntax unified
 3693              		.thumb
 3694              		.thumb_func
 3696              	RTC_GetTimeStampSubSecond:
 3697              	.LFB159:
2057:./Lib/Src/stm32f4xx_rtc.c **** 
2058:./Lib/Src/stm32f4xx_rtc.c **** /**
2059:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Sub seconds value.
2060:./Lib/Src/stm32f4xx_rtc.c ****   * @param  None
2061:./Lib/Src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Sub seconds value.
2062:./Lib/Src/stm32f4xx_rtc.c ****   */
2063:./Lib/Src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2064:./Lib/Src/stm32f4xx_rtc.c **** {
 3698              		.loc 1 2064 1
 3699              		.cfi_startproc
 3700              		@ args = 0, pretend = 0, frame = 0
 3701              		@ frame_needed = 1, uses_anonymous_args = 0
 3702              		@ link register save eliminated.
 3703 0000 80B4     		push	{r7}
 3704              		.cfi_def_cfa_offset 4
 3705              		.cfi_offset 7, -4
 3706 0002 00AF     		add	r7, sp, #0
 3707              		.cfi_def_cfa_register 7
2065:./Lib/Src/stm32f4xx_rtc.c ****   /* Get timestamp sub seconds values from the correspondent registers */
2066:./Lib/Src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3708              		.loc 1 2066 24
 3709 0004 034B     		ldr	r3, .L211
 3710              		.loc 1 2066 10
 3711 0006 9B6B     		ldr	r3, [r3, #56]
2067:./Lib/Src/stm32f4xx_rtc.c **** }
 3712              		.loc 1 2067 1
 3713 0008 1846     		mov	r0, r3
 3714 000a BD46     		mov	sp, r7
 3715              		.cfi_def_cfa_register 13
 3716              		@ sp needed
 3717 000c 5DF8047B 		ldr	r7, [sp], #4
 3718              		.cfi_restore 7
 3719              		.cfi_def_cfa_offset 0
 3720 0010 7047     		bx	lr
 3721              	.L212:
 3722 0012 00BF     		.align	2
 3723              	.L211:
 3724 0014 00280040 		.word	1073752064
 3725              		.cfi_endproc
 3726              	.LFE159:
 3728              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3729              		.align	1
 3730              		.global	RTC_TamperTriggerConfig
 3731              		.syntax unified
 3732              		.thumb
ARM GAS  /tmp/ccHYJizt.s 			page 102


 3733              		.thumb_func
 3735              	RTC_TamperTriggerConfig:
 3736              	.LFB160:
2068:./Lib/Src/stm32f4xx_rtc.c **** 
2069:./Lib/Src/stm32f4xx_rtc.c **** /**
2070:./Lib/Src/stm32f4xx_rtc.c ****   * @}
2071:./Lib/Src/stm32f4xx_rtc.c ****   */
2072:./Lib/Src/stm32f4xx_rtc.c **** 
2073:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2074:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2075:./Lib/Src/stm32f4xx_rtc.c ****  *
2076:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
2077:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
2078:./Lib/Src/stm32f4xx_rtc.c ****                  ##### Tampers configuration functions #####
2079:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
2080:./Lib/Src/stm32f4xx_rtc.c **** 
2081:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
2082:./Lib/Src/stm32f4xx_rtc.c ****   * @{
2083:./Lib/Src/stm32f4xx_rtc.c ****   */
2084:./Lib/Src/stm32f4xx_rtc.c **** 
2085:./Lib/Src/stm32f4xx_rtc.c **** /**
2086:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2087:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2088:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper 2
2089:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2090:./Lib/Src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2091:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2092:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2093:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2094:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2095:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2096:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2097:./Lib/Src/stm32f4xx_rtc.c ****   */
2098:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2099:./Lib/Src/stm32f4xx_rtc.c **** {
 3737              		.loc 1 2099 1
 3738              		.cfi_startproc
 3739              		@ args = 0, pretend = 0, frame = 8
 3740              		@ frame_needed = 1, uses_anonymous_args = 0
 3741              		@ link register save eliminated.
 3742 0000 80B4     		push	{r7}
 3743              		.cfi_def_cfa_offset 4
 3744              		.cfi_offset 7, -4
 3745 0002 83B0     		sub	sp, sp, #12
 3746              		.cfi_def_cfa_offset 16
 3747 0004 00AF     		add	r7, sp, #0
 3748              		.cfi_def_cfa_register 7
 3749 0006 7860     		str	r0, [r7, #4]
 3750 0008 3960     		str	r1, [r7]
2100:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2101:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2102:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2103:./Lib/Src/stm32f4xx_rtc.c ****  
2104:./Lib/Src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3751              		.loc 1 2104 6
 3752 000a 3B68     		ldr	r3, [r7]
 3753 000c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHYJizt.s 			page 103


 3754 000e 08D1     		bne	.L214
2105:./Lib/Src/stm32f4xx_rtc.c ****   {  
2106:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2107:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3755              		.loc 1 2107 8
 3756 0010 0A4B     		ldr	r3, .L217
 3757 0012 1A6C     		ldr	r2, [r3, #64]
 3758              		.loc 1 2107 53
 3759 0014 7B68     		ldr	r3, [r7, #4]
 3760 0016 5B00     		lsls	r3, r3, #1
 3761              		.loc 1 2107 40
 3762 0018 DB43     		mvns	r3, r3
 3763              		.loc 1 2107 8
 3764 001a 0849     		ldr	r1, .L217
 3765              		.loc 1 2107 16
 3766 001c 1340     		ands	r3, r3, r2
 3767 001e 0B64     		str	r3, [r1, #64]
2108:./Lib/Src/stm32f4xx_rtc.c ****   }
2109:./Lib/Src/stm32f4xx_rtc.c ****   else
2110:./Lib/Src/stm32f4xx_rtc.c ****   { 
2111:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2112:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2113:./Lib/Src/stm32f4xx_rtc.c ****   }  
2114:./Lib/Src/stm32f4xx_rtc.c **** }
 3768              		.loc 1 2114 1
 3769 0020 06E0     		b	.L216
 3770              	.L214:
2112:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3771              		.loc 1 2112 8
 3772 0022 064B     		ldr	r3, .L217
 3773 0024 1A6C     		ldr	r2, [r3, #64]
2112:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3774              		.loc 1 2112 41
 3775 0026 7B68     		ldr	r3, [r7, #4]
 3776 0028 5B00     		lsls	r3, r3, #1
2112:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3777              		.loc 1 2112 8
 3778 002a 0449     		ldr	r1, .L217
2112:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3779              		.loc 1 2112 16
 3780 002c 1343     		orrs	r3, r3, r2
 3781 002e 0B64     		str	r3, [r1, #64]
 3782              	.L216:
 3783              		.loc 1 2114 1
 3784 0030 00BF     		nop
 3785 0032 0C37     		adds	r7, r7, #12
 3786              		.cfi_def_cfa_offset 4
 3787 0034 BD46     		mov	sp, r7
 3788              		.cfi_def_cfa_register 13
 3789              		@ sp needed
 3790 0036 5DF8047B 		ldr	r7, [sp], #4
 3791              		.cfi_restore 7
 3792              		.cfi_def_cfa_offset 0
 3793 003a 7047     		bx	lr
 3794              	.L218:
 3795              		.align	2
 3796              	.L217:
ARM GAS  /tmp/ccHYJizt.s 			page 104


 3797 003c 00280040 		.word	1073752064
 3798              		.cfi_endproc
 3799              	.LFE160:
 3801              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3802              		.align	1
 3803              		.global	RTC_TamperCmd
 3804              		.syntax unified
 3805              		.thumb
 3806              		.thumb_func
 3808              	RTC_TamperCmd:
 3809              	.LFB161:
2115:./Lib/Src/stm32f4xx_rtc.c **** 
2116:./Lib/Src/stm32f4xx_rtc.c **** /**
2117:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2118:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2119:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1 or RTC_Tamper_2
2120:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2121:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2122:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2123:./Lib/Src/stm32f4xx_rtc.c ****   */
2124:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2125:./Lib/Src/stm32f4xx_rtc.c **** {
 3810              		.loc 1 2125 1
 3811              		.cfi_startproc
 3812              		@ args = 0, pretend = 0, frame = 8
 3813              		@ frame_needed = 1, uses_anonymous_args = 0
 3814              		@ link register save eliminated.
 3815 0000 80B4     		push	{r7}
 3816              		.cfi_def_cfa_offset 4
 3817              		.cfi_offset 7, -4
 3818 0002 83B0     		sub	sp, sp, #12
 3819              		.cfi_def_cfa_offset 16
 3820 0004 00AF     		add	r7, sp, #0
 3821              		.cfi_def_cfa_register 7
 3822 0006 7860     		str	r0, [r7, #4]
 3823 0008 0B46     		mov	r3, r1
 3824 000a FB70     		strb	r3, [r7, #3]
2126:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2127:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2128:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2129:./Lib/Src/stm32f4xx_rtc.c ****   
2130:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3825              		.loc 1 2130 6
 3826 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3827 000e 002B     		cmp	r3, #0
 3828 0010 06D0     		beq	.L220
2131:./Lib/Src/stm32f4xx_rtc.c ****   {
2132:./Lib/Src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2133:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3829              		.loc 1 2133 8
 3830 0012 0A4B     		ldr	r3, .L223
 3831 0014 1A6C     		ldr	r2, [r3, #64]
 3832 0016 0949     		ldr	r1, .L223
 3833              		.loc 1 2133 16
 3834 0018 7B68     		ldr	r3, [r7, #4]
 3835 001a 1343     		orrs	r3, r3, r2
 3836 001c 0B64     		str	r3, [r1, #64]
ARM GAS  /tmp/ccHYJizt.s 			page 105


2134:./Lib/Src/stm32f4xx_rtc.c ****   }
2135:./Lib/Src/stm32f4xx_rtc.c ****   else
2136:./Lib/Src/stm32f4xx_rtc.c ****   {
2137:./Lib/Src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2138:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2139:./Lib/Src/stm32f4xx_rtc.c ****   }  
2140:./Lib/Src/stm32f4xx_rtc.c **** }
 3837              		.loc 1 2140 1
 3838 001e 06E0     		b	.L222
 3839              	.L220:
2138:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3840              		.loc 1 2138 8
 3841 0020 064B     		ldr	r3, .L223
 3842 0022 1A6C     		ldr	r2, [r3, #64]
2138:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3843              		.loc 1 2138 29
 3844 0024 7B68     		ldr	r3, [r7, #4]
 3845 0026 DB43     		mvns	r3, r3
2138:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3846              		.loc 1 2138 8
 3847 0028 0449     		ldr	r1, .L223
2138:./Lib/Src/stm32f4xx_rtc.c ****   }  
 3848              		.loc 1 2138 16
 3849 002a 1340     		ands	r3, r3, r2
 3850 002c 0B64     		str	r3, [r1, #64]
 3851              	.L222:
 3852              		.loc 1 2140 1
 3853 002e 00BF     		nop
 3854 0030 0C37     		adds	r7, r7, #12
 3855              		.cfi_def_cfa_offset 4
 3856 0032 BD46     		mov	sp, r7
 3857              		.cfi_def_cfa_register 13
 3858              		@ sp needed
 3859 0034 5DF8047B 		ldr	r7, [sp], #4
 3860              		.cfi_restore 7
 3861              		.cfi_def_cfa_offset 0
 3862 0038 7047     		bx	lr
 3863              	.L224:
 3864 003a 00BF     		.align	2
 3865              	.L223:
 3866 003c 00280040 		.word	1073752064
 3867              		.cfi_endproc
 3868              	.LFE161:
 3870              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3871              		.align	1
 3872              		.global	RTC_TamperFilterConfig
 3873              		.syntax unified
 3874              		.thumb
 3875              		.thumb_func
 3877              	RTC_TamperFilterConfig:
 3878              	.LFB162:
2141:./Lib/Src/stm32f4xx_rtc.c **** 
2142:./Lib/Src/stm32f4xx_rtc.c **** /**
2143:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2144:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2145:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2146:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
ARM GAS  /tmp/ccHYJizt.s 			page 106


2147:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2148:./Lib/Src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2149:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2150:./Lib/Src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2151:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2152:./Lib/Src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2153:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2154:./Lib/Src/stm32f4xx_rtc.c ****   */
2155:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2156:./Lib/Src/stm32f4xx_rtc.c **** {
 3879              		.loc 1 2156 1
 3880              		.cfi_startproc
 3881              		@ args = 0, pretend = 0, frame = 8
 3882              		@ frame_needed = 1, uses_anonymous_args = 0
 3883              		@ link register save eliminated.
 3884 0000 80B4     		push	{r7}
 3885              		.cfi_def_cfa_offset 4
 3886              		.cfi_offset 7, -4
 3887 0002 83B0     		sub	sp, sp, #12
 3888              		.cfi_def_cfa_offset 16
 3889 0004 00AF     		add	r7, sp, #0
 3890              		.cfi_def_cfa_register 7
 3891 0006 7860     		str	r0, [r7, #4]
2157:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2158:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2159:./Lib/Src/stm32f4xx_rtc.c ****    
2160:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2161:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3892              		.loc 1 2161 6
 3893 0008 084B     		ldr	r3, .L226
 3894 000a 1B6C     		ldr	r3, [r3, #64]
 3895 000c 074A     		ldr	r2, .L226
 3896              		.loc 1 2161 14
 3897 000e 23F4C053 		bic	r3, r3, #6144
 3898 0012 1364     		str	r3, [r2, #64]
2162:./Lib/Src/stm32f4xx_rtc.c **** 
2163:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2164:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3899              		.loc 1 2164 6
 3900 0014 054B     		ldr	r3, .L226
 3901 0016 1A6C     		ldr	r2, [r3, #64]
 3902 0018 0449     		ldr	r1, .L226
 3903              		.loc 1 2164 14
 3904 001a 7B68     		ldr	r3, [r7, #4]
 3905 001c 1343     		orrs	r3, r3, r2
 3906 001e 0B64     		str	r3, [r1, #64]
2165:./Lib/Src/stm32f4xx_rtc.c **** }
 3907              		.loc 1 2165 1
 3908 0020 00BF     		nop
 3909 0022 0C37     		adds	r7, r7, #12
 3910              		.cfi_def_cfa_offset 4
 3911 0024 BD46     		mov	sp, r7
 3912              		.cfi_def_cfa_register 13
 3913              		@ sp needed
 3914 0026 5DF8047B 		ldr	r7, [sp], #4
 3915              		.cfi_restore 7
 3916              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccHYJizt.s 			page 107


 3917 002a 7047     		bx	lr
 3918              	.L227:
 3919              		.align	2
 3920              	.L226:
 3921 002c 00280040 		.word	1073752064
 3922              		.cfi_endproc
 3923              	.LFE162:
 3925              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3926              		.align	1
 3927              		.global	RTC_TamperSamplingFreqConfig
 3928              		.syntax unified
 3929              		.thumb
 3930              		.thumb_func
 3932              	RTC_TamperSamplingFreqConfig:
 3933              	.LFB163:
2166:./Lib/Src/stm32f4xx_rtc.c **** 
2167:./Lib/Src/stm32f4xx_rtc.c **** /**
2168:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2169:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2170:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2171:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2172:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2173:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2174:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2175:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2176:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2177:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2178:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2179:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2180:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2181:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2182:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2183:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2184:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2185:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2186:./Lib/Src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2187:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2188:./Lib/Src/stm32f4xx_rtc.c ****   */
2189:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2190:./Lib/Src/stm32f4xx_rtc.c **** {
 3934              		.loc 1 2190 1
 3935              		.cfi_startproc
 3936              		@ args = 0, pretend = 0, frame = 8
 3937              		@ frame_needed = 1, uses_anonymous_args = 0
 3938              		@ link register save eliminated.
 3939 0000 80B4     		push	{r7}
 3940              		.cfi_def_cfa_offset 4
 3941              		.cfi_offset 7, -4
 3942 0002 83B0     		sub	sp, sp, #12
 3943              		.cfi_def_cfa_offset 16
 3944 0004 00AF     		add	r7, sp, #0
 3945              		.cfi_def_cfa_register 7
 3946 0006 7860     		str	r0, [r7, #4]
2191:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2192:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2193:./Lib/Src/stm32f4xx_rtc.c ****  
2194:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
ARM GAS  /tmp/ccHYJizt.s 			page 108


2195:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3947              		.loc 1 2195 6
 3948 0008 084B     		ldr	r3, .L229
 3949 000a 1B6C     		ldr	r3, [r3, #64]
 3950 000c 074A     		ldr	r2, .L229
 3951              		.loc 1 2195 14
 3952 000e 23F4E063 		bic	r3, r3, #1792
 3953 0012 1364     		str	r3, [r2, #64]
2196:./Lib/Src/stm32f4xx_rtc.c **** 
2197:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2198:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3954              		.loc 1 2198 6
 3955 0014 054B     		ldr	r3, .L229
 3956 0016 1A6C     		ldr	r2, [r3, #64]
 3957 0018 0449     		ldr	r1, .L229
 3958              		.loc 1 2198 14
 3959 001a 7B68     		ldr	r3, [r7, #4]
 3960 001c 1343     		orrs	r3, r3, r2
 3961 001e 0B64     		str	r3, [r1, #64]
2199:./Lib/Src/stm32f4xx_rtc.c **** }
 3962              		.loc 1 2199 1
 3963 0020 00BF     		nop
 3964 0022 0C37     		adds	r7, r7, #12
 3965              		.cfi_def_cfa_offset 4
 3966 0024 BD46     		mov	sp, r7
 3967              		.cfi_def_cfa_register 13
 3968              		@ sp needed
 3969 0026 5DF8047B 		ldr	r7, [sp], #4
 3970              		.cfi_restore 7
 3971              		.cfi_def_cfa_offset 0
 3972 002a 7047     		bx	lr
 3973              	.L230:
 3974              		.align	2
 3975              	.L229:
 3976 002c 00280040 		.word	1073752064
 3977              		.cfi_endproc
 3978              	.LFE163:
 3980              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3981              		.align	1
 3982              		.global	RTC_TamperPinsPrechargeDuration
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3987              	RTC_TamperPinsPrechargeDuration:
 3988              	.LFB164:
2200:./Lib/Src/stm32f4xx_rtc.c **** 
2201:./Lib/Src/stm32f4xx_rtc.c **** /**
2202:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2203:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2204:./Lib/Src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2205:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2206:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are precharged before sampling during
2207:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are precharged before sampling during
2208:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during
2209:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during
2210:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2211:./Lib/Src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/ccHYJizt.s 			page 109


2212:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2213:./Lib/Src/stm32f4xx_rtc.c **** {
 3989              		.loc 1 2213 1
 3990              		.cfi_startproc
 3991              		@ args = 0, pretend = 0, frame = 8
 3992              		@ frame_needed = 1, uses_anonymous_args = 0
 3993              		@ link register save eliminated.
 3994 0000 80B4     		push	{r7}
 3995              		.cfi_def_cfa_offset 4
 3996              		.cfi_offset 7, -4
 3997 0002 83B0     		sub	sp, sp, #12
 3998              		.cfi_def_cfa_offset 16
 3999 0004 00AF     		add	r7, sp, #0
 4000              		.cfi_def_cfa_register 7
 4001 0006 7860     		str	r0, [r7, #4]
2214:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2216:./Lib/Src/stm32f4xx_rtc.c ****    
2217:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2218:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 4002              		.loc 1 2218 6
 4003 0008 084B     		ldr	r3, .L232
 4004 000a 1B6C     		ldr	r3, [r3, #64]
 4005 000c 074A     		ldr	r2, .L232
 4006              		.loc 1 2218 14
 4007 000e 23F4C043 		bic	r3, r3, #24576
 4008 0012 1364     		str	r3, [r2, #64]
2219:./Lib/Src/stm32f4xx_rtc.c **** 
2220:./Lib/Src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2221:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 4009              		.loc 1 2221 6
 4010 0014 054B     		ldr	r3, .L232
 4011 0016 1A6C     		ldr	r2, [r3, #64]
 4012 0018 0449     		ldr	r1, .L232
 4013              		.loc 1 2221 14
 4014 001a 7B68     		ldr	r3, [r7, #4]
 4015 001c 1343     		orrs	r3, r3, r2
 4016 001e 0B64     		str	r3, [r1, #64]
2222:./Lib/Src/stm32f4xx_rtc.c **** }
 4017              		.loc 1 2222 1
 4018 0020 00BF     		nop
 4019 0022 0C37     		adds	r7, r7, #12
 4020              		.cfi_def_cfa_offset 4
 4021 0024 BD46     		mov	sp, r7
 4022              		.cfi_def_cfa_register 13
 4023              		@ sp needed
 4024 0026 5DF8047B 		ldr	r7, [sp], #4
 4025              		.cfi_restore 7
 4026              		.cfi_def_cfa_offset 0
 4027 002a 7047     		bx	lr
 4028              	.L233:
 4029              		.align	2
 4030              	.L232:
 4031 002c 00280040 		.word	1073752064
 4032              		.cfi_endproc
 4033              	.LFE164:
 4035              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
ARM GAS  /tmp/ccHYJizt.s 			page 110


 4036              		.align	1
 4037              		.global	RTC_TimeStampOnTamperDetectionCmd
 4038              		.syntax unified
 4039              		.thumb
 4040              		.thumb_func
 4042              	RTC_TimeStampOnTamperDetectionCmd:
 4043              	.LFB165:
2223:./Lib/Src/stm32f4xx_rtc.c **** 
2224:./Lib/Src/stm32f4xx_rtc.c **** /**
2225:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2226:./Lib/Src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2227:./Lib/Src/stm32f4xx_rtc.c ****   *         is reset.   
2228:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2229:./Lib/Src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2230:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2231:./Lib/Src/stm32f4xx_rtc.c ****   */
2232:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2233:./Lib/Src/stm32f4xx_rtc.c **** {
 4044              		.loc 1 2233 1
 4045              		.cfi_startproc
 4046              		@ args = 0, pretend = 0, frame = 8
 4047              		@ frame_needed = 1, uses_anonymous_args = 0
 4048              		@ link register save eliminated.
 4049 0000 80B4     		push	{r7}
 4050              		.cfi_def_cfa_offset 4
 4051              		.cfi_offset 7, -4
 4052 0002 83B0     		sub	sp, sp, #12
 4053              		.cfi_def_cfa_offset 16
 4054 0004 00AF     		add	r7, sp, #0
 4055              		.cfi_def_cfa_register 7
 4056 0006 0346     		mov	r3, r0
 4057 0008 FB71     		strb	r3, [r7, #7]
2234:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2235:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2236:./Lib/Src/stm32f4xx_rtc.c ****    
2237:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4058              		.loc 1 2237 6
 4059 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4060 000c 002B     		cmp	r3, #0
 4061 000e 06D0     		beq	.L235
2238:./Lib/Src/stm32f4xx_rtc.c ****   {
2239:./Lib/Src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2240:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 4062              		.loc 1 2240 8
 4063 0010 094B     		ldr	r3, .L238
 4064 0012 1B6C     		ldr	r3, [r3, #64]
 4065 0014 084A     		ldr	r2, .L238
 4066              		.loc 1 2240 16
 4067 0016 43F08003 		orr	r3, r3, #128
 4068 001a 1364     		str	r3, [r2, #64]
2241:./Lib/Src/stm32f4xx_rtc.c ****   }
2242:./Lib/Src/stm32f4xx_rtc.c ****   else
2243:./Lib/Src/stm32f4xx_rtc.c ****   {
2244:./Lib/Src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2245:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2246:./Lib/Src/stm32f4xx_rtc.c ****   }
2247:./Lib/Src/stm32f4xx_rtc.c **** }
ARM GAS  /tmp/ccHYJizt.s 			page 111


 4069              		.loc 1 2247 1
 4070 001c 05E0     		b	.L237
 4071              	.L235:
2245:./Lib/Src/stm32f4xx_rtc.c ****   }
 4072              		.loc 1 2245 8
 4073 001e 064B     		ldr	r3, .L238
 4074 0020 1B6C     		ldr	r3, [r3, #64]
 4075 0022 054A     		ldr	r2, .L238
2245:./Lib/Src/stm32f4xx_rtc.c ****   }
 4076              		.loc 1 2245 16
 4077 0024 23F08003 		bic	r3, r3, #128
 4078 0028 1364     		str	r3, [r2, #64]
 4079              	.L237:
 4080              		.loc 1 2247 1
 4081 002a 00BF     		nop
 4082 002c 0C37     		adds	r7, r7, #12
 4083              		.cfi_def_cfa_offset 4
 4084 002e BD46     		mov	sp, r7
 4085              		.cfi_def_cfa_register 13
 4086              		@ sp needed
 4087 0030 5DF8047B 		ldr	r7, [sp], #4
 4088              		.cfi_restore 7
 4089              		.cfi_def_cfa_offset 0
 4090 0034 7047     		bx	lr
 4091              	.L239:
 4092 0036 00BF     		.align	2
 4093              	.L238:
 4094 0038 00280040 		.word	1073752064
 4095              		.cfi_endproc
 4096              	.LFE165:
 4098              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 4099              		.align	1
 4100              		.global	RTC_TamperPullUpCmd
 4101              		.syntax unified
 4102              		.thumb
 4103              		.thumb_func
 4105              	RTC_TamperPullUpCmd:
 4106              	.LFB166:
2248:./Lib/Src/stm32f4xx_rtc.c **** 
2249:./Lib/Src/stm32f4xx_rtc.c **** /**
2250:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2251:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2252:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2253:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2254:./Lib/Src/stm32f4xx_rtc.c ****   */
2255:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2256:./Lib/Src/stm32f4xx_rtc.c **** {
 4107              		.loc 1 2256 1
 4108              		.cfi_startproc
 4109              		@ args = 0, pretend = 0, frame = 8
 4110              		@ frame_needed = 1, uses_anonymous_args = 0
 4111              		@ link register save eliminated.
 4112 0000 80B4     		push	{r7}
 4113              		.cfi_def_cfa_offset 4
 4114              		.cfi_offset 7, -4
 4115 0002 83B0     		sub	sp, sp, #12
 4116              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccHYJizt.s 			page 112


 4117 0004 00AF     		add	r7, sp, #0
 4118              		.cfi_def_cfa_register 7
 4119 0006 0346     		mov	r3, r0
 4120 0008 FB71     		strb	r3, [r7, #7]
2257:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2258:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2259:./Lib/Src/stm32f4xx_rtc.c ****   
2260:./Lib/Src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 4121              		.loc 1 2260 5
 4122 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4123 000c 002B     		cmp	r3, #0
 4124 000e 06D0     		beq	.L241
2261:./Lib/Src/stm32f4xx_rtc.c ****   {
2262:./Lib/Src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2263:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 4125              		.loc 1 2263 8
 4126 0010 094B     		ldr	r3, .L244
 4127 0012 1B6C     		ldr	r3, [r3, #64]
 4128 0014 084A     		ldr	r2, .L244
 4129              		.loc 1 2263 16
 4130 0016 23F40043 		bic	r3, r3, #32768
 4131 001a 1364     		str	r3, [r2, #64]
2264:./Lib/Src/stm32f4xx_rtc.c ****   }
2265:./Lib/Src/stm32f4xx_rtc.c ****   else
2266:./Lib/Src/stm32f4xx_rtc.c ****   {
2267:./Lib/Src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2268:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2269:./Lib/Src/stm32f4xx_rtc.c ****   } 
2270:./Lib/Src/stm32f4xx_rtc.c **** }
 4132              		.loc 1 2270 1
 4133 001c 05E0     		b	.L243
 4134              	.L241:
2268:./Lib/Src/stm32f4xx_rtc.c ****   } 
 4135              		.loc 1 2268 8
 4136 001e 064B     		ldr	r3, .L244
 4137 0020 1B6C     		ldr	r3, [r3, #64]
 4138 0022 054A     		ldr	r2, .L244
2268:./Lib/Src/stm32f4xx_rtc.c ****   } 
 4139              		.loc 1 2268 16
 4140 0024 43F40043 		orr	r3, r3, #32768
 4141 0028 1364     		str	r3, [r2, #64]
 4142              	.L243:
 4143              		.loc 1 2270 1
 4144 002a 00BF     		nop
 4145 002c 0C37     		adds	r7, r7, #12
 4146              		.cfi_def_cfa_offset 4
 4147 002e BD46     		mov	sp, r7
 4148              		.cfi_def_cfa_register 13
 4149              		@ sp needed
 4150 0030 5DF8047B 		ldr	r7, [sp], #4
 4151              		.cfi_restore 7
 4152              		.cfi_def_cfa_offset 0
 4153 0034 7047     		bx	lr
 4154              	.L245:
 4155 0036 00BF     		.align	2
 4156              	.L244:
 4157 0038 00280040 		.word	1073752064
ARM GAS  /tmp/ccHYJizt.s 			page 113


 4158              		.cfi_endproc
 4159              	.LFE166:
 4161              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 4162              		.align	1
 4163              		.global	RTC_WriteBackupRegister
 4164              		.syntax unified
 4165              		.thumb
 4166              		.thumb_func
 4168              	RTC_WriteBackupRegister:
 4169              	.LFB167:
2271:./Lib/Src/stm32f4xx_rtc.c **** 
2272:./Lib/Src/stm32f4xx_rtc.c **** /**
2273:./Lib/Src/stm32f4xx_rtc.c ****   * @}
2274:./Lib/Src/stm32f4xx_rtc.c ****   */
2275:./Lib/Src/stm32f4xx_rtc.c **** 
2276:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2277:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2278:./Lib/Src/stm32f4xx_rtc.c ****  *
2279:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
2280:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
2281:./Lib/Src/stm32f4xx_rtc.c ****              ##### Backup Data Registers configuration functions ##### 
2282:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
2283:./Lib/Src/stm32f4xx_rtc.c **** 
2284:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
2285:./Lib/Src/stm32f4xx_rtc.c ****   * @{
2286:./Lib/Src/stm32f4xx_rtc.c ****   */
2287:./Lib/Src/stm32f4xx_rtc.c **** 
2288:./Lib/Src/stm32f4xx_rtc.c **** /**
2289:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2290:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2291:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2292:./Lib/Src/stm32f4xx_rtc.c ****   *                          specify the register.
2293:./Lib/Src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2294:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2295:./Lib/Src/stm32f4xx_rtc.c ****   */
2296:./Lib/Src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2297:./Lib/Src/stm32f4xx_rtc.c **** {
 4170              		.loc 1 2297 1
 4171              		.cfi_startproc
 4172              		@ args = 0, pretend = 0, frame = 16
 4173              		@ frame_needed = 1, uses_anonymous_args = 0
 4174              		@ link register save eliminated.
 4175 0000 80B4     		push	{r7}
 4176              		.cfi_def_cfa_offset 4
 4177              		.cfi_offset 7, -4
 4178 0002 85B0     		sub	sp, sp, #20
 4179              		.cfi_def_cfa_offset 24
 4180 0004 00AF     		add	r7, sp, #0
 4181              		.cfi_def_cfa_register 7
 4182 0006 7860     		str	r0, [r7, #4]
 4183 0008 3960     		str	r1, [r7]
2298:./Lib/Src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 4184              		.loc 1 2298 17
 4185 000a 0023     		movs	r3, #0
 4186 000c FB60     		str	r3, [r7, #12]
2299:./Lib/Src/stm32f4xx_rtc.c ****   
2300:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccHYJizt.s 			page 114


2301:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2302:./Lib/Src/stm32f4xx_rtc.c **** 
2303:./Lib/Src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 4187              		.loc 1 2303 7
 4188 000e 084B     		ldr	r3, .L247
 4189 0010 FB60     		str	r3, [r7, #12]
2304:./Lib/Src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 4190              		.loc 1 2304 22
 4191 0012 7B68     		ldr	r3, [r7, #4]
 4192 0014 9A00     		lsls	r2, r3, #2
 4193              		.loc 1 2304 7
 4194 0016 FB68     		ldr	r3, [r7, #12]
 4195 0018 1344     		add	r3, r3, r2
 4196 001a FB60     		str	r3, [r7, #12]
2305:./Lib/Src/stm32f4xx_rtc.c **** 
2306:./Lib/Src/stm32f4xx_rtc.c ****   /* Write the specified register */
2307:./Lib/Src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 4197              		.loc 1 2307 4
 4198 001c FB68     		ldr	r3, [r7, #12]
 4199 001e 1A46     		mov	r2, r3
 4200              		.loc 1 2307 25
 4201 0020 3B68     		ldr	r3, [r7]
 4202 0022 1360     		str	r3, [r2]
2308:./Lib/Src/stm32f4xx_rtc.c **** }
 4203              		.loc 1 2308 1
 4204 0024 00BF     		nop
 4205 0026 1437     		adds	r7, r7, #20
 4206              		.cfi_def_cfa_offset 4
 4207 0028 BD46     		mov	sp, r7
 4208              		.cfi_def_cfa_register 13
 4209              		@ sp needed
 4210 002a 5DF8047B 		ldr	r7, [sp], #4
 4211              		.cfi_restore 7
 4212              		.cfi_def_cfa_offset 0
 4213 002e 7047     		bx	lr
 4214              	.L248:
 4215              		.align	2
 4216              	.L247:
 4217 0030 50280040 		.word	1073752144
 4218              		.cfi_endproc
 4219              	.LFE167:
 4221              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 4222              		.align	1
 4223              		.global	RTC_ReadBackupRegister
 4224              		.syntax unified
 4225              		.thumb
 4226              		.thumb_func
 4228              	RTC_ReadBackupRegister:
 4229              	.LFB168:
2309:./Lib/Src/stm32f4xx_rtc.c **** 
2310:./Lib/Src/stm32f4xx_rtc.c **** /**
2311:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2312:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2313:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2314:./Lib/Src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2315:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2316:./Lib/Src/stm32f4xx_rtc.c ****   */
ARM GAS  /tmp/ccHYJizt.s 			page 115


2317:./Lib/Src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2318:./Lib/Src/stm32f4xx_rtc.c **** {
 4230              		.loc 1 2318 1
 4231              		.cfi_startproc
 4232              		@ args = 0, pretend = 0, frame = 16
 4233              		@ frame_needed = 1, uses_anonymous_args = 0
 4234              		@ link register save eliminated.
 4235 0000 80B4     		push	{r7}
 4236              		.cfi_def_cfa_offset 4
 4237              		.cfi_offset 7, -4
 4238 0002 85B0     		sub	sp, sp, #20
 4239              		.cfi_def_cfa_offset 24
 4240 0004 00AF     		add	r7, sp, #0
 4241              		.cfi_def_cfa_register 7
 4242 0006 7860     		str	r0, [r7, #4]
2319:./Lib/Src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 4243              		.loc 1 2319 17
 4244 0008 0023     		movs	r3, #0
 4245 000a FB60     		str	r3, [r7, #12]
2320:./Lib/Src/stm32f4xx_rtc.c ****   
2321:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2322:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2323:./Lib/Src/stm32f4xx_rtc.c **** 
2324:./Lib/Src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 4246              		.loc 1 2324 7
 4247 000c 074B     		ldr	r3, .L251
 4248 000e FB60     		str	r3, [r7, #12]
2325:./Lib/Src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 4249              		.loc 1 2325 22
 4250 0010 7B68     		ldr	r3, [r7, #4]
 4251 0012 9A00     		lsls	r2, r3, #2
 4252              		.loc 1 2325 7
 4253 0014 FB68     		ldr	r3, [r7, #12]
 4254 0016 1344     		add	r3, r3, r2
 4255 0018 FB60     		str	r3, [r7, #12]
2326:./Lib/Src/stm32f4xx_rtc.c ****   
2327:./Lib/Src/stm32f4xx_rtc.c ****   /* Read the specified register */
2328:./Lib/Src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 4256              		.loc 1 2328 12
 4257 001a FB68     		ldr	r3, [r7, #12]
 4258              		.loc 1 2328 11
 4259 001c 1B68     		ldr	r3, [r3]
2329:./Lib/Src/stm32f4xx_rtc.c **** }
 4260              		.loc 1 2329 1
 4261 001e 1846     		mov	r0, r3
 4262 0020 1437     		adds	r7, r7, #20
 4263              		.cfi_def_cfa_offset 4
 4264 0022 BD46     		mov	sp, r7
 4265              		.cfi_def_cfa_register 13
 4266              		@ sp needed
 4267 0024 5DF8047B 		ldr	r7, [sp], #4
 4268              		.cfi_restore 7
 4269              		.cfi_def_cfa_offset 0
 4270 0028 7047     		bx	lr
 4271              	.L252:
 4272 002a 00BF     		.align	2
 4273              	.L251:
ARM GAS  /tmp/ccHYJizt.s 			page 116


 4274 002c 50280040 		.word	1073752144
 4275              		.cfi_endproc
 4276              	.LFE168:
 4278              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 4279              		.align	1
 4280              		.global	RTC_TamperPinSelection
 4281              		.syntax unified
 4282              		.thumb
 4283              		.thumb_func
 4285              	RTC_TamperPinSelection:
 4286              	.LFB169:
2330:./Lib/Src/stm32f4xx_rtc.c **** 
2331:./Lib/Src/stm32f4xx_rtc.c **** /**
2332:./Lib/Src/stm32f4xx_rtc.c ****   * @}
2333:./Lib/Src/stm32f4xx_rtc.c ****   */
2334:./Lib/Src/stm32f4xx_rtc.c **** 
2335:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2336:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2337:./Lib/Src/stm32f4xx_rtc.c ****  *           configuration functions  
2338:./Lib/Src/stm32f4xx_rtc.c ****  *
2339:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
2340:./Lib/Src/stm32f4xx_rtc.c ****  ==================================================================================================
2341:./Lib/Src/stm32f4xx_rtc.c ****  ##### RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration functions #####
2342:./Lib/Src/stm32f4xx_rtc.c ****  ==================================================================================================
2343:./Lib/Src/stm32f4xx_rtc.c **** 
2344:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
2345:./Lib/Src/stm32f4xx_rtc.c ****   * @{
2346:./Lib/Src/stm32f4xx_rtc.c ****   */
2347:./Lib/Src/stm32f4xx_rtc.c **** 
2348:./Lib/Src/stm32f4xx_rtc.c **** /**
2349:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2350:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2351:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2352:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Default: RTC_AF1 is used as RTC Tamper Pin.
2353:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_Pos1: RTC_AF2 is selected as RTC Tamper Pin.    
2354:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2355:./Lib/Src/stm32f4xx_rtc.c ****   */
2356:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2357:./Lib/Src/stm32f4xx_rtc.c **** {
 4287              		.loc 1 2357 1
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 8
 4290              		@ frame_needed = 1, uses_anonymous_args = 0
 4291              		@ link register save eliminated.
 4292 0000 80B4     		push	{r7}
 4293              		.cfi_def_cfa_offset 4
 4294              		.cfi_offset 7, -4
 4295 0002 83B0     		sub	sp, sp, #12
 4296              		.cfi_def_cfa_offset 16
 4297 0004 00AF     		add	r7, sp, #0
 4298              		.cfi_def_cfa_register 7
 4299 0006 7860     		str	r0, [r7, #4]
2358:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2359:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2360:./Lib/Src/stm32f4xx_rtc.c ****   
2361:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 4300              		.loc 1 2361 6
ARM GAS  /tmp/ccHYJizt.s 			page 117


 4301 0008 084B     		ldr	r3, .L254
 4302 000a 1B6C     		ldr	r3, [r3, #64]
 4303 000c 074A     		ldr	r2, .L254
 4304              		.loc 1 2361 14
 4305 000e 23F48033 		bic	r3, r3, #65536
 4306 0012 1364     		str	r3, [r2, #64]
2362:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 4307              		.loc 1 2362 6
 4308 0014 054B     		ldr	r3, .L254
 4309 0016 1A6C     		ldr	r2, [r3, #64]
 4310 0018 0449     		ldr	r1, .L254
 4311              		.loc 1 2362 14
 4312 001a 7B68     		ldr	r3, [r7, #4]
 4313 001c 1343     		orrs	r3, r3, r2
 4314 001e 0B64     		str	r3, [r1, #64]
2363:./Lib/Src/stm32f4xx_rtc.c **** }
 4315              		.loc 1 2363 1
 4316 0020 00BF     		nop
 4317 0022 0C37     		adds	r7, r7, #12
 4318              		.cfi_def_cfa_offset 4
 4319 0024 BD46     		mov	sp, r7
 4320              		.cfi_def_cfa_register 13
 4321              		@ sp needed
 4322 0026 5DF8047B 		ldr	r7, [sp], #4
 4323              		.cfi_restore 7
 4324              		.cfi_def_cfa_offset 0
 4325 002a 7047     		bx	lr
 4326              	.L255:
 4327              		.align	2
 4328              	.L254:
 4329 002c 00280040 		.word	1073752064
 4330              		.cfi_endproc
 4331              	.LFE169:
 4333              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 4334              		.align	1
 4335              		.global	RTC_TimeStampPinSelection
 4336              		.syntax unified
 4337              		.thumb
 4338              		.thumb_func
 4340              	RTC_TimeStampPinSelection:
 4341              	.LFB170:
2364:./Lib/Src/stm32f4xx_rtc.c **** 
2365:./Lib/Src/stm32f4xx_rtc.c **** /**
2366:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2367:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2368:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2369:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2370:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2371:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2372:./Lib/Src/stm32f4xx_rtc.c ****   */
2373:./Lib/Src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2374:./Lib/Src/stm32f4xx_rtc.c **** {
 4342              		.loc 1 2374 1
 4343              		.cfi_startproc
 4344              		@ args = 0, pretend = 0, frame = 8
 4345              		@ frame_needed = 1, uses_anonymous_args = 0
 4346              		@ link register save eliminated.
ARM GAS  /tmp/ccHYJizt.s 			page 118


 4347 0000 80B4     		push	{r7}
 4348              		.cfi_def_cfa_offset 4
 4349              		.cfi_offset 7, -4
 4350 0002 83B0     		sub	sp, sp, #12
 4351              		.cfi_def_cfa_offset 16
 4352 0004 00AF     		add	r7, sp, #0
 4353              		.cfi_def_cfa_register 7
 4354 0006 7860     		str	r0, [r7, #4]
2375:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2377:./Lib/Src/stm32f4xx_rtc.c ****   
2378:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 4355              		.loc 1 2378 6
 4356 0008 084B     		ldr	r3, .L257
 4357 000a 1B6C     		ldr	r3, [r3, #64]
 4358 000c 074A     		ldr	r2, .L257
 4359              		.loc 1 2378 14
 4360 000e 23F40033 		bic	r3, r3, #131072
 4361 0012 1364     		str	r3, [r2, #64]
2379:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 4362              		.loc 1 2379 6
 4363 0014 054B     		ldr	r3, .L257
 4364 0016 1A6C     		ldr	r2, [r3, #64]
 4365 0018 0449     		ldr	r1, .L257
 4366              		.loc 1 2379 14
 4367 001a 7B68     		ldr	r3, [r7, #4]
 4368 001c 1343     		orrs	r3, r3, r2
 4369 001e 0B64     		str	r3, [r1, #64]
2380:./Lib/Src/stm32f4xx_rtc.c **** }
 4370              		.loc 1 2380 1
 4371 0020 00BF     		nop
 4372 0022 0C37     		adds	r7, r7, #12
 4373              		.cfi_def_cfa_offset 4
 4374 0024 BD46     		mov	sp, r7
 4375              		.cfi_def_cfa_register 13
 4376              		@ sp needed
 4377 0026 5DF8047B 		ldr	r7, [sp], #4
 4378              		.cfi_restore 7
 4379              		.cfi_def_cfa_offset 0
 4380 002a 7047     		bx	lr
 4381              	.L258:
 4382              		.align	2
 4383              	.L257:
 4384 002c 00280040 		.word	1073752064
 4385              		.cfi_endproc
 4386              	.LFE170:
 4388              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 4389              		.align	1
 4390              		.global	RTC_OutputTypeConfig
 4391              		.syntax unified
 4392              		.thumb
 4393              		.thumb_func
 4395              	RTC_OutputTypeConfig:
 4396              	.LFB171:
2381:./Lib/Src/stm32f4xx_rtc.c **** 
2382:./Lib/Src/stm32f4xx_rtc.c **** /**
2383:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
ARM GAS  /tmp/ccHYJizt.s 			page 119


2384:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2385:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2386:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2387:./Lib/Src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2388:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2389:./Lib/Src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2390:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2391:./Lib/Src/stm32f4xx_rtc.c ****   */
2392:./Lib/Src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2393:./Lib/Src/stm32f4xx_rtc.c **** {
 4397              		.loc 1 2393 1
 4398              		.cfi_startproc
 4399              		@ args = 0, pretend = 0, frame = 8
 4400              		@ frame_needed = 1, uses_anonymous_args = 0
 4401              		@ link register save eliminated.
 4402 0000 80B4     		push	{r7}
 4403              		.cfi_def_cfa_offset 4
 4404              		.cfi_offset 7, -4
 4405 0002 83B0     		sub	sp, sp, #12
 4406              		.cfi_def_cfa_offset 16
 4407 0004 00AF     		add	r7, sp, #0
 4408              		.cfi_def_cfa_register 7
 4409 0006 7860     		str	r0, [r7, #4]
2394:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2395:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2396:./Lib/Src/stm32f4xx_rtc.c ****   
2397:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 4410              		.loc 1 2397 6
 4411 0008 084B     		ldr	r3, .L260
 4412 000a 1B6C     		ldr	r3, [r3, #64]
 4413 000c 074A     		ldr	r2, .L260
 4414              		.loc 1 2397 14
 4415 000e 23F48023 		bic	r3, r3, #262144
 4416 0012 1364     		str	r3, [r2, #64]
2398:./Lib/Src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 4417              		.loc 1 2398 6
 4418 0014 054B     		ldr	r3, .L260
 4419 0016 1A6C     		ldr	r2, [r3, #64]
 4420 0018 0449     		ldr	r1, .L260
 4421              		.loc 1 2398 14
 4422 001a 7B68     		ldr	r3, [r7, #4]
 4423 001c 1343     		orrs	r3, r3, r2
 4424 001e 0B64     		str	r3, [r1, #64]
2399:./Lib/Src/stm32f4xx_rtc.c **** }
 4425              		.loc 1 2399 1
 4426 0020 00BF     		nop
 4427 0022 0C37     		adds	r7, r7, #12
 4428              		.cfi_def_cfa_offset 4
 4429 0024 BD46     		mov	sp, r7
 4430              		.cfi_def_cfa_register 13
 4431              		@ sp needed
 4432 0026 5DF8047B 		ldr	r7, [sp], #4
 4433              		.cfi_restore 7
 4434              		.cfi_def_cfa_offset 0
 4435 002a 7047     		bx	lr
 4436              	.L261:
 4437              		.align	2
ARM GAS  /tmp/ccHYJizt.s 			page 120


 4438              	.L260:
 4439 002c 00280040 		.word	1073752064
 4440              		.cfi_endproc
 4441              	.LFE171:
 4443              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 4444              		.align	1
 4445              		.global	RTC_SynchroShiftConfig
 4446              		.syntax unified
 4447              		.thumb
 4448              		.thumb_func
 4450              	RTC_SynchroShiftConfig:
 4451              	.LFB172:
2400:./Lib/Src/stm32f4xx_rtc.c **** 
2401:./Lib/Src/stm32f4xx_rtc.c **** /**
2402:./Lib/Src/stm32f4xx_rtc.c ****   * @}
2403:./Lib/Src/stm32f4xx_rtc.c ****   */
2404:./Lib/Src/stm32f4xx_rtc.c **** 
2405:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2406:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2407:./Lib/Src/stm32f4xx_rtc.c ****  *
2408:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
2409:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
2410:./Lib/Src/stm32f4xx_rtc.c ****               ##### Shift control synchronisation functions #####
2411:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
2412:./Lib/Src/stm32f4xx_rtc.c **** 
2413:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
2414:./Lib/Src/stm32f4xx_rtc.c ****   * @{
2415:./Lib/Src/stm32f4xx_rtc.c ****   */
2416:./Lib/Src/stm32f4xx_rtc.c **** 
2417:./Lib/Src/stm32f4xx_rtc.c **** /**
2418:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2419:./Lib/Src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2420:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2421:./Lib/Src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2422:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2423:./Lib/Src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2424:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2425:./Lib/Src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2426:./Lib/Src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2427:./Lib/Src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2428:./Lib/Src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2429:./Lib/Src/stm32f4xx_rtc.c **** */
2430:./Lib/Src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2431:./Lib/Src/stm32f4xx_rtc.c **** {
 4452              		.loc 1 2431 1
 4453              		.cfi_startproc
 4454              		@ args = 0, pretend = 0, frame = 16
 4455              		@ frame_needed = 1, uses_anonymous_args = 0
 4456 0000 80B5     		push	{r7, lr}
 4457              		.cfi_def_cfa_offset 8
 4458              		.cfi_offset 7, -8
 4459              		.cfi_offset 14, -4
 4460 0002 84B0     		sub	sp, sp, #16
 4461              		.cfi_def_cfa_offset 24
 4462 0004 00AF     		add	r7, sp, #0
 4463              		.cfi_def_cfa_register 7
 4464 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccHYJizt.s 			page 121


 4465 0008 3960     		str	r1, [r7]
2432:./Lib/Src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 4466              		.loc 1 2432 15
 4467 000a 0023     		movs	r3, #0
 4468 000c FB73     		strb	r3, [r7, #15]
2433:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 4469              		.loc 1 2433 12
 4470 000e 0023     		movs	r3, #0
 4471 0010 BB60     		str	r3, [r7, #8]
2434:./Lib/Src/stm32f4xx_rtc.c **** 
2435:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2436:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2437:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2438:./Lib/Src/stm32f4xx_rtc.c **** 
2439:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2440:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4472              		.loc 1 2440 6
 4473 0012 214B     		ldr	r3, .L271
 4474              		.loc 1 2440 12
 4475 0014 CA22     		movs	r2, #202
 4476 0016 5A62     		str	r2, [r3, #36]
2441:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4477              		.loc 1 2441 6
 4478 0018 1F4B     		ldr	r3, .L271
 4479              		.loc 1 2441 12
 4480 001a 5322     		movs	r2, #83
 4481 001c 5A62     		str	r2, [r3, #36]
2442:./Lib/Src/stm32f4xx_rtc.c ****   
2443:./Lib/Src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2444:./Lib/Src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 4482              		.loc 1 2444 11
 4483 001e 1E4B     		ldr	r3, .L271
 4484 0020 DB68     		ldr	r3, [r3, #12]
 4485              		.loc 1 2444 17
 4486 0022 03F00803 		and	r3, r3, #8
 4487              		.loc 1 2444 6
 4488 0026 002B     		cmp	r3, #0
 4489 0028 0DD0     		beq	.L263
2445:./Lib/Src/stm32f4xx_rtc.c ****   {
2446:./Lib/Src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2447:./Lib/Src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4490              		.loc 1 2447 11
 4491 002a 02E0     		b	.L264
 4492              	.L265:
2448:./Lib/Src/stm32f4xx_rtc.c ****     {
2449:./Lib/Src/stm32f4xx_rtc.c ****       shpfcount++;
 4493              		.loc 1 2449 16
 4494 002c BB68     		ldr	r3, [r7, #8]
 4495 002e 0133     		adds	r3, r3, #1
 4496 0030 BB60     		str	r3, [r7, #8]
 4497              	.L264:
2447:./Lib/Src/stm32f4xx_rtc.c ****     {
 4498              		.loc 1 2447 17
 4499 0032 194B     		ldr	r3, .L271
 4500 0034 DB68     		ldr	r3, [r3, #12]
2447:./Lib/Src/stm32f4xx_rtc.c ****     {
 4501              		.loc 1 2447 23
ARM GAS  /tmp/ccHYJizt.s 			page 122


 4502 0036 03F00803 		and	r3, r3, #8
2447:./Lib/Src/stm32f4xx_rtc.c ****     {
 4503              		.loc 1 2447 49
 4504 003a 002B     		cmp	r3, #0
 4505 003c 03D0     		beq	.L263
2447:./Lib/Src/stm32f4xx_rtc.c ****     {
 4506              		.loc 1 2447 49 is_stmt 0 discriminator 1
 4507 003e BB68     		ldr	r3, [r7, #8]
 4508 0040 B3F5805F 		cmp	r3, #4096
 4509 0044 F2D1     		bne	.L265
 4510              	.L263:
2450:./Lib/Src/stm32f4xx_rtc.c ****     }
2451:./Lib/Src/stm32f4xx_rtc.c ****   }
2452:./Lib/Src/stm32f4xx_rtc.c **** 
2453:./Lib/Src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2454:./Lib/Src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 4511              		.loc 1 2454 11 is_stmt 1
 4512 0046 144B     		ldr	r3, .L271
 4513 0048 DB68     		ldr	r3, [r3, #12]
 4514              		.loc 1 2454 17
 4515 004a 03F00803 		and	r3, r3, #8
 4516              		.loc 1 2454 6
 4517 004e 002B     		cmp	r3, #0
 4518 0050 18D1     		bne	.L266
2455:./Lib/Src/stm32f4xx_rtc.c ****   {
2456:./Lib/Src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2457:./Lib/Src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4519              		.loc 1 2457 12
 4520 0052 114B     		ldr	r3, .L271
 4521 0054 9B68     		ldr	r3, [r3, #8]
 4522              		.loc 1 2457 17
 4523 0056 03F01003 		and	r3, r3, #16
 4524              		.loc 1 2457 7
 4525 005a 002B     		cmp	r3, #0
 4526 005c 0FD1     		bne	.L267
2458:./Lib/Src/stm32f4xx_rtc.c ****     {
2459:./Lib/Src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2460:./Lib/Src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4527              		.loc 1 2460 10
 4528 005e 0E49     		ldr	r1, .L271
 4529              		.loc 1 2460 58
 4530 0060 3A68     		ldr	r2, [r7]
 4531 0062 7B68     		ldr	r3, [r7, #4]
 4532 0064 1343     		orrs	r3, r3, r2
 4533              		.loc 1 2460 19
 4534 0066 CB62     		str	r3, [r1, #44]
2461:./Lib/Src/stm32f4xx_rtc.c ****     
2462:./Lib/Src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4535              		.loc 1 2462 10
 4536 0068 FFF7FEFF 		bl	RTC_WaitForSynchro
 4537 006c 0346     		mov	r3, r0
 4538              		.loc 1 2462 9
 4539 006e 002B     		cmp	r3, #0
 4540 0070 02D1     		bne	.L268
2463:./Lib/Src/stm32f4xx_rtc.c ****       {
2464:./Lib/Src/stm32f4xx_rtc.c ****         status = ERROR;
 4541              		.loc 1 2464 16
ARM GAS  /tmp/ccHYJizt.s 			page 123


 4542 0072 0023     		movs	r3, #0
 4543 0074 FB73     		strb	r3, [r7, #15]
 4544 0076 07E0     		b	.L269
 4545              	.L268:
2465:./Lib/Src/stm32f4xx_rtc.c ****       }
2466:./Lib/Src/stm32f4xx_rtc.c ****       else
2467:./Lib/Src/stm32f4xx_rtc.c ****       {
2468:./Lib/Src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4546              		.loc 1 2468 16
 4547 0078 0123     		movs	r3, #1
 4548 007a FB73     		strb	r3, [r7, #15]
 4549 007c 04E0     		b	.L269
 4550              	.L267:
2469:./Lib/Src/stm32f4xx_rtc.c ****       }
2470:./Lib/Src/stm32f4xx_rtc.c ****     }
2471:./Lib/Src/stm32f4xx_rtc.c ****     else
2472:./Lib/Src/stm32f4xx_rtc.c ****     {
2473:./Lib/Src/stm32f4xx_rtc.c ****       status = ERROR;
 4551              		.loc 1 2473 14
 4552 007e 0023     		movs	r3, #0
 4553 0080 FB73     		strb	r3, [r7, #15]
 4554 0082 01E0     		b	.L269
 4555              	.L266:
2474:./Lib/Src/stm32f4xx_rtc.c ****     }
2475:./Lib/Src/stm32f4xx_rtc.c ****   }
2476:./Lib/Src/stm32f4xx_rtc.c ****   else
2477:./Lib/Src/stm32f4xx_rtc.c ****   {
2478:./Lib/Src/stm32f4xx_rtc.c ****     status = ERROR;
 4556              		.loc 1 2478 12
 4557 0084 0023     		movs	r3, #0
 4558 0086 FB73     		strb	r3, [r7, #15]
 4559              	.L269:
2479:./Lib/Src/stm32f4xx_rtc.c ****   }
2480:./Lib/Src/stm32f4xx_rtc.c **** 
2481:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2482:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4560              		.loc 1 2482 6
 4561 0088 034B     		ldr	r3, .L271
 4562              		.loc 1 2482 12
 4563 008a FF22     		movs	r2, #255
 4564 008c 5A62     		str	r2, [r3, #36]
2483:./Lib/Src/stm32f4xx_rtc.c ****   
2484:./Lib/Src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4565              		.loc 1 2484 10
 4566 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2485:./Lib/Src/stm32f4xx_rtc.c **** }
 4567              		.loc 1 2485 1
 4568 0090 1846     		mov	r0, r3
 4569 0092 1037     		adds	r7, r7, #16
 4570              		.cfi_def_cfa_offset 8
 4571 0094 BD46     		mov	sp, r7
 4572              		.cfi_def_cfa_register 13
 4573              		@ sp needed
 4574 0096 80BD     		pop	{r7, pc}
 4575              	.L272:
 4576              		.align	2
 4577              	.L271:
ARM GAS  /tmp/ccHYJizt.s 			page 124


 4578 0098 00280040 		.word	1073752064
 4579              		.cfi_endproc
 4580              	.LFE172:
 4582              		.section	.text.RTC_ITConfig,"ax",%progbits
 4583              		.align	1
 4584              		.global	RTC_ITConfig
 4585              		.syntax unified
 4586              		.thumb
 4587              		.thumb_func
 4589              	RTC_ITConfig:
 4590              	.LFB173:
2486:./Lib/Src/stm32f4xx_rtc.c **** 
2487:./Lib/Src/stm32f4xx_rtc.c **** /**
2488:./Lib/Src/stm32f4xx_rtc.c ****   * @}
2489:./Lib/Src/stm32f4xx_rtc.c ****   */
2490:./Lib/Src/stm32f4xx_rtc.c **** 
2491:./Lib/Src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2492:./Lib/Src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2493:./Lib/Src/stm32f4xx_rtc.c ****  *
2494:./Lib/Src/stm32f4xx_rtc.c **** @verbatim   
2495:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================
2496:./Lib/Src/stm32f4xx_rtc.c ****               ##### Interrupts and flags management functions #####
2497:./Lib/Src/stm32f4xx_rtc.c ****  ===============================================================================  
2498:./Lib/Src/stm32f4xx_rtc.c ****  [..] All RTC interrupts are connected to the EXTI controller.
2499:./Lib/Src/stm32f4xx_rtc.c ****  
2500:./Lib/Src/stm32f4xx_rtc.c ****    (+) To enable the RTC Alarm interrupt, the following sequence is required:
2501:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 17 in interrupt mode and select 
2502:./Lib/Src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2503:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_Alarm IRQ channel in the NVIC using the 
2504:./Lib/Src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2505:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2506:./Lib/Src/stm32f4xx_rtc.c ****             the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2507:./Lib/Src/stm32f4xx_rtc.c **** 
2508:./Lib/Src/stm32f4xx_rtc.c ****    (+) To enable the RTC Wakeup interrupt, the following sequence is required:
2509:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 22 in interrupt mode and select the
2510:./Lib/Src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2511:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the RTC_WKUP IRQ channel in the NVIC using the 
2512:./Lib/Src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2513:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure the RTC to generate the RTC wakeup timer event using the 
2514:./Lib/Src/stm32f4xx_rtc.c ****             RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() 
2515:./Lib/Src/stm32f4xx_rtc.c ****             functions.
2516:./Lib/Src/stm32f4xx_rtc.c **** 
2517:./Lib/Src/stm32f4xx_rtc.c ****    (+) To enable the RTC Tamper interrupt, the following sequence is required:
2518:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select 
2519:./Lib/Src/stm32f4xx_rtc.c ****             the rising edge sensitivity using the EXTI_Init() function.
2520:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the
2521:./Lib/Src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2522:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC tamper event using the 
2523:./Lib/Src/stm32f4xx_rtc.c ****             RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2524:./Lib/Src/stm32f4xx_rtc.c **** 
2525:./Lib/Src/stm32f4xx_rtc.c ****    (+) To enable the RTC TimeStamp interrupt, the following sequence is required:
2526:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the EXTI Line 21 in interrupt mode and select the
2527:./Lib/Src/stm32f4xx_rtc.c ****             rising edge sensitivity using the EXTI_Init() function.
2528:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the 
2529:./Lib/Src/stm32f4xx_rtc.c ****             NVIC_Init() function.
2530:./Lib/Src/stm32f4xx_rtc.c ****        (++) Configure the RTC to detect the RTC time stamp event using the 
2531:./Lib/Src/stm32f4xx_rtc.c ****             RTC_TimeStampCmd() functions.
ARM GAS  /tmp/ccHYJizt.s 			page 125


2532:./Lib/Src/stm32f4xx_rtc.c **** 
2533:./Lib/Src/stm32f4xx_rtc.c **** @endverbatim
2534:./Lib/Src/stm32f4xx_rtc.c ****   * @{
2535:./Lib/Src/stm32f4xx_rtc.c ****   */
2536:./Lib/Src/stm32f4xx_rtc.c **** 
2537:./Lib/Src/stm32f4xx_rtc.c **** /**
2538:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2539:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2540:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2541:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2542:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2543:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2544:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2545:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2546:./Lib/Src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2547:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2548:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2549:./Lib/Src/stm32f4xx_rtc.c ****   */
2550:./Lib/Src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2551:./Lib/Src/stm32f4xx_rtc.c **** {
 4591              		.loc 1 2551 1
 4592              		.cfi_startproc
 4593              		@ args = 0, pretend = 0, frame = 8
 4594              		@ frame_needed = 1, uses_anonymous_args = 0
 4595              		@ link register save eliminated.
 4596 0000 80B4     		push	{r7}
 4597              		.cfi_def_cfa_offset 4
 4598              		.cfi_offset 7, -4
 4599 0002 83B0     		sub	sp, sp, #12
 4600              		.cfi_def_cfa_offset 16
 4601 0004 00AF     		add	r7, sp, #0
 4602              		.cfi_def_cfa_register 7
 4603 0006 7860     		str	r0, [r7, #4]
 4604 0008 0B46     		mov	r3, r1
 4605 000a FB70     		strb	r3, [r7, #3]
2552:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2553:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2554:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2555:./Lib/Src/stm32f4xx_rtc.c **** 
2556:./Lib/Src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2557:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4606              		.loc 1 2557 6
 4607 000c 1A4B     		ldr	r3, .L276
 4608              		.loc 1 2557 12
 4609 000e CA22     		movs	r2, #202
 4610 0010 5A62     		str	r2, [r3, #36]
2558:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4611              		.loc 1 2558 6
 4612 0012 194B     		ldr	r3, .L276
 4613              		.loc 1 2558 12
 4614 0014 5322     		movs	r2, #83
 4615 0016 5A62     		str	r2, [r3, #36]
2559:./Lib/Src/stm32f4xx_rtc.c **** 
2560:./Lib/Src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4616              		.loc 1 2560 6
 4617 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4618 001a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccHYJizt.s 			page 126


 4619 001c 10D0     		beq	.L274
2561:./Lib/Src/stm32f4xx_rtc.c ****   {
2562:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2563:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4620              		.loc 1 2563 8
 4621 001e 164B     		ldr	r3, .L276
 4622 0020 9A68     		ldr	r2, [r3, #8]
 4623              		.loc 1 2563 16
 4624 0022 7B68     		ldr	r3, [r7, #4]
 4625 0024 23F00403 		bic	r3, r3, #4
 4626              		.loc 1 2563 8
 4627 0028 1349     		ldr	r1, .L276
 4628              		.loc 1 2563 13
 4629 002a 1343     		orrs	r3, r3, r2
 4630 002c 8B60     		str	r3, [r1, #8]
2564:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2565:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4631              		.loc 1 2565 8
 4632 002e 124B     		ldr	r3, .L276
 4633 0030 1A6C     		ldr	r2, [r3, #64]
 4634              		.loc 1 2565 19
 4635 0032 7B68     		ldr	r3, [r7, #4]
 4636 0034 03F00403 		and	r3, r3, #4
 4637              		.loc 1 2565 8
 4638 0038 0F49     		ldr	r1, .L276
 4639              		.loc 1 2565 16
 4640 003a 1343     		orrs	r3, r3, r2
 4641 003c 0B64     		str	r3, [r1, #64]
 4642 003e 11E0     		b	.L275
 4643              	.L274:
2566:./Lib/Src/stm32f4xx_rtc.c ****   }
2567:./Lib/Src/stm32f4xx_rtc.c ****   else
2568:./Lib/Src/stm32f4xx_rtc.c ****   {
2569:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2570:./Lib/Src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4644              		.loc 1 2570 8
 4645 0040 0D4B     		ldr	r3, .L276
 4646 0042 9A68     		ldr	r2, [r3, #8]
 4647              		.loc 1 2570 35
 4648 0044 7B68     		ldr	r3, [r7, #4]
 4649 0046 23F00403 		bic	r3, r3, #4
 4650              		.loc 1 2570 16
 4651 004a DB43     		mvns	r3, r3
 4652              		.loc 1 2570 8
 4653 004c 0A49     		ldr	r1, .L276
 4654              		.loc 1 2570 13
 4655 004e 1340     		ands	r3, r3, r2
 4656 0050 8B60     		str	r3, [r1, #8]
2571:./Lib/Src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2572:./Lib/Src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4657              		.loc 1 2572 8
 4658 0052 094B     		ldr	r3, .L276
 4659 0054 1A6C     		ldr	r2, [r3, #64]
 4660              		.loc 1 2572 38
 4661 0056 7B68     		ldr	r3, [r7, #4]
 4662 0058 03F00403 		and	r3, r3, #4
 4663              		.loc 1 2572 19
ARM GAS  /tmp/ccHYJizt.s 			page 127


 4664 005c DB43     		mvns	r3, r3
 4665              		.loc 1 2572 8
 4666 005e 0649     		ldr	r1, .L276
 4667              		.loc 1 2572 16
 4668 0060 1340     		ands	r3, r3, r2
 4669 0062 0B64     		str	r3, [r1, #64]
 4670              	.L275:
2573:./Lib/Src/stm32f4xx_rtc.c ****   }
2574:./Lib/Src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2575:./Lib/Src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4671              		.loc 1 2575 6
 4672 0064 044B     		ldr	r3, .L276
 4673              		.loc 1 2575 12
 4674 0066 FF22     		movs	r2, #255
 4675 0068 5A62     		str	r2, [r3, #36]
2576:./Lib/Src/stm32f4xx_rtc.c **** }
 4676              		.loc 1 2576 1
 4677 006a 00BF     		nop
 4678 006c 0C37     		adds	r7, r7, #12
 4679              		.cfi_def_cfa_offset 4
 4680 006e BD46     		mov	sp, r7
 4681              		.cfi_def_cfa_register 13
 4682              		@ sp needed
 4683 0070 5DF8047B 		ldr	r7, [sp], #4
 4684              		.cfi_restore 7
 4685              		.cfi_def_cfa_offset 0
 4686 0074 7047     		bx	lr
 4687              	.L277:
 4688 0076 00BF     		.align	2
 4689              	.L276:
 4690 0078 00280040 		.word	1073752064
 4691              		.cfi_endproc
 4692              	.LFE173:
 4694              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4695              		.align	1
 4696              		.global	RTC_GetFlagStatus
 4697              		.syntax unified
 4698              		.thumb
 4699              		.thumb_func
 4701              	RTC_GetFlagStatus:
 4702              	.LFB174:
2577:./Lib/Src/stm32f4xx_rtc.c **** 
2578:./Lib/Src/stm32f4xx_rtc.c **** /**
2579:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2580:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2581:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2582:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RECALPF: RECALPF event flag.
2583:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2584:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2585:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2586:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2587:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2588:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2589:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2590:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2591:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2592:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
ARM GAS  /tmp/ccHYJizt.s 			page 128


2593:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_SHPF: Shift operation pending flag.
2594:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2595:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2596:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2597:./Lib/Src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2598:./Lib/Src/stm32f4xx_rtc.c ****   */
2599:./Lib/Src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2600:./Lib/Src/stm32f4xx_rtc.c **** {
 4703              		.loc 1 2600 1
 4704              		.cfi_startproc
 4705              		@ args = 0, pretend = 0, frame = 16
 4706              		@ frame_needed = 1, uses_anonymous_args = 0
 4707              		@ link register save eliminated.
 4708 0000 80B4     		push	{r7}
 4709              		.cfi_def_cfa_offset 4
 4710              		.cfi_offset 7, -4
 4711 0002 85B0     		sub	sp, sp, #20
 4712              		.cfi_def_cfa_offset 24
 4713 0004 00AF     		add	r7, sp, #0
 4714              		.cfi_def_cfa_register 7
 4715 0006 7860     		str	r0, [r7, #4]
2601:./Lib/Src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4716              		.loc 1 2601 14
 4717 0008 0023     		movs	r3, #0
 4718 000a FB73     		strb	r3, [r7, #15]
2602:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4719              		.loc 1 2602 12
 4720 000c 0023     		movs	r3, #0
 4721 000e BB60     		str	r3, [r7, #8]
2603:./Lib/Src/stm32f4xx_rtc.c ****   
2604:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2605:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2606:./Lib/Src/stm32f4xx_rtc.c ****   
2607:./Lib/Src/stm32f4xx_rtc.c ****   /* Get all the flags */
2608:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4722              		.loc 1 2608 26
 4723 0010 0A4B     		ldr	r3, .L282
 4724 0012 DA68     		ldr	r2, [r3, #12]
 4725              		.loc 1 2608 10
 4726 0014 0A4B     		ldr	r3, .L282+4
 4727 0016 1340     		ands	r3, r3, r2
 4728 0018 BB60     		str	r3, [r7, #8]
2609:./Lib/Src/stm32f4xx_rtc.c ****   
2610:./Lib/Src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2611:./Lib/Src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4729              		.loc 1 2611 15
 4730 001a BA68     		ldr	r2, [r7, #8]
 4731 001c 7B68     		ldr	r3, [r7, #4]
 4732 001e 1340     		ands	r3, r3, r2
 4733              		.loc 1 2611 6
 4734 0020 002B     		cmp	r3, #0
 4735 0022 02D0     		beq	.L279
2612:./Lib/Src/stm32f4xx_rtc.c ****   {
2613:./Lib/Src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4736              		.loc 1 2613 15
 4737 0024 0123     		movs	r3, #1
 4738 0026 FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccHYJizt.s 			page 129


 4739 0028 01E0     		b	.L280
 4740              	.L279:
2614:./Lib/Src/stm32f4xx_rtc.c ****   }
2615:./Lib/Src/stm32f4xx_rtc.c ****   else
2616:./Lib/Src/stm32f4xx_rtc.c ****   {
2617:./Lib/Src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4741              		.loc 1 2617 15
 4742 002a 0023     		movs	r3, #0
 4743 002c FB73     		strb	r3, [r7, #15]
 4744              	.L280:
2618:./Lib/Src/stm32f4xx_rtc.c ****   }
2619:./Lib/Src/stm32f4xx_rtc.c ****   return bitstatus;
 4745              		.loc 1 2619 10
 4746 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2620:./Lib/Src/stm32f4xx_rtc.c **** }
 4747              		.loc 1 2620 1
 4748 0030 1846     		mov	r0, r3
 4749 0032 1437     		adds	r7, r7, #20
 4750              		.cfi_def_cfa_offset 4
 4751 0034 BD46     		mov	sp, r7
 4752              		.cfi_def_cfa_register 13
 4753              		@ sp needed
 4754 0036 5DF8047B 		ldr	r7, [sp], #4
 4755              		.cfi_restore 7
 4756              		.cfi_def_cfa_offset 0
 4757 003a 7047     		bx	lr
 4758              	.L283:
 4759              		.align	2
 4760              	.L282:
 4761 003c 00280040 		.word	1073752064
 4762 0040 7F7F0100 		.word	98175
 4763              		.cfi_endproc
 4764              	.LFE174:
 4766              		.section	.text.RTC_ClearFlag,"ax",%progbits
 4767              		.align	1
 4768              		.global	RTC_ClearFlag
 4769              		.syntax unified
 4770              		.thumb
 4771              		.thumb_func
 4773              	RTC_ClearFlag:
 4774              	.LFB175:
2621:./Lib/Src/stm32f4xx_rtc.c **** 
2622:./Lib/Src/stm32f4xx_rtc.c **** /**
2623:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2624:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2625:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2626:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2627:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP2F: Tamper 2 event flag
2628:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2629:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2630:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2631:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2632:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2633:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2634:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2635:./Lib/Src/stm32f4xx_rtc.c ****   */
2636:./Lib/Src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
ARM GAS  /tmp/ccHYJizt.s 			page 130


2637:./Lib/Src/stm32f4xx_rtc.c **** {
 4775              		.loc 1 2637 1
 4776              		.cfi_startproc
 4777              		@ args = 0, pretend = 0, frame = 8
 4778              		@ frame_needed = 1, uses_anonymous_args = 0
 4779              		@ link register save eliminated.
 4780 0000 80B4     		push	{r7}
 4781              		.cfi_def_cfa_offset 4
 4782              		.cfi_offset 7, -4
 4783 0002 83B0     		sub	sp, sp, #12
 4784              		.cfi_def_cfa_offset 16
 4785 0004 00AF     		add	r7, sp, #0
 4786              		.cfi_def_cfa_register 7
 4787 0006 7860     		str	r0, [r7, #4]
2638:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2640:./Lib/Src/stm32f4xx_rtc.c **** 
2641:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2642:./Lib/Src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4788              		.loc 1 2642 63
 4789 0008 7B68     		ldr	r3, [r7, #4]
 4790 000a 9BB2     		uxth	r3, r3
 4791 000c 43F08003 		orr	r3, r3, #128
 4792              		.loc 1 2642 36
 4793 0010 DA43     		mvns	r2, r3
 4794              		.loc 1 2642 93
 4795 0012 064B     		ldr	r3, .L285
 4796 0014 DB68     		ldr	r3, [r3, #12]
 4797              		.loc 1 2642 79
 4798 0016 03F08003 		and	r3, r3, #128
 4799              		.loc 1 2642 6
 4800 001a 0449     		ldr	r1, .L285
 4801              		.loc 1 2642 14
 4802 001c 1343     		orrs	r3, r3, r2
 4803              		.loc 1 2642 12
 4804 001e CB60     		str	r3, [r1, #12]
2643:./Lib/Src/stm32f4xx_rtc.c **** }
 4805              		.loc 1 2643 1
 4806 0020 00BF     		nop
 4807 0022 0C37     		adds	r7, r7, #12
 4808              		.cfi_def_cfa_offset 4
 4809 0024 BD46     		mov	sp, r7
 4810              		.cfi_def_cfa_register 13
 4811              		@ sp needed
 4812 0026 5DF8047B 		ldr	r7, [sp], #4
 4813              		.cfi_restore 7
 4814              		.cfi_def_cfa_offset 0
 4815 002a 7047     		bx	lr
 4816              	.L286:
 4817              		.align	2
 4818              	.L285:
 4819 002c 00280040 		.word	1073752064
 4820              		.cfi_endproc
 4821              	.LFE175:
 4823              		.section	.text.RTC_GetITStatus,"ax",%progbits
 4824              		.align	1
 4825              		.global	RTC_GetITStatus
ARM GAS  /tmp/ccHYJizt.s 			page 131


 4826              		.syntax unified
 4827              		.thumb
 4828              		.thumb_func
 4830              	RTC_GetITStatus:
 4831              	.LFB176:
2644:./Lib/Src/stm32f4xx_rtc.c **** 
2645:./Lib/Src/stm32f4xx_rtc.c **** /**
2646:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2647:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2648:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2649:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2650:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2651:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2652:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2653:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2654:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt
2655:./Lib/Src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2656:./Lib/Src/stm32f4xx_rtc.c ****   */
2657:./Lib/Src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2658:./Lib/Src/stm32f4xx_rtc.c **** {
 4832              		.loc 1 2658 1
 4833              		.cfi_startproc
 4834              		@ args = 0, pretend = 0, frame = 24
 4835              		@ frame_needed = 1, uses_anonymous_args = 0
 4836              		@ link register save eliminated.
 4837 0000 80B4     		push	{r7}
 4838              		.cfi_def_cfa_offset 4
 4839              		.cfi_offset 7, -4
 4840 0002 87B0     		sub	sp, sp, #28
 4841              		.cfi_def_cfa_offset 32
 4842 0004 00AF     		add	r7, sp, #0
 4843              		.cfi_def_cfa_register 7
 4844 0006 7860     		str	r0, [r7, #4]
2659:./Lib/Src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4845              		.loc 1 2659 12
 4846 0008 0023     		movs	r3, #0
 4847 000a FB75     		strb	r3, [r7, #23]
2660:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4848              		.loc 1 2660 12
 4849 000c 0023     		movs	r3, #0
 4850 000e 3B61     		str	r3, [r7, #16]
 4851              		.loc 1 2660 24
 4852 0010 0023     		movs	r3, #0
 4853 0012 FB60     		str	r3, [r7, #12]
2661:./Lib/Src/stm32f4xx_rtc.c ****  
2662:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2663:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2664:./Lib/Src/stm32f4xx_rtc.c ****   
2665:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2666:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4854              		.loc 1 2666 26
 4855 0014 164B     		ldr	r3, .L291
 4856 0016 1B6C     		ldr	r3, [r3, #64]
 4857              		.loc 1 2666 10
 4858 0018 03F00403 		and	r3, r3, #4
 4859 001c 3B61     		str	r3, [r7, #16]
2667:./Lib/Src/stm32f4xx_rtc.c ****  
ARM GAS  /tmp/ccHYJizt.s 			page 132


2668:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2669:./Lib/Src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)) | (tmpreg & (RTC_IT >> 1
 4860              		.loc 1 2669 33
 4861 001e 144B     		ldr	r3, .L291
 4862 0020 9A68     		ldr	r2, [r3, #8]
 4863              		.loc 1 2669 38
 4864 0022 7B68     		ldr	r3, [r7, #4]
 4865 0024 1A40     		ands	r2, r2, r3
 4866              		.loc 1 2669 68
 4867 0026 7B68     		ldr	r3, [r7, #4]
 4868 0028 D90B     		lsrs	r1, r3, #15
 4869              		.loc 1 2669 58
 4870 002a 3B69     		ldr	r3, [r7, #16]
 4871 002c 0B40     		ands	r3, r3, r1
 4872              		.loc 1 2669 48
 4873 002e 1A43     		orrs	r2, r2, r3
 4874              		.loc 1 2669 96
 4875 0030 7B68     		ldr	r3, [r7, #4]
 4876 0032 190C     		lsrs	r1, r3, #16
 4877              		.loc 1 2669 86
 4878 0034 3B69     		ldr	r3, [r7, #16]
 4879 0036 0B40     		ands	r3, r3, r1
 4880              		.loc 1 2669 16
 4881 0038 1343     		orrs	r3, r3, r2
 4882 003a FB60     		str	r3, [r7, #12]
2670:./Lib/Src/stm32f4xx_rtc.c ****   
2671:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2672:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4883              		.loc 1 2672 27
 4884 003c 0C4B     		ldr	r3, .L291
 4885 003e DA68     		ldr	r2, [r3, #12]
 4886              		.loc 1 2672 53
 4887 0040 7B68     		ldr	r3, [r7, #4]
 4888 0042 1B09     		lsrs	r3, r3, #4
 4889              		.loc 1 2672 10
 4890 0044 1340     		ands	r3, r3, r2
 4891 0046 3B61     		str	r3, [r7, #16]
2673:./Lib/Src/stm32f4xx_rtc.c ****   
2674:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2675:./Lib/Src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4892              		.loc 1 2675 6
 4893 0048 FB68     		ldr	r3, [r7, #12]
 4894 004a 002B     		cmp	r3, #0
 4895 004c 06D0     		beq	.L288
 4896              		.loc 1 2675 53 discriminator 1
 4897 004e 3B69     		ldr	r3, [r7, #16]
 4898 0050 9BB2     		uxth	r3, r3
 4899              		.loc 1 2675 41 discriminator 1
 4900 0052 002B     		cmp	r3, #0
 4901 0054 02D0     		beq	.L288
2676:./Lib/Src/stm32f4xx_rtc.c ****   {
2677:./Lib/Src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4902              		.loc 1 2677 15
 4903 0056 0123     		movs	r3, #1
 4904 0058 FB75     		strb	r3, [r7, #23]
 4905 005a 01E0     		b	.L289
 4906              	.L288:
ARM GAS  /tmp/ccHYJizt.s 			page 133


2678:./Lib/Src/stm32f4xx_rtc.c ****   }
2679:./Lib/Src/stm32f4xx_rtc.c ****   else
2680:./Lib/Src/stm32f4xx_rtc.c ****   {
2681:./Lib/Src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4907              		.loc 1 2681 15
 4908 005c 0023     		movs	r3, #0
 4909 005e FB75     		strb	r3, [r7, #23]
 4910              	.L289:
2682:./Lib/Src/stm32f4xx_rtc.c ****   }
2683:./Lib/Src/stm32f4xx_rtc.c ****   return bitstatus;
 4911              		.loc 1 2683 10
 4912 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2684:./Lib/Src/stm32f4xx_rtc.c **** }
 4913              		.loc 1 2684 1
 4914 0062 1846     		mov	r0, r3
 4915 0064 1C37     		adds	r7, r7, #28
 4916              		.cfi_def_cfa_offset 4
 4917 0066 BD46     		mov	sp, r7
 4918              		.cfi_def_cfa_register 13
 4919              		@ sp needed
 4920 0068 5DF8047B 		ldr	r7, [sp], #4
 4921              		.cfi_restore 7
 4922              		.cfi_def_cfa_offset 0
 4923 006c 7047     		bx	lr
 4924              	.L292:
 4925 006e 00BF     		.align	2
 4926              	.L291:
 4927 0070 00280040 		.word	1073752064
 4928              		.cfi_endproc
 4929              	.LFE176:
 4931              		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4932              		.align	1
 4933              		.global	RTC_ClearITPendingBit
 4934              		.syntax unified
 4935              		.thumb
 4936              		.thumb_func
 4938              	RTC_ClearITPendingBit:
 4939              	.LFB177:
2685:./Lib/Src/stm32f4xx_rtc.c **** 
2686:./Lib/Src/stm32f4xx_rtc.c **** /**
2687:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2688:./Lib/Src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2689:./Lib/Src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2690:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2691:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2692:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2693:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2694:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt
2695:./Lib/Src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP2: Tamper 2 event interrupt 
2696:./Lib/Src/stm32f4xx_rtc.c ****   * @retval None
2697:./Lib/Src/stm32f4xx_rtc.c ****   */
2698:./Lib/Src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2699:./Lib/Src/stm32f4xx_rtc.c **** {
 4940              		.loc 1 2699 1
 4941              		.cfi_startproc
 4942              		@ args = 0, pretend = 0, frame = 16
 4943              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccHYJizt.s 			page 134


 4944              		@ link register save eliminated.
 4945 0000 80B4     		push	{r7}
 4946              		.cfi_def_cfa_offset 4
 4947              		.cfi_offset 7, -4
 4948 0002 85B0     		sub	sp, sp, #20
 4949              		.cfi_def_cfa_offset 24
 4950 0004 00AF     		add	r7, sp, #0
 4951              		.cfi_def_cfa_register 7
 4952 0006 7860     		str	r0, [r7, #4]
2700:./Lib/Src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4953              		.loc 1 2700 12
 4954 0008 0023     		movs	r3, #0
 4955 000a FB60     		str	r3, [r7, #12]
2701:./Lib/Src/stm32f4xx_rtc.c **** 
2702:./Lib/Src/stm32f4xx_rtc.c ****   /* Check the parameters */
2703:./Lib/Src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2704:./Lib/Src/stm32f4xx_rtc.c **** 
2705:./Lib/Src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2706:./Lib/Src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4956              		.loc 1 2706 10
 4957 000c 7B68     		ldr	r3, [r7, #4]
 4958 000e 1B09     		lsrs	r3, r3, #4
 4959 0010 FB60     		str	r3, [r7, #12]
2707:./Lib/Src/stm32f4xx_rtc.c **** 
2708:./Lib/Src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2709:./Lib/Src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4960              		.loc 1 2709 61
 4961 0012 FB68     		ldr	r3, [r7, #12]
 4962 0014 9BB2     		uxth	r3, r3
 4963 0016 43F08003 		orr	r3, r3, #128
 4964              		.loc 1 2709 36
 4965 001a DA43     		mvns	r2, r3
 4966              		.loc 1 2709 91
 4967 001c 064B     		ldr	r3, .L294
 4968 001e DB68     		ldr	r3, [r3, #12]
 4969              		.loc 1 2709 77
 4970 0020 03F08003 		and	r3, r3, #128
 4971              		.loc 1 2709 6
 4972 0024 0449     		ldr	r1, .L294
 4973              		.loc 1 2709 14
 4974 0026 1343     		orrs	r3, r3, r2
 4975              		.loc 1 2709 12
 4976 0028 CB60     		str	r3, [r1, #12]
2710:./Lib/Src/stm32f4xx_rtc.c **** }
 4977              		.loc 1 2710 1
 4978 002a 00BF     		nop
 4979 002c 1437     		adds	r7, r7, #20
 4980              		.cfi_def_cfa_offset 4
 4981 002e BD46     		mov	sp, r7
 4982              		.cfi_def_cfa_register 13
 4983              		@ sp needed
 4984 0030 5DF8047B 		ldr	r7, [sp], #4
 4985              		.cfi_restore 7
 4986              		.cfi_def_cfa_offset 0
 4987 0034 7047     		bx	lr
 4988              	.L295:
 4989 0036 00BF     		.align	2
ARM GAS  /tmp/ccHYJizt.s 			page 135


 4990              	.L294:
 4991 0038 00280040 		.word	1073752064
 4992              		.cfi_endproc
 4993              	.LFE177:
 4995              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 4996              		.align	1
 4997              		.syntax unified
 4998              		.thumb
 4999              		.thumb_func
 5001              	RTC_ByteToBcd2:
 5002              	.LFB178:
2711:./Lib/Src/stm32f4xx_rtc.c **** 
2712:./Lib/Src/stm32f4xx_rtc.c **** /**
2713:./Lib/Src/stm32f4xx_rtc.c ****   * @}
2714:./Lib/Src/stm32f4xx_rtc.c ****   */
2715:./Lib/Src/stm32f4xx_rtc.c **** 
2716:./Lib/Src/stm32f4xx_rtc.c **** /**
2717:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2718:./Lib/Src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2719:./Lib/Src/stm32f4xx_rtc.c ****   * @retval Converted byte
2720:./Lib/Src/stm32f4xx_rtc.c ****   */
2721:./Lib/Src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2722:./Lib/Src/stm32f4xx_rtc.c **** {
 5003              		.loc 1 2722 1
 5004              		.cfi_startproc
 5005              		@ args = 0, pretend = 0, frame = 16
 5006              		@ frame_needed = 1, uses_anonymous_args = 0
 5007              		@ link register save eliminated.
 5008 0000 80B4     		push	{r7}
 5009              		.cfi_def_cfa_offset 4
 5010              		.cfi_offset 7, -4
 5011 0002 85B0     		sub	sp, sp, #20
 5012              		.cfi_def_cfa_offset 24
 5013 0004 00AF     		add	r7, sp, #0
 5014              		.cfi_def_cfa_register 7
 5015 0006 0346     		mov	r3, r0
 5016 0008 FB71     		strb	r3, [r7, #7]
2723:./Lib/Src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 5017              		.loc 1 2723 11
 5018 000a 0023     		movs	r3, #0
 5019 000c FB73     		strb	r3, [r7, #15]
2724:./Lib/Src/stm32f4xx_rtc.c ****   
2725:./Lib/Src/stm32f4xx_rtc.c ****   while (Value >= 10)
 5020              		.loc 1 2725 9
 5021 000e 05E0     		b	.L297
 5022              	.L298:
2726:./Lib/Src/stm32f4xx_rtc.c ****   {
2727:./Lib/Src/stm32f4xx_rtc.c ****     bcdhigh++;
 5023              		.loc 1 2727 12
 5024 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5025 0012 0133     		adds	r3, r3, #1
 5026 0014 FB73     		strb	r3, [r7, #15]
2728:./Lib/Src/stm32f4xx_rtc.c ****     Value -= 10;
 5027              		.loc 1 2728 11
 5028 0016 FB79     		ldrb	r3, [r7, #7]
 5029 0018 0A3B     		subs	r3, r3, #10
 5030 001a FB71     		strb	r3, [r7, #7]
ARM GAS  /tmp/ccHYJizt.s 			page 136


 5031              	.L297:
2725:./Lib/Src/stm32f4xx_rtc.c ****   {
 5032              		.loc 1 2725 16
 5033 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5034 001e 092B     		cmp	r3, #9
 5035 0020 F6D8     		bhi	.L298
2729:./Lib/Src/stm32f4xx_rtc.c ****   }
2730:./Lib/Src/stm32f4xx_rtc.c ****   
2731:./Lib/Src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 5036              		.loc 1 2731 12
 5037 0022 FB7B     		ldrb	r3, [r7, #15]
 5038 0024 1B01     		lsls	r3, r3, #4
 5039 0026 DAB2     		uxtb	r2, r3
 5040              		.loc 1 2731 36
 5041 0028 FB79     		ldrb	r3, [r7, #7]
 5042 002a 1343     		orrs	r3, r3, r2
 5043 002c DBB2     		uxtb	r3, r3
2732:./Lib/Src/stm32f4xx_rtc.c **** }
 5044              		.loc 1 2732 1
 5045 002e 1846     		mov	r0, r3
 5046 0030 1437     		adds	r7, r7, #20
 5047              		.cfi_def_cfa_offset 4
 5048 0032 BD46     		mov	sp, r7
 5049              		.cfi_def_cfa_register 13
 5050              		@ sp needed
 5051 0034 5DF8047B 		ldr	r7, [sp], #4
 5052              		.cfi_restore 7
 5053              		.cfi_def_cfa_offset 0
 5054 0038 7047     		bx	lr
 5055              		.cfi_endproc
 5056              	.LFE178:
 5058              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 5059              		.align	1
 5060              		.syntax unified
 5061              		.thumb
 5062              		.thumb_func
 5064              	RTC_Bcd2ToByte:
 5065              	.LFB179:
2733:./Lib/Src/stm32f4xx_rtc.c **** 
2734:./Lib/Src/stm32f4xx_rtc.c **** /**
2735:./Lib/Src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2736:./Lib/Src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2737:./Lib/Src/stm32f4xx_rtc.c ****   * @retval Converted word
2738:./Lib/Src/stm32f4xx_rtc.c ****   */
2739:./Lib/Src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2740:./Lib/Src/stm32f4xx_rtc.c **** {
 5066              		.loc 1 2740 1
 5067              		.cfi_startproc
 5068              		@ args = 0, pretend = 0, frame = 16
 5069              		@ frame_needed = 1, uses_anonymous_args = 0
 5070              		@ link register save eliminated.
 5071 0000 80B4     		push	{r7}
 5072              		.cfi_def_cfa_offset 4
 5073              		.cfi_offset 7, -4
 5074 0002 85B0     		sub	sp, sp, #20
 5075              		.cfi_def_cfa_offset 24
 5076 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccHYJizt.s 			page 137


 5077              		.cfi_def_cfa_register 7
 5078 0006 0346     		mov	r3, r0
 5079 0008 FB71     		strb	r3, [r7, #7]
2741:./Lib/Src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 5080              		.loc 1 2741 11
 5081 000a 0023     		movs	r3, #0
 5082 000c FB73     		strb	r3, [r7, #15]
2742:./Lib/Src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 5083              		.loc 1 2742 43
 5084 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5085 0010 1B09     		lsrs	r3, r3, #4
 5086 0012 DBB2     		uxtb	r3, r3
 5087              		.loc 1 2742 7
 5088 0014 1A46     		mov	r2, r3
 5089 0016 9200     		lsls	r2, r2, #2
 5090 0018 1344     		add	r3, r3, r2
 5091 001a 5B00     		lsls	r3, r3, #1
 5092 001c FB73     		strb	r3, [r7, #15]
2743:./Lib/Src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 5093              		.loc 1 2743 24
 5094 001e FB79     		ldrb	r3, [r7, #7]
 5095 0020 03F00F03 		and	r3, r3, #15
 5096 0024 DAB2     		uxtb	r2, r3
 5097              		.loc 1 2743 15
 5098 0026 FB7B     		ldrb	r3, [r7, #15]
 5099 0028 1344     		add	r3, r3, r2
 5100 002a DBB2     		uxtb	r3, r3
2744:./Lib/Src/stm32f4xx_rtc.c **** }
 5101              		.loc 1 2744 1
 5102 002c 1846     		mov	r0, r3
 5103 002e 1437     		adds	r7, r7, #20
 5104              		.cfi_def_cfa_offset 4
 5105 0030 BD46     		mov	sp, r7
 5106              		.cfi_def_cfa_register 13
 5107              		@ sp needed
 5108 0032 5DF8047B 		ldr	r7, [sp], #4
 5109              		.cfi_restore 7
 5110              		.cfi_def_cfa_offset 0
 5111 0036 7047     		bx	lr
 5112              		.cfi_endproc
 5113              	.LFE179:
 5115              		.text
 5116              	.Letext0:
 5117              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 5118              		.file 3 "./Start/stm32f4xx.h"
 5119              		.file 4 "./Lib/inc/stm32f4xx_rtc.h"
ARM GAS  /tmp/ccHYJizt.s 			page 138


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/ccHYJizt.s:21     .text.RTC_DeInit:0000000000000000 $t
     /tmp/ccHYJizt.s:27     .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/ccHYJizt.s:453    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccHYJizt.s:601    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/ccHYJizt.s:217    .text.RTC_DeInit:00000000000000ec $d
     /tmp/ccHYJizt.s:223    .text.RTC_Init:0000000000000000 $t
     /tmp/ccHYJizt.s:229    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/ccHYJizt.s:559    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/ccHYJizt.s:330    .text.RTC_Init:0000000000000074 $d
     /tmp/ccHYJizt.s:335    .text.RTC_StructInit:0000000000000000 $t
     /tmp/ccHYJizt.s:341    .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/ccHYJizt.s:383    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:389    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/ccHYJizt.s:442    .text.RTC_WriteProtectionCmd:0000000000000030 $d
     /tmp/ccHYJizt.s:447    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccHYJizt.s:548    .text.RTC_EnterInitMode:0000000000000070 $d
     /tmp/ccHYJizt.s:553    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/ccHYJizt.s:590    .text.RTC_ExitInitMode:000000000000001c $d
     /tmp/ccHYJizt.s:595    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccHYJizt.s:700    .text.RTC_WaitForSynchro:0000000000000074 $d
     /tmp/ccHYJizt.s:705    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:711    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/ccHYJizt.s:796    .text.RTC_RefClockCmd:0000000000000064 $d
     /tmp/ccHYJizt.s:801    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:807    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/ccHYJizt.s:873    .text.RTC_BypassShadowCmd:0000000000000048 $d
     /tmp/ccHYJizt.s:878    .text.RTC_SetTime:0000000000000000 $t
     /tmp/ccHYJizt.s:884    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/ccHYJizt.s:5064   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccHYJizt.s:5001   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccHYJizt.s:1091   .text.RTC_SetTime:0000000000000110 $d
     /tmp/ccHYJizt.s:1096   .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/ccHYJizt.s:1102   .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/ccHYJizt.s:1148   .text.RTC_GetTime:0000000000000000 $t
     /tmp/ccHYJizt.s:1154   .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/ccHYJizt.s:1264   .text.RTC_GetTime:00000000000000a0 $d
     /tmp/ccHYJizt.s:1269   .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/ccHYJizt.s:1275   .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/ccHYJizt.s:1317   .text.RTC_GetSubSecond:0000000000000024 $d
     /tmp/ccHYJizt.s:1322   .text.RTC_SetDate:0000000000000000 $t
     /tmp/ccHYJizt.s:1328   .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/ccHYJizt.s:1540   .text.RTC_SetDate:000000000000011c $d
     /tmp/ccHYJizt.s:1545   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/ccHYJizt.s:1551   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/ccHYJizt.s:1597   .text.RTC_GetDate:0000000000000000 $t
     /tmp/ccHYJizt.s:1603   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/ccHYJizt.s:1711   .text.RTC_GetDate:0000000000000098 $d
     /tmp/ccHYJizt.s:1716   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/ccHYJizt.s:1722   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/ccHYJizt.s:1955   .text.RTC_SetAlarm:0000000000000134 $d
     /tmp/ccHYJizt.s:1960   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/ccHYJizt.s:1966   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/ccHYJizt.s:2024   .text.RTC_GetAlarm:0000000000000000 $t
     /tmp/ccHYJizt.s:2030   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/ccHYJizt.s:2179   .text.RTC_GetAlarm:00000000000000e0 $d
ARM GAS  /tmp/ccHYJizt.s 			page 139


     /tmp/ccHYJizt.s:2184   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:2190   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/ccHYJizt.s:2319   .text.RTC_AlarmCmd:0000000000000098 $d
     /tmp/ccHYJizt.s:2324   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:2330   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/ccHYJizt.s:2401   .text.RTC_AlarmSubSecondConfig:000000000000004c $d
     /tmp/ccHYJizt.s:2406   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/ccHYJizt.s:2412   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/ccHYJizt.s:2465   .text.RTC_GetAlarmSubSecond:0000000000000038 $d
     /tmp/ccHYJizt.s:2470   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:2476   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/ccHYJizt.s:2535   .text.RTC_WakeUpClockConfig:0000000000000040 $d
     /tmp/ccHYJizt.s:2540   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/ccHYJizt.s:2546   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/ccHYJizt.s:2595   .text.RTC_SetWakeUpCounter:000000000000002c $d
     /tmp/ccHYJizt.s:2600   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/ccHYJizt.s:2606   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/ccHYJizt.s:2635   .text.RTC_GetWakeUpCounter:0000000000000014 $d
     /tmp/ccHYJizt.s:2640   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:2646   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/ccHYJizt.s:2763   .text.RTC_WakeUpCmd:0000000000000090 $d
     /tmp/ccHYJizt.s:2768   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:2774   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/ccHYJizt.s:2838   .text.RTC_DayLightSavingConfig:0000000000000044 $d
     /tmp/ccHYJizt.s:2843   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/ccHYJizt.s:2849   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/ccHYJizt.s:2878   .text.RTC_GetStoreOperation:0000000000000018 $d
     /tmp/ccHYJizt.s:2883   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:2889   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/ccHYJizt.s:2953   .text.RTC_OutputConfig:0000000000000044 $d
     /tmp/ccHYJizt.s:2958   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:2964   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/ccHYJizt.s:3036   .text.RTC_CoarseCalibConfig:000000000000004c $d
     /tmp/ccHYJizt.s:3041   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:3047   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/ccHYJizt.s:3132   .text.RTC_CoarseCalibCmd:0000000000000064 $d
     /tmp/ccHYJizt.s:3137   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:3143   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/ccHYJizt.s:3209   .text.RTC_CalibOutputCmd:0000000000000048 $d
     /tmp/ccHYJizt.s:3214   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:3220   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/ccHYJizt.s:3279   .text.RTC_CalibOutputConfig:0000000000000040 $d
     /tmp/ccHYJizt.s:3284   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:3290   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/ccHYJizt.s:3401   .text.RTC_SmoothCalibConfig:0000000000000080 $d
     /tmp/ccHYJizt.s:3406   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:3412   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/ccHYJizt.s:3491   .text.RTC_TimeStampCmd:0000000000000060 $d
     /tmp/ccHYJizt.s:3496   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/ccHYJizt.s:3502   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/ccHYJizt.s:3685   .text.RTC_GetTimeStamp:000000000000011c $d
     /tmp/ccHYJizt.s:3690   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/ccHYJizt.s:3696   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/ccHYJizt.s:3724   .text.RTC_GetTimeStampSubSecond:0000000000000014 $d
     /tmp/ccHYJizt.s:3729   .text.RTC_TamperTriggerConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:3735   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/ccHYJizt.s:3797   .text.RTC_TamperTriggerConfig:000000000000003c $d
ARM GAS  /tmp/ccHYJizt.s 			page 140


     /tmp/ccHYJizt.s:3802   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:3808   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/ccHYJizt.s:3866   .text.RTC_TamperCmd:000000000000003c $d
     /tmp/ccHYJizt.s:3871   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:3877   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/ccHYJizt.s:3921   .text.RTC_TamperFilterConfig:000000000000002c $d
     /tmp/ccHYJizt.s:3926   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:3932   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/ccHYJizt.s:3976   .text.RTC_TamperSamplingFreqConfig:000000000000002c $d
     /tmp/ccHYJizt.s:3981   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/ccHYJizt.s:3987   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccHYJizt.s:4031   .text.RTC_TamperPinsPrechargeDuration:000000000000002c $d
     /tmp/ccHYJizt.s:4036   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:4042   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccHYJizt.s:4094   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000038 $d
     /tmp/ccHYJizt.s:4099   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/ccHYJizt.s:4105   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/ccHYJizt.s:4157   .text.RTC_TamperPullUpCmd:0000000000000038 $d
     /tmp/ccHYJizt.s:4162   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/ccHYJizt.s:4168   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/ccHYJizt.s:4217   .text.RTC_WriteBackupRegister:0000000000000030 $d
     /tmp/ccHYJizt.s:4222   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/ccHYJizt.s:4228   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/ccHYJizt.s:4274   .text.RTC_ReadBackupRegister:000000000000002c $d
     /tmp/ccHYJizt.s:4279   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/ccHYJizt.s:4285   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/ccHYJizt.s:4329   .text.RTC_TamperPinSelection:000000000000002c $d
     /tmp/ccHYJizt.s:4334   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/ccHYJizt.s:4340   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/ccHYJizt.s:4384   .text.RTC_TimeStampPinSelection:000000000000002c $d
     /tmp/ccHYJizt.s:4389   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:4395   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/ccHYJizt.s:4439   .text.RTC_OutputTypeConfig:000000000000002c $d
     /tmp/ccHYJizt.s:4444   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:4450   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/ccHYJizt.s:4578   .text.RTC_SynchroShiftConfig:0000000000000098 $d
     /tmp/ccHYJizt.s:4583   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/ccHYJizt.s:4589   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/ccHYJizt.s:4690   .text.RTC_ITConfig:0000000000000078 $d
     /tmp/ccHYJizt.s:4695   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/ccHYJizt.s:4701   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/ccHYJizt.s:4761   .text.RTC_GetFlagStatus:000000000000003c $d
     /tmp/ccHYJizt.s:4767   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/ccHYJizt.s:4773   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/ccHYJizt.s:4819   .text.RTC_ClearFlag:000000000000002c $d
     /tmp/ccHYJizt.s:4824   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/ccHYJizt.s:4830   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/ccHYJizt.s:4927   .text.RTC_GetITStatus:0000000000000070 $d
     /tmp/ccHYJizt.s:4932   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccHYJizt.s:4938   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
     /tmp/ccHYJizt.s:4991   .text.RTC_ClearITPendingBit:0000000000000038 $d
     /tmp/ccHYJizt.s:4996   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccHYJizt.s:5059   .text.RTC_Bcd2ToByte:0000000000000000 $t

NO UNDEFINED SYMBOLS
