ARM GAS  /tmp/ccz2hB7k.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_rcc.c"
  20              		.section	.data.APBAHBPrescTable,"aw"
  21              		.align	2
  24              	APBAHBPrescTable:
  25 0000 00000000 		.ascii	"\000\000\000\000\001\002\003\004\001\002\003\004\006"
  25      01020304 
  25      01020304 
  25      06
  26 000d 070809   		.ascii	"\007\010\011"
  27              		.section	.text.RCC_DeInit,"ax",%progbits
  28              		.align	1
  29              		.global	RCC_DeInit
  30              		.syntax unified
  31              		.thumb
  32              		.thumb_func
  34              	RCC_DeInit:
  35              	.LFB123:
   1:./Lib/Src/stm32f4xx_rcc.c **** /**
   2:./Lib/Src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:./Lib/Src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_rcc.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_rcc.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:./Lib/Src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:./Lib/Src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:./Lib/Src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:./Lib/Src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:./Lib/Src/stm32f4xx_rcc.c ****   *
  14:./Lib/Src/stm32f4xx_rcc.c ****  @verbatim
  15:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================
  16:./Lib/Src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================
  18:./Lib/Src/stm32f4xx_rcc.c ****     [..]  
  19:./Lib/Src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:./Lib/Src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:./Lib/Src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:./Lib/Src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
ARM GAS  /tmp/ccz2hB7k.s 			page 2


  23:./Lib/Src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:./Lib/Src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:./Lib/Src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:./Lib/Src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:./Lib/Src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:./Lib/Src/stm32f4xx_rcc.c ****     [..]          
  29:./Lib/Src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:
  30:./Lib/Src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:./Lib/Src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:./Lib/Src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:./Lib/Src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:./Lib/Src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:./Lib/Src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:./Lib/Src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  37:./Lib/Src/stm32f4xx_rcc.c ****  @endverbatim    
  38:./Lib/Src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:./Lib/Src/stm32f4xx_rcc.c ****   * @attention
  40:./Lib/Src/stm32f4xx_rcc.c ****   *
  41:./Lib/Src/stm32f4xx_rcc.c ****   * Copyright (c) 2016 STMicroelectronics.
  42:./Lib/Src/stm32f4xx_rcc.c ****   * All rights reserved.
  43:./Lib/Src/stm32f4xx_rcc.c ****   *
  44:./Lib/Src/stm32f4xx_rcc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  45:./Lib/Src/stm32f4xx_rcc.c ****   * in the root directory of this software component.
  46:./Lib/Src/stm32f4xx_rcc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  47:./Lib/Src/stm32f4xx_rcc.c ****   *
  48:./Lib/Src/stm32f4xx_rcc.c ****   ******************************************************************************
  49:./Lib/Src/stm32f4xx_rcc.c ****   */
  50:./Lib/Src/stm32f4xx_rcc.c **** 
  51:./Lib/Src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  52:./Lib/Src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  53:./Lib/Src/stm32f4xx_rcc.c **** 
  54:./Lib/Src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  55:./Lib/Src/stm32f4xx_rcc.c ****   * @{
  56:./Lib/Src/stm32f4xx_rcc.c ****   */
  57:./Lib/Src/stm32f4xx_rcc.c **** 
  58:./Lib/Src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  59:./Lib/Src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  60:./Lib/Src/stm32f4xx_rcc.c ****   * @{
  61:./Lib/Src/stm32f4xx_rcc.c ****   */ 
  62:./Lib/Src/stm32f4xx_rcc.c **** 
  63:./Lib/Src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  64:./Lib/Src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  65:./Lib/Src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  66:./Lib/Src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  67:./Lib/Src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  68:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  69:./Lib/Src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  70:./Lib/Src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  71:./Lib/Src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  72:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  73:./Lib/Src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  74:./Lib/Src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  75:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  76:./Lib/Src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  77:./Lib/Src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  78:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  79:./Lib/Src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
ARM GAS  /tmp/ccz2hB7k.s 			page 3


  80:./Lib/Src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  81:./Lib/Src/stm32f4xx_rcc.c **** 
  82:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  83:./Lib/Src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  84:./Lib/Src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  85:./Lib/Src/stm32f4xx_rcc.c **** 
  86:./Lib/Src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:./Lib/Src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:./Lib/Src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:./Lib/Src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:./Lib/Src/stm32f4xx_rcc.c **** 
  92:./Lib/Src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:./Lib/Src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:./Lib/Src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:./Lib/Src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:./Lib/Src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:./Lib/Src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:./Lib/Src/stm32f4xx_rcc.c **** 
 101:./Lib/Src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 102:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 103:./Lib/Src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 104:./Lib/Src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 105:./Lib/Src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 106:./Lib/Src/stm32f4xx_rcc.c **** 
 107:./Lib/Src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 108:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 109:./Lib/Src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 110:./Lib/Src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 111:./Lib/Src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 112:./Lib/Src/stm32f4xx_rcc.c ****     
 113:./Lib/Src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
 114:./Lib/Src/stm32f4xx_rcc.c **** #define RCC_CFGR_OFFSET            (RCC_OFFSET + 0x08)
 115:./Lib/Src/stm32f4xx_rcc.c ****  #if defined(STM32F410xx)
 116:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of MCO1EN bit */
 117:./Lib/Src/stm32f4xx_rcc.c **** #define RCC_MCO1EN_BIT_NUMBER      0x8
 118:./Lib/Src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO1EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO1EN_BIT_NUMBE
 119:./Lib/Src/stm32f4xx_rcc.c **** 
 120:./Lib/Src/stm32f4xx_rcc.c **** /* Alias word address of MCO2EN bit */
 121:./Lib/Src/stm32f4xx_rcc.c **** #define RCC_MCO2EN_BIT_NUMBER      0x9
 122:./Lib/Src/stm32f4xx_rcc.c **** #define RCC_CFGR_MCO2EN_BB         (PERIPH_BB_BASE + (RCC_CFGR_OFFSET * 32) + (RCC_MCO2EN_BIT_NUMBE
 123:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
 124:./Lib/Src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 125:./Lib/Src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 126:./Lib/Src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 127:./Lib/Src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 128:./Lib/Src/stm32f4xx_rcc.c **** 
 129:./Lib/Src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 130:./Lib/Src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 131:./Lib/Src/stm32f4xx_rcc.c **** 
 132:./Lib/Src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 133:./Lib/Src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 134:./Lib/Src/stm32f4xx_rcc.c **** 
 135:./Lib/Src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 136:./Lib/Src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
ARM GAS  /tmp/ccz2hB7k.s 			page 4


 137:./Lib/Src/stm32f4xx_rcc.c **** 
 138:./Lib/Src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 139:./Lib/Src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 140:./Lib/Src/stm32f4xx_rcc.c **** 
 141:./Lib/Src/stm32f4xx_rcc.c **** /* BDCR register base address */
 142:./Lib/Src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 143:./Lib/Src/stm32f4xx_rcc.c **** 
 144:./Lib/Src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 145:./Lib/Src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 146:./Lib/Src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 147:./Lib/Src/stm32f4xx_rcc.c **** 
 148:./Lib/Src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 149:./Lib/Src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 150:./Lib/Src/stm32f4xx_rcc.c **** 
 151:./Lib/Src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 152:./Lib/Src/stm32f4xx_rcc.c ****   * @{
 153:./Lib/Src/stm32f4xx_rcc.c ****   */ 
 154:./Lib/Src/stm32f4xx_rcc.c **** 
 155:./Lib/Src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 156:./Lib/Src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 157:./Lib/Src/stm32f4xx_rcc.c ****  *
 158:./Lib/Src/stm32f4xx_rcc.c **** @verbatim   
 159:./Lib/Src/stm32f4xx_rcc.c ****  ===================================================================================
 160:./Lib/Src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 161:./Lib/Src/stm32f4xx_rcc.c ****  ===================================================================================
 162:./Lib/Src/stm32f4xx_rcc.c ****     [..]
 163:./Lib/Src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 164:./Lib/Src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 165:./Lib/Src/stm32f4xx_rcc.c ****   
 166:./Lib/Src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 167:./Lib/Src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 168:./Lib/Src/stm32f4xx_rcc.c **** 
 169:./Lib/Src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 170:./Lib/Src/stm32f4xx_rcc.c ****           clock source.
 171:./Lib/Src/stm32f4xx_rcc.c **** 
 172:./Lib/Src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 173:./Lib/Src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 174:./Lib/Src/stm32f4xx_rcc.c **** 
 175:./Lib/Src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 176:./Lib/Src/stm32f4xx_rcc.c **** 
 177:./Lib/Src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 178:./Lib/Src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 179:./Lib/Src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 180:./Lib/Src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 181:./Lib/Src/stm32f4xx_rcc.c **** 
 182:./Lib/Src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 183:./Lib/Src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 184:./Lib/Src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 185:./Lib/Src/stm32f4xx_rcc.c ****      
 186:./Lib/Src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 187:./Lib/Src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx/446xx/469xx/479xx d
 188:./Lib/Src/stm32f4xx_rcc.c ****   
 189:./Lib/Src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 190:./Lib/Src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 191:./Lib/Src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 192:./Lib/Src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 193:./Lib/Src/stm32f4xx_rcc.c ****          exception vector.   
ARM GAS  /tmp/ccz2hB7k.s 			page 5


 194:./Lib/Src/stm32f4xx_rcc.c **** 
 195:./Lib/Src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 196:./Lib/Src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 197:./Lib/Src/stm32f4xx_rcc.c **** 
 198:./Lib/Src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 199:./Lib/Src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 200:./Lib/Src/stm32f4xx_rcc.c ****  @endverbatim
 201:./Lib/Src/stm32f4xx_rcc.c ****   * @{
 202:./Lib/Src/stm32f4xx_rcc.c ****   */
 203:./Lib/Src/stm32f4xx_rcc.c **** 
 204:./Lib/Src/stm32f4xx_rcc.c **** /**
 205:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 206:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 207:./Lib/Src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 208:./Lib/Src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 209:./Lib/Src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 210:./Lib/Src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 211:./Lib/Src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 212:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 213:./Lib/Src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 214:./Lib/Src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 215:./Lib/Src/stm32f4xx_rcc.c ****   * @param  None
 216:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 217:./Lib/Src/stm32f4xx_rcc.c ****   */
 218:./Lib/Src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 219:./Lib/Src/stm32f4xx_rcc.c **** {
  36              		.loc 1 219 1
  37              		.cfi_startproc
  38              		@ args = 0, pretend = 0, frame = 0
  39              		@ frame_needed = 1, uses_anonymous_args = 0
  40              		@ link register save eliminated.
  41 0000 80B4     		push	{r7}
  42              		.cfi_def_cfa_offset 4
  43              		.cfi_offset 7, -4
  44 0002 00AF     		add	r7, sp, #0
  45              		.cfi_def_cfa_register 7
 220:./Lib/Src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 221:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  46              		.loc 1 221 6
  47 0004 144B     		ldr	r3, .L2
  48 0006 1B68     		ldr	r3, [r3]
  49 0008 134A     		ldr	r2, .L2
  50              		.loc 1 221 11
  51 000a 43F00103 		orr	r3, r3, #1
  52 000e 1360     		str	r3, [r2]
 222:./Lib/Src/stm32f4xx_rcc.c **** 
 223:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 224:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  53              		.loc 1 224 6
  54 0010 114B     		ldr	r3, .L2
  55              		.loc 1 224 13
  56 0012 0022     		movs	r2, #0
  57 0014 9A60     		str	r2, [r3, #8]
 225:./Lib/Src/stm32f4xx_rcc.c **** 
 226:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits
 227:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
  58              		.loc 1 227 6
ARM GAS  /tmp/ccz2hB7k.s 			page 6


  59 0016 104B     		ldr	r3, .L2
  60 0018 1B68     		ldr	r3, [r3]
  61 001a 0F4A     		ldr	r2, .L2
  62              		.loc 1 227 11
  63 001c 23F0A853 		bic	r3, r3, #352321536
  64 0020 23F41023 		bic	r3, r3, #589824
  65 0024 1360     		str	r3, [r2]
 228:./Lib/Src/stm32f4xx_rcc.c ****   
 229:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 230:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  66              		.loc 1 230 6
  67 0026 0C4B     		ldr	r3, .L2
  68              		.loc 1 230 16
  69 0028 0C4A     		ldr	r2, .L2+4
  70 002a 5A60     		str	r2, [r3, #4]
 231:./Lib/Src/stm32f4xx_rcc.c **** 
 232:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 233:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 234:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
  71              		.loc 1 234 6
  72 002c 0A4B     		ldr	r3, .L2
  73              		.loc 1 234 19
  74 002e 0C4A     		ldr	r2, .L2+8
  75 0030 C3F88420 		str	r2, [r3, #132]
 235:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
 236:./Lib/Src/stm32f4xx_rcc.c **** 
 237:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 238:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
 239:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
 240:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
 241:./Lib/Src/stm32f4xx_rcc.c ****   
 242:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 243:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  76              		.loc 1 243 6
  77 0034 084B     		ldr	r3, .L2
  78 0036 1B68     		ldr	r3, [r3]
  79 0038 074A     		ldr	r2, .L2
  80              		.loc 1 243 11
  81 003a 23F48023 		bic	r3, r3, #262144
  82 003e 1360     		str	r3, [r2]
 244:./Lib/Src/stm32f4xx_rcc.c **** 
 245:./Lib/Src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 246:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  83              		.loc 1 246 6
  84 0040 054B     		ldr	r3, .L2
  85              		.loc 1 246 12
  86 0042 0022     		movs	r2, #0
  87 0044 DA60     		str	r2, [r3, #12]
 247:./Lib/Src/stm32f4xx_rcc.c **** 
 248:./Lib/Src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423
 249:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000;
  88              		.loc 1 249 6
  89 0046 044B     		ldr	r3, .L2
  90              		.loc 1 249 16
  91 0048 0022     		movs	r2, #0
  92 004a C3F88C20 		str	r2, [r3, #140]
 250:./Lib/Src/stm32f4xx_rcc.c ****   
ARM GAS  /tmp/ccz2hB7k.s 			page 7


 251:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
 252:./Lib/Src/stm32f4xx_rcc.c ****   /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F
 253:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 = 0x00000000;
 254:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */  
 255:./Lib/Src/stm32f4xx_rcc.c **** }
  93              		.loc 1 255 1
  94 004e 00BF     		nop
  95 0050 BD46     		mov	sp, r7
  96              		.cfi_def_cfa_register 13
  97              		@ sp needed
  98 0052 5DF8047B 		ldr	r7, [sp], #4
  99              		.cfi_restore 7
 100              		.cfi_def_cfa_offset 0
 101 0056 7047     		bx	lr
 102              	.L3:
 103              		.align	2
 104              	.L2:
 105 0058 00380240 		.word	1073887232
 106 005c 10300024 		.word	603992080
 107 0060 00300020 		.word	536883200
 108              		.cfi_endproc
 109              	.LFE123:
 111              		.section	.text.RCC_HSEConfig,"ax",%progbits
 112              		.align	1
 113              		.global	RCC_HSEConfig
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	RCC_HSEConfig:
 119              	.LFB124:
 256:./Lib/Src/stm32f4xx_rcc.c **** 
 257:./Lib/Src/stm32f4xx_rcc.c **** /**
 258:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 259:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 260:./Lib/Src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 261:./Lib/Src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 262:./Lib/Src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 263:./Lib/Src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 264:./Lib/Src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 265:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 266:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 267:./Lib/Src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 268:./Lib/Src/stm32f4xx_rcc.c ****   *         function.    
 269:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 270:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 271:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 272:./Lib/Src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 273:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 274:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 275:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 276:./Lib/Src/stm32f4xx_rcc.c ****   */
 277:./Lib/Src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 278:./Lib/Src/stm32f4xx_rcc.c **** {
 120              		.loc 1 278 1
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 8
 123              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccz2hB7k.s 			page 8


 124              		@ link register save eliminated.
 125 0000 80B4     		push	{r7}
 126              		.cfi_def_cfa_offset 4
 127              		.cfi_offset 7, -4
 128 0002 83B0     		sub	sp, sp, #12
 129              		.cfi_def_cfa_offset 16
 130 0004 00AF     		add	r7, sp, #0
 131              		.cfi_def_cfa_register 7
 132 0006 0346     		mov	r3, r0
 133 0008 FB71     		strb	r3, [r7, #7]
 279:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 280:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 281:./Lib/Src/stm32f4xx_rcc.c **** 
 282:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 283:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 134              		.loc 1 283 3
 135 000a 064B     		ldr	r3, .L5
 136              		.loc 1 283 38
 137 000c 0022     		movs	r2, #0
 138 000e 1A70     		strb	r2, [r3]
 284:./Lib/Src/stm32f4xx_rcc.c **** 
 285:./Lib/Src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 286:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 139              		.loc 1 286 3
 140 0010 044A     		ldr	r2, .L5
 141              		.loc 1 286 38
 142 0012 FB79     		ldrb	r3, [r7, #7]
 143 0014 1370     		strb	r3, [r2]
 287:./Lib/Src/stm32f4xx_rcc.c **** }
 144              		.loc 1 287 1
 145 0016 00BF     		nop
 146 0018 0C37     		adds	r7, r7, #12
 147              		.cfi_def_cfa_offset 4
 148 001a BD46     		mov	sp, r7
 149              		.cfi_def_cfa_register 13
 150              		@ sp needed
 151 001c 5DF8047B 		ldr	r7, [sp], #4
 152              		.cfi_restore 7
 153              		.cfi_def_cfa_offset 0
 154 0020 7047     		bx	lr
 155              	.L6:
 156 0022 00BF     		.align	2
 157              	.L5:
 158 0024 02380240 		.word	1073887234
 159              		.cfi_endproc
 160              	.LFE124:
 162              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 163              		.align	1
 164              		.global	RCC_WaitForHSEStartUp
 165              		.syntax unified
 166              		.thumb
 167              		.thumb_func
 169              	RCC_WaitForHSEStartUp:
 170              	.LFB125:
 288:./Lib/Src/stm32f4xx_rcc.c **** 
 289:./Lib/Src/stm32f4xx_rcc.c **** /**
 290:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
ARM GAS  /tmp/ccz2hB7k.s 			page 9


 291:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 292:./Lib/Src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 293:./Lib/Src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 294:./Lib/Src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 295:./Lib/Src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 296:./Lib/Src/stm32f4xx_rcc.c ****   * @param  None
 297:./Lib/Src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 298:./Lib/Src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 299:./Lib/Src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 300:./Lib/Src/stm32f4xx_rcc.c ****   */
 301:./Lib/Src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 302:./Lib/Src/stm32f4xx_rcc.c **** {
 171              		.loc 1 302 1
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 8
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175 0000 80B5     		push	{r7, lr}
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 7, -8
 178              		.cfi_offset 14, -4
 179 0002 82B0     		sub	sp, sp, #8
 180              		.cfi_def_cfa_offset 16
 181 0004 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
 303:./Lib/Src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 183              		.loc 1 303 17
 184 0006 0023     		movs	r3, #0
 185 0008 3B60     		str	r3, [r7]
 304:./Lib/Src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 186              		.loc 1 304 15
 187 000a 0023     		movs	r3, #0
 188 000c FB71     		strb	r3, [r7, #7]
 305:./Lib/Src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 189              		.loc 1 305 14
 190 000e 0023     		movs	r3, #0
 191 0010 BB71     		strb	r3, [r7, #6]
 192              	.L9:
 306:./Lib/Src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 307:./Lib/Src/stm32f4xx_rcc.c ****   do
 308:./Lib/Src/stm32f4xx_rcc.c ****   {
 309:./Lib/Src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 193              		.loc 1 309 17 discriminator 2
 194 0012 3120     		movs	r0, #49
 195 0014 FFF7FEFF 		bl	RCC_GetFlagStatus
 196 0018 0346     		mov	r3, r0
 197 001a BB71     		strb	r3, [r7, #6]
 310:./Lib/Src/stm32f4xx_rcc.c ****     startupcounter++;
 198              		.loc 1 310 19 discriminator 2
 199 001c 3B68     		ldr	r3, [r7]
 200 001e 0133     		adds	r3, r3, #1
 201 0020 3B60     		str	r3, [r7]
 311:./Lib/Src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 202              		.loc 1 311 27 discriminator 2
 203 0022 3B68     		ldr	r3, [r7]
 204              		.loc 1 311 51 discriminator 2
 205 0024 B3F5A04F 		cmp	r3, #20480
 206 0028 02D0     		beq	.L8
ARM GAS  /tmp/ccz2hB7k.s 			page 10


 207              		.loc 1 311 51 is_stmt 0 discriminator 1
 208 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 209 002c 002B     		cmp	r3, #0
 210 002e F0D0     		beq	.L9
 211              	.L8:
 312:./Lib/Src/stm32f4xx_rcc.c **** 
 313:./Lib/Src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 212              		.loc 1 313 7 is_stmt 1
 213 0030 3120     		movs	r0, #49
 214 0032 FFF7FEFF 		bl	RCC_GetFlagStatus
 215 0036 0346     		mov	r3, r0
 216              		.loc 1 313 6
 217 0038 002B     		cmp	r3, #0
 218 003a 02D0     		beq	.L10
 314:./Lib/Src/stm32f4xx_rcc.c ****   {
 315:./Lib/Src/stm32f4xx_rcc.c ****     status = SUCCESS;
 219              		.loc 1 315 12
 220 003c 0123     		movs	r3, #1
 221 003e FB71     		strb	r3, [r7, #7]
 222 0040 01E0     		b	.L11
 223              	.L10:
 316:./Lib/Src/stm32f4xx_rcc.c ****   }
 317:./Lib/Src/stm32f4xx_rcc.c ****   else
 318:./Lib/Src/stm32f4xx_rcc.c ****   {
 319:./Lib/Src/stm32f4xx_rcc.c ****     status = ERROR;
 224              		.loc 1 319 12
 225 0042 0023     		movs	r3, #0
 226 0044 FB71     		strb	r3, [r7, #7]
 227              	.L11:
 320:./Lib/Src/stm32f4xx_rcc.c ****   }
 321:./Lib/Src/stm32f4xx_rcc.c ****   return (status);
 228              		.loc 1 321 10
 229 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 322:./Lib/Src/stm32f4xx_rcc.c **** }
 230              		.loc 1 322 1
 231 0048 1846     		mov	r0, r3
 232 004a 0837     		adds	r7, r7, #8
 233              		.cfi_def_cfa_offset 8
 234 004c BD46     		mov	sp, r7
 235              		.cfi_def_cfa_register 13
 236              		@ sp needed
 237 004e 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE125:
 241              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 242              		.align	1
 243              		.global	RCC_AdjustHSICalibrationValue
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 248              	RCC_AdjustHSICalibrationValue:
 249              	.LFB126:
 323:./Lib/Src/stm32f4xx_rcc.c **** 
 324:./Lib/Src/stm32f4xx_rcc.c **** /**
 325:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 326:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 327:./Lib/Src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
ARM GAS  /tmp/ccz2hB7k.s 			page 11


 328:./Lib/Src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 329:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 330:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 331:./Lib/Src/stm32f4xx_rcc.c ****   */
 332:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 333:./Lib/Src/stm32f4xx_rcc.c **** {
 250              		.loc 1 333 1
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 16
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 255 0000 80B4     		push	{r7}
 256              		.cfi_def_cfa_offset 4
 257              		.cfi_offset 7, -4
 258 0002 85B0     		sub	sp, sp, #20
 259              		.cfi_def_cfa_offset 24
 260 0004 00AF     		add	r7, sp, #0
 261              		.cfi_def_cfa_register 7
 262 0006 0346     		mov	r3, r0
 263 0008 FB71     		strb	r3, [r7, #7]
 334:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 264              		.loc 1 334 12
 265 000a 0023     		movs	r3, #0
 266 000c FB60     		str	r3, [r7, #12]
 335:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 336:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 337:./Lib/Src/stm32f4xx_rcc.c **** 
 338:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 267              		.loc 1 338 15
 268 000e 0A4B     		ldr	r3, .L14
 269              		.loc 1 338 10
 270 0010 1B68     		ldr	r3, [r3]
 271 0012 FB60     		str	r3, [r7, #12]
 339:./Lib/Src/stm32f4xx_rcc.c **** 
 340:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 272              		.loc 1 341 10
 273 0014 FB68     		ldr	r3, [r7, #12]
 274 0016 23F0F803 		bic	r3, r3, #248
 275 001a FB60     		str	r3, [r7, #12]
 342:./Lib/Src/stm32f4xx_rcc.c **** 
 343:./Lib/Src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 344:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 276              		.loc 1 344 13
 277 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 278              		.loc 1 344 43
 279 001e DB00     		lsls	r3, r3, #3
 280              		.loc 1 344 10
 281 0020 FA68     		ldr	r2, [r7, #12]
 282 0022 1343     		orrs	r3, r3, r2
 283 0024 FB60     		str	r3, [r7, #12]
 345:./Lib/Src/stm32f4xx_rcc.c **** 
 346:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
 347:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 284              		.loc 1 347 6
 285 0026 044A     		ldr	r2, .L14
 286              		.loc 1 347 11
ARM GAS  /tmp/ccz2hB7k.s 			page 12


 287 0028 FB68     		ldr	r3, [r7, #12]
 288 002a 1360     		str	r3, [r2]
 348:./Lib/Src/stm32f4xx_rcc.c **** }
 289              		.loc 1 348 1
 290 002c 00BF     		nop
 291 002e 1437     		adds	r7, r7, #20
 292              		.cfi_def_cfa_offset 4
 293 0030 BD46     		mov	sp, r7
 294              		.cfi_def_cfa_register 13
 295              		@ sp needed
 296 0032 5DF8047B 		ldr	r7, [sp], #4
 297              		.cfi_restore 7
 298              		.cfi_def_cfa_offset 0
 299 0036 7047     		bx	lr
 300              	.L15:
 301              		.align	2
 302              	.L14:
 303 0038 00380240 		.word	1073887232
 304              		.cfi_endproc
 305              	.LFE126:
 307              		.section	.text.RCC_HSICmd,"ax",%progbits
 308              		.align	1
 309              		.global	RCC_HSICmd
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 314              	RCC_HSICmd:
 315              	.LFB127:
 349:./Lib/Src/stm32f4xx_rcc.c **** 
 350:./Lib/Src/stm32f4xx_rcc.c **** /**
 351:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 352:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 353:./Lib/Src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 354:./Lib/Src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 355:./Lib/Src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 356:./Lib/Src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 357:./Lib/Src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 358:./Lib/Src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 359:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 360:./Lib/Src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 361:./Lib/Src/stm32f4xx_rcc.c ****   *         system clock source.  
 362:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 363:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 364:./Lib/Src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 365:./Lib/Src/stm32f4xx_rcc.c ****   *         clock cycles.  
 366:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 367:./Lib/Src/stm32f4xx_rcc.c ****   */
 368:./Lib/Src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 369:./Lib/Src/stm32f4xx_rcc.c **** {
 316              		.loc 1 369 1
 317              		.cfi_startproc
 318              		@ args = 0, pretend = 0, frame = 8
 319              		@ frame_needed = 1, uses_anonymous_args = 0
 320              		@ link register save eliminated.
 321 0000 80B4     		push	{r7}
 322              		.cfi_def_cfa_offset 4
 323              		.cfi_offset 7, -4
ARM GAS  /tmp/ccz2hB7k.s 			page 13


 324 0002 83B0     		sub	sp, sp, #12
 325              		.cfi_def_cfa_offset 16
 326 0004 00AF     		add	r7, sp, #0
 327              		.cfi_def_cfa_register 7
 328 0006 0346     		mov	r3, r0
 329 0008 FB71     		strb	r3, [r7, #7]
 370:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 371:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 372:./Lib/Src/stm32f4xx_rcc.c **** 
 373:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 330              		.loc 1 373 3
 331 000a 044A     		ldr	r2, .L17
 332              		.loc 1 373 36
 333 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 334              		.loc 1 373 34
 335 000e 1360     		str	r3, [r2]
 374:./Lib/Src/stm32f4xx_rcc.c **** }
 336              		.loc 1 374 1
 337 0010 00BF     		nop
 338 0012 0C37     		adds	r7, r7, #12
 339              		.cfi_def_cfa_offset 4
 340 0014 BD46     		mov	sp, r7
 341              		.cfi_def_cfa_register 13
 342              		@ sp needed
 343 0016 5DF8047B 		ldr	r7, [sp], #4
 344              		.cfi_restore 7
 345              		.cfi_def_cfa_offset 0
 346 001a 7047     		bx	lr
 347              	.L18:
 348              		.align	2
 349              	.L17:
 350 001c 00004742 		.word	1111949312
 351              		.cfi_endproc
 352              	.LFE127:
 354              		.section	.text.RCC_LSEConfig,"ax",%progbits
 355              		.align	1
 356              		.global	RCC_LSEConfig
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 361              	RCC_LSEConfig:
 362              	.LFB128:
 375:./Lib/Src/stm32f4xx_rcc.c **** 
 376:./Lib/Src/stm32f4xx_rcc.c **** /**
 377:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 378:./Lib/Src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 379:./Lib/Src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 380:./Lib/Src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 381:./Lib/Src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 382:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 383:./Lib/Src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 384:./Lib/Src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 385:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 386:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 387:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 388:./Lib/Src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 389:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
ARM GAS  /tmp/ccz2hB7k.s 			page 14


 390:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 391:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 392:./Lib/Src/stm32f4xx_rcc.c ****   */
 393:./Lib/Src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 394:./Lib/Src/stm32f4xx_rcc.c **** {
 363              		.loc 1 394 1
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 8
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 368 0000 80B4     		push	{r7}
 369              		.cfi_def_cfa_offset 4
 370              		.cfi_offset 7, -4
 371 0002 83B0     		sub	sp, sp, #12
 372              		.cfi_def_cfa_offset 16
 373 0004 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 375 0006 0346     		mov	r3, r0
 376 0008 FB71     		strb	r3, [r7, #7]
 395:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 397:./Lib/Src/stm32f4xx_rcc.c **** 
 398:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 399:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 400:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 377              		.loc 1 400 3
 378 000a 0D4B     		ldr	r3, .L24
 379              		.loc 1 400 34
 380 000c 0022     		movs	r2, #0
 381 000e 1A70     		strb	r2, [r3]
 401:./Lib/Src/stm32f4xx_rcc.c **** 
 402:./Lib/Src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 403:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 382              		.loc 1 403 3
 383 0010 0B4B     		ldr	r3, .L24
 384              		.loc 1 403 34
 385 0012 0022     		movs	r2, #0
 386 0014 1A70     		strb	r2, [r3]
 404:./Lib/Src/stm32f4xx_rcc.c **** 
 405:./Lib/Src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 406:./Lib/Src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 387              		.loc 1 406 3
 388 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 389 0018 012B     		cmp	r3, #1
 390 001a 02D0     		beq	.L20
 391 001c 042B     		cmp	r3, #4
 392 001e 04D0     		beq	.L21
 407:./Lib/Src/stm32f4xx_rcc.c ****   {
 408:./Lib/Src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 409:./Lib/Src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 410:./Lib/Src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 411:./Lib/Src/stm32f4xx_rcc.c ****       break;
 412:./Lib/Src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 413:./Lib/Src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 414:./Lib/Src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 415:./Lib/Src/stm32f4xx_rcc.c ****       break;
 416:./Lib/Src/stm32f4xx_rcc.c ****     default:
ARM GAS  /tmp/ccz2hB7k.s 			page 15


 417:./Lib/Src/stm32f4xx_rcc.c ****       break;
 393              		.loc 1 417 7
 394 0020 07E0     		b	.L23
 395              	.L20:
 410:./Lib/Src/stm32f4xx_rcc.c ****       break;
 396              		.loc 1 410 7
 397 0022 074B     		ldr	r3, .L24
 410:./Lib/Src/stm32f4xx_rcc.c ****       break;
 398              		.loc 1 410 38
 399 0024 0122     		movs	r2, #1
 400 0026 1A70     		strb	r2, [r3]
 411:./Lib/Src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 401              		.loc 1 411 7
 402 0028 03E0     		b	.L23
 403              	.L21:
 414:./Lib/Src/stm32f4xx_rcc.c ****       break;
 404              		.loc 1 414 7
 405 002a 054B     		ldr	r3, .L24
 414:./Lib/Src/stm32f4xx_rcc.c ****       break;
 406              		.loc 1 414 38
 407 002c 0522     		movs	r2, #5
 408 002e 1A70     		strb	r2, [r3]
 415:./Lib/Src/stm32f4xx_rcc.c ****     default:
 409              		.loc 1 415 7
 410 0030 00BF     		nop
 411              	.L23:
 418:./Lib/Src/stm32f4xx_rcc.c ****   }
 419:./Lib/Src/stm32f4xx_rcc.c **** }
 412              		.loc 1 419 1
 413 0032 00BF     		nop
 414 0034 0C37     		adds	r7, r7, #12
 415              		.cfi_def_cfa_offset 4
 416 0036 BD46     		mov	sp, r7
 417              		.cfi_def_cfa_register 13
 418              		@ sp needed
 419 0038 5DF8047B 		ldr	r7, [sp], #4
 420              		.cfi_restore 7
 421              		.cfi_def_cfa_offset 0
 422 003c 7047     		bx	lr
 423              	.L25:
 424 003e 00BF     		.align	2
 425              	.L24:
 426 0040 70380240 		.word	1073887344
 427              		.cfi_endproc
 428              	.LFE128:
 430              		.section	.text.RCC_LSICmd,"ax",%progbits
 431              		.align	1
 432              		.global	RCC_LSICmd
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 437              	RCC_LSICmd:
 438              	.LFB129:
 420:./Lib/Src/stm32f4xx_rcc.c **** 
 421:./Lib/Src/stm32f4xx_rcc.c **** /**
 422:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 423:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
ARM GAS  /tmp/ccz2hB7k.s 			page 16


 424:./Lib/Src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 425:./Lib/Src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 426:./Lib/Src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 427:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 428:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 429:./Lib/Src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 430:./Lib/Src/stm32f4xx_rcc.c ****   *         clock cycles. 
 431:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 432:./Lib/Src/stm32f4xx_rcc.c ****   */
 433:./Lib/Src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 434:./Lib/Src/stm32f4xx_rcc.c **** {
 439              		.loc 1 434 1
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444 0000 80B4     		push	{r7}
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 7, -4
 447 0002 83B0     		sub	sp, sp, #12
 448              		.cfi_def_cfa_offset 16
 449 0004 00AF     		add	r7, sp, #0
 450              		.cfi_def_cfa_register 7
 451 0006 0346     		mov	r3, r0
 452 0008 FB71     		strb	r3, [r7, #7]
 435:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 436:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 437:./Lib/Src/stm32f4xx_rcc.c **** 
 438:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 453              		.loc 1 438 3
 454 000a 044A     		ldr	r2, .L27
 455              		.loc 1 438 37
 456 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 457              		.loc 1 438 35
 458 000e 1360     		str	r3, [r2]
 439:./Lib/Src/stm32f4xx_rcc.c **** }
 459              		.loc 1 439 1
 460 0010 00BF     		nop
 461 0012 0C37     		adds	r7, r7, #12
 462              		.cfi_def_cfa_offset 4
 463 0014 BD46     		mov	sp, r7
 464              		.cfi_def_cfa_register 13
 465              		@ sp needed
 466 0016 5DF8047B 		ldr	r7, [sp], #4
 467              		.cfi_restore 7
 468              		.cfi_def_cfa_offset 0
 469 001a 7047     		bx	lr
 470              	.L28:
 471              		.align	2
 472              	.L27:
 473 001c 800E4742 		.word	1111953024
 474              		.cfi_endproc
 475              	.LFE129:
 477              		.section	.text.RCC_PLLConfig,"ax",%progbits
 478              		.align	1
 479              		.global	RCC_PLLConfig
 480              		.syntax unified
ARM GAS  /tmp/ccz2hB7k.s 			page 17


 481              		.thumb
 482              		.thumb_func
 484              	RCC_PLLConfig:
 485              	.LFB130:
 440:./Lib/Src/stm32f4xx_rcc.c **** 
 441:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
 442:./Lib/Src/stm32f4xx_rcc.c **** /**
 443:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 444:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 445:./Lib/Src/stm32f4xx_rcc.c ****   *  
 446:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 447:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 448:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 449:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 450:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 451:./Lib/Src/stm32f4xx_rcc.c ****   *  
 452:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 453:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 454:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 455:./Lib/Src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 456:./Lib/Src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 457:./Lib/Src/stm32f4xx_rcc.c ****   *  
 458:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 459:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 460:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 461:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 462:./Lib/Src/stm32f4xx_rcc.c ****   *   
 463:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 464:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 465:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 466:./Lib/Src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 467:./Lib/Src/stm32f4xx_rcc.c ****   *  
 468:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 469:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 470:./Lib/Src/stm32f4xx_rcc.c ****   *
 471:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLR: specifies the division factor for I2S, SAI, SYSTEM, SPDIF in STM32F446xx devices
 472:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 473:./Lib/Src/stm32f4xx_rcc.c ****   *
 474:./Lib/Src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 475:./Lib/Src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 476:./Lib/Src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 477:./Lib/Src/stm32f4xx_rcc.c ****   *         correctly.
 478:./Lib/Src/stm32f4xx_rcc.c ****   *   
 479:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 480:./Lib/Src/stm32f4xx_rcc.c ****   */
 481:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 482:./Lib/Src/stm32f4xx_rcc.c **** {
 483:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 484:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 485:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 486:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 487:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 488:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 489:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLR_VALUE(PLLR));
 490:./Lib/Src/stm32f4xx_rcc.c ****   
 491:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 492:./Lib/Src/stm32f4xx_rcc.c ****                  (PLLQ << 24) | (PLLR << 28);
ARM GAS  /tmp/ccz2hB7k.s 			page 18


 493:./Lib/Src/stm32f4xx_rcc.c **** }
 494:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
 495:./Lib/Src/stm32f4xx_rcc.c **** 
 496:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 497:./Lib/Src/stm32f4xx_rcc.c **** /**
 498:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 499:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 500:./Lib/Src/stm32f4xx_rcc.c ****   *  
 501:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 502:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 503:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 504:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 505:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 506:./Lib/Src/stm32f4xx_rcc.c ****   *  
 507:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 508:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 509:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 510:./Lib/Src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 511:./Lib/Src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 512:./Lib/Src/stm32f4xx_rcc.c ****   *  
 513:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 514:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 515:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 516:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 517:./Lib/Src/stm32f4xx_rcc.c ****   *   
 518:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 519:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 520:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 521:./Lib/Src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 522:./Lib/Src/stm32f4xx_rcc.c ****   *  
 523:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 524:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 525:./Lib/Src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 526:./Lib/Src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 527:./Lib/Src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 528:./Lib/Src/stm32f4xx_rcc.c ****   *         correctly.
 529:./Lib/Src/stm32f4xx_rcc.c ****   *   
 530:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 531:./Lib/Src/stm32f4xx_rcc.c ****   */
 532:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 533:./Lib/Src/stm32f4xx_rcc.c **** {
 486              		.loc 1 533 1
 487              		.cfi_startproc
 488              		@ args = 4, pretend = 0, frame = 16
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491 0000 80B4     		push	{r7}
 492              		.cfi_def_cfa_offset 4
 493              		.cfi_offset 7, -4
 494 0002 85B0     		sub	sp, sp, #20
 495              		.cfi_def_cfa_offset 24
 496 0004 00AF     		add	r7, sp, #0
 497              		.cfi_def_cfa_register 7
 498 0006 F860     		str	r0, [r7, #12]
 499 0008 B960     		str	r1, [r7, #8]
 500 000a 7A60     		str	r2, [r7, #4]
 501 000c 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccz2hB7k.s 			page 19


 534:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 535:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 536:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 537:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 538:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 539:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 540:./Lib/Src/stm32f4xx_rcc.c **** 
 541:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 502              		.loc 1 541 31
 503 000e 7B68     		ldr	r3, [r7, #4]
 504 0010 9A01     		lsls	r2, r3, #6
 505              		.loc 1 541 23
 506 0012 BB68     		ldr	r3, [r7, #8]
 507 0014 1A43     		orrs	r2, r2, r3
 508              		.loc 1 541 47
 509 0016 3B68     		ldr	r3, [r7]
 510 0018 5B08     		lsrs	r3, r3, #1
 511              		.loc 1 541 53
 512 001a 013B     		subs	r3, r3, #1
 513              		.loc 1 541 57
 514 001c 1B04     		lsls	r3, r3, #16
 515              		.loc 1 541 37
 516 001e 1A43     		orrs	r2, r2, r3
 517              		.loc 1 541 64
 518 0020 FB68     		ldr	r3, [r7, #12]
 519 0022 1A43     		orrs	r2, r2, r3
 542:./Lib/Src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 520              		.loc 1 542 24
 521 0024 BB69     		ldr	r3, [r7, #24]
 522 0026 1B06     		lsls	r3, r3, #24
 541:./Lib/Src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 523              		.loc 1 541 6
 524 0028 0449     		ldr	r1, .L30
 541:./Lib/Src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 525              		.loc 1 541 82
 526 002a 1343     		orrs	r3, r3, r2
 541:./Lib/Src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 527              		.loc 1 541 16
 528 002c 4B60     		str	r3, [r1, #4]
 543:./Lib/Src/stm32f4xx_rcc.c **** }
 529              		.loc 1 543 1
 530 002e 00BF     		nop
 531 0030 1437     		adds	r7, r7, #20
 532              		.cfi_def_cfa_offset 4
 533 0032 BD46     		mov	sp, r7
 534              		.cfi_def_cfa_register 13
 535              		@ sp needed
 536 0034 5DF8047B 		ldr	r7, [sp], #4
 537              		.cfi_restore 7
 538              		.cfi_def_cfa_offset 0
 539 0038 7047     		bx	lr
 540              	.L31:
 541 003a 00BF     		.align	2
 542              	.L30:
 543 003c 00380240 		.word	1073887232
 544              		.cfi_endproc
 545              	.LFE130:
ARM GAS  /tmp/ccz2hB7k.s 			page 20


 547              		.section	.text.RCC_PLLCmd,"ax",%progbits
 548              		.align	1
 549              		.global	RCC_PLLCmd
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 554              	RCC_PLLCmd:
 555              	.LFB131:
 544:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 545:./Lib/Src/stm32f4xx_rcc.c **** 
 546:./Lib/Src/stm32f4xx_rcc.c **** /**
 547:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 548:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 549:./Lib/Src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 550:./Lib/Src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 551:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 552:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 553:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 554:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 555:./Lib/Src/stm32f4xx_rcc.c ****   */
 556:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 557:./Lib/Src/stm32f4xx_rcc.c **** {
 556              		.loc 1 557 1
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 8
 559              		@ frame_needed = 1, uses_anonymous_args = 0
 560              		@ link register save eliminated.
 561 0000 80B4     		push	{r7}
 562              		.cfi_def_cfa_offset 4
 563              		.cfi_offset 7, -4
 564 0002 83B0     		sub	sp, sp, #12
 565              		.cfi_def_cfa_offset 16
 566 0004 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 568 0006 0346     		mov	r3, r0
 569 0008 FB71     		strb	r3, [r7, #7]
 558:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 559:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 560:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 570              		.loc 1 560 3
 571 000a 044A     		ldr	r2, .L33
 572              		.loc 1 560 36
 573 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 574              		.loc 1 560 34
 575 000e 1360     		str	r3, [r2]
 561:./Lib/Src/stm32f4xx_rcc.c **** }
 576              		.loc 1 561 1
 577 0010 00BF     		nop
 578 0012 0C37     		adds	r7, r7, #12
 579              		.cfi_def_cfa_offset 4
 580 0014 BD46     		mov	sp, r7
 581              		.cfi_def_cfa_register 13
 582              		@ sp needed
 583 0016 5DF8047B 		ldr	r7, [sp], #4
 584              		.cfi_restore 7
 585              		.cfi_def_cfa_offset 0
 586 001a 7047     		bx	lr
ARM GAS  /tmp/ccz2hB7k.s 			page 21


 587              	.L34:
 588              		.align	2
 589              	.L33:
 590 001c 60004742 		.word	1111949408
 591              		.cfi_endproc
 592              	.LFE131:
 594              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 595              		.align	1
 596              		.global	RCC_PLLI2SConfig
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 601              	RCC_PLLI2SConfig:
 602              	.LFB132:
 562:./Lib/Src/stm32f4xx_rcc.c **** 
 563:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx)
 564:./Lib/Src/stm32f4xx_rcc.c **** /**
 565:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 566:./Lib/Src/stm32f4xx_rcc.c ****   *  
 567:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 568:./Lib/Src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 569:./Lib/Src/stm32f4xx_rcc.c ****   *    
 570:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 571:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 572:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 573:./Lib/Src/stm32f4xx_rcc.c ****   *             
 574:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 575:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 576:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 577:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 578:./Lib/Src/stm32f4xx_rcc.c ****   *    
 579:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 580:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 581:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 582:./Lib/Src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 583:./Lib/Src/stm32f4xx_rcc.c ****   *   
 584:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 585:./Lib/Src/stm32f4xx_rcc.c ****   */
 586:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 587:./Lib/Src/stm32f4xx_rcc.c **** {
 603              		.loc 1 587 1
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 8
 606              		@ frame_needed = 1, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608 0000 80B4     		push	{r7}
 609              		.cfi_def_cfa_offset 4
 610              		.cfi_offset 7, -4
 611 0002 83B0     		sub	sp, sp, #12
 612              		.cfi_def_cfa_offset 16
 613 0004 00AF     		add	r7, sp, #0
 614              		.cfi_def_cfa_register 7
 615 0006 7860     		str	r0, [r7, #4]
 616 0008 3960     		str	r1, [r7]
 588:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 589:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 590:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
ARM GAS  /tmp/ccz2hB7k.s 			page 22


 591:./Lib/Src/stm32f4xx_rcc.c **** 
 592:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 617              		.loc 1 592 30
 618 000a 7B68     		ldr	r3, [r7, #4]
 619 000c 9A01     		lsls	r2, r3, #6
 620              		.loc 1 592 47
 621 000e 3B68     		ldr	r3, [r7]
 622 0010 1B07     		lsls	r3, r3, #28
 623              		.loc 1 592 6
 624 0012 0549     		ldr	r1, .L36
 625              		.loc 1 592 36
 626 0014 1343     		orrs	r3, r3, r2
 627              		.loc 1 592 19
 628 0016 C1F88430 		str	r3, [r1, #132]
 593:./Lib/Src/stm32f4xx_rcc.c **** }
 629              		.loc 1 593 1
 630 001a 00BF     		nop
 631 001c 0C37     		adds	r7, r7, #12
 632              		.cfi_def_cfa_offset 4
 633 001e BD46     		mov	sp, r7
 634              		.cfi_def_cfa_register 13
 635              		@ sp needed
 636 0020 5DF8047B 		ldr	r7, [sp], #4
 637              		.cfi_restore 7
 638              		.cfi_def_cfa_offset 0
 639 0024 7047     		bx	lr
 640              	.L37:
 641 0026 00BF     		.align	2
 642              	.L36:
 643 0028 00380240 		.word	1073887232
 644              		.cfi_endproc
 645              	.LFE132:
 647              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 648              		.align	1
 649              		.global	RCC_PLLI2SCmd
 650              		.syntax unified
 651              		.thumb
 652              		.thumb_func
 654              	RCC_PLLI2SCmd:
 655              	.LFB133:
 594:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 595:./Lib/Src/stm32f4xx_rcc.c **** 
 596:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F411xE)
 597:./Lib/Src/stm32f4xx_rcc.c **** /**
 598:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 599:./Lib/Src/stm32f4xx_rcc.c ****   *  
 600:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F411xE devices. 
 601:./Lib/Src/stm32f4xx_rcc.c ****   *    
 602:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 603:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 604:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 605:./Lib/Src/stm32f4xx_rcc.c ****   *
 606:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 607:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 608:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 609:./Lib/Src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 610:./Lib/Src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
ARM GAS  /tmp/ccz2hB7k.s 			page 23


 611:./Lib/Src/stm32f4xx_rcc.c ****   *
 612:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 613:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 614:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 615:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 616:./Lib/Src/stm32f4xx_rcc.c ****   *    
 617:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 618:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 619:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 620:./Lib/Src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 621:./Lib/Src/stm32f4xx_rcc.c ****   *   
 622:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 623:./Lib/Src/stm32f4xx_rcc.c ****   */
 624:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR, uint32_t PLLI2SM)
 625:./Lib/Src/stm32f4xx_rcc.c **** {
 626:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 627:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 628:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 629:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 630:./Lib/Src/stm32f4xx_rcc.c **** 
 631:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28) | PLLI2SM;
 632:./Lib/Src/stm32f4xx_rcc.c **** }
 633:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F411xE */
 634:./Lib/Src/stm32f4xx_rcc.c **** 
 635:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 636:./Lib/Src/stm32f4xx_rcc.c **** /**
 637:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 638:./Lib/Src/stm32f4xx_rcc.c ****   * 
 639:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 640:./Lib/Src/stm32f4xx_rcc.c ****   *         
 641:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 642:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 643:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 644:./Lib/Src/stm32f4xx_rcc.c ****   *             
 645:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 646:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 647:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 648:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 649:./Lib/Src/stm32f4xx_rcc.c ****   * 
 650:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 651:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 652:./Lib/Src/stm32f4xx_rcc.c ****   *                 
 653:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 654:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 655:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 656:./Lib/Src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 657:./Lib/Src/stm32f4xx_rcc.c ****   *   
 658:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 659:./Lib/Src/stm32f4xx_rcc.c ****   */
 660:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 661:./Lib/Src/stm32f4xx_rcc.c **** {
 662:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 663:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 664:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 665:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 666:./Lib/Src/stm32f4xx_rcc.c **** 
 667:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
ARM GAS  /tmp/ccz2hB7k.s 			page 24


 668:./Lib/Src/stm32f4xx_rcc.c **** }
 669:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
 670:./Lib/Src/stm32f4xx_rcc.c **** 
 671:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F412xG ) || defined(STM32F413_423xx) || defined(STM32F446xx)
 672:./Lib/Src/stm32f4xx_rcc.c **** /**
 673:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 674:./Lib/Src/stm32f4xx_rcc.c ****   * 
 675:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 676:./Lib/Src/stm32f4xx_rcc.c ****   *         
 677:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 678:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 679:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 680:./Lib/Src/stm32f4xx_rcc.c ****   * 
 681:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SM: specifies the division factor for PLLI2S VCO input clock
 682:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 683:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SM parameter correctly to ensure that the VCO input
 684:./Lib/Src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 685:./Lib/Src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLI2S jitter.
 686:./Lib/Src/stm32f4xx_rcc.c ****   *
 687:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 688:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 689:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 690:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 691:./Lib/Src/stm32f4xx_rcc.c ****   *
 692:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SP: specifies the division factor for PLL 48Mhz clock output
 693:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 694:./Lib/Src/stm32f4xx_rcc.c ****   *
 695:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 696:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 697:./Lib/Src/stm32f4xx_rcc.c ****   *                 
 698:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 699:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 700:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 701:./Lib/Src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 702:./Lib/Src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 703:./Lib/Src/stm32f4xx_rcc.c ****   *   
 704:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 705:./Lib/Src/stm32f4xx_rcc.c ****   */
 706:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SM, uint32_t PLLI2SN, uint32_t PLLI2SP, uint32_t PLLI2SQ, uint3
 707:./Lib/Src/stm32f4xx_rcc.c **** {
 708:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 709:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SM));
 710:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 711:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SP));
 712:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 713:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 714:./Lib/Src/stm32f4xx_rcc.c **** 
 715:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR =  PLLI2SM | (PLLI2SN << 6) | (((PLLI2SP >> 1) -1) << 16) | (PLLI2SQ << 24) | (PL
 716:./Lib/Src/stm32f4xx_rcc.c **** }
 717:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
 718:./Lib/Src/stm32f4xx_rcc.c **** 
 719:./Lib/Src/stm32f4xx_rcc.c **** /**
 720:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 721:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 722:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 723:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 724:./Lib/Src/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccz2hB7k.s 			page 25


 725:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 726:./Lib/Src/stm32f4xx_rcc.c **** {
 656              		.loc 1 726 1
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 8
 659              		@ frame_needed = 1, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 661 0000 80B4     		push	{r7}
 662              		.cfi_def_cfa_offset 4
 663              		.cfi_offset 7, -4
 664 0002 83B0     		sub	sp, sp, #12
 665              		.cfi_def_cfa_offset 16
 666 0004 00AF     		add	r7, sp, #0
 667              		.cfi_def_cfa_register 7
 668 0006 0346     		mov	r3, r0
 669 0008 FB71     		strb	r3, [r7, #7]
 727:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 728:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 729:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 670              		.loc 1 729 3
 671 000a 044A     		ldr	r2, .L39
 672              		.loc 1 729 39
 673 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 674              		.loc 1 729 37
 675 000e 1360     		str	r3, [r2]
 730:./Lib/Src/stm32f4xx_rcc.c **** }
 676              		.loc 1 730 1
 677 0010 00BF     		nop
 678 0012 0C37     		adds	r7, r7, #12
 679              		.cfi_def_cfa_offset 4
 680 0014 BD46     		mov	sp, r7
 681              		.cfi_def_cfa_register 13
 682              		@ sp needed
 683 0016 5DF8047B 		ldr	r7, [sp], #4
 684              		.cfi_restore 7
 685              		.cfi_def_cfa_offset 0
 686 001a 7047     		bx	lr
 687              	.L40:
 688              		.align	2
 689              	.L39:
 690 001c 68004742 		.word	1111949416
 691              		.cfi_endproc
 692              	.LFE133:
 694              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 695              		.align	1
 696              		.global	RCC_PLLSAIConfig
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 701              	RCC_PLLSAIConfig:
 702              	.LFB134:
 731:./Lib/Src/stm32f4xx_rcc.c **** 
 732:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
 733:./Lib/Src/stm32f4xx_rcc.c **** /**
 734:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 735:./Lib/Src/stm32f4xx_rcc.c ****   *
 736:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F469_479xx devices 
ARM GAS  /tmp/ccz2hB7k.s 			page 26


 737:./Lib/Src/stm32f4xx_rcc.c ****   *        
 738:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 739:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 740:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 741:./Lib/Src/stm32f4xx_rcc.c ****   *
 742:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 743:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 744:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 745:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 746:./Lib/Src/stm32f4xx_rcc.c ****   *
 747:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 748:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}..
 749:./Lib/Src/stm32f4xx_rcc.c ****   *           
 750:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 751:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 752:./Lib/Src/stm32f4xx_rcc.c ****   *            
 753:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 754:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 755:./Lib/Src/stm32f4xx_rcc.c ****   *   
 756:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 757:./Lib/Src/stm32f4xx_rcc.c ****   */
 758:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 759:./Lib/Src/stm32f4xx_rcc.c **** {
 760:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 761:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 762:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 763:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 764:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 765:./Lib/Src/stm32f4xx_rcc.c **** 
 766:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16) | (PLLSAIQ << 24) | (PLLSAIR << 28
 767:./Lib/Src/stm32f4xx_rcc.c **** }
 768:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */
 769:./Lib/Src/stm32f4xx_rcc.c **** 
 770:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
 771:./Lib/Src/stm32f4xx_rcc.c **** /**
 772:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 773:./Lib/Src/stm32f4xx_rcc.c ****   *
 774:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F446xx devices 
 775:./Lib/Src/stm32f4xx_rcc.c ****   *        
 776:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 777:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 778:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 779:./Lib/Src/stm32f4xx_rcc.c ****   * 
 780:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIM: specifies the division factor for PLLSAI VCO input clock
 781:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between Min_Data = 2 and Max_Data = 63.
 782:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIM parameter correctly to ensure that the VCO input
 783:./Lib/Src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 784:./Lib/Src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLLSAI jitter.
 785:./Lib/Src/stm32f4xx_rcc.c ****   *
 786:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 787:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 50 and 432.
 788:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 789:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 790:./Lib/Src/stm32f4xx_rcc.c ****   * 
 791:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIP: specifies the division factor for PLL 48Mhz clock output
 792:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number in the range {2, 4, 6, or 8}.
 793:./Lib/Src/stm32f4xx_rcc.c ****   *
ARM GAS  /tmp/ccz2hB7k.s 			page 27


 794:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 795:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 2 and 15.
 796:./Lib/Src/stm32f4xx_rcc.c ****   *   
 797:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 798:./Lib/Src/stm32f4xx_rcc.c ****   */
 799:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIM, uint32_t PLLSAIN, uint32_t PLLSAIP, uint32_t PLLSAIQ)
 800:./Lib/Src/stm32f4xx_rcc.c **** {
 801:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 802:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIM_VALUE(PLLSAIM));
 803:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 804:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIP_VALUE(PLLSAIP));
 805:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 806:./Lib/Src/stm32f4xx_rcc.c **** 
 807:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = PLLSAIM | (PLLSAIN << 6) | (((PLLSAIP >> 1) -1) << 16)  | (PLLSAIQ << 24);
 808:./Lib/Src/stm32f4xx_rcc.c **** }
 809:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
 810:./Lib/Src/stm32f4xx_rcc.c **** 
 811:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
 812:./Lib/Src/stm32f4xx_rcc.c **** /**
 813:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 814:./Lib/Src/stm32f4xx_rcc.c ****   *
 815:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 816:./Lib/Src/stm32f4xx_rcc.c ****   *        
 817:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 818:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 819:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 820:./Lib/Src/stm32f4xx_rcc.c ****   *             
 821:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 822:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 50 and 432.
 823:./Lib/Src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 824:./Lib/Src/stm32f4xx_rcc.c ****   *         output frequency is between 100 and 432 MHz.
 825:./Lib/Src/stm32f4xx_rcc.c ****   *           
 826:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 827:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 828:./Lib/Src/stm32f4xx_rcc.c ****   *            
 829:./Lib/Src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 830:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 831:./Lib/Src/stm32f4xx_rcc.c ****   *   
 832:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 833:./Lib/Src/stm32f4xx_rcc.c ****   */
 834:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 835:./Lib/Src/stm32f4xx_rcc.c **** {
 703              		.loc 1 835 1
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 16
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 708 0000 80B4     		push	{r7}
 709              		.cfi_def_cfa_offset 4
 710              		.cfi_offset 7, -4
 711 0002 85B0     		sub	sp, sp, #20
 712              		.cfi_def_cfa_offset 24
 713 0004 00AF     		add	r7, sp, #0
 714              		.cfi_def_cfa_register 7
 715 0006 F860     		str	r0, [r7, #12]
 716 0008 B960     		str	r1, [r7, #8]
 717 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccz2hB7k.s 			page 28


 836:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 837:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 838:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 839:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIQ_VALUE(PLLSAIQ));
 840:./Lib/Src/stm32f4xx_rcc.c ****   
 841:./Lib/Src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 718              		.loc 1 841 30
 719 000c FB68     		ldr	r3, [r7, #12]
 720 000e 9A01     		lsls	r2, r3, #6
 721              		.loc 1 841 47
 722 0010 BB68     		ldr	r3, [r7, #8]
 723 0012 1B06     		lsls	r3, r3, #24
 724              		.loc 1 841 36
 725 0014 1A43     		orrs	r2, r2, r3
 726              		.loc 1 841 65
 727 0016 7B68     		ldr	r3, [r7, #4]
 728 0018 1B07     		lsls	r3, r3, #28
 729              		.loc 1 841 6
 730 001a 0549     		ldr	r1, .L42
 731              		.loc 1 841 54
 732 001c 1343     		orrs	r3, r3, r2
 733              		.loc 1 841 19
 734 001e C1F88830 		str	r3, [r1, #136]
 842:./Lib/Src/stm32f4xx_rcc.c **** }
 735              		.loc 1 842 1
 736 0022 00BF     		nop
 737 0024 1437     		adds	r7, r7, #20
 738              		.cfi_def_cfa_offset 4
 739 0026 BD46     		mov	sp, r7
 740              		.cfi_def_cfa_register 13
 741              		@ sp needed
 742 0028 5DF8047B 		ldr	r7, [sp], #4
 743              		.cfi_restore 7
 744              		.cfi_def_cfa_offset 0
 745 002c 7047     		bx	lr
 746              	.L43:
 747 002e 00BF     		.align	2
 748              	.L42:
 749 0030 00380240 		.word	1073887232
 750              		.cfi_endproc
 751              	.LFE134:
 753              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 754              		.align	1
 755              		.global	RCC_PLLSAICmd
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 760              	RCC_PLLSAICmd:
 761              	.LFB135:
 843:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE */
 844:./Lib/Src/stm32f4xx_rcc.c **** 
 845:./Lib/Src/stm32f4xx_rcc.c **** /**
 846:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 847:./Lib/Src/stm32f4xx_rcc.c ****   * 
 848:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices 
 849:./Lib/Src/stm32f4xx_rcc.c ****   *       
 850:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
ARM GAS  /tmp/ccz2hB7k.s 			page 29


 851:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 852:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 853:./Lib/Src/stm32f4xx_rcc.c ****   */
 854:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 855:./Lib/Src/stm32f4xx_rcc.c **** {
 762              		.loc 1 855 1
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 8
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 767 0000 80B4     		push	{r7}
 768              		.cfi_def_cfa_offset 4
 769              		.cfi_offset 7, -4
 770 0002 83B0     		sub	sp, sp, #12
 771              		.cfi_def_cfa_offset 16
 772 0004 00AF     		add	r7, sp, #0
 773              		.cfi_def_cfa_register 7
 774 0006 0346     		mov	r3, r0
 775 0008 FB71     		strb	r3, [r7, #7]
 856:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 857:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 858:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 776              		.loc 1 858 3
 777 000a 044A     		ldr	r2, .L45
 778              		.loc 1 858 39
 779 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 780              		.loc 1 858 37
 781 000e 1360     		str	r3, [r2]
 859:./Lib/Src/stm32f4xx_rcc.c **** }
 782              		.loc 1 859 1
 783 0010 00BF     		nop
 784 0012 0C37     		adds	r7, r7, #12
 785              		.cfi_def_cfa_offset 4
 786 0014 BD46     		mov	sp, r7
 787              		.cfi_def_cfa_register 13
 788              		@ sp needed
 789 0016 5DF8047B 		ldr	r7, [sp], #4
 790              		.cfi_restore 7
 791              		.cfi_def_cfa_offset 0
 792 001a 7047     		bx	lr
 793              	.L46:
 794              		.align	2
 795              	.L45:
 796 001c 70004742 		.word	1111949424
 797              		.cfi_endproc
 798              	.LFE135:
 800              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 801              		.align	1
 802              		.global	RCC_ClockSecuritySystemCmd
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 807              	RCC_ClockSecuritySystemCmd:
 808              	.LFB136:
 860:./Lib/Src/stm32f4xx_rcc.c **** 
 861:./Lib/Src/stm32f4xx_rcc.c **** /**
 862:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
ARM GAS  /tmp/ccz2hB7k.s 			page 30


 863:./Lib/Src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 864:./Lib/Src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 865:./Lib/Src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 866:./Lib/Src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 867:./Lib/Src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 868:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 869:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 870:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 871:./Lib/Src/stm32f4xx_rcc.c ****   */
 872:./Lib/Src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 873:./Lib/Src/stm32f4xx_rcc.c **** {
 809              		.loc 1 873 1
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 8
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 814 0000 80B4     		push	{r7}
 815              		.cfi_def_cfa_offset 4
 816              		.cfi_offset 7, -4
 817 0002 83B0     		sub	sp, sp, #12
 818              		.cfi_def_cfa_offset 16
 819 0004 00AF     		add	r7, sp, #0
 820              		.cfi_def_cfa_register 7
 821 0006 0346     		mov	r3, r0
 822 0008 FB71     		strb	r3, [r7, #7]
 874:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 875:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 876:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 823              		.loc 1 876 3
 824 000a 044A     		ldr	r2, .L48
 825              		.loc 1 876 36
 826 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 827              		.loc 1 876 34
 828 000e 1360     		str	r3, [r2]
 877:./Lib/Src/stm32f4xx_rcc.c **** }
 829              		.loc 1 877 1
 830 0010 00BF     		nop
 831 0012 0C37     		adds	r7, r7, #12
 832              		.cfi_def_cfa_offset 4
 833 0014 BD46     		mov	sp, r7
 834              		.cfi_def_cfa_register 13
 835              		@ sp needed
 836 0016 5DF8047B 		ldr	r7, [sp], #4
 837              		.cfi_restore 7
 838              		.cfi_def_cfa_offset 0
 839 001a 7047     		bx	lr
 840              	.L49:
 841              		.align	2
 842              	.L48:
 843 001c 4C004742 		.word	1111949388
 844              		.cfi_endproc
 845              	.LFE136:
 847              		.section	.text.RCC_MCO1Config,"ax",%progbits
 848              		.align	1
 849              		.global	RCC_MCO1Config
 850              		.syntax unified
 851              		.thumb
ARM GAS  /tmp/ccz2hB7k.s 			page 31


 852              		.thumb_func
 854              	RCC_MCO1Config:
 855              	.LFB137:
 878:./Lib/Src/stm32f4xx_rcc.c **** 
 879:./Lib/Src/stm32f4xx_rcc.c **** /**
 880:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 881:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 882:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 883:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 884:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 885:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 886:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 887:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 888:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 889:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 890:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 891:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 892:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 893:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 894:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 895:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 896:./Lib/Src/stm32f4xx_rcc.c ****   */
 897:./Lib/Src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 898:./Lib/Src/stm32f4xx_rcc.c **** {
 856              		.loc 1 898 1
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 16
 859              		@ frame_needed = 1, uses_anonymous_args = 0
 860              		@ link register save eliminated.
 861 0000 80B4     		push	{r7}
 862              		.cfi_def_cfa_offset 4
 863              		.cfi_offset 7, -4
 864 0002 85B0     		sub	sp, sp, #20
 865              		.cfi_def_cfa_offset 24
 866 0004 00AF     		add	r7, sp, #0
 867              		.cfi_def_cfa_register 7
 868 0006 7860     		str	r0, [r7, #4]
 869 0008 3960     		str	r1, [r7]
 899:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 870              		.loc 1 899 12
 871 000a 0023     		movs	r3, #0
 872 000c FB60     		str	r3, [r7, #12]
 900:./Lib/Src/stm32f4xx_rcc.c ****   
 901:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 902:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 903:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 904:./Lib/Src/stm32f4xx_rcc.c **** 
 905:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 873              		.loc 1 905 15
 874 000e 0B4B     		ldr	r3, .L51
 875              		.loc 1 905 10
 876 0010 9B68     		ldr	r3, [r3, #8]
 877 0012 FB60     		str	r3, [r7, #12]
 906:./Lib/Src/stm32f4xx_rcc.c **** 
 907:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 908:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 878              		.loc 1 908 10
ARM GAS  /tmp/ccz2hB7k.s 			page 32


 879 0014 FB68     		ldr	r3, [r7, #12]
 880 0016 23F0EC63 		bic	r3, r3, #123731968
 881 001a FB60     		str	r3, [r7, #12]
 909:./Lib/Src/stm32f4xx_rcc.c **** 
 910:./Lib/Src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 911:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 882              		.loc 1 911 28
 883 001c 7A68     		ldr	r2, [r7, #4]
 884 001e 3B68     		ldr	r3, [r7]
 885 0020 1343     		orrs	r3, r3, r2
 886              		.loc 1 911 10
 887 0022 FA68     		ldr	r2, [r7, #12]
 888 0024 1343     		orrs	r3, r3, r2
 889 0026 FB60     		str	r3, [r7, #12]
 912:./Lib/Src/stm32f4xx_rcc.c ****   
 913:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
 914:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 890              		.loc 1 914 6
 891 0028 044A     		ldr	r2, .L51
 892              		.loc 1 914 13
 893 002a FB68     		ldr	r3, [r7, #12]
 894 002c 9360     		str	r3, [r2, #8]
 915:./Lib/Src/stm32f4xx_rcc.c **** 
 916:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 917:./Lib/Src/stm32f4xx_rcc.c ****   RCC_MCO1Cmd(ENABLE);
 918:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 919:./Lib/Src/stm32f4xx_rcc.c **** }
 895              		.loc 1 919 1
 896 002e 00BF     		nop
 897 0030 1437     		adds	r7, r7, #20
 898              		.cfi_def_cfa_offset 4
 899 0032 BD46     		mov	sp, r7
 900              		.cfi_def_cfa_register 13
 901              		@ sp needed
 902 0034 5DF8047B 		ldr	r7, [sp], #4
 903              		.cfi_restore 7
 904              		.cfi_def_cfa_offset 0
 905 0038 7047     		bx	lr
 906              	.L52:
 907 003a 00BF     		.align	2
 908              	.L51:
 909 003c 00380240 		.word	1073887232
 910              		.cfi_endproc
 911              	.LFE137:
 913              		.section	.text.RCC_MCO2Config,"ax",%progbits
 914              		.align	1
 915              		.global	RCC_MCO2Config
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 920              	RCC_MCO2Config:
 921              	.LFB138:
 920:./Lib/Src/stm32f4xx_rcc.c **** 
 921:./Lib/Src/stm32f4xx_rcc.c **** /**
 922:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 923:./Lib/Src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 924:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
ARM GAS  /tmp/ccz2hB7k.s 			page 33


 925:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 926:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 927:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source, available for a
 928:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2SOURCE_I2SCLK: I2SCLK clock selected as MCO2 source, available only for
 929:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 930:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 931:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 932:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 933:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 934:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 935:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 936:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 937:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 938:./Lib/Src/stm32f4xx_rcc.c ****   * @note  For STM32F410xx devices to output I2SCLK clock on MCO2 you should have
 939:./Lib/Src/stm32f4xx_rcc.c ****   *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
 940:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
 941:./Lib/Src/stm32f4xx_rcc.c ****   */
 942:./Lib/Src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 943:./Lib/Src/stm32f4xx_rcc.c **** {
 922              		.loc 1 943 1
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 16
 925              		@ frame_needed = 1, uses_anonymous_args = 0
 926              		@ link register save eliminated.
 927 0000 80B4     		push	{r7}
 928              		.cfi_def_cfa_offset 4
 929              		.cfi_offset 7, -4
 930 0002 85B0     		sub	sp, sp, #20
 931              		.cfi_def_cfa_offset 24
 932 0004 00AF     		add	r7, sp, #0
 933              		.cfi_def_cfa_register 7
 934 0006 7860     		str	r0, [r7, #4]
 935 0008 3960     		str	r1, [r7]
 944:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 936              		.loc 1 944 12
 937 000a 0023     		movs	r3, #0
 938 000c FB60     		str	r3, [r7, #12]
 945:./Lib/Src/stm32f4xx_rcc.c ****   
 946:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
 947:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 948:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 949:./Lib/Src/stm32f4xx_rcc.c ****   
 950:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 939              		.loc 1 950 15
 940 000e 0B4B     		ldr	r3, .L54
 941              		.loc 1 950 10
 942 0010 9B68     		ldr	r3, [r3, #8]
 943 0012 FB60     		str	r3, [r7, #12]
 951:./Lib/Src/stm32f4xx_rcc.c ****   
 952:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 953:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 944              		.loc 1 953 10
 945 0014 FB68     		ldr	r3, [r7, #12]
 946 0016 23F07843 		bic	r3, r3, #-134217728
 947 001a FB60     		str	r3, [r7, #12]
 954:./Lib/Src/stm32f4xx_rcc.c **** 
 955:./Lib/Src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
ARM GAS  /tmp/ccz2hB7k.s 			page 34


 956:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 948              		.loc 1 956 28
 949 001c 7A68     		ldr	r2, [r7, #4]
 950 001e 3B68     		ldr	r3, [r7]
 951 0020 1343     		orrs	r3, r3, r2
 952              		.loc 1 956 10
 953 0022 FA68     		ldr	r2, [r7, #12]
 954 0024 1343     		orrs	r3, r3, r2
 955 0026 FB60     		str	r3, [r7, #12]
 957:./Lib/Src/stm32f4xx_rcc.c ****   
 958:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
 959:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 956              		.loc 1 959 6
 957 0028 044A     		ldr	r2, .L54
 958              		.loc 1 959 13
 959 002a FB68     		ldr	r3, [r7, #12]
 960 002c 9360     		str	r3, [r2, #8]
 960:./Lib/Src/stm32f4xx_rcc.c **** 
 961:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
 962:./Lib/Src/stm32f4xx_rcc.c ****   RCC_MCO2Cmd(ENABLE);
 963:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */   
 964:./Lib/Src/stm32f4xx_rcc.c **** }
 961              		.loc 1 964 1
 962 002e 00BF     		nop
 963 0030 1437     		adds	r7, r7, #20
 964              		.cfi_def_cfa_offset 4
 965 0032 BD46     		mov	sp, r7
 966              		.cfi_def_cfa_register 13
 967              		@ sp needed
 968 0034 5DF8047B 		ldr	r7, [sp], #4
 969              		.cfi_restore 7
 970              		.cfi_def_cfa_offset 0
 971 0038 7047     		bx	lr
 972              	.L55:
 973 003a 00BF     		.align	2
 974              	.L54:
 975 003c 00380240 		.word	1073887232
 976              		.cfi_endproc
 977              	.LFE138:
 979              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 980              		.align	1
 981              		.global	RCC_SYSCLKConfig
 982              		.syntax unified
 983              		.thumb
 984              		.thumb_func
 986              	RCC_SYSCLKConfig:
 987              	.LFB139:
 965:./Lib/Src/stm32f4xx_rcc.c **** 
 966:./Lib/Src/stm32f4xx_rcc.c **** /**
 967:./Lib/Src/stm32f4xx_rcc.c ****   * @}
 968:./Lib/Src/stm32f4xx_rcc.c ****   */
 969:./Lib/Src/stm32f4xx_rcc.c **** 
 970:./Lib/Src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 971:./Lib/Src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 972:./Lib/Src/stm32f4xx_rcc.c ****  *
 973:./Lib/Src/stm32f4xx_rcc.c **** @verbatim   
 974:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================
ARM GAS  /tmp/ccz2hB7k.s 			page 35


 975:./Lib/Src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 976:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================  
 977:./Lib/Src/stm32f4xx_rcc.c ****     [..]
 978:./Lib/Src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 979:./Lib/Src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 980:./Lib/Src/stm32f4xx_rcc.c ****   
 981:./Lib/Src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 982:./Lib/Src/stm32f4xx_rcc.c ****           HSE and PLL.
 983:./Lib/Src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 984:./Lib/Src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 985:./Lib/Src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 986:./Lib/Src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 987:./Lib/Src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 988:./Lib/Src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 989:./Lib/Src/stm32f4xx_rcc.c **** 
 990:./Lib/Src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 991:./Lib/Src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 992:./Lib/Src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 993:./Lib/Src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 994:./Lib/Src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 995:./Lib/Src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 996:./Lib/Src/stm32f4xx_rcc.c ****              functions to configure this clock. 
 997:./Lib/Src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 998:./Lib/Src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 999:./Lib/Src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
1000:./Lib/Src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
1001:./Lib/Src/stm32f4xx_rcc.c ****        
1002:./Lib/Src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
1003:./Lib/Src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
1004:./Lib/Src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
1005:./Lib/Src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1006:./Lib/Src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1007:./Lib/Src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1008:./Lib/Src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1009:./Lib/Src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1010:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1011:./Lib/Src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1012:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1013:./Lib/Src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1014:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1015:./Lib/Src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1016:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1017:./Lib/Src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1018:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1019:./Lib/Src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1020:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1021:./Lib/Src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1022:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1023:./Lib/Src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1024:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1025:./Lib/Src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
1026:./Lib/Src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+
1027:./Lib/Src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx/469xx/479xx devices, the maximum frequency of the SYSCLK and HCLK i
1028:./Lib/Src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
1029:./Lib/Src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1030:./Lib/Src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1031:./Lib/Src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
ARM GAS  /tmp/ccz2hB7k.s 			page 36


1032:./Lib/Src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1033:./Lib/Src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1034:./Lib/Src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1035:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1036:./Lib/Src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1037:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1038:./Lib/Src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1039:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1040:./Lib/Src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1041:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1042:./Lib/Src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
1043:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1044:./Lib/Src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
1045:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1046:./Lib/Src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
1047:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1048:./Lib/Src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
1049:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1050:./Lib/Src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
1051:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1052:./Lib/Src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
1053:./Lib/Src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1054:./Lib/Src/stm32f4xx_rcc.c ****    
1055:./Lib/Src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
1056:./Lib/Src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
1057:./Lib/Src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1058:./Lib/Src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1059:./Lib/Src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1060:./Lib/Src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1061:./Lib/Src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1062:./Lib/Src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1063:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1064:./Lib/Src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
1065:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1066:./Lib/Src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
1067:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1068:./Lib/Src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
1069:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1070:./Lib/Src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
1071:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1072:./Lib/Src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
1073:./Lib/Src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1074:./Lib/Src/stm32f4xx_rcc.c **** 
1075:./Lib/Src/stm32f4xx_rcc.c ****       (#) For STM32F410xx/STM32F411xE devices, the maximum frequency of the SYSCLK and HCLK is 100 
1076:./Lib/Src/stm32f4xx_rcc.c ****           PCLK2 100 MHz and PCLK1 50 MHz. Depending on the device voltage range, the maximum 
1077:./Lib/Src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
1078:./Lib/Src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1079:./Lib/Src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
1080:./Lib/Src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|
1081:./Lib/Src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
1082:./Lib/Src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
1083:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1084:./Lib/Src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
1085:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1086:./Lib/Src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
1087:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1088:./Lib/Src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
ARM GAS  /tmp/ccz2hB7k.s 			page 37


1089:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1090:./Lib/Src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
1091:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1092:./Lib/Src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
1093:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1094:./Lib/Src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
1095:./Lib/Src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
1096:./Lib/Src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
1097:./Lib/Src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
1098:./Lib/Src/stm32f4xx_rcc.c ****   
1099:./Lib/Src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
1100:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
1101:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
1102:./Lib/Src/stm32f4xx_rcc.c ****           [..] 
1103:./Lib/Src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx/469xx/479xx devices:
1104:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
1105:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
1106:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
1107:./Lib/Src/stm32f4xx_rcc.c ****           [..]  
1108:./Lib/Src/stm32f4xx_rcc.c ****           On STM32F401x devices:
1109:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
1110:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
1111:./Lib/Src/stm32f4xx_rcc.c ****           On STM32F410xx/STM32F411xE devices:
1112:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01' the maximum value of fHCLK is 64MHz.
1113:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10' the maximum value of fHCLK is 84MHz.
1114:./Lib/Src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11' the maximum value of fHCLK is 100MHz.
1115:./Lib/Src/stm32f4xx_rcc.c **** 
1116:./Lib/Src/stm32f4xx_rcc.c ****        You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
1117:./Lib/Src/stm32f4xx_rcc.c **** 
1118:./Lib/Src/stm32f4xx_rcc.c **** @endverbatim
1119:./Lib/Src/stm32f4xx_rcc.c ****   * @{
1120:./Lib/Src/stm32f4xx_rcc.c ****   */
1121:./Lib/Src/stm32f4xx_rcc.c **** 
1122:./Lib/Src/stm32f4xx_rcc.c **** /**
1123:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
1124:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
1125:./Lib/Src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
1126:./Lib/Src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
1127:./Lib/Src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
1128:./Lib/Src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
1129:./Lib/Src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
1130:./Lib/Src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
1131:./Lib/Src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
1132:./Lib/Src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
1133:./Lib/Src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
1134:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
1135:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1136:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI: HSI selected as system clock source
1137:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE: HSE selected as system clock source
1138:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_
1139:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F
1140:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1141:./Lib/Src/stm32f4xx_rcc.c ****   */
1142:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
1143:./Lib/Src/stm32f4xx_rcc.c **** {
 988              		.loc 1 1143 1
 989              		.cfi_startproc
ARM GAS  /tmp/ccz2hB7k.s 			page 38


 990              		@ args = 0, pretend = 0, frame = 16
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993 0000 80B4     		push	{r7}
 994              		.cfi_def_cfa_offset 4
 995              		.cfi_offset 7, -4
 996 0002 85B0     		sub	sp, sp, #20
 997              		.cfi_def_cfa_offset 24
 998 0004 00AF     		add	r7, sp, #0
 999              		.cfi_def_cfa_register 7
 1000 0006 7860     		str	r0, [r7, #4]
1144:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1001              		.loc 1 1144 12
 1002 0008 0023     		movs	r3, #0
 1003 000a FB60     		str	r3, [r7, #12]
1145:./Lib/Src/stm32f4xx_rcc.c **** 
1146:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1147:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
1148:./Lib/Src/stm32f4xx_rcc.c **** 
1149:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1004              		.loc 1 1149 15
 1005 000c 094B     		ldr	r3, .L57
 1006              		.loc 1 1149 10
 1007 000e 9B68     		ldr	r3, [r3, #8]
 1008 0010 FB60     		str	r3, [r7, #12]
1150:./Lib/Src/stm32f4xx_rcc.c **** 
1151:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
1152:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 1009              		.loc 1 1152 10
 1010 0012 FB68     		ldr	r3, [r7, #12]
 1011 0014 23F00303 		bic	r3, r3, #3
 1012 0018 FB60     		str	r3, [r7, #12]
1153:./Lib/Src/stm32f4xx_rcc.c **** 
1154:./Lib/Src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
1155:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 1013              		.loc 1 1155 10
 1014 001a FA68     		ldr	r2, [r7, #12]
 1015 001c 7B68     		ldr	r3, [r7, #4]
 1016 001e 1343     		orrs	r3, r3, r2
 1017 0020 FB60     		str	r3, [r7, #12]
1156:./Lib/Src/stm32f4xx_rcc.c **** 
1157:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1158:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1018              		.loc 1 1158 6
 1019 0022 044A     		ldr	r2, .L57
 1020              		.loc 1 1158 13
 1021 0024 FB68     		ldr	r3, [r7, #12]
 1022 0026 9360     		str	r3, [r2, #8]
1159:./Lib/Src/stm32f4xx_rcc.c **** }
 1023              		.loc 1 1159 1
 1024 0028 00BF     		nop
 1025 002a 1437     		adds	r7, r7, #20
 1026              		.cfi_def_cfa_offset 4
 1027 002c BD46     		mov	sp, r7
 1028              		.cfi_def_cfa_register 13
 1029              		@ sp needed
 1030 002e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccz2hB7k.s 			page 39


 1031              		.cfi_restore 7
 1032              		.cfi_def_cfa_offset 0
 1033 0032 7047     		bx	lr
 1034              	.L58:
 1035              		.align	2
 1036              	.L57:
 1037 0034 00380240 		.word	1073887232
 1038              		.cfi_endproc
 1039              	.LFE139:
 1041              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 1042              		.align	1
 1043              		.global	RCC_GetSYSCLKSource
 1044              		.syntax unified
 1045              		.thumb
 1046              		.thumb_func
 1048              	RCC_GetSYSCLKSource:
 1049              	.LFB140:
1160:./Lib/Src/stm32f4xx_rcc.c **** 
1161:./Lib/Src/stm32f4xx_rcc.c **** /**
1162:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
1163:./Lib/Src/stm32f4xx_rcc.c ****   * @param  None
1164:./Lib/Src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
1165:./Lib/Src/stm32f4xx_rcc.c ****   *         of the following:
1166:./Lib/Src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
1167:./Lib/Src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
1168:./Lib/Src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock (PLL P for STM32F446xx devices)
1169:./Lib/Src/stm32f4xx_rcc.c ****   *              - 0x0C: PLL R used as system clock (only for STM32F412xG, STM32F413_423xx and STM3
1170:./Lib/Src/stm32f4xx_rcc.c ****   */
1171:./Lib/Src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
1172:./Lib/Src/stm32f4xx_rcc.c **** {
 1050              		.loc 1 1172 1
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054              		@ link register save eliminated.
 1055 0000 80B4     		push	{r7}
 1056              		.cfi_def_cfa_offset 4
 1057              		.cfi_offset 7, -4
 1058 0002 00AF     		add	r7, sp, #0
 1059              		.cfi_def_cfa_register 7
1173:./Lib/Src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 1060              		.loc 1 1173 24
 1061 0004 054B     		ldr	r3, .L61
 1062 0006 9B68     		ldr	r3, [r3, #8]
 1063              		.loc 1 1173 11
 1064 0008 DBB2     		uxtb	r3, r3
 1065 000a 03F00C03 		and	r3, r3, #12
 1066 000e DBB2     		uxtb	r3, r3
1174:./Lib/Src/stm32f4xx_rcc.c **** }
 1067              		.loc 1 1174 1
 1068 0010 1846     		mov	r0, r3
 1069 0012 BD46     		mov	sp, r7
 1070              		.cfi_def_cfa_register 13
 1071              		@ sp needed
 1072 0014 5DF8047B 		ldr	r7, [sp], #4
 1073              		.cfi_restore 7
 1074              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccz2hB7k.s 			page 40


 1075 0018 7047     		bx	lr
 1076              	.L62:
 1077 001a 00BF     		.align	2
 1078              	.L61:
 1079 001c 00380240 		.word	1073887232
 1080              		.cfi_endproc
 1081              	.LFE140:
 1083              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 1084              		.align	1
 1085              		.global	RCC_HCLKConfig
 1086              		.syntax unified
 1087              		.thumb
 1088              		.thumb_func
 1090              	RCC_HCLKConfig:
 1091              	.LFB141:
1175:./Lib/Src/stm32f4xx_rcc.c **** 
1176:./Lib/Src/stm32f4xx_rcc.c **** /**
1177:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
1178:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
1179:./Lib/Src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
1180:./Lib/Src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
1181:./Lib/Src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
1182:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
1183:./Lib/Src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
1184:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1185:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
1186:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
1187:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
1188:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
1189:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
1190:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
1191:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
1192:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
1193:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
1194:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1195:./Lib/Src/stm32f4xx_rcc.c ****   */
1196:./Lib/Src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
1197:./Lib/Src/stm32f4xx_rcc.c **** {
 1092              		.loc 1 1197 1
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 16
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 1097 0000 80B4     		push	{r7}
 1098              		.cfi_def_cfa_offset 4
 1099              		.cfi_offset 7, -4
 1100 0002 85B0     		sub	sp, sp, #20
 1101              		.cfi_def_cfa_offset 24
 1102 0004 00AF     		add	r7, sp, #0
 1103              		.cfi_def_cfa_register 7
 1104 0006 7860     		str	r0, [r7, #4]
1198:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1105              		.loc 1 1198 12
 1106 0008 0023     		movs	r3, #0
 1107 000a FB60     		str	r3, [r7, #12]
1199:./Lib/Src/stm32f4xx_rcc.c ****   
1200:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccz2hB7k.s 			page 41


1201:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
1202:./Lib/Src/stm32f4xx_rcc.c **** 
1203:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1108              		.loc 1 1203 15
 1109 000c 094B     		ldr	r3, .L64
 1110              		.loc 1 1203 10
 1111 000e 9B68     		ldr	r3, [r3, #8]
 1112 0010 FB60     		str	r3, [r7, #12]
1204:./Lib/Src/stm32f4xx_rcc.c **** 
1205:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
1206:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 1113              		.loc 1 1206 10
 1114 0012 FB68     		ldr	r3, [r7, #12]
 1115 0014 23F0F003 		bic	r3, r3, #240
 1116 0018 FB60     		str	r3, [r7, #12]
1207:./Lib/Src/stm32f4xx_rcc.c **** 
1208:./Lib/Src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
1209:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 1117              		.loc 1 1209 10
 1118 001a FA68     		ldr	r2, [r7, #12]
 1119 001c 7B68     		ldr	r3, [r7, #4]
 1120 001e 1343     		orrs	r3, r3, r2
 1121 0020 FB60     		str	r3, [r7, #12]
1210:./Lib/Src/stm32f4xx_rcc.c **** 
1211:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1212:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1122              		.loc 1 1212 6
 1123 0022 044A     		ldr	r2, .L64
 1124              		.loc 1 1212 13
 1125 0024 FB68     		ldr	r3, [r7, #12]
 1126 0026 9360     		str	r3, [r2, #8]
1213:./Lib/Src/stm32f4xx_rcc.c **** }
 1127              		.loc 1 1213 1
 1128 0028 00BF     		nop
 1129 002a 1437     		adds	r7, r7, #20
 1130              		.cfi_def_cfa_offset 4
 1131 002c BD46     		mov	sp, r7
 1132              		.cfi_def_cfa_register 13
 1133              		@ sp needed
 1134 002e 5DF8047B 		ldr	r7, [sp], #4
 1135              		.cfi_restore 7
 1136              		.cfi_def_cfa_offset 0
 1137 0032 7047     		bx	lr
 1138              	.L65:
 1139              		.align	2
 1140              	.L64:
 1141 0034 00380240 		.word	1073887232
 1142              		.cfi_endproc
 1143              	.LFE141:
 1145              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 1146              		.align	1
 1147              		.global	RCC_PCLK1Config
 1148              		.syntax unified
 1149              		.thumb
 1150              		.thumb_func
 1152              	RCC_PCLK1Config:
 1153              	.LFB142:
ARM GAS  /tmp/ccz2hB7k.s 			page 42


1214:./Lib/Src/stm32f4xx_rcc.c **** 
1215:./Lib/Src/stm32f4xx_rcc.c **** /**
1216:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
1217:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
1218:./Lib/Src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1219:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1220:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
1221:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
1222:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
1223:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
1224:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
1225:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1226:./Lib/Src/stm32f4xx_rcc.c ****   */
1227:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
1228:./Lib/Src/stm32f4xx_rcc.c **** {
 1154              		.loc 1 1228 1
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 16
 1157              		@ frame_needed = 1, uses_anonymous_args = 0
 1158              		@ link register save eliminated.
 1159 0000 80B4     		push	{r7}
 1160              		.cfi_def_cfa_offset 4
 1161              		.cfi_offset 7, -4
 1162 0002 85B0     		sub	sp, sp, #20
 1163              		.cfi_def_cfa_offset 24
 1164 0004 00AF     		add	r7, sp, #0
 1165              		.cfi_def_cfa_register 7
 1166 0006 7860     		str	r0, [r7, #4]
1229:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1167              		.loc 1 1229 12
 1168 0008 0023     		movs	r3, #0
 1169 000a FB60     		str	r3, [r7, #12]
1230:./Lib/Src/stm32f4xx_rcc.c **** 
1231:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1232:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1233:./Lib/Src/stm32f4xx_rcc.c **** 
1234:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1170              		.loc 1 1234 15
 1171 000c 094B     		ldr	r3, .L67
 1172              		.loc 1 1234 10
 1173 000e 9B68     		ldr	r3, [r3, #8]
 1174 0010 FB60     		str	r3, [r7, #12]
1235:./Lib/Src/stm32f4xx_rcc.c **** 
1236:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
1237:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 1175              		.loc 1 1237 10
 1176 0012 FB68     		ldr	r3, [r7, #12]
 1177 0014 23F4E053 		bic	r3, r3, #7168
 1178 0018 FB60     		str	r3, [r7, #12]
1238:./Lib/Src/stm32f4xx_rcc.c **** 
1239:./Lib/Src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
1240:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 1179              		.loc 1 1240 10
 1180 001a FA68     		ldr	r2, [r7, #12]
 1181 001c 7B68     		ldr	r3, [r7, #4]
 1182 001e 1343     		orrs	r3, r3, r2
 1183 0020 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccz2hB7k.s 			page 43


1241:./Lib/Src/stm32f4xx_rcc.c **** 
1242:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1243:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1184              		.loc 1 1243 6
 1185 0022 044A     		ldr	r2, .L67
 1186              		.loc 1 1243 13
 1187 0024 FB68     		ldr	r3, [r7, #12]
 1188 0026 9360     		str	r3, [r2, #8]
1244:./Lib/Src/stm32f4xx_rcc.c **** }
 1189              		.loc 1 1244 1
 1190 0028 00BF     		nop
 1191 002a 1437     		adds	r7, r7, #20
 1192              		.cfi_def_cfa_offset 4
 1193 002c BD46     		mov	sp, r7
 1194              		.cfi_def_cfa_register 13
 1195              		@ sp needed
 1196 002e 5DF8047B 		ldr	r7, [sp], #4
 1197              		.cfi_restore 7
 1198              		.cfi_def_cfa_offset 0
 1199 0032 7047     		bx	lr
 1200              	.L68:
 1201              		.align	2
 1202              	.L67:
 1203 0034 00380240 		.word	1073887232
 1204              		.cfi_endproc
 1205              	.LFE142:
 1207              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 1208              		.align	1
 1209              		.global	RCC_PCLK2Config
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1214              	RCC_PCLK2Config:
 1215              	.LFB143:
1245:./Lib/Src/stm32f4xx_rcc.c **** 
1246:./Lib/Src/stm32f4xx_rcc.c **** /**
1247:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
1248:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
1249:./Lib/Src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
1250:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1251:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
1252:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
1253:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
1254:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
1255:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
1256:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1257:./Lib/Src/stm32f4xx_rcc.c ****   */
1258:./Lib/Src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
1259:./Lib/Src/stm32f4xx_rcc.c **** {
 1216              		.loc 1 1259 1
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 16
 1219              		@ frame_needed = 1, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 1221 0000 80B4     		push	{r7}
 1222              		.cfi_def_cfa_offset 4
 1223              		.cfi_offset 7, -4
ARM GAS  /tmp/ccz2hB7k.s 			page 44


 1224 0002 85B0     		sub	sp, sp, #20
 1225              		.cfi_def_cfa_offset 24
 1226 0004 00AF     		add	r7, sp, #0
 1227              		.cfi_def_cfa_register 7
 1228 0006 7860     		str	r0, [r7, #4]
1260:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1229              		.loc 1 1260 12
 1230 0008 0023     		movs	r3, #0
 1231 000a FB60     		str	r3, [r7, #12]
1261:./Lib/Src/stm32f4xx_rcc.c **** 
1262:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1263:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
1264:./Lib/Src/stm32f4xx_rcc.c **** 
1265:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 1232              		.loc 1 1265 15
 1233 000c 0A4B     		ldr	r3, .L70
 1234              		.loc 1 1265 10
 1235 000e 9B68     		ldr	r3, [r3, #8]
 1236 0010 FB60     		str	r3, [r7, #12]
1266:./Lib/Src/stm32f4xx_rcc.c **** 
1267:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
1268:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 1237              		.loc 1 1268 10
 1238 0012 FB68     		ldr	r3, [r7, #12]
 1239 0014 23F46043 		bic	r3, r3, #57344
 1240 0018 FB60     		str	r3, [r7, #12]
1269:./Lib/Src/stm32f4xx_rcc.c **** 
1270:./Lib/Src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
1271:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 1241              		.loc 1 1271 22
 1242 001a 7B68     		ldr	r3, [r7, #4]
 1243 001c DB00     		lsls	r3, r3, #3
 1244              		.loc 1 1271 10
 1245 001e FA68     		ldr	r2, [r7, #12]
 1246 0020 1343     		orrs	r3, r3, r2
 1247 0022 FB60     		str	r3, [r7, #12]
1272:./Lib/Src/stm32f4xx_rcc.c **** 
1273:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1274:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1248              		.loc 1 1274 6
 1249 0024 044A     		ldr	r2, .L70
 1250              		.loc 1 1274 13
 1251 0026 FB68     		ldr	r3, [r7, #12]
 1252 0028 9360     		str	r3, [r2, #8]
1275:./Lib/Src/stm32f4xx_rcc.c **** }
 1253              		.loc 1 1275 1
 1254 002a 00BF     		nop
 1255 002c 1437     		adds	r7, r7, #20
 1256              		.cfi_def_cfa_offset 4
 1257 002e BD46     		mov	sp, r7
 1258              		.cfi_def_cfa_register 13
 1259              		@ sp needed
 1260 0030 5DF8047B 		ldr	r7, [sp], #4
 1261              		.cfi_restore 7
 1262              		.cfi_def_cfa_offset 0
 1263 0034 7047     		bx	lr
 1264              	.L71:
ARM GAS  /tmp/ccz2hB7k.s 			page 45


 1265 0036 00BF     		.align	2
 1266              	.L70:
 1267 0038 00380240 		.word	1073887232
 1268              		.cfi_endproc
 1269              	.LFE143:
 1271              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1272              		.align	1
 1273              		.global	RCC_GetClocksFreq
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1278              	RCC_GetClocksFreq:
 1279              	.LFB144:
1276:./Lib/Src/stm32f4xx_rcc.c **** 
1277:./Lib/Src/stm32f4xx_rcc.c **** /**
1278:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1279:./Lib/Src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.
1280:./Lib/Src/stm32f4xx_rcc.c ****   * 
1281:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1282:./Lib/Src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1283:./Lib/Src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1284:./Lib/Src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1285:./Lib/Src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1286:./Lib/Src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1287:./Lib/Src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1288:./Lib/Src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1289:./Lib/Src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1290:./Lib/Src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1291:./Lib/Src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1292:./Lib/Src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1293:./Lib/Src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1294:./Lib/Src/stm32f4xx_rcc.c ****   *                have wrong result.
1295:./Lib/Src/stm32f4xx_rcc.c ****   *                
1296:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1297:./Lib/Src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1298:./Lib/Src/stm32f4xx_rcc.c ****   *   
1299:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1300:./Lib/Src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1301:./Lib/Src/stm32f4xx_rcc.c ****   *     
1302:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1303:./Lib/Src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1304:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1305:./Lib/Src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1306:./Lib/Src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1307:./Lib/Src/stm32f4xx_rcc.c ****   *    
1308:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1309:./Lib/Src/stm32f4xx_rcc.c ****   */
1310:./Lib/Src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1311:./Lib/Src/stm32f4xx_rcc.c **** {
 1280              		.loc 1 1311 1
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 32
 1283              		@ frame_needed = 1, uses_anonymous_args = 0
 1284              		@ link register save eliminated.
 1285 0000 80B4     		push	{r7}
 1286              		.cfi_def_cfa_offset 4
 1287              		.cfi_offset 7, -4
ARM GAS  /tmp/ccz2hB7k.s 			page 46


 1288 0002 89B0     		sub	sp, sp, #36
 1289              		.cfi_def_cfa_offset 40
 1290 0004 00AF     		add	r7, sp, #0
 1291              		.cfi_def_cfa_register 7
 1292 0006 7860     		str	r0, [r7, #4]
1312:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1293              		.loc 1 1312 12
 1294 0008 0023     		movs	r3, #0
 1295 000a BB61     		str	r3, [r7, #24]
 1296              		.loc 1 1312 21
 1297 000c 0023     		movs	r3, #0
 1298 000e 7B61     		str	r3, [r7, #20]
 1299              		.loc 1 1312 32
 1300 0010 0023     		movs	r3, #0
 1301 0012 FB61     		str	r3, [r7, #28]
 1302              		.loc 1 1312 44
 1303 0014 0223     		movs	r3, #2
 1304 0016 3B61     		str	r3, [r7, #16]
 1305              		.loc 1 1312 54
 1306 0018 0023     		movs	r3, #0
 1307 001a FB60     		str	r3, [r7, #12]
 1308              		.loc 1 1312 69
 1309 001c 0223     		movs	r3, #2
 1310 001e BB60     		str	r3, [r7, #8]
1313:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
1314:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t pllr = 2;
1315:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1316:./Lib/Src/stm32f4xx_rcc.c ****   
1317:./Lib/Src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1318:./Lib/Src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1311              		.loc 1 1318 12
 1312 0020 4A4B     		ldr	r3, .L80
 1313 0022 9B68     		ldr	r3, [r3, #8]
 1314              		.loc 1 1318 7
 1315 0024 03F00C03 		and	r3, r3, #12
 1316 0028 BB61     		str	r3, [r7, #24]
1319:./Lib/Src/stm32f4xx_rcc.c ****   
1320:./Lib/Src/stm32f4xx_rcc.c ****   switch (tmp)
 1317              		.loc 1 1320 3
 1318 002a BB69     		ldr	r3, [r7, #24]
 1319 002c 082B     		cmp	r3, #8
 1320 002e 11D0     		beq	.L73
 1321 0030 BB69     		ldr	r3, [r7, #24]
 1322 0032 082B     		cmp	r3, #8
 1323 0034 44D8     		bhi	.L74
 1324 0036 BB69     		ldr	r3, [r7, #24]
 1325 0038 002B     		cmp	r3, #0
 1326 003a 03D0     		beq	.L75
 1327 003c BB69     		ldr	r3, [r7, #24]
 1328 003e 042B     		cmp	r3, #4
 1329 0040 04D0     		beq	.L76
 1330 0042 3DE0     		b	.L74
 1331              	.L75:
1321:./Lib/Src/stm32f4xx_rcc.c ****   {
1322:./Lib/Src/stm32f4xx_rcc.c ****   case 0x00:  /* HSI used as system clock source */
1323:./Lib/Src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1332              		.loc 1 1323 34
ARM GAS  /tmp/ccz2hB7k.s 			page 47


 1333 0044 7B68     		ldr	r3, [r7, #4]
 1334 0046 424A     		ldr	r2, .L80+4
 1335 0048 1A60     		str	r2, [r3]
1324:./Lib/Src/stm32f4xx_rcc.c ****     break;
 1336              		.loc 1 1324 5
 1337 004a 3DE0     		b	.L77
 1338              	.L76:
1325:./Lib/Src/stm32f4xx_rcc.c ****   case 0x04:  /* HSE used as system clock  source */
1326:./Lib/Src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1339              		.loc 1 1326 34
 1340 004c 7B68     		ldr	r3, [r7, #4]
 1341 004e 414A     		ldr	r2, .L80+8
 1342 0050 1A60     		str	r2, [r3]
1327:./Lib/Src/stm32f4xx_rcc.c ****     break;
 1343              		.loc 1 1327 5
 1344 0052 39E0     		b	.L77
 1345              	.L73:
1328:./Lib/Src/stm32f4xx_rcc.c ****   case 0x08:  /* PLL P used as system clock  source */
1329:./Lib/Src/stm32f4xx_rcc.c ****     
1330:./Lib/Src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1331:./Lib/Src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLP
1332:./Lib/Src/stm32f4xx_rcc.c ****     */    
1333:./Lib/Src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1346              		.loc 1 1333 21
 1347 0054 3D4B     		ldr	r3, .L80
 1348 0056 5B68     		ldr	r3, [r3, #4]
 1349              		.loc 1 1333 53
 1350 0058 9B0D     		lsrs	r3, r3, #22
 1351              		.loc 1 1333 15
 1352 005a 03F00103 		and	r3, r3, #1
 1353 005e FB60     		str	r3, [r7, #12]
1334:./Lib/Src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1354              		.loc 1 1334 15
 1355 0060 3A4B     		ldr	r3, .L80
 1356 0062 5B68     		ldr	r3, [r3, #4]
 1357              		.loc 1 1334 10
 1358 0064 03F03F03 		and	r3, r3, #63
 1359 0068 BB60     		str	r3, [r7, #8]
1335:./Lib/Src/stm32f4xx_rcc.c ****     
1336:./Lib/Src/stm32f4xx_rcc.c ****     if (pllsource != 0)
 1360              		.loc 1 1336 8
 1361 006a FB68     		ldr	r3, [r7, #12]
 1362 006c 002B     		cmp	r3, #0
 1363 006e 0CD0     		beq	.L78
1337:./Lib/Src/stm32f4xx_rcc.c ****     {
1338:./Lib/Src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1339:./Lib/Src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1364              		.loc 1 1339 27
 1365 0070 384A     		ldr	r2, .L80+8
 1366 0072 BB68     		ldr	r3, [r7, #8]
 1367 0074 B2FBF3F3 		udiv	r3, r2, r3
 1368              		.loc 1 1339 42
 1369 0078 344A     		ldr	r2, .L80
 1370 007a 5268     		ldr	r2, [r2, #4]
 1371              		.loc 1 1339 72
 1372 007c 9209     		lsrs	r2, r2, #6
 1373 007e C2F30802 		ubfx	r2, r2, #0, #9
ARM GAS  /tmp/ccz2hB7k.s 			page 48


 1374              		.loc 1 1339 14
 1375 0082 02FB03F3 		mul	r3, r2, r3
 1376 0086 FB61     		str	r3, [r7, #28]
 1377 0088 0BE0     		b	.L79
 1378              	.L78:
1340:./Lib/Src/stm32f4xx_rcc.c ****     }
1341:./Lib/Src/stm32f4xx_rcc.c ****     else
1342:./Lib/Src/stm32f4xx_rcc.c ****     {
1343:./Lib/Src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1344:./Lib/Src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1379              		.loc 1 1344 27
 1380 008a 314A     		ldr	r2, .L80+4
 1381 008c BB68     		ldr	r3, [r7, #8]
 1382 008e B2FBF3F3 		udiv	r3, r2, r3
 1383              		.loc 1 1344 42
 1384 0092 2E4A     		ldr	r2, .L80
 1385 0094 5268     		ldr	r2, [r2, #4]
 1386              		.loc 1 1344 72
 1387 0096 9209     		lsrs	r2, r2, #6
 1388 0098 C2F30802 		ubfx	r2, r2, #0, #9
 1389              		.loc 1 1344 14
 1390 009c 02FB03F3 		mul	r3, r2, r3
 1391 00a0 FB61     		str	r3, [r7, #28]
 1392              	.L79:
1345:./Lib/Src/stm32f4xx_rcc.c ****     }
1346:./Lib/Src/stm32f4xx_rcc.c ****     
1347:./Lib/Src/stm32f4xx_rcc.c ****     pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1393              		.loc 1 1347 18
 1394 00a2 2A4B     		ldr	r3, .L80
 1395 00a4 5B68     		ldr	r3, [r3, #4]
 1396              		.loc 1 1347 48
 1397 00a6 1B0C     		lsrs	r3, r3, #16
 1398 00a8 03F00303 		and	r3, r3, #3
 1399              		.loc 1 1347 54
 1400 00ac 0133     		adds	r3, r3, #1
 1401              		.loc 1 1347 10
 1402 00ae 5B00     		lsls	r3, r3, #1
 1403 00b0 3B61     		str	r3, [r7, #16]
1348:./Lib/Src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1404              		.loc 1 1348 42
 1405 00b2 FA69     		ldr	r2, [r7, #28]
 1406 00b4 3B69     		ldr	r3, [r7, #16]
 1407 00b6 B2FBF3F2 		udiv	r2, r2, r3
 1408              		.loc 1 1348 34
 1409 00ba 7B68     		ldr	r3, [r7, #4]
 1410 00bc 1A60     		str	r2, [r3]
1349:./Lib/Src/stm32f4xx_rcc.c ****     break;
 1411              		.loc 1 1349 5
 1412 00be 03E0     		b	.L77
 1413              	.L74:
1350:./Lib/Src/stm32f4xx_rcc.c **** 
1351:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1352:./Lib/Src/stm32f4xx_rcc.c ****   case 0x0C:  /* PLL R used as system clock  source */
1353:./Lib/Src/stm32f4xx_rcc.c ****     /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1354:./Lib/Src/stm32f4xx_rcc.c ****     SYSCLK = PLL_VCO / PLLR
1355:./Lib/Src/stm32f4xx_rcc.c ****     */    
1356:./Lib/Src/stm32f4xx_rcc.c ****     pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
ARM GAS  /tmp/ccz2hB7k.s 			page 49


1357:./Lib/Src/stm32f4xx_rcc.c ****     pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1358:./Lib/Src/stm32f4xx_rcc.c ****     
1359:./Lib/Src/stm32f4xx_rcc.c ****     if (pllsource != 0)
1360:./Lib/Src/stm32f4xx_rcc.c ****     {
1361:./Lib/Src/stm32f4xx_rcc.c ****       /* HSE used as PLL clock source */
1362:./Lib/Src/stm32f4xx_rcc.c ****       pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1363:./Lib/Src/stm32f4xx_rcc.c ****     }
1364:./Lib/Src/stm32f4xx_rcc.c ****     else
1365:./Lib/Src/stm32f4xx_rcc.c ****     {
1366:./Lib/Src/stm32f4xx_rcc.c ****       /* HSI used as PLL clock source */
1367:./Lib/Src/stm32f4xx_rcc.c ****       pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1368:./Lib/Src/stm32f4xx_rcc.c ****     }
1369:./Lib/Src/stm32f4xx_rcc.c ****     
1370:./Lib/Src/stm32f4xx_rcc.c ****     pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
1371:./Lib/Src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
1372:./Lib/Src/stm32f4xx_rcc.c ****     break;
1373:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1374:./Lib/Src/stm32f4xx_rcc.c ****     
1375:./Lib/Src/stm32f4xx_rcc.c ****   default:
1376:./Lib/Src/stm32f4xx_rcc.c ****     RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1414              		.loc 1 1376 34
 1415 00c0 7B68     		ldr	r3, [r7, #4]
 1416 00c2 234A     		ldr	r2, .L80+4
 1417 00c4 1A60     		str	r2, [r3]
1377:./Lib/Src/stm32f4xx_rcc.c ****     break;
 1418              		.loc 1 1377 5
 1419 00c6 00BF     		nop
 1420              	.L77:
1378:./Lib/Src/stm32f4xx_rcc.c ****   }
1379:./Lib/Src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1380:./Lib/Src/stm32f4xx_rcc.c ****   
1381:./Lib/Src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1382:./Lib/Src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1421              		.loc 1 1382 12
 1422 00c8 204B     		ldr	r3, .L80
 1423 00ca 9B68     		ldr	r3, [r3, #8]
 1424              		.loc 1 1382 7
 1425 00cc 03F0F003 		and	r3, r3, #240
 1426 00d0 BB61     		str	r3, [r7, #24]
1383:./Lib/Src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1427              		.loc 1 1383 7
 1428 00d2 BB69     		ldr	r3, [r7, #24]
 1429 00d4 1B09     		lsrs	r3, r3, #4
 1430 00d6 BB61     		str	r3, [r7, #24]
1384:./Lib/Src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1431              		.loc 1 1384 27
 1432 00d8 1F4A     		ldr	r2, .L80+12
 1433 00da BB69     		ldr	r3, [r7, #24]
 1434 00dc 1344     		add	r3, r3, r2
 1435 00de 1B78     		ldrb	r3, [r3]
 1436 00e0 DBB2     		uxtb	r3, r3
 1437              		.loc 1 1384 9
 1438 00e2 7B61     		str	r3, [r7, #20]
1385:./Lib/Src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1386:./Lib/Src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1439              		.loc 1 1386 42
 1440 00e4 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccz2hB7k.s 			page 50


 1441 00e6 1A68     		ldr	r2, [r3]
 1442              		.loc 1 1386 61
 1443 00e8 7B69     		ldr	r3, [r7, #20]
 1444 00ea DA40     		lsrs	r2, r2, r3
 1445              		.loc 1 1386 30
 1446 00ec 7B68     		ldr	r3, [r7, #4]
 1447 00ee 5A60     		str	r2, [r3, #4]
1387:./Lib/Src/stm32f4xx_rcc.c **** 
1388:./Lib/Src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1389:./Lib/Src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1448              		.loc 1 1389 12
 1449 00f0 164B     		ldr	r3, .L80
 1450 00f2 9B68     		ldr	r3, [r3, #8]
 1451              		.loc 1 1389 7
 1452 00f4 03F4E053 		and	r3, r3, #7168
 1453 00f8 BB61     		str	r3, [r7, #24]
1390:./Lib/Src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1454              		.loc 1 1390 7
 1455 00fa BB69     		ldr	r3, [r7, #24]
 1456 00fc 9B0A     		lsrs	r3, r3, #10
 1457 00fe BB61     		str	r3, [r7, #24]
1391:./Lib/Src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1458              		.loc 1 1391 27
 1459 0100 154A     		ldr	r2, .L80+12
 1460 0102 BB69     		ldr	r3, [r7, #24]
 1461 0104 1344     		add	r3, r3, r2
 1462 0106 1B78     		ldrb	r3, [r3]
 1463 0108 DBB2     		uxtb	r3, r3
 1464              		.loc 1 1391 9
 1465 010a 7B61     		str	r3, [r7, #20]
1392:./Lib/Src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1393:./Lib/Src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1466              		.loc 1 1393 43
 1467 010c 7B68     		ldr	r3, [r7, #4]
 1468 010e 5A68     		ldr	r2, [r3, #4]
 1469              		.loc 1 1393 60
 1470 0110 7B69     		ldr	r3, [r7, #20]
 1471 0112 DA40     		lsrs	r2, r2, r3
 1472              		.loc 1 1393 31
 1473 0114 7B68     		ldr	r3, [r7, #4]
 1474 0116 9A60     		str	r2, [r3, #8]
1394:./Lib/Src/stm32f4xx_rcc.c **** 
1395:./Lib/Src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1396:./Lib/Src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1475              		.loc 1 1396 12
 1476 0118 0C4B     		ldr	r3, .L80
 1477 011a 9B68     		ldr	r3, [r3, #8]
 1478              		.loc 1 1396 7
 1479 011c 03F46043 		and	r3, r3, #57344
 1480 0120 BB61     		str	r3, [r7, #24]
1397:./Lib/Src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1481              		.loc 1 1397 7
 1482 0122 BB69     		ldr	r3, [r7, #24]
 1483 0124 5B0B     		lsrs	r3, r3, #13
 1484 0126 BB61     		str	r3, [r7, #24]
1398:./Lib/Src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1485              		.loc 1 1398 27
ARM GAS  /tmp/ccz2hB7k.s 			page 51


 1486 0128 0B4A     		ldr	r2, .L80+12
 1487 012a BB69     		ldr	r3, [r7, #24]
 1488 012c 1344     		add	r3, r3, r2
 1489 012e 1B78     		ldrb	r3, [r3]
 1490 0130 DBB2     		uxtb	r3, r3
 1491              		.loc 1 1398 9
 1492 0132 7B61     		str	r3, [r7, #20]
1399:./Lib/Src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1400:./Lib/Src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1493              		.loc 1 1400 43
 1494 0134 7B68     		ldr	r3, [r7, #4]
 1495 0136 5A68     		ldr	r2, [r3, #4]
 1496              		.loc 1 1400 60
 1497 0138 7B69     		ldr	r3, [r7, #20]
 1498 013a DA40     		lsrs	r2, r2, r3
 1499              		.loc 1 1400 31
 1500 013c 7B68     		ldr	r3, [r7, #4]
 1501 013e DA60     		str	r2, [r3, #12]
1401:./Lib/Src/stm32f4xx_rcc.c **** }
 1502              		.loc 1 1401 1
 1503 0140 00BF     		nop
 1504 0142 2437     		adds	r7, r7, #36
 1505              		.cfi_def_cfa_offset 4
 1506 0144 BD46     		mov	sp, r7
 1507              		.cfi_def_cfa_register 13
 1508              		@ sp needed
 1509 0146 5DF8047B 		ldr	r7, [sp], #4
 1510              		.cfi_restore 7
 1511              		.cfi_def_cfa_offset 0
 1512 014a 7047     		bx	lr
 1513              	.L81:
 1514              		.align	2
 1515              	.L80:
 1516 014c 00380240 		.word	1073887232
 1517 0150 0024F400 		.word	16000000
 1518 0154 40787D01 		.word	25000000
 1519 0158 00000000 		.word	APBAHBPrescTable
 1520              		.cfi_endproc
 1521              	.LFE144:
 1523              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1524              		.align	1
 1525              		.global	RCC_RTCCLKConfig
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1530              	RCC_RTCCLKConfig:
 1531              	.LFB145:
1402:./Lib/Src/stm32f4xx_rcc.c **** 
1403:./Lib/Src/stm32f4xx_rcc.c **** /**
1404:./Lib/Src/stm32f4xx_rcc.c ****   * @}
1405:./Lib/Src/stm32f4xx_rcc.c ****   */
1406:./Lib/Src/stm32f4xx_rcc.c **** 
1407:./Lib/Src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1408:./Lib/Src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1409:./Lib/Src/stm32f4xx_rcc.c ****  *
1410:./Lib/Src/stm32f4xx_rcc.c **** @verbatim   
1411:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================
ARM GAS  /tmp/ccz2hB7k.s 			page 52


1412:./Lib/Src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1413:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================  
1414:./Lib/Src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1415:./Lib/Src/stm32f4xx_rcc.c ****   
1416:./Lib/Src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1417:./Lib/Src/stm32f4xx_rcc.c ****           by 2 to 31.
1418:./Lib/Src/stm32f4xx_rcc.c ****      
1419:./Lib/Src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1420:./Lib/Src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1421:./Lib/Src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1422:./Lib/Src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1423:./Lib/Src/stm32f4xx_rcc.c **** 
1424:./Lib/Src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1425:./Lib/Src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1426:./Lib/Src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1427:./Lib/Src/stm32f4xx_rcc.c ****      
1428:./Lib/Src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1429:./Lib/Src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1430:./Lib/Src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1431:./Lib/Src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1432:./Lib/Src/stm32f4xx_rcc.c **** 
1433:./Lib/Src/stm32f4xx_rcc.c **** @endverbatim
1434:./Lib/Src/stm32f4xx_rcc.c ****   * @{
1435:./Lib/Src/stm32f4xx_rcc.c ****   */
1436:./Lib/Src/stm32f4xx_rcc.c **** 
1437:./Lib/Src/stm32f4xx_rcc.c **** /**
1438:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1439:./Lib/Src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1440:./Lib/Src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1441:./Lib/Src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1442:./Lib/Src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1443:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1444:./Lib/Src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1445:./Lib/Src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1446:./Lib/Src/stm32f4xx_rcc.c ****   *    
1447:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1448:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1449:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1450:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1451:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1452:./Lib/Src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1453:./Lib/Src/stm32f4xx_rcc.c ****   *  
1454:./Lib/Src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1455:./Lib/Src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1456:./Lib/Src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1457:./Lib/Src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1458:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1459:./Lib/Src/stm32f4xx_rcc.c ****   *         RTC clock source).
1460:./Lib/Src/stm32f4xx_rcc.c ****   *  
1461:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1462:./Lib/Src/stm32f4xx_rcc.c ****   */
1463:./Lib/Src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1464:./Lib/Src/stm32f4xx_rcc.c **** {
 1532              		.loc 1 1464 1
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 16
 1535              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccz2hB7k.s 			page 53


 1536              		@ link register save eliminated.
 1537 0000 80B4     		push	{r7}
 1538              		.cfi_def_cfa_offset 4
 1539              		.cfi_offset 7, -4
 1540 0002 85B0     		sub	sp, sp, #20
 1541              		.cfi_def_cfa_offset 24
 1542 0004 00AF     		add	r7, sp, #0
 1543              		.cfi_def_cfa_register 7
 1544 0006 7860     		str	r0, [r7, #4]
1465:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1545              		.loc 1 1465 12
 1546 0008 0023     		movs	r3, #0
 1547 000a FB60     		str	r3, [r7, #12]
1466:./Lib/Src/stm32f4xx_rcc.c **** 
1467:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1468:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1469:./Lib/Src/stm32f4xx_rcc.c **** 
1470:./Lib/Src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1548              		.loc 1 1470 25
 1549 000c 7B68     		ldr	r3, [r7, #4]
 1550 000e 03F44073 		and	r3, r3, #768
 1551              		.loc 1 1470 6
 1552 0012 B3F5407F 		cmp	r3, #768
 1553 0016 11D1     		bne	.L83
1471:./Lib/Src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1472:./Lib/Src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1554              		.loc 1 1472 17
 1555 0018 0F4B     		ldr	r3, .L84
 1556              		.loc 1 1472 12
 1557 001a 9B68     		ldr	r3, [r3, #8]
 1558 001c FB60     		str	r3, [r7, #12]
1473:./Lib/Src/stm32f4xx_rcc.c **** 
1474:./Lib/Src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1475:./Lib/Src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1559              		.loc 1 1475 12
 1560 001e FB68     		ldr	r3, [r7, #12]
 1561 0020 23F4F813 		bic	r3, r3, #2031616
 1562 0024 FB60     		str	r3, [r7, #12]
1476:./Lib/Src/stm32f4xx_rcc.c **** 
1477:./Lib/Src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1478:./Lib/Src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1563              		.loc 1 1478 33
 1564 0026 7B68     		ldr	r3, [r7, #4]
 1565 0028 23F07043 		bic	r3, r3, #-268435456
 1566 002c 23F44073 		bic	r3, r3, #768
 1567              		.loc 1 1478 12
 1568 0030 FA68     		ldr	r2, [r7, #12]
 1569 0032 1343     		orrs	r3, r3, r2
 1570 0034 FB60     		str	r3, [r7, #12]
1479:./Lib/Src/stm32f4xx_rcc.c **** 
1480:./Lib/Src/stm32f4xx_rcc.c ****     /* Store the new value */
1481:./Lib/Src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1571              		.loc 1 1481 8
 1572 0036 084A     		ldr	r2, .L84
 1573              		.loc 1 1481 15
 1574 0038 FB68     		ldr	r3, [r7, #12]
 1575 003a 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/ccz2hB7k.s 			page 54


 1576              	.L83:
1482:./Lib/Src/stm32f4xx_rcc.c ****   }
1483:./Lib/Src/stm32f4xx_rcc.c ****     
1484:./Lib/Src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1485:./Lib/Src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1577              		.loc 1 1485 6
 1578 003c 064B     		ldr	r3, .L84
 1579 003e 1A6F     		ldr	r2, [r3, #112]
 1580              		.loc 1 1485 34
 1581 0040 7B68     		ldr	r3, [r7, #4]
 1582 0042 C3F30B03 		ubfx	r3, r3, #0, #12
 1583              		.loc 1 1485 6
 1584 0046 0449     		ldr	r1, .L84
 1585              		.loc 1 1485 13
 1586 0048 1343     		orrs	r3, r3, r2
 1587 004a 0B67     		str	r3, [r1, #112]
1486:./Lib/Src/stm32f4xx_rcc.c **** }
 1588              		.loc 1 1486 1
 1589 004c 00BF     		nop
 1590 004e 1437     		adds	r7, r7, #20
 1591              		.cfi_def_cfa_offset 4
 1592 0050 BD46     		mov	sp, r7
 1593              		.cfi_def_cfa_register 13
 1594              		@ sp needed
 1595 0052 5DF8047B 		ldr	r7, [sp], #4
 1596              		.cfi_restore 7
 1597              		.cfi_def_cfa_offset 0
 1598 0056 7047     		bx	lr
 1599              	.L85:
 1600              		.align	2
 1601              	.L84:
 1602 0058 00380240 		.word	1073887232
 1603              		.cfi_endproc
 1604              	.LFE145:
 1606              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1607              		.align	1
 1608              		.global	RCC_RTCCLKCmd
 1609              		.syntax unified
 1610              		.thumb
 1611              		.thumb_func
 1613              	RCC_RTCCLKCmd:
 1614              	.LFB146:
1487:./Lib/Src/stm32f4xx_rcc.c **** 
1488:./Lib/Src/stm32f4xx_rcc.c **** /**
1489:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1490:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1491:./Lib/Src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1492:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1493:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1494:./Lib/Src/stm32f4xx_rcc.c ****   */
1495:./Lib/Src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1496:./Lib/Src/stm32f4xx_rcc.c **** {
 1615              		.loc 1 1496 1
 1616              		.cfi_startproc
 1617              		@ args = 0, pretend = 0, frame = 8
 1618              		@ frame_needed = 1, uses_anonymous_args = 0
 1619              		@ link register save eliminated.
ARM GAS  /tmp/ccz2hB7k.s 			page 55


 1620 0000 80B4     		push	{r7}
 1621              		.cfi_def_cfa_offset 4
 1622              		.cfi_offset 7, -4
 1623 0002 83B0     		sub	sp, sp, #12
 1624              		.cfi_def_cfa_offset 16
 1625 0004 00AF     		add	r7, sp, #0
 1626              		.cfi_def_cfa_register 7
 1627 0006 0346     		mov	r3, r0
 1628 0008 FB71     		strb	r3, [r7, #7]
1497:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1498:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1499:./Lib/Src/stm32f4xx_rcc.c **** 
1500:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1629              		.loc 1 1500 3
 1630 000a 044A     		ldr	r2, .L87
 1631              		.loc 1 1500 38
 1632 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1633              		.loc 1 1500 36
 1634 000e 1360     		str	r3, [r2]
1501:./Lib/Src/stm32f4xx_rcc.c **** }
 1635              		.loc 1 1501 1
 1636 0010 00BF     		nop
 1637 0012 0C37     		adds	r7, r7, #12
 1638              		.cfi_def_cfa_offset 4
 1639 0014 BD46     		mov	sp, r7
 1640              		.cfi_def_cfa_register 13
 1641              		@ sp needed
 1642 0016 5DF8047B 		ldr	r7, [sp], #4
 1643              		.cfi_restore 7
 1644              		.cfi_def_cfa_offset 0
 1645 001a 7047     		bx	lr
 1646              	.L88:
 1647              		.align	2
 1648              	.L87:
 1649 001c 3C0E4742 		.word	1111952956
 1650              		.cfi_endproc
 1651              	.LFE146:
 1653              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1654              		.align	1
 1655              		.global	RCC_BackupResetCmd
 1656              		.syntax unified
 1657              		.thumb
 1658              		.thumb_func
 1660              	RCC_BackupResetCmd:
 1661              	.LFB147:
1502:./Lib/Src/stm32f4xx_rcc.c **** 
1503:./Lib/Src/stm32f4xx_rcc.c **** /**
1504:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1505:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1506:./Lib/Src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1507:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1508:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1509:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1510:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1511:./Lib/Src/stm32f4xx_rcc.c ****   */
1512:./Lib/Src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1513:./Lib/Src/stm32f4xx_rcc.c **** {
ARM GAS  /tmp/ccz2hB7k.s 			page 56


 1662              		.loc 1 1513 1
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 8
 1665              		@ frame_needed = 1, uses_anonymous_args = 0
 1666              		@ link register save eliminated.
 1667 0000 80B4     		push	{r7}
 1668              		.cfi_def_cfa_offset 4
 1669              		.cfi_offset 7, -4
 1670 0002 83B0     		sub	sp, sp, #12
 1671              		.cfi_def_cfa_offset 16
 1672 0004 00AF     		add	r7, sp, #0
 1673              		.cfi_def_cfa_register 7
 1674 0006 0346     		mov	r3, r0
 1675 0008 FB71     		strb	r3, [r7, #7]
1514:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1515:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1516:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1676              		.loc 1 1516 3
 1677 000a 044A     		ldr	r2, .L90
 1678              		.loc 1 1516 38
 1679 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1680              		.loc 1 1516 36
 1681 000e 1360     		str	r3, [r2]
1517:./Lib/Src/stm32f4xx_rcc.c **** }
 1682              		.loc 1 1517 1
 1683 0010 00BF     		nop
 1684 0012 0C37     		adds	r7, r7, #12
 1685              		.cfi_def_cfa_offset 4
 1686 0014 BD46     		mov	sp, r7
 1687              		.cfi_def_cfa_register 13
 1688              		@ sp needed
 1689 0016 5DF8047B 		ldr	r7, [sp], #4
 1690              		.cfi_restore 7
 1691              		.cfi_def_cfa_offset 0
 1692 001a 7047     		bx	lr
 1693              	.L91:
 1694              		.align	2
 1695              	.L90:
 1696 001c 400E4742 		.word	1111952960
 1697              		.cfi_endproc
 1698              	.LFE147:
 1700              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1701              		.align	1
 1702              		.global	RCC_I2SCLKConfig
 1703              		.syntax unified
 1704              		.thumb
 1705              		.thumb_func
 1707              	RCC_I2SCLKConfig:
 1708              	.LFB148:
1518:./Lib/Src/stm32f4xx_rcc.c **** 
1519:./Lib/Src/stm32f4xx_rcc.c **** #if defined (STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
1520:./Lib/Src/stm32f4xx_rcc.c **** /**
1521:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1522:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1523:./Lib/Src/stm32f4xx_rcc.c ****   *
1524:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_I2SAPBx: specifies the APBx I2S clock source.
1525:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccz2hB7k.s 			page 57


1526:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB1: I2S peripheral instance is on APB1 Bus
1527:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SBus_APB2: I2S peripheral instance is on APB2 Bus
1528:./Lib/Src/stm32f4xx_rcc.c ****   *
1529:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1530:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1531:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1532:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1533:./Lib/Src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1534:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_PLL: PLL clock used as I2S clock source
1535:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as I2S clock source
1536:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1537:./Lib/Src/stm32f4xx_rcc.c ****   */
1538:./Lib/Src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SAPBx, uint32_t RCC_I2SCLKSource)
1539:./Lib/Src/stm32f4xx_rcc.c **** {
1540:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1541:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1542:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2S_APBx(RCC_I2SAPBx));
1543:./Lib/Src/stm32f4xx_rcc.c ****   
1544:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_I2SAPBx == RCC_I2SBus_APB1)
1545:./Lib/Src/stm32f4xx_rcc.c ****   {
1546:./Lib/Src/stm32f4xx_rcc.c ****     /* Clear APB1 I2Sx clock source selection bits */
1547:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S1SRC;
1548:./Lib/Src/stm32f4xx_rcc.c ****     /* Set new APB1 I2Sx clock source*/
1549:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_I2SCLKSource;
1550:./Lib/Src/stm32f4xx_rcc.c ****   }
1551:./Lib/Src/stm32f4xx_rcc.c ****   else
1552:./Lib/Src/stm32f4xx_rcc.c ****   {
1553:./Lib/Src/stm32f4xx_rcc.c ****     /* Clear APB2 I2Sx clock source selection  bits */
1554:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_I2S2SRC;
1555:./Lib/Src/stm32f4xx_rcc.c ****     /* Set new APB2 I2Sx clock source */
1556:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_I2SCLKSource << 2);
1557:./Lib/Src/stm32f4xx_rcc.c ****   }
1558:./Lib/Src/stm32f4xx_rcc.c **** }
1559:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
1560:./Lib/Src/stm32f4xx_rcc.c **** /**
1561:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the SAIx clock source (SAIxCLK).
1562:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the SAIx APB clock.
1563:./Lib/Src/stm32f4xx_rcc.c ****   *
1564:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SAIInstance: specifies the SAIx clock source.
1565:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1566:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI1: SAI1 clock source selection
1567:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIInstance_SAI2: SAI2 clock source selections
1568:./Lib/Src/stm32f4xx_rcc.c ****   *
1569:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SAICLKSource: specifies the SAI clock source.
1570:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1571:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLSAI: PLLSAI clock used as SAI clock source
1572:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1573:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_PLL: PLL clock used as SAI clock source
1574:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAICLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock source
1575:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1576:./Lib/Src/stm32f4xx_rcc.c ****   */
1577:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAICLKConfig(uint32_t RCC_SAIInstance, uint32_t RCC_SAICLKSource)
1578:./Lib/Src/stm32f4xx_rcc.c **** {
1579:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1580:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAICLK_SOURCE(RCC_SAICLKSource));
1581:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAI_INSTANCE(RCC_SAIInstance));
1582:./Lib/Src/stm32f4xx_rcc.c ****   
ARM GAS  /tmp/ccz2hB7k.s 			page 58


1583:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_SAIInstance == RCC_SAIInstance_SAI1)
1584:./Lib/Src/stm32f4xx_rcc.c ****   {
1585:./Lib/Src/stm32f4xx_rcc.c ****     /* Clear SAI1 clock source selection bits */
1586:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI1SRC;
1587:./Lib/Src/stm32f4xx_rcc.c ****     /* Set new SAI1 clock source */
1588:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= RCC_SAICLKSource;
1589:./Lib/Src/stm32f4xx_rcc.c ****   }
1590:./Lib/Src/stm32f4xx_rcc.c ****   else
1591:./Lib/Src/stm32f4xx_rcc.c ****   {
1592:./Lib/Src/stm32f4xx_rcc.c ****     /* Clear SAI2 clock source selection bits */
1593:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR &= ~RCC_DCKCFGR_SAI2SRC;
1594:./Lib/Src/stm32f4xx_rcc.c ****     /* Set new SAI2 clock source */
1595:./Lib/Src/stm32f4xx_rcc.c ****     RCC->DCKCFGR |= (RCC_SAICLKSource << 2);
1596:./Lib/Src/stm32f4xx_rcc.c ****   }
1597:./Lib/Src/stm32f4xx_rcc.c **** }
1598:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
1599:./Lib/Src/stm32f4xx_rcc.c **** 
1600:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1601:./Lib/Src/stm32f4xx_rcc.c **** /**
1602:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.      
1603:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1604:./Lib/Src/stm32f4xx_rcc.c ****   *         the SAI clock.
1605:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1606:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1607:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1608:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S clock used as SAI clock source
1609:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLL: PLL clock used as SAI clock source
1610:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1611:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1612:./Lib/Src/stm32f4xx_rcc.c ****   */
1613:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1614:./Lib/Src/stm32f4xx_rcc.c **** {
1615:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1616:./Lib/Src/stm32f4xx_rcc.c ****   
1617:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1618:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1619:./Lib/Src/stm32f4xx_rcc.c ****   
1620:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1621:./Lib/Src/stm32f4xx_rcc.c **** 
1622:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1623:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1624:./Lib/Src/stm32f4xx_rcc.c **** 
1625:./Lib/Src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1626:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1627:./Lib/Src/stm32f4xx_rcc.c **** 
1628:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1629:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1630:./Lib/Src/stm32f4xx_rcc.c **** }
1631:./Lib/Src/stm32f4xx_rcc.c **** 
1632:./Lib/Src/stm32f4xx_rcc.c **** /**
1633:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.      
1634:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1635:./Lib/Src/stm32f4xx_rcc.c ****   *         the SAI clock.
1636:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1637:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1638:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2SR: PLLI2SR clock used as SAI clock source
1639:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S clock used as SAI clock source
ARM GAS  /tmp/ccz2hB7k.s 			page 59


1640:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLL: PLL clock used as SAI clock source
1641:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_HSI_HSE: HSI or HSE depends on PLLSRC used as SAI clock sourc
1642:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1643:./Lib/Src/stm32f4xx_rcc.c ****   */
1644:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1645:./Lib/Src/stm32f4xx_rcc.c **** {
1646:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1647:./Lib/Src/stm32f4xx_rcc.c ****   
1648:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1649:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1650:./Lib/Src/stm32f4xx_rcc.c ****   
1651:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1652:./Lib/Src/stm32f4xx_rcc.c **** 
1653:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1654:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1655:./Lib/Src/stm32f4xx_rcc.c **** 
1656:./Lib/Src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1657:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1658:./Lib/Src/stm32f4xx_rcc.c **** 
1659:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1660:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1661:./Lib/Src/stm32f4xx_rcc.c **** }
1662:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1663:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
1664:./Lib/Src/stm32f4xx_rcc.c **** 
1665:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
1666:./Lib/Src/stm32f4xx_rcc.c **** /**
1667:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1668:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S clock.
1669:./Lib/Src/stm32f4xx_rcc.c ****   *
1670:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1671:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1672:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLR: PLL VCO output clock divided by PLLR.
1673:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_EXT: External clock mapped on the I2S_CKIN pin.
1674:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2SAPBCLKSOURCE_PLLSRC: HSI/HSE depends on PLLSRC.
1675:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1676:./Lib/Src/stm32f4xx_rcc.c ****   */
1677:./Lib/Src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1678:./Lib/Src/stm32f4xx_rcc.c **** {
1679:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1680:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1681:./Lib/Src/stm32f4xx_rcc.c ****   
1682:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear I2Sx clock source selection bits */
1683:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR &= ~RCC_DCKCFGR_I2SSRC;
1684:./Lib/Src/stm32f4xx_rcc.c ****   /* Set new I2Sx clock source*/
1685:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR |= RCC_I2SCLKSource;
1686:./Lib/Src/stm32f4xx_rcc.c **** }
1687:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
1688:./Lib/Src/stm32f4xx_rcc.c **** 
1689:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1690:./Lib/Src/stm32f4xx_rcc.c **** /**
1691:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1692:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1693:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1694:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1695:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1696:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
ARM GAS  /tmp/ccz2hB7k.s 			page 60


1697:./Lib/Src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1698:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1699:./Lib/Src/stm32f4xx_rcc.c ****   */
1700:./Lib/Src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1701:./Lib/Src/stm32f4xx_rcc.c **** {
 1709              		.loc 1 1701 1
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 8
 1712              		@ frame_needed = 1, uses_anonymous_args = 0
 1713              		@ link register save eliminated.
 1714 0000 80B4     		push	{r7}
 1715              		.cfi_def_cfa_offset 4
 1716              		.cfi_offset 7, -4
 1717 0002 83B0     		sub	sp, sp, #12
 1718              		.cfi_def_cfa_offset 16
 1719 0004 00AF     		add	r7, sp, #0
 1720              		.cfi_def_cfa_register 7
 1721 0006 7860     		str	r0, [r7, #4]
1702:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1703:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1704:./Lib/Src/stm32f4xx_rcc.c **** 
1705:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;  
 1722              		.loc 1 1705 3
 1723 0008 044A     		ldr	r2, .L93
 1724              		.loc 1 1705 37
 1725 000a 7B68     		ldr	r3, [r7, #4]
 1726 000c 1360     		str	r3, [r2]
1706:./Lib/Src/stm32f4xx_rcc.c **** }
 1727              		.loc 1 1706 1
 1728 000e 00BF     		nop
 1729 0010 0C37     		adds	r7, r7, #12
 1730              		.cfi_def_cfa_offset 4
 1731 0012 BD46     		mov	sp, r7
 1732              		.cfi_def_cfa_register 13
 1733              		@ sp needed
 1734 0014 5DF8047B 		ldr	r7, [sp], #4
 1735              		.cfi_restore 7
 1736              		.cfi_def_cfa_offset 0
 1737 0018 7047     		bx	lr
 1738              	.L94:
 1739 001a 00BF     		.align	2
 1740              	.L93:
 1741 001c 5C014742 		.word	1111949660
 1742              		.cfi_endproc
 1743              	.LFE148:
 1745              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1746              		.align	1
 1747              		.global	RCC_SAIPLLI2SClkDivConfig
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1752              	RCC_SAIPLLI2SClkDivConfig:
 1753              	.LFB149:
1707:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM
1708:./Lib/Src/stm32f4xx_rcc.c **** 
1709:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM3
1710:./Lib/Src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/ccz2hB7k.s 			page 61


1711:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1712:./Lib/Src/stm32f4xx_rcc.c ****   * 
1713:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1714:./Lib/Src/stm32f4xx_rcc.c ****   *       
1715:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1716:./Lib/Src/stm32f4xx_rcc.c ****   *         the SAI clock.
1717:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1718:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1719:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1720:./Lib/Src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1721:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1722:./Lib/Src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1723:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1724:./Lib/Src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1725:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1726:./Lib/Src/stm32f4xx_rcc.c ****   */
1727:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1728:./Lib/Src/stm32f4xx_rcc.c **** {
1729:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1730:./Lib/Src/stm32f4xx_rcc.c ****   
1731:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1732:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1733:./Lib/Src/stm32f4xx_rcc.c ****   
1734:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1735:./Lib/Src/stm32f4xx_rcc.c **** 
1736:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1737:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1738:./Lib/Src/stm32f4xx_rcc.c **** 
1739:./Lib/Src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1740:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1741:./Lib/Src/stm32f4xx_rcc.c **** 
1742:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1743:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1744:./Lib/Src/stm32f4xx_rcc.c **** }
1745:./Lib/Src/stm32f4xx_rcc.c **** 
1746:./Lib/Src/stm32f4xx_rcc.c **** /**
1747:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1748:./Lib/Src/stm32f4xx_rcc.c ****   * 
1749:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/469xx/479xx devices.
1750:./Lib/Src/stm32f4xx_rcc.c ****   *       
1751:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1752:./Lib/Src/stm32f4xx_rcc.c ****   *         the SAI clock.
1753:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1754:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1755:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1756:./Lib/Src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1757:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1758:./Lib/Src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1759:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1760:./Lib/Src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1761:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1762:./Lib/Src/stm32f4xx_rcc.c ****   */
1763:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1764:./Lib/Src/stm32f4xx_rcc.c **** {
1765:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1766:./Lib/Src/stm32f4xx_rcc.c ****   
1767:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccz2hB7k.s 			page 62


1768:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1769:./Lib/Src/stm32f4xx_rcc.c ****   
1770:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1771:./Lib/Src/stm32f4xx_rcc.c **** 
1772:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1773:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1774:./Lib/Src/stm32f4xx_rcc.c **** 
1775:./Lib/Src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1776:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1777:./Lib/Src/stm32f4xx_rcc.c **** 
1778:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1779:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1780:./Lib/Src/stm32f4xx_rcc.c **** }
1781:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
1782:./Lib/Src/stm32f4xx_rcc.c **** 
1783:./Lib/Src/stm32f4xx_rcc.c **** /**
1784:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1785:./Lib/Src/stm32f4xx_rcc.c ****   * 
1786:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1787:./Lib/Src/stm32f4xx_rcc.c ****   *   
1788:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1789:./Lib/Src/stm32f4xx_rcc.c ****   *              
1790:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1791:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1792:./Lib/Src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1793:./Lib/Src/stm32f4xx_rcc.c ****   *              
1794:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1795:./Lib/Src/stm32f4xx_rcc.c ****   */
1796:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1797:./Lib/Src/stm32f4xx_rcc.c **** {
 1754              		.loc 1 1797 1
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 16
 1757              		@ frame_needed = 1, uses_anonymous_args = 0
 1758              		@ link register save eliminated.
 1759 0000 80B4     		push	{r7}
 1760              		.cfi_def_cfa_offset 4
 1761              		.cfi_offset 7, -4
 1762 0002 85B0     		sub	sp, sp, #20
 1763              		.cfi_def_cfa_offset 24
 1764 0004 00AF     		add	r7, sp, #0
 1765              		.cfi_def_cfa_register 7
 1766 0006 7860     		str	r0, [r7, #4]
1798:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1767              		.loc 1 1798 12
 1768 0008 0023     		movs	r3, #0
 1769 000a FB60     		str	r3, [r7, #12]
1799:./Lib/Src/stm32f4xx_rcc.c ****   
1800:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1801:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1802:./Lib/Src/stm32f4xx_rcc.c ****   
1803:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1770              		.loc 1 1803 15
 1771 000c 0B4B     		ldr	r3, .L96
 1772              		.loc 1 1803 10
 1773 000e D3F88C30 		ldr	r3, [r3, #140]
 1774 0012 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccz2hB7k.s 			page 63


1804:./Lib/Src/stm32f4xx_rcc.c **** 
1805:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1806:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 1775              		.loc 1 1806 10
 1776 0014 FB68     		ldr	r3, [r7, #12]
 1777 0016 23F01F03 		bic	r3, r3, #31
 1778 001a FB60     		str	r3, [r7, #12]
1807:./Lib/Src/stm32f4xx_rcc.c **** 
1808:./Lib/Src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1809:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
 1779              		.loc 1 1809 29
 1780 001c 7B68     		ldr	r3, [r7, #4]
 1781 001e 013B     		subs	r3, r3, #1
 1782              		.loc 1 1809 10
 1783 0020 FA68     		ldr	r2, [r7, #12]
 1784 0022 1343     		orrs	r3, r3, r2
 1785 0024 FB60     		str	r3, [r7, #12]
1810:./Lib/Src/stm32f4xx_rcc.c **** 
1811:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1812:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1786              		.loc 1 1812 6
 1787 0026 054A     		ldr	r2, .L96
 1788              		.loc 1 1812 16
 1789 0028 FB68     		ldr	r3, [r7, #12]
 1790 002a C2F88C30 		str	r3, [r2, #140]
1813:./Lib/Src/stm32f4xx_rcc.c **** }
 1791              		.loc 1 1813 1
 1792 002e 00BF     		nop
 1793 0030 1437     		adds	r7, r7, #20
 1794              		.cfi_def_cfa_offset 4
 1795 0032 BD46     		mov	sp, r7
 1796              		.cfi_def_cfa_register 13
 1797              		@ sp needed
 1798 0034 5DF8047B 		ldr	r7, [sp], #4
 1799              		.cfi_restore 7
 1800              		.cfi_def_cfa_offset 0
 1801 0038 7047     		bx	lr
 1802              	.L97:
 1803 003a 00BF     		.align	2
 1804              	.L96:
 1805 003c 00380240 		.word	1073887232
 1806              		.cfi_endproc
 1807              	.LFE149:
 1809              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1810              		.align	1
 1811              		.global	RCC_SAIPLLSAIClkDivConfig
 1812              		.syntax unified
 1813              		.thumb
 1814              		.thumb_func
 1816              	RCC_SAIPLLSAIClkDivConfig:
 1817              	.LFB150:
1814:./Lib/Src/stm32f4xx_rcc.c **** 
1815:./Lib/Src/stm32f4xx_rcc.c **** /**
1816:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1817:./Lib/Src/stm32f4xx_rcc.c ****   * 
1818:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx/446xx/469xx/479xx devices.
1819:./Lib/Src/stm32f4xx_rcc.c ****   *        
ARM GAS  /tmp/ccz2hB7k.s 			page 64


1820:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1821:./Lib/Src/stm32f4xx_rcc.c ****   *   
1822:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1823:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1824:./Lib/Src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1825:./Lib/Src/stm32f4xx_rcc.c ****   *              
1826:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1827:./Lib/Src/stm32f4xx_rcc.c ****   */
1828:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1829:./Lib/Src/stm32f4xx_rcc.c **** {
 1818              		.loc 1 1829 1
 1819              		.cfi_startproc
 1820              		@ args = 0, pretend = 0, frame = 16
 1821              		@ frame_needed = 1, uses_anonymous_args = 0
 1822              		@ link register save eliminated.
 1823 0000 80B4     		push	{r7}
 1824              		.cfi_def_cfa_offset 4
 1825              		.cfi_offset 7, -4
 1826 0002 85B0     		sub	sp, sp, #20
 1827              		.cfi_def_cfa_offset 24
 1828 0004 00AF     		add	r7, sp, #0
 1829              		.cfi_def_cfa_register 7
 1830 0006 7860     		str	r0, [r7, #4]
1830:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1831              		.loc 1 1830 12
 1832 0008 0023     		movs	r3, #0
 1833 000a FB60     		str	r3, [r7, #12]
1831:./Lib/Src/stm32f4xx_rcc.c ****   
1832:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1833:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1834:./Lib/Src/stm32f4xx_rcc.c ****   
1835:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1834              		.loc 1 1835 15
 1835 000c 0B4B     		ldr	r3, .L99
 1836              		.loc 1 1835 10
 1837 000e D3F88C30 		ldr	r3, [r3, #140]
 1838 0012 FB60     		str	r3, [r7, #12]
1836:./Lib/Src/stm32f4xx_rcc.c **** 
1837:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1838:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 1839              		.loc 1 1838 10
 1840 0014 FB68     		ldr	r3, [r7, #12]
 1841 0016 23F4F853 		bic	r3, r3, #7936
 1842 001a FB60     		str	r3, [r7, #12]
1839:./Lib/Src/stm32f4xx_rcc.c **** 
1840:./Lib/Src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1841:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 1843              		.loc 1 1841 30
 1844 001c 7B68     		ldr	r3, [r7, #4]
 1845 001e 013B     		subs	r3, r3, #1
 1846              		.loc 1 1841 35
 1847 0020 1B02     		lsls	r3, r3, #8
 1848              		.loc 1 1841 10
 1849 0022 FA68     		ldr	r2, [r7, #12]
 1850 0024 1343     		orrs	r3, r3, r2
 1851 0026 FB60     		str	r3, [r7, #12]
1842:./Lib/Src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccz2hB7k.s 			page 65


1843:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1844:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1852              		.loc 1 1844 6
 1853 0028 044A     		ldr	r2, .L99
 1854              		.loc 1 1844 16
 1855 002a FB68     		ldr	r3, [r7, #12]
 1856 002c C2F88C30 		str	r3, [r2, #140]
1845:./Lib/Src/stm32f4xx_rcc.c **** }
 1857              		.loc 1 1845 1
 1858 0030 00BF     		nop
 1859 0032 1437     		adds	r7, r7, #20
 1860              		.cfi_def_cfa_offset 4
 1861 0034 BD46     		mov	sp, r7
 1862              		.cfi_def_cfa_register 13
 1863              		@ sp needed
 1864 0036 5DF8047B 		ldr	r7, [sp], #4
 1865              		.cfi_restore 7
 1866              		.cfi_def_cfa_offset 0
 1867 003a 7047     		bx	lr
 1868              	.L100:
 1869              		.align	2
 1870              	.L99:
 1871 003c 00380240 		.word	1073887232
 1872              		.cfi_endproc
 1873              	.LFE150:
 1875              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1876              		.align	1
 1877              		.global	RCC_LTDCCLKDivConfig
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1882              	RCC_LTDCCLKDivConfig:
 1883              	.LFB151:
1846:./Lib/Src/stm32f4xx_rcc.c **** 
1847:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
1848:./Lib/Src/stm32f4xx_rcc.c **** /**
1849:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1850:./Lib/Src/stm32f4xx_rcc.c ****   * 
1851:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1852:./Lib/Src/stm32f4xx_rcc.c ****   *   
1853:./Lib/Src/stm32f4xx_rcc.c ****   * @param   RCC_PLLI2SDivR: specifies the PLLI2S division factor for SAI1 clock.
1854:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1855:./Lib/Src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2SR) / RCC_PLLI2SDivR 
1856:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1857:./Lib/Src/stm32f4xx_rcc.c ****   */
1858:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SRClkDivConfig(uint32_t RCC_PLLI2SDivR)  
1859:./Lib/Src/stm32f4xx_rcc.c **** {
1860:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1861:./Lib/Src/stm32f4xx_rcc.c ****   
1862:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1863:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVR_VALUE(RCC_PLLI2SDivR));
1864:./Lib/Src/stm32f4xx_rcc.c ****   
1865:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1866:./Lib/Src/stm32f4xx_rcc.c **** 
1867:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVR[4:0] bits */
1868:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVR);
1869:./Lib/Src/stm32f4xx_rcc.c **** 
ARM GAS  /tmp/ccz2hB7k.s 			page 66


1870:./Lib/Src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVR values */
1871:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivR-1);
1872:./Lib/Src/stm32f4xx_rcc.c **** 
1873:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1874:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1875:./Lib/Src/stm32f4xx_rcc.c **** }
1876:./Lib/Src/stm32f4xx_rcc.c **** 
1877:./Lib/Src/stm32f4xx_rcc.c **** /**
1878:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLL.
1879:./Lib/Src/stm32f4xx_rcc.c ****   * 
1880:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F413_423xx
1881:./Lib/Src/stm32f4xx_rcc.c ****   *        
1882:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1883:./Lib/Src/stm32f4xx_rcc.c ****   *   
1884:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_PLLDivR: specifies the PLL division factor for SAI1 clock.
1885:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1886:./Lib/Src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLR) / RCC_PLLDivR 
1887:./Lib/Src/stm32f4xx_rcc.c ****   *              
1888:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1889:./Lib/Src/stm32f4xx_rcc.c ****   */
1890:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SAIPLLRClkDivConfig(uint32_t RCC_PLLDivR)  
1891:./Lib/Src/stm32f4xx_rcc.c **** {
1892:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1893:./Lib/Src/stm32f4xx_rcc.c ****   
1894:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1895:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_PLLDivR));
1896:./Lib/Src/stm32f4xx_rcc.c ****   
1897:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1898:./Lib/Src/stm32f4xx_rcc.c **** 
1899:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear PLLDIVR[12:8] */
1900:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLDIVR);
1901:./Lib/Src/stm32f4xx_rcc.c **** 
1902:./Lib/Src/stm32f4xx_rcc.c ****   /* Set PLLDivR values */
1903:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLDivR - 1 ) << 8);
1904:./Lib/Src/stm32f4xx_rcc.c **** 
1905:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1906:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1907:./Lib/Src/stm32f4xx_rcc.c **** }
1908:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
1909:./Lib/Src/stm32f4xx_rcc.c **** 
1910:./Lib/Src/stm32f4xx_rcc.c **** /**
1911:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1912:./Lib/Src/stm32f4xx_rcc.c ****   * 
1913:./Lib/Src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F42xxx/43xxx/446xx/469xx/479xx Devices.
1914:./Lib/Src/stm32f4xx_rcc.c ****   *      
1915:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1916:./Lib/Src/stm32f4xx_rcc.c ****   *   
1917:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1918:./Lib/Src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1919:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1920:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div2: LTDC clock = f(PLLSAI_R)/2
1921:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div4: LTDC clock = f(PLLSAI_R)/4
1922:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div8: LTDC clock = f(PLLSAI_R)/8
1923:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSAIDivR_Div16: LTDC clock = f(PLLSAI_R)/16
1924:./Lib/Src/stm32f4xx_rcc.c ****   *            
1925:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1926:./Lib/Src/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccz2hB7k.s 			page 67


1927:./Lib/Src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1928:./Lib/Src/stm32f4xx_rcc.c **** {
 1884              		.loc 1 1928 1
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 16
 1887              		@ frame_needed = 1, uses_anonymous_args = 0
 1888              		@ link register save eliminated.
 1889 0000 80B4     		push	{r7}
 1890              		.cfi_def_cfa_offset 4
 1891              		.cfi_offset 7, -4
 1892 0002 85B0     		sub	sp, sp, #20
 1893              		.cfi_def_cfa_offset 24
 1894 0004 00AF     		add	r7, sp, #0
 1895              		.cfi_def_cfa_register 7
 1896 0006 7860     		str	r0, [r7, #4]
1929:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1897              		.loc 1 1929 12
 1898 0008 0023     		movs	r3, #0
 1899 000a FB60     		str	r3, [r7, #12]
1930:./Lib/Src/stm32f4xx_rcc.c ****   
1931:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1932:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1933:./Lib/Src/stm32f4xx_rcc.c ****   
1934:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
 1900              		.loc 1 1934 15
 1901 000c 0A4B     		ldr	r3, .L102
 1902              		.loc 1 1934 10
 1903 000e D3F88C30 		ldr	r3, [r3, #140]
 1904 0012 FB60     		str	r3, [r7, #12]
1935:./Lib/Src/stm32f4xx_rcc.c **** 
1936:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1937:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 1905              		.loc 1 1937 10
 1906 0014 FB68     		ldr	r3, [r7, #12]
 1907 0016 23F44033 		bic	r3, r3, #196608
 1908 001a FB60     		str	r3, [r7, #12]
1938:./Lib/Src/stm32f4xx_rcc.c **** 
1939:./Lib/Src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1940:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
 1909              		.loc 1 1940 10
 1910 001c FA68     		ldr	r2, [r7, #12]
 1911 001e 7B68     		ldr	r3, [r7, #4]
 1912 0020 1343     		orrs	r3, r3, r2
 1913 0022 FB60     		str	r3, [r7, #12]
1941:./Lib/Src/stm32f4xx_rcc.c **** 
1942:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1943:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
 1914              		.loc 1 1943 6
 1915 0024 044A     		ldr	r2, .L102
 1916              		.loc 1 1943 16
 1917 0026 FB68     		ldr	r3, [r7, #12]
 1918 0028 C2F88C30 		str	r3, [r2, #140]
1944:./Lib/Src/stm32f4xx_rcc.c **** }
 1919              		.loc 1 1944 1
 1920 002c 00BF     		nop
 1921 002e 1437     		adds	r7, r7, #20
 1922              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccz2hB7k.s 			page 68


 1923 0030 BD46     		mov	sp, r7
 1924              		.cfi_def_cfa_register 13
 1925              		@ sp needed
 1926 0032 5DF8047B 		ldr	r7, [sp], #4
 1927              		.cfi_restore 7
 1928              		.cfi_def_cfa_offset 0
 1929 0036 7047     		bx	lr
 1930              	.L103:
 1931              		.align	2
 1932              	.L102:
 1933 0038 00380240 		.word	1073887232
 1934              		.cfi_endproc
 1935              	.LFE151:
 1937              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1938              		.align	1
 1939              		.global	RCC_TIMCLKPresConfig
 1940              		.syntax unified
 1941              		.thumb
 1942              		.thumb_func
 1944              	RCC_TIMCLKPresConfig:
 1945              	.LFB152:
1945:./Lib/Src/stm32f4xx_rcc.c **** 
1946:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx)
1947:./Lib/Src/stm32f4xx_rcc.c **** /**
1948:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM clock source (DFSDMCLK).
1949:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1950:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDMCLKSource: specifies the DFSDM clock source.
1951:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1952:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_APB: APB clock used as DFSDM clock source.
1953:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDMCLKSource_SYS: System clock used as DFSDM clock source.
1954:./Lib/Src/stm32f4xx_rcc.c ****   *                                        
1955:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1956:./Lib/Src/stm32f4xx_rcc.c ****   */
1957:./Lib/Src/stm32f4xx_rcc.c **** void RCC_DFSDM1CLKConfig(uint32_t RCC_DFSDMCLKSource)
1958:./Lib/Src/stm32f4xx_rcc.c **** {
1959:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1960:./Lib/Src/stm32f4xx_rcc.c ****   
1961:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1962:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDM1CLK_SOURCE(RCC_DFSDMCLKSource));
1963:./Lib/Src/stm32f4xx_rcc.c ****   
1964:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1965:./Lib/Src/stm32f4xx_rcc.c **** 
1966:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear CKDFSDM-SEL  bit */
1967:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1SEL;
1968:./Lib/Src/stm32f4xx_rcc.c **** 
1969:./Lib/Src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL bit according to RCC_DFSDMCLKSource value */
1970:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_DFSDMCLKSource << 31) ;
1971:./Lib/Src/stm32f4xx_rcc.c **** 
1972:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
1973:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1974:./Lib/Src/stm32f4xx_rcc.c **** }
1975:./Lib/Src/stm32f4xx_rcc.c **** 
1976:./Lib/Src/stm32f4xx_rcc.c **** /**
1977:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
1978:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
1979:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM1ACLKSource: specifies the DFSDM clock source.
1980:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccz2hB7k.s 			page 69


1981:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
1982:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
1983:./Lib/Src/stm32f4xx_rcc.c ****   *                                        
1984:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
1985:./Lib/Src/stm32f4xx_rcc.c ****   */
1986:./Lib/Src/stm32f4xx_rcc.c **** void RCC_DFSDM1ACLKConfig(uint32_t RCC_DFSDM1ACLKSource)
1987:./Lib/Src/stm32f4xx_rcc.c **** {
1988:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1989:./Lib/Src/stm32f4xx_rcc.c ****   
1990:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
1991:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMACLK_SOURCE(RCC_DFSDM1ACLKSource));
1992:./Lib/Src/stm32f4xx_rcc.c ****   
1993:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1994:./Lib/Src/stm32f4xx_rcc.c **** 
1995:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
1996:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
1997:./Lib/Src/stm32f4xx_rcc.c **** 
1998:./Lib/Src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
1999:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDM1ACLKSource;
2000:./Lib/Src/stm32f4xx_rcc.c **** 
2001:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
2002:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2003:./Lib/Src/stm32f4xx_rcc.c **** }
2004:./Lib/Src/stm32f4xx_rcc.c **** 
2005:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F413_423xx)
2006:./Lib/Src/stm32f4xx_rcc.c **** /**
2007:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the DFSDM Audio clock source (DFSDMACLK).
2008:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the DFSDM APB clock.
2009:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_DFSDM2ACLKSource: specifies the DFSDM clock source.
2010:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2011:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1: APB clock used as DFSDM clock source.
2012:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2: System clock used as DFSDM clock source.
2013:./Lib/Src/stm32f4xx_rcc.c ****   *                                        
2014:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2015:./Lib/Src/stm32f4xx_rcc.c ****   */
2016:./Lib/Src/stm32f4xx_rcc.c **** void RCC_DFSDM2ACLKConfig(uint32_t RCC_DFSDMACLKSource)
2017:./Lib/Src/stm32f4xx_rcc.c **** {
2018:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
2019:./Lib/Src/stm32f4xx_rcc.c ****   
2020:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2021:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DFSDMCLK_SOURCE(RCC_DFSDMACLKSource));
2022:./Lib/Src/stm32f4xx_rcc.c ****   
2023:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
2024:./Lib/Src/stm32f4xx_rcc.c **** 
2025:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear CKDFSDMA SEL  bit */
2026:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_CKDFSDM1ASEL;
2027:./Lib/Src/stm32f4xx_rcc.c **** 
2028:./Lib/Src/stm32f4xx_rcc.c ****   /* Set CKDFSDM-SEL   bt according to RCC_DFSDMCLKSource value */
2029:./Lib/Src/stm32f4xx_rcc.c ****   tmpreg |= RCC_DFSDMACLKSource;
2030:./Lib/Src/stm32f4xx_rcc.c **** 
2031:./Lib/Src/stm32f4xx_rcc.c ****   /* Store the new value */
2032:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
2033:./Lib/Src/stm32f4xx_rcc.c **** }
2034:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F413_423xx */
2035:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx */
2036:./Lib/Src/stm32f4xx_rcc.c **** 
2037:./Lib/Src/stm32f4xx_rcc.c **** /**
ARM GAS  /tmp/ccz2hB7k.s 			page 70


2038:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
2039:./Lib/Src/stm32f4xx_rcc.c ****   * 
2040:./Lib/Src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices. 
2041:./Lib/Src/stm32f4xx_rcc.c ****   *   
2042:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
2043:./Lib/Src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
2044:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
2045:./Lib/Src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
2046:./Lib/Src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
2047:./Lib/Src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
2048:./Lib/Src/stm32f4xx_rcc.c ****   *                   
2049:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
2050:./Lib/Src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
2051:./Lib/Src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
2052:./Lib/Src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
2053:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2054:./Lib/Src/stm32f4xx_rcc.c ****   */
2055:./Lib/Src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
2056:./Lib/Src/stm32f4xx_rcc.c **** {
 1946              		.loc 1 2056 1
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 8
 1949              		@ frame_needed = 1, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 1951 0000 80B4     		push	{r7}
 1952              		.cfi_def_cfa_offset 4
 1953              		.cfi_offset 7, -4
 1954 0002 83B0     		sub	sp, sp, #12
 1955              		.cfi_def_cfa_offset 16
 1956 0004 00AF     		add	r7, sp, #0
 1957              		.cfi_def_cfa_register 7
 1958 0006 7860     		str	r0, [r7, #4]
2057:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2058:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
2059:./Lib/Src/stm32f4xx_rcc.c **** 
2060:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 1959              		.loc 1 2060 3
 1960 0008 044A     		ldr	r2, .L105
 1961              		.loc 1 2060 40
 1962 000a 7B68     		ldr	r3, [r7, #4]
 1963 000c 1360     		str	r3, [r2]
2061:./Lib/Src/stm32f4xx_rcc.c **** }
 1964              		.loc 1 2061 1
 1965 000e 00BF     		nop
 1966 0010 0C37     		adds	r7, r7, #12
 1967              		.cfi_def_cfa_offset 4
 1968 0012 BD46     		mov	sp, r7
 1969              		.cfi_def_cfa_register 13
 1970              		@ sp needed
 1971 0014 5DF8047B 		ldr	r7, [sp], #4
 1972              		.cfi_restore 7
 1973              		.cfi_def_cfa_offset 0
 1974 0018 7047     		bx	lr
 1975              	.L106:
 1976 001a 00BF     		.align	2
 1977              	.L105:
 1978 001c E0114742 		.word	1111953888
ARM GAS  /tmp/ccz2hB7k.s 			page 71


 1979              		.cfi_endproc
 1980              	.LFE152:
 1982              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1983              		.align	1
 1984              		.global	RCC_AHB1PeriphClockCmd
 1985              		.syntax unified
 1986              		.thumb
 1987              		.thumb_func
 1989              	RCC_AHB1PeriphClockCmd:
 1990              	.LFB153:
2062:./Lib/Src/stm32f4xx_rcc.c **** 
2063:./Lib/Src/stm32f4xx_rcc.c **** /**
2064:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
2065:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2066:./Lib/Src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2067:./Lib/Src/stm32f4xx_rcc.c ****   *         using it.   
2068:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2069:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2070:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2071:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2072:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2073:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2074:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2075:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2076:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2077:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2078:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2079:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2080:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
2081:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2082:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2083:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
2084:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2085:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2086:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
2087:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2088:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2089:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2090:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
2091:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2092:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2093:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2094:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2095:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2096:./Lib/Src/stm32f4xx_rcc.c ****   */
2097:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2098:./Lib/Src/stm32f4xx_rcc.c **** {
 1991              		.loc 1 2098 1
 1992              		.cfi_startproc
 1993              		@ args = 0, pretend = 0, frame = 8
 1994              		@ frame_needed = 1, uses_anonymous_args = 0
 1995              		@ link register save eliminated.
 1996 0000 80B4     		push	{r7}
 1997              		.cfi_def_cfa_offset 4
 1998              		.cfi_offset 7, -4
 1999 0002 83B0     		sub	sp, sp, #12
 2000              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccz2hB7k.s 			page 72


 2001 0004 00AF     		add	r7, sp, #0
 2002              		.cfi_def_cfa_register 7
 2003 0006 7860     		str	r0, [r7, #4]
 2004 0008 0B46     		mov	r3, r1
 2005 000a FB70     		strb	r3, [r7, #3]
2099:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2100:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
2101:./Lib/Src/stm32f4xx_rcc.c **** 
2102:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2103:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2006              		.loc 1 2103 6
 2007 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2008 000e 002B     		cmp	r3, #0
 2009 0010 06D0     		beq	.L108
2104:./Lib/Src/stm32f4xx_rcc.c ****   {
2105:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 2010              		.loc 1 2105 8
 2011 0012 0A4B     		ldr	r3, .L111
 2012 0014 1A6B     		ldr	r2, [r3, #48]
 2013 0016 0949     		ldr	r1, .L111
 2014              		.loc 1 2105 18
 2015 0018 7B68     		ldr	r3, [r7, #4]
 2016 001a 1343     		orrs	r3, r3, r2
 2017 001c 0B63     		str	r3, [r1, #48]
2106:./Lib/Src/stm32f4xx_rcc.c ****   }
2107:./Lib/Src/stm32f4xx_rcc.c ****   else
2108:./Lib/Src/stm32f4xx_rcc.c ****   {
2109:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
2110:./Lib/Src/stm32f4xx_rcc.c ****   }
2111:./Lib/Src/stm32f4xx_rcc.c **** }
 2018              		.loc 1 2111 1
 2019 001e 06E0     		b	.L110
 2020              	.L108:
2109:./Lib/Src/stm32f4xx_rcc.c ****   }
 2021              		.loc 1 2109 8
 2022 0020 064B     		ldr	r3, .L111
 2023 0022 1A6B     		ldr	r2, [r3, #48]
2109:./Lib/Src/stm32f4xx_rcc.c ****   }
 2024              		.loc 1 2109 21
 2025 0024 7B68     		ldr	r3, [r7, #4]
 2026 0026 DB43     		mvns	r3, r3
2109:./Lib/Src/stm32f4xx_rcc.c ****   }
 2027              		.loc 1 2109 8
 2028 0028 0449     		ldr	r1, .L111
2109:./Lib/Src/stm32f4xx_rcc.c ****   }
 2029              		.loc 1 2109 18
 2030 002a 1340     		ands	r3, r3, r2
 2031 002c 0B63     		str	r3, [r1, #48]
 2032              	.L110:
 2033              		.loc 1 2111 1
 2034 002e 00BF     		nop
 2035 0030 0C37     		adds	r7, r7, #12
 2036              		.cfi_def_cfa_offset 4
 2037 0032 BD46     		mov	sp, r7
 2038              		.cfi_def_cfa_register 13
 2039              		@ sp needed
 2040 0034 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccz2hB7k.s 			page 73


 2041              		.cfi_restore 7
 2042              		.cfi_def_cfa_offset 0
 2043 0038 7047     		bx	lr
 2044              	.L112:
 2045 003a 00BF     		.align	2
 2046              	.L111:
 2047 003c 00380240 		.word	1073887232
 2048              		.cfi_endproc
 2049              	.LFE153:
 2051              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 2052              		.align	1
 2053              		.global	RCC_AHB2PeriphClockCmd
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2058              	RCC_AHB2PeriphClockCmd:
 2059              	.LFB154:
2112:./Lib/Src/stm32f4xx_rcc.c **** 
2113:./Lib/Src/stm32f4xx_rcc.c **** /**
2114:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
2115:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2116:./Lib/Src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2117:./Lib/Src/stm32f4xx_rcc.c ****   *         using it. 
2118:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2119:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2120:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2121:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2122:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2123:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2124:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2125:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2126:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2127:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2128:./Lib/Src/stm32f4xx_rcc.c ****   */
2129:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2130:./Lib/Src/stm32f4xx_rcc.c **** {
 2060              		.loc 1 2130 1
 2061              		.cfi_startproc
 2062              		@ args = 0, pretend = 0, frame = 8
 2063              		@ frame_needed = 1, uses_anonymous_args = 0
 2064              		@ link register save eliminated.
 2065 0000 80B4     		push	{r7}
 2066              		.cfi_def_cfa_offset 4
 2067              		.cfi_offset 7, -4
 2068 0002 83B0     		sub	sp, sp, #12
 2069              		.cfi_def_cfa_offset 16
 2070 0004 00AF     		add	r7, sp, #0
 2071              		.cfi_def_cfa_register 7
 2072 0006 7860     		str	r0, [r7, #4]
 2073 0008 0B46     		mov	r3, r1
 2074 000a FB70     		strb	r3, [r7, #3]
2131:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2132:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2133:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2134:./Lib/Src/stm32f4xx_rcc.c **** 
2135:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2075              		.loc 1 2135 6
ARM GAS  /tmp/ccz2hB7k.s 			page 74


 2076 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2077 000e 002B     		cmp	r3, #0
 2078 0010 06D0     		beq	.L114
2136:./Lib/Src/stm32f4xx_rcc.c ****   {
2137:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 2079              		.loc 1 2137 8
 2080 0012 0A4B     		ldr	r3, .L117
 2081 0014 5A6B     		ldr	r2, [r3, #52]
 2082 0016 0949     		ldr	r1, .L117
 2083              		.loc 1 2137 18
 2084 0018 7B68     		ldr	r3, [r7, #4]
 2085 001a 1343     		orrs	r3, r3, r2
 2086 001c 4B63     		str	r3, [r1, #52]
2138:./Lib/Src/stm32f4xx_rcc.c ****   }
2139:./Lib/Src/stm32f4xx_rcc.c ****   else
2140:./Lib/Src/stm32f4xx_rcc.c ****   {
2141:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
2142:./Lib/Src/stm32f4xx_rcc.c ****   }
2143:./Lib/Src/stm32f4xx_rcc.c **** }
 2087              		.loc 1 2143 1
 2088 001e 06E0     		b	.L116
 2089              	.L114:
2141:./Lib/Src/stm32f4xx_rcc.c ****   }
 2090              		.loc 1 2141 8
 2091 0020 064B     		ldr	r3, .L117
 2092 0022 5A6B     		ldr	r2, [r3, #52]
2141:./Lib/Src/stm32f4xx_rcc.c ****   }
 2093              		.loc 1 2141 21
 2094 0024 7B68     		ldr	r3, [r7, #4]
 2095 0026 DB43     		mvns	r3, r3
2141:./Lib/Src/stm32f4xx_rcc.c ****   }
 2096              		.loc 1 2141 8
 2097 0028 0449     		ldr	r1, .L117
2141:./Lib/Src/stm32f4xx_rcc.c ****   }
 2098              		.loc 1 2141 18
 2099 002a 1340     		ands	r3, r3, r2
 2100 002c 4B63     		str	r3, [r1, #52]
 2101              	.L116:
 2102              		.loc 1 2143 1
 2103 002e 00BF     		nop
 2104 0030 0C37     		adds	r7, r7, #12
 2105              		.cfi_def_cfa_offset 4
 2106 0032 BD46     		mov	sp, r7
 2107              		.cfi_def_cfa_register 13
 2108              		@ sp needed
 2109 0034 5DF8047B 		ldr	r7, [sp], #4
 2110              		.cfi_restore 7
 2111              		.cfi_def_cfa_offset 0
 2112 0038 7047     		bx	lr
 2113              	.L118:
 2114 003a 00BF     		.align	2
 2115              	.L117:
 2116 003c 00380240 		.word	1073887232
 2117              		.cfi_endproc
 2118              	.LFE154:
 2120              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 2121              		.align	1
ARM GAS  /tmp/ccz2hB7k.s 			page 75


 2122              		.global	RCC_APB1PeriphClockCmd
 2123              		.syntax unified
 2124              		.thumb
 2125              		.thumb_func
 2127              	RCC_APB1PeriphClockCmd:
 2128              	.LFB155:
2144:./Lib/Src/stm32f4xx_rcc.c **** 
2145:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2146:./Lib/Src/stm32f4xx_rcc.c **** /**
2147:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
2148:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2149:./Lib/Src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2150:./Lib/Src/stm32f4xx_rcc.c ****   *         using it. 
2151:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2152:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2153:./Lib/Src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2154:./Lib/Src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2155:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2156:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2157:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2158:./Lib/Src/stm32f4xx_rcc.c ****   */
2159:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2160:./Lib/Src/stm32f4xx_rcc.c **** {
2161:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2162:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
2163:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2164:./Lib/Src/stm32f4xx_rcc.c **** 
2165:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2166:./Lib/Src/stm32f4xx_rcc.c ****   {
2167:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
2168:./Lib/Src/stm32f4xx_rcc.c ****   }
2169:./Lib/Src/stm32f4xx_rcc.c ****   else
2170:./Lib/Src/stm32f4xx_rcc.c ****   {
2171:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
2172:./Lib/Src/stm32f4xx_rcc.c ****   }
2173:./Lib/Src/stm32f4xx_rcc.c **** }
2174:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2175:./Lib/Src/stm32f4xx_rcc.c **** 
2176:./Lib/Src/stm32f4xx_rcc.c **** /**
2177:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
2178:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2179:./Lib/Src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2180:./Lib/Src/stm32f4xx_rcc.c ****   *         using it. 
2181:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2182:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2183:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2184:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2185:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2186:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2187:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2188:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2189:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2190:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2191:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2192:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2193:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2194:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
ARM GAS  /tmp/ccz2hB7k.s 			page 76


2195:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2196:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2197:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2198:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2199:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2200:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2201:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2202:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2203:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2204:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2205:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2206:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2207:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2208:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2209:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2210:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2211:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2212:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2213:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2214:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2215:./Lib/Src/stm32f4xx_rcc.c ****   */
2216:./Lib/Src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2217:./Lib/Src/stm32f4xx_rcc.c **** {
 2129              		.loc 1 2217 1
 2130              		.cfi_startproc
 2131              		@ args = 0, pretend = 0, frame = 8
 2132              		@ frame_needed = 1, uses_anonymous_args = 0
 2133              		@ link register save eliminated.
 2134 0000 80B4     		push	{r7}
 2135              		.cfi_def_cfa_offset 4
 2136              		.cfi_offset 7, -4
 2137 0002 83B0     		sub	sp, sp, #12
 2138              		.cfi_def_cfa_offset 16
 2139 0004 00AF     		add	r7, sp, #0
 2140              		.cfi_def_cfa_register 7
 2141 0006 7860     		str	r0, [r7, #4]
 2142 0008 0B46     		mov	r3, r1
 2143 000a FB70     		strb	r3, [r7, #3]
2218:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2219:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
2220:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2221:./Lib/Src/stm32f4xx_rcc.c **** 
2222:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2144              		.loc 1 2222 6
 2145 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2146 000e 002B     		cmp	r3, #0
 2147 0010 06D0     		beq	.L120
2223:./Lib/Src/stm32f4xx_rcc.c ****   {
2224:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 2148              		.loc 1 2224 8
 2149 0012 0A4B     		ldr	r3, .L123
 2150 0014 1A6C     		ldr	r2, [r3, #64]
 2151 0016 0949     		ldr	r1, .L123
 2152              		.loc 1 2224 18
 2153 0018 7B68     		ldr	r3, [r7, #4]
 2154 001a 1343     		orrs	r3, r3, r2
 2155 001c 0B64     		str	r3, [r1, #64]
ARM GAS  /tmp/ccz2hB7k.s 			page 77


2225:./Lib/Src/stm32f4xx_rcc.c ****   }
2226:./Lib/Src/stm32f4xx_rcc.c ****   else
2227:./Lib/Src/stm32f4xx_rcc.c ****   {
2228:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
2229:./Lib/Src/stm32f4xx_rcc.c ****   }
2230:./Lib/Src/stm32f4xx_rcc.c **** }
 2156              		.loc 1 2230 1
 2157 001e 06E0     		b	.L122
 2158              	.L120:
2228:./Lib/Src/stm32f4xx_rcc.c ****   }
 2159              		.loc 1 2228 8
 2160 0020 064B     		ldr	r3, .L123
 2161 0022 1A6C     		ldr	r2, [r3, #64]
2228:./Lib/Src/stm32f4xx_rcc.c ****   }
 2162              		.loc 1 2228 21
 2163 0024 7B68     		ldr	r3, [r7, #4]
 2164 0026 DB43     		mvns	r3, r3
2228:./Lib/Src/stm32f4xx_rcc.c ****   }
 2165              		.loc 1 2228 8
 2166 0028 0449     		ldr	r1, .L123
2228:./Lib/Src/stm32f4xx_rcc.c ****   }
 2167              		.loc 1 2228 18
 2168 002a 1340     		ands	r3, r3, r2
 2169 002c 0B64     		str	r3, [r1, #64]
 2170              	.L122:
 2171              		.loc 1 2230 1
 2172 002e 00BF     		nop
 2173 0030 0C37     		adds	r7, r7, #12
 2174              		.cfi_def_cfa_offset 4
 2175 0032 BD46     		mov	sp, r7
 2176              		.cfi_def_cfa_register 13
 2177              		@ sp needed
 2178 0034 5DF8047B 		ldr	r7, [sp], #4
 2179              		.cfi_restore 7
 2180              		.cfi_def_cfa_offset 0
 2181 0038 7047     		bx	lr
 2182              	.L124:
 2183 003a 00BF     		.align	2
 2184              	.L123:
 2185 003c 00380240 		.word	1073887232
 2186              		.cfi_endproc
 2187              	.LFE155:
 2189              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 2190              		.align	1
 2191              		.global	RCC_APB2PeriphClockCmd
 2192              		.syntax unified
 2193              		.thumb
 2194              		.thumb_func
 2196              	RCC_APB2PeriphClockCmd:
 2197              	.LFB156:
2231:./Lib/Src/stm32f4xx_rcc.c **** 
2232:./Lib/Src/stm32f4xx_rcc.c **** /**
2233:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
2234:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
2235:./Lib/Src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
2236:./Lib/Src/stm32f4xx_rcc.c ****   *         using it.
2237:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
ARM GAS  /tmp/ccz2hB7k.s 			page 78


2238:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2239:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2240:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2241:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2242:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2243:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2244:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2245:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2246:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2247:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2248:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2249:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2250:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2251:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2252:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2253:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2254:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2255:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2256:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2257:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2258:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2259:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2260:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2261:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2262:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2263:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2264:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2265:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2266:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2267:./Lib/Src/stm32f4xx_rcc.c ****   */
2268:./Lib/Src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2269:./Lib/Src/stm32f4xx_rcc.c **** {
 2198              		.loc 1 2269 1
 2199              		.cfi_startproc
 2200              		@ args = 0, pretend = 0, frame = 8
 2201              		@ frame_needed = 1, uses_anonymous_args = 0
 2202              		@ link register save eliminated.
 2203 0000 80B4     		push	{r7}
 2204              		.cfi_def_cfa_offset 4
 2205              		.cfi_offset 7, -4
 2206 0002 83B0     		sub	sp, sp, #12
 2207              		.cfi_def_cfa_offset 16
 2208 0004 00AF     		add	r7, sp, #0
 2209              		.cfi_def_cfa_register 7
 2210 0006 7860     		str	r0, [r7, #4]
 2211 0008 0B46     		mov	r3, r1
 2212 000a FB70     		strb	r3, [r7, #3]
2270:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2271:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2272:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2273:./Lib/Src/stm32f4xx_rcc.c **** 
2274:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2213              		.loc 1 2274 6
 2214 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2215 000e 002B     		cmp	r3, #0
 2216 0010 06D0     		beq	.L126
2275:./Lib/Src/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/ccz2hB7k.s 			page 79


2276:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 2217              		.loc 1 2276 8
 2218 0012 0A4B     		ldr	r3, .L129
 2219 0014 5A6C     		ldr	r2, [r3, #68]
 2220 0016 0949     		ldr	r1, .L129
 2221              		.loc 1 2276 18
 2222 0018 7B68     		ldr	r3, [r7, #4]
 2223 001a 1343     		orrs	r3, r3, r2
 2224 001c 4B64     		str	r3, [r1, #68]
2277:./Lib/Src/stm32f4xx_rcc.c ****   }
2278:./Lib/Src/stm32f4xx_rcc.c ****   else
2279:./Lib/Src/stm32f4xx_rcc.c ****   {
2280:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
2281:./Lib/Src/stm32f4xx_rcc.c ****   }
2282:./Lib/Src/stm32f4xx_rcc.c **** }
 2225              		.loc 1 2282 1
 2226 001e 06E0     		b	.L128
 2227              	.L126:
2280:./Lib/Src/stm32f4xx_rcc.c ****   }
 2228              		.loc 1 2280 8
 2229 0020 064B     		ldr	r3, .L129
 2230 0022 5A6C     		ldr	r2, [r3, #68]
2280:./Lib/Src/stm32f4xx_rcc.c ****   }
 2231              		.loc 1 2280 21
 2232 0024 7B68     		ldr	r3, [r7, #4]
 2233 0026 DB43     		mvns	r3, r3
2280:./Lib/Src/stm32f4xx_rcc.c ****   }
 2234              		.loc 1 2280 8
 2235 0028 0449     		ldr	r1, .L129
2280:./Lib/Src/stm32f4xx_rcc.c ****   }
 2236              		.loc 1 2280 18
 2237 002a 1340     		ands	r3, r3, r2
 2238 002c 4B64     		str	r3, [r1, #68]
 2239              	.L128:
 2240              		.loc 1 2282 1
 2241 002e 00BF     		nop
 2242 0030 0C37     		adds	r7, r7, #12
 2243              		.cfi_def_cfa_offset 4
 2244 0032 BD46     		mov	sp, r7
 2245              		.cfi_def_cfa_register 13
 2246              		@ sp needed
 2247 0034 5DF8047B 		ldr	r7, [sp], #4
 2248              		.cfi_restore 7
 2249              		.cfi_def_cfa_offset 0
 2250 0038 7047     		bx	lr
 2251              	.L130:
 2252 003a 00BF     		.align	2
 2253              	.L129:
 2254 003c 00380240 		.word	1073887232
 2255              		.cfi_endproc
 2256              	.LFE156:
 2258              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 2259              		.align	1
 2260              		.global	RCC_AHB1PeriphResetCmd
 2261              		.syntax unified
 2262              		.thumb
 2263              		.thumb_func
ARM GAS  /tmp/ccz2hB7k.s 			page 80


 2265              	RCC_AHB1PeriphResetCmd:
 2266              	.LFB157:
2283:./Lib/Src/stm32f4xx_rcc.c **** 
2284:./Lib/Src/stm32f4xx_rcc.c **** /**
2285:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
2286:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
2287:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2288:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
2289:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
2290:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
2291:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
2292:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
2293:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
2294:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2295:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
2296:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
2297:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
2298:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
2299:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
2300:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
2301:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
2302:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
2303:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
2304:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
2305:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_RNG:     RNG clock for STM32F410xx devices   
2306:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2307:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2308:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2309:./Lib/Src/stm32f4xx_rcc.c ****   */
2310:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2311:./Lib/Src/stm32f4xx_rcc.c **** {
 2267              		.loc 1 2311 1
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 8
 2270              		@ frame_needed = 1, uses_anonymous_args = 0
 2271              		@ link register save eliminated.
 2272 0000 80B4     		push	{r7}
 2273              		.cfi_def_cfa_offset 4
 2274              		.cfi_offset 7, -4
 2275 0002 83B0     		sub	sp, sp, #12
 2276              		.cfi_def_cfa_offset 16
 2277 0004 00AF     		add	r7, sp, #0
 2278              		.cfi_def_cfa_register 7
 2279 0006 7860     		str	r0, [r7, #4]
 2280 0008 0B46     		mov	r3, r1
 2281 000a FB70     		strb	r3, [r7, #3]
2312:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2313:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
2314:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2315:./Lib/Src/stm32f4xx_rcc.c **** 
2316:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2282              		.loc 1 2316 6
 2283 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2284 000e 002B     		cmp	r3, #0
 2285 0010 06D0     		beq	.L132
2317:./Lib/Src/stm32f4xx_rcc.c ****   {
2318:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
ARM GAS  /tmp/ccz2hB7k.s 			page 81


 2286              		.loc 1 2318 8
 2287 0012 0A4B     		ldr	r3, .L135
 2288 0014 1A69     		ldr	r2, [r3, #16]
 2289 0016 0949     		ldr	r1, .L135
 2290              		.loc 1 2318 19
 2291 0018 7B68     		ldr	r3, [r7, #4]
 2292 001a 1343     		orrs	r3, r3, r2
 2293 001c 0B61     		str	r3, [r1, #16]
2319:./Lib/Src/stm32f4xx_rcc.c ****   }
2320:./Lib/Src/stm32f4xx_rcc.c ****   else
2321:./Lib/Src/stm32f4xx_rcc.c ****   {
2322:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
2323:./Lib/Src/stm32f4xx_rcc.c ****   }
2324:./Lib/Src/stm32f4xx_rcc.c **** }
 2294              		.loc 1 2324 1
 2295 001e 06E0     		b	.L134
 2296              	.L132:
2322:./Lib/Src/stm32f4xx_rcc.c ****   }
 2297              		.loc 1 2322 8
 2298 0020 064B     		ldr	r3, .L135
 2299 0022 1A69     		ldr	r2, [r3, #16]
2322:./Lib/Src/stm32f4xx_rcc.c ****   }
 2300              		.loc 1 2322 22
 2301 0024 7B68     		ldr	r3, [r7, #4]
 2302 0026 DB43     		mvns	r3, r3
2322:./Lib/Src/stm32f4xx_rcc.c ****   }
 2303              		.loc 1 2322 8
 2304 0028 0449     		ldr	r1, .L135
2322:./Lib/Src/stm32f4xx_rcc.c ****   }
 2305              		.loc 1 2322 19
 2306 002a 1340     		ands	r3, r3, r2
 2307 002c 0B61     		str	r3, [r1, #16]
 2308              	.L134:
 2309              		.loc 1 2324 1
 2310 002e 00BF     		nop
 2311 0030 0C37     		adds	r7, r7, #12
 2312              		.cfi_def_cfa_offset 4
 2313 0032 BD46     		mov	sp, r7
 2314              		.cfi_def_cfa_register 13
 2315              		@ sp needed
 2316 0034 5DF8047B 		ldr	r7, [sp], #4
 2317              		.cfi_restore 7
 2318              		.cfi_def_cfa_offset 0
 2319 0038 7047     		bx	lr
 2320              	.L136:
 2321 003a 00BF     		.align	2
 2322              	.L135:
 2323 003c 00380240 		.word	1073887232
 2324              		.cfi_endproc
 2325              	.LFE157:
 2327              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 2328              		.align	1
 2329              		.global	RCC_AHB2PeriphResetCmd
 2330              		.syntax unified
 2331              		.thumb
 2332              		.thumb_func
 2334              	RCC_AHB2PeriphResetCmd:
ARM GAS  /tmp/ccz2hB7k.s 			page 82


 2335              	.LFB158:
2325:./Lib/Src/stm32f4xx_rcc.c **** 
2326:./Lib/Src/stm32f4xx_rcc.c **** /**
2327:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
2328:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
2329:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2330:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2331:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2332:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2333:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock for STM32F40_41xxx/STM32F412xG/STM32F413_423xx
2334:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
2335:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2336:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2337:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2338:./Lib/Src/stm32f4xx_rcc.c ****   */
2339:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2340:./Lib/Src/stm32f4xx_rcc.c **** {
 2336              		.loc 1 2340 1
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 8
 2339              		@ frame_needed = 1, uses_anonymous_args = 0
 2340              		@ link register save eliminated.
 2341 0000 80B4     		push	{r7}
 2342              		.cfi_def_cfa_offset 4
 2343              		.cfi_offset 7, -4
 2344 0002 83B0     		sub	sp, sp, #12
 2345              		.cfi_def_cfa_offset 16
 2346 0004 00AF     		add	r7, sp, #0
 2347              		.cfi_def_cfa_register 7
 2348 0006 7860     		str	r0, [r7, #4]
 2349 0008 0B46     		mov	r3, r1
 2350 000a FB70     		strb	r3, [r7, #3]
2341:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2342:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2343:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2344:./Lib/Src/stm32f4xx_rcc.c **** 
2345:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2351              		.loc 1 2345 6
 2352 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2353 000e 002B     		cmp	r3, #0
 2354 0010 06D0     		beq	.L138
2346:./Lib/Src/stm32f4xx_rcc.c ****   {
2347:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 2355              		.loc 1 2347 8
 2356 0012 0A4B     		ldr	r3, .L141
 2357 0014 5A69     		ldr	r2, [r3, #20]
 2358 0016 0949     		ldr	r1, .L141
 2359              		.loc 1 2347 19
 2360 0018 7B68     		ldr	r3, [r7, #4]
 2361 001a 1343     		orrs	r3, r3, r2
 2362 001c 4B61     		str	r3, [r1, #20]
2348:./Lib/Src/stm32f4xx_rcc.c ****   }
2349:./Lib/Src/stm32f4xx_rcc.c ****   else
2350:./Lib/Src/stm32f4xx_rcc.c ****   {
2351:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
2352:./Lib/Src/stm32f4xx_rcc.c ****   }
2353:./Lib/Src/stm32f4xx_rcc.c **** }
ARM GAS  /tmp/ccz2hB7k.s 			page 83


 2363              		.loc 1 2353 1
 2364 001e 06E0     		b	.L140
 2365              	.L138:
2351:./Lib/Src/stm32f4xx_rcc.c ****   }
 2366              		.loc 1 2351 8
 2367 0020 064B     		ldr	r3, .L141
 2368 0022 5A69     		ldr	r2, [r3, #20]
2351:./Lib/Src/stm32f4xx_rcc.c ****   }
 2369              		.loc 1 2351 22
 2370 0024 7B68     		ldr	r3, [r7, #4]
 2371 0026 DB43     		mvns	r3, r3
2351:./Lib/Src/stm32f4xx_rcc.c ****   }
 2372              		.loc 1 2351 8
 2373 0028 0449     		ldr	r1, .L141
2351:./Lib/Src/stm32f4xx_rcc.c ****   }
 2374              		.loc 1 2351 19
 2375 002a 1340     		ands	r3, r3, r2
 2376 002c 4B61     		str	r3, [r1, #20]
 2377              	.L140:
 2378              		.loc 1 2353 1
 2379 002e 00BF     		nop
 2380 0030 0C37     		adds	r7, r7, #12
 2381              		.cfi_def_cfa_offset 4
 2382 0032 BD46     		mov	sp, r7
 2383              		.cfi_def_cfa_register 13
 2384              		@ sp needed
 2385 0034 5DF8047B 		ldr	r7, [sp], #4
 2386              		.cfi_restore 7
 2387              		.cfi_def_cfa_offset 0
 2388 0038 7047     		bx	lr
 2389              	.L142:
 2390 003a 00BF     		.align	2
 2391              	.L141:
 2392 003c 00380240 		.word	1073887232
 2393              		.cfi_endproc
 2394              	.LFE158:
 2396              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 2397              		.align	1
 2398              		.global	RCC_APB1PeriphResetCmd
 2399              		.syntax unified
 2400              		.thumb
 2401              		.thumb_func
 2403              	RCC_APB1PeriphResetCmd:
 2404              	.LFB159:
2354:./Lib/Src/stm32f4xx_rcc.c **** 
2355:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2356:./Lib/Src/stm32f4xx_rcc.c **** /**
2357:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
2358:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
2359:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2360:./Lib/Src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG, STM32F413_423xx and STM32F4
2361:./Lib/Src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F446xx/STM32F469_479xx devices)
2362:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2363:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2364:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2365:./Lib/Src/stm32f4xx_rcc.c ****   */
2366:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
ARM GAS  /tmp/ccz2hB7k.s 			page 84


2367:./Lib/Src/stm32f4xx_rcc.c **** {
2368:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2369:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2370:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2371:./Lib/Src/stm32f4xx_rcc.c **** 
2372:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2373:./Lib/Src/stm32f4xx_rcc.c ****   {
2374:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
2375:./Lib/Src/stm32f4xx_rcc.c ****   }
2376:./Lib/Src/stm32f4xx_rcc.c ****   else
2377:./Lib/Src/stm32f4xx_rcc.c ****   {
2378:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
2379:./Lib/Src/stm32f4xx_rcc.c ****   }
2380:./Lib/Src/stm32f4xx_rcc.c **** }
2381:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2382:./Lib/Src/stm32f4xx_rcc.c **** 
2383:./Lib/Src/stm32f4xx_rcc.c **** /**
2384:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
2385:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
2386:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2387:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2388:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2389:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2390:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2391:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2392:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2393:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2394:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2395:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2396:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2397:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2398:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2399:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2400:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:  SPDIF RX clock (STM32F446xx devices) 
2401:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2402:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2403:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2404:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2405:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2406:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2407:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2408:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:FMPI2C1 clock
2409:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2410:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2411:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock(STM32F446xx devices)
2412:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2413:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2414:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2415:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
2416:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2417:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2418:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2419:./Lib/Src/stm32f4xx_rcc.c ****   */
2420:./Lib/Src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2421:./Lib/Src/stm32f4xx_rcc.c **** {
 2405              		.loc 1 2421 1
 2406              		.cfi_startproc
ARM GAS  /tmp/ccz2hB7k.s 			page 85


 2407              		@ args = 0, pretend = 0, frame = 8
 2408              		@ frame_needed = 1, uses_anonymous_args = 0
 2409              		@ link register save eliminated.
 2410 0000 80B4     		push	{r7}
 2411              		.cfi_def_cfa_offset 4
 2412              		.cfi_offset 7, -4
 2413 0002 83B0     		sub	sp, sp, #12
 2414              		.cfi_def_cfa_offset 16
 2415 0004 00AF     		add	r7, sp, #0
 2416              		.cfi_def_cfa_register 7
 2417 0006 7860     		str	r0, [r7, #4]
 2418 0008 0B46     		mov	r3, r1
 2419 000a FB70     		strb	r3, [r7, #3]
2422:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2423:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2424:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2425:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2420              		.loc 1 2425 6
 2421 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2422 000e 002B     		cmp	r3, #0
 2423 0010 06D0     		beq	.L144
2426:./Lib/Src/stm32f4xx_rcc.c ****   {
2427:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 2424              		.loc 1 2427 8
 2425 0012 0A4B     		ldr	r3, .L147
 2426 0014 1A6A     		ldr	r2, [r3, #32]
 2427 0016 0949     		ldr	r1, .L147
 2428              		.loc 1 2427 19
 2429 0018 7B68     		ldr	r3, [r7, #4]
 2430 001a 1343     		orrs	r3, r3, r2
 2431 001c 0B62     		str	r3, [r1, #32]
2428:./Lib/Src/stm32f4xx_rcc.c ****   }
2429:./Lib/Src/stm32f4xx_rcc.c ****   else
2430:./Lib/Src/stm32f4xx_rcc.c ****   {
2431:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
2432:./Lib/Src/stm32f4xx_rcc.c ****   }
2433:./Lib/Src/stm32f4xx_rcc.c **** }
 2432              		.loc 1 2433 1
 2433 001e 06E0     		b	.L146
 2434              	.L144:
2431:./Lib/Src/stm32f4xx_rcc.c ****   }
 2435              		.loc 1 2431 8
 2436 0020 064B     		ldr	r3, .L147
 2437 0022 1A6A     		ldr	r2, [r3, #32]
2431:./Lib/Src/stm32f4xx_rcc.c ****   }
 2438              		.loc 1 2431 22
 2439 0024 7B68     		ldr	r3, [r7, #4]
 2440 0026 DB43     		mvns	r3, r3
2431:./Lib/Src/stm32f4xx_rcc.c ****   }
 2441              		.loc 1 2431 8
 2442 0028 0449     		ldr	r1, .L147
2431:./Lib/Src/stm32f4xx_rcc.c ****   }
 2443              		.loc 1 2431 19
 2444 002a 1340     		ands	r3, r3, r2
 2445 002c 0B62     		str	r3, [r1, #32]
 2446              	.L146:
 2447              		.loc 1 2433 1
ARM GAS  /tmp/ccz2hB7k.s 			page 86


 2448 002e 00BF     		nop
 2449 0030 0C37     		adds	r7, r7, #12
 2450              		.cfi_def_cfa_offset 4
 2451 0032 BD46     		mov	sp, r7
 2452              		.cfi_def_cfa_register 13
 2453              		@ sp needed
 2454 0034 5DF8047B 		ldr	r7, [sp], #4
 2455              		.cfi_restore 7
 2456              		.cfi_def_cfa_offset 0
 2457 0038 7047     		bx	lr
 2458              	.L148:
 2459 003a 00BF     		.align	2
 2460              	.L147:
 2461 003c 00380240 		.word	1073887232
 2462              		.cfi_endproc
 2463              	.LFE159:
 2465              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 2466              		.align	1
 2467              		.global	RCC_APB2PeriphResetCmd
 2468              		.syntax unified
 2469              		.thumb
 2470              		.thumb_func
 2472              	RCC_APB2PeriphResetCmd:
 2473              	.LFB160:
2434:./Lib/Src/stm32f4xx_rcc.c **** 
2435:./Lib/Src/stm32f4xx_rcc.c **** /**
2436:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
2437:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
2438:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2439:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2440:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2441:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2442:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2443:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2444:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2445:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2446:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2447:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2448:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
2449:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2450:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2451:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2452:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2453:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2454:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2455:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2456:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices) 
2457:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2458:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2459:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2460:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2461:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2462:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2463:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
2464:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2465:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2466:./Lib/Src/stm32f4xx_rcc.c ****   */
ARM GAS  /tmp/ccz2hB7k.s 			page 87


2467:./Lib/Src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2468:./Lib/Src/stm32f4xx_rcc.c **** {
 2474              		.loc 1 2468 1
 2475              		.cfi_startproc
 2476              		@ args = 0, pretend = 0, frame = 8
 2477              		@ frame_needed = 1, uses_anonymous_args = 0
 2478              		@ link register save eliminated.
 2479 0000 80B4     		push	{r7}
 2480              		.cfi_def_cfa_offset 4
 2481              		.cfi_offset 7, -4
 2482 0002 83B0     		sub	sp, sp, #12
 2483              		.cfi_def_cfa_offset 16
 2484 0004 00AF     		add	r7, sp, #0
 2485              		.cfi_def_cfa_register 7
 2486 0006 7860     		str	r0, [r7, #4]
 2487 0008 0B46     		mov	r3, r1
 2488 000a FB70     		strb	r3, [r7, #3]
2469:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2470:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
2471:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2472:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2489              		.loc 1 2472 6
 2490 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2491 000e 002B     		cmp	r3, #0
 2492 0010 06D0     		beq	.L150
2473:./Lib/Src/stm32f4xx_rcc.c ****   {
2474:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2493              		.loc 1 2474 8
 2494 0012 0A4B     		ldr	r3, .L153
 2495 0014 5A6A     		ldr	r2, [r3, #36]
 2496 0016 0949     		ldr	r1, .L153
 2497              		.loc 1 2474 19
 2498 0018 7B68     		ldr	r3, [r7, #4]
 2499 001a 1343     		orrs	r3, r3, r2
 2500 001c 4B62     		str	r3, [r1, #36]
2475:./Lib/Src/stm32f4xx_rcc.c ****   }
2476:./Lib/Src/stm32f4xx_rcc.c ****   else
2477:./Lib/Src/stm32f4xx_rcc.c ****   {
2478:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
2479:./Lib/Src/stm32f4xx_rcc.c ****   }
2480:./Lib/Src/stm32f4xx_rcc.c **** }
 2501              		.loc 1 2480 1
 2502 001e 06E0     		b	.L152
 2503              	.L150:
2478:./Lib/Src/stm32f4xx_rcc.c ****   }
 2504              		.loc 1 2478 8
 2505 0020 064B     		ldr	r3, .L153
 2506 0022 5A6A     		ldr	r2, [r3, #36]
2478:./Lib/Src/stm32f4xx_rcc.c ****   }
 2507              		.loc 1 2478 22
 2508 0024 7B68     		ldr	r3, [r7, #4]
 2509 0026 DB43     		mvns	r3, r3
2478:./Lib/Src/stm32f4xx_rcc.c ****   }
 2510              		.loc 1 2478 8
 2511 0028 0449     		ldr	r1, .L153
2478:./Lib/Src/stm32f4xx_rcc.c ****   }
 2512              		.loc 1 2478 19
ARM GAS  /tmp/ccz2hB7k.s 			page 88


 2513 002a 1340     		ands	r3, r3, r2
 2514 002c 4B62     		str	r3, [r1, #36]
 2515              	.L152:
 2516              		.loc 1 2480 1
 2517 002e 00BF     		nop
 2518 0030 0C37     		adds	r7, r7, #12
 2519              		.cfi_def_cfa_offset 4
 2520 0032 BD46     		mov	sp, r7
 2521              		.cfi_def_cfa_register 13
 2522              		@ sp needed
 2523 0034 5DF8047B 		ldr	r7, [sp], #4
 2524              		.cfi_restore 7
 2525              		.cfi_def_cfa_offset 0
 2526 0038 7047     		bx	lr
 2527              	.L154:
 2528 003a 00BF     		.align	2
 2529              	.L153:
 2530 003c 00380240 		.word	1073887232
 2531              		.cfi_endproc
 2532              	.LFE160:
 2534              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2535              		.align	1
 2536              		.global	RCC_AHB1PeriphClockLPModeCmd
 2537              		.syntax unified
 2538              		.thumb
 2539              		.thumb_func
 2541              	RCC_AHB1PeriphClockLPModeCmd:
 2542              	.LFB161:
2481:./Lib/Src/stm32f4xx_rcc.c **** 
2482:./Lib/Src/stm32f4xx_rcc.c **** /**
2483:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
2484:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2485:./Lib/Src/stm32f4xx_rcc.c ****   *         power consumption.
2486:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2487:./Lib/Src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2488:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
2489:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2490:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
2491:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
2492:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
2493:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
2494:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
2495:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
2496:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2497:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
2498:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
2499:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
2500:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
2501:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
2502:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
2503:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
2504:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
2505:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
2506:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
2507:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
2508:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
2509:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
ARM GAS  /tmp/ccz2hB7k.s 			page 89


2510:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
2511:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
2512:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2513:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2514:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2515:./Lib/Src/stm32f4xx_rcc.c ****   */
2516:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
2517:./Lib/Src/stm32f4xx_rcc.c **** {
 2543              		.loc 1 2517 1
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 8
 2546              		@ frame_needed = 1, uses_anonymous_args = 0
 2547              		@ link register save eliminated.
 2548 0000 80B4     		push	{r7}
 2549              		.cfi_def_cfa_offset 4
 2550              		.cfi_offset 7, -4
 2551 0002 83B0     		sub	sp, sp, #12
 2552              		.cfi_def_cfa_offset 16
 2553 0004 00AF     		add	r7, sp, #0
 2554              		.cfi_def_cfa_register 7
 2555 0006 7860     		str	r0, [r7, #4]
 2556 0008 0B46     		mov	r3, r1
 2557 000a FB70     		strb	r3, [r7, #3]
2518:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2519:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
2520:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2521:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2558              		.loc 1 2521 6
 2559 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2560 000e 002B     		cmp	r3, #0
 2561 0010 06D0     		beq	.L156
2522:./Lib/Src/stm32f4xx_rcc.c ****   {
2523:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2562              		.loc 1 2523 8
 2563 0012 0A4B     		ldr	r3, .L159
 2564 0014 1A6D     		ldr	r2, [r3, #80]
 2565 0016 0949     		ldr	r1, .L159
 2566              		.loc 1 2523 20
 2567 0018 7B68     		ldr	r3, [r7, #4]
 2568 001a 1343     		orrs	r3, r3, r2
 2569 001c 0B65     		str	r3, [r1, #80]
2524:./Lib/Src/stm32f4xx_rcc.c ****   }
2525:./Lib/Src/stm32f4xx_rcc.c ****   else
2526:./Lib/Src/stm32f4xx_rcc.c ****   {
2527:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
2528:./Lib/Src/stm32f4xx_rcc.c ****   }
2529:./Lib/Src/stm32f4xx_rcc.c **** }
 2570              		.loc 1 2529 1
 2571 001e 06E0     		b	.L158
 2572              	.L156:
2527:./Lib/Src/stm32f4xx_rcc.c ****   }
 2573              		.loc 1 2527 8
 2574 0020 064B     		ldr	r3, .L159
 2575 0022 1A6D     		ldr	r2, [r3, #80]
2527:./Lib/Src/stm32f4xx_rcc.c ****   }
 2576              		.loc 1 2527 23
 2577 0024 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccz2hB7k.s 			page 90


 2578 0026 DB43     		mvns	r3, r3
2527:./Lib/Src/stm32f4xx_rcc.c ****   }
 2579              		.loc 1 2527 8
 2580 0028 0449     		ldr	r1, .L159
2527:./Lib/Src/stm32f4xx_rcc.c ****   }
 2581              		.loc 1 2527 20
 2582 002a 1340     		ands	r3, r3, r2
 2583 002c 0B65     		str	r3, [r1, #80]
 2584              	.L158:
 2585              		.loc 1 2529 1
 2586 002e 00BF     		nop
 2587 0030 0C37     		adds	r7, r7, #12
 2588              		.cfi_def_cfa_offset 4
 2589 0032 BD46     		mov	sp, r7
 2590              		.cfi_def_cfa_register 13
 2591              		@ sp needed
 2592 0034 5DF8047B 		ldr	r7, [sp], #4
 2593              		.cfi_restore 7
 2594              		.cfi_def_cfa_offset 0
 2595 0038 7047     		bx	lr
 2596              	.L160:
 2597 003a 00BF     		.align	2
 2598              	.L159:
 2599 003c 00380240 		.word	1073887232
 2600              		.cfi_endproc
 2601              	.LFE161:
 2603              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2604              		.align	1
 2605              		.global	RCC_AHB2PeriphClockLPModeCmd
 2606              		.syntax unified
 2607              		.thumb
 2608              		.thumb_func
 2610              	RCC_AHB2PeriphClockLPModeCmd:
 2611              	.LFB162:
2530:./Lib/Src/stm32f4xx_rcc.c **** 
2531:./Lib/Src/stm32f4xx_rcc.c **** /**
2532:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
2533:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2534:./Lib/Src/stm32f4xx_rcc.c ****   *           power consumption.
2535:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2536:./Lib/Src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2537:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
2538:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2539:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
2540:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
2541:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
2542:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
2543:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
2544:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2545:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2546:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2547:./Lib/Src/stm32f4xx_rcc.c ****   */
2548:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
2549:./Lib/Src/stm32f4xx_rcc.c **** {
 2612              		.loc 1 2549 1
 2613              		.cfi_startproc
 2614              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccz2hB7k.s 			page 91


 2615              		@ frame_needed = 1, uses_anonymous_args = 0
 2616              		@ link register save eliminated.
 2617 0000 80B4     		push	{r7}
 2618              		.cfi_def_cfa_offset 4
 2619              		.cfi_offset 7, -4
 2620 0002 83B0     		sub	sp, sp, #12
 2621              		.cfi_def_cfa_offset 16
 2622 0004 00AF     		add	r7, sp, #0
 2623              		.cfi_def_cfa_register 7
 2624 0006 7860     		str	r0, [r7, #4]
 2625 0008 0B46     		mov	r3, r1
 2626 000a FB70     		strb	r3, [r7, #3]
2550:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2551:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
2552:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2553:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2627              		.loc 1 2553 6
 2628 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2629 000e 002B     		cmp	r3, #0
 2630 0010 06D0     		beq	.L162
2554:./Lib/Src/stm32f4xx_rcc.c ****   {
2555:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2631              		.loc 1 2555 8
 2632 0012 0A4B     		ldr	r3, .L165
 2633 0014 5A6D     		ldr	r2, [r3, #84]
 2634 0016 0949     		ldr	r1, .L165
 2635              		.loc 1 2555 20
 2636 0018 7B68     		ldr	r3, [r7, #4]
 2637 001a 1343     		orrs	r3, r3, r2
 2638 001c 4B65     		str	r3, [r1, #84]
2556:./Lib/Src/stm32f4xx_rcc.c ****   }
2557:./Lib/Src/stm32f4xx_rcc.c ****   else
2558:./Lib/Src/stm32f4xx_rcc.c ****   {
2559:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
2560:./Lib/Src/stm32f4xx_rcc.c ****   }
2561:./Lib/Src/stm32f4xx_rcc.c **** }
 2639              		.loc 1 2561 1
 2640 001e 06E0     		b	.L164
 2641              	.L162:
2559:./Lib/Src/stm32f4xx_rcc.c ****   }
 2642              		.loc 1 2559 8
 2643 0020 064B     		ldr	r3, .L165
 2644 0022 5A6D     		ldr	r2, [r3, #84]
2559:./Lib/Src/stm32f4xx_rcc.c ****   }
 2645              		.loc 1 2559 23
 2646 0024 7B68     		ldr	r3, [r7, #4]
 2647 0026 DB43     		mvns	r3, r3
2559:./Lib/Src/stm32f4xx_rcc.c ****   }
 2648              		.loc 1 2559 8
 2649 0028 0449     		ldr	r1, .L165
2559:./Lib/Src/stm32f4xx_rcc.c ****   }
 2650              		.loc 1 2559 20
 2651 002a 1340     		ands	r3, r3, r2
 2652 002c 4B65     		str	r3, [r1, #84]
 2653              	.L164:
 2654              		.loc 1 2561 1
 2655 002e 00BF     		nop
ARM GAS  /tmp/ccz2hB7k.s 			page 92


 2656 0030 0C37     		adds	r7, r7, #12
 2657              		.cfi_def_cfa_offset 4
 2658 0032 BD46     		mov	sp, r7
 2659              		.cfi_def_cfa_register 13
 2660              		@ sp needed
 2661 0034 5DF8047B 		ldr	r7, [sp], #4
 2662              		.cfi_restore 7
 2663              		.cfi_def_cfa_offset 0
 2664 0038 7047     		bx	lr
 2665              	.L166:
 2666 003a 00BF     		.align	2
 2667              	.L165:
 2668 003c 00380240 		.word	1073887232
 2669              		.cfi_endproc
 2670              	.LFE162:
 2672              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2673              		.align	1
 2674              		.global	RCC_APB1PeriphClockLPModeCmd
 2675              		.syntax unified
 2676              		.thumb
 2677              		.thumb_func
 2679              	RCC_APB1PeriphClockLPModeCmd:
 2680              	.LFB163:
2562:./Lib/Src/stm32f4xx_rcc.c **** 
2563:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F40_41xxx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F42
2564:./Lib/Src/stm32f4xx_rcc.c **** /**
2565:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
2566:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2567:./Lib/Src/stm32f4xx_rcc.c ****   *         power consumption.
2568:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2569:./Lib/Src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2570:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
2571:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter must be: 
2572:./Lib/Src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_FSMC or RCC_AHB3Periph_FMC (STM32F412xG/STM32F413_423xx/STM32F429x/4
2573:./Lib/Src/stm32f4xx_rcc.c ****   *           - RCC_AHB3Periph_QSPI (STM32F412xG/STM32F413_423xx/STM32F446xx/STM32F469_479xx device
2574:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2575:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2576:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2577:./Lib/Src/stm32f4xx_rcc.c ****   */
2578:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
2579:./Lib/Src/stm32f4xx_rcc.c **** {
2580:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2581:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
2582:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2583:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2584:./Lib/Src/stm32f4xx_rcc.c ****   {
2585:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
2586:./Lib/Src/stm32f4xx_rcc.c ****   }
2587:./Lib/Src/stm32f4xx_rcc.c ****   else
2588:./Lib/Src/stm32f4xx_rcc.c ****   {
2589:./Lib/Src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
2590:./Lib/Src/stm32f4xx_rcc.c ****   }
2591:./Lib/Src/stm32f4xx_rcc.c **** }
2592:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F412xG || STM32F413_423xx || STM32F427_437xx || STM32F429_439xx ||
2593:./Lib/Src/stm32f4xx_rcc.c **** 
2594:./Lib/Src/stm32f4xx_rcc.c **** /**
2595:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
ARM GAS  /tmp/ccz2hB7k.s 			page 93


2596:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2597:./Lib/Src/stm32f4xx_rcc.c ****   *         power consumption.
2598:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2599:./Lib/Src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2600:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
2601:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2602:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
2603:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
2604:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
2605:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
2606:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
2607:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
2608:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
2609:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
2610:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
2611:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_LPTIM1: LPTIM1 clock (STM32F410xx and STM32F413_423xx devices) 
2612:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
2613:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
2614:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
2615:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPDIF:   SPDIF RX clock (STM32F446xx devices) 
2616:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
2617:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
2618:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
2619:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
2620:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
2621:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
2622:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
2623:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_FMPI2C1:   FMPI2C1 clock
2624:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
2625:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
2626:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CEC:    CEC clock (STM32F446xx devices)
2627:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
2628:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
2629:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
2630:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
2631:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2632:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2633:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2634:./Lib/Src/stm32f4xx_rcc.c ****   */
2635:./Lib/Src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
2636:./Lib/Src/stm32f4xx_rcc.c **** {
 2681              		.loc 1 2636 1
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 8
 2684              		@ frame_needed = 1, uses_anonymous_args = 0
 2685              		@ link register save eliminated.
 2686 0000 80B4     		push	{r7}
 2687              		.cfi_def_cfa_offset 4
 2688              		.cfi_offset 7, -4
 2689 0002 83B0     		sub	sp, sp, #12
 2690              		.cfi_def_cfa_offset 16
 2691 0004 00AF     		add	r7, sp, #0
 2692              		.cfi_def_cfa_register 7
 2693 0006 7860     		str	r0, [r7, #4]
 2694 0008 0B46     		mov	r3, r1
 2695 000a FB70     		strb	r3, [r7, #3]
2637:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccz2hB7k.s 			page 94


2638:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
2639:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2640:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2696              		.loc 1 2640 6
 2697 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2698 000e 002B     		cmp	r3, #0
 2699 0010 06D0     		beq	.L168
2641:./Lib/Src/stm32f4xx_rcc.c ****   {
2642:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2700              		.loc 1 2642 8
 2701 0012 0A4B     		ldr	r3, .L171
 2702 0014 1A6E     		ldr	r2, [r3, #96]
 2703 0016 0949     		ldr	r1, .L171
 2704              		.loc 1 2642 20
 2705 0018 7B68     		ldr	r3, [r7, #4]
 2706 001a 1343     		orrs	r3, r3, r2
 2707 001c 0B66     		str	r3, [r1, #96]
2643:./Lib/Src/stm32f4xx_rcc.c ****   }
2644:./Lib/Src/stm32f4xx_rcc.c ****   else
2645:./Lib/Src/stm32f4xx_rcc.c ****   {
2646:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
2647:./Lib/Src/stm32f4xx_rcc.c ****   }
2648:./Lib/Src/stm32f4xx_rcc.c **** }
 2708              		.loc 1 2648 1
 2709 001e 06E0     		b	.L170
 2710              	.L168:
2646:./Lib/Src/stm32f4xx_rcc.c ****   }
 2711              		.loc 1 2646 8
 2712 0020 064B     		ldr	r3, .L171
 2713 0022 1A6E     		ldr	r2, [r3, #96]
2646:./Lib/Src/stm32f4xx_rcc.c ****   }
 2714              		.loc 1 2646 23
 2715 0024 7B68     		ldr	r3, [r7, #4]
 2716 0026 DB43     		mvns	r3, r3
2646:./Lib/Src/stm32f4xx_rcc.c ****   }
 2717              		.loc 1 2646 8
 2718 0028 0449     		ldr	r1, .L171
2646:./Lib/Src/stm32f4xx_rcc.c ****   }
 2719              		.loc 1 2646 20
 2720 002a 1340     		ands	r3, r3, r2
 2721 002c 0B66     		str	r3, [r1, #96]
 2722              	.L170:
 2723              		.loc 1 2648 1
 2724 002e 00BF     		nop
 2725 0030 0C37     		adds	r7, r7, #12
 2726              		.cfi_def_cfa_offset 4
 2727 0032 BD46     		mov	sp, r7
 2728              		.cfi_def_cfa_register 13
 2729              		@ sp needed
 2730 0034 5DF8047B 		ldr	r7, [sp], #4
 2731              		.cfi_restore 7
 2732              		.cfi_def_cfa_offset 0
 2733 0038 7047     		bx	lr
 2734              	.L172:
 2735 003a 00BF     		.align	2
 2736              	.L171:
 2737 003c 00380240 		.word	1073887232
ARM GAS  /tmp/ccz2hB7k.s 			page 95


 2738              		.cfi_endproc
 2739              	.LFE163:
 2741              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2742              		.align	1
 2743              		.global	RCC_APB2PeriphClockLPModeCmd
 2744              		.syntax unified
 2745              		.thumb
 2746              		.thumb_func
 2748              	RCC_APB2PeriphClockLPModeCmd:
 2749              	.LFB164:
2649:./Lib/Src/stm32f4xx_rcc.c **** 
2650:./Lib/Src/stm32f4xx_rcc.c **** /**
2651:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
2652:./Lib/Src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
2653:./Lib/Src/stm32f4xx_rcc.c ****   *         power consumption.
2654:./Lib/Src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
2655:./Lib/Src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
2656:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
2657:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2658:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
2659:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
2660:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
2661:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
2662:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
2663:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
2664:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
2665:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
2666:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
2667:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
2668:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
2669:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_EXTIT:  EXTIIT clock
2670:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
2671:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2672:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2673:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2674:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2675:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx/446xx/469xx/479xx/413_423x
2676:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI2:   SAI2 clock (STM32F446xx devices)
2677:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)
2678:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DSI:    DSI clock (STM32F469_479xx devices)
2679:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM1: DFSDM Clock (STM32F412xG and STM32F413_423xx Devices)
2680:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_DFSDM2: DFSDM2 Clock (STM32F413_423xx Devices)
2681:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART9:  UART9 Clock (STM32F413_423xx Devices)
2682:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_UART10: UART10 Clock (STM32F413_423xx Devices)
2683:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2684:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2685:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2686:./Lib/Src/stm32f4xx_rcc.c ****   */
2687:./Lib/Src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2688:./Lib/Src/stm32f4xx_rcc.c **** {
 2750              		.loc 1 2688 1
 2751              		.cfi_startproc
 2752              		@ args = 0, pretend = 0, frame = 8
 2753              		@ frame_needed = 1, uses_anonymous_args = 0
 2754              		@ link register save eliminated.
 2755 0000 80B4     		push	{r7}
 2756              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccz2hB7k.s 			page 96


 2757              		.cfi_offset 7, -4
 2758 0002 83B0     		sub	sp, sp, #12
 2759              		.cfi_def_cfa_offset 16
 2760 0004 00AF     		add	r7, sp, #0
 2761              		.cfi_def_cfa_register 7
 2762 0006 7860     		str	r0, [r7, #4]
 2763 0008 0B46     		mov	r3, r1
 2764 000a FB70     		strb	r3, [r7, #3]
2689:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2690:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2691:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2692:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2765              		.loc 1 2692 6
 2766 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2767 000e 002B     		cmp	r3, #0
 2768 0010 06D0     		beq	.L174
2693:./Lib/Src/stm32f4xx_rcc.c ****   {
2694:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2769              		.loc 1 2694 8
 2770 0012 0A4B     		ldr	r3, .L177
 2771 0014 5A6E     		ldr	r2, [r3, #100]
 2772 0016 0949     		ldr	r1, .L177
 2773              		.loc 1 2694 20
 2774 0018 7B68     		ldr	r3, [r7, #4]
 2775 001a 1343     		orrs	r3, r3, r2
 2776 001c 4B66     		str	r3, [r1, #100]
2695:./Lib/Src/stm32f4xx_rcc.c ****   }
2696:./Lib/Src/stm32f4xx_rcc.c ****   else
2697:./Lib/Src/stm32f4xx_rcc.c ****   {
2698:./Lib/Src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
2699:./Lib/Src/stm32f4xx_rcc.c ****   }
2700:./Lib/Src/stm32f4xx_rcc.c **** }
 2777              		.loc 1 2700 1
 2778 001e 06E0     		b	.L176
 2779              	.L174:
2698:./Lib/Src/stm32f4xx_rcc.c ****   }
 2780              		.loc 1 2698 8
 2781 0020 064B     		ldr	r3, .L177
 2782 0022 5A6E     		ldr	r2, [r3, #100]
2698:./Lib/Src/stm32f4xx_rcc.c ****   }
 2783              		.loc 1 2698 23
 2784 0024 7B68     		ldr	r3, [r7, #4]
 2785 0026 DB43     		mvns	r3, r3
2698:./Lib/Src/stm32f4xx_rcc.c ****   }
 2786              		.loc 1 2698 8
 2787 0028 0449     		ldr	r1, .L177
2698:./Lib/Src/stm32f4xx_rcc.c ****   }
 2788              		.loc 1 2698 20
 2789 002a 1340     		ands	r3, r3, r2
 2790 002c 4B66     		str	r3, [r1, #100]
 2791              	.L176:
 2792              		.loc 1 2700 1
 2793 002e 00BF     		nop
 2794 0030 0C37     		adds	r7, r7, #12
 2795              		.cfi_def_cfa_offset 4
 2796 0032 BD46     		mov	sp, r7
 2797              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccz2hB7k.s 			page 97


 2798              		@ sp needed
 2799 0034 5DF8047B 		ldr	r7, [sp], #4
 2800              		.cfi_restore 7
 2801              		.cfi_def_cfa_offset 0
 2802 0038 7047     		bx	lr
 2803              	.L178:
 2804 003a 00BF     		.align	2
 2805              	.L177:
 2806 003c 00380240 		.word	1073887232
 2807              		.cfi_endproc
 2808              	.LFE164:
 2810              		.section	.text.RCC_LSEModeConfig,"ax",%progbits
 2811              		.align	1
 2812              		.global	RCC_LSEModeConfig
 2813              		.syntax unified
 2814              		.thumb
 2815              		.thumb_func
 2817              	RCC_LSEModeConfig:
 2818              	.LFB165:
2701:./Lib/Src/stm32f4xx_rcc.c **** 
2702:./Lib/Src/stm32f4xx_rcc.c **** /**
2703:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the External Low Speed oscillator mode (LSE mode).
2704:./Lib/Src/stm32f4xx_rcc.c ****   * @note This mode is only available for STM32F410xx/STM32F411xx/STM32F446xx/STM32F469_479xx devic
2705:./Lib/Src/stm32f4xx_rcc.c ****   * @param  Mode: specifies the LSE mode.
2706:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2707:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode.
2708:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode.
2709:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2710:./Lib/Src/stm32f4xx_rcc.c ****   */
2711:./Lib/Src/stm32f4xx_rcc.c **** void RCC_LSEModeConfig(uint8_t RCC_Mode)
2712:./Lib/Src/stm32f4xx_rcc.c **** {
 2819              		.loc 1 2712 1
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 8
 2822              		@ frame_needed = 1, uses_anonymous_args = 0
 2823              		@ link register save eliminated.
 2824 0000 80B4     		push	{r7}
 2825              		.cfi_def_cfa_offset 4
 2826              		.cfi_offset 7, -4
 2827 0002 83B0     		sub	sp, sp, #12
 2828              		.cfi_def_cfa_offset 16
 2829 0004 00AF     		add	r7, sp, #0
 2830              		.cfi_def_cfa_register 7
 2831 0006 0346     		mov	r3, r0
 2832 0008 FB71     		strb	r3, [r7, #7]
2713:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2714:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE_MODE(RCC_Mode));
2715:./Lib/Src/stm32f4xx_rcc.c ****   
2716:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_Mode == RCC_LSE_HIGHDRIVE_MODE)
 2833              		.loc 1 2716 5
 2834 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2835 000c 012B     		cmp	r3, #1
 2836 000e 06D1     		bne	.L180
2717:./Lib/Src/stm32f4xx_rcc.c ****   {
2718:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
 2837              		.loc 1 2718 5
 2838 0010 094B     		ldr	r3, .L183
ARM GAS  /tmp/ccz2hB7k.s 			page 98


 2839 0012 1B6F     		ldr	r3, [r3, #112]
 2840 0014 084A     		ldr	r2, .L183
 2841 0016 43F00803 		orr	r3, r3, #8
 2842 001a 1367     		str	r3, [r2, #112]
2719:./Lib/Src/stm32f4xx_rcc.c ****   }
2720:./Lib/Src/stm32f4xx_rcc.c ****   else
2721:./Lib/Src/stm32f4xx_rcc.c ****   {
2722:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
2723:./Lib/Src/stm32f4xx_rcc.c ****   }
2724:./Lib/Src/stm32f4xx_rcc.c **** }
 2843              		.loc 1 2724 1
 2844 001c 05E0     		b	.L182
 2845              	.L180:
2722:./Lib/Src/stm32f4xx_rcc.c ****   }
 2846              		.loc 1 2722 5
 2847 001e 064B     		ldr	r3, .L183
 2848 0020 1B6F     		ldr	r3, [r3, #112]
 2849 0022 054A     		ldr	r2, .L183
 2850 0024 23F00803 		bic	r3, r3, #8
 2851 0028 1367     		str	r3, [r2, #112]
 2852              	.L182:
 2853              		.loc 1 2724 1
 2854 002a 00BF     		nop
 2855 002c 0C37     		adds	r7, r7, #12
 2856              		.cfi_def_cfa_offset 4
 2857 002e BD46     		mov	sp, r7
 2858              		.cfi_def_cfa_register 13
 2859              		@ sp needed
 2860 0030 5DF8047B 		ldr	r7, [sp], #4
 2861              		.cfi_restore 7
 2862              		.cfi_def_cfa_offset 0
 2863 0034 7047     		bx	lr
 2864              	.L184:
 2865 0036 00BF     		.align	2
 2866              	.L183:
 2867 0038 00380240 		.word	1073887232
 2868              		.cfi_endproc
 2869              	.LFE165:
 2871              		.section	.text.RCC_ITConfig,"ax",%progbits
 2872              		.align	1
 2873              		.global	RCC_ITConfig
 2874              		.syntax unified
 2875              		.thumb
 2876              		.thumb_func
 2878              	RCC_ITConfig:
 2879              	.LFB166:
2725:./Lib/Src/stm32f4xx_rcc.c **** 
2726:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F413_423xx)
2727:./Lib/Src/stm32f4xx_rcc.c **** /**
2728:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the LPTIM1 clock Source.
2729:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F410xx devices.
2730:./Lib/Src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the LPTIM1 clock Source.
2731:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2732:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_PCLK: LPTIM1 clock from APB1 selected.
2733:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_HSI:  LPTIM1 clock from HSI selected.
2734:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSI:  LPTIM1 clock from LSI selected.
2735:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_LPTIM1CLKSOURCE_LSE:  LPTIM1 clock from LSE selected.
ARM GAS  /tmp/ccz2hB7k.s 			page 99


2736:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2737:./Lib/Src/stm32f4xx_rcc.c ****   */
2738:./Lib/Src/stm32f4xx_rcc.c **** void RCC_LPTIM1ClockSourceConfig(uint32_t RCC_ClockSource)
2739:./Lib/Src/stm32f4xx_rcc.c **** {
2740:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2741:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LPTIM1_CLOCKSOURCE(RCC_ClockSource));
2742:./Lib/Src/stm32f4xx_rcc.c **** 
2743:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear LPTIM1 clock source selection source bits */
2744:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_LPTIM1SEL;
2745:./Lib/Src/stm32f4xx_rcc.c ****   /* Set new LPTIM1 clock source */
2746:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2747:./Lib/Src/stm32f4xx_rcc.c **** }
2748:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F413_423xx */
2749:./Lib/Src/stm32f4xx_rcc.c **** 
2750:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)
2751:./Lib/Src/stm32f4xx_rcc.c **** /**
2752:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the DSI clock Source.
2753:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx devices.
2754:./Lib/Src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the DSI clock Source.
2755:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2756:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PHY: DSI-PHY used as DSI byte lane clock source (usual case).
2757:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_DSICLKSource_PLLR: PLL_R used as DSI byte lane clock source, used in case D
2758:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2759:./Lib/Src/stm32f4xx_rcc.c ****   */
2760:./Lib/Src/stm32f4xx_rcc.c **** void RCC_DSIClockSourceConfig(uint8_t RCC_ClockSource)
2761:./Lib/Src/stm32f4xx_rcc.c **** {
2762:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2763:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_DSI_CLOCKSOURCE(RCC_ClockSource));
2764:./Lib/Src/stm32f4xx_rcc.c ****   
2765:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_DSICLKSource_PLLR)
2766:./Lib/Src/stm32f4xx_rcc.c ****   {
2767:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2768:./Lib/Src/stm32f4xx_rcc.c ****   }
2769:./Lib/Src/stm32f4xx_rcc.c ****   else
2770:./Lib/Src/stm32f4xx_rcc.c ****   {
2771:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_DSISEL);
2772:./Lib/Src/stm32f4xx_rcc.c ****   }
2773:./Lib/Src/stm32f4xx_rcc.c **** }
2774:./Lib/Src/stm32f4xx_rcc.c **** #endif /*  STM32F469_479xx */
2775:./Lib/Src/stm32f4xx_rcc.c **** 
2776:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_4
2777:./Lib/Src/stm32f4xx_rcc.c **** /**
2778:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the 48MHz clock Source.
2779:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx/STM32F469_479xx devices.
2780:./Lib/Src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the 48MHz clock Source.
2781:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2782:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLL: 48MHz from PLL selected.
2783:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_48MHZCLKSource_PLLSAI: 48MHz from PLLSAI selected.
2784:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_CK48CLKSOURCE_PLLI2SQ : 48MHz from PLLI2SQ
2785:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2786:./Lib/Src/stm32f4xx_rcc.c ****   */
2787:./Lib/Src/stm32f4xx_rcc.c **** void RCC_48MHzClockSourceConfig(uint8_t RCC_ClockSource)
2788:./Lib/Src/stm32f4xx_rcc.c **** {
2789:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2790:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_48MHZ_CLOCKSOURCE(RCC_ClockSource));
2791:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx) 
2792:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
ARM GAS  /tmp/ccz2hB7k.s 			page 100


2793:./Lib/Src/stm32f4xx_rcc.c ****   {
2794:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2795:./Lib/Src/stm32f4xx_rcc.c ****   }
2796:./Lib/Src/stm32f4xx_rcc.c ****   else
2797:./Lib/Src/stm32f4xx_rcc.c ****   {
2798:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_CK48MSEL);
2799:./Lib/Src/stm32f4xx_rcc.c ****   }
2800:./Lib/Src/stm32f4xx_rcc.c **** #elif  defined(STM32F446xx)
2801:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_48MHZCLKSource_PLLSAI)
2802:./Lib/Src/stm32f4xx_rcc.c ****   {
2803:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2804:./Lib/Src/stm32f4xx_rcc.c ****   }
2805:./Lib/Src/stm32f4xx_rcc.c ****   else
2806:./Lib/Src/stm32f4xx_rcc.c ****   {
2807:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2808:./Lib/Src/stm32f4xx_rcc.c ****   }
2809:./Lib/Src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx)
2810:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CK48CLKSOURCE_PLLI2SQ)
2811:./Lib/Src/stm32f4xx_rcc.c ****   {
2812:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2813:./Lib/Src/stm32f4xx_rcc.c ****   }
2814:./Lib/Src/stm32f4xx_rcc.c ****   else
2815:./Lib/Src/stm32f4xx_rcc.c ****   {
2816:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CK48MSEL);
2817:./Lib/Src/stm32f4xx_rcc.c ****   }
2818:./Lib/Src/stm32f4xx_rcc.c **** #else
2819:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */  
2820:./Lib/Src/stm32f4xx_rcc.c **** }
2821:./Lib/Src/stm32f4xx_rcc.c **** 
2822:./Lib/Src/stm32f4xx_rcc.c **** /**
2823:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the SDIO clock Source.
2824:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F469_479xx/STM32F446xx devices.
2825:./Lib/Src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SDIO clock Source.
2826:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2827:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_48MHZ: 48MHz clock selected.
2828:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SDIOCLKSource_SYSCLK: system clock selected.
2829:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2830:./Lib/Src/stm32f4xx_rcc.c ****   */
2831:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SDIOClockSourceConfig(uint8_t RCC_ClockSource)
2832:./Lib/Src/stm32f4xx_rcc.c **** {
2833:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2834:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SDIO_CLOCKSOURCE(RCC_ClockSource));
2835:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F469_479xx)   
2836:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2837:./Lib/Src/stm32f4xx_rcc.c ****   {
2838:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2839:./Lib/Src/stm32f4xx_rcc.c ****   }
2840:./Lib/Src/stm32f4xx_rcc.c ****   else
2841:./Lib/Src/stm32f4xx_rcc.c ****   {
2842:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR, RCC_DCKCFGR_SDIOSEL);
2843:./Lib/Src/stm32f4xx_rcc.c ****   }
2844:./Lib/Src/stm32f4xx_rcc.c **** #elif defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
2845:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SDIOCLKSource_SYSCLK)
2846:./Lib/Src/stm32f4xx_rcc.c ****   {
2847:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2848:./Lib/Src/stm32f4xx_rcc.c ****   }
2849:./Lib/Src/stm32f4xx_rcc.c ****   else
ARM GAS  /tmp/ccz2hB7k.s 			page 101


2850:./Lib/Src/stm32f4xx_rcc.c ****   {
2851:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SDIOSEL);
2852:./Lib/Src/stm32f4xx_rcc.c ****   }
2853:./Lib/Src/stm32f4xx_rcc.c **** #else
2854:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F469_479xx */ 
2855:./Lib/Src/stm32f4xx_rcc.c **** }
2856:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx || STM32F469_479xx */
2857:./Lib/Src/stm32f4xx_rcc.c **** 
2858:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F446xx)
2859:./Lib/Src/stm32f4xx_rcc.c **** /**
2860:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 clock gating for the specified IPs.
2861:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2862:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1ClockGating: specifies the AHB1 clock gating.
2863:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2864:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB1Bridge: AHB1 to APB1 clock
2865:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_APB2Bridge: AHB1 to APB2 clock 
2866:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_CM4DBG: Cortex M4 ETM clock
2867:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SPARE: Spare clock
2868:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_SRAM: SRAM controller clock
2869:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_FLITF: Flash interface clock
2870:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1ClockGating_RCC: RCC clock
2871:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2872:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2873:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2874:./Lib/Src/stm32f4xx_rcc.c ****   */
2875:./Lib/Src/stm32f4xx_rcc.c **** void RCC_AHB1ClockGatingCmd(uint32_t RCC_AHB1ClockGating, FunctionalState NewState)
2876:./Lib/Src/stm32f4xx_rcc.c **** {
2877:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2878:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCKGATING(RCC_AHB1ClockGating));
2879:./Lib/Src/stm32f4xx_rcc.c **** 
2880:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2881:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2882:./Lib/Src/stm32f4xx_rcc.c ****   {
2883:./Lib/Src/stm32f4xx_rcc.c ****     RCC->CKGATENR &= ~RCC_AHB1ClockGating;
2884:./Lib/Src/stm32f4xx_rcc.c ****   }
2885:./Lib/Src/stm32f4xx_rcc.c ****   else
2886:./Lib/Src/stm32f4xx_rcc.c ****   {
2887:./Lib/Src/stm32f4xx_rcc.c ****     RCC->CKGATENR |= RCC_AHB1ClockGating;
2888:./Lib/Src/stm32f4xx_rcc.c ****   }
2889:./Lib/Src/stm32f4xx_rcc.c **** }
2890:./Lib/Src/stm32f4xx_rcc.c **** 
2891:./Lib/Src/stm32f4xx_rcc.c **** /**
2892:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the SPDIFRX clock Source.
2893:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2894:./Lib/Src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the SPDIFRX clock Source.
2895:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2896:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLR: SPDIFRX clock from PLL_R selected.
2897:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_SPDIFRXCLKSource_PLLI2SP: SPDIFRX clock from PLLI2S_P selected.
2898:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2899:./Lib/Src/stm32f4xx_rcc.c ****   */
2900:./Lib/Src/stm32f4xx_rcc.c **** void RCC_SPDIFRXClockSourceConfig(uint8_t RCC_ClockSource)
2901:./Lib/Src/stm32f4xx_rcc.c **** {
2902:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2903:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SPDIFRX_CLOCKSOURCE(RCC_ClockSource));
2904:./Lib/Src/stm32f4xx_rcc.c ****   
2905:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_SPDIFRXCLKSource_PLLI2SP)
2906:./Lib/Src/stm32f4xx_rcc.c ****   {
ARM GAS  /tmp/ccz2hB7k.s 			page 102


2907:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2908:./Lib/Src/stm32f4xx_rcc.c ****   }
2909:./Lib/Src/stm32f4xx_rcc.c ****   else
2910:./Lib/Src/stm32f4xx_rcc.c ****   {
2911:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_SPDIFRXSEL);
2912:./Lib/Src/stm32f4xx_rcc.c ****   }
2913:./Lib/Src/stm32f4xx_rcc.c **** }
2914:./Lib/Src/stm32f4xx_rcc.c **** 
2915:./Lib/Src/stm32f4xx_rcc.c **** /**
2916:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the CEC clock Source.
2917:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2918:./Lib/Src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the CEC clock Source.
2919:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2920:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_HSIDiv488: CEC clock from HSI/488 selected.
2921:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_CECCLKSource_LSE: CEC clock from LSE selected.
2922:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2923:./Lib/Src/stm32f4xx_rcc.c ****   */
2924:./Lib/Src/stm32f4xx_rcc.c **** void RCC_CECClockSourceConfig(uint8_t RCC_ClockSource)
2925:./Lib/Src/stm32f4xx_rcc.c **** {
2926:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2927:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CEC_CLOCKSOURCE(RCC_ClockSource));
2928:./Lib/Src/stm32f4xx_rcc.c ****   
2929:./Lib/Src/stm32f4xx_rcc.c ****   if(RCC_ClockSource == RCC_CECCLKSource_LSE)
2930:./Lib/Src/stm32f4xx_rcc.c ****   {
2931:./Lib/Src/stm32f4xx_rcc.c ****     SET_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2932:./Lib/Src/stm32f4xx_rcc.c ****   }
2933:./Lib/Src/stm32f4xx_rcc.c ****   else
2934:./Lib/Src/stm32f4xx_rcc.c ****   {
2935:./Lib/Src/stm32f4xx_rcc.c ****     CLEAR_BIT(RCC->DCKCFGR2, RCC_DCKCFGR2_CECSEL);
2936:./Lib/Src/stm32f4xx_rcc.c ****   }
2937:./Lib/Src/stm32f4xx_rcc.c **** }
2938:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F446xx */
2939:./Lib/Src/stm32f4xx_rcc.c **** 
2940:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx
2941:./Lib/Src/stm32f4xx_rcc.c **** /**
2942:./Lib/Src/stm32f4xx_rcc.c ****   * @brief Configures the FMPI2C1 clock Source.
2943:./Lib/Src/stm32f4xx_rcc.c ****   * @note This feature is only available for STM32F446xx devices.
2944:./Lib/Src/stm32f4xx_rcc.c ****   * @param RCC_ClockSource: specifies the FMPI2C1 clock Source.
2945:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2946:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_APB1: FMPI2C1 clock from APB1 selected.
2947:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_SYSCLK: FMPI2C1 clock from Sytem clock selected.
2948:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FMPI2C1CLKSource_HSI: FMPI2C1 clock from HSI selected.
2949:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2950:./Lib/Src/stm32f4xx_rcc.c ****   */
2951:./Lib/Src/stm32f4xx_rcc.c **** void RCC_FMPI2C1ClockSourceConfig(uint32_t RCC_ClockSource)
2952:./Lib/Src/stm32f4xx_rcc.c **** {
2953:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2954:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FMPI2C1_CLOCKSOURCE(RCC_ClockSource));
2955:./Lib/Src/stm32f4xx_rcc.c **** 
2956:./Lib/Src/stm32f4xx_rcc.c ****   /* Clear FMPI2C1 clock source selection source bits */
2957:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_FMPI2C1SEL;
2958:./Lib/Src/stm32f4xx_rcc.c ****   /* Set new FMPI2C1 clock source */
2959:./Lib/Src/stm32f4xx_rcc.c ****   RCC->DCKCFGR2 |= RCC_ClockSource;
2960:./Lib/Src/stm32f4xx_rcc.c **** }
2961:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx || STM32F412xG || STM32F413_423xx || STM32F446xx */
2962:./Lib/Src/stm32f4xx_rcc.c **** /**
2963:./Lib/Src/stm32f4xx_rcc.c ****   * @}
ARM GAS  /tmp/ccz2hB7k.s 			page 103


2964:./Lib/Src/stm32f4xx_rcc.c ****   */
2965:./Lib/Src/stm32f4xx_rcc.c **** 
2966:./Lib/Src/stm32f4xx_rcc.c **** #if defined(STM32F410xx)
2967:./Lib/Src/stm32f4xx_rcc.c **** /**
2968:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO1.
2969:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO1.
2970:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2971:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2972:./Lib/Src/stm32f4xx_rcc.c ****   */
2973:./Lib/Src/stm32f4xx_rcc.c **** void RCC_MCO1Cmd(FunctionalState NewState)
2974:./Lib/Src/stm32f4xx_rcc.c **** {
2975:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2976:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2977:./Lib/Src/stm32f4xx_rcc.c **** 
2978:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO1EN_BB = (uint32_t)NewState;
2979:./Lib/Src/stm32f4xx_rcc.c **** }
2980:./Lib/Src/stm32f4xx_rcc.c **** 
2981:./Lib/Src/stm32f4xx_rcc.c **** /**
2982:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the MCO2.
2983:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the MCO2.
2984:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2985:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
2986:./Lib/Src/stm32f4xx_rcc.c ****   */
2987:./Lib/Src/stm32f4xx_rcc.c **** void RCC_MCO2Cmd(FunctionalState NewState)
2988:./Lib/Src/stm32f4xx_rcc.c **** {
2989:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
2990:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2991:./Lib/Src/stm32f4xx_rcc.c **** 
2992:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) RCC_CFGR_MCO2EN_BB = (uint32_t)NewState;
2993:./Lib/Src/stm32f4xx_rcc.c **** }
2994:./Lib/Src/stm32f4xx_rcc.c **** #endif /* STM32F410xx */
2995:./Lib/Src/stm32f4xx_rcc.c **** 
2996:./Lib/Src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2997:./Lib/Src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2998:./Lib/Src/stm32f4xx_rcc.c ****  *
2999:./Lib/Src/stm32f4xx_rcc.c **** @verbatim   
3000:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================
3001:./Lib/Src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
3002:./Lib/Src/stm32f4xx_rcc.c ****  ===============================================================================  
3003:./Lib/Src/stm32f4xx_rcc.c **** 
3004:./Lib/Src/stm32f4xx_rcc.c **** @endverbatim
3005:./Lib/Src/stm32f4xx_rcc.c ****   * @{
3006:./Lib/Src/stm32f4xx_rcc.c ****   */
3007:./Lib/Src/stm32f4xx_rcc.c **** 
3008:./Lib/Src/stm32f4xx_rcc.c **** /**
3009:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
3010:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
3011:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3012:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3013:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3014:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3015:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3016:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3017:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3018:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3019:./Lib/Src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
3020:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccz2hB7k.s 			page 104


3021:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
3022:./Lib/Src/stm32f4xx_rcc.c ****   */
3023:./Lib/Src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
3024:./Lib/Src/stm32f4xx_rcc.c **** {
 2880              		.loc 1 3024 1
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 8
 2883              		@ frame_needed = 1, uses_anonymous_args = 0
 2884              		@ link register save eliminated.
 2885 0000 80B4     		push	{r7}
 2886              		.cfi_def_cfa_offset 4
 2887              		.cfi_offset 7, -4
 2888 0002 83B0     		sub	sp, sp, #12
 2889              		.cfi_def_cfa_offset 16
 2890 0004 00AF     		add	r7, sp, #0
 2891              		.cfi_def_cfa_register 7
 2892 0006 0346     		mov	r3, r0
 2893 0008 0A46     		mov	r2, r1
 2894 000a FB71     		strb	r3, [r7, #7]
 2895 000c 1346     		mov	r3, r2
 2896 000e BB71     		strb	r3, [r7, #6]
3025:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
3026:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
3027:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
3028:./Lib/Src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2897              		.loc 1 3028 6
 2898 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2899 0012 002B     		cmp	r3, #0
 2900 0014 08D0     		beq	.L186
3029:./Lib/Src/stm32f4xx_rcc.c ****   {
3030:./Lib/Src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
3031:./Lib/Src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2901              		.loc 1 3031 5
 2902 0016 0C4B     		ldr	r3, .L189
 2903 0018 1B78     		ldrb	r3, [r3]
 2904 001a DAB2     		uxtb	r2, r3
 2905 001c 0A49     		ldr	r1, .L189
 2906              		.loc 1 3031 41
 2907 001e FB79     		ldrb	r3, [r7, #7]
 2908 0020 1343     		orrs	r3, r3, r2
 2909 0022 DBB2     		uxtb	r3, r3
 2910 0024 0B70     		strb	r3, [r1]
3032:./Lib/Src/stm32f4xx_rcc.c ****   }
3033:./Lib/Src/stm32f4xx_rcc.c ****   else
3034:./Lib/Src/stm32f4xx_rcc.c ****   {
3035:./Lib/Src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
3036:./Lib/Src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
3037:./Lib/Src/stm32f4xx_rcc.c ****   }
3038:./Lib/Src/stm32f4xx_rcc.c **** }
 2911              		.loc 1 3038 1
 2912 0026 09E0     		b	.L188
 2913              	.L186:
3036:./Lib/Src/stm32f4xx_rcc.c ****   }
 2914              		.loc 1 3036 5
 2915 0028 074B     		ldr	r3, .L189
 2916 002a 1B78     		ldrb	r3, [r3]
 2917 002c DAB2     		uxtb	r2, r3
ARM GAS  /tmp/ccz2hB7k.s 			page 105


3036:./Lib/Src/stm32f4xx_rcc.c ****   }
 2918              		.loc 1 3036 44
 2919 002e FB79     		ldrb	r3, [r7, #7]
 2920 0030 DB43     		mvns	r3, r3
 2921 0032 DBB2     		uxtb	r3, r3
3036:./Lib/Src/stm32f4xx_rcc.c ****   }
 2922              		.loc 1 3036 5
 2923 0034 0449     		ldr	r1, .L189
3036:./Lib/Src/stm32f4xx_rcc.c ****   }
 2924              		.loc 1 3036 41
 2925 0036 1340     		ands	r3, r3, r2
 2926 0038 DBB2     		uxtb	r3, r3
 2927 003a 0B70     		strb	r3, [r1]
 2928              	.L188:
 2929              		.loc 1 3038 1
 2930 003c 00BF     		nop
 2931 003e 0C37     		adds	r7, r7, #12
 2932              		.cfi_def_cfa_offset 4
 2933 0040 BD46     		mov	sp, r7
 2934              		.cfi_def_cfa_register 13
 2935              		@ sp needed
 2936 0042 5DF8047B 		ldr	r7, [sp], #4
 2937              		.cfi_restore 7
 2938              		.cfi_def_cfa_offset 0
 2939 0046 7047     		bx	lr
 2940              	.L190:
 2941              		.align	2
 2942              	.L189:
 2943 0048 0D380240 		.word	1073887245
 2944              		.cfi_endproc
 2945              	.LFE166:
 2947              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2948              		.align	1
 2949              		.global	RCC_GetFlagStatus
 2950              		.syntax unified
 2951              		.thumb
 2952              		.thumb_func
 2954              	RCC_GetFlagStatus:
 2955              	.LFB167:
3039:./Lib/Src/stm32f4xx_rcc.c **** 
3040:./Lib/Src/stm32f4xx_rcc.c **** /**
3041:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
3042:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
3043:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3044:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
3045:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
3046:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
3047:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
3048:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx/446xx/469xx/
3049:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
3050:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
3051:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
3052:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
3053:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
3054:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
3055:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
3056:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
ARM GAS  /tmp/ccz2hB7k.s 			page 106


3057:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
3058:./Lib/Src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
3059:./Lib/Src/stm32f4xx_rcc.c ****   */
3060:./Lib/Src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
3061:./Lib/Src/stm32f4xx_rcc.c **** {
 2956              		.loc 1 3061 1
 2957              		.cfi_startproc
 2958              		@ args = 0, pretend = 0, frame = 24
 2959              		@ frame_needed = 1, uses_anonymous_args = 0
 2960              		@ link register save eliminated.
 2961 0000 80B4     		push	{r7}
 2962              		.cfi_def_cfa_offset 4
 2963              		.cfi_offset 7, -4
 2964 0002 87B0     		sub	sp, sp, #28
 2965              		.cfi_def_cfa_offset 32
 2966 0004 00AF     		add	r7, sp, #0
 2967              		.cfi_def_cfa_register 7
 2968 0006 0346     		mov	r3, r0
 2969 0008 FB71     		strb	r3, [r7, #7]
3062:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2970              		.loc 1 3062 12
 2971 000a 0023     		movs	r3, #0
 2972 000c FB60     		str	r3, [r7, #12]
3063:./Lib/Src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2973              		.loc 1 3063 12
 2974 000e 0023     		movs	r3, #0
 2975 0010 7B61     		str	r3, [r7, #20]
3064:./Lib/Src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2976              		.loc 1 3064 14
 2977 0012 0023     		movs	r3, #0
 2978 0014 FB74     		strb	r3, [r7, #19]
3065:./Lib/Src/stm32f4xx_rcc.c **** 
3066:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
3067:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
3068:./Lib/Src/stm32f4xx_rcc.c **** 
3069:./Lib/Src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
3070:./Lib/Src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2979              		.loc 1 3070 18
 2980 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2981 0018 5B09     		lsrs	r3, r3, #5
 2982 001a DBB2     		uxtb	r3, r3
 2983              		.loc 1 3070 7
 2984 001c FB60     		str	r3, [r7, #12]
3071:./Lib/Src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2985              		.loc 1 3071 6
 2986 001e FB68     		ldr	r3, [r7, #12]
 2987 0020 012B     		cmp	r3, #1
 2988 0022 03D1     		bne	.L192
3072:./Lib/Src/stm32f4xx_rcc.c ****   {
3073:./Lib/Src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2989              		.loc 1 3073 20
 2990 0024 124B     		ldr	r3, .L198
 2991              		.loc 1 3073 15
 2992 0026 1B68     		ldr	r3, [r3]
 2993 0028 7B61     		str	r3, [r7, #20]
 2994 002a 09E0     		b	.L193
 2995              	.L192:
ARM GAS  /tmp/ccz2hB7k.s 			page 107


3074:./Lib/Src/stm32f4xx_rcc.c ****   }
3075:./Lib/Src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2996              		.loc 1 3075 11
 2997 002c FB68     		ldr	r3, [r7, #12]
 2998 002e 022B     		cmp	r3, #2
 2999 0030 03D1     		bne	.L194
3076:./Lib/Src/stm32f4xx_rcc.c ****   {
3077:./Lib/Src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 3000              		.loc 1 3077 20
 3001 0032 0F4B     		ldr	r3, .L198
 3002              		.loc 1 3077 15
 3003 0034 1B6F     		ldr	r3, [r3, #112]
 3004 0036 7B61     		str	r3, [r7, #20]
 3005 0038 02E0     		b	.L193
 3006              	.L194:
3078:./Lib/Src/stm32f4xx_rcc.c ****   }
3079:./Lib/Src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
3080:./Lib/Src/stm32f4xx_rcc.c ****   {
3081:./Lib/Src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 3007              		.loc 1 3081 20
 3008 003a 0D4B     		ldr	r3, .L198
 3009              		.loc 1 3081 15
 3010 003c 5B6F     		ldr	r3, [r3, #116]
 3011 003e 7B61     		str	r3, [r7, #20]
 3012              	.L193:
3082:./Lib/Src/stm32f4xx_rcc.c ****   }
3083:./Lib/Src/stm32f4xx_rcc.c **** 
3084:./Lib/Src/stm32f4xx_rcc.c ****   /* Get the flag position */
3085:./Lib/Src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 3013              		.loc 1 3085 18
 3014 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3015              		.loc 1 3085 7
 3016 0042 03F01F03 		and	r3, r3, #31
 3017 0046 FB60     		str	r3, [r7, #12]
3086:./Lib/Src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 3018              		.loc 1 3086 42
 3019 0048 7A69     		ldr	r2, [r7, #20]
 3020 004a FB68     		ldr	r3, [r7, #12]
 3021 004c 22FA03F3 		lsr	r3, r2, r3
 3022 0050 03F00103 		and	r3, r3, #1
 3023              		.loc 1 3086 6
 3024 0054 002B     		cmp	r3, #0
 3025 0056 02D0     		beq	.L195
3087:./Lib/Src/stm32f4xx_rcc.c ****   {
3088:./Lib/Src/stm32f4xx_rcc.c ****     bitstatus = SET;
 3026              		.loc 1 3088 15
 3027 0058 0123     		movs	r3, #1
 3028 005a FB74     		strb	r3, [r7, #19]
 3029 005c 01E0     		b	.L196
 3030              	.L195:
3089:./Lib/Src/stm32f4xx_rcc.c ****   }
3090:./Lib/Src/stm32f4xx_rcc.c ****   else
3091:./Lib/Src/stm32f4xx_rcc.c ****   {
3092:./Lib/Src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 3031              		.loc 1 3092 15
 3032 005e 0023     		movs	r3, #0
 3033 0060 FB74     		strb	r3, [r7, #19]
ARM GAS  /tmp/ccz2hB7k.s 			page 108


 3034              	.L196:
3093:./Lib/Src/stm32f4xx_rcc.c ****   }
3094:./Lib/Src/stm32f4xx_rcc.c ****   /* Return the flag status */
3095:./Lib/Src/stm32f4xx_rcc.c ****   return bitstatus;
 3035              		.loc 1 3095 10
 3036 0062 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
3096:./Lib/Src/stm32f4xx_rcc.c **** }
 3037              		.loc 1 3096 1
 3038 0064 1846     		mov	r0, r3
 3039 0066 1C37     		adds	r7, r7, #28
 3040              		.cfi_def_cfa_offset 4
 3041 0068 BD46     		mov	sp, r7
 3042              		.cfi_def_cfa_register 13
 3043              		@ sp needed
 3044 006a 5DF8047B 		ldr	r7, [sp], #4
 3045              		.cfi_restore 7
 3046              		.cfi_def_cfa_offset 0
 3047 006e 7047     		bx	lr
 3048              	.L199:
 3049              		.align	2
 3050              	.L198:
 3051 0070 00380240 		.word	1073887232
 3052              		.cfi_endproc
 3053              	.LFE167:
 3055              		.section	.text.RCC_ClearFlag,"ax",%progbits
 3056              		.align	1
 3057              		.global	RCC_ClearFlag
 3058              		.syntax unified
 3059              		.thumb
 3060              		.thumb_func
 3062              	RCC_ClearFlag:
 3063              	.LFB168:
3097:./Lib/Src/stm32f4xx_rcc.c **** 
3098:./Lib/Src/stm32f4xx_rcc.c **** /**
3099:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
3100:./Lib/Src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
3101:./Lib/Src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
3102:./Lib/Src/stm32f4xx_rcc.c ****   * @param  None
3103:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
3104:./Lib/Src/stm32f4xx_rcc.c ****   */
3105:./Lib/Src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
3106:./Lib/Src/stm32f4xx_rcc.c **** {
 3064              		.loc 1 3106 1
 3065              		.cfi_startproc
 3066              		@ args = 0, pretend = 0, frame = 0
 3067              		@ frame_needed = 1, uses_anonymous_args = 0
 3068              		@ link register save eliminated.
 3069 0000 80B4     		push	{r7}
 3070              		.cfi_def_cfa_offset 4
 3071              		.cfi_offset 7, -4
 3072 0002 00AF     		add	r7, sp, #0
 3073              		.cfi_def_cfa_register 7
3107:./Lib/Src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
3108:./Lib/Src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 3074              		.loc 1 3108 6
 3075 0004 054B     		ldr	r3, .L201
 3076 0006 5B6F     		ldr	r3, [r3, #116]
ARM GAS  /tmp/ccz2hB7k.s 			page 109


 3077 0008 044A     		ldr	r2, .L201
 3078              		.loc 1 3108 12
 3079 000a 43F08073 		orr	r3, r3, #16777216
 3080 000e 5367     		str	r3, [r2, #116]
3109:./Lib/Src/stm32f4xx_rcc.c **** }
 3081              		.loc 1 3109 1
 3082 0010 00BF     		nop
 3083 0012 BD46     		mov	sp, r7
 3084              		.cfi_def_cfa_register 13
 3085              		@ sp needed
 3086 0014 5DF8047B 		ldr	r7, [sp], #4
 3087              		.cfi_restore 7
 3088              		.cfi_def_cfa_offset 0
 3089 0018 7047     		bx	lr
 3090              	.L202:
 3091 001a 00BF     		.align	2
 3092              	.L201:
 3093 001c 00380240 		.word	1073887232
 3094              		.cfi_endproc
 3095              	.LFE168:
 3097              		.section	.text.RCC_GetITStatus,"ax",%progbits
 3098              		.align	1
 3099              		.global	RCC_GetITStatus
 3100              		.syntax unified
 3101              		.thumb
 3102              		.thumb_func
 3104              	RCC_GetITStatus:
 3105              	.LFB169:
3110:./Lib/Src/stm32f4xx_rcc.c **** 
3111:./Lib/Src/stm32f4xx_rcc.c **** /**
3112:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
3113:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
3114:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
3115:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3116:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3117:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3118:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3119:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3120:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
3121:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx/446x
3122:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3123:./Lib/Src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
3124:./Lib/Src/stm32f4xx_rcc.c ****   */
3125:./Lib/Src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
3126:./Lib/Src/stm32f4xx_rcc.c **** {
 3106              		.loc 1 3126 1
 3107              		.cfi_startproc
 3108              		@ args = 0, pretend = 0, frame = 16
 3109              		@ frame_needed = 1, uses_anonymous_args = 0
 3110              		@ link register save eliminated.
 3111 0000 80B4     		push	{r7}
 3112              		.cfi_def_cfa_offset 4
 3113              		.cfi_offset 7, -4
 3114 0002 85B0     		sub	sp, sp, #20
 3115              		.cfi_def_cfa_offset 24
 3116 0004 00AF     		add	r7, sp, #0
 3117              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccz2hB7k.s 			page 110


 3118 0006 0346     		mov	r3, r0
 3119 0008 FB71     		strb	r3, [r7, #7]
3127:./Lib/Src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 3120              		.loc 1 3127 12
 3121 000a 0023     		movs	r3, #0
 3122 000c FB73     		strb	r3, [r7, #15]
3128:./Lib/Src/stm32f4xx_rcc.c **** 
3129:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
3130:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
3131:./Lib/Src/stm32f4xx_rcc.c **** 
3132:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
3133:./Lib/Src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 3123              		.loc 1 3133 11
 3124 000e 094B     		ldr	r3, .L207
 3125 0010 DA68     		ldr	r2, [r3, #12]
 3126              		.loc 1 3133 17
 3127 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3128 0014 1340     		ands	r3, r3, r2
 3129              		.loc 1 3133 6
 3130 0016 002B     		cmp	r3, #0
 3131 0018 02D0     		beq	.L204
3134:./Lib/Src/stm32f4xx_rcc.c ****   {
3135:./Lib/Src/stm32f4xx_rcc.c ****     bitstatus = SET;
 3132              		.loc 1 3135 15
 3133 001a 0123     		movs	r3, #1
 3134 001c FB73     		strb	r3, [r7, #15]
 3135 001e 01E0     		b	.L205
 3136              	.L204:
3136:./Lib/Src/stm32f4xx_rcc.c ****   }
3137:./Lib/Src/stm32f4xx_rcc.c ****   else
3138:./Lib/Src/stm32f4xx_rcc.c ****   {
3139:./Lib/Src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 3137              		.loc 1 3139 15
 3138 0020 0023     		movs	r3, #0
 3139 0022 FB73     		strb	r3, [r7, #15]
 3140              	.L205:
3140:./Lib/Src/stm32f4xx_rcc.c ****   }
3141:./Lib/Src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
3142:./Lib/Src/stm32f4xx_rcc.c ****   return  bitstatus;
 3141              		.loc 1 3142 11
 3142 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
3143:./Lib/Src/stm32f4xx_rcc.c **** }
 3143              		.loc 1 3143 1
 3144 0026 1846     		mov	r0, r3
 3145 0028 1437     		adds	r7, r7, #20
 3146              		.cfi_def_cfa_offset 4
 3147 002a BD46     		mov	sp, r7
 3148              		.cfi_def_cfa_register 13
 3149              		@ sp needed
 3150 002c 5DF8047B 		ldr	r7, [sp], #4
 3151              		.cfi_restore 7
 3152              		.cfi_def_cfa_offset 0
 3153 0030 7047     		bx	lr
 3154              	.L208:
 3155 0032 00BF     		.align	2
 3156              	.L207:
 3157 0034 00380240 		.word	1073887232
ARM GAS  /tmp/ccz2hB7k.s 			page 111


 3158              		.cfi_endproc
 3159              	.LFE169:
 3161              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 3162              		.align	1
 3163              		.global	RCC_ClearITPendingBit
 3164              		.syntax unified
 3165              		.thumb
 3166              		.thumb_func
 3168              	RCC_ClearITPendingBit:
 3169              	.LFB170:
3144:./Lib/Src/stm32f4xx_rcc.c **** 
3145:./Lib/Src/stm32f4xx_rcc.c **** /**
3146:./Lib/Src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
3147:./Lib/Src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
3148:./Lib/Src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
3149:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
3150:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
3151:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
3152:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
3153:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
3154:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
3155:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx/446xx/469x
3156:./Lib/Src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
3157:./Lib/Src/stm32f4xx_rcc.c ****   * @retval None
3158:./Lib/Src/stm32f4xx_rcc.c ****   */
3159:./Lib/Src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
3160:./Lib/Src/stm32f4xx_rcc.c **** {
 3170              		.loc 1 3160 1
 3171              		.cfi_startproc
 3172              		@ args = 0, pretend = 0, frame = 8
 3173              		@ frame_needed = 1, uses_anonymous_args = 0
 3174              		@ link register save eliminated.
 3175 0000 80B4     		push	{r7}
 3176              		.cfi_def_cfa_offset 4
 3177              		.cfi_offset 7, -4
 3178 0002 83B0     		sub	sp, sp, #12
 3179              		.cfi_def_cfa_offset 16
 3180 0004 00AF     		add	r7, sp, #0
 3181              		.cfi_def_cfa_register 7
 3182 0006 0346     		mov	r3, r0
 3183 0008 FB71     		strb	r3, [r7, #7]
3161:./Lib/Src/stm32f4xx_rcc.c ****   /* Check the parameters */
3162:./Lib/Src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
3163:./Lib/Src/stm32f4xx_rcc.c **** 
3164:./Lib/Src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
3165:./Lib/Src/stm32f4xx_rcc.c ****      pending bits */
3166:./Lib/Src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 3184              		.loc 1 3166 3
 3185 000a 044A     		ldr	r2, .L210
 3186              		.loc 1 3166 39
 3187 000c FB79     		ldrb	r3, [r7, #7]
 3188 000e 1370     		strb	r3, [r2]
3167:./Lib/Src/stm32f4xx_rcc.c **** }
 3189              		.loc 1 3167 1
 3190 0010 00BF     		nop
 3191 0012 0C37     		adds	r7, r7, #12
 3192              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccz2hB7k.s 			page 112


 3193 0014 BD46     		mov	sp, r7
 3194              		.cfi_def_cfa_register 13
 3195              		@ sp needed
 3196 0016 5DF8047B 		ldr	r7, [sp], #4
 3197              		.cfi_restore 7
 3198              		.cfi_def_cfa_offset 0
 3199 001a 7047     		bx	lr
 3200              	.L211:
 3201              		.align	2
 3202              	.L210:
 3203 001c 0E380240 		.word	1073887246
 3204              		.cfi_endproc
 3205              	.LFE170:
 3207              		.text
 3208              	.Letext0:
 3209              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 3210              		.file 3 "./Start/stm32f4xx.h"
 3211              		.file 4 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccz2hB7k.s 			page 113


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/ccz2hB7k.s:21     .data.APBAHBPrescTable:0000000000000000 $d
     /tmp/ccz2hB7k.s:24     .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
     /tmp/ccz2hB7k.s:28     .text.RCC_DeInit:0000000000000000 $t
     /tmp/ccz2hB7k.s:34     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/ccz2hB7k.s:105    .text.RCC_DeInit:0000000000000058 $d
     /tmp/ccz2hB7k.s:112    .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:118    .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/ccz2hB7k.s:158    .text.RCC_HSEConfig:0000000000000024 $d
     /tmp/ccz2hB7k.s:163    .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/ccz2hB7k.s:169    .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/ccz2hB7k.s:2954   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/ccz2hB7k.s:242    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/ccz2hB7k.s:248    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/ccz2hB7k.s:303    .text.RCC_AdjustHSICalibrationValue:0000000000000038 $d
     /tmp/ccz2hB7k.s:308    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:314    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/ccz2hB7k.s:350    .text.RCC_HSICmd:000000000000001c $d
     /tmp/ccz2hB7k.s:355    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:361    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/ccz2hB7k.s:426    .text.RCC_LSEConfig:0000000000000040 $d
     /tmp/ccz2hB7k.s:431    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:437    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/ccz2hB7k.s:473    .text.RCC_LSICmd:000000000000001c $d
     /tmp/ccz2hB7k.s:478    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:484    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/ccz2hB7k.s:543    .text.RCC_PLLConfig:000000000000003c $d
     /tmp/ccz2hB7k.s:548    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:554    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/ccz2hB7k.s:590    .text.RCC_PLLCmd:000000000000001c $d
     /tmp/ccz2hB7k.s:595    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:601    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/ccz2hB7k.s:643    .text.RCC_PLLI2SConfig:0000000000000028 $d
     /tmp/ccz2hB7k.s:648    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:654    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/ccz2hB7k.s:690    .text.RCC_PLLI2SCmd:000000000000001c $d
     /tmp/ccz2hB7k.s:695    .text.RCC_PLLSAIConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:701    .text.RCC_PLLSAIConfig:0000000000000000 RCC_PLLSAIConfig
     /tmp/ccz2hB7k.s:749    .text.RCC_PLLSAIConfig:0000000000000030 $d
     /tmp/ccz2hB7k.s:754    .text.RCC_PLLSAICmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:760    .text.RCC_PLLSAICmd:0000000000000000 RCC_PLLSAICmd
     /tmp/ccz2hB7k.s:796    .text.RCC_PLLSAICmd:000000000000001c $d
     /tmp/ccz2hB7k.s:801    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:807    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/ccz2hB7k.s:843    .text.RCC_ClockSecuritySystemCmd:000000000000001c $d
     /tmp/ccz2hB7k.s:848    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/ccz2hB7k.s:854    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/ccz2hB7k.s:909    .text.RCC_MCO1Config:000000000000003c $d
     /tmp/ccz2hB7k.s:914    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/ccz2hB7k.s:920    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/ccz2hB7k.s:975    .text.RCC_MCO2Config:000000000000003c $d
     /tmp/ccz2hB7k.s:980    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:986    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/ccz2hB7k.s:1037   .text.RCC_SYSCLKConfig:0000000000000034 $d
     /tmp/ccz2hB7k.s:1042   .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/ccz2hB7k.s:1048   .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
ARM GAS  /tmp/ccz2hB7k.s 			page 114


     /tmp/ccz2hB7k.s:1079   .text.RCC_GetSYSCLKSource:000000000000001c $d
     /tmp/ccz2hB7k.s:1084   .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:1090   .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/ccz2hB7k.s:1141   .text.RCC_HCLKConfig:0000000000000034 $d
     /tmp/ccz2hB7k.s:1146   .text.RCC_PCLK1Config:0000000000000000 $t
     /tmp/ccz2hB7k.s:1152   .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/ccz2hB7k.s:1203   .text.RCC_PCLK1Config:0000000000000034 $d
     /tmp/ccz2hB7k.s:1208   .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/ccz2hB7k.s:1214   .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/ccz2hB7k.s:1267   .text.RCC_PCLK2Config:0000000000000038 $d
     /tmp/ccz2hB7k.s:1272   .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/ccz2hB7k.s:1278   .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/ccz2hB7k.s:1516   .text.RCC_GetClocksFreq:000000000000014c $d
     /tmp/ccz2hB7k.s:1524   .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:1530   .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/ccz2hB7k.s:1602   .text.RCC_RTCCLKConfig:0000000000000058 $d
     /tmp/ccz2hB7k.s:1607   .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:1613   .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/ccz2hB7k.s:1649   .text.RCC_RTCCLKCmd:000000000000001c $d
     /tmp/ccz2hB7k.s:1654   .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:1660   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/ccz2hB7k.s:1696   .text.RCC_BackupResetCmd:000000000000001c $d
     /tmp/ccz2hB7k.s:1701   .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:1707   .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/ccz2hB7k.s:1741   .text.RCC_I2SCLKConfig:000000000000001c $d
     /tmp/ccz2hB7k.s:1746   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:1752   .text.RCC_SAIPLLI2SClkDivConfig:0000000000000000 RCC_SAIPLLI2SClkDivConfig
     /tmp/ccz2hB7k.s:1805   .text.RCC_SAIPLLI2SClkDivConfig:000000000000003c $d
     /tmp/ccz2hB7k.s:1810   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:1816   .text.RCC_SAIPLLSAIClkDivConfig:0000000000000000 RCC_SAIPLLSAIClkDivConfig
     /tmp/ccz2hB7k.s:1871   .text.RCC_SAIPLLSAIClkDivConfig:000000000000003c $d
     /tmp/ccz2hB7k.s:1876   .text.RCC_LTDCCLKDivConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:1882   .text.RCC_LTDCCLKDivConfig:0000000000000000 RCC_LTDCCLKDivConfig
     /tmp/ccz2hB7k.s:1933   .text.RCC_LTDCCLKDivConfig:0000000000000038 $d
     /tmp/ccz2hB7k.s:1938   .text.RCC_TIMCLKPresConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:1944   .text.RCC_TIMCLKPresConfig:0000000000000000 RCC_TIMCLKPresConfig
     /tmp/ccz2hB7k.s:1978   .text.RCC_TIMCLKPresConfig:000000000000001c $d
     /tmp/ccz2hB7k.s:1983   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:1989   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/ccz2hB7k.s:2047   .text.RCC_AHB1PeriphClockCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2052   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2058   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/ccz2hB7k.s:2116   .text.RCC_AHB2PeriphClockCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2121   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2127   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/ccz2hB7k.s:2185   .text.RCC_APB1PeriphClockCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2190   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2196   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/ccz2hB7k.s:2254   .text.RCC_APB2PeriphClockCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2259   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2265   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/ccz2hB7k.s:2323   .text.RCC_AHB1PeriphResetCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2328   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2334   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/ccz2hB7k.s:2392   .text.RCC_AHB2PeriphResetCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2397   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2403   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
ARM GAS  /tmp/ccz2hB7k.s 			page 115


     /tmp/ccz2hB7k.s:2461   .text.RCC_APB1PeriphResetCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2466   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2472   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/ccz2hB7k.s:2530   .text.RCC_APB2PeriphResetCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2535   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2541   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccz2hB7k.s:2599   .text.RCC_AHB1PeriphClockLPModeCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2604   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2610   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccz2hB7k.s:2668   .text.RCC_AHB2PeriphClockLPModeCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2673   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2679   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccz2hB7k.s:2737   .text.RCC_APB1PeriphClockLPModeCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2742   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccz2hB7k.s:2748   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccz2hB7k.s:2806   .text.RCC_APB2PeriphClockLPModeCmd:000000000000003c $d
     /tmp/ccz2hB7k.s:2811   .text.RCC_LSEModeConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:2817   .text.RCC_LSEModeConfig:0000000000000000 RCC_LSEModeConfig
     /tmp/ccz2hB7k.s:2867   .text.RCC_LSEModeConfig:0000000000000038 $d
     /tmp/ccz2hB7k.s:2872   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/ccz2hB7k.s:2878   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/ccz2hB7k.s:2943   .text.RCC_ITConfig:0000000000000048 $d
     /tmp/ccz2hB7k.s:2948   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/ccz2hB7k.s:3051   .text.RCC_GetFlagStatus:0000000000000070 $d
     /tmp/ccz2hB7k.s:3056   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/ccz2hB7k.s:3062   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/ccz2hB7k.s:3093   .text.RCC_ClearFlag:000000000000001c $d
     /tmp/ccz2hB7k.s:3098   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/ccz2hB7k.s:3104   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/ccz2hB7k.s:3157   .text.RCC_GetITStatus:0000000000000034 $d
     /tmp/ccz2hB7k.s:3162   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccz2hB7k.s:3168   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/ccz2hB7k.s:3203   .text.RCC_ClearITPendingBit:000000000000001c $d

NO UNDEFINED SYMBOLS
