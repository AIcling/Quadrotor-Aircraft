ARM GAS  /tmp/ccwZvjSo.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_hash_md5.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_hash_md5.c"
  20              		.section	.text.HASH_MD5,"ax",%progbits
  21              		.align	1
  22              		.global	HASH_MD5
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HASH_MD5:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_hash_md5.c **** /**
   2:./Lib/Src/stm32f4xx_hash_md5.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_hash_md5.c ****   * @file    stm32f4xx_hash_md5.c
   4:./Lib/Src/stm32f4xx_hash_md5.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_hash_md5.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_hash_md5.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_hash_md5.c ****   * @brief   This file provides high level functions to compute the HASH MD5 and
   8:./Lib/Src/stm32f4xx_hash_md5.c ****   *          HMAC MD5 Digest of an input message.
   9:./Lib/Src/stm32f4xx_hash_md5.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:./Lib/Src/stm32f4xx_hash_md5.c ****   *          peripheral.
  11:./Lib/Src/stm32f4xx_hash_md5.c ****   *
  12:./Lib/Src/stm32f4xx_hash_md5.c **** @verbatim
  13:./Lib/Src/stm32f4xx_hash_md5.c ****  ===================================================================
  14:./Lib/Src/stm32f4xx_hash_md5.c ****                   ##### How to use this driver #####
  15:./Lib/Src/stm32f4xx_hash_md5.c ****  ===================================================================
  16:./Lib/Src/stm32f4xx_hash_md5.c ****  [..]
  17:./Lib/Src/stm32f4xx_hash_md5.c ****    (#) Enable The HASH controller clock using 
  18:./Lib/Src/stm32f4xx_hash_md5.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:./Lib/Src/stm32f4xx_hash_md5.c ****   
  20:./Lib/Src/stm32f4xx_hash_md5.c ****    (#) Calculate the HASH MD5 Digest using HASH_MD5() function.
  21:./Lib/Src/stm32f4xx_hash_md5.c ****   
  22:./Lib/Src/stm32f4xx_hash_md5.c ****    (#) Calculate the HMAC MD5 Digest using HMAC_MD5() function.
  23:./Lib/Src/stm32f4xx_hash_md5.c ****   
  24:./Lib/Src/stm32f4xx_hash_md5.c **** @endverbatim
  25:./Lib/Src/stm32f4xx_hash_md5.c ****   *
  26:./Lib/Src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  27:./Lib/Src/stm32f4xx_hash_md5.c ****   * @attention
  28:./Lib/Src/stm32f4xx_hash_md5.c ****   *
  29:./Lib/Src/stm32f4xx_hash_md5.c ****   * Copyright (c) 2016 STMicroelectronics.
  30:./Lib/Src/stm32f4xx_hash_md5.c ****   * All rights reserved.
ARM GAS  /tmp/ccwZvjSo.s 			page 2


  31:./Lib/Src/stm32f4xx_hash_md5.c ****   *
  32:./Lib/Src/stm32f4xx_hash_md5.c ****   * This software is licensed under terms that can be found in the LICENSE file
  33:./Lib/Src/stm32f4xx_hash_md5.c ****   * in the root directory of this software component.
  34:./Lib/Src/stm32f4xx_hash_md5.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  35:./Lib/Src/stm32f4xx_hash_md5.c ****   *
  36:./Lib/Src/stm32f4xx_hash_md5.c ****   ******************************************************************************
  37:./Lib/Src/stm32f4xx_hash_md5.c ****   */
  38:./Lib/Src/stm32f4xx_hash_md5.c **** 
  39:./Lib/Src/stm32f4xx_hash_md5.c **** /* Includes ------------------------------------------------------------------*/
  40:./Lib/Src/stm32f4xx_hash_md5.c **** #include "stm32f4xx_hash.h"
  41:./Lib/Src/stm32f4xx_hash_md5.c **** 
  42:./Lib/Src/stm32f4xx_hash_md5.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  43:./Lib/Src/stm32f4xx_hash_md5.c ****   * @{
  44:./Lib/Src/stm32f4xx_hash_md5.c ****   */
  45:./Lib/Src/stm32f4xx_hash_md5.c **** 
  46:./Lib/Src/stm32f4xx_hash_md5.c **** /** @defgroup HASH 
  47:./Lib/Src/stm32f4xx_hash_md5.c ****   * @brief HASH driver modules
  48:./Lib/Src/stm32f4xx_hash_md5.c ****   * @{
  49:./Lib/Src/stm32f4xx_hash_md5.c ****   */
  50:./Lib/Src/stm32f4xx_hash_md5.c **** 
  51:./Lib/Src/stm32f4xx_hash_md5.c **** /* Private typedef -----------------------------------------------------------*/
  52:./Lib/Src/stm32f4xx_hash_md5.c **** /* Private define ------------------------------------------------------------*/
  53:./Lib/Src/stm32f4xx_hash_md5.c **** #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  54:./Lib/Src/stm32f4xx_hash_md5.c **** 
  55:./Lib/Src/stm32f4xx_hash_md5.c **** /* Private macro -------------------------------------------------------------*/
  56:./Lib/Src/stm32f4xx_hash_md5.c **** /* Private variables ---------------------------------------------------------*/
  57:./Lib/Src/stm32f4xx_hash_md5.c **** /* Private function prototypes -----------------------------------------------*/
  58:./Lib/Src/stm32f4xx_hash_md5.c **** /* Private functions ---------------------------------------------------------*/
  59:./Lib/Src/stm32f4xx_hash_md5.c **** 
  60:./Lib/Src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Private_Functions
  61:./Lib/Src/stm32f4xx_hash_md5.c ****   * @{
  62:./Lib/Src/stm32f4xx_hash_md5.c ****   */ 
  63:./Lib/Src/stm32f4xx_hash_md5.c **** 
  64:./Lib/Src/stm32f4xx_hash_md5.c **** /** @defgroup HASH_Group7 High Level MD5 functions
  65:./Lib/Src/stm32f4xx_hash_md5.c ****  *  @brief   High Level MD5 Hash and HMAC functions 
  66:./Lib/Src/stm32f4xx_hash_md5.c ****  *
  67:./Lib/Src/stm32f4xx_hash_md5.c **** @verbatim   
  68:./Lib/Src/stm32f4xx_hash_md5.c ****  ===============================================================================
  69:./Lib/Src/stm32f4xx_hash_md5.c ****               ##### High Level MD5 Hash and HMAC functions #####
  70:./Lib/Src/stm32f4xx_hash_md5.c ****  ===============================================================================
  71:./Lib/Src/stm32f4xx_hash_md5.c **** 
  72:./Lib/Src/stm32f4xx_hash_md5.c **** 
  73:./Lib/Src/stm32f4xx_hash_md5.c **** @endverbatim
  74:./Lib/Src/stm32f4xx_hash_md5.c ****   * @{
  75:./Lib/Src/stm32f4xx_hash_md5.c ****   */
  76:./Lib/Src/stm32f4xx_hash_md5.c **** 
  77:./Lib/Src/stm32f4xx_hash_md5.c **** /**
  78:./Lib/Src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HASH MD5 digest.
  79:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
  80:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
  81:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest
  82:./Lib/Src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
  83:./Lib/Src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
  84:./Lib/Src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
  85:./Lib/Src/stm32f4xx_hash_md5.c ****   */
  86:./Lib/Src/stm32f4xx_hash_md5.c **** ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
  87:./Lib/Src/stm32f4xx_hash_md5.c **** {
ARM GAS  /tmp/ccwZvjSo.s 			page 3


  29              		.loc 1 87 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 112
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 9CB0     		sub	sp, sp, #112
  38              		.cfi_def_cfa_offset 120
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 F860     		str	r0, [r7, #12]
  42 0008 B960     		str	r1, [r7, #8]
  43 000a 7A60     		str	r2, [r7, #4]
  88:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
  89:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
  90:./Lib/Src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
  44              		.loc 1 90 17
  45 000c 0023     		movs	r3, #0
  46 000e 7B83     		strh	r3, [r7, #26]	@ movhi
  91:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
  47              		.loc 1 91 12
  48 0010 0023     		movs	r3, #0
  49 0012 FB66     		str	r3, [r7, #108]
  92:./Lib/Src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 92 17
  51 0014 0023     		movs	r3, #0
  52 0016 7B61     		str	r3, [r7, #20]
  93:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
  53              		.loc 1 93 12
  54 0018 0023     		movs	r3, #0
  55 001a 3B66     		str	r3, [r7, #96]
  94:./Lib/Src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
  56              		.loc 1 94 15
  57 001c 0123     		movs	r3, #1
  58 001e 87F86B30 		strb	r3, [r7, #107]
  95:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
  59              		.loc 1 95 12
  60 0022 FB68     		ldr	r3, [r7, #12]
  61 0024 7B66     		str	r3, [r7, #100]
  96:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
  62              		.loc 1 96 12
  63 0026 7B68     		ldr	r3, [r7, #4]
  64 0028 FB65     		str	r3, [r7, #92]
  97:./Lib/Src/stm32f4xx_hash_md5.c **** 
  98:./Lib/Src/stm32f4xx_hash_md5.c **** 
  99:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 100:./Lib/Src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  65              		.loc 1 100 19
  66 002a BB68     		ldr	r3, [r7, #8]
  67 002c 9BB2     		uxth	r3, r3
  68 002e 03F00303 		and	r3, r3, #3
  69 0032 9BB2     		uxth	r3, r3
  70 0034 DB00     		lsls	r3, r3, #3
  71 0036 9BB2     		uxth	r3, r3
  72 0038 7B83     		strh	r3, [r7, #26]	@ movhi
ARM GAS  /tmp/ccwZvjSo.s 			page 4


 101:./Lib/Src/stm32f4xx_hash_md5.c **** 
 102:./Lib/Src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 103:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
  73              		.loc 1 103 3
  74 003a FFF7FEFF 		bl	HASH_DeInit
 104:./Lib/Src/stm32f4xx_hash_md5.c **** 
 105:./Lib/Src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 106:./Lib/Src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
  75              		.loc 1 106 45
  76 003e 8023     		movs	r3, #128
  77 0040 FB63     		str	r3, [r7, #60]
 107:./Lib/Src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  78              		.loc 1 107 40
  79 0042 0023     		movs	r3, #0
  80 0044 3B64     		str	r3, [r7, #64]
 108:./Lib/Src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  81              		.loc 1 108 40
  82 0046 2023     		movs	r3, #32
  83 0048 7B64     		str	r3, [r7, #68]
 109:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
  84              		.loc 1 109 3
  85 004a 07F13C03 		add	r3, r7, #60
  86 004e 1846     		mov	r0, r3
  87 0050 FFF7FEFF 		bl	HASH_Init
 110:./Lib/Src/stm32f4xx_hash_md5.c **** 
 111:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the data */
 112:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  88              		.loc 1 112 3
  89 0054 7B8B     		ldrh	r3, [r7, #26]	@ movhi
  90 0056 9BB2     		uxth	r3, r3
  91 0058 1846     		mov	r0, r3
  92 005a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 113:./Lib/Src/stm32f4xx_hash_md5.c **** 
 114:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Write the Input block in the IN FIFO */
 115:./Lib/Src/stm32f4xx_hash_md5.c ****   for(i=0; i<Ilen; i+=4)
  93              		.loc 1 115 8
  94 005e 0023     		movs	r3, #0
  95 0060 FB66     		str	r3, [r7, #108]
  96              		.loc 1 115 3
  97 0062 0AE0     		b	.L2
  98              	.L3:
 116:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 117:./Lib/Src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
  99              		.loc 1 117 18 discriminator 3
 100 0064 7B6E     		ldr	r3, [r7, #100]
 101              		.loc 1 117 5 discriminator 3
 102 0066 1B68     		ldr	r3, [r3]
 103 0068 1846     		mov	r0, r3
 104 006a FFF7FEFF 		bl	HASH_DataIn
 118:./Lib/Src/stm32f4xx_hash_md5.c ****     inputaddr+=4;
 105              		.loc 1 118 14 discriminator 3
 106 006e 7B6E     		ldr	r3, [r7, #100]
 107 0070 0433     		adds	r3, r3, #4
 108 0072 7B66     		str	r3, [r7, #100]
 115:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 109              		.loc 1 115 21 discriminator 3
 110 0074 FB6E     		ldr	r3, [r7, #108]
ARM GAS  /tmp/ccwZvjSo.s 			page 5


 111 0076 0433     		adds	r3, r3, #4
 112 0078 FB66     		str	r3, [r7, #108]
 113              	.L2:
 115:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 114              		.loc 1 115 13 discriminator 1
 115 007a FA6E     		ldr	r2, [r7, #108]
 116 007c BB68     		ldr	r3, [r7, #8]
 117 007e 9A42     		cmp	r2, r3
 118 0080 F0D3     		bcc	.L3
 119:./Lib/Src/stm32f4xx_hash_md5.c ****   }
 120:./Lib/Src/stm32f4xx_hash_md5.c **** 
 121:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 122:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 119              		.loc 1 122 3
 120 0082 FFF7FEFF 		bl	HASH_StartDigest
 121              	.L5:
 123:./Lib/Src/stm32f4xx_hash_md5.c **** 
 124:./Lib/Src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 125:./Lib/Src/stm32f4xx_hash_md5.c ****   do
 126:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 127:./Lib/Src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 122              		.loc 1 127 18 discriminator 2
 123 0086 0820     		movs	r0, #8
 124 0088 FFF7FEFF 		bl	HASH_GetFlagStatus
 125 008c 0346     		mov	r3, r0
 126              		.loc 1 127 16 discriminator 2
 127 008e 3B66     		str	r3, [r7, #96]
 128:./Lib/Src/stm32f4xx_hash_md5.c ****     counter++;
 128              		.loc 1 128 12 discriminator 2
 129 0090 7B69     		ldr	r3, [r7, #20]
 130 0092 0133     		adds	r3, r3, #1
 131 0094 7B61     		str	r3, [r7, #20]
 129:./Lib/Src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 132              		.loc 1 129 20 discriminator 2
 133 0096 7B69     		ldr	r3, [r7, #20]
 134              		.loc 1 129 40 discriminator 2
 135 0098 B3F5803F 		cmp	r3, #65536
 136 009c 02D0     		beq	.L4
 137              		.loc 1 129 40 is_stmt 0 discriminator 1
 138 009e 3B6E     		ldr	r3, [r7, #96]
 139 00a0 002B     		cmp	r3, #0
 140 00a2 F0D1     		bne	.L5
 141              	.L4:
 130:./Lib/Src/stm32f4xx_hash_md5.c **** 
 131:./Lib/Src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 142              		.loc 1 131 6 is_stmt 1
 143 00a4 3B6E     		ldr	r3, [r7, #96]
 144 00a6 002B     		cmp	r3, #0
 145 00a8 03D0     		beq	.L6
 132:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 133:./Lib/Src/stm32f4xx_hash_md5.c ****      status = ERROR;
 146              		.loc 1 133 13
 147 00aa 0023     		movs	r3, #0
 148 00ac 87F86B30 		strb	r3, [r7, #107]
 149 00b0 25E0     		b	.L7
 150              	.L6:
 134:./Lib/Src/stm32f4xx_hash_md5.c ****   }
ARM GAS  /tmp/ccwZvjSo.s 			page 6


 135:./Lib/Src/stm32f4xx_hash_md5.c ****   else
 136:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 137:./Lib/Src/stm32f4xx_hash_md5.c ****     /* Read the message digest */
 138:./Lib/Src/stm32f4xx_hash_md5.c ****     HASH_GetDigest(&MD5_MessageDigest);
 151              		.loc 1 138 5
 152 00b2 07F11C03 		add	r3, r7, #28
 153 00b6 1846     		mov	r0, r3
 154 00b8 FFF7FEFF 		bl	HASH_GetDigest
 139:./Lib/Src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 155              		.loc 1 139 33
 156 00bc FA69     		ldr	r2, [r7, #28]
 157              		.loc 1 139 6
 158 00be FB6D     		ldr	r3, [r7, #92]
 159 00c0 FA64     		str	r2, [r7, #76]
 160              	.LBB18:
 161              	.LBB19:
 162              		.file 2 "./Start/core_cmInstr.h"
   1:./Start/core_cmInstr.h **** /**************************************************************************//**
   2:./Start/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./Start/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./Start/core_cmInstr.h ****  * @version  V4.10
   5:./Start/core_cmInstr.h ****  * @date     18. March 2015
   6:./Start/core_cmInstr.h ****  *
   7:./Start/core_cmInstr.h ****  * @note
   8:./Start/core_cmInstr.h ****  *
   9:./Start/core_cmInstr.h ****  ******************************************************************************/
  10:./Start/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./Start/core_cmInstr.h **** 
  12:./Start/core_cmInstr.h ****    All rights reserved.
  13:./Start/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./Start/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./Start/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./Start/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./Start/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./Start/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./Start/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./Start/core_cmInstr.h ****      specific prior written permission.
  23:./Start/core_cmInstr.h ****    *
  24:./Start/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./Start/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./Start/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./Start/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./Start/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./Start/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./Start/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./Start/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./Start/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./Start/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./Start/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./Start/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./Start/core_cmInstr.h **** 
  37:./Start/core_cmInstr.h **** 
  38:./Start/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./Start/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccwZvjSo.s 			page 7


  41:./Start/core_cmInstr.h **** 
  42:./Start/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./Start/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./Start/core_cmInstr.h ****   Access to dedicated instructions
  45:./Start/core_cmInstr.h ****   @{
  46:./Start/core_cmInstr.h **** */
  47:./Start/core_cmInstr.h **** 
  48:./Start/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./Start/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./Start/core_cmInstr.h **** 
  51:./Start/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./Start/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./Start/core_cmInstr.h **** #endif
  54:./Start/core_cmInstr.h **** 
  55:./Start/core_cmInstr.h **** 
  56:./Start/core_cmInstr.h **** /** \brief  No Operation
  57:./Start/core_cmInstr.h **** 
  58:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./Start/core_cmInstr.h ****  */
  60:./Start/core_cmInstr.h **** #define __NOP                             __nop
  61:./Start/core_cmInstr.h **** 
  62:./Start/core_cmInstr.h **** 
  63:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./Start/core_cmInstr.h **** 
  65:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./Start/core_cmInstr.h ****     until one of a number of events occurs.
  67:./Start/core_cmInstr.h ****  */
  68:./Start/core_cmInstr.h **** #define __WFI                             __wfi
  69:./Start/core_cmInstr.h **** 
  70:./Start/core_cmInstr.h **** 
  71:./Start/core_cmInstr.h **** /** \brief  Wait For Event
  72:./Start/core_cmInstr.h **** 
  73:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./Start/core_cmInstr.h ****  */
  76:./Start/core_cmInstr.h **** #define __WFE                             __wfe
  77:./Start/core_cmInstr.h **** 
  78:./Start/core_cmInstr.h **** 
  79:./Start/core_cmInstr.h **** /** \brief  Send Event
  80:./Start/core_cmInstr.h **** 
  81:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./Start/core_cmInstr.h ****  */
  83:./Start/core_cmInstr.h **** #define __SEV                             __sev
  84:./Start/core_cmInstr.h **** 
  85:./Start/core_cmInstr.h **** 
  86:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./Start/core_cmInstr.h **** 
  88:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./Start/core_cmInstr.h ****  */
  92:./Start/core_cmInstr.h **** #define __ISB() do {\
  93:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  94:./Start/core_cmInstr.h ****                    __isb(0xF);\
  95:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  96:./Start/core_cmInstr.h ****                 } while (0)
  97:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccwZvjSo.s 			page 8


  98:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  99:./Start/core_cmInstr.h **** 
 100:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./Start/core_cmInstr.h ****  */
 103:./Start/core_cmInstr.h **** #define __DSB() do {\
 104:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 105:./Start/core_cmInstr.h ****                    __dsb(0xF);\
 106:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 107:./Start/core_cmInstr.h ****                 } while (0)
 108:./Start/core_cmInstr.h **** 
 109:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./Start/core_cmInstr.h **** 
 111:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./Start/core_cmInstr.h ****  */
 114:./Start/core_cmInstr.h **** #define __DMB() do {\
 115:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 116:./Start/core_cmInstr.h ****                    __dmb(0xF);\
 117:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 118:./Start/core_cmInstr.h ****                 } while (0)
 119:./Start/core_cmInstr.h **** 
 120:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./Start/core_cmInstr.h **** 
 122:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./Start/core_cmInstr.h **** 
 124:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./Start/core_cmInstr.h ****     \return               Reversed value
 126:./Start/core_cmInstr.h ****  */
 127:./Start/core_cmInstr.h **** #define __REV                             __rev
 128:./Start/core_cmInstr.h **** 
 129:./Start/core_cmInstr.h **** 
 130:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./Start/core_cmInstr.h **** 
 132:./Start/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./Start/core_cmInstr.h **** 
 134:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./Start/core_cmInstr.h ****     \return               Reversed value
 136:./Start/core_cmInstr.h ****  */
 137:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./Start/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./Start/core_cmInstr.h **** {
 140:./Start/core_cmInstr.h ****   rev16 r0, r0
 141:./Start/core_cmInstr.h ****   bx lr
 142:./Start/core_cmInstr.h **** }
 143:./Start/core_cmInstr.h **** #endif
 144:./Start/core_cmInstr.h **** 
 145:./Start/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./Start/core_cmInstr.h **** 
 147:./Start/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./Start/core_cmInstr.h **** 
 149:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./Start/core_cmInstr.h ****     \return               Reversed value
 151:./Start/core_cmInstr.h ****  */
 152:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:./Start/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./Start/core_cmInstr.h **** {
ARM GAS  /tmp/ccwZvjSo.s 			page 9


 155:./Start/core_cmInstr.h ****   revsh r0, r0
 156:./Start/core_cmInstr.h ****   bx lr
 157:./Start/core_cmInstr.h **** }
 158:./Start/core_cmInstr.h **** #endif
 159:./Start/core_cmInstr.h **** 
 160:./Start/core_cmInstr.h **** 
 161:./Start/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./Start/core_cmInstr.h **** 
 163:./Start/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./Start/core_cmInstr.h **** 
 165:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./Start/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./Start/core_cmInstr.h ****     \return               Rotated value
 168:./Start/core_cmInstr.h ****  */
 169:./Start/core_cmInstr.h **** #define __ROR                             __ror
 170:./Start/core_cmInstr.h **** 
 171:./Start/core_cmInstr.h **** 
 172:./Start/core_cmInstr.h **** /** \brief  Breakpoint
 173:./Start/core_cmInstr.h **** 
 174:./Start/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:./Start/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:./Start/core_cmInstr.h **** 
 177:./Start/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./Start/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./Start/core_cmInstr.h ****  */
 180:./Start/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./Start/core_cmInstr.h **** 
 182:./Start/core_cmInstr.h **** 
 183:./Start/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./Start/core_cmInstr.h **** 
 185:./Start/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./Start/core_cmInstr.h **** 
 187:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./Start/core_cmInstr.h ****     \return               Reversed value
 189:./Start/core_cmInstr.h ****  */
 190:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./Start/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./Start/core_cmInstr.h **** #else
 193:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./Start/core_cmInstr.h **** {
 195:./Start/core_cmInstr.h ****   uint32_t result;
 196:./Start/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./Start/core_cmInstr.h **** 
 198:./Start/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./Start/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./Start/core_cmInstr.h ****   {
 201:./Start/core_cmInstr.h ****     result <<= 1;
 202:./Start/core_cmInstr.h ****     result |= value & 1;
 203:./Start/core_cmInstr.h ****     s--;
 204:./Start/core_cmInstr.h ****   }
 205:./Start/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./Start/core_cmInstr.h ****   return(result);
 207:./Start/core_cmInstr.h **** }
 208:./Start/core_cmInstr.h **** #endif
 209:./Start/core_cmInstr.h **** 
 210:./Start/core_cmInstr.h **** 
 211:./Start/core_cmInstr.h **** /** \brief  Count leading zeros
ARM GAS  /tmp/ccwZvjSo.s 			page 10


 212:./Start/core_cmInstr.h **** 
 213:./Start/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./Start/core_cmInstr.h **** 
 215:./Start/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./Start/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./Start/core_cmInstr.h ****  */
 218:./Start/core_cmInstr.h **** #define __CLZ                             __clz
 219:./Start/core_cmInstr.h **** 
 220:./Start/core_cmInstr.h **** 
 221:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./Start/core_cmInstr.h **** 
 223:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./Start/core_cmInstr.h **** 
 225:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./Start/core_cmInstr.h **** 
 227:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:./Start/core_cmInstr.h ****  */
 230:./Start/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./Start/core_cmInstr.h **** 
 232:./Start/core_cmInstr.h **** 
 233:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./Start/core_cmInstr.h **** 
 235:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./Start/core_cmInstr.h **** 
 237:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./Start/core_cmInstr.h ****  */
 240:./Start/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./Start/core_cmInstr.h **** 
 242:./Start/core_cmInstr.h **** 
 243:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./Start/core_cmInstr.h **** 
 245:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./Start/core_cmInstr.h **** 
 247:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./Start/core_cmInstr.h ****  */
 250:./Start/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./Start/core_cmInstr.h **** 
 252:./Start/core_cmInstr.h **** 
 253:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./Start/core_cmInstr.h **** 
 255:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./Start/core_cmInstr.h **** 
 257:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 260:./Start/core_cmInstr.h ****     \return          1  Function failed
 261:./Start/core_cmInstr.h ****  */
 262:./Start/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./Start/core_cmInstr.h **** 
 264:./Start/core_cmInstr.h **** 
 265:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:./Start/core_cmInstr.h **** 
 267:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/ccwZvjSo.s 			page 11


 269:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 270:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 272:./Start/core_cmInstr.h ****     \return          1  Function failed
 273:./Start/core_cmInstr.h ****  */
 274:./Start/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./Start/core_cmInstr.h **** 
 276:./Start/core_cmInstr.h **** 
 277:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./Start/core_cmInstr.h **** 
 279:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./Start/core_cmInstr.h **** 
 281:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 284:./Start/core_cmInstr.h ****     \return          1  Function failed
 285:./Start/core_cmInstr.h ****  */
 286:./Start/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:./Start/core_cmInstr.h **** 
 288:./Start/core_cmInstr.h **** 
 289:./Start/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:./Start/core_cmInstr.h **** 
 291:./Start/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./Start/core_cmInstr.h **** 
 293:./Start/core_cmInstr.h ****  */
 294:./Start/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./Start/core_cmInstr.h **** 
 296:./Start/core_cmInstr.h **** 
 297:./Start/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./Start/core_cmInstr.h **** 
 299:./Start/core_cmInstr.h ****     This function saturates a signed value.
 300:./Start/core_cmInstr.h **** 
 301:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./Start/core_cmInstr.h ****     \return             Saturated value
 304:./Start/core_cmInstr.h ****  */
 305:./Start/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./Start/core_cmInstr.h **** 
 307:./Start/core_cmInstr.h **** 
 308:./Start/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./Start/core_cmInstr.h **** 
 310:./Start/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./Start/core_cmInstr.h **** 
 312:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./Start/core_cmInstr.h ****     \return             Saturated value
 315:./Start/core_cmInstr.h ****  */
 316:./Start/core_cmInstr.h **** #define __USAT                            __usat
 317:./Start/core_cmInstr.h **** 
 318:./Start/core_cmInstr.h **** 
 319:./Start/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./Start/core_cmInstr.h **** 
 321:./Start/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./Start/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:./Start/core_cmInstr.h **** 
 324:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./Start/core_cmInstr.h ****     \return               Rotated value
ARM GAS  /tmp/ccwZvjSo.s 			page 12


 326:./Start/core_cmInstr.h ****  */
 327:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./Start/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./Start/core_cmInstr.h **** {
 330:./Start/core_cmInstr.h ****   rrx r0, r0
 331:./Start/core_cmInstr.h ****   bx lr
 332:./Start/core_cmInstr.h **** }
 333:./Start/core_cmInstr.h **** #endif
 334:./Start/core_cmInstr.h **** 
 335:./Start/core_cmInstr.h **** 
 336:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./Start/core_cmInstr.h **** 
 338:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./Start/core_cmInstr.h **** 
 340:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./Start/core_cmInstr.h ****  */
 343:./Start/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:./Start/core_cmInstr.h **** 
 345:./Start/core_cmInstr.h **** 
 346:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:./Start/core_cmInstr.h **** 
 348:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./Start/core_cmInstr.h **** 
 350:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./Start/core_cmInstr.h ****  */
 353:./Start/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./Start/core_cmInstr.h **** 
 355:./Start/core_cmInstr.h **** 
 356:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./Start/core_cmInstr.h **** 
 358:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./Start/core_cmInstr.h **** 
 360:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./Start/core_cmInstr.h ****  */
 363:./Start/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./Start/core_cmInstr.h **** 
 365:./Start/core_cmInstr.h **** 
 366:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./Start/core_cmInstr.h **** 
 368:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./Start/core_cmInstr.h **** 
 370:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./Start/core_cmInstr.h ****  */
 373:./Start/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./Start/core_cmInstr.h **** 
 375:./Start/core_cmInstr.h **** 
 376:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./Start/core_cmInstr.h **** 
 378:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./Start/core_cmInstr.h **** 
 380:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 381:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./Start/core_cmInstr.h ****  */
ARM GAS  /tmp/ccwZvjSo.s 			page 13


 383:./Start/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 384:./Start/core_cmInstr.h **** 
 385:./Start/core_cmInstr.h **** 
 386:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./Start/core_cmInstr.h **** 
 388:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./Start/core_cmInstr.h **** 
 390:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./Start/core_cmInstr.h ****  */
 393:./Start/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./Start/core_cmInstr.h **** 
 395:./Start/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./Start/core_cmInstr.h **** 
 397:./Start/core_cmInstr.h **** 
 398:./Start/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./Start/core_cmInstr.h **** /* GNU gcc specific functions */
 400:./Start/core_cmInstr.h **** 
 401:./Start/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./Start/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:./Start/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:./Start/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./Start/core_cmInstr.h **** #else
 408:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./Start/core_cmInstr.h **** #endif
 411:./Start/core_cmInstr.h **** 
 412:./Start/core_cmInstr.h **** /** \brief  No Operation
 413:./Start/core_cmInstr.h **** 
 414:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./Start/core_cmInstr.h ****  */
 416:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./Start/core_cmInstr.h **** {
 418:./Start/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./Start/core_cmInstr.h **** }
 420:./Start/core_cmInstr.h **** 
 421:./Start/core_cmInstr.h **** 
 422:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./Start/core_cmInstr.h **** 
 424:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./Start/core_cmInstr.h ****     until one of a number of events occurs.
 426:./Start/core_cmInstr.h ****  */
 427:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./Start/core_cmInstr.h **** {
 429:./Start/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./Start/core_cmInstr.h **** }
 431:./Start/core_cmInstr.h **** 
 432:./Start/core_cmInstr.h **** 
 433:./Start/core_cmInstr.h **** /** \brief  Wait For Event
 434:./Start/core_cmInstr.h **** 
 435:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:./Start/core_cmInstr.h ****  */
 438:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./Start/core_cmInstr.h **** {
ARM GAS  /tmp/ccwZvjSo.s 			page 14


 440:./Start/core_cmInstr.h ****   __ASM volatile ("wfe");
 441:./Start/core_cmInstr.h **** }
 442:./Start/core_cmInstr.h **** 
 443:./Start/core_cmInstr.h **** 
 444:./Start/core_cmInstr.h **** /** \brief  Send Event
 445:./Start/core_cmInstr.h **** 
 446:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./Start/core_cmInstr.h ****  */
 448:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./Start/core_cmInstr.h **** {
 450:./Start/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./Start/core_cmInstr.h **** }
 452:./Start/core_cmInstr.h **** 
 453:./Start/core_cmInstr.h **** 
 454:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./Start/core_cmInstr.h **** 
 456:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./Start/core_cmInstr.h ****  */
 460:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:./Start/core_cmInstr.h **** {
 462:./Start/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./Start/core_cmInstr.h **** }
 464:./Start/core_cmInstr.h **** 
 465:./Start/core_cmInstr.h **** 
 466:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./Start/core_cmInstr.h **** 
 468:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./Start/core_cmInstr.h ****  */
 471:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./Start/core_cmInstr.h **** {
 473:./Start/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./Start/core_cmInstr.h **** }
 475:./Start/core_cmInstr.h **** 
 476:./Start/core_cmInstr.h **** 
 477:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./Start/core_cmInstr.h **** 
 479:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./Start/core_cmInstr.h ****  */
 482:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./Start/core_cmInstr.h **** {
 484:./Start/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./Start/core_cmInstr.h **** }
 486:./Start/core_cmInstr.h **** 
 487:./Start/core_cmInstr.h **** 
 488:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./Start/core_cmInstr.h **** 
 490:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./Start/core_cmInstr.h **** 
 492:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./Start/core_cmInstr.h ****     \return               Reversed value
 494:./Start/core_cmInstr.h ****  */
 495:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./Start/core_cmInstr.h **** {
ARM GAS  /tmp/ccwZvjSo.s 			page 15


 497:./Start/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 498:./Start/core_cmInstr.h ****   return __builtin_bswap32(value);
 163              		.loc 2 498 10
 164 00c2 FA6C     		ldr	r2, [r7, #76]
 165 00c4 12BA     		rev	r2, r2
 166              	.LBE19:
 167              	.LBE18:
 168              		.loc 1 139 31
 169 00c6 1A60     		str	r2, [r3]
 140:./Lib/Src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 170              		.loc 1 140 15
 171 00c8 FB6D     		ldr	r3, [r7, #92]
 172 00ca 0433     		adds	r3, r3, #4
 173 00cc FB65     		str	r3, [r7, #92]
 141:./Lib/Src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 174              		.loc 1 141 33
 175 00ce 3A6A     		ldr	r2, [r7, #32]
 176              		.loc 1 141 6
 177 00d0 FB6D     		ldr	r3, [r7, #92]
 178 00d2 3A65     		str	r2, [r7, #80]
 179              	.LBB20:
 180              	.LBB21:
 181              		.loc 2 498 10
 182 00d4 3A6D     		ldr	r2, [r7, #80]
 183 00d6 12BA     		rev	r2, r2
 184              	.LBE21:
 185              	.LBE20:
 186              		.loc 1 141 31
 187 00d8 1A60     		str	r2, [r3]
 142:./Lib/Src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 188              		.loc 1 142 15
 189 00da FB6D     		ldr	r3, [r7, #92]
 190 00dc 0433     		adds	r3, r3, #4
 191 00de FB65     		str	r3, [r7, #92]
 143:./Lib/Src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 192              		.loc 1 143 33
 193 00e0 7A6A     		ldr	r2, [r7, #36]
 194              		.loc 1 143 6
 195 00e2 FB6D     		ldr	r3, [r7, #92]
 196 00e4 7A65     		str	r2, [r7, #84]
 197              	.LBB22:
 198              	.LBB23:
 199              		.loc 2 498 10
 200 00e6 7A6D     		ldr	r2, [r7, #84]
 201 00e8 12BA     		rev	r2, r2
 202              	.LBE23:
 203              	.LBE22:
 204              		.loc 1 143 31
 205 00ea 1A60     		str	r2, [r3]
 144:./Lib/Src/stm32f4xx_hash_md5.c ****     outputaddr+=4;
 206              		.loc 1 144 15
 207 00ec FB6D     		ldr	r3, [r7, #92]
 208 00ee 0433     		adds	r3, r3, #4
 209 00f0 FB65     		str	r3, [r7, #92]
 145:./Lib/Src/stm32f4xx_hash_md5.c ****     *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 210              		.loc 1 145 33
 211 00f2 BA6A     		ldr	r2, [r7, #40]
ARM GAS  /tmp/ccwZvjSo.s 			page 16


 212              		.loc 1 145 6
 213 00f4 FB6D     		ldr	r3, [r7, #92]
 214 00f6 BA65     		str	r2, [r7, #88]
 215              	.LBB24:
 216              	.LBB25:
 217              		.loc 2 498 10
 218 00f8 BA6D     		ldr	r2, [r7, #88]
 219 00fa 12BA     		rev	r2, r2
 220              	.LBE25:
 221              	.LBE24:
 222              		.loc 1 145 31
 223 00fc 1A60     		str	r2, [r3]
 224              	.L7:
 146:./Lib/Src/stm32f4xx_hash_md5.c ****   }
 147:./Lib/Src/stm32f4xx_hash_md5.c ****   return status; 
 225              		.loc 1 147 10
 226 00fe 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 148:./Lib/Src/stm32f4xx_hash_md5.c **** }
 227              		.loc 1 148 1
 228 0102 1846     		mov	r0, r3
 229 0104 7037     		adds	r7, r7, #112
 230              		.cfi_def_cfa_offset 8
 231 0106 BD46     		mov	sp, r7
 232              		.cfi_def_cfa_register 13
 233              		@ sp needed
 234 0108 80BD     		pop	{r7, pc}
 235              		.cfi_endproc
 236              	.LFE123:
 238              		.section	.text.HMAC_MD5,"ax",%progbits
 239              		.align	1
 240              		.global	HMAC_MD5
 241              		.syntax unified
 242              		.thumb
 243              		.thumb_func
 245              	HMAC_MD5:
 246              	.LFB124:
 149:./Lib/Src/stm32f4xx_hash_md5.c **** 
 150:./Lib/Src/stm32f4xx_hash_md5.c **** /**
 151:./Lib/Src/stm32f4xx_hash_md5.c ****   * @brief  Compute the HMAC MD5 digest.
 152:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Key: pointer to the Key used for HMAC.
 153:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Keylen: length of the Key used for HMAC.
 154:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Input: pointer to the Input buffer to be treated.
 155:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Ilen: length of the Input buffer.
 156:./Lib/Src/stm32f4xx_hash_md5.c ****   * @param  Output: the returned digest  
 157:./Lib/Src/stm32f4xx_hash_md5.c ****   * @retval An ErrorStatus enumeration value:
 158:./Lib/Src/stm32f4xx_hash_md5.c ****   *          - SUCCESS: digest computation done
 159:./Lib/Src/stm32f4xx_hash_md5.c ****   *          - ERROR: digest computation failed
 160:./Lib/Src/stm32f4xx_hash_md5.c ****   */
 161:./Lib/Src/stm32f4xx_hash_md5.c **** ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
 162:./Lib/Src/stm32f4xx_hash_md5.c ****                      uint32_t Ilen, uint8_t Output[16])
 163:./Lib/Src/stm32f4xx_hash_md5.c **** {
 247              		.loc 1 163 1
 248              		.cfi_startproc
 249              		@ args = 4, pretend = 0, frame = 112
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251 0000 80B5     		push	{r7, lr}
 252              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccwZvjSo.s 			page 17


 253              		.cfi_offset 7, -8
 254              		.cfi_offset 14, -4
 255 0002 9CB0     		sub	sp, sp, #112
 256              		.cfi_def_cfa_offset 120
 257 0004 00AF     		add	r7, sp, #0
 258              		.cfi_def_cfa_register 7
 259 0006 F860     		str	r0, [r7, #12]
 260 0008 B960     		str	r1, [r7, #8]
 261 000a 7A60     		str	r2, [r7, #4]
 262 000c 3B60     		str	r3, [r7]
 164:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_InitTypeDef MD5_HASH_InitStructure;
 165:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_MsgDigest MD5_MessageDigest;
 166:./Lib/Src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitsdata = 0;
 263              		.loc 1 166 17
 264 000e 0023     		movs	r3, #0
 265 0010 FB82     		strh	r3, [r7, #22]	@ movhi
 167:./Lib/Src/stm32f4xx_hash_md5.c ****   __IO uint16_t nbvalidbitskey = 0;
 266              		.loc 1 167 17
 267 0012 0023     		movs	r3, #0
 268 0014 BB82     		strh	r3, [r7, #20]	@ movhi
 168:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t i = 0;
 269              		.loc 1 168 12
 270 0016 0023     		movs	r3, #0
 271 0018 FB66     		str	r3, [r7, #108]
 169:./Lib/Src/stm32f4xx_hash_md5.c ****   __IO uint32_t counter = 0;
 272              		.loc 1 169 17
 273 001a 0023     		movs	r3, #0
 274 001c 3B61     		str	r3, [r7, #16]
 170:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t busystatus = 0;
 275              		.loc 1 170 12
 276 001e 0023     		movs	r3, #0
 277 0020 FB65     		str	r3, [r7, #92]
 171:./Lib/Src/stm32f4xx_hash_md5.c ****   ErrorStatus status = SUCCESS;
 278              		.loc 1 171 15
 279 0022 0123     		movs	r3, #1
 280 0024 87F86B30 		strb	r3, [r7, #107]
 172:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t keyaddr    = (uint32_t)Key;
 281              		.loc 1 172 12
 282 0028 FB68     		ldr	r3, [r7, #12]
 283 002a 7B66     		str	r3, [r7, #100]
 173:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t inputaddr  = (uint32_t)Input;
 284              		.loc 1 173 12
 285 002c 7B68     		ldr	r3, [r7, #4]
 286 002e 3B66     		str	r3, [r7, #96]
 174:./Lib/Src/stm32f4xx_hash_md5.c ****   uint32_t outputaddr = (uint32_t)Output;
 287              		.loc 1 174 12
 288 0030 BB6F     		ldr	r3, [r7, #120]
 289 0032 BB65     		str	r3, [r7, #88]
 175:./Lib/Src/stm32f4xx_hash_md5.c **** 
 176:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Input data */
 177:./Lib/Src/stm32f4xx_hash_md5.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 290              		.loc 1 177 19
 291 0034 3B68     		ldr	r3, [r7]
 292 0036 9BB2     		uxth	r3, r3
 293 0038 03F00303 		and	r3, r3, #3
 294 003c 9BB2     		uxth	r3, r3
 295 003e DB00     		lsls	r3, r3, #3
ARM GAS  /tmp/ccwZvjSo.s 			page 18


 296 0040 9BB2     		uxth	r3, r3
 297 0042 FB82     		strh	r3, [r7, #22]	@ movhi
 178:./Lib/Src/stm32f4xx_hash_md5.c **** 
 179:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Number of valid bits in last word of the Key */
 180:./Lib/Src/stm32f4xx_hash_md5.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 298              		.loc 1 180 18
 299 0044 BB68     		ldr	r3, [r7, #8]
 300 0046 9BB2     		uxth	r3, r3
 301 0048 03F00303 		and	r3, r3, #3
 302 004c 9BB2     		uxth	r3, r3
 303 004e DB00     		lsls	r3, r3, #3
 304 0050 9BB2     		uxth	r3, r3
 305 0052 BB82     		strh	r3, [r7, #20]	@ movhi
 181:./Lib/Src/stm32f4xx_hash_md5.c ****    
 182:./Lib/Src/stm32f4xx_hash_md5.c ****   /* HASH peripheral initialization */
 183:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_DeInit();
 306              		.loc 1 183 3
 307 0054 FFF7FEFF 		bl	HASH_DeInit
 184:./Lib/Src/stm32f4xx_hash_md5.c **** 
 185:./Lib/Src/stm32f4xx_hash_md5.c ****   /* HASH Configuration */
 186:./Lib/Src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 308              		.loc 1 186 45
 309 0058 8023     		movs	r3, #128
 310 005a BB63     		str	r3, [r7, #56]
 187:./Lib/Src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 311              		.loc 1 187 40
 312 005c 4023     		movs	r3, #64
 313 005e FB63     		str	r3, [r7, #60]
 188:./Lib/Src/stm32f4xx_hash_md5.c ****   MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 314              		.loc 1 188 40
 315 0060 2023     		movs	r3, #32
 316 0062 3B64     		str	r3, [r7, #64]
 189:./Lib/Src/stm32f4xx_hash_md5.c ****   if(Keylen > 64)
 317              		.loc 1 189 5
 318 0064 BB68     		ldr	r3, [r7, #8]
 319 0066 402B     		cmp	r3, #64
 320 0068 03D9     		bls	.L14
 190:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 191:./Lib/Src/stm32f4xx_hash_md5.c ****     /* HMAC long Key */
 192:./Lib/Src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 321              		.loc 1 192 45
 322 006a 4FF48033 		mov	r3, #65536
 323 006e 7B64     		str	r3, [r7, #68]
 324 0070 01E0     		b	.L15
 325              	.L14:
 193:./Lib/Src/stm32f4xx_hash_md5.c ****   }
 194:./Lib/Src/stm32f4xx_hash_md5.c ****   else
 195:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 196:./Lib/Src/stm32f4xx_hash_md5.c ****     /* HMAC short Key */
 197:./Lib/Src/stm32f4xx_hash_md5.c ****     MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 326              		.loc 1 197 45
 327 0072 0023     		movs	r3, #0
 328 0074 7B64     		str	r3, [r7, #68]
 329              	.L15:
 198:./Lib/Src/stm32f4xx_hash_md5.c ****   }
 199:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_Init(&MD5_HASH_InitStructure);
 330              		.loc 1 199 3
ARM GAS  /tmp/ccwZvjSo.s 			page 19


 331 0076 07F13803 		add	r3, r7, #56
 332 007a 1846     		mov	r0, r3
 333 007c FFF7FEFF 		bl	HASH_Init
 200:./Lib/Src/stm32f4xx_hash_md5.c **** 
 201:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Configure the number of valid bits in last word of the Key */
 202:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 334              		.loc 1 202 3
 335 0080 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 336 0082 9BB2     		uxth	r3, r3
 337 0084 1846     		mov	r0, r3
 338 0086 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 203:./Lib/Src/stm32f4xx_hash_md5.c **** 
 204:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Write the Key */
 205:./Lib/Src/stm32f4xx_hash_md5.c ****   for(i=0; i<Keylen; i+=4)
 339              		.loc 1 205 8
 340 008a 0023     		movs	r3, #0
 341 008c FB66     		str	r3, [r7, #108]
 342              		.loc 1 205 3
 343 008e 0AE0     		b	.L16
 344              	.L17:
 206:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 207:./Lib/Src/stm32f4xx_hash_md5.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 345              		.loc 1 207 18 discriminator 3
 346 0090 7B6E     		ldr	r3, [r7, #100]
 347              		.loc 1 207 5 discriminator 3
 348 0092 1B68     		ldr	r3, [r3]
 349 0094 1846     		mov	r0, r3
 350 0096 FFF7FEFF 		bl	HASH_DataIn
 208:./Lib/Src/stm32f4xx_hash_md5.c ****     keyaddr+=4;
 351              		.loc 1 208 12 discriminator 3
 352 009a 7B6E     		ldr	r3, [r7, #100]
 353 009c 0433     		adds	r3, r3, #4
 354 009e 7B66     		str	r3, [r7, #100]
 205:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 355              		.loc 1 205 23 discriminator 3
 356 00a0 FB6E     		ldr	r3, [r7, #108]
 357 00a2 0433     		adds	r3, r3, #4
 358 00a4 FB66     		str	r3, [r7, #108]
 359              	.L16:
 205:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 360              		.loc 1 205 13 discriminator 1
 361 00a6 FA6E     		ldr	r2, [r7, #108]
 362 00a8 BB68     		ldr	r3, [r7, #8]
 363 00aa 9A42     		cmp	r2, r3
 364 00ac F0D3     		bcc	.L17
 209:./Lib/Src/stm32f4xx_hash_md5.c ****   }
 210:./Lib/Src/stm32f4xx_hash_md5.c ****   
 211:./Lib/Src/stm32f4xx_hash_md5.c ****   /* Start the HASH processor */
 212:./Lib/Src/stm32f4xx_hash_md5.c ****   HASH_StartDigest();
 365              		.loc 1 212 3
 366 00ae FFF7FEFF 		bl	HASH_StartDigest
 367              	.L19:
 213:./Lib/Src/stm32f4xx_hash_md5.c **** 
 214:./Lib/Src/stm32f4xx_hash_md5.c ****   /* wait until the Busy flag is RESET */
 215:./Lib/Src/stm32f4xx_hash_md5.c ****   do
 216:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 217:./Lib/Src/stm32f4xx_hash_md5.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
ARM GAS  /tmp/ccwZvjSo.s 			page 20


 368              		.loc 1 217 18 discriminator 2
 369 00b2 0820     		movs	r0, #8
 370 00b4 FFF7FEFF 		bl	HASH_GetFlagStatus
 371 00b8 0346     		mov	r3, r0
 372              		.loc 1 217 16 discriminator 2
 373 00ba FB65     		str	r3, [r7, #92]
 218:./Lib/Src/stm32f4xx_hash_md5.c ****     counter++;
 374              		.loc 1 218 12 discriminator 2
 375 00bc 3B69     		ldr	r3, [r7, #16]
 376 00be 0133     		adds	r3, r3, #1
 377 00c0 3B61     		str	r3, [r7, #16]
 219:./Lib/Src/stm32f4xx_hash_md5.c ****   }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 378              		.loc 1 219 20 discriminator 2
 379 00c2 3B69     		ldr	r3, [r7, #16]
 380              		.loc 1 219 40 discriminator 2
 381 00c4 B3F5803F 		cmp	r3, #65536
 382 00c8 02D0     		beq	.L18
 383              		.loc 1 219 40 is_stmt 0 discriminator 1
 384 00ca FB6D     		ldr	r3, [r7, #92]
 385 00cc 002B     		cmp	r3, #0
 386 00ce F0D1     		bne	.L19
 387              	.L18:
 220:./Lib/Src/stm32f4xx_hash_md5.c **** 
 221:./Lib/Src/stm32f4xx_hash_md5.c ****   if (busystatus != RESET)
 388              		.loc 1 221 6 is_stmt 1
 389 00d0 FB6D     		ldr	r3, [r7, #92]
 390 00d2 002B     		cmp	r3, #0
 391 00d4 03D0     		beq	.L20
 222:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 223:./Lib/Src/stm32f4xx_hash_md5.c ****      status = ERROR;
 392              		.loc 1 223 13
 393 00d6 0023     		movs	r3, #0
 394 00d8 87F86B30 		strb	r3, [r7, #107]
 395 00dc 89E0     		b	.L21
 396              	.L20:
 224:./Lib/Src/stm32f4xx_hash_md5.c ****   }
 225:./Lib/Src/stm32f4xx_hash_md5.c ****   else
 226:./Lib/Src/stm32f4xx_hash_md5.c ****   {
 227:./Lib/Src/stm32f4xx_hash_md5.c ****     /* Configure the number of valid bits in last word of the Input data */
 228:./Lib/Src/stm32f4xx_hash_md5.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 397              		.loc 1 228 5
 398 00de FB8A     		ldrh	r3, [r7, #22]	@ movhi
 399 00e0 9BB2     		uxth	r3, r3
 400 00e2 1846     		mov	r0, r3
 401 00e4 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 229:./Lib/Src/stm32f4xx_hash_md5.c **** 
 230:./Lib/Src/stm32f4xx_hash_md5.c ****     /* Write the Input block in the IN FIFO */
 231:./Lib/Src/stm32f4xx_hash_md5.c ****     for(i=0; i<Ilen; i+=4)
 402              		.loc 1 231 10
 403 00e8 0023     		movs	r3, #0
 404 00ea FB66     		str	r3, [r7, #108]
 405              		.loc 1 231 5
 406 00ec 0AE0     		b	.L22
 407              	.L23:
 232:./Lib/Src/stm32f4xx_hash_md5.c ****     {
 233:./Lib/Src/stm32f4xx_hash_md5.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 408              		.loc 1 233 20 discriminator 3
ARM GAS  /tmp/ccwZvjSo.s 			page 21


 409 00ee 3B6E     		ldr	r3, [r7, #96]
 410              		.loc 1 233 7 discriminator 3
 411 00f0 1B68     		ldr	r3, [r3]
 412 00f2 1846     		mov	r0, r3
 413 00f4 FFF7FEFF 		bl	HASH_DataIn
 234:./Lib/Src/stm32f4xx_hash_md5.c ****       inputaddr+=4;
 414              		.loc 1 234 16 discriminator 3
 415 00f8 3B6E     		ldr	r3, [r7, #96]
 416 00fa 0433     		adds	r3, r3, #4
 417 00fc 3B66     		str	r3, [r7, #96]
 231:./Lib/Src/stm32f4xx_hash_md5.c ****     {
 418              		.loc 1 231 23 discriminator 3
 419 00fe FB6E     		ldr	r3, [r7, #108]
 420 0100 0433     		adds	r3, r3, #4
 421 0102 FB66     		str	r3, [r7, #108]
 422              	.L22:
 231:./Lib/Src/stm32f4xx_hash_md5.c ****     {
 423              		.loc 1 231 15 discriminator 1
 424 0104 FA6E     		ldr	r2, [r7, #108]
 425 0106 3B68     		ldr	r3, [r7]
 426 0108 9A42     		cmp	r2, r3
 427 010a F0D3     		bcc	.L23
 235:./Lib/Src/stm32f4xx_hash_md5.c ****     }
 236:./Lib/Src/stm32f4xx_hash_md5.c **** 
 237:./Lib/Src/stm32f4xx_hash_md5.c ****     /* Start the HASH processor */
 238:./Lib/Src/stm32f4xx_hash_md5.c ****     HASH_StartDigest();
 428              		.loc 1 238 5
 429 010c FFF7FEFF 		bl	HASH_StartDigest
 239:./Lib/Src/stm32f4xx_hash_md5.c **** 
 240:./Lib/Src/stm32f4xx_hash_md5.c ****     /* wait until the Busy flag is RESET */
 241:./Lib/Src/stm32f4xx_hash_md5.c ****     counter =0;
 430              		.loc 1 241 13
 431 0110 0023     		movs	r3, #0
 432 0112 3B61     		str	r3, [r7, #16]
 433              	.L25:
 242:./Lib/Src/stm32f4xx_hash_md5.c ****     do
 243:./Lib/Src/stm32f4xx_hash_md5.c ****     {
 244:./Lib/Src/stm32f4xx_hash_md5.c ****        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 434              		.loc 1 244 21 discriminator 2
 435 0114 0820     		movs	r0, #8
 436 0116 FFF7FEFF 		bl	HASH_GetFlagStatus
 437 011a 0346     		mov	r3, r0
 438              		.loc 1 244 19 discriminator 2
 439 011c FB65     		str	r3, [r7, #92]
 245:./Lib/Src/stm32f4xx_hash_md5.c ****        counter++;
 440              		.loc 1 245 15 discriminator 2
 441 011e 3B69     		ldr	r3, [r7, #16]
 442 0120 0133     		adds	r3, r3, #1
 443 0122 3B61     		str	r3, [r7, #16]
 246:./Lib/Src/stm32f4xx_hash_md5.c ****     }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 444              		.loc 1 246 22 discriminator 2
 445 0124 3B69     		ldr	r3, [r7, #16]
 446              		.loc 1 246 42 discriminator 2
 447 0126 B3F5803F 		cmp	r3, #65536
 448 012a 02D0     		beq	.L24
 449              		.loc 1 246 42 is_stmt 0 discriminator 1
 450 012c FB6D     		ldr	r3, [r7, #92]
ARM GAS  /tmp/ccwZvjSo.s 			page 22


 451 012e 002B     		cmp	r3, #0
 452 0130 F0D1     		bne	.L25
 453              	.L24:
 247:./Lib/Src/stm32f4xx_hash_md5.c **** 
 248:./Lib/Src/stm32f4xx_hash_md5.c ****     if (busystatus != RESET)
 454              		.loc 1 248 8 is_stmt 1
 455 0132 FB6D     		ldr	r3, [r7, #92]
 456 0134 002B     		cmp	r3, #0
 457 0136 03D0     		beq	.L26
 249:./Lib/Src/stm32f4xx_hash_md5.c ****     {
 250:./Lib/Src/stm32f4xx_hash_md5.c ****       status = ERROR;
 458              		.loc 1 250 14
 459 0138 0023     		movs	r3, #0
 460 013a 87F86B30 		strb	r3, [r7, #107]
 461 013e 58E0     		b	.L21
 462              	.L26:
 251:./Lib/Src/stm32f4xx_hash_md5.c ****     }
 252:./Lib/Src/stm32f4xx_hash_md5.c ****     else
 253:./Lib/Src/stm32f4xx_hash_md5.c ****     {  
 254:./Lib/Src/stm32f4xx_hash_md5.c ****       /* Configure the number of valid bits in last word of the Key */
 255:./Lib/Src/stm32f4xx_hash_md5.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 463              		.loc 1 255 7
 464 0140 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 465 0142 9BB2     		uxth	r3, r3
 466 0144 1846     		mov	r0, r3
 467 0146 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 256:./Lib/Src/stm32f4xx_hash_md5.c **** 
 257:./Lib/Src/stm32f4xx_hash_md5.c ****       /* Write the Key */
 258:./Lib/Src/stm32f4xx_hash_md5.c ****       keyaddr = (uint32_t)Key;
 468              		.loc 1 258 15
 469 014a FB68     		ldr	r3, [r7, #12]
 470 014c 7B66     		str	r3, [r7, #100]
 259:./Lib/Src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 471              		.loc 1 259 12
 472 014e 0023     		movs	r3, #0
 473 0150 FB66     		str	r3, [r7, #108]
 474              		.loc 1 259 7
 475 0152 0AE0     		b	.L27
 476              	.L28:
 260:./Lib/Src/stm32f4xx_hash_md5.c ****       {
 261:./Lib/Src/stm32f4xx_hash_md5.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 477              		.loc 1 261 22 discriminator 3
 478 0154 7B6E     		ldr	r3, [r7, #100]
 479              		.loc 1 261 9 discriminator 3
 480 0156 1B68     		ldr	r3, [r3]
 481 0158 1846     		mov	r0, r3
 482 015a FFF7FEFF 		bl	HASH_DataIn
 262:./Lib/Src/stm32f4xx_hash_md5.c ****         keyaddr+=4;
 483              		.loc 1 262 16 discriminator 3
 484 015e 7B6E     		ldr	r3, [r7, #100]
 485 0160 0433     		adds	r3, r3, #4
 486 0162 7B66     		str	r3, [r7, #100]
 259:./Lib/Src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 487              		.loc 1 259 27 discriminator 3
 488 0164 FB6E     		ldr	r3, [r7, #108]
 489 0166 0433     		adds	r3, r3, #4
 490 0168 FB66     		str	r3, [r7, #108]
ARM GAS  /tmp/ccwZvjSo.s 			page 23


 491              	.L27:
 259:./Lib/Src/stm32f4xx_hash_md5.c ****       for(i=0; i<Keylen; i+=4)
 492              		.loc 1 259 17 discriminator 1
 493 016a FA6E     		ldr	r2, [r7, #108]
 494 016c BB68     		ldr	r3, [r7, #8]
 495 016e 9A42     		cmp	r2, r3
 496 0170 F0D3     		bcc	.L28
 263:./Lib/Src/stm32f4xx_hash_md5.c ****       }
 264:./Lib/Src/stm32f4xx_hash_md5.c ****   
 265:./Lib/Src/stm32f4xx_hash_md5.c ****        /* Start the HASH processor */
 266:./Lib/Src/stm32f4xx_hash_md5.c ****        HASH_StartDigest();
 497              		.loc 1 266 8
 498 0172 FFF7FEFF 		bl	HASH_StartDigest
 267:./Lib/Src/stm32f4xx_hash_md5.c **** 
 268:./Lib/Src/stm32f4xx_hash_md5.c ****        /* wait until the Busy flag is RESET */
 269:./Lib/Src/stm32f4xx_hash_md5.c ****        counter =0;
 499              		.loc 1 269 16
 500 0176 0023     		movs	r3, #0
 501 0178 3B61     		str	r3, [r7, #16]
 502              	.L30:
 270:./Lib/Src/stm32f4xx_hash_md5.c ****        do
 271:./Lib/Src/stm32f4xx_hash_md5.c ****        {
 272:./Lib/Src/stm32f4xx_hash_md5.c ****           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 503              		.loc 1 272 24 discriminator 2
 504 017a 0820     		movs	r0, #8
 505 017c FFF7FEFF 		bl	HASH_GetFlagStatus
 506 0180 0346     		mov	r3, r0
 507              		.loc 1 272 22 discriminator 2
 508 0182 FB65     		str	r3, [r7, #92]
 273:./Lib/Src/stm32f4xx_hash_md5.c ****           counter++;
 509              		.loc 1 273 18 discriminator 2
 510 0184 3B69     		ldr	r3, [r7, #16]
 511 0186 0133     		adds	r3, r3, #1
 512 0188 3B61     		str	r3, [r7, #16]
 274:./Lib/Src/stm32f4xx_hash_md5.c ****       }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 513              		.loc 1 274 24 discriminator 2
 514 018a 3B69     		ldr	r3, [r7, #16]
 515              		.loc 1 274 44 discriminator 2
 516 018c B3F5803F 		cmp	r3, #65536
 517 0190 02D0     		beq	.L29
 518              		.loc 1 274 44 is_stmt 0 discriminator 1
 519 0192 FB6D     		ldr	r3, [r7, #92]
 520 0194 002B     		cmp	r3, #0
 521 0196 F0D1     		bne	.L30
 522              	.L29:
 275:./Lib/Src/stm32f4xx_hash_md5.c **** 
 276:./Lib/Src/stm32f4xx_hash_md5.c ****       if (busystatus != RESET)
 523              		.loc 1 276 10 is_stmt 1
 524 0198 FB6D     		ldr	r3, [r7, #92]
 525 019a 002B     		cmp	r3, #0
 526 019c 03D0     		beq	.L31
 277:./Lib/Src/stm32f4xx_hash_md5.c ****       {
 278:./Lib/Src/stm32f4xx_hash_md5.c ****          status = ERROR;
 527              		.loc 1 278 17
 528 019e 0023     		movs	r3, #0
 529 01a0 87F86B30 		strb	r3, [r7, #107]
 530 01a4 25E0     		b	.L21
ARM GAS  /tmp/ccwZvjSo.s 			page 24


 531              	.L31:
 279:./Lib/Src/stm32f4xx_hash_md5.c ****       }
 280:./Lib/Src/stm32f4xx_hash_md5.c ****       else
 281:./Lib/Src/stm32f4xx_hash_md5.c ****       {
 282:./Lib/Src/stm32f4xx_hash_md5.c ****          /* Read the message digest */
 283:./Lib/Src/stm32f4xx_hash_md5.c ****          HASH_GetDigest(&MD5_MessageDigest);
 532              		.loc 1 283 10
 533 01a6 07F11803 		add	r3, r7, #24
 534 01aa 1846     		mov	r0, r3
 535 01ac FFF7FEFF 		bl	HASH_GetDigest
 284:./Lib/Src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 536              		.loc 1 284 38
 537 01b0 BA69     		ldr	r2, [r7, #24]
 538              		.loc 1 284 11
 539 01b2 BB6D     		ldr	r3, [r7, #88]
 540 01b4 BA64     		str	r2, [r7, #72]
 541              	.LBB26:
 542              	.LBB27:
 543              		.loc 2 498 10
 544 01b6 BA6C     		ldr	r2, [r7, #72]
 545 01b8 12BA     		rev	r2, r2
 546              	.LBE27:
 547              	.LBE26:
 548              		.loc 1 284 36
 549 01ba 1A60     		str	r2, [r3]
 285:./Lib/Src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 550              		.loc 1 285 20
 551 01bc BB6D     		ldr	r3, [r7, #88]
 552 01be 0433     		adds	r3, r3, #4
 553 01c0 BB65     		str	r3, [r7, #88]
 286:./Lib/Src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 554              		.loc 1 286 38
 555 01c2 FA69     		ldr	r2, [r7, #28]
 556              		.loc 1 286 11
 557 01c4 BB6D     		ldr	r3, [r7, #88]
 558 01c6 FA64     		str	r2, [r7, #76]
 559              	.LBB28:
 560              	.LBB29:
 561              		.loc 2 498 10
 562 01c8 FA6C     		ldr	r2, [r7, #76]
 563 01ca 12BA     		rev	r2, r2
 564              	.LBE29:
 565              	.LBE28:
 566              		.loc 1 286 36
 567 01cc 1A60     		str	r2, [r3]
 287:./Lib/Src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 568              		.loc 1 287 20
 569 01ce BB6D     		ldr	r3, [r7, #88]
 570 01d0 0433     		adds	r3, r3, #4
 571 01d2 BB65     		str	r3, [r7, #88]
 288:./Lib/Src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 572              		.loc 1 288 38
 573 01d4 3A6A     		ldr	r2, [r7, #32]
 574              		.loc 1 288 11
 575 01d6 BB6D     		ldr	r3, [r7, #88]
 576 01d8 3A65     		str	r2, [r7, #80]
 577              	.LBB30:
ARM GAS  /tmp/ccwZvjSo.s 			page 25


 578              	.LBB31:
 579              		.loc 2 498 10
 580 01da 3A6D     		ldr	r2, [r7, #80]
 581 01dc 12BA     		rev	r2, r2
 582              	.LBE31:
 583              	.LBE30:
 584              		.loc 1 288 36
 585 01de 1A60     		str	r2, [r3]
 289:./Lib/Src/stm32f4xx_hash_md5.c ****          outputaddr+=4;
 586              		.loc 1 289 20
 587 01e0 BB6D     		ldr	r3, [r7, #88]
 588 01e2 0433     		adds	r3, r3, #4
 589 01e4 BB65     		str	r3, [r7, #88]
 290:./Lib/Src/stm32f4xx_hash_md5.c ****          *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 590              		.loc 1 290 38
 591 01e6 7A6A     		ldr	r2, [r7, #36]
 592              		.loc 1 290 11
 593 01e8 BB6D     		ldr	r3, [r7, #88]
 594 01ea 7A65     		str	r2, [r7, #84]
 595              	.LBB32:
 596              	.LBB33:
 597              		.loc 2 498 10
 598 01ec 7A6D     		ldr	r2, [r7, #84]
 599 01ee 12BA     		rev	r2, r2
 600              	.LBE33:
 601              	.LBE32:
 602              		.loc 1 290 36
 603 01f0 1A60     		str	r2, [r3]
 604              	.L21:
 291:./Lib/Src/stm32f4xx_hash_md5.c ****       }
 292:./Lib/Src/stm32f4xx_hash_md5.c ****     }
 293:./Lib/Src/stm32f4xx_hash_md5.c ****   }
 294:./Lib/Src/stm32f4xx_hash_md5.c ****   return status;  
 605              		.loc 1 294 10
 606 01f2 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 295:./Lib/Src/stm32f4xx_hash_md5.c **** }
 607              		.loc 1 295 1
 608 01f6 1846     		mov	r0, r3
 609 01f8 7037     		adds	r7, r7, #112
 610              		.cfi_def_cfa_offset 8
 611 01fa BD46     		mov	sp, r7
 612              		.cfi_def_cfa_register 13
 613              		@ sp needed
 614 01fc 80BD     		pop	{r7, pc}
 615              		.cfi_endproc
 616              	.LFE124:
 618              		.text
 619              	.Letext0:
 620              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 621              		.file 4 "./Start/stm32f4xx.h"
 622              		.file 5 "./Lib/inc/stm32f4xx_hash.h"
ARM GAS  /tmp/ccwZvjSo.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash_md5.c
     /tmp/ccwZvjSo.s:21     .text.HASH_MD5:0000000000000000 $t
     /tmp/ccwZvjSo.s:27     .text.HASH_MD5:0000000000000000 HASH_MD5
     /tmp/ccwZvjSo.s:239    .text.HMAC_MD5:0000000000000000 $t
     /tmp/ccwZvjSo.s:245    .text.HMAC_MD5:0000000000000000 HMAC_MD5

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
