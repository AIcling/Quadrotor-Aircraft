ARM GAS  /tmp/ccRWa7zz.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_cryp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_cryp.c"
  20              		.section	.text.CRYP_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	CRYP_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	CRYP_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_cryp.c **** /**
   2:./Lib/Src/stm32f4xx_cryp.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_cryp.c ****   * @file    stm32f4xx_cryp.c
   4:./Lib/Src/stm32f4xx_cryp.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_cryp.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_cryp.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_cryp.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_cryp.c ****   *          functionalities of the  Cryptographic processor (CRYP) peripheral:
   9:./Lib/Src/stm32f4xx_cryp.c ****   *           + Initialization and Configuration functions
  10:./Lib/Src/stm32f4xx_cryp.c ****   *           + Data treatment functions 
  11:./Lib/Src/stm32f4xx_cryp.c ****   *           + Context swapping functions     
  12:./Lib/Src/stm32f4xx_cryp.c ****   *           + DMA interface function       
  13:./Lib/Src/stm32f4xx_cryp.c ****   *           + Interrupts and flags management       
  14:./Lib/Src/stm32f4xx_cryp.c ****   *
  15:./Lib/Src/stm32f4xx_cryp.c **** @verbatim
  16:./Lib/Src/stm32f4xx_cryp.c ****  ===================================================================      
  17:./Lib/Src/stm32f4xx_cryp.c ****                  ##### How to use this driver #####
  18:./Lib/Src/stm32f4xx_cryp.c ****  =================================================================== 
  19:./Lib/Src/stm32f4xx_cryp.c ****  [..]
  20:./Lib/Src/stm32f4xx_cryp.c ****    (#) Enable the CRYP controller clock using 
  21:./Lib/Src/stm32f4xx_cryp.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  22:./Lib/Src/stm32f4xx_cryp.c ****   
  23:./Lib/Src/stm32f4xx_cryp.c ****    (#) Initialize the CRYP using CRYP_Init(), CRYP_KeyInit() and if needed 
  24:./Lib/Src/stm32f4xx_cryp.c ****        CRYP_IVInit(). 
  25:./Lib/Src/stm32f4xx_cryp.c ****   
  26:./Lib/Src/stm32f4xx_cryp.c ****    (#) Flush the IN and OUT FIFOs by using CRYP_FIFOFlush() function.
  27:./Lib/Src/stm32f4xx_cryp.c ****   
  28:./Lib/Src/stm32f4xx_cryp.c ****    (#) Enable the CRYP controller using the CRYP_Cmd() function. 
  29:./Lib/Src/stm32f4xx_cryp.c ****   
  30:./Lib/Src/stm32f4xx_cryp.c ****    (#) If using DMA for Data input and output transfer, activate the needed DMA 
ARM GAS  /tmp/ccRWa7zz.s 			page 2


  31:./Lib/Src/stm32f4xx_cryp.c ****        Requests using CRYP_DMACmd() function 
  32:./Lib/Src/stm32f4xx_cryp.c ****   
  33:./Lib/Src/stm32f4xx_cryp.c ****    (#) If DMA is not used for data transfer, use CRYP_DataIn() and  CRYP_DataOut() 
  34:./Lib/Src/stm32f4xx_cryp.c ****        functions to enter data to IN FIFO and get result from OUT FIFO.
  35:./Lib/Src/stm32f4xx_cryp.c ****   
  36:./Lib/Src/stm32f4xx_cryp.c ****    (#) To control CRYP events you can use one of the following two methods:
  37:./Lib/Src/stm32f4xx_cryp.c ****        (++) Check on CRYP flags using the CRYP_GetFlagStatus() function.  
  38:./Lib/Src/stm32f4xx_cryp.c ****        (++) Use CRYP interrupts through the function CRYP_ITConfig() at 
  39:./Lib/Src/stm32f4xx_cryp.c ****             initialization phase and CRYP_GetITStatus() function into interrupt 
  40:./Lib/Src/stm32f4xx_cryp.c ****             routines in processing phase.
  41:./Lib/Src/stm32f4xx_cryp.c ****          
  42:./Lib/Src/stm32f4xx_cryp.c ****    (#) Save and restore Cryptographic processor context using CRYP_SaveContext() 
  43:./Lib/Src/stm32f4xx_cryp.c ****        and CRYP_RestoreContext() functions.     
  44:./Lib/Src/stm32f4xx_cryp.c ****   
  45:./Lib/Src/stm32f4xx_cryp.c ****   
  46:./Lib/Src/stm32f4xx_cryp.c ****  *** Procedure to perform an encryption or a decryption ***
  47:./Lib/Src/stm32f4xx_cryp.c ****  ========================================================== 
  48:./Lib/Src/stm32f4xx_cryp.c ****   
  49:./Lib/Src/stm32f4xx_cryp.c ****  *** Initialization ***
  50:./Lib/Src/stm32f4xx_cryp.c ****  ====================== 
  51:./Lib/Src/stm32f4xx_cryp.c ****  [..] 
  52:./Lib/Src/stm32f4xx_cryp.c ****    (#) Initialize the peripheral using CRYP_Init(), CRYP_KeyInit() and CRYP_IVInit 
  53:./Lib/Src/stm32f4xx_cryp.c ****        functions:
  54:./Lib/Src/stm32f4xx_cryp.c ****        (++) Configure the key size (128-, 192- or 256-bit, in the AES only) 
  55:./Lib/Src/stm32f4xx_cryp.c ****        (++) Enter the symmetric key 
  56:./Lib/Src/stm32f4xx_cryp.c ****        (++) Configure the data type
  57:./Lib/Src/stm32f4xx_cryp.c ****        (++) In case of decryption in AES-ECB or AES-CBC, you must prepare 
  58:./Lib/Src/stm32f4xx_cryp.c ****             the key: configure the key preparation mode. Then Enable the CRYP 
  59:./Lib/Src/stm32f4xx_cryp.c ****             peripheral using CRYP_Cmd() function: the BUSY flag is set. 
  60:./Lib/Src/stm32f4xx_cryp.c ****             Wait until BUSY flag is reset : the key is prepared for decryption
  61:./Lib/Src/stm32f4xx_cryp.c ****        (++) Configure the algorithm and chaining (the DES/TDES in ECB/CBC, the 
  62:./Lib/Src/stm32f4xx_cryp.c ****             AES in ECB/CBC/CTR) 
  63:./Lib/Src/stm32f4xx_cryp.c ****        (++) Configure the direction (encryption/decryption).
  64:./Lib/Src/stm32f4xx_cryp.c ****        (++) Write the initialization vectors (in CBC or CTR modes only)
  65:./Lib/Src/stm32f4xx_cryp.c ****   
  66:./Lib/Src/stm32f4xx_cryp.c ****    (#) Flush the IN and OUT FIFOs using the CRYP_FIFOFlush() function
  67:./Lib/Src/stm32f4xx_cryp.c ****   
  68:./Lib/Src/stm32f4xx_cryp.c ****   
  69:./Lib/Src/stm32f4xx_cryp.c ****   *** Basic Processing mode (polling mode) *** 
  70:./Lib/Src/stm32f4xx_cryp.c ****   ============================================  
  71:./Lib/Src/stm32f4xx_cryp.c ****   [..]
  72:./Lib/Src/stm32f4xx_cryp.c ****     (#) Enable the cryptographic processor using CRYP_Cmd() function.
  73:./Lib/Src/stm32f4xx_cryp.c ****   
  74:./Lib/Src/stm32f4xx_cryp.c ****     (#) Write the first blocks in the input FIFO (2 to 8 words) using 
  75:./Lib/Src/stm32f4xx_cryp.c ****         CRYP_DataIn() function.
  76:./Lib/Src/stm32f4xx_cryp.c ****   
  77:./Lib/Src/stm32f4xx_cryp.c ****     (#) Repeat the following sequence until the complete message has been 
  78:./Lib/Src/stm32f4xx_cryp.c ****         processed:
  79:./Lib/Src/stm32f4xx_cryp.c ****   
  80:./Lib/Src/stm32f4xx_cryp.c ****         (++) Wait for flag CRYP_FLAG_OFNE occurs (using CRYP_GetFlagStatus() 
  81:./Lib/Src/stm32f4xx_cryp.c ****             function), then read the OUT-FIFO using CRYP_DataOut() function
  82:./Lib/Src/stm32f4xx_cryp.c ****             (1 block or until the FIFO is empty)
  83:./Lib/Src/stm32f4xx_cryp.c ****   
  84:./Lib/Src/stm32f4xx_cryp.c ****          (++) Wait for flag CRYP_FLAG_IFNF occurs, (using CRYP_GetFlagStatus() 
  85:./Lib/Src/stm32f4xx_cryp.c ****             function then write the IN FIFO using CRYP_DataIn() function 
  86:./Lib/Src/stm32f4xx_cryp.c ****             (1 block or until the FIFO is full)
  87:./Lib/Src/stm32f4xx_cryp.c ****   
ARM GAS  /tmp/ccRWa7zz.s 			page 3


  88:./Lib/Src/stm32f4xx_cryp.c ****     (#) At the end of the processing, CRYP_FLAG_BUSY flag will be reset and 
  89:./Lib/Src/stm32f4xx_cryp.c ****           both FIFOs are empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is 
  90:./Lib/Src/stm32f4xx_cryp.c ****           reset). You can disable the peripheral using CRYP_Cmd() function.
  91:./Lib/Src/stm32f4xx_cryp.c ****   
  92:./Lib/Src/stm32f4xx_cryp.c ****  *** Interrupts Processing mode *** 
  93:./Lib/Src/stm32f4xx_cryp.c ****  ==================================
  94:./Lib/Src/stm32f4xx_cryp.c ****  [..] In this mode, Processing is done when the data are transferred by the 
  95:./Lib/Src/stm32f4xx_cryp.c ****       CPU during interrupts.
  96:./Lib/Src/stm32f4xx_cryp.c ****   
  97:./Lib/Src/stm32f4xx_cryp.c ****     (#) Enable the interrupts CRYP_IT_INI and CRYP_IT_OUTI using CRYP_ITConfig()
  98:./Lib/Src/stm32f4xx_cryp.c ****         function.
  99:./Lib/Src/stm32f4xx_cryp.c ****   
 100:./Lib/Src/stm32f4xx_cryp.c ****     (#) Enable the cryptographic processor using CRYP_Cmd() function.
 101:./Lib/Src/stm32f4xx_cryp.c ****   
 102:./Lib/Src/stm32f4xx_cryp.c ****     (#) In the CRYP_IT_INI interrupt handler : load the input message into the 
 103:./Lib/Src/stm32f4xx_cryp.c ****          IN FIFO using CRYP_DataIn() function . You can load 2 or 4 words at a 
 104:./Lib/Src/stm32f4xx_cryp.c ****          time, or load data until the IN FIFO is full. When the last word of
 105:./Lib/Src/stm32f4xx_cryp.c ****          the message has been entered into the IN FIFO, disable the CRYP_IT_INI 
 106:./Lib/Src/stm32f4xx_cryp.c ****          interrupt (using CRYP_ITConfig() function).
 107:./Lib/Src/stm32f4xx_cryp.c ****   
 108:./Lib/Src/stm32f4xx_cryp.c ****     (#) In the CRYP_IT_OUTI interrupt handler : read the output message from 
 109:./Lib/Src/stm32f4xx_cryp.c ****          the OUT FIFO using CRYP_DataOut() function. You can read 1 block (2 or 
 110:./Lib/Src/stm32f4xx_cryp.c ****          4 words) at a time or read data until the FIFO is empty.
 111:./Lib/Src/stm32f4xx_cryp.c ****          When the last word has been read, INIM=0, BUSY=0 and both FIFOs are 
 112:./Lib/Src/stm32f4xx_cryp.c ****          empty (CRYP_FLAG_IFEM is set and CRYP_FLAG_OFNE is reset). 
 113:./Lib/Src/stm32f4xx_cryp.c ****          You can disable the CRYP_IT_OUTI interrupt (using CRYP_ITConfig() 
 114:./Lib/Src/stm32f4xx_cryp.c ****          function) and you can disable the peripheral using CRYP_Cmd() function.
 115:./Lib/Src/stm32f4xx_cryp.c ****   
 116:./Lib/Src/stm32f4xx_cryp.c ****  *** DMA Processing mode *** 
 117:./Lib/Src/stm32f4xx_cryp.c ****  ===========================
 118:./Lib/Src/stm32f4xx_cryp.c ****  [..] In this mode, Processing is done when the DMA is used to transfer the 
 119:./Lib/Src/stm32f4xx_cryp.c ****       data from/to the memory.
 120:./Lib/Src/stm32f4xx_cryp.c ****   
 121:./Lib/Src/stm32f4xx_cryp.c ****     (#) Configure the DMA controller to transfer the input data from the 
 122:./Lib/Src/stm32f4xx_cryp.c ****          memory using DMA_Init() function. 
 123:./Lib/Src/stm32f4xx_cryp.c ****          The transfer length is the length of the message. 
 124:./Lib/Src/stm32f4xx_cryp.c ****          As message padding is not managed by the peripheral, the message 
 125:./Lib/Src/stm32f4xx_cryp.c ****          length must be an entire number of blocks. The data are transferred 
 126:./Lib/Src/stm32f4xx_cryp.c ****          in burst mode. The burst length is 4 words in the AES and 2 or 4 
 127:./Lib/Src/stm32f4xx_cryp.c ****          words in the DES/TDES. The DMA should be configured to set an 
 128:./Lib/Src/stm32f4xx_cryp.c ****          interrupt on transfer completion of the output data to indicate that 
 129:./Lib/Src/stm32f4xx_cryp.c ****          the processing is finished. 
 130:./Lib/Src/stm32f4xx_cryp.c ****          Refer to DMA peripheral driver for more details.  
 131:./Lib/Src/stm32f4xx_cryp.c ****   
 132:./Lib/Src/stm32f4xx_cryp.c ****      (#) Enable the cryptographic processor using CRYP_Cmd() function. 
 133:./Lib/Src/stm32f4xx_cryp.c ****          Enable the DMA requests CRYP_DMAReq_DataIN and CRYP_DMAReq_DataOUT 
 134:./Lib/Src/stm32f4xx_cryp.c ****          using CRYP_DMACmd() function.
 135:./Lib/Src/stm32f4xx_cryp.c ****   
 136:./Lib/Src/stm32f4xx_cryp.c ****      (#) All the transfers and processing are managed by the DMA and the 
 137:./Lib/Src/stm32f4xx_cryp.c ****          cryptographic processor. The DMA transfer complete interrupt indicates 
 138:./Lib/Src/stm32f4xx_cryp.c ****          that the processing is complete. Both FIFOs are normally empty and 
 139:./Lib/Src/stm32f4xx_cryp.c ****          CRYP_FLAG_BUSY flag is reset.
 140:./Lib/Src/stm32f4xx_cryp.c ****   
 141:./Lib/Src/stm32f4xx_cryp.c ****     @endverbatim
 142:./Lib/Src/stm32f4xx_cryp.c ****   *
 143:./Lib/Src/stm32f4xx_cryp.c ****   ******************************************************************************
 144:./Lib/Src/stm32f4xx_cryp.c ****   * @attention
ARM GAS  /tmp/ccRWa7zz.s 			page 4


 145:./Lib/Src/stm32f4xx_cryp.c ****   *
 146:./Lib/Src/stm32f4xx_cryp.c ****   * Copyright (c) 2016 STMicroelectronics.
 147:./Lib/Src/stm32f4xx_cryp.c ****   * All rights reserved.
 148:./Lib/Src/stm32f4xx_cryp.c ****   *
 149:./Lib/Src/stm32f4xx_cryp.c ****   * This software is licensed under terms that can be found in the LICENSE file
 150:./Lib/Src/stm32f4xx_cryp.c ****   * in the root directory of this software component.
 151:./Lib/Src/stm32f4xx_cryp.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 152:./Lib/Src/stm32f4xx_cryp.c ****   *
 153:./Lib/Src/stm32f4xx_cryp.c ****   ******************************************************************************
 154:./Lib/Src/stm32f4xx_cryp.c ****   */
 155:./Lib/Src/stm32f4xx_cryp.c **** 
 156:./Lib/Src/stm32f4xx_cryp.c **** /* Includes ------------------------------------------------------------------*/
 157:./Lib/Src/stm32f4xx_cryp.c **** #include "stm32f4xx_cryp.h"
 158:./Lib/Src/stm32f4xx_cryp.c **** #include "stm32f4xx_rcc.h"
 159:./Lib/Src/stm32f4xx_cryp.c **** 
 160:./Lib/Src/stm32f4xx_cryp.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 161:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 162:./Lib/Src/stm32f4xx_cryp.c ****   */
 163:./Lib/Src/stm32f4xx_cryp.c **** 
 164:./Lib/Src/stm32f4xx_cryp.c **** /** @defgroup CRYP 
 165:./Lib/Src/stm32f4xx_cryp.c ****   * @brief CRYP driver modules
 166:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 167:./Lib/Src/stm32f4xx_cryp.c ****   */ 
 168:./Lib/Src/stm32f4xx_cryp.c **** 
 169:./Lib/Src/stm32f4xx_cryp.c **** /* Private typedef -----------------------------------------------------------*/
 170:./Lib/Src/stm32f4xx_cryp.c **** /* Private define ------------------------------------------------------------*/
 171:./Lib/Src/stm32f4xx_cryp.c **** #define FLAG_MASK     ((uint8_t)0x20)
 172:./Lib/Src/stm32f4xx_cryp.c **** #define MAX_TIMEOUT   ((uint16_t)0xFFFF)
 173:./Lib/Src/stm32f4xx_cryp.c **** 
 174:./Lib/Src/stm32f4xx_cryp.c **** /* Private macro -------------------------------------------------------------*/
 175:./Lib/Src/stm32f4xx_cryp.c **** /* Private variables ---------------------------------------------------------*/
 176:./Lib/Src/stm32f4xx_cryp.c **** /* Private function prototypes -----------------------------------------------*/
 177:./Lib/Src/stm32f4xx_cryp.c **** /* Private functions ---------------------------------------------------------*/
 178:./Lib/Src/stm32f4xx_cryp.c **** 
 179:./Lib/Src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Private_Functions
 180:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 181:./Lib/Src/stm32f4xx_cryp.c ****   */ 
 182:./Lib/Src/stm32f4xx_cryp.c **** 
 183:./Lib/Src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group1 Initialization and Configuration functions
 184:./Lib/Src/stm32f4xx_cryp.c ****  *  @brief    Initialization and Configuration functions 
 185:./Lib/Src/stm32f4xx_cryp.c ****  *
 186:./Lib/Src/stm32f4xx_cryp.c **** @verbatim    
 187:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================
 188:./Lib/Src/stm32f4xx_cryp.c ****              ##### Initialization and Configuration functions #####
 189:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================  
 190:./Lib/Src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to 
 191:./Lib/Src/stm32f4xx_cryp.c ****    (+) Initialize the cryptographic Processor using CRYP_Init() function 
 192:./Lib/Src/stm32f4xx_cryp.c ****        (++)  Encrypt or Decrypt 
 193:./Lib/Src/stm32f4xx_cryp.c ****        (++)  mode : TDES-ECB, TDES-CBC, 
 194:./Lib/Src/stm32f4xx_cryp.c ****                     DES-ECB, DES-CBC, 
 195:./Lib/Src/stm32f4xx_cryp.c ****                     AES-ECB, AES-CBC, AES-CTR, AES-Key, AES-GCM, AES-CCM 
 196:./Lib/Src/stm32f4xx_cryp.c ****        (++) DataType :  32-bit data, 16-bit data, bit data or bit-string
 197:./Lib/Src/stm32f4xx_cryp.c ****        (++) Key Size (only in AES modes)
 198:./Lib/Src/stm32f4xx_cryp.c ****    (+) Configure the Encrypt or Decrypt Key using CRYP_KeyInit() function 
 199:./Lib/Src/stm32f4xx_cryp.c ****    (+) Configure the Initialization Vectors(IV) for CBC and CTR modes using 
 200:./Lib/Src/stm32f4xx_cryp.c ****        CRYP_IVInit() function.  
 201:./Lib/Src/stm32f4xx_cryp.c ****    (+) Flushes the IN and OUT FIFOs : using CRYP_FIFOFlush() function.                         
ARM GAS  /tmp/ccRWa7zz.s 			page 5


 202:./Lib/Src/stm32f4xx_cryp.c ****    (+) Enable or disable the CRYP Processor using CRYP_Cmd() function 
 203:./Lib/Src/stm32f4xx_cryp.c ****        
 204:./Lib/Src/stm32f4xx_cryp.c **** @endverbatim
 205:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 206:./Lib/Src/stm32f4xx_cryp.c ****   */
 207:./Lib/Src/stm32f4xx_cryp.c **** /**
 208:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Deinitializes the CRYP peripheral registers to their default reset values
 209:./Lib/Src/stm32f4xx_cryp.c ****   * @param  None
 210:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 211:./Lib/Src/stm32f4xx_cryp.c ****   */
 212:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_DeInit(void)
 213:./Lib/Src/stm32f4xx_cryp.c **** {
  29              		.loc 1 213 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
 214:./Lib/Src/stm32f4xx_cryp.c ****   /* Enable CRYP reset state */
 215:./Lib/Src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
  39              		.loc 1 215 3
  40 0004 0121     		movs	r1, #1
  41 0006 1020     		movs	r0, #16
  42 0008 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 216:./Lib/Src/stm32f4xx_cryp.c **** 
 217:./Lib/Src/stm32f4xx_cryp.c ****   /* Release CRYP from reset state */
 218:./Lib/Src/stm32f4xx_cryp.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
  43              		.loc 1 218 3
  44 000c 0021     		movs	r1, #0
  45 000e 1020     		movs	r0, #16
  46 0010 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
 219:./Lib/Src/stm32f4xx_cryp.c **** }
  47              		.loc 1 219 1
  48 0014 00BF     		nop
  49 0016 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.CRYP_Init,"ax",%progbits
  54              		.align	1
  55              		.global	CRYP_Init
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	CRYP_Init:
  61              	.LFB124:
 220:./Lib/Src/stm32f4xx_cryp.c **** 
 221:./Lib/Src/stm32f4xx_cryp.c **** /**
 222:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP peripheral according to the specified parameters
 223:./Lib/Src/stm32f4xx_cryp.c ****   *         in the CRYP_InitStruct.
 224:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
 225:./Lib/Src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP peripheral.
 226:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 227:./Lib/Src/stm32f4xx_cryp.c ****   */
ARM GAS  /tmp/ccRWa7zz.s 			page 6


 228:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
 229:./Lib/Src/stm32f4xx_cryp.c **** {
  62              		.loc 1 229 1
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 8
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 83B0     		sub	sp, sp, #12
  71              		.cfi_def_cfa_offset 16
  72 0004 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
 230:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the parameters */
 231:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
 232:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
 233:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));
 234:./Lib/Src/stm32f4xx_cryp.c **** 
 235:./Lib/Src/stm32f4xx_cryp.c ****   /* Select Algorithm mode*/  
 236:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGOMODE;
  75              		.loc 1 236 7
  76 0008 254B     		ldr	r3, .L4
  77 000a 1B68     		ldr	r3, [r3]
  78 000c 244A     		ldr	r2, .L4
  79              		.loc 1 236 12
  80 000e 23F40023 		bic	r3, r3, #524288
  81 0012 23F03803 		bic	r3, r3, #56
  82 0016 1360     		str	r3, [r2]
 237:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
  83              		.loc 1 237 7
  84 0018 214B     		ldr	r3, .L4
  85 001a 1A68     		ldr	r2, [r3]
  86              		.loc 1 237 30
  87 001c 7B68     		ldr	r3, [r7, #4]
  88 001e 5B68     		ldr	r3, [r3, #4]
  89              		.loc 1 237 7
  90 0020 1F49     		ldr	r1, .L4
  91              		.loc 1 237 12
  92 0022 1343     		orrs	r3, r3, r2
  93 0024 0B60     		str	r3, [r1]
 238:./Lib/Src/stm32f4xx_cryp.c **** 
 239:./Lib/Src/stm32f4xx_cryp.c ****   /* Select dataType */ 
 240:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_DATATYPE;
  94              		.loc 1 240 7
  95 0026 1E4B     		ldr	r3, .L4
  96 0028 1B68     		ldr	r3, [r3]
  97 002a 1D4A     		ldr	r2, .L4
  98              		.loc 1 240 12
  99 002c 23F0C003 		bic	r3, r3, #192
 100 0030 1360     		str	r3, [r2]
 241:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 101              		.loc 1 241 7
 102 0032 1B4B     		ldr	r3, .L4
 103 0034 1A68     		ldr	r2, [r3]
 104              		.loc 1 241 30
ARM GAS  /tmp/ccRWa7zz.s 			page 7


 105 0036 7B68     		ldr	r3, [r7, #4]
 106 0038 9B68     		ldr	r3, [r3, #8]
 107              		.loc 1 241 7
 108 003a 1949     		ldr	r1, .L4
 109              		.loc 1 241 12
 110 003c 1343     		orrs	r3, r3, r2
 111 003e 0B60     		str	r3, [r1]
 242:./Lib/Src/stm32f4xx_cryp.c **** 
 243:./Lib/Src/stm32f4xx_cryp.c ****   /* select Key size (used only with AES algorithm) */
 244:./Lib/Src/stm32f4xx_cryp.c ****   if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 112              		.loc 1 244 23
 113 0040 7B68     		ldr	r3, [r7, #4]
 114 0042 5B68     		ldr	r3, [r3, #4]
 115              		.loc 1 244 6
 116 0044 002B     		cmp	r3, #0
 117 0046 18D0     		beq	.L3
 245:./Lib/Src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 118              		.loc 1 245 23 discriminator 1
 119 0048 7B68     		ldr	r3, [r7, #4]
 120 004a 5B68     		ldr	r3, [r3, #4]
 244:./Lib/Src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 121              		.loc 1 244 66 discriminator 1
 122 004c 082B     		cmp	r3, #8
 123 004e 14D0     		beq	.L3
 246:./Lib/Src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 124              		.loc 1 246 23
 125 0050 7B68     		ldr	r3, [r7, #4]
 126 0052 5B68     		ldr	r3, [r3, #4]
 245:./Lib/Src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 127              		.loc 1 245 66
 128 0054 102B     		cmp	r3, #16
 129 0056 10D0     		beq	.L3
 247:./Lib/Src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 130              		.loc 1 247 23
 131 0058 7B68     		ldr	r3, [r7, #4]
 132 005a 5B68     		ldr	r3, [r3, #4]
 246:./Lib/Src/stm32f4xx_cryp.c ****       (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 133              		.loc 1 246 65
 134 005c 182B     		cmp	r3, #24
 135 005e 0CD0     		beq	.L3
 248:./Lib/Src/stm32f4xx_cryp.c ****   {
 249:./Lib/Src/stm32f4xx_cryp.c ****     assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
 250:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_KEYSIZE;
 136              		.loc 1 250 9
 137 0060 0F4B     		ldr	r3, .L4
 138 0062 1B68     		ldr	r3, [r3]
 139 0064 0E4A     		ldr	r2, .L4
 140              		.loc 1 250 14
 141 0066 23F44073 		bic	r3, r3, #768
 142 006a 1360     		str	r3, [r2]
 251:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 143              		.loc 1 251 9
 144 006c 0C4B     		ldr	r3, .L4
 145 006e 1A68     		ldr	r2, [r3]
 146              		.loc 1 251 32
 147 0070 7B68     		ldr	r3, [r7, #4]
 148 0072 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccRWa7zz.s 			page 8


 149              		.loc 1 251 9
 150 0074 0A49     		ldr	r1, .L4
 151              		.loc 1 251 14
 152 0076 1343     		orrs	r3, r3, r2
 153 0078 0B60     		str	r3, [r1]
 154              	.L3:
 252:./Lib/Src/stm32f4xx_cryp.c ****                                                   configured once the key has 
 253:./Lib/Src/stm32f4xx_cryp.c ****                                                   been prepared */
 254:./Lib/Src/stm32f4xx_cryp.c ****   }
 255:./Lib/Src/stm32f4xx_cryp.c **** 
 256:./Lib/Src/stm32f4xx_cryp.c ****   /* Select data Direction */ 
 257:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR &= ~CRYP_CR_ALGODIR;
 155              		.loc 1 257 7
 156 007a 094B     		ldr	r3, .L4
 157 007c 1B68     		ldr	r3, [r3]
 158 007e 084A     		ldr	r2, .L4
 159              		.loc 1 257 12
 160 0080 23F00403 		bic	r3, r3, #4
 161 0084 1360     		str	r3, [r2]
 258:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 162              		.loc 1 258 7
 163 0086 064B     		ldr	r3, .L4
 164 0088 1A68     		ldr	r2, [r3]
 165              		.loc 1 258 30
 166 008a 7B68     		ldr	r3, [r7, #4]
 167 008c 1B68     		ldr	r3, [r3]
 168              		.loc 1 258 7
 169 008e 0449     		ldr	r1, .L4
 170              		.loc 1 258 12
 171 0090 1343     		orrs	r3, r3, r2
 172 0092 0B60     		str	r3, [r1]
 259:./Lib/Src/stm32f4xx_cryp.c **** }
 173              		.loc 1 259 1
 174 0094 00BF     		nop
 175 0096 0C37     		adds	r7, r7, #12
 176              		.cfi_def_cfa_offset 4
 177 0098 BD46     		mov	sp, r7
 178              		.cfi_def_cfa_register 13
 179              		@ sp needed
 180 009a 5DF8047B 		ldr	r7, [sp], #4
 181              		.cfi_restore 7
 182              		.cfi_def_cfa_offset 0
 183 009e 7047     		bx	lr
 184              	.L5:
 185              		.align	2
 186              	.L4:
 187 00a0 00000650 		.word	1342570496
 188              		.cfi_endproc
 189              	.LFE124:
 191              		.section	.text.CRYP_StructInit,"ax",%progbits
 192              		.align	1
 193              		.global	CRYP_StructInit
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 198              	CRYP_StructInit:
 199              	.LFB125:
ARM GAS  /tmp/ccRWa7zz.s 			page 9


 260:./Lib/Src/stm32f4xx_cryp.c **** 
 261:./Lib/Src/stm32f4xx_cryp.c **** /**
 262:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_InitStruct member with its default value.
 263:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
 264:./Lib/Src/stm32f4xx_cryp.c ****   *         be initialized.
 265:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 266:./Lib/Src/stm32f4xx_cryp.c ****   */
 267:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
 268:./Lib/Src/stm32f4xx_cryp.c **** {
 200              		.loc 1 268 1
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 8
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205 0000 80B4     		push	{r7}
 206              		.cfi_def_cfa_offset 4
 207              		.cfi_offset 7, -4
 208 0002 83B0     		sub	sp, sp, #12
 209              		.cfi_def_cfa_offset 16
 210 0004 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 212 0006 7860     		str	r0, [r7, #4]
 269:./Lib/Src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_AlgoDir member */
 270:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 213              		.loc 1 270 33
 214 0008 7B68     		ldr	r3, [r7, #4]
 215 000a 0022     		movs	r2, #0
 216 000c 1A60     		str	r2, [r3]
 271:./Lib/Src/stm32f4xx_cryp.c **** 
 272:./Lib/Src/stm32f4xx_cryp.c ****   /* initialize the CRYP_AlgoMode member */
 273:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 217              		.loc 1 273 34
 218 000e 7B68     		ldr	r3, [r7, #4]
 219 0010 0022     		movs	r2, #0
 220 0012 5A60     		str	r2, [r3, #4]
 274:./Lib/Src/stm32f4xx_cryp.c **** 
 275:./Lib/Src/stm32f4xx_cryp.c ****   /* initialize the CRYP_DataType member */
 276:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 221              		.loc 1 276 34
 222 0014 7B68     		ldr	r3, [r7, #4]
 223 0016 0022     		movs	r2, #0
 224 0018 9A60     		str	r2, [r3, #8]
 277:./Lib/Src/stm32f4xx_cryp.c ****   
 278:./Lib/Src/stm32f4xx_cryp.c ****   /* Initialize the CRYP_KeySize member */
 279:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 225              		.loc 1 279 33
 226 001a 7B68     		ldr	r3, [r7, #4]
 227 001c 0022     		movs	r2, #0
 228 001e DA60     		str	r2, [r3, #12]
 280:./Lib/Src/stm32f4xx_cryp.c **** }
 229              		.loc 1 280 1
 230 0020 00BF     		nop
 231 0022 0C37     		adds	r7, r7, #12
 232              		.cfi_def_cfa_offset 4
 233 0024 BD46     		mov	sp, r7
 234              		.cfi_def_cfa_register 13
 235              		@ sp needed
ARM GAS  /tmp/ccRWa7zz.s 			page 10


 236 0026 5DF8047B 		ldr	r7, [sp], #4
 237              		.cfi_restore 7
 238              		.cfi_def_cfa_offset 0
 239 002a 7047     		bx	lr
 240              		.cfi_endproc
 241              	.LFE125:
 243              		.section	.text.CRYP_KeyInit,"ax",%progbits
 244              		.align	1
 245              		.global	CRYP_KeyInit
 246              		.syntax unified
 247              		.thumb
 248              		.thumb_func
 250              	CRYP_KeyInit:
 251              	.LFB126:
 281:./Lib/Src/stm32f4xx_cryp.c **** 
 282:./Lib/Src/stm32f4xx_cryp.c **** /**
 283:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Keys according to the specified parameters in
 284:./Lib/Src/stm32f4xx_cryp.c ****   *         the CRYP_KeyInitStruct.
 285:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
 286:./Lib/Src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.
 287:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 288:./Lib/Src/stm32f4xx_cryp.c ****   */
 289:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 290:./Lib/Src/stm32f4xx_cryp.c **** {
 252              		.loc 1 290 1
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 8
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257 0000 80B4     		push	{r7}
 258              		.cfi_def_cfa_offset 4
 259              		.cfi_offset 7, -4
 260 0002 83B0     		sub	sp, sp, #12
 261              		.cfi_def_cfa_offset 16
 262 0004 00AF     		add	r7, sp, #0
 263              		.cfi_def_cfa_register 7
 264 0006 7860     		str	r0, [r7, #4]
 291:./Lib/Src/stm32f4xx_cryp.c ****   /* Key Initialisation */
 292:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 265              		.loc 1 292 7
 266 0008 124A     		ldr	r2, .L8
 267              		.loc 1 292 34
 268 000a 7B68     		ldr	r3, [r7, #4]
 269 000c 1B68     		ldr	r3, [r3]
 270              		.loc 1 292 14
 271 000e 1362     		str	r3, [r2, #32]
 293:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 272              		.loc 1 293 7
 273 0010 104A     		ldr	r2, .L8
 274              		.loc 1 293 34
 275 0012 7B68     		ldr	r3, [r7, #4]
 276 0014 5B68     		ldr	r3, [r3, #4]
 277              		.loc 1 293 14
 278 0016 5362     		str	r3, [r2, #36]
 294:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 279              		.loc 1 294 7
 280 0018 0E4A     		ldr	r2, .L8
ARM GAS  /tmp/ccRWa7zz.s 			page 11


 281              		.loc 1 294 34
 282 001a 7B68     		ldr	r3, [r7, #4]
 283 001c 9B68     		ldr	r3, [r3, #8]
 284              		.loc 1 294 14
 285 001e 9362     		str	r3, [r2, #40]
 295:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 286              		.loc 1 295 7
 287 0020 0C4A     		ldr	r2, .L8
 288              		.loc 1 295 34
 289 0022 7B68     		ldr	r3, [r7, #4]
 290 0024 DB68     		ldr	r3, [r3, #12]
 291              		.loc 1 295 14
 292 0026 D362     		str	r3, [r2, #44]
 296:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 293              		.loc 1 296 7
 294 0028 0A4A     		ldr	r2, .L8
 295              		.loc 1 296 34
 296 002a 7B68     		ldr	r3, [r7, #4]
 297 002c 1B69     		ldr	r3, [r3, #16]
 298              		.loc 1 296 14
 299 002e 1363     		str	r3, [r2, #48]
 297:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 300              		.loc 1 297 7
 301 0030 084A     		ldr	r2, .L8
 302              		.loc 1 297 34
 303 0032 7B68     		ldr	r3, [r7, #4]
 304 0034 5B69     		ldr	r3, [r3, #20]
 305              		.loc 1 297 14
 306 0036 5363     		str	r3, [r2, #52]
 298:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 307              		.loc 1 298 7
 308 0038 064A     		ldr	r2, .L8
 309              		.loc 1 298 34
 310 003a 7B68     		ldr	r3, [r7, #4]
 311 003c 9B69     		ldr	r3, [r3, #24]
 312              		.loc 1 298 14
 313 003e 9363     		str	r3, [r2, #56]
 299:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 314              		.loc 1 299 7
 315 0040 044A     		ldr	r2, .L8
 316              		.loc 1 299 34
 317 0042 7B68     		ldr	r3, [r7, #4]
 318 0044 DB69     		ldr	r3, [r3, #28]
 319              		.loc 1 299 14
 320 0046 D363     		str	r3, [r2, #60]
 300:./Lib/Src/stm32f4xx_cryp.c **** }
 321              		.loc 1 300 1
 322 0048 00BF     		nop
 323 004a 0C37     		adds	r7, r7, #12
 324              		.cfi_def_cfa_offset 4
 325 004c BD46     		mov	sp, r7
 326              		.cfi_def_cfa_register 13
 327              		@ sp needed
 328 004e 5DF8047B 		ldr	r7, [sp], #4
 329              		.cfi_restore 7
 330              		.cfi_def_cfa_offset 0
 331 0052 7047     		bx	lr
ARM GAS  /tmp/ccRWa7zz.s 			page 12


 332              	.L9:
 333              		.align	2
 334              	.L8:
 335 0054 00000650 		.word	1342570496
 336              		.cfi_endproc
 337              	.LFE126:
 339              		.section	.text.CRYP_KeyStructInit,"ax",%progbits
 340              		.align	1
 341              		.global	CRYP_KeyStructInit
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	CRYP_KeyStructInit:
 347              	.LFB127:
 301:./Lib/Src/stm32f4xx_cryp.c **** 
 302:./Lib/Src/stm32f4xx_cryp.c **** /**
 303:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_KeyInitStruct member with its default value.
 304:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
 305:./Lib/Src/stm32f4xx_cryp.c ****   *         which will be initialized.
 306:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 307:./Lib/Src/stm32f4xx_cryp.c ****   */
 308:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 309:./Lib/Src/stm32f4xx_cryp.c **** {
 348              		.loc 1 309 1
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 7, -4
 356 0002 83B0     		sub	sp, sp, #12
 357              		.cfi_def_cfa_offset 16
 358 0004 00AF     		add	r7, sp, #0
 359              		.cfi_def_cfa_register 7
 360 0006 7860     		str	r0, [r7, #4]
 310:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 361              		.loc 1 310 38
 362 0008 7B68     		ldr	r3, [r7, #4]
 363 000a 0022     		movs	r2, #0
 364 000c 1A60     		str	r2, [r3]
 311:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 365              		.loc 1 311 38
 366 000e 7B68     		ldr	r3, [r7, #4]
 367 0010 0022     		movs	r2, #0
 368 0012 5A60     		str	r2, [r3, #4]
 312:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 369              		.loc 1 312 38
 370 0014 7B68     		ldr	r3, [r7, #4]
 371 0016 0022     		movs	r2, #0
 372 0018 9A60     		str	r2, [r3, #8]
 313:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 373              		.loc 1 313 38
 374 001a 7B68     		ldr	r3, [r7, #4]
 375 001c 0022     		movs	r2, #0
 376 001e DA60     		str	r2, [r3, #12]
 314:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
ARM GAS  /tmp/ccRWa7zz.s 			page 13


 377              		.loc 1 314 38
 378 0020 7B68     		ldr	r3, [r7, #4]
 379 0022 0022     		movs	r2, #0
 380 0024 1A61     		str	r2, [r3, #16]
 315:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 381              		.loc 1 315 38
 382 0026 7B68     		ldr	r3, [r7, #4]
 383 0028 0022     		movs	r2, #0
 384 002a 5A61     		str	r2, [r3, #20]
 316:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 385              		.loc 1 316 38
 386 002c 7B68     		ldr	r3, [r7, #4]
 387 002e 0022     		movs	r2, #0
 388 0030 9A61     		str	r2, [r3, #24]
 317:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 389              		.loc 1 317 38
 390 0032 7B68     		ldr	r3, [r7, #4]
 391 0034 0022     		movs	r2, #0
 392 0036 DA61     		str	r2, [r3, #28]
 318:./Lib/Src/stm32f4xx_cryp.c **** }
 393              		.loc 1 318 1
 394 0038 00BF     		nop
 395 003a 0C37     		adds	r7, r7, #12
 396              		.cfi_def_cfa_offset 4
 397 003c BD46     		mov	sp, r7
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed
 400 003e 5DF8047B 		ldr	r7, [sp], #4
 401              		.cfi_restore 7
 402              		.cfi_def_cfa_offset 0
 403 0042 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE127:
 407              		.section	.text.CRYP_IVInit,"ax",%progbits
 408              		.align	1
 409              		.global	CRYP_IVInit
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	CRYP_IVInit:
 415              	.LFB128:
 319:./Lib/Src/stm32f4xx_cryp.c **** /**
 320:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Initializes the CRYP Initialization Vectors(IV) according to the
 321:./Lib/Src/stm32f4xx_cryp.c ****   *         specified parameters in the CRYP_IVInitStruct.
 322:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
 323:./Lib/Src/stm32f4xx_cryp.c ****   *         the configuration information for the CRYP Initialization Vectors(IV).
 324:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 325:./Lib/Src/stm32f4xx_cryp.c ****   */
 326:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 327:./Lib/Src/stm32f4xx_cryp.c **** {
 416              		.loc 1 327 1
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 8
 419              		@ frame_needed = 1, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 421 0000 80B4     		push	{r7}
 422              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRWa7zz.s 			page 14


 423              		.cfi_offset 7, -4
 424 0002 83B0     		sub	sp, sp, #12
 425              		.cfi_def_cfa_offset 16
 426 0004 00AF     		add	r7, sp, #0
 427              		.cfi_def_cfa_register 7
 428 0006 7860     		str	r0, [r7, #4]
 328:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 429              		.loc 1 328 7
 430 0008 0A4A     		ldr	r2, .L12
 431              		.loc 1 328 34
 432 000a 7B68     		ldr	r3, [r7, #4]
 433 000c 1B68     		ldr	r3, [r3]
 434              		.loc 1 328 15
 435 000e 1364     		str	r3, [r2, #64]
 329:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 436              		.loc 1 329 7
 437 0010 084A     		ldr	r2, .L12
 438              		.loc 1 329 34
 439 0012 7B68     		ldr	r3, [r7, #4]
 440 0014 5B68     		ldr	r3, [r3, #4]
 441              		.loc 1 329 15
 442 0016 5364     		str	r3, [r2, #68]
 330:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 443              		.loc 1 330 7
 444 0018 064A     		ldr	r2, .L12
 445              		.loc 1 330 34
 446 001a 7B68     		ldr	r3, [r7, #4]
 447 001c 9B68     		ldr	r3, [r3, #8]
 448              		.loc 1 330 15
 449 001e 9364     		str	r3, [r2, #72]
 331:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 450              		.loc 1 331 7
 451 0020 044A     		ldr	r2, .L12
 452              		.loc 1 331 34
 453 0022 7B68     		ldr	r3, [r7, #4]
 454 0024 DB68     		ldr	r3, [r3, #12]
 455              		.loc 1 331 15
 456 0026 D364     		str	r3, [r2, #76]
 332:./Lib/Src/stm32f4xx_cryp.c **** }
 457              		.loc 1 332 1
 458 0028 00BF     		nop
 459 002a 0C37     		adds	r7, r7, #12
 460              		.cfi_def_cfa_offset 4
 461 002c BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 002e 5DF8047B 		ldr	r7, [sp], #4
 465              		.cfi_restore 7
 466              		.cfi_def_cfa_offset 0
 467 0032 7047     		bx	lr
 468              	.L13:
 469              		.align	2
 470              	.L12:
 471 0034 00000650 		.word	1342570496
 472              		.cfi_endproc
 473              	.LFE128:
 475              		.section	.text.CRYP_IVStructInit,"ax",%progbits
ARM GAS  /tmp/ccRWa7zz.s 			page 15


 476              		.align	1
 477              		.global	CRYP_IVStructInit
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 482              	CRYP_IVStructInit:
 483              	.LFB129:
 333:./Lib/Src/stm32f4xx_cryp.c **** 
 334:./Lib/Src/stm32f4xx_cryp.c **** /**
 335:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Fills each CRYP_IVInitStruct member with its default value.
 336:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
 337:./Lib/Src/stm32f4xx_cryp.c ****   *         Vectors(IV) structure which will be initialized.
 338:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 339:./Lib/Src/stm32f4xx_cryp.c ****   */
 340:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
 341:./Lib/Src/stm32f4xx_cryp.c **** {
 484              		.loc 1 341 1
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 8
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488              		@ link register save eliminated.
 489 0000 80B4     		push	{r7}
 490              		.cfi_def_cfa_offset 4
 491              		.cfi_offset 7, -4
 492 0002 83B0     		sub	sp, sp, #12
 493              		.cfi_def_cfa_offset 16
 494 0004 00AF     		add	r7, sp, #0
 495              		.cfi_def_cfa_register 7
 496 0006 7860     		str	r0, [r7, #4]
 342:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 497              		.loc 1 342 36
 498 0008 7B68     		ldr	r3, [r7, #4]
 499 000a 0022     		movs	r2, #0
 500 000c 1A60     		str	r2, [r3]
 343:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV0Right = 0;
 501              		.loc 1 343 36
 502 000e 7B68     		ldr	r3, [r7, #4]
 503 0010 0022     		movs	r2, #0
 504 0012 5A60     		str	r2, [r3, #4]
 344:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 505              		.loc 1 344 36
 506 0014 7B68     		ldr	r3, [r7, #4]
 507 0016 0022     		movs	r2, #0
 508 0018 9A60     		str	r2, [r3, #8]
 345:./Lib/Src/stm32f4xx_cryp.c ****   CRYP_IVInitStruct->CRYP_IV1Right = 0;
 509              		.loc 1 345 36
 510 001a 7B68     		ldr	r3, [r7, #4]
 511 001c 0022     		movs	r2, #0
 512 001e DA60     		str	r2, [r3, #12]
 346:./Lib/Src/stm32f4xx_cryp.c **** }
 513              		.loc 1 346 1
 514 0020 00BF     		nop
 515 0022 0C37     		adds	r7, r7, #12
 516              		.cfi_def_cfa_offset 4
 517 0024 BD46     		mov	sp, r7
 518              		.cfi_def_cfa_register 13
 519              		@ sp needed
ARM GAS  /tmp/ccRWa7zz.s 			page 16


 520 0026 5DF8047B 		ldr	r7, [sp], #4
 521              		.cfi_restore 7
 522              		.cfi_def_cfa_offset 0
 523 002a 7047     		bx	lr
 524              		.cfi_endproc
 525              	.LFE129:
 527              		.section	.text.CRYP_PhaseConfig,"ax",%progbits
 528              		.align	1
 529              		.global	CRYP_PhaseConfig
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 534              	CRYP_PhaseConfig:
 535              	.LFB130:
 347:./Lib/Src/stm32f4xx_cryp.c **** 
 348:./Lib/Src/stm32f4xx_cryp.c **** /**
 349:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Configures the AES-CCM and AES-GCM phases
 350:./Lib/Src/stm32f4xx_cryp.c ****   * @note   This function is used only with AES-CCM or AES-GCM Algorithms  
 351:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_Phase: specifies the CRYP AES-CCM and AES-GCM phase to be configured.
 352:./Lib/Src/stm32f4xx_cryp.c ****   *           This parameter can be one of the following values:
 353:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Init: Initialization phase
 354:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Header: Header phase
 355:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Payload: Payload phase
 356:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_Phase_Final: Final phase 
 357:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 358:./Lib/Src/stm32f4xx_cryp.c ****   */
 359:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_PhaseConfig(uint32_t CRYP_Phase)
 360:./Lib/Src/stm32f4xx_cryp.c **** { uint32_t tempcr = 0;
 536              		.loc 1 360 1
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 16
 539              		@ frame_needed = 1, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 541 0000 80B4     		push	{r7}
 542              		.cfi_def_cfa_offset 4
 543              		.cfi_offset 7, -4
 544 0002 85B0     		sub	sp, sp, #20
 545              		.cfi_def_cfa_offset 24
 546 0004 00AF     		add	r7, sp, #0
 547              		.cfi_def_cfa_register 7
 548 0006 7860     		str	r0, [r7, #4]
 549              		.loc 1 360 12
 550 0008 0023     		movs	r3, #0
 551 000a FB60     		str	r3, [r7, #12]
 361:./Lib/Src/stm32f4xx_cryp.c **** 
 362:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the parameter */
 363:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_PHASE(CRYP_Phase));
 364:./Lib/Src/stm32f4xx_cryp.c **** 
 365:./Lib/Src/stm32f4xx_cryp.c ****   /* Get the CR register */
 366:./Lib/Src/stm32f4xx_cryp.c ****   tempcr = CRYP->CR;
 552              		.loc 1 366 16
 553 000c 094B     		ldr	r3, .L16
 554              		.loc 1 366 10
 555 000e 1B68     		ldr	r3, [r3]
 556 0010 FB60     		str	r3, [r7, #12]
 367:./Lib/Src/stm32f4xx_cryp.c ****   
 368:./Lib/Src/stm32f4xx_cryp.c ****   /* Reset the phase configuration bits: GCMP_CCMPH */
ARM GAS  /tmp/ccRWa7zz.s 			page 17


 369:./Lib/Src/stm32f4xx_cryp.c ****   tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 557              		.loc 1 369 10
 558 0012 FB68     		ldr	r3, [r7, #12]
 559 0014 23F44033 		bic	r3, r3, #196608
 560 0018 FB60     		str	r3, [r7, #12]
 370:./Lib/Src/stm32f4xx_cryp.c ****   /* Set the selected phase */
 371:./Lib/Src/stm32f4xx_cryp.c ****   tempcr |= (uint32_t)CRYP_Phase;
 561              		.loc 1 371 10
 562 001a FA68     		ldr	r2, [r7, #12]
 563 001c 7B68     		ldr	r3, [r7, #4]
 564 001e 1343     		orrs	r3, r3, r2
 565 0020 FB60     		str	r3, [r7, #12]
 372:./Lib/Src/stm32f4xx_cryp.c **** 
 373:./Lib/Src/stm32f4xx_cryp.c ****   /* Set the CR register */ 
 374:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR = tempcr;    
 566              		.loc 1 374 7
 567 0022 044A     		ldr	r2, .L16
 568              		.loc 1 374 12
 569 0024 FB68     		ldr	r3, [r7, #12]
 570 0026 1360     		str	r3, [r2]
 375:./Lib/Src/stm32f4xx_cryp.c **** }
 571              		.loc 1 375 1
 572 0028 00BF     		nop
 573 002a 1437     		adds	r7, r7, #20
 574              		.cfi_def_cfa_offset 4
 575 002c BD46     		mov	sp, r7
 576              		.cfi_def_cfa_register 13
 577              		@ sp needed
 578 002e 5DF8047B 		ldr	r7, [sp], #4
 579              		.cfi_restore 7
 580              		.cfi_def_cfa_offset 0
 581 0032 7047     		bx	lr
 582              	.L17:
 583              		.align	2
 584              	.L16:
 585 0034 00000650 		.word	1342570496
 586              		.cfi_endproc
 587              	.LFE130:
 589              		.section	.text.CRYP_FIFOFlush,"ax",%progbits
 590              		.align	1
 591              		.global	CRYP_FIFOFlush
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 596              	CRYP_FIFOFlush:
 597              	.LFB131:
 376:./Lib/Src/stm32f4xx_cryp.c **** 
 377:./Lib/Src/stm32f4xx_cryp.c **** /**
 378:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Flushes the IN and OUT FIFOs (that is read and write pointers of the 
 379:./Lib/Src/stm32f4xx_cryp.c ****   *         FIFOs are reset)
 380:./Lib/Src/stm32f4xx_cryp.c ****   * @note   The FIFOs must be flushed only when BUSY flag is reset.  
 381:./Lib/Src/stm32f4xx_cryp.c ****   * @param  None
 382:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 383:./Lib/Src/stm32f4xx_cryp.c ****   */
 384:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_FIFOFlush(void)
 385:./Lib/Src/stm32f4xx_cryp.c **** {
 598              		.loc 1 385 1
ARM GAS  /tmp/ccRWa7zz.s 			page 18


 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 1, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603 0000 80B4     		push	{r7}
 604              		.cfi_def_cfa_offset 4
 605              		.cfi_offset 7, -4
 606 0002 00AF     		add	r7, sp, #0
 607              		.cfi_def_cfa_register 7
 386:./Lib/Src/stm32f4xx_cryp.c ****   /* Reset the read and write pointers of the FIFOs */
 387:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_FFLUSH;
 608              		.loc 1 387 7
 609 0004 054B     		ldr	r3, .L19
 610 0006 1B68     		ldr	r3, [r3]
 611 0008 044A     		ldr	r2, .L19
 612              		.loc 1 387 12
 613 000a 43F48043 		orr	r3, r3, #16384
 614 000e 1360     		str	r3, [r2]
 388:./Lib/Src/stm32f4xx_cryp.c **** }
 615              		.loc 1 388 1
 616 0010 00BF     		nop
 617 0012 BD46     		mov	sp, r7
 618              		.cfi_def_cfa_register 13
 619              		@ sp needed
 620 0014 5DF8047B 		ldr	r7, [sp], #4
 621              		.cfi_restore 7
 622              		.cfi_def_cfa_offset 0
 623 0018 7047     		bx	lr
 624              	.L20:
 625 001a 00BF     		.align	2
 626              	.L19:
 627 001c 00000650 		.word	1342570496
 628              		.cfi_endproc
 629              	.LFE131:
 631              		.section	.text.CRYP_Cmd,"ax",%progbits
 632              		.align	1
 633              		.global	CRYP_Cmd
 634              		.syntax unified
 635              		.thumb
 636              		.thumb_func
 638              	CRYP_Cmd:
 639              	.LFB132:
 389:./Lib/Src/stm32f4xx_cryp.c **** 
 390:./Lib/Src/stm32f4xx_cryp.c **** /**
 391:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP peripheral.
 392:./Lib/Src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the CRYP peripheral.
 393:./Lib/Src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 394:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 395:./Lib/Src/stm32f4xx_cryp.c ****   */
 396:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_Cmd(FunctionalState NewState)
 397:./Lib/Src/stm32f4xx_cryp.c **** {
 640              		.loc 1 397 1
 641              		.cfi_startproc
 642              		@ args = 0, pretend = 0, frame = 8
 643              		@ frame_needed = 1, uses_anonymous_args = 0
 644              		@ link register save eliminated.
 645 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccRWa7zz.s 			page 19


 646              		.cfi_def_cfa_offset 4
 647              		.cfi_offset 7, -4
 648 0002 83B0     		sub	sp, sp, #12
 649              		.cfi_def_cfa_offset 16
 650 0004 00AF     		add	r7, sp, #0
 651              		.cfi_def_cfa_register 7
 652 0006 0346     		mov	r3, r0
 653 0008 FB71     		strb	r3, [r7, #7]
 398:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the parameters */
 399:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 400:./Lib/Src/stm32f4xx_cryp.c **** 
 401:./Lib/Src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 654              		.loc 1 401 6
 655 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 656 000c 002B     		cmp	r3, #0
 657 000e 06D0     		beq	.L22
 402:./Lib/Src/stm32f4xx_cryp.c ****   {
 403:./Lib/Src/stm32f4xx_cryp.c ****     /* Enable the Cryptographic processor */
 404:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->CR |= CRYP_CR_CRYPEN;
 658              		.loc 1 404 9
 659 0010 094B     		ldr	r3, .L25
 660 0012 1B68     		ldr	r3, [r3]
 661 0014 084A     		ldr	r2, .L25
 662              		.loc 1 404 14
 663 0016 43F40043 		orr	r3, r3, #32768
 664 001a 1360     		str	r3, [r2]
 405:./Lib/Src/stm32f4xx_cryp.c ****   }
 406:./Lib/Src/stm32f4xx_cryp.c ****   else
 407:./Lib/Src/stm32f4xx_cryp.c ****   {
 408:./Lib/Src/stm32f4xx_cryp.c ****     /* Disable the Cryptographic processor */
 409:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->CR &= ~CRYP_CR_CRYPEN;
 410:./Lib/Src/stm32f4xx_cryp.c ****   }
 411:./Lib/Src/stm32f4xx_cryp.c **** }
 665              		.loc 1 411 1
 666 001c 05E0     		b	.L24
 667              	.L22:
 409:./Lib/Src/stm32f4xx_cryp.c ****   }
 668              		.loc 1 409 9
 669 001e 064B     		ldr	r3, .L25
 670 0020 1B68     		ldr	r3, [r3]
 671 0022 054A     		ldr	r2, .L25
 409:./Lib/Src/stm32f4xx_cryp.c ****   }
 672              		.loc 1 409 14
 673 0024 23F40043 		bic	r3, r3, #32768
 674 0028 1360     		str	r3, [r2]
 675              	.L24:
 676              		.loc 1 411 1
 677 002a 00BF     		nop
 678 002c 0C37     		adds	r7, r7, #12
 679              		.cfi_def_cfa_offset 4
 680 002e BD46     		mov	sp, r7
 681              		.cfi_def_cfa_register 13
 682              		@ sp needed
 683 0030 5DF8047B 		ldr	r7, [sp], #4
 684              		.cfi_restore 7
 685              		.cfi_def_cfa_offset 0
 686 0034 7047     		bx	lr
ARM GAS  /tmp/ccRWa7zz.s 			page 20


 687              	.L26:
 688 0036 00BF     		.align	2
 689              	.L25:
 690 0038 00000650 		.word	1342570496
 691              		.cfi_endproc
 692              	.LFE132:
 694              		.section	.text.CRYP_DataIn,"ax",%progbits
 695              		.align	1
 696              		.global	CRYP_DataIn
 697              		.syntax unified
 698              		.thumb
 699              		.thumb_func
 701              	CRYP_DataIn:
 702              	.LFB133:
 412:./Lib/Src/stm32f4xx_cryp.c **** /**
 413:./Lib/Src/stm32f4xx_cryp.c ****   * @}
 414:./Lib/Src/stm32f4xx_cryp.c ****   */
 415:./Lib/Src/stm32f4xx_cryp.c ****   
 416:./Lib/Src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group2 CRYP Data processing functions
 417:./Lib/Src/stm32f4xx_cryp.c ****  *  @brief    CRYP Data processing functions
 418:./Lib/Src/stm32f4xx_cryp.c ****  *
 419:./Lib/Src/stm32f4xx_cryp.c **** @verbatim    
 420:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================
 421:./Lib/Src/stm32f4xx_cryp.c ****                     ##### CRYP Data processing functions #####
 422:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================  
 423:./Lib/Src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing the encryption and decryption 
 424:./Lib/Src/stm32f4xx_cryp.c ****       operations: 
 425:./Lib/Src/stm32f4xx_cryp.c ****    (+) Enter data to be treated in the IN FIFO : using CRYP_DataIn() function.
 426:./Lib/Src/stm32f4xx_cryp.c ****    (+) Get the data result from the OUT FIFO : using CRYP_DataOut() function.
 427:./Lib/Src/stm32f4xx_cryp.c **** 
 428:./Lib/Src/stm32f4xx_cryp.c **** @endverbatim
 429:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 430:./Lib/Src/stm32f4xx_cryp.c ****   */
 431:./Lib/Src/stm32f4xx_cryp.c **** 
 432:./Lib/Src/stm32f4xx_cryp.c **** /**
 433:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Writes data in the Data Input register (DIN).
 434:./Lib/Src/stm32f4xx_cryp.c ****   * @note   After the DIN register has been read once or several times, 
 435:./Lib/Src/stm32f4xx_cryp.c ****   *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
 436:./Lib/Src/stm32f4xx_cryp.c ****   * @param  Data: data to write in Data Input register
 437:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 438:./Lib/Src/stm32f4xx_cryp.c ****   */
 439:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_DataIn(uint32_t Data)
 440:./Lib/Src/stm32f4xx_cryp.c **** {
 703              		.loc 1 440 1
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 8
 706              		@ frame_needed = 1, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 708 0000 80B4     		push	{r7}
 709              		.cfi_def_cfa_offset 4
 710              		.cfi_offset 7, -4
 711 0002 83B0     		sub	sp, sp, #12
 712              		.cfi_def_cfa_offset 16
 713 0004 00AF     		add	r7, sp, #0
 714              		.cfi_def_cfa_register 7
 715 0006 7860     		str	r0, [r7, #4]
 441:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->DR = Data;
ARM GAS  /tmp/ccRWa7zz.s 			page 21


 716              		.loc 1 441 7
 717 0008 044A     		ldr	r2, .L28
 718              		.loc 1 441 12
 719 000a 7B68     		ldr	r3, [r7, #4]
 720 000c 9360     		str	r3, [r2, #8]
 442:./Lib/Src/stm32f4xx_cryp.c **** }
 721              		.loc 1 442 1
 722 000e 00BF     		nop
 723 0010 0C37     		adds	r7, r7, #12
 724              		.cfi_def_cfa_offset 4
 725 0012 BD46     		mov	sp, r7
 726              		.cfi_def_cfa_register 13
 727              		@ sp needed
 728 0014 5DF8047B 		ldr	r7, [sp], #4
 729              		.cfi_restore 7
 730              		.cfi_def_cfa_offset 0
 731 0018 7047     		bx	lr
 732              	.L29:
 733 001a 00BF     		.align	2
 734              	.L28:
 735 001c 00000650 		.word	1342570496
 736              		.cfi_endproc
 737              	.LFE133:
 739              		.section	.text.CRYP_DataOut,"ax",%progbits
 740              		.align	1
 741              		.global	CRYP_DataOut
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 746              	CRYP_DataOut:
 747              	.LFB134:
 443:./Lib/Src/stm32f4xx_cryp.c **** 
 444:./Lib/Src/stm32f4xx_cryp.c **** /**
 445:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Returns the last data entered into the output FIFO.
 446:./Lib/Src/stm32f4xx_cryp.c ****   * @param  None
 447:./Lib/Src/stm32f4xx_cryp.c ****   * @retval Last data entered into the output FIFO.
 448:./Lib/Src/stm32f4xx_cryp.c ****   */
 449:./Lib/Src/stm32f4xx_cryp.c **** uint32_t CRYP_DataOut(void)
 450:./Lib/Src/stm32f4xx_cryp.c **** {
 748              		.loc 1 450 1
 749              		.cfi_startproc
 750              		@ args = 0, pretend = 0, frame = 0
 751              		@ frame_needed = 1, uses_anonymous_args = 0
 752              		@ link register save eliminated.
 753 0000 80B4     		push	{r7}
 754              		.cfi_def_cfa_offset 4
 755              		.cfi_offset 7, -4
 756 0002 00AF     		add	r7, sp, #0
 757              		.cfi_def_cfa_register 7
 451:./Lib/Src/stm32f4xx_cryp.c ****   return CRYP->DOUT;
 758              		.loc 1 451 14
 759 0004 034B     		ldr	r3, .L32
 760 0006 DB68     		ldr	r3, [r3, #12]
 452:./Lib/Src/stm32f4xx_cryp.c **** }
 761              		.loc 1 452 1
 762 0008 1846     		mov	r0, r3
 763 000a BD46     		mov	sp, r7
ARM GAS  /tmp/ccRWa7zz.s 			page 22


 764              		.cfi_def_cfa_register 13
 765              		@ sp needed
 766 000c 5DF8047B 		ldr	r7, [sp], #4
 767              		.cfi_restore 7
 768              		.cfi_def_cfa_offset 0
 769 0010 7047     		bx	lr
 770              	.L33:
 771 0012 00BF     		.align	2
 772              	.L32:
 773 0014 00000650 		.word	1342570496
 774              		.cfi_endproc
 775              	.LFE134:
 777              		.section	.text.CRYP_SaveContext,"ax",%progbits
 778              		.align	1
 779              		.global	CRYP_SaveContext
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 784              	CRYP_SaveContext:
 785              	.LFB135:
 453:./Lib/Src/stm32f4xx_cryp.c **** /**
 454:./Lib/Src/stm32f4xx_cryp.c ****   * @}
 455:./Lib/Src/stm32f4xx_cryp.c ****   */
 456:./Lib/Src/stm32f4xx_cryp.c ****   
 457:./Lib/Src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group3 Context swapping functions
 458:./Lib/Src/stm32f4xx_cryp.c ****  *  @brief   Context swapping functions
 459:./Lib/Src/stm32f4xx_cryp.c ****  *
 460:./Lib/Src/stm32f4xx_cryp.c **** @verbatim   
 461:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================
 462:./Lib/Src/stm32f4xx_cryp.c ****                       ##### Context swapping functions #####
 463:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================  
 464:./Lib/Src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to save and store CRYP Context
 465:./Lib/Src/stm32f4xx_cryp.c **** 
 466:./Lib/Src/stm32f4xx_cryp.c ****  [..] It is possible to interrupt an encryption/ decryption/ key generation process 
 467:./Lib/Src/stm32f4xx_cryp.c ****       to perform another processing with a higher priority, and to complete the 
 468:./Lib/Src/stm32f4xx_cryp.c ****       interrupted process later on, when the higher-priority task is complete. To do 
 469:./Lib/Src/stm32f4xx_cryp.c ****       so, the context of the interrupted task must be saved from the CRYP registers 
 470:./Lib/Src/stm32f4xx_cryp.c ****       to memory, and then be restored from memory to the CRYP registers.
 471:./Lib/Src/stm32f4xx_cryp.c ****    
 472:./Lib/Src/stm32f4xx_cryp.c ****    (#) To save the current context, use CRYP_SaveContext() function
 473:./Lib/Src/stm32f4xx_cryp.c ****    (#) To restore the saved context, use CRYP_RestoreContext() function 
 474:./Lib/Src/stm32f4xx_cryp.c **** 
 475:./Lib/Src/stm32f4xx_cryp.c **** @endverbatim
 476:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 477:./Lib/Src/stm32f4xx_cryp.c ****   */
 478:./Lib/Src/stm32f4xx_cryp.c ****   
 479:./Lib/Src/stm32f4xx_cryp.c **** /**
 480:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Saves the CRYP peripheral Context. 
 481:./Lib/Src/stm32f4xx_cryp.c ****   * @note   This function stops DMA transfer before to save the context. After 
 482:./Lib/Src/stm32f4xx_cryp.c ****   *         restoring the context, you have to enable the DMA again (if the DMA
 483:./Lib/Src/stm32f4xx_cryp.c ****   *         was previously used).
 484:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextSave: pointer to a CRYP_Context structure that contains
 485:./Lib/Src/stm32f4xx_cryp.c ****   *         the repository for current context.
 486:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that 
 487:./Lib/Src/stm32f4xx_cryp.c ****   *         contains the configuration information for the CRYP Keys.  
 488:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 489:./Lib/Src/stm32f4xx_cryp.c ****   */
ARM GAS  /tmp/ccRWa7zz.s 			page 23


 490:./Lib/Src/stm32f4xx_cryp.c **** ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
 491:./Lib/Src/stm32f4xx_cryp.c ****                              CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
 492:./Lib/Src/stm32f4xx_cryp.c **** {
 786              		.loc 1 492 1
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 24
 789              		@ frame_needed = 1, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 791 0000 80B4     		push	{r7}
 792              		.cfi_def_cfa_offset 4
 793              		.cfi_offset 7, -4
 794 0002 87B0     		sub	sp, sp, #28
 795              		.cfi_def_cfa_offset 32
 796 0004 00AF     		add	r7, sp, #0
 797              		.cfi_def_cfa_register 7
 798 0006 7860     		str	r0, [r7, #4]
 799 0008 3960     		str	r1, [r7]
 493:./Lib/Src/stm32f4xx_cryp.c ****   __IO uint32_t timeout = 0;
 800              		.loc 1 493 17
 801 000a 0023     		movs	r3, #0
 802 000c BB60     		str	r3, [r7, #8]
 494:./Lib/Src/stm32f4xx_cryp.c ****   uint32_t ckeckmask = 0, bitstatus;    
 803              		.loc 1 494 12
 804 000e 0023     		movs	r3, #0
 805 0010 7B61     		str	r3, [r7, #20]
 495:./Lib/Src/stm32f4xx_cryp.c ****   ErrorStatus status = ERROR;
 806              		.loc 1 495 15
 807 0012 0023     		movs	r3, #0
 808 0014 FB74     		strb	r3, [r7, #19]
 496:./Lib/Src/stm32f4xx_cryp.c **** 
 497:./Lib/Src/stm32f4xx_cryp.c ****   /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
 498:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 809              		.loc 1 498 7
 810 0016 5C4B     		ldr	r3, .L42
 811 0018 1B69     		ldr	r3, [r3, #16]
 812 001a 5B4A     		ldr	r2, .L42
 813              		.loc 1 498 15
 814 001c 23F00103 		bic	r3, r3, #1
 815 0020 1361     		str	r3, [r2, #16]
 499:./Lib/Src/stm32f4xx_cryp.c ****     
 500:./Lib/Src/stm32f4xx_cryp.c ****   /* Wait until both the IN and OUT FIFOs are empty  
 501:./Lib/Src/stm32f4xx_cryp.c ****     (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
 502:./Lib/Src/stm32f4xx_cryp.c ****      BUSY bit is cleared. */
 503:./Lib/Src/stm32f4xx_cryp.c **** 
 504:./Lib/Src/stm32f4xx_cryp.c ****   if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0
 816              		.loc 1 504 12
 817 0022 594B     		ldr	r3, .L42
 818 0024 1B68     		ldr	r3, [r3]
 819              		.loc 1 504 17
 820 0026 03F00803 		and	r3, r3, #8
 821              		.loc 1 504 6
 822 002a 002B     		cmp	r3, #0
 823 002c 02D0     		beq	.L35
 505:./Lib/Src/stm32f4xx_cryp.c ****   { 
 506:./Lib/Src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 824              		.loc 1 506 15
 825 002e 1123     		movs	r3, #17
ARM GAS  /tmp/ccRWa7zz.s 			page 24


 826 0030 7B61     		str	r3, [r7, #20]
 827 0032 01E0     		b	.L38
 828              	.L35:
 507:./Lib/Src/stm32f4xx_cryp.c ****   }
 508:./Lib/Src/stm32f4xx_cryp.c ****   else /* AES or DES */
 509:./Lib/Src/stm32f4xx_cryp.c ****   {
 510:./Lib/Src/stm32f4xx_cryp.c ****     ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 829              		.loc 1 510 15
 830 0034 1523     		movs	r3, #21
 831 0036 7B61     		str	r3, [r7, #20]
 832              	.L38:
 511:./Lib/Src/stm32f4xx_cryp.c ****   }           
 512:./Lib/Src/stm32f4xx_cryp.c ****    
 513:./Lib/Src/stm32f4xx_cryp.c ****   do 
 514:./Lib/Src/stm32f4xx_cryp.c ****   {
 515:./Lib/Src/stm32f4xx_cryp.c ****     bitstatus = CRYP->SR & ckeckmask;
 833              		.loc 1 515 21 discriminator 2
 834 0038 534B     		ldr	r3, .L42
 835 003a 5B68     		ldr	r3, [r3, #4]
 836              		.loc 1 515 15 discriminator 2
 837 003c 7A69     		ldr	r2, [r7, #20]
 838 003e 1340     		ands	r3, r3, r2
 839 0040 FB60     		str	r3, [r7, #12]
 516:./Lib/Src/stm32f4xx_cryp.c ****     timeout++;
 840              		.loc 1 516 12 discriminator 2
 841 0042 BB68     		ldr	r3, [r7, #8]
 842 0044 0133     		adds	r3, r3, #1
 843 0046 BB60     		str	r3, [r7, #8]
 517:./Lib/Src/stm32f4xx_cryp.c ****   }
 518:./Lib/Src/stm32f4xx_cryp.c ****   while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 844              		.loc 1 518 19 discriminator 2
 845 0048 BB68     		ldr	r3, [r7, #8]
 846              		.loc 1 518 35 discriminator 2
 847 004a 4FF6FF72 		movw	r2, #65535
 848 004e 9342     		cmp	r3, r2
 849 0050 02D0     		beq	.L37
 850              		.loc 1 518 35 is_stmt 0 discriminator 1
 851 0052 FB68     		ldr	r3, [r7, #12]
 852 0054 012B     		cmp	r3, #1
 853 0056 EFD1     		bne	.L38
 854              	.L37:
 519:./Lib/Src/stm32f4xx_cryp.c ****      
 520:./Lib/Src/stm32f4xx_cryp.c ****   if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 855              		.loc 1 520 12 is_stmt 1
 856 0058 4B4B     		ldr	r3, .L42
 857 005a 5A68     		ldr	r2, [r3, #4]
 858              		.loc 1 520 17
 859 005c 7B69     		ldr	r3, [r7, #20]
 860 005e 1340     		ands	r3, r3, r2
 861              		.loc 1 520 6
 862 0060 012B     		cmp	r3, #1
 863 0062 02D0     		beq	.L39
 521:./Lib/Src/stm32f4xx_cryp.c ****   {
 522:./Lib/Src/stm32f4xx_cryp.c ****     status = ERROR;
 864              		.loc 1 522 12
 865 0064 0023     		movs	r3, #0
 866 0066 FB74     		strb	r3, [r7, #19]
ARM GAS  /tmp/ccRWa7zz.s 			page 25


 867 0068 87E0     		b	.L40
 868              	.L39:
 523:./Lib/Src/stm32f4xx_cryp.c ****   }
 524:./Lib/Src/stm32f4xx_cryp.c ****   else
 525:./Lib/Src/stm32f4xx_cryp.c ****   {      
 526:./Lib/Src/stm32f4xx_cryp.c ****     /* Stop DMA transfers on the OUT FIFO by 
 527:./Lib/Src/stm32f4xx_cryp.c ****        - writing the DOEN bit to 0 in the CRYP_DMACR register 
 528:./Lib/Src/stm32f4xx_cryp.c ****        - and clear the CRYPEN bit. */
 529:./Lib/Src/stm32f4xx_cryp.c **** 
 530:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 869              		.loc 1 530 9
 870 006a 474B     		ldr	r3, .L42
 871 006c 1B69     		ldr	r3, [r3, #16]
 872 006e 464A     		ldr	r2, .L42
 873              		.loc 1 530 17
 874 0070 23F00203 		bic	r3, r3, #2
 875 0074 1361     		str	r3, [r2, #16]
 531:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 876              		.loc 1 531 9
 877 0076 444B     		ldr	r3, .L42
 878 0078 1B68     		ldr	r3, [r3]
 879 007a 434A     		ldr	r2, .L42
 880              		.loc 1 531 14
 881 007c 23F40043 		bic	r3, r3, #32768
 882 0080 1360     		str	r3, [r2]
 532:./Lib/Src/stm32f4xx_cryp.c **** 
 533:./Lib/Src/stm32f4xx_cryp.c ****     /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) *
 534:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 883              		.loc 1 534 47
 884 0082 414B     		ldr	r3, .L42
 885 0084 1A68     		ldr	r2, [r3]
 886              		.loc 1 534 52
 887 0086 414B     		ldr	r3, .L42+4
 888 0088 1340     		ands	r3, r3, r2
 889              		.loc 1 534 41
 890 008a 7A68     		ldr	r2, [r7, #4]
 891 008c 1360     		str	r3, [r2]
 535:./Lib/Src/stm32f4xx_cryp.c ****                                                       CRYP_CR_KEYSIZE  |
 536:./Lib/Src/stm32f4xx_cryp.c ****                                                       CRYP_CR_DATATYPE |
 537:./Lib/Src/stm32f4xx_cryp.c ****                                                       CRYP_CR_ALGOMODE |
 538:./Lib/Src/stm32f4xx_cryp.c ****                                                       CRYP_CR_ALGODIR);
 539:./Lib/Src/stm32f4xx_cryp.c **** 
 540:./Lib/Src/stm32f4xx_cryp.c ****     /* and, if not in ECB mode, the initialization vectors. */
 541:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 892              		.loc 1 541 40
 893 008e 3E4B     		ldr	r3, .L42
 894 0090 1A6C     		ldr	r2, [r3, #64]
 895              		.loc 1 541 34
 896 0092 7B68     		ldr	r3, [r7, #4]
 897 0094 5A60     		str	r2, [r3, #4]
 542:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 898              		.loc 1 542 40
 899 0096 3C4B     		ldr	r3, .L42
 900 0098 5A6C     		ldr	r2, [r3, #68]
 901              		.loc 1 542 34
 902 009a 7B68     		ldr	r3, [r7, #4]
 903 009c 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccRWa7zz.s 			page 26


 543:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 904              		.loc 1 543 40
 905 009e 3A4B     		ldr	r3, .L42
 906 00a0 9A6C     		ldr	r2, [r3, #72]
 907              		.loc 1 543 34
 908 00a2 7B68     		ldr	r3, [r7, #4]
 909 00a4 DA60     		str	r2, [r3, #12]
 544:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 910              		.loc 1 544 40
 911 00a6 384B     		ldr	r3, .L42
 912 00a8 DA6C     		ldr	r2, [r3, #76]
 913              		.loc 1 544 34
 914 00aa 7B68     		ldr	r3, [r7, #4]
 915 00ac 1A61     		str	r2, [r3, #16]
 545:./Lib/Src/stm32f4xx_cryp.c **** 
 546:./Lib/Src/stm32f4xx_cryp.c ****     /* save The key value */
 547:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 916              		.loc 1 547 53
 917 00ae 3B68     		ldr	r3, [r7]
 918 00b0 1A68     		ldr	r2, [r3]
 919              		.loc 1 547 33
 920 00b2 7B68     		ldr	r3, [r7, #4]
 921 00b4 5A61     		str	r2, [r3, #20]
 548:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 922              		.loc 1 548 53
 923 00b6 3B68     		ldr	r3, [r7]
 924 00b8 5A68     		ldr	r2, [r3, #4]
 925              		.loc 1 548 33
 926 00ba 7B68     		ldr	r3, [r7, #4]
 927 00bc 9A61     		str	r2, [r3, #24]
 549:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 928              		.loc 1 549 53
 929 00be 3B68     		ldr	r3, [r7]
 930 00c0 9A68     		ldr	r2, [r3, #8]
 931              		.loc 1 549 33
 932 00c2 7B68     		ldr	r3, [r7, #4]
 933 00c4 DA61     		str	r2, [r3, #28]
 550:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 934              		.loc 1 550 53
 935 00c6 3B68     		ldr	r3, [r7]
 936 00c8 DA68     		ldr	r2, [r3, #12]
 937              		.loc 1 550 33
 938 00ca 7B68     		ldr	r3, [r7, #4]
 939 00cc 1A62     		str	r2, [r3, #32]
 551:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 940              		.loc 1 551 53
 941 00ce 3B68     		ldr	r3, [r7]
 942 00d0 1A69     		ldr	r2, [r3, #16]
 943              		.loc 1 551 33
 944 00d2 7B68     		ldr	r3, [r7, #4]
 945 00d4 5A62     		str	r2, [r3, #36]
 552:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 946              		.loc 1 552 53
 947 00d6 3B68     		ldr	r3, [r7]
 948 00d8 5A69     		ldr	r2, [r3, #20]
 949              		.loc 1 552 33
 950 00da 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRWa7zz.s 			page 27


 951 00dc 9A62     		str	r2, [r3, #40]
 553:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 952              		.loc 1 553 53
 953 00de 3B68     		ldr	r3, [r7]
 954 00e0 9A69     		ldr	r2, [r3, #24]
 955              		.loc 1 553 33
 956 00e2 7B68     		ldr	r3, [r7, #4]
 957 00e4 DA62     		str	r2, [r3, #44]
 554:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 958              		.loc 1 554 53
 959 00e6 3B68     		ldr	r3, [r7]
 960 00e8 DA69     		ldr	r2, [r3, #28]
 961              		.loc 1 554 33
 962 00ea 7B68     		ldr	r3, [r7, #4]
 963 00ec 1A63     		str	r2, [r3, #48]
 555:./Lib/Src/stm32f4xx_cryp.c **** 
 556:./Lib/Src/stm32f4xx_cryp.c ****     /* Save the content of context swap registers */
 557:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 964              		.loc 1 557 47
 965 00ee 264B     		ldr	r3, .L42
 966 00f0 1A6D     		ldr	r2, [r3, #80]
 967              		.loc 1 557 41
 968 00f2 7B68     		ldr	r3, [r7, #4]
 969 00f4 5A63     		str	r2, [r3, #52]
 558:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 970              		.loc 1 558 47
 971 00f6 244B     		ldr	r3, .L42
 972 00f8 5A6D     		ldr	r2, [r3, #84]
 973              		.loc 1 558 41
 974 00fa 7B68     		ldr	r3, [r7, #4]
 975 00fc 9A63     		str	r2, [r3, #56]
 559:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 976              		.loc 1 559 47
 977 00fe 224B     		ldr	r3, .L42
 978 0100 9A6D     		ldr	r2, [r3, #88]
 979              		.loc 1 559 41
 980 0102 7B68     		ldr	r3, [r7, #4]
 981 0104 DA63     		str	r2, [r3, #60]
 560:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 982              		.loc 1 560 47
 983 0106 204B     		ldr	r3, .L42
 984 0108 DA6D     		ldr	r2, [r3, #92]
 985              		.loc 1 560 41
 986 010a 7B68     		ldr	r3, [r7, #4]
 987 010c 1A64     		str	r2, [r3, #64]
 561:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 988              		.loc 1 561 47
 989 010e 1E4B     		ldr	r3, .L42
 990 0110 1A6E     		ldr	r2, [r3, #96]
 991              		.loc 1 561 41
 992 0112 7B68     		ldr	r3, [r7, #4]
 993 0114 5A64     		str	r2, [r3, #68]
 562:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 994              		.loc 1 562 47
 995 0116 1C4B     		ldr	r3, .L42
 996 0118 5A6E     		ldr	r2, [r3, #100]
 997              		.loc 1 562 41
ARM GAS  /tmp/ccRWa7zz.s 			page 28


 998 011a 7B68     		ldr	r3, [r7, #4]
 999 011c 9A64     		str	r2, [r3, #72]
 563:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 1000              		.loc 1 563 47
 1001 011e 1A4B     		ldr	r3, .L42
 1002 0120 9A6E     		ldr	r2, [r3, #104]
 1003              		.loc 1 563 41
 1004 0122 7B68     		ldr	r3, [r7, #4]
 1005 0124 DA64     		str	r2, [r3, #76]
 564:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 1006              		.loc 1 564 47
 1007 0126 184B     		ldr	r3, .L42
 1008 0128 DA6E     		ldr	r2, [r3, #108]
 1009              		.loc 1 564 41
 1010 012a 7B68     		ldr	r3, [r7, #4]
 1011 012c 1A65     		str	r2, [r3, #80]
 565:./Lib/Src/stm32f4xx_cryp.c ****     
 566:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 1012              		.loc 1 566 44
 1013 012e 164B     		ldr	r3, .L42
 1014 0130 1A6F     		ldr	r2, [r3, #112]
 1015              		.loc 1 566 38
 1016 0132 7B68     		ldr	r3, [r7, #4]
 1017 0134 5A65     		str	r2, [r3, #84]
 567:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 1018              		.loc 1 567 44
 1019 0136 144B     		ldr	r3, .L42
 1020 0138 5A6F     		ldr	r2, [r3, #116]
 1021              		.loc 1 567 38
 1022 013a 7B68     		ldr	r3, [r7, #4]
 1023 013c 9A65     		str	r2, [r3, #88]
 568:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 1024              		.loc 1 568 44
 1025 013e 124B     		ldr	r3, .L42
 1026 0140 9A6F     		ldr	r2, [r3, #120]
 1027              		.loc 1 568 38
 1028 0142 7B68     		ldr	r3, [r7, #4]
 1029 0144 DA65     		str	r2, [r3, #92]
 569:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 1030              		.loc 1 569 44
 1031 0146 104B     		ldr	r3, .L42
 1032 0148 DA6F     		ldr	r2, [r3, #124]
 1033              		.loc 1 569 38
 1034 014a 7B68     		ldr	r3, [r7, #4]
 1035 014c 1A66     		str	r2, [r3, #96]
 570:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 1036              		.loc 1 570 44
 1037 014e 0E4B     		ldr	r3, .L42
 1038 0150 D3F88020 		ldr	r2, [r3, #128]
 1039              		.loc 1 570 38
 1040 0154 7B68     		ldr	r3, [r7, #4]
 1041 0156 5A66     		str	r2, [r3, #100]
 571:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 1042              		.loc 1 571 44
 1043 0158 0B4B     		ldr	r3, .L42
 1044 015a D3F88420 		ldr	r2, [r3, #132]
 1045              		.loc 1 571 38
ARM GAS  /tmp/ccRWa7zz.s 			page 29


 1046 015e 7B68     		ldr	r3, [r7, #4]
 1047 0160 9A66     		str	r2, [r3, #104]
 572:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 1048              		.loc 1 572 44
 1049 0162 094B     		ldr	r3, .L42
 1050 0164 D3F88820 		ldr	r2, [r3, #136]
 1051              		.loc 1 572 38
 1052 0168 7B68     		ldr	r3, [r7, #4]
 1053 016a DA66     		str	r2, [r3, #108]
 573:./Lib/Src/stm32f4xx_cryp.c ****     CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 1054              		.loc 1 573 44
 1055 016c 064B     		ldr	r3, .L42
 1056 016e D3F88C20 		ldr	r2, [r3, #140]
 1057              		.loc 1 573 38
 1058 0172 7B68     		ldr	r3, [r7, #4]
 1059 0174 1A67     		str	r2, [r3, #112]
 574:./Lib/Src/stm32f4xx_cryp.c ****     
 575:./Lib/Src/stm32f4xx_cryp.c ****    /* When needed, save the DMA status (pointers for IN and OUT messages, 
 576:./Lib/Src/stm32f4xx_cryp.c ****       number of remaining bytes, etc.) */
 577:./Lib/Src/stm32f4xx_cryp.c ****      
 578:./Lib/Src/stm32f4xx_cryp.c ****     status = SUCCESS;
 1060              		.loc 1 578 12
 1061 0176 0123     		movs	r3, #1
 1062 0178 FB74     		strb	r3, [r7, #19]
 1063              	.L40:
 579:./Lib/Src/stm32f4xx_cryp.c ****   }
 580:./Lib/Src/stm32f4xx_cryp.c **** 
 581:./Lib/Src/stm32f4xx_cryp.c ****    return status;
 1064              		.loc 1 581 11
 1065 017a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 582:./Lib/Src/stm32f4xx_cryp.c **** }
 1066              		.loc 1 582 1
 1067 017c 1846     		mov	r0, r3
 1068 017e 1C37     		adds	r7, r7, #28
 1069              		.cfi_def_cfa_offset 4
 1070 0180 BD46     		mov	sp, r7
 1071              		.cfi_def_cfa_register 13
 1072              		@ sp needed
 1073 0182 5DF8047B 		ldr	r7, [sp], #4
 1074              		.cfi_restore 7
 1075              		.cfi_def_cfa_offset 0
 1076 0186 7047     		bx	lr
 1077              	.L43:
 1078              		.align	2
 1079              	.L42:
 1080 0188 00000650 		.word	1342570496
 1081 018c FC030B00 		.word	721916
 1082              		.cfi_endproc
 1083              	.LFE135:
 1085              		.section	.text.CRYP_RestoreContext,"ax",%progbits
 1086              		.align	1
 1087              		.global	CRYP_RestoreContext
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1092              	CRYP_RestoreContext:
 1093              	.LFB136:
ARM GAS  /tmp/ccRWa7zz.s 			page 30


 583:./Lib/Src/stm32f4xx_cryp.c **** 
 584:./Lib/Src/stm32f4xx_cryp.c **** /**
 585:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Restores the CRYP peripheral Context.
 586:./Lib/Src/stm32f4xx_cryp.c ****   * @note   Since the DMA transfer is stopped in CRYP_SaveContext() function,
 587:./Lib/Src/stm32f4xx_cryp.c ****   *         after restoring the context, you have to enable the DMA again (if the
 588:./Lib/Src/stm32f4xx_cryp.c ****   *         DMA was previously used).  
 589:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_ContextRestore: pointer to a CRYP_Context structure that contains
 590:./Lib/Src/stm32f4xx_cryp.c ****   *         the repository for saved context.
 591:./Lib/Src/stm32f4xx_cryp.c ****   * @note   The data that were saved during context saving must be rewritten into
 592:./Lib/Src/stm32f4xx_cryp.c ****   *         the IN FIFO.
 593:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 594:./Lib/Src/stm32f4xx_cryp.c ****   */
 595:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
 596:./Lib/Src/stm32f4xx_cryp.c **** {
 1094              		.loc 1 596 1
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 8
 1097              		@ frame_needed = 1, uses_anonymous_args = 0
 1098              		@ link register save eliminated.
 1099 0000 80B4     		push	{r7}
 1100              		.cfi_def_cfa_offset 4
 1101              		.cfi_offset 7, -4
 1102 0002 83B0     		sub	sp, sp, #12
 1103              		.cfi_def_cfa_offset 16
 1104 0004 00AF     		add	r7, sp, #0
 1105              		.cfi_def_cfa_register 7
 1106 0006 7860     		str	r0, [r7, #4]
 597:./Lib/Src/stm32f4xx_cryp.c **** 
 598:./Lib/Src/stm32f4xx_cryp.c ****   /* Configure the processor with the saved configuration */
 599:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 1107              		.loc 1 599 7
 1108 0008 414A     		ldr	r2, .L45
 1109              		.loc 1 599 33
 1110 000a 7B68     		ldr	r3, [r7, #4]
 1111 000c 1B68     		ldr	r3, [r3]
 1112              		.loc 1 599 12
 1113 000e 1360     		str	r3, [r2]
 600:./Lib/Src/stm32f4xx_cryp.c **** 
 601:./Lib/Src/stm32f4xx_cryp.c ****   /* restore The key value */
 602:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 1114              		.loc 1 602 7
 1115 0010 3F4A     		ldr	r2, .L45
 1116              		.loc 1 602 35
 1117 0012 7B68     		ldr	r3, [r7, #4]
 1118 0014 5B69     		ldr	r3, [r3, #20]
 1119              		.loc 1 602 14
 1120 0016 1362     		str	r3, [r2, #32]
 603:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 1121              		.loc 1 603 7
 1122 0018 3D4A     		ldr	r2, .L45
 1123              		.loc 1 603 35
 1124 001a 7B68     		ldr	r3, [r7, #4]
 1125 001c 9B69     		ldr	r3, [r3, #24]
 1126              		.loc 1 603 14
 1127 001e 5362     		str	r3, [r2, #36]
 604:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 1128              		.loc 1 604 7
ARM GAS  /tmp/ccRWa7zz.s 			page 31


 1129 0020 3B4A     		ldr	r2, .L45
 1130              		.loc 1 604 35
 1131 0022 7B68     		ldr	r3, [r7, #4]
 1132 0024 DB69     		ldr	r3, [r3, #28]
 1133              		.loc 1 604 14
 1134 0026 9362     		str	r3, [r2, #40]
 605:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 1135              		.loc 1 605 7
 1136 0028 394A     		ldr	r2, .L45
 1137              		.loc 1 605 35
 1138 002a 7B68     		ldr	r3, [r7, #4]
 1139 002c 1B6A     		ldr	r3, [r3, #32]
 1140              		.loc 1 605 14
 1141 002e D362     		str	r3, [r2, #44]
 606:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 1142              		.loc 1 606 7
 1143 0030 374A     		ldr	r2, .L45
 1144              		.loc 1 606 35
 1145 0032 7B68     		ldr	r3, [r7, #4]
 1146 0034 5B6A     		ldr	r3, [r3, #36]
 1147              		.loc 1 606 14
 1148 0036 1363     		str	r3, [r2, #48]
 607:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 1149              		.loc 1 607 7
 1150 0038 354A     		ldr	r2, .L45
 1151              		.loc 1 607 35
 1152 003a 7B68     		ldr	r3, [r7, #4]
 1153 003c 9B6A     		ldr	r3, [r3, #40]
 1154              		.loc 1 607 14
 1155 003e 5363     		str	r3, [r2, #52]
 608:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 1156              		.loc 1 608 7
 1157 0040 334A     		ldr	r2, .L45
 1158              		.loc 1 608 35
 1159 0042 7B68     		ldr	r3, [r7, #4]
 1160 0044 DB6A     		ldr	r3, [r3, #44]
 1161              		.loc 1 608 14
 1162 0046 9363     		str	r3, [r2, #56]
 609:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 1163              		.loc 1 609 7
 1164 0048 314A     		ldr	r2, .L45
 1165              		.loc 1 609 35
 1166 004a 7B68     		ldr	r3, [r7, #4]
 1167 004c 1B6B     		ldr	r3, [r3, #48]
 1168              		.loc 1 609 14
 1169 004e D363     		str	r3, [r2, #60]
 610:./Lib/Src/stm32f4xx_cryp.c **** 
 611:./Lib/Src/stm32f4xx_cryp.c ****   /* and the initialization vectors. */
 612:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 1170              		.loc 1 612 7
 1171 0050 2F4A     		ldr	r2, .L45
 1172              		.loc 1 612 36
 1173 0052 7B68     		ldr	r3, [r7, #4]
 1174 0054 5B68     		ldr	r3, [r3, #4]
 1175              		.loc 1 612 15
 1176 0056 1364     		str	r3, [r2, #64]
 613:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
ARM GAS  /tmp/ccRWa7zz.s 			page 32


 1177              		.loc 1 613 7
 1178 0058 2D4A     		ldr	r2, .L45
 1179              		.loc 1 613 36
 1180 005a 7B68     		ldr	r3, [r7, #4]
 1181 005c 9B68     		ldr	r3, [r3, #8]
 1182              		.loc 1 613 15
 1183 005e 5364     		str	r3, [r2, #68]
 614:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 1184              		.loc 1 614 7
 1185 0060 2B4A     		ldr	r2, .L45
 1186              		.loc 1 614 36
 1187 0062 7B68     		ldr	r3, [r7, #4]
 1188 0064 DB68     		ldr	r3, [r3, #12]
 1189              		.loc 1 614 15
 1190 0066 9364     		str	r3, [r2, #72]
 615:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 1191              		.loc 1 615 7
 1192 0068 294A     		ldr	r2, .L45
 1193              		.loc 1 615 36
 1194 006a 7B68     		ldr	r3, [r7, #4]
 1195 006c 1B69     		ldr	r3, [r3, #16]
 1196              		.loc 1 615 15
 1197 006e D364     		str	r3, [r2, #76]
 616:./Lib/Src/stm32f4xx_cryp.c **** 
 617:./Lib/Src/stm32f4xx_cryp.c ****   /* Restore the content of context swap registers */
 618:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 1198              		.loc 1 618 7
 1199 0070 274A     		ldr	r2, .L45
 1200              		.loc 1 618 57
 1201 0072 7B68     		ldr	r3, [r7, #4]
 1202 0074 5B6B     		ldr	r3, [r3, #52]
 1203              		.loc 1 618 20
 1204 0076 1365     		str	r3, [r2, #80]
 619:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 1205              		.loc 1 619 7
 1206 0078 254A     		ldr	r2, .L45
 1207              		.loc 1 619 57
 1208 007a 7B68     		ldr	r3, [r7, #4]
 1209 007c 9B6B     		ldr	r3, [r3, #56]
 1210              		.loc 1 619 20
 1211 007e 5365     		str	r3, [r2, #84]
 620:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 1212              		.loc 1 620 7
 1213 0080 234A     		ldr	r2, .L45
 1214              		.loc 1 620 57
 1215 0082 7B68     		ldr	r3, [r7, #4]
 1216 0084 DB6B     		ldr	r3, [r3, #60]
 1217              		.loc 1 620 20
 1218 0086 9365     		str	r3, [r2, #88]
 621:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 1219              		.loc 1 621 7
 1220 0088 214A     		ldr	r2, .L45
 1221              		.loc 1 621 57
 1222 008a 7B68     		ldr	r3, [r7, #4]
 1223 008c 1B6C     		ldr	r3, [r3, #64]
 1224              		.loc 1 621 20
 1225 008e D365     		str	r3, [r2, #92]
ARM GAS  /tmp/ccRWa7zz.s 			page 33


 622:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 1226              		.loc 1 622 7
 1227 0090 1F4A     		ldr	r2, .L45
 1228              		.loc 1 622 57
 1229 0092 7B68     		ldr	r3, [r7, #4]
 1230 0094 5B6C     		ldr	r3, [r3, #68]
 1231              		.loc 1 622 20
 1232 0096 1366     		str	r3, [r2, #96]
 623:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 1233              		.loc 1 623 7
 1234 0098 1D4A     		ldr	r2, .L45
 1235              		.loc 1 623 57
 1236 009a 7B68     		ldr	r3, [r7, #4]
 1237 009c 9B6C     		ldr	r3, [r3, #72]
 1238              		.loc 1 623 20
 1239 009e 5366     		str	r3, [r2, #100]
 624:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 1240              		.loc 1 624 7
 1241 00a0 1B4A     		ldr	r2, .L45
 1242              		.loc 1 624 57
 1243 00a2 7B68     		ldr	r3, [r7, #4]
 1244 00a4 DB6C     		ldr	r3, [r3, #76]
 1245              		.loc 1 624 20
 1246 00a6 9366     		str	r3, [r2, #104]
 625:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 1247              		.loc 1 625 7
 1248 00a8 194A     		ldr	r2, .L45
 1249              		.loc 1 625 57
 1250 00aa 7B68     		ldr	r3, [r7, #4]
 1251 00ac 1B6D     		ldr	r3, [r3, #80]
 1252              		.loc 1 625 20
 1253 00ae D366     		str	r3, [r2, #108]
 626:./Lib/Src/stm32f4xx_cryp.c ****   
 627:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 1254              		.loc 1 627 7
 1255 00b0 174A     		ldr	r2, .L45
 1256              		.loc 1 627 51
 1257 00b2 7B68     		ldr	r3, [r7, #4]
 1258 00b4 5B6D     		ldr	r3, [r3, #84]
 1259              		.loc 1 627 17
 1260 00b6 1367     		str	r3, [r2, #112]
 628:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 1261              		.loc 1 628 7
 1262 00b8 154A     		ldr	r2, .L45
 1263              		.loc 1 628 51
 1264 00ba 7B68     		ldr	r3, [r7, #4]
 1265 00bc 9B6D     		ldr	r3, [r3, #88]
 1266              		.loc 1 628 17
 1267 00be 5367     		str	r3, [r2, #116]
 629:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 1268              		.loc 1 629 7
 1269 00c0 134A     		ldr	r2, .L45
 1270              		.loc 1 629 51
 1271 00c2 7B68     		ldr	r3, [r7, #4]
 1272 00c4 DB6D     		ldr	r3, [r3, #92]
 1273              		.loc 1 629 17
 1274 00c6 9367     		str	r3, [r2, #120]
ARM GAS  /tmp/ccRWa7zz.s 			page 34


 630:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 1275              		.loc 1 630 7
 1276 00c8 114A     		ldr	r2, .L45
 1277              		.loc 1 630 51
 1278 00ca 7B68     		ldr	r3, [r7, #4]
 1279 00cc 1B6E     		ldr	r3, [r3, #96]
 1280              		.loc 1 630 17
 1281 00ce D367     		str	r3, [r2, #124]
 631:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 1282              		.loc 1 631 7
 1283 00d0 0F4A     		ldr	r2, .L45
 1284              		.loc 1 631 51
 1285 00d2 7B68     		ldr	r3, [r7, #4]
 1286 00d4 5B6E     		ldr	r3, [r3, #100]
 1287              		.loc 1 631 17
 1288 00d6 C2F88030 		str	r3, [r2, #128]
 632:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 1289              		.loc 1 632 7
 1290 00da 0D4A     		ldr	r2, .L45
 1291              		.loc 1 632 51
 1292 00dc 7B68     		ldr	r3, [r7, #4]
 1293 00de 9B6E     		ldr	r3, [r3, #104]
 1294              		.loc 1 632 17
 1295 00e0 C2F88430 		str	r3, [r2, #132]
 633:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 1296              		.loc 1 633 7
 1297 00e4 0A4A     		ldr	r2, .L45
 1298              		.loc 1 633 51
 1299 00e6 7B68     		ldr	r3, [r7, #4]
 1300 00e8 DB6E     		ldr	r3, [r3, #108]
 1301              		.loc 1 633 17
 1302 00ea C2F88830 		str	r3, [r2, #136]
 634:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 1303              		.loc 1 634 7
 1304 00ee 084A     		ldr	r2, .L45
 1305              		.loc 1 634 51
 1306 00f0 7B68     		ldr	r3, [r7, #4]
 1307 00f2 1B6F     		ldr	r3, [r3, #112]
 1308              		.loc 1 634 17
 1309 00f4 C2F88C30 		str	r3, [r2, #140]
 635:./Lib/Src/stm32f4xx_cryp.c ****   
 636:./Lib/Src/stm32f4xx_cryp.c ****   /* Enable the cryptographic processor */
 637:./Lib/Src/stm32f4xx_cryp.c ****   CRYP->CR |= CRYP_CR_CRYPEN;
 1310              		.loc 1 637 7
 1311 00f8 054B     		ldr	r3, .L45
 1312 00fa 1B68     		ldr	r3, [r3]
 1313 00fc 044A     		ldr	r2, .L45
 1314              		.loc 1 637 12
 1315 00fe 43F40043 		orr	r3, r3, #32768
 1316 0102 1360     		str	r3, [r2]
 638:./Lib/Src/stm32f4xx_cryp.c **** }
 1317              		.loc 1 638 1
 1318 0104 00BF     		nop
 1319 0106 0C37     		adds	r7, r7, #12
 1320              		.cfi_def_cfa_offset 4
 1321 0108 BD46     		mov	sp, r7
 1322              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccRWa7zz.s 			page 35


 1323              		@ sp needed
 1324 010a 5DF8047B 		ldr	r7, [sp], #4
 1325              		.cfi_restore 7
 1326              		.cfi_def_cfa_offset 0
 1327 010e 7047     		bx	lr
 1328              	.L46:
 1329              		.align	2
 1330              	.L45:
 1331 0110 00000650 		.word	1342570496
 1332              		.cfi_endproc
 1333              	.LFE136:
 1335              		.section	.text.CRYP_DMACmd,"ax",%progbits
 1336              		.align	1
 1337              		.global	CRYP_DMACmd
 1338              		.syntax unified
 1339              		.thumb
 1340              		.thumb_func
 1342              	CRYP_DMACmd:
 1343              	.LFB137:
 639:./Lib/Src/stm32f4xx_cryp.c **** /**
 640:./Lib/Src/stm32f4xx_cryp.c ****   * @}
 641:./Lib/Src/stm32f4xx_cryp.c ****   */
 642:./Lib/Src/stm32f4xx_cryp.c **** 
 643:./Lib/Src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group4 CRYP's DMA interface Configuration function
 644:./Lib/Src/stm32f4xx_cryp.c ****  *  @brief   CRYP's DMA interface Configuration function 
 645:./Lib/Src/stm32f4xx_cryp.c ****  *
 646:./Lib/Src/stm32f4xx_cryp.c **** @verbatim   
 647:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================
 648:./Lib/Src/stm32f4xx_cryp.c ****              ##### CRYP's DMA interface Configuration function #####
 649:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================  
 650:./Lib/Src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to configure the DMA interface for 
 651:./Lib/Src/stm32f4xx_cryp.c ****       CRYP data input and output transfer.
 652:./Lib/Src/stm32f4xx_cryp.c ****    
 653:./Lib/Src/stm32f4xx_cryp.c ****  [..] When the DMA mode is enabled (using the CRYP_DMACmd() function), data can be 
 654:./Lib/Src/stm32f4xx_cryp.c ****       transferred:
 655:./Lib/Src/stm32f4xx_cryp.c ****    (+) From memory to the CRYP IN FIFO using the DMA peripheral by enabling 
 656:./Lib/Src/stm32f4xx_cryp.c ****        the CRYP_DMAReq_DataIN request.
 657:./Lib/Src/stm32f4xx_cryp.c ****    (+) From the CRYP OUT FIFO to the memory using the DMA peripheral by enabling 
 658:./Lib/Src/stm32f4xx_cryp.c ****        the CRYP_DMAReq_DataOUT request.
 659:./Lib/Src/stm32f4xx_cryp.c **** 
 660:./Lib/Src/stm32f4xx_cryp.c **** @endverbatim
 661:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 662:./Lib/Src/stm32f4xx_cryp.c ****   */
 663:./Lib/Src/stm32f4xx_cryp.c **** 
 664:./Lib/Src/stm32f4xx_cryp.c **** /**
 665:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the CRYP DMA interface.
 666:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_DMAReq: specifies the CRYP DMA transfer request to be enabled or disabled.
 667:./Lib/Src/stm32f4xx_cryp.c ****   *           This parameter can be any combination of the following values:
 668:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataOUT: DMA for outgoing(Tx) data transfer
 669:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_DMAReq_DataIN: DMA for incoming(Rx) data transfer
 670:./Lib/Src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the selected CRYP DMA transfer request.
 671:./Lib/Src/stm32f4xx_cryp.c ****   *          This parameter can be: ENABLE or DISABLE.
 672:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 673:./Lib/Src/stm32f4xx_cryp.c ****   */
 674:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
 675:./Lib/Src/stm32f4xx_cryp.c **** {
 1344              		.loc 1 675 1
ARM GAS  /tmp/ccRWa7zz.s 			page 36


 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 8
 1347              		@ frame_needed = 1, uses_anonymous_args = 0
 1348              		@ link register save eliminated.
 1349 0000 80B4     		push	{r7}
 1350              		.cfi_def_cfa_offset 4
 1351              		.cfi_offset 7, -4
 1352 0002 83B0     		sub	sp, sp, #12
 1353              		.cfi_def_cfa_offset 16
 1354 0004 00AF     		add	r7, sp, #0
 1355              		.cfi_def_cfa_register 7
 1356 0006 0346     		mov	r3, r0
 1357 0008 0A46     		mov	r2, r1
 1358 000a FB71     		strb	r3, [r7, #7]
 1359 000c 1346     		mov	r3, r2
 1360 000e BB71     		strb	r3, [r7, #6]
 676:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the parameters */
 677:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
 678:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 679:./Lib/Src/stm32f4xx_cryp.c **** 
 680:./Lib/Src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 1361              		.loc 1 680 6
 1362 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1363 0012 002B     		cmp	r3, #0
 1364 0014 06D0     		beq	.L48
 681:./Lib/Src/stm32f4xx_cryp.c ****   {
 682:./Lib/Src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP DMA request */
 683:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->DMACR |= CRYP_DMAReq;
 1365              		.loc 1 683 9
 1366 0016 0B4B     		ldr	r3, .L51
 1367 0018 1A69     		ldr	r2, [r3, #16]
 1368              		.loc 1 683 17
 1369 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1370              		.loc 1 683 9
 1371 001c 0949     		ldr	r1, .L51
 1372              		.loc 1 683 17
 1373 001e 1343     		orrs	r3, r3, r2
 1374 0020 0B61     		str	r3, [r1, #16]
 684:./Lib/Src/stm32f4xx_cryp.c ****   }
 685:./Lib/Src/stm32f4xx_cryp.c ****   else
 686:./Lib/Src/stm32f4xx_cryp.c ****   {
 687:./Lib/Src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP DMA request */
 688:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 689:./Lib/Src/stm32f4xx_cryp.c ****   }
 690:./Lib/Src/stm32f4xx_cryp.c **** }
 1375              		.loc 1 690 1
 1376 0022 08E0     		b	.L50
 1377              	.L48:
 688:./Lib/Src/stm32f4xx_cryp.c ****   }
 1378              		.loc 1 688 9
 1379 0024 074B     		ldr	r3, .L51
 1380 0026 1B69     		ldr	r3, [r3, #16]
 688:./Lib/Src/stm32f4xx_cryp.c ****   }
 1381              		.loc 1 688 20
 1382 0028 FA79     		ldrb	r2, [r7, #7]
 1383 002a D243     		mvns	r2, r2
 1384 002c D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccRWa7zz.s 			page 37


 1385 002e 1146     		mov	r1, r2
 688:./Lib/Src/stm32f4xx_cryp.c ****   }
 1386              		.loc 1 688 9
 1387 0030 044A     		ldr	r2, .L51
 688:./Lib/Src/stm32f4xx_cryp.c ****   }
 1388              		.loc 1 688 17
 1389 0032 0B40     		ands	r3, r3, r1
 1390 0034 1361     		str	r3, [r2, #16]
 1391              	.L50:
 1392              		.loc 1 690 1
 1393 0036 00BF     		nop
 1394 0038 0C37     		adds	r7, r7, #12
 1395              		.cfi_def_cfa_offset 4
 1396 003a BD46     		mov	sp, r7
 1397              		.cfi_def_cfa_register 13
 1398              		@ sp needed
 1399 003c 5DF8047B 		ldr	r7, [sp], #4
 1400              		.cfi_restore 7
 1401              		.cfi_def_cfa_offset 0
 1402 0040 7047     		bx	lr
 1403              	.L52:
 1404 0042 00BF     		.align	2
 1405              	.L51:
 1406 0044 00000650 		.word	1342570496
 1407              		.cfi_endproc
 1408              	.LFE137:
 1410              		.section	.text.CRYP_ITConfig,"ax",%progbits
 1411              		.align	1
 1412              		.global	CRYP_ITConfig
 1413              		.syntax unified
 1414              		.thumb
 1415              		.thumb_func
 1417              	CRYP_ITConfig:
 1418              	.LFB138:
 691:./Lib/Src/stm32f4xx_cryp.c **** /**
 692:./Lib/Src/stm32f4xx_cryp.c ****   * @}
 693:./Lib/Src/stm32f4xx_cryp.c ****   */
 694:./Lib/Src/stm32f4xx_cryp.c **** 
 695:./Lib/Src/stm32f4xx_cryp.c **** /** @defgroup CRYP_Group5 Interrupts and flags management functions
 696:./Lib/Src/stm32f4xx_cryp.c ****  *  @brief   Interrupts and flags management functions
 697:./Lib/Src/stm32f4xx_cryp.c ****  *
 698:./Lib/Src/stm32f4xx_cryp.c **** @verbatim   
 699:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================
 700:./Lib/Src/stm32f4xx_cryp.c ****               ##### Interrupts and flags management functions #####
 701:./Lib/Src/stm32f4xx_cryp.c ****  ===============================================================================  
 702:./Lib/Src/stm32f4xx_cryp.c ****  
 703:./Lib/Src/stm32f4xx_cryp.c ****  [..] This section provides functions allowing to configure the CRYP Interrupts and 
 704:./Lib/Src/stm32f4xx_cryp.c ****       to get the status and Interrupts pending bits.
 705:./Lib/Src/stm32f4xx_cryp.c **** 
 706:./Lib/Src/stm32f4xx_cryp.c ****  [..] The CRYP provides 2 Interrupts sources and 7 Flags:
 707:./Lib/Src/stm32f4xx_cryp.c **** 
 708:./Lib/Src/stm32f4xx_cryp.c ****  *** Flags : ***
 709:./Lib/Src/stm32f4xx_cryp.c ****  ===============
 710:./Lib/Src/stm32f4xx_cryp.c ****  [..] 
 711:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_IFEM :  Set when Input FIFO is empty. This Flag is cleared only
 712:./Lib/Src/stm32f4xx_cryp.c ****        by hardware.
 713:./Lib/Src/stm32f4xx_cryp.c ****       
ARM GAS  /tmp/ccRWa7zz.s 			page 38


 714:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_IFNF :  Set when Input FIFO is not full. This Flag is cleared 
 715:./Lib/Src/stm32f4xx_cryp.c ****        only by hardware.
 716:./Lib/Src/stm32f4xx_cryp.c **** 
 717:./Lib/Src/stm32f4xx_cryp.c **** 
 718:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_INRIS  : Set when Input FIFO Raw interrupt is pending it gives 
 719:./Lib/Src/stm32f4xx_cryp.c ****        the raw interrupt state prior to masking of the input FIFO service interrupt.
 720:./Lib/Src/stm32f4xx_cryp.c ****        This Flag is cleared only by hardware.
 721:./Lib/Src/stm32f4xx_cryp.c ****      
 722:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_OFNE   : Set when Output FIFO not empty. This Flag is cleared 
 723:./Lib/Src/stm32f4xx_cryp.c ****        only by hardware.
 724:./Lib/Src/stm32f4xx_cryp.c ****         
 725:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_OFFU   : Set when Output FIFO is full. This Flag is cleared only 
 726:./Lib/Src/stm32f4xx_cryp.c ****        by hardware.
 727:./Lib/Src/stm32f4xx_cryp.c ****                            
 728:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_OUTRIS : Set when Output FIFO Raw interrupt is pending it gives 
 729:./Lib/Src/stm32f4xx_cryp.c ****        the raw interrupt state prior to masking of the output FIFO service interrupt.
 730:./Lib/Src/stm32f4xx_cryp.c ****        This Flag is cleared only by hardware.
 731:./Lib/Src/stm32f4xx_cryp.c ****                                
 732:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_FLAG_BUSY   : Set when the CRYP core is currently processing a block 
 733:./Lib/Src/stm32f4xx_cryp.c ****        of data or a key preparation (for AES decryption). This Flag is cleared 
 734:./Lib/Src/stm32f4xx_cryp.c ****        only by hardware. To clear it, the CRYP core must be disabled and the last
 735:./Lib/Src/stm32f4xx_cryp.c ****        processing has completed. 
 736:./Lib/Src/stm32f4xx_cryp.c **** 
 737:./Lib/Src/stm32f4xx_cryp.c ****  *** Interrupts : ***
 738:./Lib/Src/stm32f4xx_cryp.c ****  ====================
 739:./Lib/Src/stm32f4xx_cryp.c ****  [..]
 740:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_IT_INI   : The input FIFO service interrupt is asserted when there 
 741:./Lib/Src/stm32f4xx_cryp.c ****       are less than 4 words in the input FIFO. This interrupt is associated to 
 742:./Lib/Src/stm32f4xx_cryp.c ****       CRYP_FLAG_INRIS flag.
 743:./Lib/Src/stm32f4xx_cryp.c **** 
 744:./Lib/Src/stm32f4xx_cryp.c ****       -@- This interrupt is cleared by performing write operations to the input FIFO 
 745:./Lib/Src/stm32f4xx_cryp.c ****           until it holds 4 or more words. The input FIFO service interrupt INMIS is 
 746:./Lib/Src/stm32f4xx_cryp.c ****           enabled with the CRYP enable bit. Consequently, when CRYP is disabled, the 
 747:./Lib/Src/stm32f4xx_cryp.c ****           INMIS signal is low even if the input FIFO is empty.
 748:./Lib/Src/stm32f4xx_cryp.c **** 
 749:./Lib/Src/stm32f4xx_cryp.c **** 
 750:./Lib/Src/stm32f4xx_cryp.c **** 
 751:./Lib/Src/stm32f4xx_cryp.c ****    (#) CRYP_IT_OUTI  : The output FIFO service interrupt is asserted when there 
 752:./Lib/Src/stm32f4xx_cryp.c ****        is one or more (32-bit word) data items in the output FIFO. This interrupt 
 753:./Lib/Src/stm32f4xx_cryp.c ****        is associated to CRYP_FLAG_OUTRIS flag.
 754:./Lib/Src/stm32f4xx_cryp.c **** 
 755:./Lib/Src/stm32f4xx_cryp.c ****        -@- This interrupt is cleared by reading data from the output FIFO until there 
 756:./Lib/Src/stm32f4xx_cryp.c ****            is no valid (32-bit) word left (that is, the interrupt follows the state 
 757:./Lib/Src/stm32f4xx_cryp.c ****            of the OFNE (output FIFO not empty) flag).
 758:./Lib/Src/stm32f4xx_cryp.c **** 
 759:./Lib/Src/stm32f4xx_cryp.c ****  *** Managing the CRYP controller events : ***
 760:./Lib/Src/stm32f4xx_cryp.c ****  =============================================
 761:./Lib/Src/stm32f4xx_cryp.c ****  [..] The user should identify which mode will be used in his application to manage 
 762:./Lib/Src/stm32f4xx_cryp.c ****       the CRYP controller events: Polling mode or Interrupt mode.
 763:./Lib/Src/stm32f4xx_cryp.c **** 
 764:./Lib/Src/stm32f4xx_cryp.c ****    (#) In the Polling Mode it is advised to use the following functions:
 765:./Lib/Src/stm32f4xx_cryp.c ****        (++) CRYP_GetFlagStatus() : to check if flags events occur. 
 766:./Lib/Src/stm32f4xx_cryp.c **** 
 767:./Lib/Src/stm32f4xx_cryp.c ****        -@@- The CRYPT flags do not need to be cleared since they are cleared as 
 768:./Lib/Src/stm32f4xx_cryp.c ****             soon as the associated event are reset.   
 769:./Lib/Src/stm32f4xx_cryp.c **** 
 770:./Lib/Src/stm32f4xx_cryp.c **** 
ARM GAS  /tmp/ccRWa7zz.s 			page 39


 771:./Lib/Src/stm32f4xx_cryp.c ****    (#) In the Interrupt Mode it is advised to use the following functions:
 772:./Lib/Src/stm32f4xx_cryp.c ****        (++) CRYP_ITConfig()       : to enable or disable the interrupt source.
 773:./Lib/Src/stm32f4xx_cryp.c ****        (++) CRYP_GetITStatus()    : to check if Interrupt occurs.
 774:./Lib/Src/stm32f4xx_cryp.c **** 
 775:./Lib/Src/stm32f4xx_cryp.c ****        -@@- The CRYPT interrupts have no pending bits, the interrupt is cleared as 
 776:./Lib/Src/stm32f4xx_cryp.c ****              soon as the associated event is reset. 
 777:./Lib/Src/stm32f4xx_cryp.c **** 
 778:./Lib/Src/stm32f4xx_cryp.c **** @endverbatim
 779:./Lib/Src/stm32f4xx_cryp.c ****   * @{
 780:./Lib/Src/stm32f4xx_cryp.c ****   */ 
 781:./Lib/Src/stm32f4xx_cryp.c **** 
 782:./Lib/Src/stm32f4xx_cryp.c **** /**
 783:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Enables or disables the specified CRYP interrupts.
 784:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP interrupt source to be enabled or disabled.
 785:./Lib/Src/stm32f4xx_cryp.c ****   *          This parameter can be any combination of the following values:
 786:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 787:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 788:./Lib/Src/stm32f4xx_cryp.c ****   * @param  NewState: new state of the specified CRYP interrupt.
 789:./Lib/Src/stm32f4xx_cryp.c ****   *           This parameter can be: ENABLE or DISABLE.
 790:./Lib/Src/stm32f4xx_cryp.c ****   * @retval None
 791:./Lib/Src/stm32f4xx_cryp.c ****   */
 792:./Lib/Src/stm32f4xx_cryp.c **** void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
 793:./Lib/Src/stm32f4xx_cryp.c **** {
 1419              		.loc 1 793 1
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 8
 1422              		@ frame_needed = 1, uses_anonymous_args = 0
 1423              		@ link register save eliminated.
 1424 0000 80B4     		push	{r7}
 1425              		.cfi_def_cfa_offset 4
 1426              		.cfi_offset 7, -4
 1427 0002 83B0     		sub	sp, sp, #12
 1428              		.cfi_def_cfa_offset 16
 1429 0004 00AF     		add	r7, sp, #0
 1430              		.cfi_def_cfa_register 7
 1431 0006 0346     		mov	r3, r0
 1432 0008 0A46     		mov	r2, r1
 1433 000a FB71     		strb	r3, [r7, #7]
 1434 000c 1346     		mov	r3, r2
 1435 000e BB71     		strb	r3, [r7, #6]
 794:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the parameters */
 795:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
 796:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 797:./Lib/Src/stm32f4xx_cryp.c **** 
 798:./Lib/Src/stm32f4xx_cryp.c ****   if (NewState != DISABLE)
 1436              		.loc 1 798 6
 1437 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1438 0012 002B     		cmp	r3, #0
 1439 0014 06D0     		beq	.L54
 799:./Lib/Src/stm32f4xx_cryp.c ****   {
 800:./Lib/Src/stm32f4xx_cryp.c ****     /* Enable the selected CRYP interrupt */
 801:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->IMSCR |= CRYP_IT;
 1440              		.loc 1 801 9
 1441 0016 0B4B     		ldr	r3, .L57
 1442 0018 5A69     		ldr	r2, [r3, #20]
 1443              		.loc 1 801 17
 1444 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/ccRWa7zz.s 			page 40


 1445              		.loc 1 801 9
 1446 001c 0949     		ldr	r1, .L57
 1447              		.loc 1 801 17
 1448 001e 1343     		orrs	r3, r3, r2
 1449 0020 4B61     		str	r3, [r1, #20]
 802:./Lib/Src/stm32f4xx_cryp.c ****   }
 803:./Lib/Src/stm32f4xx_cryp.c ****   else
 804:./Lib/Src/stm32f4xx_cryp.c ****   {
 805:./Lib/Src/stm32f4xx_cryp.c ****     /* Disable the selected CRYP interrupt */
 806:./Lib/Src/stm32f4xx_cryp.c ****     CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 807:./Lib/Src/stm32f4xx_cryp.c ****   }
 808:./Lib/Src/stm32f4xx_cryp.c **** }
 1450              		.loc 1 808 1
 1451 0022 08E0     		b	.L56
 1452              	.L54:
 806:./Lib/Src/stm32f4xx_cryp.c ****   }
 1453              		.loc 1 806 9
 1454 0024 074B     		ldr	r3, .L57
 1455 0026 5B69     		ldr	r3, [r3, #20]
 806:./Lib/Src/stm32f4xx_cryp.c ****   }
 1456              		.loc 1 806 20
 1457 0028 FA79     		ldrb	r2, [r7, #7]
 1458 002a D243     		mvns	r2, r2
 1459 002c D2B2     		uxtb	r2, r2
 1460 002e 1146     		mov	r1, r2
 806:./Lib/Src/stm32f4xx_cryp.c ****   }
 1461              		.loc 1 806 9
 1462 0030 044A     		ldr	r2, .L57
 806:./Lib/Src/stm32f4xx_cryp.c ****   }
 1463              		.loc 1 806 17
 1464 0032 0B40     		ands	r3, r3, r1
 1465 0034 5361     		str	r3, [r2, #20]
 1466              	.L56:
 1467              		.loc 1 808 1
 1468 0036 00BF     		nop
 1469 0038 0C37     		adds	r7, r7, #12
 1470              		.cfi_def_cfa_offset 4
 1471 003a BD46     		mov	sp, r7
 1472              		.cfi_def_cfa_register 13
 1473              		@ sp needed
 1474 003c 5DF8047B 		ldr	r7, [sp], #4
 1475              		.cfi_restore 7
 1476              		.cfi_def_cfa_offset 0
 1477 0040 7047     		bx	lr
 1478              	.L58:
 1479 0042 00BF     		.align	2
 1480              	.L57:
 1481 0044 00000650 		.word	1342570496
 1482              		.cfi_endproc
 1483              	.LFE138:
 1485              		.section	.text.CRYP_GetITStatus,"ax",%progbits
 1486              		.align	1
 1487              		.global	CRYP_GetITStatus
 1488              		.syntax unified
 1489              		.thumb
 1490              		.thumb_func
 1492              	CRYP_GetITStatus:
ARM GAS  /tmp/ccRWa7zz.s 			page 41


 1493              	.LFB139:
 809:./Lib/Src/stm32f4xx_cryp.c **** 
 810:./Lib/Src/stm32f4xx_cryp.c **** /**
 811:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP interrupt has occurred or not.
 812:./Lib/Src/stm32f4xx_cryp.c ****   * @note   This function checks the status of the masked interrupt (i.e the 
 813:./Lib/Src/stm32f4xx_cryp.c ****   *         interrupt should be previously enabled).     
 814:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_IT: specifies the CRYP (masked) interrupt source to check.
 815:./Lib/Src/stm32f4xx_cryp.c ****   *           This parameter can be one of the following values:
 816:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_INI: Input FIFO interrupt
 817:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_IT_OUTI: Output FIFO interrupt
 818:./Lib/Src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_IT (SET or RESET).
 819:./Lib/Src/stm32f4xx_cryp.c ****   */
 820:./Lib/Src/stm32f4xx_cryp.c **** ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
 821:./Lib/Src/stm32f4xx_cryp.c **** {
 1494              		.loc 1 821 1
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 16
 1497              		@ frame_needed = 1, uses_anonymous_args = 0
 1498              		@ link register save eliminated.
 1499 0000 80B4     		push	{r7}
 1500              		.cfi_def_cfa_offset 4
 1501              		.cfi_offset 7, -4
 1502 0002 85B0     		sub	sp, sp, #20
 1503              		.cfi_def_cfa_offset 24
 1504 0004 00AF     		add	r7, sp, #0
 1505              		.cfi_def_cfa_register 7
 1506 0006 0346     		mov	r3, r0
 1507 0008 FB71     		strb	r3, [r7, #7]
 822:./Lib/Src/stm32f4xx_cryp.c ****   ITStatus bitstatus = RESET;
 1508              		.loc 1 822 12
 1509 000a 0023     		movs	r3, #0
 1510 000c FB73     		strb	r3, [r7, #15]
 823:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the parameters */
 824:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_IT(CRYP_IT));
 825:./Lib/Src/stm32f4xx_cryp.c **** 
 826:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP interrupt */
 827:./Lib/Src/stm32f4xx_cryp.c ****   if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 1511              		.loc 1 827 12
 1512 000e 094B     		ldr	r3, .L63
 1513 0010 DA69     		ldr	r2, [r3, #28]
 1514              		.loc 1 827 19
 1515 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1516 0014 1340     		ands	r3, r3, r2
 1517              		.loc 1 827 6
 1518 0016 002B     		cmp	r3, #0
 1519 0018 02D0     		beq	.L60
 828:./Lib/Src/stm32f4xx_cryp.c ****   {
 829:./Lib/Src/stm32f4xx_cryp.c ****     /* CRYP_IT is set */
 830:./Lib/Src/stm32f4xx_cryp.c ****     bitstatus = SET;
 1520              		.loc 1 830 15
 1521 001a 0123     		movs	r3, #1
 1522 001c FB73     		strb	r3, [r7, #15]
 1523 001e 01E0     		b	.L61
 1524              	.L60:
 831:./Lib/Src/stm32f4xx_cryp.c ****   }
 832:./Lib/Src/stm32f4xx_cryp.c ****   else
 833:./Lib/Src/stm32f4xx_cryp.c ****   {
ARM GAS  /tmp/ccRWa7zz.s 			page 42


 834:./Lib/Src/stm32f4xx_cryp.c ****     /* CRYP_IT is reset */
 835:./Lib/Src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 1525              		.loc 1 835 15
 1526 0020 0023     		movs	r3, #0
 1527 0022 FB73     		strb	r3, [r7, #15]
 1528              	.L61:
 836:./Lib/Src/stm32f4xx_cryp.c ****   }
 837:./Lib/Src/stm32f4xx_cryp.c ****   /* Return the CRYP_IT status */
 838:./Lib/Src/stm32f4xx_cryp.c ****   return bitstatus;
 1529              		.loc 1 838 10
 1530 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 839:./Lib/Src/stm32f4xx_cryp.c **** }
 1531              		.loc 1 839 1
 1532 0026 1846     		mov	r0, r3
 1533 0028 1437     		adds	r7, r7, #20
 1534              		.cfi_def_cfa_offset 4
 1535 002a BD46     		mov	sp, r7
 1536              		.cfi_def_cfa_register 13
 1537              		@ sp needed
 1538 002c 5DF8047B 		ldr	r7, [sp], #4
 1539              		.cfi_restore 7
 1540              		.cfi_def_cfa_offset 0
 1541 0030 7047     		bx	lr
 1542              	.L64:
 1543 0032 00BF     		.align	2
 1544              	.L63:
 1545 0034 00000650 		.word	1342570496
 1546              		.cfi_endproc
 1547              	.LFE139:
 1549              		.section	.text.CRYP_GetCmdStatus,"ax",%progbits
 1550              		.align	1
 1551              		.global	CRYP_GetCmdStatus
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1556              	CRYP_GetCmdStatus:
 1557              	.LFB140:
 840:./Lib/Src/stm32f4xx_cryp.c **** 
 841:./Lib/Src/stm32f4xx_cryp.c **** /**
 842:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Returns whether CRYP peripheral is enabled or disabled.
 843:./Lib/Src/stm32f4xx_cryp.c ****   * @param  none.
 844:./Lib/Src/stm32f4xx_cryp.c ****   * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
 845:./Lib/Src/stm32f4xx_cryp.c ****   */
 846:./Lib/Src/stm32f4xx_cryp.c **** FunctionalState CRYP_GetCmdStatus(void)
 847:./Lib/Src/stm32f4xx_cryp.c **** {
 1558              		.loc 1 847 1
 1559              		.cfi_startproc
 1560              		@ args = 0, pretend = 0, frame = 8
 1561              		@ frame_needed = 1, uses_anonymous_args = 0
 1562              		@ link register save eliminated.
 1563 0000 80B4     		push	{r7}
 1564              		.cfi_def_cfa_offset 4
 1565              		.cfi_offset 7, -4
 1566 0002 83B0     		sub	sp, sp, #12
 1567              		.cfi_def_cfa_offset 16
 1568 0004 00AF     		add	r7, sp, #0
 1569              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccRWa7zz.s 			page 43


 848:./Lib/Src/stm32f4xx_cryp.c ****   FunctionalState state = DISABLE;
 1570              		.loc 1 848 19
 1571 0006 0023     		movs	r3, #0
 1572 0008 FB71     		strb	r3, [r7, #7]
 849:./Lib/Src/stm32f4xx_cryp.c **** 
 850:./Lib/Src/stm32f4xx_cryp.c ****   if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 1573              		.loc 1 850 12
 1574 000a 094B     		ldr	r3, .L69
 1575 000c 1B68     		ldr	r3, [r3]
 1576              		.loc 1 850 17
 1577 000e 03F40043 		and	r3, r3, #32768
 1578              		.loc 1 850 6
 1579 0012 002B     		cmp	r3, #0
 1580 0014 02D0     		beq	.L66
 851:./Lib/Src/stm32f4xx_cryp.c ****   {
 852:./Lib/Src/stm32f4xx_cryp.c ****     /* CRYPEN bit is set */
 853:./Lib/Src/stm32f4xx_cryp.c ****     state = ENABLE;
 1581              		.loc 1 853 11
 1582 0016 0123     		movs	r3, #1
 1583 0018 FB71     		strb	r3, [r7, #7]
 1584 001a 01E0     		b	.L67
 1585              	.L66:
 854:./Lib/Src/stm32f4xx_cryp.c ****   }
 855:./Lib/Src/stm32f4xx_cryp.c ****   else
 856:./Lib/Src/stm32f4xx_cryp.c ****   {
 857:./Lib/Src/stm32f4xx_cryp.c ****     /* CRYPEN bit is reset */
 858:./Lib/Src/stm32f4xx_cryp.c ****     state = DISABLE;
 1586              		.loc 1 858 11
 1587 001c 0023     		movs	r3, #0
 1588 001e FB71     		strb	r3, [r7, #7]
 1589              	.L67:
 859:./Lib/Src/stm32f4xx_cryp.c ****   }
 860:./Lib/Src/stm32f4xx_cryp.c ****   return state;
 1590              		.loc 1 860 10
 1591 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 861:./Lib/Src/stm32f4xx_cryp.c **** }
 1592              		.loc 1 861 1
 1593 0022 1846     		mov	r0, r3
 1594 0024 0C37     		adds	r7, r7, #12
 1595              		.cfi_def_cfa_offset 4
 1596 0026 BD46     		mov	sp, r7
 1597              		.cfi_def_cfa_register 13
 1598              		@ sp needed
 1599 0028 5DF8047B 		ldr	r7, [sp], #4
 1600              		.cfi_restore 7
 1601              		.cfi_def_cfa_offset 0
 1602 002c 7047     		bx	lr
 1603              	.L70:
 1604 002e 00BF     		.align	2
 1605              	.L69:
 1606 0030 00000650 		.word	1342570496
 1607              		.cfi_endproc
 1608              	.LFE140:
 1610              		.section	.text.CRYP_GetFlagStatus,"ax",%progbits
 1611              		.align	1
 1612              		.global	CRYP_GetFlagStatus
 1613              		.syntax unified
ARM GAS  /tmp/ccRWa7zz.s 			page 44


 1614              		.thumb
 1615              		.thumb_func
 1617              	CRYP_GetFlagStatus:
 1618              	.LFB141:
 862:./Lib/Src/stm32f4xx_cryp.c **** 
 863:./Lib/Src/stm32f4xx_cryp.c **** /**
 864:./Lib/Src/stm32f4xx_cryp.c ****   * @brief  Checks whether the specified CRYP flag is set or not.
 865:./Lib/Src/stm32f4xx_cryp.c ****   * @param  CRYP_FLAG: specifies the CRYP flag to check.
 866:./Lib/Src/stm32f4xx_cryp.c ****   *          This parameter can be one of the following values:
 867:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFEM: Input FIFO Empty flag.
 868:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_IFNF: Input FIFO Not Full flag.
 869:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFNE: Output FIFO Not Empty flag.
 870:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OFFU: Output FIFO Full flag.
 871:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_BUSY: Busy flag.
 872:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
 873:./Lib/Src/stm32f4xx_cryp.c ****   *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
 874:./Lib/Src/stm32f4xx_cryp.c ****   * @retval The new state of CRYP_FLAG (SET or RESET).
 875:./Lib/Src/stm32f4xx_cryp.c ****   */
 876:./Lib/Src/stm32f4xx_cryp.c **** FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
 877:./Lib/Src/stm32f4xx_cryp.c **** {
 1619              		.loc 1 877 1
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 16
 1622              		@ frame_needed = 1, uses_anonymous_args = 0
 1623              		@ link register save eliminated.
 1624 0000 80B4     		push	{r7}
 1625              		.cfi_def_cfa_offset 4
 1626              		.cfi_offset 7, -4
 1627 0002 85B0     		sub	sp, sp, #20
 1628              		.cfi_def_cfa_offset 24
 1629 0004 00AF     		add	r7, sp, #0
 1630              		.cfi_def_cfa_register 7
 1631 0006 0346     		mov	r3, r0
 1632 0008 FB71     		strb	r3, [r7, #7]
 878:./Lib/Src/stm32f4xx_cryp.c ****   FlagStatus bitstatus = RESET;
 1633              		.loc 1 878 14
 1634 000a 0023     		movs	r3, #0
 1635 000c FB73     		strb	r3, [r7, #15]
 879:./Lib/Src/stm32f4xx_cryp.c ****   uint32_t tempreg = 0;
 1636              		.loc 1 879 12
 1637 000e 0023     		movs	r3, #0
 1638 0010 BB60     		str	r3, [r7, #8]
 880:./Lib/Src/stm32f4xx_cryp.c **** 
 881:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the parameters */
 882:./Lib/Src/stm32f4xx_cryp.c ****   assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));
 883:./Lib/Src/stm32f4xx_cryp.c **** 
 884:./Lib/Src/stm32f4xx_cryp.c ****   /* check if the FLAG is in RISR register */
 885:./Lib/Src/stm32f4xx_cryp.c ****   if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 1639              		.loc 1 885 18
 1640 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1641 0014 03F02003 		and	r3, r3, #32
 1642              		.loc 1 885 6
 1643 0018 002B     		cmp	r3, #0
 1644 001a 03D0     		beq	.L72
 886:./Lib/Src/stm32f4xx_cryp.c ****   {
 887:./Lib/Src/stm32f4xx_cryp.c ****     tempreg = CRYP->RISR;
 1645              		.loc 1 887 19
ARM GAS  /tmp/ccRWa7zz.s 			page 45


 1646 001c 0B4B     		ldr	r3, .L77
 1647              		.loc 1 887 13
 1648 001e 9B69     		ldr	r3, [r3, #24]
 1649 0020 BB60     		str	r3, [r7, #8]
 1650 0022 02E0     		b	.L73
 1651              	.L72:
 888:./Lib/Src/stm32f4xx_cryp.c ****   }
 889:./Lib/Src/stm32f4xx_cryp.c ****   else  /* The FLAG is in SR register */
 890:./Lib/Src/stm32f4xx_cryp.c ****   {
 891:./Lib/Src/stm32f4xx_cryp.c ****     tempreg = CRYP->SR;
 1652              		.loc 1 891 19
 1653 0024 094B     		ldr	r3, .L77
 1654              		.loc 1 891 13
 1655 0026 5B68     		ldr	r3, [r3, #4]
 1656 0028 BB60     		str	r3, [r7, #8]
 1657              	.L73:
 892:./Lib/Src/stm32f4xx_cryp.c ****   }
 893:./Lib/Src/stm32f4xx_cryp.c **** 
 894:./Lib/Src/stm32f4xx_cryp.c **** 
 895:./Lib/Src/stm32f4xx_cryp.c ****   /* Check the status of the specified CRYP flag */
 896:./Lib/Src/stm32f4xx_cryp.c ****   if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 1658              		.loc 1 896 16
 1659 002a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1660 002c BB68     		ldr	r3, [r7, #8]
 1661 002e 1340     		ands	r3, r3, r2
 1662              		.loc 1 896 6
 1663 0030 002B     		cmp	r3, #0
 1664 0032 02D0     		beq	.L74
 897:./Lib/Src/stm32f4xx_cryp.c ****   {
 898:./Lib/Src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is set */
 899:./Lib/Src/stm32f4xx_cryp.c ****     bitstatus = SET;
 1665              		.loc 1 899 15
 1666 0034 0123     		movs	r3, #1
 1667 0036 FB73     		strb	r3, [r7, #15]
 1668 0038 01E0     		b	.L75
 1669              	.L74:
 900:./Lib/Src/stm32f4xx_cryp.c ****   }
 901:./Lib/Src/stm32f4xx_cryp.c ****   else
 902:./Lib/Src/stm32f4xx_cryp.c ****   {
 903:./Lib/Src/stm32f4xx_cryp.c ****     /* CRYP_FLAG is reset */
 904:./Lib/Src/stm32f4xx_cryp.c ****     bitstatus = RESET;
 1670              		.loc 1 904 15
 1671 003a 0023     		movs	r3, #0
 1672 003c FB73     		strb	r3, [r7, #15]
 1673              	.L75:
 905:./Lib/Src/stm32f4xx_cryp.c ****   }
 906:./Lib/Src/stm32f4xx_cryp.c **** 
 907:./Lib/Src/stm32f4xx_cryp.c ****   /* Return the CRYP_FLAG status */
 908:./Lib/Src/stm32f4xx_cryp.c ****   return  bitstatus;
 1674              		.loc 1 908 11
 1675 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 909:./Lib/Src/stm32f4xx_cryp.c **** }
 1676              		.loc 1 909 1
 1677 0040 1846     		mov	r0, r3
 1678 0042 1437     		adds	r7, r7, #20
 1679              		.cfi_def_cfa_offset 4
 1680 0044 BD46     		mov	sp, r7
ARM GAS  /tmp/ccRWa7zz.s 			page 46


 1681              		.cfi_def_cfa_register 13
 1682              		@ sp needed
 1683 0046 5DF8047B 		ldr	r7, [sp], #4
 1684              		.cfi_restore 7
 1685              		.cfi_def_cfa_offset 0
 1686 004a 7047     		bx	lr
 1687              	.L78:
 1688              		.align	2
 1689              	.L77:
 1690 004c 00000650 		.word	1342570496
 1691              		.cfi_endproc
 1692              	.LFE141:
 1694              		.text
 1695              	.Letext0:
 1696              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 1697              		.file 3 "./Start/stm32f4xx.h"
 1698              		.file 4 "./Lib/inc/stm32f4xx_cryp.h"
 1699              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccRWa7zz.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp.c
     /tmp/ccRWa7zz.s:21     .text.CRYP_DeInit:0000000000000000 $t
     /tmp/ccRWa7zz.s:27     .text.CRYP_DeInit:0000000000000000 CRYP_DeInit
     /tmp/ccRWa7zz.s:54     .text.CRYP_Init:0000000000000000 $t
     /tmp/ccRWa7zz.s:60     .text.CRYP_Init:0000000000000000 CRYP_Init
     /tmp/ccRWa7zz.s:187    .text.CRYP_Init:00000000000000a0 $d
     /tmp/ccRWa7zz.s:192    .text.CRYP_StructInit:0000000000000000 $t
     /tmp/ccRWa7zz.s:198    .text.CRYP_StructInit:0000000000000000 CRYP_StructInit
     /tmp/ccRWa7zz.s:244    .text.CRYP_KeyInit:0000000000000000 $t
     /tmp/ccRWa7zz.s:250    .text.CRYP_KeyInit:0000000000000000 CRYP_KeyInit
     /tmp/ccRWa7zz.s:335    .text.CRYP_KeyInit:0000000000000054 $d
     /tmp/ccRWa7zz.s:340    .text.CRYP_KeyStructInit:0000000000000000 $t
     /tmp/ccRWa7zz.s:346    .text.CRYP_KeyStructInit:0000000000000000 CRYP_KeyStructInit
     /tmp/ccRWa7zz.s:408    .text.CRYP_IVInit:0000000000000000 $t
     /tmp/ccRWa7zz.s:414    .text.CRYP_IVInit:0000000000000000 CRYP_IVInit
     /tmp/ccRWa7zz.s:471    .text.CRYP_IVInit:0000000000000034 $d
     /tmp/ccRWa7zz.s:476    .text.CRYP_IVStructInit:0000000000000000 $t
     /tmp/ccRWa7zz.s:482    .text.CRYP_IVStructInit:0000000000000000 CRYP_IVStructInit
     /tmp/ccRWa7zz.s:528    .text.CRYP_PhaseConfig:0000000000000000 $t
     /tmp/ccRWa7zz.s:534    .text.CRYP_PhaseConfig:0000000000000000 CRYP_PhaseConfig
     /tmp/ccRWa7zz.s:585    .text.CRYP_PhaseConfig:0000000000000034 $d
     /tmp/ccRWa7zz.s:590    .text.CRYP_FIFOFlush:0000000000000000 $t
     /tmp/ccRWa7zz.s:596    .text.CRYP_FIFOFlush:0000000000000000 CRYP_FIFOFlush
     /tmp/ccRWa7zz.s:627    .text.CRYP_FIFOFlush:000000000000001c $d
     /tmp/ccRWa7zz.s:632    .text.CRYP_Cmd:0000000000000000 $t
     /tmp/ccRWa7zz.s:638    .text.CRYP_Cmd:0000000000000000 CRYP_Cmd
     /tmp/ccRWa7zz.s:690    .text.CRYP_Cmd:0000000000000038 $d
     /tmp/ccRWa7zz.s:695    .text.CRYP_DataIn:0000000000000000 $t
     /tmp/ccRWa7zz.s:701    .text.CRYP_DataIn:0000000000000000 CRYP_DataIn
     /tmp/ccRWa7zz.s:735    .text.CRYP_DataIn:000000000000001c $d
     /tmp/ccRWa7zz.s:740    .text.CRYP_DataOut:0000000000000000 $t
     /tmp/ccRWa7zz.s:746    .text.CRYP_DataOut:0000000000000000 CRYP_DataOut
     /tmp/ccRWa7zz.s:773    .text.CRYP_DataOut:0000000000000014 $d
     /tmp/ccRWa7zz.s:778    .text.CRYP_SaveContext:0000000000000000 $t
     /tmp/ccRWa7zz.s:784    .text.CRYP_SaveContext:0000000000000000 CRYP_SaveContext
     /tmp/ccRWa7zz.s:1080   .text.CRYP_SaveContext:0000000000000188 $d
     /tmp/ccRWa7zz.s:1086   .text.CRYP_RestoreContext:0000000000000000 $t
     /tmp/ccRWa7zz.s:1092   .text.CRYP_RestoreContext:0000000000000000 CRYP_RestoreContext
     /tmp/ccRWa7zz.s:1331   .text.CRYP_RestoreContext:0000000000000110 $d
     /tmp/ccRWa7zz.s:1336   .text.CRYP_DMACmd:0000000000000000 $t
     /tmp/ccRWa7zz.s:1342   .text.CRYP_DMACmd:0000000000000000 CRYP_DMACmd
     /tmp/ccRWa7zz.s:1406   .text.CRYP_DMACmd:0000000000000044 $d
     /tmp/ccRWa7zz.s:1411   .text.CRYP_ITConfig:0000000000000000 $t
     /tmp/ccRWa7zz.s:1417   .text.CRYP_ITConfig:0000000000000000 CRYP_ITConfig
     /tmp/ccRWa7zz.s:1481   .text.CRYP_ITConfig:0000000000000044 $d
     /tmp/ccRWa7zz.s:1486   .text.CRYP_GetITStatus:0000000000000000 $t
     /tmp/ccRWa7zz.s:1492   .text.CRYP_GetITStatus:0000000000000000 CRYP_GetITStatus
     /tmp/ccRWa7zz.s:1545   .text.CRYP_GetITStatus:0000000000000034 $d
     /tmp/ccRWa7zz.s:1550   .text.CRYP_GetCmdStatus:0000000000000000 $t
     /tmp/ccRWa7zz.s:1556   .text.CRYP_GetCmdStatus:0000000000000000 CRYP_GetCmdStatus
     /tmp/ccRWa7zz.s:1606   .text.CRYP_GetCmdStatus:0000000000000030 $d
     /tmp/ccRWa7zz.s:1611   .text.CRYP_GetFlagStatus:0000000000000000 $t
     /tmp/ccRWa7zz.s:1617   .text.CRYP_GetFlagStatus:0000000000000000 CRYP_GetFlagStatus
     /tmp/ccRWa7zz.s:1690   .text.CRYP_GetFlagStatus:000000000000004c $d

UNDEFINED SYMBOLS
ARM GAS  /tmp/ccRWa7zz.s 			page 48


RCC_AHB2PeriphResetCmd
