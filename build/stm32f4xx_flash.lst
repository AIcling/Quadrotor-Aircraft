ARM GAS  /tmp/cc2eTGWX.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_flash.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_flash.c"
  20              		.section	.text.FLASH_SetLatency,"ax",%progbits
  21              		.align	1
  22              		.global	FLASH_SetLatency
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	FLASH_SetLatency:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_flash.c **** /**
   2:./Lib/Src/stm32f4xx_flash.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_flash.c ****   * @file    stm32f4xx_flash.c
   4:./Lib/Src/stm32f4xx_flash.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_flash.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_flash.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_flash.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_flash.c ****   *          functionalities of the FLASH peripheral:
   9:./Lib/Src/stm32f4xx_flash.c ****   *            + FLASH Interface configuration
  10:./Lib/Src/stm32f4xx_flash.c ****   *            + FLASH Memory Programming
  11:./Lib/Src/stm32f4xx_flash.c ****   *            + Option Bytes Programming
  12:./Lib/Src/stm32f4xx_flash.c ****   *            + Interrupts and flags management
  13:./Lib/Src/stm32f4xx_flash.c ****   *  
  14:./Lib/Src/stm32f4xx_flash.c ****  @verbatim    
  15:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================
  16:./Lib/Src/stm32f4xx_flash.c ****                         ##### How to use this driver #####
  17:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================
  18:./Lib/Src/stm32f4xx_flash.c ****     [..]                             
  19:./Lib/Src/stm32f4xx_flash.c ****       This driver provides functions to configure and program the FLASH memory 
  20:./Lib/Src/stm32f4xx_flash.c ****       of all STM32F4xx devices. These functions are split in 4 groups:
  21:./Lib/Src/stm32f4xx_flash.c ****    
  22:./Lib/Src/stm32f4xx_flash.c ****       (#) FLASH Interface configuration functions: this group includes the
  23:./Lib/Src/stm32f4xx_flash.c ****           management of the following features:
  24:./Lib/Src/stm32f4xx_flash.c ****         (++) Set the latency
  25:./Lib/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the prefetch buffer
  26:./Lib/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the Instruction cache and the Data cache
  27:./Lib/Src/stm32f4xx_flash.c ****         (++) Reset the Instruction cache and the Data cache
  28:./Lib/Src/stm32f4xx_flash.c ****     
  29:./Lib/Src/stm32f4xx_flash.c ****       (#) FLASH Memory Programming functions: this group includes all needed
  30:./Lib/Src/stm32f4xx_flash.c ****           functions to erase and program the main memory:
ARM GAS  /tmp/cc2eTGWX.s 			page 2


  31:./Lib/Src/stm32f4xx_flash.c ****         (++) Lock and Unlock the FLASH interface
  32:./Lib/Src/stm32f4xx_flash.c ****         (++) Erase function: Erase sector, erase all sectors
  33:./Lib/Src/stm32f4xx_flash.c ****         (++) Program functions: byte, half word, word and double word
  34:./Lib/Src/stm32f4xx_flash.c ****     
  35:./Lib/Src/stm32f4xx_flash.c ****       (#) Option Bytes Programming functions: this group includes all needed
  36:./Lib/Src/stm32f4xx_flash.c ****           functions to manage the Option Bytes:
  37:./Lib/Src/stm32f4xx_flash.c ****         (++) Set/Reset the write protection
  38:./Lib/Src/stm32f4xx_flash.c ****         (++) Set the Read protection Level
  39:./Lib/Src/stm32f4xx_flash.c ****         (++) Set the BOR level
  40:./Lib/Src/stm32f4xx_flash.c ****         (++) Program the user Option Bytes
  41:./Lib/Src/stm32f4xx_flash.c ****         (++) Launch the Option Bytes loader
  42:./Lib/Src/stm32f4xx_flash.c ****     
  43:./Lib/Src/stm32f4xx_flash.c ****       (#) Interrupts and flags management functions: this group 
  44:./Lib/Src/stm32f4xx_flash.c ****           includes all needed functions to:
  45:./Lib/Src/stm32f4xx_flash.c ****         (++) Enable/Disable the FLASH interrupt sources
  46:./Lib/Src/stm32f4xx_flash.c ****         (++) Get flags status
  47:./Lib/Src/stm32f4xx_flash.c ****         (++) Clear flags
  48:./Lib/Src/stm32f4xx_flash.c ****         (++) Get FLASH operation status
  49:./Lib/Src/stm32f4xx_flash.c ****         (++) Wait for last FLASH operation   
  50:./Lib/Src/stm32f4xx_flash.c ****  @endverbatim
  51:./Lib/Src/stm32f4xx_flash.c ****   ******************************************************************************
  52:./Lib/Src/stm32f4xx_flash.c ****   * @attention
  53:./Lib/Src/stm32f4xx_flash.c ****   *
  54:./Lib/Src/stm32f4xx_flash.c ****   * Copyright (c) 2016 STMicroelectronics.
  55:./Lib/Src/stm32f4xx_flash.c ****   * All rights reserved.
  56:./Lib/Src/stm32f4xx_flash.c ****   *
  57:./Lib/Src/stm32f4xx_flash.c ****   * This software is licensed under terms that can be found in the LICENSE file
  58:./Lib/Src/stm32f4xx_flash.c ****   * in the root directory of this software component.
  59:./Lib/Src/stm32f4xx_flash.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  60:./Lib/Src/stm32f4xx_flash.c ****   *
  61:./Lib/Src/stm32f4xx_flash.c ****   ******************************************************************************
  62:./Lib/Src/stm32f4xx_flash.c ****   */
  63:./Lib/Src/stm32f4xx_flash.c **** 
  64:./Lib/Src/stm32f4xx_flash.c **** /* Includes ------------------------------------------------------------------*/
  65:./Lib/Src/stm32f4xx_flash.c **** #include "stm32f4xx_flash.h"
  66:./Lib/Src/stm32f4xx_flash.c **** 
  67:./Lib/Src/stm32f4xx_flash.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  68:./Lib/Src/stm32f4xx_flash.c ****   * @{
  69:./Lib/Src/stm32f4xx_flash.c ****   */
  70:./Lib/Src/stm32f4xx_flash.c **** 
  71:./Lib/Src/stm32f4xx_flash.c **** /** @defgroup FLASH 
  72:./Lib/Src/stm32f4xx_flash.c ****   * @brief FLASH driver modules
  73:./Lib/Src/stm32f4xx_flash.c ****   * @{
  74:./Lib/Src/stm32f4xx_flash.c ****   */ 
  75:./Lib/Src/stm32f4xx_flash.c **** 
  76:./Lib/Src/stm32f4xx_flash.c **** /* Private typedef -----------------------------------------------------------*/
  77:./Lib/Src/stm32f4xx_flash.c **** /* Private define ------------------------------------------------------------*/ 
  78:./Lib/Src/stm32f4xx_flash.c **** #define SECTOR_MASK               ((uint32_t)0xFFFFFF07)
  79:./Lib/Src/stm32f4xx_flash.c **** 
  80:./Lib/Src/stm32f4xx_flash.c **** /* Private macro -------------------------------------------------------------*/
  81:./Lib/Src/stm32f4xx_flash.c **** /* Private variables ---------------------------------------------------------*/
  82:./Lib/Src/stm32f4xx_flash.c **** /* Private function prototypes -----------------------------------------------*/
  83:./Lib/Src/stm32f4xx_flash.c **** /* Private functions ---------------------------------------------------------*/
  84:./Lib/Src/stm32f4xx_flash.c **** 
  85:./Lib/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Private_Functions
  86:./Lib/Src/stm32f4xx_flash.c ****   * @{
  87:./Lib/Src/stm32f4xx_flash.c ****   */ 
ARM GAS  /tmp/cc2eTGWX.s 			page 3


  88:./Lib/Src/stm32f4xx_flash.c **** 
  89:./Lib/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group1 FLASH Interface configuration functions
  90:./Lib/Src/stm32f4xx_flash.c ****   *  @brief   FLASH Interface configuration functions 
  91:./Lib/Src/stm32f4xx_flash.c ****  *
  92:./Lib/Src/stm32f4xx_flash.c **** 
  93:./Lib/Src/stm32f4xx_flash.c **** @verbatim   
  94:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================
  95:./Lib/Src/stm32f4xx_flash.c ****               ##### FLASH Interface configuration functions #####
  96:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================
  97:./Lib/Src/stm32f4xx_flash.c ****     [..]
  98:./Lib/Src/stm32f4xx_flash.c ****       This group includes the following functions:
  99:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_SetLatency(uint32_t FLASH_Latency)
 100:./Lib/Src/stm32f4xx_flash.c ****           To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 101:./Lib/Src/stm32f4xx_flash.c ****           must be correctly programmed according to the frequency of the CPU clock 
 102:./Lib/Src/stm32f4xx_flash.c ****           (HCLK) and the supply voltage of the device.
 103:./Lib/Src/stm32f4xx_flash.c ****     [..]      
 104:./Lib/Src/stm32f4xx_flash.c ****       For STM32F405xx/07xx and STM32F415xx/17xx devices
 105:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 106:./Lib/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 107:./Lib/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 108:./Lib/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 109:./Lib/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 110:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 111:./Lib/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 112:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 113:./Lib/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 114:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 115:./Lib/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 116:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 117:./Lib/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 118:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 119:./Lib/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 120:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 121:./Lib/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 122:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 123:./Lib/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 124:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 125:./Lib/Src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 126:./Lib/Src/stm32f4xx_flash.c ****  +---------------|----------------|----------------|-----------------|-----------------+
 127:./Lib/Src/stm32f4xx_flash.c **** 
 128:./Lib/Src/stm32f4xx_flash.c ****     [..]      
 129:./Lib/Src/stm32f4xx_flash.c ****       For STM32F42xxx/43xxx devices
 130:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 131:./Lib/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 132:./Lib/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 133:./Lib/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 134:./Lib/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 135:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 136:./Lib/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 137:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 138:./Lib/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 139:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 140:./Lib/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 141:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 142:./Lib/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 143:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 144:./Lib/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
ARM GAS  /tmp/cc2eTGWX.s 			page 4


 145:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 146:./Lib/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120|
 147:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 148:./Lib/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140|
 149:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 150:./Lib/Src/stm32f4xx_flash.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 151:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 152:./Lib/Src/stm32f4xx_flash.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 153:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 154:./Lib/Src/stm32f4xx_flash.c ****    
 155:./Lib/Src/stm32f4xx_flash.c ****     [..]
 156:./Lib/Src/stm32f4xx_flash.c ****     For STM32F401x devices
 157:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 158:./Lib/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 159:./Lib/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 160:./Lib/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 161:./Lib/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 162:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 163:./Lib/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 164:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 165:./Lib/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  |
 166:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 167:./Lib/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 168:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 169:./Lib/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 170:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 171:./Lib/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  |
 172:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 173:./Lib/Src/stm32f4xx_flash.c **** 
 174:./Lib/Src/stm32f4xx_flash.c ****     [..]
 175:./Lib/Src/stm32f4xx_flash.c ****     For STM32F410xx/STM32F411xE devices
 176:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 177:./Lib/Src/stm32f4xx_flash.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 178:./Lib/Src/stm32f4xx_flash.c ****  |               |---------------------------------------------------------------------|
 179:./Lib/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 180:./Lib/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 181:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 182:./Lib/Src/stm32f4xx_flash.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 183:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 184:./Lib/Src/stm32f4xx_flash.c ****  |1WS(2CPU cycle)|30 < HCLK <= 64 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 185:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 186:./Lib/Src/stm32f4xx_flash.c ****  |2WS(3CPU cycle)|64 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 187:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 188:./Lib/Src/stm32f4xx_flash.c ****  |3WS(4CPU cycle)|90 < HCLK <= 100|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 189:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 190:./Lib/Src/stm32f4xx_flash.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 100|72 < HCLK <= 90  |64 < HCLK <= 80  |
 191:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 192:./Lib/Src/stm32f4xx_flash.c ****  |5WS(6CPU cycle)|      NA        |       NA       |90 < HCLK <= 100 |80 < HCLK <= 96  |
 193:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 194:./Lib/Src/stm32f4xx_flash.c ****  |6WS(7CPU cycle)|      NA        |       NA       |        NA       |96 < HCLK <= 100 |
 195:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------+
 196:./Lib/Src/stm32f4xx_flash.c ****  
 197:./Lib/Src/stm32f4xx_flash.c ****  [..]
 198:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 199:./Lib/Src/stm32f4xx_flash.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   | voltage ra
 200:./Lib/Src/stm32f4xx_flash.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   | with Exter
 201:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
ARM GAS  /tmp/cc2eTGWX.s 			page 5


 202:./Lib/Src/stm32f4xx_flash.c ****  |Max Parallelism|      x32       |               x16                |       x8        |          x
 203:./Lib/Src/stm32f4xx_flash.c ****  |---------------|----------------|----------------|-----------------|-----------------|-----------
 204:./Lib/Src/stm32f4xx_flash.c ****  |PSIZE[1:0]     |      10        |               01                 |       00        |           
 205:./Lib/Src/stm32f4xx_flash.c ****  +-------------------------------------------------------------------------------------------------
 206:./Lib/Src/stm32f4xx_flash.c **** 
 207:./Lib/Src/stm32f4xx_flash.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 208:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS = '0' Scale 2 mode, the maximum value of fHCLK = 144MHz. 
 209:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS = '1' Scale 1 mode, the maximum value of fHCLK = 168MHz. 
 210:./Lib/Src/stm32f4xx_flash.c ****           [..] 
 211:./Lib/Src/stm32f4xx_flash.c ****           On STM32F42xxx/43xxx devices:
 212:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 120MHz.
 213:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 144MHz if OverDr
 214:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 168MHz if OverDr
 215:./Lib/Src/stm32f4xx_flash.c ****           [..]
 216:./Lib/Src/stm32f4xx_flash.c ****           On STM32F401x devices:
 217:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 60MHz.
 218:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 219:./Lib/Src/stm32f4xx_flash.c ****           [..]  
 220:./Lib/Src/stm32f4xx_flash.c ****           On STM32F410xx/STM32F411xE devices:
 221:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x01' Scale 3 mode, the maximum value of fHCLK is 64MHz.
 222:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x10' Scale 2 mode, the maximum value of fHCLK is 84MHz.
 223:./Lib/Src/stm32f4xx_flash.c ****            (++) when VOS[1:0] = '0x11' Scale 1 mode, the maximum value of fHCLK is 100MHz.
 224:./Lib/Src/stm32f4xx_flash.c **** 
 225:./Lib/Src/stm32f4xx_flash.c ****         For more details please refer product DataSheet 
 226:./Lib/Src/stm32f4xx_flash.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 227:./Lib/Src/stm32f4xx_flash.c **** 
 228:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 229:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheCmd(FunctionalState NewState)
 230:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheCmd(FunctionalState NewState)
 231:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_InstructionCacheReset(void)
 232:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_DataCacheReset(void)
 233:./Lib/Src/stm32f4xx_flash.c ****       
 234:./Lib/Src/stm32f4xx_flash.c ****     [..]   
 235:./Lib/Src/stm32f4xx_flash.c ****       The unlock sequence is not needed for these functions.
 236:./Lib/Src/stm32f4xx_flash.c ****  
 237:./Lib/Src/stm32f4xx_flash.c **** @endverbatim
 238:./Lib/Src/stm32f4xx_flash.c ****   * @{
 239:./Lib/Src/stm32f4xx_flash.c ****   */
 240:./Lib/Src/stm32f4xx_flash.c ****  
 241:./Lib/Src/stm32f4xx_flash.c **** /**
 242:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Sets the code latency value.  
 243:./Lib/Src/stm32f4xx_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 244:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 245:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_0: FLASH Zero Latency cycle
 246:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_1: FLASH One Latency cycle
 247:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_2: FLASH Two Latency cycles
 248:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_3: FLASH Three Latency cycles
 249:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_4: FLASH Four Latency cycles 
 250:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_5: FLASH Five Latency cycles 
 251:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_6: FLASH Six Latency cycles
 252:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_7: FLASH Seven Latency cycles 
 253:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_8: FLASH Eight Latency cycles
 254:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_9: FLASH Nine Latency cycles
 255:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_10: FLASH Teen Latency cycles 
 256:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_11: FLASH Eleven Latency cycles 
 257:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_12: FLASH Twelve Latency cycles
 258:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_13: FLASH Thirteen Latency cycles
ARM GAS  /tmp/cc2eTGWX.s 			page 6


 259:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_14: FLASH Fourteen Latency cycles
 260:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_Latency_15: FLASH Fifteen Latency cycles 
 261:./Lib/Src/stm32f4xx_flash.c ****   *              
 262:./Lib/Src/stm32f4xx_flash.c ****   * @note For STM32F405xx/407xx, STM32F415xx/417xx, STM32F401xx/411xE/STM32F412xG and STM32F413_423
 263:./Lib/Src/stm32f4xx_flash.c ****   *       this parameter can be a value between FLASH_Latency_0 and FLASH_Latency_7.
 264:./Lib/Src/stm32f4xx_flash.c ****   *
 265:./Lib/Src/stm32f4xx_flash.c ****   * @note For STM32F42xxx/43xxx devices this parameter can be a value between 
 266:./Lib/Src/stm32f4xx_flash.c ****   *       FLASH_Latency_0 and FLASH_Latency_15. 
 267:./Lib/Src/stm32f4xx_flash.c ****   *         
 268:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 269:./Lib/Src/stm32f4xx_flash.c ****   */
 270:./Lib/Src/stm32f4xx_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 271:./Lib/Src/stm32f4xx_flash.c **** {
  29              		.loc 1 271 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 272:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 273:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 274:./Lib/Src/stm32f4xx_flash.c ****   
 275:./Lib/Src/stm32f4xx_flash.c ****   /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
 276:./Lib/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
  42              		.loc 1 276 3
  43 0008 044B     		ldr	r3, .L2
  44              		.loc 1 276 40
  45 000a 7A68     		ldr	r2, [r7, #4]
  46 000c D2B2     		uxtb	r2, r2
  47              		.loc 1 276 38
  48 000e 1A70     		strb	r2, [r3]
 277:./Lib/Src/stm32f4xx_flash.c **** }
  49              		.loc 1 277 1
  50 0010 00BF     		nop
  51 0012 0C37     		adds	r7, r7, #12
  52              		.cfi_def_cfa_offset 4
  53 0014 BD46     		mov	sp, r7
  54              		.cfi_def_cfa_register 13
  55              		@ sp needed
  56 0016 5DF8047B 		ldr	r7, [sp], #4
  57              		.cfi_restore 7
  58              		.cfi_def_cfa_offset 0
  59 001a 7047     		bx	lr
  60              	.L3:
  61              		.align	2
  62              	.L2:
  63 001c 003C0240 		.word	1073888256
  64              		.cfi_endproc
  65              	.LFE123:
  67              		.section	.text.FLASH_PrefetchBufferCmd,"ax",%progbits
ARM GAS  /tmp/cc2eTGWX.s 			page 7


  68              		.align	1
  69              		.global	FLASH_PrefetchBufferCmd
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  74              	FLASH_PrefetchBufferCmd:
  75              	.LFB124:
 278:./Lib/Src/stm32f4xx_flash.c **** 
 279:./Lib/Src/stm32f4xx_flash.c **** /**
 280:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 281:./Lib/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Prefetch Buffer.
 282:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 283:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 284:./Lib/Src/stm32f4xx_flash.c ****   */
 285:./Lib/Src/stm32f4xx_flash.c **** void FLASH_PrefetchBufferCmd(FunctionalState NewState)
 286:./Lib/Src/stm32f4xx_flash.c **** {
  76              		.loc 1 286 1
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 8
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81 0000 80B4     		push	{r7}
  82              		.cfi_def_cfa_offset 4
  83              		.cfi_offset 7, -4
  84 0002 83B0     		sub	sp, sp, #12
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              		.cfi_def_cfa_register 7
  88 0006 0346     		mov	r3, r0
  89 0008 FB71     		strb	r3, [r7, #7]
 287:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 288:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 289:./Lib/Src/stm32f4xx_flash.c ****   
 290:./Lib/Src/stm32f4xx_flash.c ****   /* Enable or disable the Prefetch Buffer */
 291:./Lib/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
  90              		.loc 1 291 5
  91 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  92 000c 002B     		cmp	r3, #0
  93 000e 06D0     		beq	.L5
 292:./Lib/Src/stm32f4xx_flash.c ****   {
 293:./Lib/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_PRFTEN;
  94              		.loc 1 293 10
  95 0010 094B     		ldr	r3, .L8
  96 0012 1B68     		ldr	r3, [r3]
  97 0014 084A     		ldr	r2, .L8
  98              		.loc 1 293 16
  99 0016 43F48073 		orr	r3, r3, #256
 100 001a 1360     		str	r3, [r2]
 294:./Lib/Src/stm32f4xx_flash.c ****   }
 295:./Lib/Src/stm32f4xx_flash.c ****   else
 296:./Lib/Src/stm32f4xx_flash.c ****   {
 297:./Lib/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 298:./Lib/Src/stm32f4xx_flash.c ****   }
 299:./Lib/Src/stm32f4xx_flash.c **** }
 101              		.loc 1 299 1
 102 001c 05E0     		b	.L7
 103              	.L5:
ARM GAS  /tmp/cc2eTGWX.s 			page 8


 297:./Lib/Src/stm32f4xx_flash.c ****   }
 104              		.loc 1 297 10
 105 001e 064B     		ldr	r3, .L8
 106 0020 1B68     		ldr	r3, [r3]
 107 0022 054A     		ldr	r2, .L8
 297:./Lib/Src/stm32f4xx_flash.c ****   }
 108              		.loc 1 297 16
 109 0024 23F48073 		bic	r3, r3, #256
 110 0028 1360     		str	r3, [r2]
 111              	.L7:
 112              		.loc 1 299 1
 113 002a 00BF     		nop
 114 002c 0C37     		adds	r7, r7, #12
 115              		.cfi_def_cfa_offset 4
 116 002e BD46     		mov	sp, r7
 117              		.cfi_def_cfa_register 13
 118              		@ sp needed
 119 0030 5DF8047B 		ldr	r7, [sp], #4
 120              		.cfi_restore 7
 121              		.cfi_def_cfa_offset 0
 122 0034 7047     		bx	lr
 123              	.L9:
 124 0036 00BF     		.align	2
 125              	.L8:
 126 0038 003C0240 		.word	1073888256
 127              		.cfi_endproc
 128              	.LFE124:
 130              		.section	.text.FLASH_InstructionCacheCmd,"ax",%progbits
 131              		.align	1
 132              		.global	FLASH_InstructionCacheCmd
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 137              	FLASH_InstructionCacheCmd:
 138              	.LFB125:
 300:./Lib/Src/stm32f4xx_flash.c **** 
 301:./Lib/Src/stm32f4xx_flash.c **** /**
 302:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Instruction Cache feature.
 303:./Lib/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Instruction Cache.
 304:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 305:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 306:./Lib/Src/stm32f4xx_flash.c ****   */
 307:./Lib/Src/stm32f4xx_flash.c **** void FLASH_InstructionCacheCmd(FunctionalState NewState)
 308:./Lib/Src/stm32f4xx_flash.c **** {
 139              		.loc 1 308 1
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144 0000 80B4     		push	{r7}
 145              		.cfi_def_cfa_offset 4
 146              		.cfi_offset 7, -4
 147 0002 83B0     		sub	sp, sp, #12
 148              		.cfi_def_cfa_offset 16
 149 0004 00AF     		add	r7, sp, #0
 150              		.cfi_def_cfa_register 7
 151 0006 0346     		mov	r3, r0
ARM GAS  /tmp/cc2eTGWX.s 			page 9


 152 0008 FB71     		strb	r3, [r7, #7]
 309:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 310:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 311:./Lib/Src/stm32f4xx_flash.c ****   
 312:./Lib/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 153              		.loc 1 312 5
 154 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 155 000c 002B     		cmp	r3, #0
 156 000e 06D0     		beq	.L11
 313:./Lib/Src/stm32f4xx_flash.c ****   {
 314:./Lib/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_ICEN;
 157              		.loc 1 314 10
 158 0010 094B     		ldr	r3, .L14
 159 0012 1B68     		ldr	r3, [r3]
 160 0014 084A     		ldr	r2, .L14
 161              		.loc 1 314 16
 162 0016 43F40073 		orr	r3, r3, #512
 163 001a 1360     		str	r3, [r2]
 315:./Lib/Src/stm32f4xx_flash.c ****   }
 316:./Lib/Src/stm32f4xx_flash.c ****   else
 317:./Lib/Src/stm32f4xx_flash.c ****   {
 318:./Lib/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_ICEN);
 319:./Lib/Src/stm32f4xx_flash.c ****   }
 320:./Lib/Src/stm32f4xx_flash.c **** }
 164              		.loc 1 320 1
 165 001c 05E0     		b	.L13
 166              	.L11:
 318:./Lib/Src/stm32f4xx_flash.c ****   }
 167              		.loc 1 318 10
 168 001e 064B     		ldr	r3, .L14
 169 0020 1B68     		ldr	r3, [r3]
 170 0022 054A     		ldr	r2, .L14
 318:./Lib/Src/stm32f4xx_flash.c ****   }
 171              		.loc 1 318 16
 172 0024 23F40073 		bic	r3, r3, #512
 173 0028 1360     		str	r3, [r2]
 174              	.L13:
 175              		.loc 1 320 1
 176 002a 00BF     		nop
 177 002c 0C37     		adds	r7, r7, #12
 178              		.cfi_def_cfa_offset 4
 179 002e BD46     		mov	sp, r7
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0030 5DF8047B 		ldr	r7, [sp], #4
 183              		.cfi_restore 7
 184              		.cfi_def_cfa_offset 0
 185 0034 7047     		bx	lr
 186              	.L15:
 187 0036 00BF     		.align	2
 188              	.L14:
 189 0038 003C0240 		.word	1073888256
 190              		.cfi_endproc
 191              	.LFE125:
 193              		.section	.text.FLASH_DataCacheCmd,"ax",%progbits
 194              		.align	1
 195              		.global	FLASH_DataCacheCmd
ARM GAS  /tmp/cc2eTGWX.s 			page 10


 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 200              	FLASH_DataCacheCmd:
 201              	.LFB126:
 321:./Lib/Src/stm32f4xx_flash.c **** 
 322:./Lib/Src/stm32f4xx_flash.c **** /**
 323:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the Data Cache feature.
 324:./Lib/Src/stm32f4xx_flash.c ****   * @param  NewState: new state of the Data Cache.
 325:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter  can be: ENABLE or DISABLE.
 326:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 327:./Lib/Src/stm32f4xx_flash.c ****   */
 328:./Lib/Src/stm32f4xx_flash.c **** void FLASH_DataCacheCmd(FunctionalState NewState)
 329:./Lib/Src/stm32f4xx_flash.c **** {
 202              		.loc 1 329 1
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 8
 205              		@ frame_needed = 1, uses_anonymous_args = 0
 206              		@ link register save eliminated.
 207 0000 80B4     		push	{r7}
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0002 83B0     		sub	sp, sp, #12
 211              		.cfi_def_cfa_offset 16
 212 0004 00AF     		add	r7, sp, #0
 213              		.cfi_def_cfa_register 7
 214 0006 0346     		mov	r3, r0
 215 0008 FB71     		strb	r3, [r7, #7]
 330:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 331:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:./Lib/Src/stm32f4xx_flash.c ****   
 333:./Lib/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 216              		.loc 1 333 5
 217 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 218 000c 002B     		cmp	r3, #0
 219 000e 06D0     		beq	.L17
 334:./Lib/Src/stm32f4xx_flash.c ****   {
 335:./Lib/Src/stm32f4xx_flash.c ****     FLASH->ACR |= FLASH_ACR_DCEN;
 220              		.loc 1 335 10
 221 0010 094B     		ldr	r3, .L20
 222 0012 1B68     		ldr	r3, [r3]
 223 0014 084A     		ldr	r2, .L20
 224              		.loc 1 335 16
 225 0016 43F48063 		orr	r3, r3, #1024
 226 001a 1360     		str	r3, [r2]
 336:./Lib/Src/stm32f4xx_flash.c ****   }
 337:./Lib/Src/stm32f4xx_flash.c ****   else
 338:./Lib/Src/stm32f4xx_flash.c ****   {
 339:./Lib/Src/stm32f4xx_flash.c ****     FLASH->ACR &= (~FLASH_ACR_DCEN);
 340:./Lib/Src/stm32f4xx_flash.c ****   }
 341:./Lib/Src/stm32f4xx_flash.c **** }
 227              		.loc 1 341 1
 228 001c 05E0     		b	.L19
 229              	.L17:
 339:./Lib/Src/stm32f4xx_flash.c ****   }
 230              		.loc 1 339 10
 231 001e 064B     		ldr	r3, .L20
ARM GAS  /tmp/cc2eTGWX.s 			page 11


 232 0020 1B68     		ldr	r3, [r3]
 233 0022 054A     		ldr	r2, .L20
 339:./Lib/Src/stm32f4xx_flash.c ****   }
 234              		.loc 1 339 16
 235 0024 23F48063 		bic	r3, r3, #1024
 236 0028 1360     		str	r3, [r2]
 237              	.L19:
 238              		.loc 1 341 1
 239 002a 00BF     		nop
 240 002c 0C37     		adds	r7, r7, #12
 241              		.cfi_def_cfa_offset 4
 242 002e BD46     		mov	sp, r7
 243              		.cfi_def_cfa_register 13
 244              		@ sp needed
 245 0030 5DF8047B 		ldr	r7, [sp], #4
 246              		.cfi_restore 7
 247              		.cfi_def_cfa_offset 0
 248 0034 7047     		bx	lr
 249              	.L21:
 250 0036 00BF     		.align	2
 251              	.L20:
 252 0038 003C0240 		.word	1073888256
 253              		.cfi_endproc
 254              	.LFE126:
 256              		.section	.text.FLASH_InstructionCacheReset,"ax",%progbits
 257              		.align	1
 258              		.global	FLASH_InstructionCacheReset
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 263              	FLASH_InstructionCacheReset:
 264              	.LFB127:
 342:./Lib/Src/stm32f4xx_flash.c **** 
 343:./Lib/Src/stm32f4xx_flash.c **** /**
 344:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Resets the Instruction Cache.
 345:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Instruction Cache is disabled.  
 346:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
 347:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 348:./Lib/Src/stm32f4xx_flash.c ****   */
 349:./Lib/Src/stm32f4xx_flash.c **** void FLASH_InstructionCacheReset(void)
 350:./Lib/Src/stm32f4xx_flash.c **** {
 265              		.loc 1 350 1
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270 0000 80B4     		push	{r7}
 271              		.cfi_def_cfa_offset 4
 272              		.cfi_offset 7, -4
 273 0002 00AF     		add	r7, sp, #0
 274              		.cfi_def_cfa_register 7
 351:./Lib/Src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_ICRST;
 275              		.loc 1 351 8
 276 0004 054B     		ldr	r3, .L23
 277 0006 1B68     		ldr	r3, [r3]
 278 0008 044A     		ldr	r2, .L23
 279              		.loc 1 351 14
ARM GAS  /tmp/cc2eTGWX.s 			page 12


 280 000a 43F40063 		orr	r3, r3, #2048
 281 000e 1360     		str	r3, [r2]
 352:./Lib/Src/stm32f4xx_flash.c **** }
 282              		.loc 1 352 1
 283 0010 00BF     		nop
 284 0012 BD46     		mov	sp, r7
 285              		.cfi_def_cfa_register 13
 286              		@ sp needed
 287 0014 5DF8047B 		ldr	r7, [sp], #4
 288              		.cfi_restore 7
 289              		.cfi_def_cfa_offset 0
 290 0018 7047     		bx	lr
 291              	.L24:
 292 001a 00BF     		.align	2
 293              	.L23:
 294 001c 003C0240 		.word	1073888256
 295              		.cfi_endproc
 296              	.LFE127:
 298              		.section	.text.FLASH_DataCacheReset,"ax",%progbits
 299              		.align	1
 300              		.global	FLASH_DataCacheReset
 301              		.syntax unified
 302              		.thumb
 303              		.thumb_func
 305              	FLASH_DataCacheReset:
 306              	.LFB128:
 353:./Lib/Src/stm32f4xx_flash.c **** 
 354:./Lib/Src/stm32f4xx_flash.c **** /**
 355:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Resets the Data Cache.
 356:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function must be used only when the Data Cache is disabled.  
 357:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
 358:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 359:./Lib/Src/stm32f4xx_flash.c ****   */
 360:./Lib/Src/stm32f4xx_flash.c **** void FLASH_DataCacheReset(void)
 361:./Lib/Src/stm32f4xx_flash.c **** {
 307              		.loc 1 361 1
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312 0000 80B4     		push	{r7}
 313              		.cfi_def_cfa_offset 4
 314              		.cfi_offset 7, -4
 315 0002 00AF     		add	r7, sp, #0
 316              		.cfi_def_cfa_register 7
 362:./Lib/Src/stm32f4xx_flash.c ****   FLASH->ACR |= FLASH_ACR_DCRST;
 317              		.loc 1 362 8
 318 0004 054B     		ldr	r3, .L26
 319 0006 1B68     		ldr	r3, [r3]
 320 0008 044A     		ldr	r2, .L26
 321              		.loc 1 362 14
 322 000a 43F48053 		orr	r3, r3, #4096
 323 000e 1360     		str	r3, [r2]
 363:./Lib/Src/stm32f4xx_flash.c **** }
 324              		.loc 1 363 1
 325 0010 00BF     		nop
 326 0012 BD46     		mov	sp, r7
ARM GAS  /tmp/cc2eTGWX.s 			page 13


 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 0014 5DF8047B 		ldr	r7, [sp], #4
 330              		.cfi_restore 7
 331              		.cfi_def_cfa_offset 0
 332 0018 7047     		bx	lr
 333              	.L27:
 334 001a 00BF     		.align	2
 335              	.L26:
 336 001c 003C0240 		.word	1073888256
 337              		.cfi_endproc
 338              	.LFE128:
 340              		.section	.text.FLASH_Unlock,"ax",%progbits
 341              		.align	1
 342              		.global	FLASH_Unlock
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 347              	FLASH_Unlock:
 348              	.LFB129:
 364:./Lib/Src/stm32f4xx_flash.c **** 
 365:./Lib/Src/stm32f4xx_flash.c **** /**
 366:./Lib/Src/stm32f4xx_flash.c ****   * @}
 367:./Lib/Src/stm32f4xx_flash.c ****   */
 368:./Lib/Src/stm32f4xx_flash.c **** 
 369:./Lib/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group2 FLASH Memory Programming functions
 370:./Lib/Src/stm32f4xx_flash.c ****  *  @brief   FLASH Memory Programming functions
 371:./Lib/Src/stm32f4xx_flash.c ****  *
 372:./Lib/Src/stm32f4xx_flash.c **** @verbatim   
 373:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================
 374:./Lib/Src/stm32f4xx_flash.c ****                 ##### FLASH Memory Programming functions #####
 375:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================   
 376:./Lib/Src/stm32f4xx_flash.c ****     [..]
 377:./Lib/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 378:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_Unlock(void)
 379:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_Lock(void)
 380:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 381:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)       
 382:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 383:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 384:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 385:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 386:./Lib/Src/stm32f4xx_flash.c ****           The following functions can be used only for STM32F42xxx/43xxx devices. 
 387:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 388:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)    
 389:./Lib/Src/stm32f4xx_flash.c ****     [..]   
 390:./Lib/Src/stm32f4xx_flash.c ****       Any operation of erase or program should follow these steps:
 391:./Lib/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_Unlock() function to enable the FLASH control register access
 392:./Lib/Src/stm32f4xx_flash.c **** 
 393:./Lib/Src/stm32f4xx_flash.c ****       (#) Call the desired function to erase sector(s) or program data
 394:./Lib/Src/stm32f4xx_flash.c **** 
 395:./Lib/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_Lock() function to disable the FLASH control register access
 396:./Lib/Src/stm32f4xx_flash.c ****           (recommended to protect the FLASH memory against possible unwanted operation)
 397:./Lib/Src/stm32f4xx_flash.c ****     
 398:./Lib/Src/stm32f4xx_flash.c **** @endverbatim
 399:./Lib/Src/stm32f4xx_flash.c ****   * @{
 400:./Lib/Src/stm32f4xx_flash.c ****   */
ARM GAS  /tmp/cc2eTGWX.s 			page 14


 401:./Lib/Src/stm32f4xx_flash.c **** 
 402:./Lib/Src/stm32f4xx_flash.c **** /**
 403:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH control register access
 404:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
 405:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 406:./Lib/Src/stm32f4xx_flash.c ****   */
 407:./Lib/Src/stm32f4xx_flash.c **** void FLASH_Unlock(void)
 408:./Lib/Src/stm32f4xx_flash.c **** {
 349              		.loc 1 408 1
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 0000 80B4     		push	{r7}
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 0002 00AF     		add	r7, sp, #0
 358              		.cfi_def_cfa_register 7
 409:./Lib/Src/stm32f4xx_flash.c ****   if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 359              		.loc 1 409 12
 360 0004 074B     		ldr	r3, .L31
 361 0006 1B69     		ldr	r3, [r3, #16]
 362              		.loc 1 409 5
 363 0008 002B     		cmp	r3, #0
 364 000a 05DA     		bge	.L30
 410:./Lib/Src/stm32f4xx_flash.c ****   {
 411:./Lib/Src/stm32f4xx_flash.c ****     /* Authorize the FLASH Registers access */
 412:./Lib/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY1;
 365              		.loc 1 412 10
 366 000c 054B     		ldr	r3, .L31
 367              		.loc 1 412 17
 368 000e 064A     		ldr	r2, .L31+4
 369 0010 5A60     		str	r2, [r3, #4]
 413:./Lib/Src/stm32f4xx_flash.c ****     FLASH->KEYR = FLASH_KEY2;
 370              		.loc 1 413 10
 371 0012 044B     		ldr	r3, .L31
 372              		.loc 1 413 17
 373 0014 054A     		ldr	r2, .L31+8
 374 0016 5A60     		str	r2, [r3, #4]
 375              	.L30:
 414:./Lib/Src/stm32f4xx_flash.c ****   }  
 415:./Lib/Src/stm32f4xx_flash.c **** }
 376              		.loc 1 415 1
 377 0018 00BF     		nop
 378 001a BD46     		mov	sp, r7
 379              		.cfi_def_cfa_register 13
 380              		@ sp needed
 381 001c 5DF8047B 		ldr	r7, [sp], #4
 382              		.cfi_restore 7
 383              		.cfi_def_cfa_offset 0
 384 0020 7047     		bx	lr
 385              	.L32:
 386 0022 00BF     		.align	2
 387              	.L31:
 388 0024 003C0240 		.word	1073888256
 389 0028 23016745 		.word	1164378403
 390 002c AB89EFCD 		.word	-839939669
ARM GAS  /tmp/cc2eTGWX.s 			page 15


 391              		.cfi_endproc
 392              	.LFE129:
 394              		.section	.text.FLASH_Lock,"ax",%progbits
 395              		.align	1
 396              		.global	FLASH_Lock
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 401              	FLASH_Lock:
 402              	.LFB130:
 416:./Lib/Src/stm32f4xx_flash.c **** 
 417:./Lib/Src/stm32f4xx_flash.c **** /**
 418:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH control register access
 419:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
 420:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 421:./Lib/Src/stm32f4xx_flash.c ****   */
 422:./Lib/Src/stm32f4xx_flash.c **** void FLASH_Lock(void)
 423:./Lib/Src/stm32f4xx_flash.c **** {
 403              		.loc 1 423 1
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 80B4     		push	{r7}
 409              		.cfi_def_cfa_offset 4
 410              		.cfi_offset 7, -4
 411 0002 00AF     		add	r7, sp, #0
 412              		.cfi_def_cfa_register 7
 424:./Lib/Src/stm32f4xx_flash.c ****   /* Set the LOCK Bit to lock the FLASH Registers access */
 425:./Lib/Src/stm32f4xx_flash.c ****   FLASH->CR |= FLASH_CR_LOCK;
 413              		.loc 1 425 8
 414 0004 054B     		ldr	r3, .L34
 415 0006 1B69     		ldr	r3, [r3, #16]
 416 0008 044A     		ldr	r2, .L34
 417              		.loc 1 425 13
 418 000a 43F00043 		orr	r3, r3, #-2147483648
 419 000e 1361     		str	r3, [r2, #16]
 426:./Lib/Src/stm32f4xx_flash.c **** }
 420              		.loc 1 426 1
 421 0010 00BF     		nop
 422 0012 BD46     		mov	sp, r7
 423              		.cfi_def_cfa_register 13
 424              		@ sp needed
 425 0014 5DF8047B 		ldr	r7, [sp], #4
 426              		.cfi_restore 7
 427              		.cfi_def_cfa_offset 0
 428 0018 7047     		bx	lr
 429              	.L35:
 430 001a 00BF     		.align	2
 431              	.L34:
 432 001c 003C0240 		.word	1073888256
 433              		.cfi_endproc
 434              	.LFE130:
 436              		.section	.text.FLASH_EraseSector,"ax",%progbits
 437              		.align	1
 438              		.global	FLASH_EraseSector
 439              		.syntax unified
ARM GAS  /tmp/cc2eTGWX.s 			page 16


 440              		.thumb
 441              		.thumb_func
 443              	FLASH_EraseSector:
 444              	.LFB131:
 427:./Lib/Src/stm32f4xx_flash.c **** 
 428:./Lib/Src/stm32f4xx_flash.c **** /**
 429:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Erases a specified FLASH Sector.
 430:./Lib/Src/stm32f4xx_flash.c ****   *
 431:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 432:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 433:./Lib/Src/stm32f4xx_flash.c ****   *
 434:./Lib/Src/stm32f4xx_flash.c ****   * @param  FLASH_Sector: The Sector number to be erased.
 435:./Lib/Src/stm32f4xx_flash.c ****   *
 436:./Lib/Src/stm32f4xx_flash.c ****   *  @note  For STM32F405xx/407xx and STM32F415xx/417xx devices this parameter can 
 437:./Lib/Src/stm32f4xx_flash.c ****   *         be a value between FLASH_Sector_0 and FLASH_Sector_11.
 438:./Lib/Src/stm32f4xx_flash.c ****   *
 439:./Lib/Src/stm32f4xx_flash.c ****   *         For STM32F42xxx/43xxx devices this parameter can be a value between 
 440:./Lib/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_23.
 441:./Lib/Src/stm32f4xx_flash.c ****   *
 442:./Lib/Src/stm32f4xx_flash.c ****   *         For STM32F401xx devices this parameter can be a value between 
 443:./Lib/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_5.
 444:./Lib/Src/stm32f4xx_flash.c ****   *
 445:./Lib/Src/stm32f4xx_flash.c ****   *         For STM32F411xE and STM32F412xG devices this parameter can be a value between 
 446:./Lib/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_7.
 447:./Lib/Src/stm32f4xx_flash.c ****   *
 448:./Lib/Src/stm32f4xx_flash.c ****   *         For STM32F410xx devices this parameter can be a value between 
 449:./Lib/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_4.
 450:./Lib/Src/stm32f4xx_flash.c ****   *
 451:./Lib/Src/stm32f4xx_flash.c ****   *         For STM32F413_423xx devices this parameter can be a value between 
 452:./Lib/Src/stm32f4xx_flash.c ****   *         FLASH_Sector_0 and FLASH_Sector_15.
 453:./Lib/Src/stm32f4xx_flash.c ****   *
 454:./Lib/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 455:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 456:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 457:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 458:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 459:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 460:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 461:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 462:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 463:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 464:./Lib/Src/stm32f4xx_flash.c ****   *       
 465:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 466:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 467:./Lib/Src/stm32f4xx_flash.c ****   */
 468:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
 469:./Lib/Src/stm32f4xx_flash.c **** {
 445              		.loc 1 469 1
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 16
 448              		@ frame_needed = 1, uses_anonymous_args = 0
 449 0000 80B5     		push	{r7, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 7, -8
 452              		.cfi_offset 14, -4
 453 0002 84B0     		sub	sp, sp, #16
 454              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc2eTGWX.s 			page 17


 455 0004 00AF     		add	r7, sp, #0
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
 458 0008 0B46     		mov	r3, r1
 459 000a FB70     		strb	r3, [r7, #3]
 470:./Lib/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 460              		.loc 1 470 12
 461 000c 0023     		movs	r3, #0
 462 000e FB60     		str	r3, [r7, #12]
 471:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 463              		.loc 1 471 16
 464 0010 0923     		movs	r3, #9
 465 0012 FB72     		strb	r3, [r7, #11]
 472:./Lib/Src/stm32f4xx_flash.c **** 
 473:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 474:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_SECTOR(FLASH_Sector));
 475:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 476:./Lib/Src/stm32f4xx_flash.c ****   
 477:./Lib/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 466              		.loc 1 477 5
 467 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 468 0016 002B     		cmp	r3, #0
 469 0018 02D1     		bne	.L37
 478:./Lib/Src/stm32f4xx_flash.c ****   {
 479:./Lib/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 470              		.loc 1 479 16
 471 001a 0023     		movs	r3, #0
 472 001c FB60     		str	r3, [r7, #12]
 473 001e 10E0     		b	.L38
 474              	.L37:
 480:./Lib/Src/stm32f4xx_flash.c ****   }
 481:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 475              		.loc 1 481 10
 476 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 477 0022 012B     		cmp	r3, #1
 478 0024 03D1     		bne	.L39
 482:./Lib/Src/stm32f4xx_flash.c ****   {
 483:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 479              		.loc 1 483 15
 480 0026 4FF48073 		mov	r3, #256
 481 002a FB60     		str	r3, [r7, #12]
 482 002c 09E0     		b	.L38
 483              	.L39:
 484:./Lib/Src/stm32f4xx_flash.c ****   }
 485:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 484              		.loc 1 485 10
 485 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 486 0030 022B     		cmp	r3, #2
 487 0032 03D1     		bne	.L40
 486:./Lib/Src/stm32f4xx_flash.c ****   {
 487:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 488              		.loc 1 487 15
 489 0034 4FF40073 		mov	r3, #512
 490 0038 FB60     		str	r3, [r7, #12]
 491 003a 02E0     		b	.L38
 492              	.L40:
 488:./Lib/Src/stm32f4xx_flash.c ****   }
ARM GAS  /tmp/cc2eTGWX.s 			page 18


 489:./Lib/Src/stm32f4xx_flash.c ****   else
 490:./Lib/Src/stm32f4xx_flash.c ****   {
 491:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 493              		.loc 1 491 15
 494 003c 4FF44073 		mov	r3, #768
 495 0040 FB60     		str	r3, [r7, #12]
 496              	.L38:
 492:./Lib/Src/stm32f4xx_flash.c ****   }
 493:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 494:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 497              		.loc 1 494 12
 498 0042 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 499 0046 0346     		mov	r3, r0
 500 0048 FB72     		strb	r3, [r7, #11]
 495:./Lib/Src/stm32f4xx_flash.c ****   
 496:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 501              		.loc 1 496 5
 502 004a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 503 004c 092B     		cmp	r3, #9
 504 004e 2FD1     		bne	.L41
 497:./Lib/Src/stm32f4xx_flash.c ****   { 
 498:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase the sector */
 499:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 505              		.loc 1 499 10
 506 0050 1A4B     		ldr	r3, .L43
 507 0052 1B69     		ldr	r3, [r3, #16]
 508 0054 194A     		ldr	r2, .L43
 509              		.loc 1 499 15
 510 0056 23F44073 		bic	r3, r3, #768
 511 005a 1361     		str	r3, [r2, #16]
 500:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 512              		.loc 1 500 10
 513 005c 174B     		ldr	r3, .L43
 514 005e 1A69     		ldr	r2, [r3, #16]
 515 0060 1649     		ldr	r1, .L43
 516              		.loc 1 500 15
 517 0062 FB68     		ldr	r3, [r7, #12]
 518 0064 1343     		orrs	r3, r3, r2
 519 0066 0B61     		str	r3, [r1, #16]
 501:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK;
 520              		.loc 1 501 10
 521 0068 144B     		ldr	r3, .L43
 522 006a 1B69     		ldr	r3, [r3, #16]
 523 006c 134A     		ldr	r2, .L43
 524              		.loc 1 501 15
 525 006e 23F0F803 		bic	r3, r3, #248
 526 0072 1361     		str	r3, [r2, #16]
 502:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 527              		.loc 1 502 10
 528 0074 114B     		ldr	r3, .L43
 529 0076 1A69     		ldr	r2, [r3, #16]
 530              		.loc 1 502 15
 531 0078 7B68     		ldr	r3, [r7, #4]
 532 007a 1343     		orrs	r3, r3, r2
 533              		.loc 1 502 10
 534 007c 0F4A     		ldr	r2, .L43
 535              		.loc 1 502 15
ARM GAS  /tmp/cc2eTGWX.s 			page 19


 536 007e 43F00203 		orr	r3, r3, #2
 537 0082 1361     		str	r3, [r2, #16]
 503:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 538              		.loc 1 503 10
 539 0084 0D4B     		ldr	r3, .L43
 540 0086 1B69     		ldr	r3, [r3, #16]
 541 0088 0C4A     		ldr	r2, .L43
 542              		.loc 1 503 15
 543 008a 43F48033 		orr	r3, r3, #65536
 544 008e 1361     		str	r3, [r2, #16]
 504:./Lib/Src/stm32f4xx_flash.c ****     
 505:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 506:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 545              		.loc 1 506 14
 546 0090 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 547 0094 0346     		mov	r3, r0
 548 0096 FB72     		strb	r3, [r7, #11]
 507:./Lib/Src/stm32f4xx_flash.c ****     
 508:./Lib/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the SER Bit */
 509:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_SER);
 549              		.loc 1 509 10
 550 0098 084B     		ldr	r3, .L43
 551 009a 1B69     		ldr	r3, [r3, #16]
 552 009c 074A     		ldr	r2, .L43
 553              		.loc 1 509 15
 554 009e 23F00203 		bic	r3, r3, #2
 555 00a2 1361     		str	r3, [r2, #16]
 510:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= SECTOR_MASK; 
 556              		.loc 1 510 10
 557 00a4 054B     		ldr	r3, .L43
 558 00a6 1B69     		ldr	r3, [r3, #16]
 559 00a8 044A     		ldr	r2, .L43
 560              		.loc 1 510 15
 561 00aa 23F0F803 		bic	r3, r3, #248
 562 00ae 1361     		str	r3, [r2, #16]
 563              	.L41:
 511:./Lib/Src/stm32f4xx_flash.c ****   }
 512:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 513:./Lib/Src/stm32f4xx_flash.c ****   return status;
 564              		.loc 1 513 10
 565 00b0 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 514:./Lib/Src/stm32f4xx_flash.c **** }
 566              		.loc 1 514 1
 567 00b2 1846     		mov	r0, r3
 568 00b4 1037     		adds	r7, r7, #16
 569              		.cfi_def_cfa_offset 8
 570 00b6 BD46     		mov	sp, r7
 571              		.cfi_def_cfa_register 13
 572              		@ sp needed
 573 00b8 80BD     		pop	{r7, pc}
 574              	.L44:
 575 00ba 00BF     		.align	2
 576              	.L43:
 577 00bc 003C0240 		.word	1073888256
 578              		.cfi_endproc
 579              	.LFE131:
 581              		.section	.text.FLASH_EraseAllSectors,"ax",%progbits
ARM GAS  /tmp/cc2eTGWX.s 			page 20


 582              		.align	1
 583              		.global	FLASH_EraseAllSectors
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 588              	FLASH_EraseAllSectors:
 589              	.LFB132:
 515:./Lib/Src/stm32f4xx_flash.c **** 
 516:./Lib/Src/stm32f4xx_flash.c **** /**
 517:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors.
 518:./Lib/Src/stm32f4xx_flash.c ****   *
 519:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 520:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 521:./Lib/Src/stm32f4xx_flash.c ****   *  
 522:./Lib/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 523:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 524:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 525:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 526:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 527:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 528:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 529:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 530:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 531:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 532:./Lib/Src/stm32f4xx_flash.c ****   *       
 533:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 534:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 535:./Lib/Src/stm32f4xx_flash.c ****   */
 536:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
 537:./Lib/Src/stm32f4xx_flash.c **** {
 590              		.loc 1 537 1
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 16
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594 0000 80B5     		push	{r7, lr}
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 7, -8
 597              		.cfi_offset 14, -4
 598 0002 84B0     		sub	sp, sp, #16
 599              		.cfi_def_cfa_offset 24
 600 0004 00AF     		add	r7, sp, #0
 601              		.cfi_def_cfa_register 7
 602 0006 0346     		mov	r3, r0
 603 0008 FB71     		strb	r3, [r7, #7]
 538:./Lib/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 604              		.loc 1 538 12
 605 000a 0023     		movs	r3, #0
 606 000c FB60     		str	r3, [r7, #12]
 539:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 607              		.loc 1 539 16
 608 000e 0923     		movs	r3, #9
 609 0010 FB72     		strb	r3, [r7, #11]
 540:./Lib/Src/stm32f4xx_flash.c ****   
 541:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 542:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 610              		.loc 1 542 12
 611 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
ARM GAS  /tmp/cc2eTGWX.s 			page 21


 612 0016 0346     		mov	r3, r0
 613 0018 FB72     		strb	r3, [r7, #11]
 543:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 544:./Lib/Src/stm32f4xx_flash.c ****   
 545:./Lib/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 614              		.loc 1 545 5
 615 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 616 001c 002B     		cmp	r3, #0
 617 001e 02D1     		bne	.L46
 546:./Lib/Src/stm32f4xx_flash.c ****   {
 547:./Lib/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 618              		.loc 1 547 16
 619 0020 0023     		movs	r3, #0
 620 0022 FB60     		str	r3, [r7, #12]
 621 0024 10E0     		b	.L47
 622              	.L46:
 548:./Lib/Src/stm32f4xx_flash.c ****   }
 549:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 623              		.loc 1 549 10
 624 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 625 0028 012B     		cmp	r3, #1
 626 002a 03D1     		bne	.L48
 550:./Lib/Src/stm32f4xx_flash.c ****   {
 551:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 627              		.loc 1 551 15
 628 002c 4FF48073 		mov	r3, #256
 629 0030 FB60     		str	r3, [r7, #12]
 630 0032 09E0     		b	.L47
 631              	.L48:
 552:./Lib/Src/stm32f4xx_flash.c ****   }
 553:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 632              		.loc 1 553 10
 633 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 634 0036 022B     		cmp	r3, #2
 635 0038 03D1     		bne	.L49
 554:./Lib/Src/stm32f4xx_flash.c ****   {
 555:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 636              		.loc 1 555 15
 637 003a 4FF40073 		mov	r3, #512
 638 003e FB60     		str	r3, [r7, #12]
 639 0040 02E0     		b	.L47
 640              	.L49:
 556:./Lib/Src/stm32f4xx_flash.c ****   }
 557:./Lib/Src/stm32f4xx_flash.c ****   else
 558:./Lib/Src/stm32f4xx_flash.c ****   {
 559:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 641              		.loc 1 559 15
 642 0042 4FF44073 		mov	r3, #768
 643 0046 FB60     		str	r3, [r7, #12]
 644              	.L47:
 560:./Lib/Src/stm32f4xx_flash.c ****   }  
 561:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 645              		.loc 1 561 5
 646 0048 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 647 004a 092B     		cmp	r3, #9
 648 004c 21D1     		bne	.L50
 562:./Lib/Src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/cc2eTGWX.s 			page 22


 563:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 564:./Lib/Src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
 565:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 566:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 567:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
 568:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 569:./Lib/Src/stm32f4xx_flash.c ****     
 570:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 571:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 572:./Lib/Src/stm32f4xx_flash.c **** 
 573:./Lib/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 574:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
 575:./Lib/Src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
 576:./Lib/Src/stm32f4xx_flash.c **** 
 577:./Lib/Src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
 578:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 649              		.loc 1 578 10
 650 004e 134B     		ldr	r3, .L52
 651 0050 1B69     		ldr	r3, [r3, #16]
 652 0052 124A     		ldr	r2, .L52
 653              		.loc 1 578 15
 654 0054 23F44073 		bic	r3, r3, #768
 655 0058 1361     		str	r3, [r2, #16]
 579:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= tmp_psize;
 656              		.loc 1 579 10
 657 005a 104B     		ldr	r3, .L52
 658 005c 1A69     		ldr	r2, [r3, #16]
 659 005e 0F49     		ldr	r1, .L52
 660              		.loc 1 579 15
 661 0060 FB68     		ldr	r3, [r7, #12]
 662 0062 1343     		orrs	r3, r3, r2
 663 0064 0B61     		str	r3, [r1, #16]
 580:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_MER;
 664              		.loc 1 580 10
 665 0066 0D4B     		ldr	r3, .L52
 666 0068 1B69     		ldr	r3, [r3, #16]
 667 006a 0C4A     		ldr	r2, .L52
 668              		.loc 1 580 15
 669 006c 43F00403 		orr	r3, r3, #4
 670 0070 1361     		str	r3, [r2, #16]
 581:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_STRT;
 671              		.loc 1 581 10
 672 0072 0A4B     		ldr	r3, .L52
 673 0074 1B69     		ldr	r3, [r3, #16]
 674 0076 094A     		ldr	r2, .L52
 675              		.loc 1 581 15
 676 0078 43F48033 		orr	r3, r3, #65536
 677 007c 1361     		str	r3, [r2, #16]
 582:./Lib/Src/stm32f4xx_flash.c ****     
 583:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 584:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 678              		.loc 1 584 14
 679 007e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 680 0082 0346     		mov	r3, r0
 681 0084 FB72     		strb	r3, [r7, #11]
 585:./Lib/Src/stm32f4xx_flash.c **** 
 586:./Lib/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
ARM GAS  /tmp/cc2eTGWX.s 			page 23


 587:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER);
 682              		.loc 1 587 10
 683 0086 054B     		ldr	r3, .L52
 684 0088 1B69     		ldr	r3, [r3, #16]
 685 008a 044A     		ldr	r2, .L52
 686              		.loc 1 587 15
 687 008c 23F00403 		bic	r3, r3, #4
 688 0090 1361     		str	r3, [r2, #16]
 689              	.L50:
 588:./Lib/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_4
 589:./Lib/Src/stm32f4xx_flash.c **** 
 590:./Lib/Src/stm32f4xx_flash.c ****   }   
 591:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 592:./Lib/Src/stm32f4xx_flash.c ****   return status;
 690              		.loc 1 592 10
 691 0092 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 593:./Lib/Src/stm32f4xx_flash.c **** }
 692              		.loc 1 593 1
 693 0094 1846     		mov	r0, r3
 694 0096 1037     		adds	r7, r7, #16
 695              		.cfi_def_cfa_offset 8
 696 0098 BD46     		mov	sp, r7
 697              		.cfi_def_cfa_register 13
 698              		@ sp needed
 699 009a 80BD     		pop	{r7, pc}
 700              	.L53:
 701              		.align	2
 702              	.L52:
 703 009c 003C0240 		.word	1073888256
 704              		.cfi_endproc
 705              	.LFE132:
 707              		.section	.text.FLASH_EraseAllBank1Sectors,"ax",%progbits
 708              		.align	1
 709              		.global	FLASH_EraseAllBank1Sectors
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 714              	FLASH_EraseAllBank1Sectors:
 715              	.LFB133:
 594:./Lib/Src/stm32f4xx_flash.c **** 
 595:./Lib/Src/stm32f4xx_flash.c **** /**
 596:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 1.
 597:./Lib/Src/stm32f4xx_flash.c ****   *
 598:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 599:./Lib/Src/stm32f4xx_flash.c ****   *      
 600:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 601:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one. 
 602:./Lib/Src/stm32f4xx_flash.c ****   *  
 603:./Lib/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 604:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 605:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 606:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 607:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 608:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 609:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 610:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 611:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
ARM GAS  /tmp/cc2eTGWX.s 			page 24


 612:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 613:./Lib/Src/stm32f4xx_flash.c ****   *       
 614:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 615:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 616:./Lib/Src/stm32f4xx_flash.c ****   */
 617:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
 618:./Lib/Src/stm32f4xx_flash.c **** {
 716              		.loc 1 618 1
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720 0000 80B5     		push	{r7, lr}
 721              		.cfi_def_cfa_offset 8
 722              		.cfi_offset 7, -8
 723              		.cfi_offset 14, -4
 724 0002 84B0     		sub	sp, sp, #16
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 0346     		mov	r3, r0
 729 0008 FB71     		strb	r3, [r7, #7]
 619:./Lib/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 730              		.loc 1 619 12
 731 000a 0023     		movs	r3, #0
 732 000c FB60     		str	r3, [r7, #12]
 620:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 733              		.loc 1 620 16
 734 000e 0923     		movs	r3, #9
 735 0010 FB72     		strb	r3, [r7, #11]
 621:./Lib/Src/stm32f4xx_flash.c ****   
 622:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 623:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 736              		.loc 1 623 12
 737 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 738 0016 0346     		mov	r3, r0
 739 0018 FB72     		strb	r3, [r7, #11]
 624:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
 625:./Lib/Src/stm32f4xx_flash.c ****   
 626:./Lib/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 740              		.loc 1 626 5
 741 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 742 001c 002B     		cmp	r3, #0
 743 001e 02D1     		bne	.L55
 627:./Lib/Src/stm32f4xx_flash.c ****   {
 628:./Lib/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 744              		.loc 1 628 16
 745 0020 0023     		movs	r3, #0
 746 0022 FB60     		str	r3, [r7, #12]
 747 0024 10E0     		b	.L56
 748              	.L55:
 629:./Lib/Src/stm32f4xx_flash.c ****   }
 630:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 749              		.loc 1 630 10
 750 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 751 0028 012B     		cmp	r3, #1
 752 002a 03D1     		bne	.L57
 631:./Lib/Src/stm32f4xx_flash.c ****   {
ARM GAS  /tmp/cc2eTGWX.s 			page 25


 632:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 753              		.loc 1 632 15
 754 002c 4FF48073 		mov	r3, #256
 755 0030 FB60     		str	r3, [r7, #12]
 756 0032 09E0     		b	.L56
 757              	.L57:
 633:./Lib/Src/stm32f4xx_flash.c ****   }
 634:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 758              		.loc 1 634 10
 759 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 760 0036 022B     		cmp	r3, #2
 761 0038 03D1     		bne	.L58
 635:./Lib/Src/stm32f4xx_flash.c ****   {
 636:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 762              		.loc 1 636 15
 763 003a 4FF40073 		mov	r3, #512
 764 003e FB60     		str	r3, [r7, #12]
 765 0040 02E0     		b	.L56
 766              	.L58:
 637:./Lib/Src/stm32f4xx_flash.c ****   }
 638:./Lib/Src/stm32f4xx_flash.c ****   else
 639:./Lib/Src/stm32f4xx_flash.c ****   {
 640:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 767              		.loc 1 640 15
 768 0042 4FF44073 		mov	r3, #768
 769 0046 FB60     		str	r3, [r7, #12]
 770              	.L56:
 641:./Lib/Src/stm32f4xx_flash.c ****   }  
 642:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 771              		.loc 1 642 5
 772 0048 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 773 004a 092B     		cmp	r3, #9
 774 004c 21D1     		bne	.L59
 643:./Lib/Src/stm32f4xx_flash.c ****   {
 644:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 645:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 775              		.loc 1 645 11
 776 004e 134B     		ldr	r3, .L61
 777 0050 1B69     		ldr	r3, [r3, #16]
 778 0052 124A     		ldr	r2, .L61
 779              		.loc 1 645 16
 780 0054 23F44073 		bic	r3, r3, #768
 781 0058 1361     		str	r3, [r2, #16]
 646:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 782              		.loc 1 646 11
 783 005a 104B     		ldr	r3, .L61
 784 005c 1A69     		ldr	r2, [r3, #16]
 785 005e 0F49     		ldr	r1, .L61
 786              		.loc 1 646 16
 787 0060 FB68     		ldr	r3, [r7, #12]
 788 0062 1343     		orrs	r3, r3, r2
 789 0064 0B61     		str	r3, [r1, #16]
 647:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER1;
 790              		.loc 1 647 11
 791 0066 0D4B     		ldr	r3, .L61
 792 0068 1B69     		ldr	r3, [r3, #16]
 793 006a 0C4A     		ldr	r2, .L61
ARM GAS  /tmp/cc2eTGWX.s 			page 26


 794              		.loc 1 647 16
 795 006c 43F00403 		orr	r3, r3, #4
 796 0070 1361     		str	r3, [r2, #16]
 648:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 797              		.loc 1 648 11
 798 0072 0A4B     		ldr	r3, .L61
 799 0074 1B69     		ldr	r3, [r3, #16]
 800 0076 094A     		ldr	r2, .L61
 801              		.loc 1 648 16
 802 0078 43F48033 		orr	r3, r3, #65536
 803 007c 1361     		str	r3, [r2, #16]
 649:./Lib/Src/stm32f4xx_flash.c ****     
 650:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 651:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 804              		.loc 1 651 14
 805 007e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 806 0082 0346     		mov	r3, r0
 807 0084 FB72     		strb	r3, [r7, #11]
 652:./Lib/Src/stm32f4xx_flash.c **** 
 653:./Lib/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 654:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER1);
 808              		.loc 1 654 10
 809 0086 054B     		ldr	r3, .L61
 810 0088 1B69     		ldr	r3, [r3, #16]
 811 008a 044A     		ldr	r2, .L61
 812              		.loc 1 654 15
 813 008c 23F00403 		bic	r3, r3, #4
 814 0090 1361     		str	r3, [r2, #16]
 815              	.L59:
 655:./Lib/Src/stm32f4xx_flash.c **** 
 656:./Lib/Src/stm32f4xx_flash.c ****   }   
 657:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 658:./Lib/Src/stm32f4xx_flash.c ****   return status;
 816              		.loc 1 658 10
 817 0092 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 659:./Lib/Src/stm32f4xx_flash.c **** }
 818              		.loc 1 659 1
 819 0094 1846     		mov	r0, r3
 820 0096 1037     		adds	r7, r7, #16
 821              		.cfi_def_cfa_offset 8
 822 0098 BD46     		mov	sp, r7
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 009a 80BD     		pop	{r7, pc}
 826              	.L62:
 827              		.align	2
 828              	.L61:
 829 009c 003C0240 		.word	1073888256
 830              		.cfi_endproc
 831              	.LFE133:
 833              		.section	.text.FLASH_EraseAllBank2Sectors,"ax",%progbits
 834              		.align	1
 835              		.global	FLASH_EraseAllBank2Sectors
 836              		.syntax unified
 837              		.thumb
 838              		.thumb_func
 840              	FLASH_EraseAllBank2Sectors:
ARM GAS  /tmp/cc2eTGWX.s 			page 27


 841              	.LFB134:
 660:./Lib/Src/stm32f4xx_flash.c **** 
 661:./Lib/Src/stm32f4xx_flash.c **** 
 662:./Lib/Src/stm32f4xx_flash.c **** /**
 663:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Erases all FLASH Sectors in Bank 2.
 664:./Lib/Src/stm32f4xx_flash.c ****   *
 665:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
 666:./Lib/Src/stm32f4xx_flash.c ****   *     
 667:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 668:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 669:./Lib/Src/stm32f4xx_flash.c ****   *     
 670:./Lib/Src/stm32f4xx_flash.c ****   * @param  VoltageRange: The device voltage range which defines the erase parallelism.  
 671:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 672:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_1: when the device voltage range is 1.8V to 2.1V, 
 673:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by byte (8-bit) 
 674:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_2: when the device voltage range is 2.1V to 2.7V,
 675:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by half word (16-bit)
 676:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_3: when the device voltage range is 2.7V to 3.6V,
 677:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by word (32-bit)
 678:./Lib/Src/stm32f4xx_flash.c ****   *            @arg VoltageRange_4: when the device voltage range is 2.7V to 3.6V + External Vpp, 
 679:./Lib/Src/stm32f4xx_flash.c ****   *                                  the operation will be done by double word (64-bit)
 680:./Lib/Src/stm32f4xx_flash.c ****   *       
 681:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 682:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 683:./Lib/Src/stm32f4xx_flash.c ****   */
 684:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
 685:./Lib/Src/stm32f4xx_flash.c **** {
 842              		.loc 1 685 1
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 16
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846 0000 80B5     		push	{r7, lr}
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 7, -8
 849              		.cfi_offset 14, -4
 850 0002 84B0     		sub	sp, sp, #16
 851              		.cfi_def_cfa_offset 24
 852 0004 00AF     		add	r7, sp, #0
 853              		.cfi_def_cfa_register 7
 854 0006 0346     		mov	r3, r0
 855 0008 FB71     		strb	r3, [r7, #7]
 686:./Lib/Src/stm32f4xx_flash.c ****   uint32_t tmp_psize = 0x0;
 856              		.loc 1 686 12
 857 000a 0023     		movs	r3, #0
 858 000c FB60     		str	r3, [r7, #12]
 687:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 859              		.loc 1 687 16
 860 000e 0923     		movs	r3, #9
 861 0010 FB72     		strb	r3, [r7, #11]
 688:./Lib/Src/stm32f4xx_flash.c ****   
 689:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 690:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 862              		.loc 1 690 12
 863 0012 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 864 0016 0346     		mov	r3, r0
 865 0018 FB72     		strb	r3, [r7, #11]
 691:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_VOLTAGERANGE(VoltageRange));
ARM GAS  /tmp/cc2eTGWX.s 			page 28


 692:./Lib/Src/stm32f4xx_flash.c ****   
 693:./Lib/Src/stm32f4xx_flash.c ****   if(VoltageRange == VoltageRange_1)
 866              		.loc 1 693 5
 867 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 868 001c 002B     		cmp	r3, #0
 869 001e 02D1     		bne	.L64
 694:./Lib/Src/stm32f4xx_flash.c ****   {
 695:./Lib/Src/stm32f4xx_flash.c ****      tmp_psize = FLASH_PSIZE_BYTE;
 870              		.loc 1 695 16
 871 0020 0023     		movs	r3, #0
 872 0022 FB60     		str	r3, [r7, #12]
 873 0024 10E0     		b	.L65
 874              	.L64:
 696:./Lib/Src/stm32f4xx_flash.c ****   }
 697:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_2)
 875              		.loc 1 697 10
 876 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 877 0028 012B     		cmp	r3, #1
 878 002a 03D1     		bne	.L66
 698:./Lib/Src/stm32f4xx_flash.c ****   {
 699:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_HALF_WORD;
 879              		.loc 1 699 15
 880 002c 4FF48073 		mov	r3, #256
 881 0030 FB60     		str	r3, [r7, #12]
 882 0032 09E0     		b	.L65
 883              	.L66:
 700:./Lib/Src/stm32f4xx_flash.c ****   }
 701:./Lib/Src/stm32f4xx_flash.c ****   else if(VoltageRange == VoltageRange_3)
 884              		.loc 1 701 10
 885 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 886 0036 022B     		cmp	r3, #2
 887 0038 03D1     		bne	.L67
 702:./Lib/Src/stm32f4xx_flash.c ****   {
 703:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_WORD;
 888              		.loc 1 703 15
 889 003a 4FF40073 		mov	r3, #512
 890 003e FB60     		str	r3, [r7, #12]
 891 0040 02E0     		b	.L65
 892              	.L67:
 704:./Lib/Src/stm32f4xx_flash.c ****   }
 705:./Lib/Src/stm32f4xx_flash.c ****   else
 706:./Lib/Src/stm32f4xx_flash.c ****   {
 707:./Lib/Src/stm32f4xx_flash.c ****     tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 893              		.loc 1 707 15
 894 0042 4FF44073 		mov	r3, #768
 895 0046 FB60     		str	r3, [r7, #12]
 896              	.L65:
 708:./Lib/Src/stm32f4xx_flash.c ****   }  
 709:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 897              		.loc 1 709 5
 898 0048 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 899 004a 092B     		cmp	r3, #9
 900 004c 21D1     		bne	.L68
 710:./Lib/Src/stm32f4xx_flash.c ****   {
 711:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to erase all sectors */
 712:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR &= CR_PSIZE_MASK;
 901              		.loc 1 712 11
ARM GAS  /tmp/cc2eTGWX.s 			page 29


 902 004e 134B     		ldr	r3, .L70
 903 0050 1B69     		ldr	r3, [r3, #16]
 904 0052 124A     		ldr	r2, .L70
 905              		.loc 1 712 16
 906 0054 23F44073 		bic	r3, r3, #768
 907 0058 1361     		str	r3, [r2, #16]
 713:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR |= tmp_psize;
 908              		.loc 1 713 11
 909 005a 104B     		ldr	r3, .L70
 910 005c 1A69     		ldr	r2, [r3, #16]
 911 005e 0F49     		ldr	r1, .L70
 912              		.loc 1 713 16
 913 0060 FB68     		ldr	r3, [r7, #12]
 914 0062 1343     		orrs	r3, r3, r2
 915 0064 0B61     		str	r3, [r1, #16]
 714:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_MER2;
 916              		.loc 1 714 11
 917 0066 0D4B     		ldr	r3, .L70
 918 0068 1B69     		ldr	r3, [r3, #16]
 919 006a 0C4A     		ldr	r2, .L70
 920              		.loc 1 714 16
 921 006c 43F40043 		orr	r3, r3, #32768
 922 0070 1361     		str	r3, [r2, #16]
 715:./Lib/Src/stm32f4xx_flash.c ****      FLASH->CR |= FLASH_CR_STRT;
 923              		.loc 1 715 11
 924 0072 0A4B     		ldr	r3, .L70
 925 0074 1B69     		ldr	r3, [r3, #16]
 926 0076 094A     		ldr	r2, .L70
 927              		.loc 1 715 16
 928 0078 43F48033 		orr	r3, r3, #65536
 929 007c 1361     		str	r3, [r2, #16]
 716:./Lib/Src/stm32f4xx_flash.c ****     
 717:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 718:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 930              		.loc 1 718 14
 931 007e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 932 0082 0346     		mov	r3, r0
 933 0084 FB72     		strb	r3, [r7, #11]
 719:./Lib/Src/stm32f4xx_flash.c **** 
 720:./Lib/Src/stm32f4xx_flash.c ****     /* if the erase operation is completed, disable the MER Bit */
 721:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_MER2);
 934              		.loc 1 721 10
 935 0086 054B     		ldr	r3, .L70
 936 0088 1B69     		ldr	r3, [r3, #16]
 937 008a 044A     		ldr	r2, .L70
 938              		.loc 1 721 15
 939 008c 23F40043 		bic	r3, r3, #32768
 940 0090 1361     		str	r3, [r2, #16]
 941              	.L68:
 722:./Lib/Src/stm32f4xx_flash.c **** 
 723:./Lib/Src/stm32f4xx_flash.c ****   }   
 724:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Erase Status */
 725:./Lib/Src/stm32f4xx_flash.c ****   return status;
 942              		.loc 1 725 10
 943 0092 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 726:./Lib/Src/stm32f4xx_flash.c **** }
 944              		.loc 1 726 1
ARM GAS  /tmp/cc2eTGWX.s 			page 30


 945 0094 1846     		mov	r0, r3
 946 0096 1037     		adds	r7, r7, #16
 947              		.cfi_def_cfa_offset 8
 948 0098 BD46     		mov	sp, r7
 949              		.cfi_def_cfa_register 13
 950              		@ sp needed
 951 009a 80BD     		pop	{r7, pc}
 952              	.L71:
 953              		.align	2
 954              	.L70:
 955 009c 003C0240 		.word	1073888256
 956              		.cfi_endproc
 957              	.LFE134:
 959              		.section	.text.FLASH_ProgramDoubleWord,"ax",%progbits
 960              		.align	1
 961              		.global	FLASH_ProgramDoubleWord
 962              		.syntax unified
 963              		.thumb
 964              		.thumb_func
 966              	FLASH_ProgramDoubleWord:
 967              	.LFB135:
 727:./Lib/Src/stm32f4xx_flash.c **** 
 728:./Lib/Src/stm32f4xx_flash.c **** /**
 729:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Programs a double word (64-bit) at a specified address.
 730:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from
 731:./Lib/Src/stm32f4xx_flash.c ****   *         2.7V to 3.6V and an External Vpp is present.
 732:./Lib/Src/stm32f4xx_flash.c ****   *
 733:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 734:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 735:./Lib/Src/stm32f4xx_flash.c ****   *  
 736:./Lib/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 737:./Lib/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 738:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 739:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 740:./Lib/Src/stm32f4xx_flash.c ****   */
 741:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
 742:./Lib/Src/stm32f4xx_flash.c **** {
 968              		.loc 1 742 1
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 24
 971              		@ frame_needed = 1, uses_anonymous_args = 0
 972 0000 80B5     		push	{r7, lr}
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 7, -8
 975              		.cfi_offset 14, -4
 976 0002 86B0     		sub	sp, sp, #24
 977              		.cfi_def_cfa_offset 32
 978 0004 00AF     		add	r7, sp, #0
 979              		.cfi_def_cfa_register 7
 980 0006 F860     		str	r0, [r7, #12]
 981 0008 C7E90023 		strd	r2, [r7]
 743:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 982              		.loc 1 743 16
 983 000c 0923     		movs	r3, #9
 984 000e FB75     		strb	r3, [r7, #23]
 744:./Lib/Src/stm32f4xx_flash.c **** 
 745:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
ARM GAS  /tmp/cc2eTGWX.s 			page 31


 746:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 747:./Lib/Src/stm32f4xx_flash.c **** 
 748:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 749:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 985              		.loc 1 749 12
 986 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 987 0014 0346     		mov	r3, r0
 988 0016 FB75     		strb	r3, [r7, #23]
 750:./Lib/Src/stm32f4xx_flash.c ****   
 751:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 989              		.loc 1 751 5
 990 0018 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 991 001a 092B     		cmp	r3, #9
 992 001c 20D1     		bne	.L73
 752:./Lib/Src/stm32f4xx_flash.c ****   {
 753:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 754:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 993              		.loc 1 754 10
 994 001e 134B     		ldr	r3, .L75
 995 0020 1B69     		ldr	r3, [r3, #16]
 996 0022 124A     		ldr	r2, .L75
 997              		.loc 1 754 15
 998 0024 23F44073 		bic	r3, r3, #768
 999 0028 1361     		str	r3, [r2, #16]
 755:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 1000              		.loc 1 755 10
 1001 002a 104B     		ldr	r3, .L75
 1002 002c 1B69     		ldr	r3, [r3, #16]
 1003 002e 0F4A     		ldr	r2, .L75
 1004              		.loc 1 755 15
 1005 0030 43F44073 		orr	r3, r3, #768
 1006 0034 1361     		str	r3, [r2, #16]
 756:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1007              		.loc 1 756 10
 1008 0036 0D4B     		ldr	r3, .L75
 1009 0038 1B69     		ldr	r3, [r3, #16]
 1010 003a 0C4A     		ldr	r2, .L75
 1011              		.loc 1 756 15
 1012 003c 43F00103 		orr	r3, r3, #1
 1013 0040 1361     		str	r3, [r2, #16]
 757:./Lib/Src/stm32f4xx_flash.c ****   
 758:./Lib/Src/stm32f4xx_flash.c ****     *(__IO uint64_t*)Address = Data;
 1014              		.loc 1 758 6
 1015 0042 F968     		ldr	r1, [r7, #12]
 1016              		.loc 1 758 30
 1017 0044 D7E90023 		ldrd	r2, [r7]
 1018 0048 C1E90023 		strd	r2, [r1]
 759:./Lib/Src/stm32f4xx_flash.c ****         
 760:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 761:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 1019              		.loc 1 761 14
 1020 004c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1021 0050 0346     		mov	r3, r0
 1022 0052 FB75     		strb	r3, [r7, #23]
 762:./Lib/Src/stm32f4xx_flash.c **** 
 763:./Lib/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 764:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
ARM GAS  /tmp/cc2eTGWX.s 			page 32


 1023              		.loc 1 764 10
 1024 0054 054B     		ldr	r3, .L75
 1025 0056 1B69     		ldr	r3, [r3, #16]
 1026 0058 044A     		ldr	r2, .L75
 1027              		.loc 1 764 15
 1028 005a 23F00103 		bic	r3, r3, #1
 1029 005e 1361     		str	r3, [r2, #16]
 1030              	.L73:
 765:./Lib/Src/stm32f4xx_flash.c ****   } 
 766:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 767:./Lib/Src/stm32f4xx_flash.c ****   return status;
 1031              		.loc 1 767 10
 1032 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 768:./Lib/Src/stm32f4xx_flash.c **** }
 1033              		.loc 1 768 1
 1034 0062 1846     		mov	r0, r3
 1035 0064 1837     		adds	r7, r7, #24
 1036              		.cfi_def_cfa_offset 8
 1037 0066 BD46     		mov	sp, r7
 1038              		.cfi_def_cfa_register 13
 1039              		@ sp needed
 1040 0068 80BD     		pop	{r7, pc}
 1041              	.L76:
 1042 006a 00BF     		.align	2
 1043              	.L75:
 1044 006c 003C0240 		.word	1073888256
 1045              		.cfi_endproc
 1046              	.LFE135:
 1048              		.section	.text.FLASH_ProgramWord,"ax",%progbits
 1049              		.align	1
 1050              		.global	FLASH_ProgramWord
 1051              		.syntax unified
 1052              		.thumb
 1053              		.thumb_func
 1055              	FLASH_ProgramWord:
 1056              	.LFB136:
 769:./Lib/Src/stm32f4xx_flash.c **** 
 770:./Lib/Src/stm32f4xx_flash.c **** /**
 771:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Programs a word (32-bit) at a specified address.
 772:./Lib/Src/stm32f4xx_flash.c ****   *
 773:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.7V to 3.6V. 
 774:./Lib/Src/stm32f4xx_flash.c ****   *
 775:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 776:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 777:./Lib/Src/stm32f4xx_flash.c ****   *  
 778:./Lib/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 779:./Lib/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 780:./Lib/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 781:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 782:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 783:./Lib/Src/stm32f4xx_flash.c ****   */
 784:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 785:./Lib/Src/stm32f4xx_flash.c **** {
 1057              		.loc 1 785 1
 1058              		.cfi_startproc
 1059              		@ args = 0, pretend = 0, frame = 16
 1060              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc2eTGWX.s 			page 33


 1061 0000 80B5     		push	{r7, lr}
 1062              		.cfi_def_cfa_offset 8
 1063              		.cfi_offset 7, -8
 1064              		.cfi_offset 14, -4
 1065 0002 84B0     		sub	sp, sp, #16
 1066              		.cfi_def_cfa_offset 24
 1067 0004 00AF     		add	r7, sp, #0
 1068              		.cfi_def_cfa_register 7
 1069 0006 7860     		str	r0, [r7, #4]
 1070 0008 3960     		str	r1, [r7]
 786:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1071              		.loc 1 786 16
 1072 000a 0923     		movs	r3, #9
 1073 000c FB73     		strb	r3, [r7, #15]
 787:./Lib/Src/stm32f4xx_flash.c **** 
 788:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 789:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 790:./Lib/Src/stm32f4xx_flash.c **** 
 791:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 792:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1074              		.loc 1 792 12
 1075 000e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1076 0012 0346     		mov	r3, r0
 1077 0014 FB73     		strb	r3, [r7, #15]
 793:./Lib/Src/stm32f4xx_flash.c ****   
 794:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1078              		.loc 1 794 5
 1079 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1080 0018 092B     		cmp	r3, #9
 1081 001a 1ED1     		bne	.L78
 795:./Lib/Src/stm32f4xx_flash.c ****   {
 796:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 797:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 1082              		.loc 1 797 10
 1083 001c 114B     		ldr	r3, .L80
 1084 001e 1B69     		ldr	r3, [r3, #16]
 1085 0020 104A     		ldr	r2, .L80
 1086              		.loc 1 797 15
 1087 0022 23F44073 		bic	r3, r3, #768
 1088 0026 1361     		str	r3, [r2, #16]
 798:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_WORD;
 1089              		.loc 1 798 10
 1090 0028 0E4B     		ldr	r3, .L80
 1091 002a 1B69     		ldr	r3, [r3, #16]
 1092 002c 0D4A     		ldr	r2, .L80
 1093              		.loc 1 798 15
 1094 002e 43F40073 		orr	r3, r3, #512
 1095 0032 1361     		str	r3, [r2, #16]
 799:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1096              		.loc 1 799 10
 1097 0034 0B4B     		ldr	r3, .L80
 1098 0036 1B69     		ldr	r3, [r3, #16]
 1099 0038 0A4A     		ldr	r2, .L80
 1100              		.loc 1 799 15
 1101 003a 43F00103 		orr	r3, r3, #1
 1102 003e 1361     		str	r3, [r2, #16]
 800:./Lib/Src/stm32f4xx_flash.c ****   
ARM GAS  /tmp/cc2eTGWX.s 			page 34


 801:./Lib/Src/stm32f4xx_flash.c ****     *(__IO uint32_t*)Address = Data;
 1103              		.loc 1 801 6
 1104 0040 7B68     		ldr	r3, [r7, #4]
 1105              		.loc 1 801 30
 1106 0042 3A68     		ldr	r2, [r7]
 1107 0044 1A60     		str	r2, [r3]
 802:./Lib/Src/stm32f4xx_flash.c ****         
 803:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 804:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 1108              		.loc 1 804 14
 1109 0046 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1110 004a 0346     		mov	r3, r0
 1111 004c FB73     		strb	r3, [r7, #15]
 805:./Lib/Src/stm32f4xx_flash.c **** 
 806:./Lib/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 807:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 1112              		.loc 1 807 10
 1113 004e 054B     		ldr	r3, .L80
 1114 0050 1B69     		ldr	r3, [r3, #16]
 1115 0052 044A     		ldr	r2, .L80
 1116              		.loc 1 807 15
 1117 0054 23F00103 		bic	r3, r3, #1
 1118 0058 1361     		str	r3, [r2, #16]
 1119              	.L78:
 808:./Lib/Src/stm32f4xx_flash.c ****   } 
 809:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 810:./Lib/Src/stm32f4xx_flash.c ****   return status;
 1120              		.loc 1 810 10
 1121 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 811:./Lib/Src/stm32f4xx_flash.c **** }
 1122              		.loc 1 811 1
 1123 005c 1846     		mov	r0, r3
 1124 005e 1037     		adds	r7, r7, #16
 1125              		.cfi_def_cfa_offset 8
 1126 0060 BD46     		mov	sp, r7
 1127              		.cfi_def_cfa_register 13
 1128              		@ sp needed
 1129 0062 80BD     		pop	{r7, pc}
 1130              	.L81:
 1131              		.align	2
 1132              	.L80:
 1133 0064 003C0240 		.word	1073888256
 1134              		.cfi_endproc
 1135              	.LFE136:
 1137              		.section	.text.FLASH_ProgramHalfWord,"ax",%progbits
 1138              		.align	1
 1139              		.global	FLASH_ProgramHalfWord
 1140              		.syntax unified
 1141              		.thumb
 1142              		.thumb_func
 1144              	FLASH_ProgramHalfWord:
 1145              	.LFB137:
 812:./Lib/Src/stm32f4xx_flash.c **** 
 813:./Lib/Src/stm32f4xx_flash.c **** /**
 814:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Programs a half word (16-bit) at a specified address. 
 815:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function must be used when the device voltage range is from 2.1V to 3.6V. 
 816:./Lib/Src/stm32f4xx_flash.c ****   *
ARM GAS  /tmp/cc2eTGWX.s 			page 35


 817:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 818:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 819:./Lib/Src/stm32f4xx_flash.c ****   * 
 820:./Lib/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 821:./Lib/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 822:./Lib/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 823:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 824:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 825:./Lib/Src/stm32f4xx_flash.c ****   */
 826:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 827:./Lib/Src/stm32f4xx_flash.c **** {
 1146              		.loc 1 827 1
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 16
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150 0000 80B5     		push	{r7, lr}
 1151              		.cfi_def_cfa_offset 8
 1152              		.cfi_offset 7, -8
 1153              		.cfi_offset 14, -4
 1154 0002 84B0     		sub	sp, sp, #16
 1155              		.cfi_def_cfa_offset 24
 1156 0004 00AF     		add	r7, sp, #0
 1157              		.cfi_def_cfa_register 7
 1158 0006 7860     		str	r0, [r7, #4]
 1159 0008 0B46     		mov	r3, r1
 1160 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 828:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1161              		.loc 1 828 16
 1162 000c 0923     		movs	r3, #9
 1163 000e FB73     		strb	r3, [r7, #15]
 829:./Lib/Src/stm32f4xx_flash.c **** 
 830:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 831:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 832:./Lib/Src/stm32f4xx_flash.c **** 
 833:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 834:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1164              		.loc 1 834 12
 1165 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1166 0014 0346     		mov	r3, r0
 1167 0016 FB73     		strb	r3, [r7, #15]
 835:./Lib/Src/stm32f4xx_flash.c ****   
 836:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1168              		.loc 1 836 5
 1169 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1170 001a 092B     		cmp	r3, #9
 1171 001c 1ED1     		bne	.L83
 837:./Lib/Src/stm32f4xx_flash.c ****   {
 838:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 839:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 1172              		.loc 1 839 10
 1173 001e 124B     		ldr	r3, .L85
 1174 0020 1B69     		ldr	r3, [r3, #16]
 1175 0022 114A     		ldr	r2, .L85
 1176              		.loc 1 839 15
 1177 0024 23F44073 		bic	r3, r3, #768
 1178 0028 1361     		str	r3, [r2, #16]
 840:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_HALF_WORD;
ARM GAS  /tmp/cc2eTGWX.s 			page 36


 1179              		.loc 1 840 10
 1180 002a 0F4B     		ldr	r3, .L85
 1181 002c 1B69     		ldr	r3, [r3, #16]
 1182 002e 0E4A     		ldr	r2, .L85
 1183              		.loc 1 840 15
 1184 0030 43F48073 		orr	r3, r3, #256
 1185 0034 1361     		str	r3, [r2, #16]
 841:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1186              		.loc 1 841 10
 1187 0036 0C4B     		ldr	r3, .L85
 1188 0038 1B69     		ldr	r3, [r3, #16]
 1189 003a 0B4A     		ldr	r2, .L85
 1190              		.loc 1 841 15
 1191 003c 43F00103 		orr	r3, r3, #1
 1192 0040 1361     		str	r3, [r2, #16]
 842:./Lib/Src/stm32f4xx_flash.c ****   
 843:./Lib/Src/stm32f4xx_flash.c ****     *(__IO uint16_t*)Address = Data;
 1193              		.loc 1 843 6
 1194 0042 7B68     		ldr	r3, [r7, #4]
 1195              		.loc 1 843 30
 1196 0044 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1197 0046 1A80     		strh	r2, [r3]	@ movhi
 844:./Lib/Src/stm32f4xx_flash.c ****         
 845:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 846:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 1198              		.loc 1 846 14
 1199 0048 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1200 004c 0346     		mov	r3, r0
 1201 004e FB73     		strb	r3, [r7, #15]
 847:./Lib/Src/stm32f4xx_flash.c **** 
 848:./Lib/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 849:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 1202              		.loc 1 849 10
 1203 0050 054B     		ldr	r3, .L85
 1204 0052 1B69     		ldr	r3, [r3, #16]
 1205 0054 044A     		ldr	r2, .L85
 1206              		.loc 1 849 15
 1207 0056 23F00103 		bic	r3, r3, #1
 1208 005a 1361     		str	r3, [r2, #16]
 1209              	.L83:
 850:./Lib/Src/stm32f4xx_flash.c ****   } 
 851:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 852:./Lib/Src/stm32f4xx_flash.c ****   return status;
 1210              		.loc 1 852 10
 1211 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 853:./Lib/Src/stm32f4xx_flash.c **** }
 1212              		.loc 1 853 1
 1213 005e 1846     		mov	r0, r3
 1214 0060 1037     		adds	r7, r7, #16
 1215              		.cfi_def_cfa_offset 8
 1216 0062 BD46     		mov	sp, r7
 1217              		.cfi_def_cfa_register 13
 1218              		@ sp needed
 1219 0064 80BD     		pop	{r7, pc}
 1220              	.L86:
 1221 0066 00BF     		.align	2
 1222              	.L85:
ARM GAS  /tmp/cc2eTGWX.s 			page 37


 1223 0068 003C0240 		.word	1073888256
 1224              		.cfi_endproc
 1225              	.LFE137:
 1227              		.section	.text.FLASH_ProgramByte,"ax",%progbits
 1228              		.align	1
 1229              		.global	FLASH_ProgramByte
 1230              		.syntax unified
 1231              		.thumb
 1232              		.thumb_func
 1234              	FLASH_ProgramByte:
 1235              	.LFB138:
 854:./Lib/Src/stm32f4xx_flash.c **** 
 855:./Lib/Src/stm32f4xx_flash.c **** /**
 856:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Programs a byte (8-bit) at a specified address.
 857:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used within all the device supply voltage ranges.  
 858:./Lib/Src/stm32f4xx_flash.c ****   *
 859:./Lib/Src/stm32f4xx_flash.c ****   * @note   If an erase and a program operations are requested simultaneously,    
 860:./Lib/Src/stm32f4xx_flash.c ****   *         the erase operation is performed before the program one.
 861:./Lib/Src/stm32f4xx_flash.c ****   * 
 862:./Lib/Src/stm32f4xx_flash.c ****   * @param  Address: specifies the address to be programmed.
 863:./Lib/Src/stm32f4xx_flash.c ****   *         This parameter can be any address in Program memory zone or in OTP zone.  
 864:./Lib/Src/stm32f4xx_flash.c ****   * @param  Data: specifies the data to be programmed.
 865:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
 866:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
 867:./Lib/Src/stm32f4xx_flash.c ****   */
 868:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
 869:./Lib/Src/stm32f4xx_flash.c **** {
 1236              		.loc 1 869 1
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 16
 1239              		@ frame_needed = 1, uses_anonymous_args = 0
 1240 0000 80B5     		push	{r7, lr}
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 7, -8
 1243              		.cfi_offset 14, -4
 1244 0002 84B0     		sub	sp, sp, #16
 1245              		.cfi_def_cfa_offset 24
 1246 0004 00AF     		add	r7, sp, #0
 1247              		.cfi_def_cfa_register 7
 1248 0006 7860     		str	r0, [r7, #4]
 1249 0008 0B46     		mov	r3, r1
 1250 000a FB70     		strb	r3, [r7, #3]
 870:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1251              		.loc 1 870 16
 1252 000c 0923     		movs	r3, #9
 1253 000e FB73     		strb	r3, [r7, #15]
 871:./Lib/Src/stm32f4xx_flash.c **** 
 872:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
 873:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 874:./Lib/Src/stm32f4xx_flash.c **** 
 875:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
 876:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1254              		.loc 1 876 12
 1255 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1256 0014 0346     		mov	r3, r0
 1257 0016 FB73     		strb	r3, [r7, #15]
 877:./Lib/Src/stm32f4xx_flash.c ****   
ARM GAS  /tmp/cc2eTGWX.s 			page 38


 878:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1258              		.loc 1 878 5
 1259 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1260 001a 092B     		cmp	r3, #9
 1261 001c 1CD1     		bne	.L88
 879:./Lib/Src/stm32f4xx_flash.c ****   {
 880:./Lib/Src/stm32f4xx_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 881:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= CR_PSIZE_MASK;
 1262              		.loc 1 881 10
 1263 001e 114B     		ldr	r3, .L90
 1264 0020 1B69     		ldr	r3, [r3, #16]
 1265 0022 104A     		ldr	r2, .L90
 1266              		.loc 1 881 15
 1267 0024 23F44073 		bic	r3, r3, #768
 1268 0028 1361     		str	r3, [r2, #16]
 882:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_PSIZE_BYTE;
 1269              		.loc 1 882 10
 1270 002a 0E4B     		ldr	r3, .L90
 1271 002c 0D4A     		ldr	r2, .L90
 1272 002e 1B69     		ldr	r3, [r3, #16]
 1273              		.loc 1 882 15
 1274 0030 1361     		str	r3, [r2, #16]
 883:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_CR_PG;
 1275              		.loc 1 883 10
 1276 0032 0C4B     		ldr	r3, .L90
 1277 0034 1B69     		ldr	r3, [r3, #16]
 1278 0036 0B4A     		ldr	r2, .L90
 1279              		.loc 1 883 15
 1280 0038 43F00103 		orr	r3, r3, #1
 1281 003c 1361     		str	r3, [r2, #16]
 884:./Lib/Src/stm32f4xx_flash.c ****   
 885:./Lib/Src/stm32f4xx_flash.c ****     *(__IO uint8_t*)Address = Data;
 1282              		.loc 1 885 6
 1283 003e 7B68     		ldr	r3, [r7, #4]
 1284              		.loc 1 885 29
 1285 0040 FA78     		ldrb	r2, [r7, #3]
 1286 0042 1A70     		strb	r2, [r3]
 886:./Lib/Src/stm32f4xx_flash.c ****         
 887:./Lib/Src/stm32f4xx_flash.c ****     /* Wait for last operation to be completed */
 888:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_WaitForLastOperation();
 1287              		.loc 1 888 14
 1288 0044 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1289 0048 0346     		mov	r3, r0
 1290 004a FB73     		strb	r3, [r7, #15]
 889:./Lib/Src/stm32f4xx_flash.c **** 
 890:./Lib/Src/stm32f4xx_flash.c ****     /* if the program operation is completed, disable the PG Bit */
 891:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= (~FLASH_CR_PG);
 1291              		.loc 1 891 10
 1292 004c 054B     		ldr	r3, .L90
 1293 004e 1B69     		ldr	r3, [r3, #16]
 1294 0050 044A     		ldr	r2, .L90
 1295              		.loc 1 891 15
 1296 0052 23F00103 		bic	r3, r3, #1
 1297 0056 1361     		str	r3, [r2, #16]
 1298              	.L88:
 892:./Lib/Src/stm32f4xx_flash.c ****   } 
 893:./Lib/Src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/cc2eTGWX.s 			page 39


 894:./Lib/Src/stm32f4xx_flash.c ****   /* Return the Program Status */
 895:./Lib/Src/stm32f4xx_flash.c ****   return status;
 1299              		.loc 1 895 10
 1300 0058 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 896:./Lib/Src/stm32f4xx_flash.c **** }
 1301              		.loc 1 896 1
 1302 005a 1846     		mov	r0, r3
 1303 005c 1037     		adds	r7, r7, #16
 1304              		.cfi_def_cfa_offset 8
 1305 005e BD46     		mov	sp, r7
 1306              		.cfi_def_cfa_register 13
 1307              		@ sp needed
 1308 0060 80BD     		pop	{r7, pc}
 1309              	.L91:
 1310 0062 00BF     		.align	2
 1311              	.L90:
 1312 0064 003C0240 		.word	1073888256
 1313              		.cfi_endproc
 1314              	.LFE138:
 1316              		.section	.text.FLASH_OB_Unlock,"ax",%progbits
 1317              		.align	1
 1318              		.global	FLASH_OB_Unlock
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1323              	FLASH_OB_Unlock:
 1324              	.LFB139:
 897:./Lib/Src/stm32f4xx_flash.c **** 
 898:./Lib/Src/stm32f4xx_flash.c **** /**
 899:./Lib/Src/stm32f4xx_flash.c ****   * @}
 900:./Lib/Src/stm32f4xx_flash.c ****   */
 901:./Lib/Src/stm32f4xx_flash.c **** 
 902:./Lib/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group3 Option Bytes Programming functions
 903:./Lib/Src/stm32f4xx_flash.c ****  *  @brief   Option Bytes Programming functions 
 904:./Lib/Src/stm32f4xx_flash.c ****  *
 905:./Lib/Src/stm32f4xx_flash.c **** @verbatim   
 906:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================
 907:./Lib/Src/stm32f4xx_flash.c ****                 ##### Option Bytes Programming functions #####
 908:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================  
 909:./Lib/Src/stm32f4xx_flash.c ****     [..]
 910:./Lib/Src/stm32f4xx_flash.c ****       This group includes the following functions:
 911:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Unlock(void)
 912:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_Lock(void)
 913:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
 914:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)  
 915:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PCROPSelect)
 916:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
 917:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState) 
 918:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_RDPConfig(uint8_t OB_RDP)
 919:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
 920:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BORConfig(uint8_t OB_BOR)
 921:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_ProgramOTP(uint32_t Address, uint32_t Data)
 922:./Lib/Src/stm32f4xx_flash.c ****       (+) FLASH_Status FLASH_OB_Launch(void)
 923:./Lib/Src/stm32f4xx_flash.c ****       (+) uint32_t FLASH_OB_GetUser(void)
 924:./Lib/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP(void)
 925:./Lib/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetWRP1(void)
 926:./Lib/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP(void)
ARM GAS  /tmp/cc2eTGWX.s 			page 40


 927:./Lib/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetPCROP1(void)
 928:./Lib/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetRDP(void)
 929:./Lib/Src/stm32f4xx_flash.c ****       (+) uint8_t FLASH_OB_GetBOR(void)
 930:./Lib/Src/stm32f4xx_flash.c ****     [..]  
 931:./Lib/Src/stm32f4xx_flash.c ****       The following function can be used only for STM32F42xxx/43xxx devices. 
 932:./Lib/Src/stm32f4xx_flash.c ****       (+) void FLASH_OB_BootConfig(uint8_t OB_BOOT)
 933:./Lib/Src/stm32f4xx_flash.c ****     [..]   
 934:./Lib/Src/stm32f4xx_flash.c ****      Any operation of erase or program should follow these steps:
 935:./Lib/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Unlock() function to enable the FLASH option control 
 936:./Lib/Src/stm32f4xx_flash.c ****           register access
 937:./Lib/Src/stm32f4xx_flash.c **** 
 938:./Lib/Src/stm32f4xx_flash.c ****       (#) Call one or several functions to program the desired Option Bytes:
 939:./Lib/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState) 
 940:./Lib/Src/stm32f4xx_flash.c ****              => to Enable/Disable the desired sector write protection
 941:./Lib/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_RDPConfig(uint8_t OB_RDP) => to set the desired read 
 942:./Lib/Src/stm32f4xx_flash.c ****              Protection Level
 943:./Lib/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY) 
 944:./Lib/Src/stm32f4xx_flash.c ****              => to configure the user Option Bytes.
 945:./Lib/Src/stm32f4xx_flash.c ****         (++) void FLASH_OB_BORConfig(uint8_t OB_BOR) => to set the BOR Level 			 
 946:./Lib/Src/stm32f4xx_flash.c **** 
 947:./Lib/Src/stm32f4xx_flash.c ****       (#) Once all needed Option Bytes to be programmed are correctly written, 
 948:./Lib/Src/stm32f4xx_flash.c ****           call the FLASH_OB_Launch() function to launch the Option Bytes 
 949:./Lib/Src/stm32f4xx_flash.c ****           programming process.
 950:./Lib/Src/stm32f4xx_flash.c ****      
 951:./Lib/Src/stm32f4xx_flash.c ****       -@- When changing the IWDG mode from HW to SW or from SW to HW, a system 
 952:./Lib/Src/stm32f4xx_flash.c ****           reset is needed to make the change effective.  
 953:./Lib/Src/stm32f4xx_flash.c **** 
 954:./Lib/Src/stm32f4xx_flash.c ****       (#) Call the FLASH_OB_Lock() function to disable the FLASH option control 
 955:./Lib/Src/stm32f4xx_flash.c ****           register access (recommended to protect the Option Bytes against 
 956:./Lib/Src/stm32f4xx_flash.c ****           possible unwanted operations)
 957:./Lib/Src/stm32f4xx_flash.c ****     
 958:./Lib/Src/stm32f4xx_flash.c **** @endverbatim
 959:./Lib/Src/stm32f4xx_flash.c ****   * @{
 960:./Lib/Src/stm32f4xx_flash.c ****   */
 961:./Lib/Src/stm32f4xx_flash.c **** 
 962:./Lib/Src/stm32f4xx_flash.c **** /**
 963:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Unlocks the FLASH Option Control Registers access.
 964:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
 965:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 966:./Lib/Src/stm32f4xx_flash.c ****   */
 967:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_Unlock(void)
 968:./Lib/Src/stm32f4xx_flash.c **** {
 1325              		.loc 1 968 1
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 0
 1328              		@ frame_needed = 1, uses_anonymous_args = 0
 1329              		@ link register save eliminated.
 1330 0000 80B4     		push	{r7}
 1331              		.cfi_def_cfa_offset 4
 1332              		.cfi_offset 7, -4
 1333 0002 00AF     		add	r7, sp, #0
 1334              		.cfi_def_cfa_register 7
 969:./Lib/Src/stm32f4xx_flash.c ****   if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 1335              		.loc 1 969 12
 1336 0004 084B     		ldr	r3, .L95
 1337 0006 5B69     		ldr	r3, [r3, #20]
 1338              		.loc 1 969 20
ARM GAS  /tmp/cc2eTGWX.s 			page 41


 1339 0008 03F00103 		and	r3, r3, #1
 1340              		.loc 1 969 5
 1341 000c 002B     		cmp	r3, #0
 1342 000e 05D0     		beq	.L94
 970:./Lib/Src/stm32f4xx_flash.c ****   {
 971:./Lib/Src/stm32f4xx_flash.c ****     /* Authorizes the Option Byte register programming */
 972:./Lib/Src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY1;
 1343              		.loc 1 972 10
 1344 0010 054B     		ldr	r3, .L95
 1345              		.loc 1 972 20
 1346 0012 064A     		ldr	r2, .L95+4
 1347 0014 9A60     		str	r2, [r3, #8]
 973:./Lib/Src/stm32f4xx_flash.c ****     FLASH->OPTKEYR = FLASH_OPT_KEY2;
 1348              		.loc 1 973 10
 1349 0016 044B     		ldr	r3, .L95
 1350              		.loc 1 973 20
 1351 0018 054A     		ldr	r2, .L95+8
 1352 001a 9A60     		str	r2, [r3, #8]
 1353              	.L94:
 974:./Lib/Src/stm32f4xx_flash.c ****   }  
 975:./Lib/Src/stm32f4xx_flash.c **** }
 1354              		.loc 1 975 1
 1355 001c 00BF     		nop
 1356 001e BD46     		mov	sp, r7
 1357              		.cfi_def_cfa_register 13
 1358              		@ sp needed
 1359 0020 5DF8047B 		ldr	r7, [sp], #4
 1360              		.cfi_restore 7
 1361              		.cfi_def_cfa_offset 0
 1362 0024 7047     		bx	lr
 1363              	.L96:
 1364 0026 00BF     		.align	2
 1365              	.L95:
 1366 0028 003C0240 		.word	1073888256
 1367 002c 3B2A1908 		.word	135866939
 1368 0030 7F6E5D4C 		.word	1281191551
 1369              		.cfi_endproc
 1370              	.LFE139:
 1372              		.section	.text.FLASH_OB_Lock,"ax",%progbits
 1373              		.align	1
 1374              		.global	FLASH_OB_Lock
 1375              		.syntax unified
 1376              		.thumb
 1377              		.thumb_func
 1379              	FLASH_OB_Lock:
 1380              	.LFB140:
 976:./Lib/Src/stm32f4xx_flash.c **** 
 977:./Lib/Src/stm32f4xx_flash.c **** /**
 978:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Locks the FLASH Option Control Registers access.
 979:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
 980:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
 981:./Lib/Src/stm32f4xx_flash.c ****   */
 982:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_Lock(void)
 983:./Lib/Src/stm32f4xx_flash.c **** {
 1381              		.loc 1 983 1
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc2eTGWX.s 			page 42


 1384              		@ frame_needed = 1, uses_anonymous_args = 0
 1385              		@ link register save eliminated.
 1386 0000 80B4     		push	{r7}
 1387              		.cfi_def_cfa_offset 4
 1388              		.cfi_offset 7, -4
 1389 0002 00AF     		add	r7, sp, #0
 1390              		.cfi_def_cfa_register 7
 984:./Lib/Src/stm32f4xx_flash.c ****   /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
 985:./Lib/Src/stm32f4xx_flash.c ****   FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 1391              		.loc 1 985 8
 1392 0004 054B     		ldr	r3, .L98
 1393 0006 5B69     		ldr	r3, [r3, #20]
 1394 0008 044A     		ldr	r2, .L98
 1395              		.loc 1 985 16
 1396 000a 43F00103 		orr	r3, r3, #1
 1397 000e 5361     		str	r3, [r2, #20]
 986:./Lib/Src/stm32f4xx_flash.c **** }
 1398              		.loc 1 986 1
 1399 0010 00BF     		nop
 1400 0012 BD46     		mov	sp, r7
 1401              		.cfi_def_cfa_register 13
 1402              		@ sp needed
 1403 0014 5DF8047B 		ldr	r7, [sp], #4
 1404              		.cfi_restore 7
 1405              		.cfi_def_cfa_offset 0
 1406 0018 7047     		bx	lr
 1407              	.L99:
 1408 001a 00BF     		.align	2
 1409              	.L98:
 1410 001c 003C0240 		.word	1073888256
 1411              		.cfi_endproc
 1412              	.LFE140:
 1414              		.section	.text.FLASH_OB_WRPConfig,"ax",%progbits
 1415              		.align	1
 1416              		.global	FLASH_OB_WRPConfig
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1421              	FLASH_OB_WRPConfig:
 1422              	.LFB141:
 987:./Lib/Src/stm32f4xx_flash.c **** 
 988:./Lib/Src/stm32f4xx_flash.c **** /**
 989:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the first
 990:./Lib/Src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
 991:./Lib/Src/stm32f4xx_flash.c ****   *
 992:./Lib/Src/stm32f4xx_flash.c ****   * @note   When the memory read protection level is selected (RDP level = 1), 
 993:./Lib/Src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
 994:./Lib/Src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
 995:./Lib/Src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).   
 996:./Lib/Src/stm32f4xx_flash.c ****   * 
 997:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
 998:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
 999:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector0 and OB_WRP_Sector11                     
1000:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All
1001:./Lib/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1002:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1003:./Lib/Src/stm32f4xx_flash.c ****   * @retval None  
ARM GAS  /tmp/cc2eTGWX.s 			page 43


1004:./Lib/Src/stm32f4xx_flash.c ****   */
1005:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
1006:./Lib/Src/stm32f4xx_flash.c **** { 
 1423              		.loc 1 1006 1
 1424              		.cfi_startproc
 1425              		@ args = 0, pretend = 0, frame = 16
 1426              		@ frame_needed = 1, uses_anonymous_args = 0
 1427 0000 80B5     		push	{r7, lr}
 1428              		.cfi_def_cfa_offset 8
 1429              		.cfi_offset 7, -8
 1430              		.cfi_offset 14, -4
 1431 0002 84B0     		sub	sp, sp, #16
 1432              		.cfi_def_cfa_offset 24
 1433 0004 00AF     		add	r7, sp, #0
 1434              		.cfi_def_cfa_register 7
 1435 0006 7860     		str	r0, [r7, #4]
 1436 0008 0B46     		mov	r3, r1
 1437 000a FB70     		strb	r3, [r7, #3]
1007:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1438              		.loc 1 1007 16
 1439 000c 0923     		movs	r3, #9
 1440 000e FB73     		strb	r3, [r7, #15]
1008:./Lib/Src/stm32f4xx_flash.c ****   
1009:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1010:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1011:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1012:./Lib/Src/stm32f4xx_flash.c ****     
1013:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1441              		.loc 1 1013 12
 1442 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1443 0014 0346     		mov	r3, r0
 1444 0016 FB73     		strb	r3, [r7, #15]
1014:./Lib/Src/stm32f4xx_flash.c **** 
1015:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1445              		.loc 1 1015 5
 1446 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1447 001a 092B     		cmp	r3, #9
 1448 001c 17D1     		bne	.L103
1016:./Lib/Src/stm32f4xx_flash.c ****   { 
1017:./Lib/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1449              		.loc 1 1017 7
 1450 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1451 0020 002B     		cmp	r3, #0
 1452 0022 0BD0     		beq	.L102
1018:./Lib/Src/stm32f4xx_flash.c ****     {
1019:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 1453              		.loc 1 1019 7
 1454 0024 0C4B     		ldr	r3, .L104
 1455 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1456 0028 9AB2     		uxth	r2, r3
 1457              		.loc 1 1019 44
 1458 002a 7B68     		ldr	r3, [r7, #4]
 1459 002c 9BB2     		uxth	r3, r3
 1460 002e DB43     		mvns	r3, r3
 1461 0030 9BB2     		uxth	r3, r3
 1462              		.loc 1 1019 7
 1463 0032 0949     		ldr	r1, .L104
ARM GAS  /tmp/cc2eTGWX.s 			page 44


 1464              		.loc 1 1019 44
 1465 0034 1340     		ands	r3, r3, r2
 1466 0036 9BB2     		uxth	r3, r3
 1467 0038 0B80     		strh	r3, [r1]	@ movhi
1020:./Lib/Src/stm32f4xx_flash.c ****     }
1021:./Lib/Src/stm32f4xx_flash.c ****     else
1022:./Lib/Src/stm32f4xx_flash.c ****     {
1023:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1024:./Lib/Src/stm32f4xx_flash.c ****     }
1025:./Lib/Src/stm32f4xx_flash.c ****   }
1026:./Lib/Src/stm32f4xx_flash.c **** }
 1468              		.loc 1 1026 1
 1469 003a 08E0     		b	.L103
 1470              	.L102:
1023:./Lib/Src/stm32f4xx_flash.c ****     }
 1471              		.loc 1 1023 7
 1472 003c 064B     		ldr	r3, .L104
 1473 003e 1B88     		ldrh	r3, [r3]	@ movhi
 1474 0040 9AB2     		uxth	r2, r3
1023:./Lib/Src/stm32f4xx_flash.c ****     }
 1475              		.loc 1 1023 47
 1476 0042 7B68     		ldr	r3, [r7, #4]
 1477 0044 9BB2     		uxth	r3, r3
1023:./Lib/Src/stm32f4xx_flash.c ****     }
 1478              		.loc 1 1023 7
 1479 0046 0449     		ldr	r1, .L104
1023:./Lib/Src/stm32f4xx_flash.c ****     }
 1480              		.loc 1 1023 44
 1481 0048 1343     		orrs	r3, r3, r2
 1482 004a 9BB2     		uxth	r3, r3
 1483 004c 0B80     		strh	r3, [r1]	@ movhi
 1484              	.L103:
 1485              		.loc 1 1026 1
 1486 004e 00BF     		nop
 1487 0050 1037     		adds	r7, r7, #16
 1488              		.cfi_def_cfa_offset 8
 1489 0052 BD46     		mov	sp, r7
 1490              		.cfi_def_cfa_register 13
 1491              		@ sp needed
 1492 0054 80BD     		pop	{r7, pc}
 1493              	.L105:
 1494 0056 00BF     		.align	2
 1495              	.L104:
 1496 0058 163C0240 		.word	1073888278
 1497              		.cfi_endproc
 1498              	.LFE141:
 1500              		.section	.text.FLASH_OB_WRP1Config,"ax",%progbits
 1501              		.align	1
 1502              		.global	FLASH_OB_WRP1Config
 1503              		.syntax unified
 1504              		.thumb
 1505              		.thumb_func
 1507              	FLASH_OB_WRP1Config:
 1508              	.LFB142:
1027:./Lib/Src/stm32f4xx_flash.c **** 
1028:./Lib/Src/stm32f4xx_flash.c **** /**
1029:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the write protection of the desired sectors, for the second
ARM GAS  /tmp/cc2eTGWX.s 			page 45


1030:./Lib/Src/stm32f4xx_flash.c ****   *         1 Mb of the Flash  
1031:./Lib/Src/stm32f4xx_flash.c ****   *           
1032:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1033:./Lib/Src/stm32f4xx_flash.c ****   *   
1034:./Lib/Src/stm32f4xx_flash.c ****   * @note   When the memory read out protection is selected (RDP level = 1), 
1035:./Lib/Src/stm32f4xx_flash.c ****   *         it is not possible to program or erase the flash sector i if CortexM4  
1036:./Lib/Src/stm32f4xx_flash.c ****   *         debug features are connected or boot code is executed in RAM, even if nWRPi = 1 
1037:./Lib/Src/stm32f4xx_flash.c ****   * @note   Active value of nWRPi bits is inverted when PCROP mode is active (SPRMOD =1).      
1038:./Lib/Src/stm32f4xx_flash.c ****   * 
1039:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_WRP: specifies the sector(s) to be write protected or unprotected.
1040:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1041:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP: A value between OB_WRP_Sector12 and OB_WRP_Sector23
1042:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_WRP_Sector_All                        
1043:./Lib/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1044:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1045:./Lib/Src/stm32f4xx_flash.c ****   * @retval None  
1046:./Lib/Src/stm32f4xx_flash.c ****   */
1047:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
1048:./Lib/Src/stm32f4xx_flash.c **** { 
 1509              		.loc 1 1048 1
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 16
 1512              		@ frame_needed = 1, uses_anonymous_args = 0
 1513 0000 80B5     		push	{r7, lr}
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 7, -8
 1516              		.cfi_offset 14, -4
 1517 0002 84B0     		sub	sp, sp, #16
 1518              		.cfi_def_cfa_offset 24
 1519 0004 00AF     		add	r7, sp, #0
 1520              		.cfi_def_cfa_register 7
 1521 0006 7860     		str	r0, [r7, #4]
 1522 0008 0B46     		mov	r3, r1
 1523 000a FB70     		strb	r3, [r7, #3]
1049:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1524              		.loc 1 1049 16
 1525 000c 0923     		movs	r3, #9
 1526 000e FB73     		strb	r3, [r7, #15]
1050:./Lib/Src/stm32f4xx_flash.c ****   
1051:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1052:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_WRP(OB_WRP));
1053:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1054:./Lib/Src/stm32f4xx_flash.c ****     
1055:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1527              		.loc 1 1055 12
 1528 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1529 0014 0346     		mov	r3, r0
 1530 0016 FB73     		strb	r3, [r7, #15]
1056:./Lib/Src/stm32f4xx_flash.c **** 
1057:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1531              		.loc 1 1057 5
 1532 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1533 001a 092B     		cmp	r3, #9
 1534 001c 17D1     		bne	.L109
1058:./Lib/Src/stm32f4xx_flash.c ****   { 
1059:./Lib/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1535              		.loc 1 1059 7
ARM GAS  /tmp/cc2eTGWX.s 			page 46


 1536 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1537 0020 002B     		cmp	r3, #0
 1538 0022 0BD0     		beq	.L108
1060:./Lib/Src/stm32f4xx_flash.c ****     {
1061:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 1539              		.loc 1 1061 7
 1540 0024 0C4B     		ldr	r3, .L110
 1541 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1542 0028 9AB2     		uxth	r2, r3
 1543              		.loc 1 1061 45
 1544 002a 7B68     		ldr	r3, [r7, #4]
 1545 002c 9BB2     		uxth	r3, r3
 1546 002e DB43     		mvns	r3, r3
 1547 0030 9BB2     		uxth	r3, r3
 1548              		.loc 1 1061 7
 1549 0032 0949     		ldr	r1, .L110
 1550              		.loc 1 1061 45
 1551 0034 1340     		ands	r3, r3, r2
 1552 0036 9BB2     		uxth	r3, r3
 1553 0038 0B80     		strh	r3, [r1]	@ movhi
1062:./Lib/Src/stm32f4xx_flash.c ****     }
1063:./Lib/Src/stm32f4xx_flash.c ****     else
1064:./Lib/Src/stm32f4xx_flash.c ****     {
1065:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
1066:./Lib/Src/stm32f4xx_flash.c ****     }
1067:./Lib/Src/stm32f4xx_flash.c ****   }
1068:./Lib/Src/stm32f4xx_flash.c **** }
 1554              		.loc 1 1068 1
 1555 003a 08E0     		b	.L109
 1556              	.L108:
1065:./Lib/Src/stm32f4xx_flash.c ****     }
 1557              		.loc 1 1065 7
 1558 003c 064B     		ldr	r3, .L110
 1559 003e 1B88     		ldrh	r3, [r3]	@ movhi
 1560 0040 9AB2     		uxth	r2, r3
1065:./Lib/Src/stm32f4xx_flash.c ****     }
 1561              		.loc 1 1065 48
 1562 0042 7B68     		ldr	r3, [r7, #4]
 1563 0044 9BB2     		uxth	r3, r3
1065:./Lib/Src/stm32f4xx_flash.c ****     }
 1564              		.loc 1 1065 7
 1565 0046 0449     		ldr	r1, .L110
1065:./Lib/Src/stm32f4xx_flash.c ****     }
 1566              		.loc 1 1065 45
 1567 0048 1343     		orrs	r3, r3, r2
 1568 004a 9BB2     		uxth	r3, r3
 1569 004c 0B80     		strh	r3, [r1]	@ movhi
 1570              	.L109:
 1571              		.loc 1 1068 1
 1572 004e 00BF     		nop
 1573 0050 1037     		adds	r7, r7, #16
 1574              		.cfi_def_cfa_offset 8
 1575 0052 BD46     		mov	sp, r7
 1576              		.cfi_def_cfa_register 13
 1577              		@ sp needed
 1578 0054 80BD     		pop	{r7, pc}
 1579              	.L111:
ARM GAS  /tmp/cc2eTGWX.s 			page 47


 1580 0056 00BF     		.align	2
 1581              	.L110:
 1582 0058 1A3C0240 		.word	1073888282
 1583              		.cfi_endproc
 1584              	.LFE142:
 1586              		.section	.text.FLASH_OB_PCROPSelectionConfig,"ax",%progbits
 1587              		.align	1
 1588              		.global	FLASH_OB_PCROPSelectionConfig
 1589              		.syntax unified
 1590              		.thumb
 1591              		.thumb_func
 1593              	FLASH_OB_PCROPSelectionConfig:
 1594              	.LFB143:
1069:./Lib/Src/stm32f4xx_flash.c **** 
1070:./Lib/Src/stm32f4xx_flash.c **** /**
1071:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Select the Protection Mode (SPRMOD). 
1072:./Lib/Src/stm32f4xx_flash.c ****   * 
1073:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx/411xE devices.    
1074:./Lib/Src/stm32f4xx_flash.c ****   * 
1075:./Lib/Src/stm32f4xx_flash.c ****   * @note   After PCROP activation, Option Byte modification is not possible. 
1076:./Lib/Src/stm32f4xx_flash.c ****   *         Exception made for the global Read Out Protection modification level (level1 to level0)
1077:./Lib/Src/stm32f4xx_flash.c ****   * @note   Once SPRMOD bit is active unprotection of a protected sector is not possible 
1078:./Lib/Src/stm32f4xx_flash.c ****   *   
1079:./Lib/Src/stm32f4xx_flash.c ****   * @note   Read a protected sector will set RDERR Flag and write a protected sector will set WRPER
1080:./Lib/Src/stm32f4xx_flash.c ****   *   
1081:./Lib/Src/stm32f4xx_flash.c ****   * @note   Some Precautions should be taken when activating the PCROP feature :
1082:./Lib/Src/stm32f4xx_flash.c ****   *         The active value of nWRPi bits is inverted when PCROP mode is active, this means if SPR
1083:./Lib/Src/stm32f4xx_flash.c ****   *         and WRPi = 1 (default value), then the user sector i is read/write protected.
1084:./Lib/Src/stm32f4xx_flash.c ****   *         In order to avoid activation of PCROP Mode for undesired sectors, please follow the
1085:./Lib/Src/stm32f4xx_flash.c ****   *         below safety sequence :       
1086:./Lib/Src/stm32f4xx_flash.c ****   *         - Disable PCROP for all Sectors using FLASH_OB_PCROPConfig(OB_PCROP_Sector_All, DISABLE
1087:./Lib/Src/stm32f4xx_flash.c ****   *           for Bank1 or FLASH_OB_PCROP1Config(OB_PCROP_Sector_All, DISABLE) function for Bank2  
1088:./Lib/Src/stm32f4xx_flash.c ****   *         - Enable PCROP for the desired Sector i using FLASH_OB_PCROPConfig(Sector i, ENABLE) fu
1089:./Lib/Src/stm32f4xx_flash.c ****   *         - Activate the PCROP Mode FLASH_OB_PCROPSelectionConfig() function. 
1090:./Lib/Src/stm32f4xx_flash.c ****   * 
1091:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP:  Select the Protection Mode of nWPRi bits 
1092:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1093:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Disable: nWRPi control the write protection of respective user sectors
1094:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_PcROP_Enable: nWRPi control the  read&write protection (PCROP) of respective
1095:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
1096:./Lib/Src/stm32f4xx_flash.c ****   */
1097:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
1098:./Lib/Src/stm32f4xx_flash.c **** {  
 1595              		.loc 1 1098 1
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 16
 1598              		@ frame_needed = 1, uses_anonymous_args = 0
 1599              		@ link register save eliminated.
 1600 0000 80B4     		push	{r7}
 1601              		.cfi_def_cfa_offset 4
 1602              		.cfi_offset 7, -4
 1603 0002 85B0     		sub	sp, sp, #20
 1604              		.cfi_def_cfa_offset 24
 1605 0004 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 1607 0006 0346     		mov	r3, r0
 1608 0008 FB71     		strb	r3, [r7, #7]
ARM GAS  /tmp/cc2eTGWX.s 			page 48


1099:./Lib/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1609              		.loc 1 1099 11
 1610 000a FF23     		movs	r3, #255
 1611 000c FB73     		strb	r3, [r7, #15]
1100:./Lib/Src/stm32f4xx_flash.c ****       
1101:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1102:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
1103:./Lib/Src/stm32f4xx_flash.c ****   
1104:./Lib/Src/stm32f4xx_flash.c ****   /* Mask SPRMOD bit */
1105:./Lib/Src/stm32f4xx_flash.c ****   optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
 1612              		.loc 1 1105 65
 1613 000e 094B     		ldr	r3, .L113
 1614 0010 1B78     		ldrb	r3, [r3]
 1615 0012 DBB2     		uxtb	r3, r3
 1616              		.loc 1 1105 13
 1617 0014 03F07F03 		and	r3, r3, #127
 1618 0018 FB73     		strb	r3, [r7, #15]
1106:./Lib/Src/stm32f4xx_flash.c ****   /* Update Option Byte */
1107:./Lib/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
 1619              		.loc 1 1107 3
 1620 001a 0649     		ldr	r1, .L113
 1621              		.loc 1 1107 42
 1622 001c FA79     		ldrb	r2, [r7, #7]
 1623 001e FB7B     		ldrb	r3, [r7, #15]
 1624 0020 1343     		orrs	r3, r3, r2
 1625 0022 DBB2     		uxtb	r3, r3
 1626              		.loc 1 1107 40
 1627 0024 0B70     		strb	r3, [r1]
1108:./Lib/Src/stm32f4xx_flash.c ****     
1109:./Lib/Src/stm32f4xx_flash.c **** }
 1628              		.loc 1 1109 1
 1629 0026 00BF     		nop
 1630 0028 1437     		adds	r7, r7, #20
 1631              		.cfi_def_cfa_offset 4
 1632 002a BD46     		mov	sp, r7
 1633              		.cfi_def_cfa_register 13
 1634              		@ sp needed
 1635 002c 5DF8047B 		ldr	r7, [sp], #4
 1636              		.cfi_restore 7
 1637              		.cfi_def_cfa_offset 0
 1638 0030 7047     		bx	lr
 1639              	.L114:
 1640 0032 00BF     		.align	2
 1641              	.L113:
 1642 0034 173C0240 		.word	1073888279
 1643              		.cfi_endproc
 1644              	.LFE143:
 1646              		.section	.text.FLASH_OB_PCROPConfig,"ax",%progbits
 1647              		.align	1
 1648              		.global	FLASH_OB_PCROPConfig
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1653              	FLASH_OB_PCROPConfig:
 1654              	.LFB144:
1110:./Lib/Src/stm32f4xx_flash.c **** 
1111:./Lib/Src/stm32f4xx_flash.c **** /**
ARM GAS  /tmp/cc2eTGWX.s 			page 49


1112:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the read/write protection (PCROP) of the desired 
1113:./Lib/Src/stm32f4xx_flash.c ****   *         sectors, for the first 1 MB of the Flash.
1114:./Lib/Src/stm32f4xx_flash.c ****   *           
1115:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx , STM32F401xx/411xE 
1116:./Lib/Src/stm32f4xx_flash.c ****   *         STM32F412xG and STM32F413_423xx devices.
1117:./Lib/Src/stm32f4xx_flash.c ****   *   
1118:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1119:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1120:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector11 for 
1121:./Lib/Src/stm32f4xx_flash.c ****   *                           STM32F42xxx/43xxx devices and between OB_PCROP_Sector0 and 
1122:./Lib/Src/stm32f4xx_flash.c ****   *                           OB_PCROP_Sector5 for STM32F401xx/411xE devices.
1123:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1124:./Lib/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1125:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1126:./Lib/Src/stm32f4xx_flash.c ****   * @retval None  
1127:./Lib/Src/stm32f4xx_flash.c ****   */
1128:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
1129:./Lib/Src/stm32f4xx_flash.c **** { 
 1655              		.loc 1 1129 1
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 16
 1658              		@ frame_needed = 1, uses_anonymous_args = 0
 1659 0000 80B5     		push	{r7, lr}
 1660              		.cfi_def_cfa_offset 8
 1661              		.cfi_offset 7, -8
 1662              		.cfi_offset 14, -4
 1663 0002 84B0     		sub	sp, sp, #16
 1664              		.cfi_def_cfa_offset 24
 1665 0004 00AF     		add	r7, sp, #0
 1666              		.cfi_def_cfa_register 7
 1667 0006 7860     		str	r0, [r7, #4]
 1668 0008 0B46     		mov	r3, r1
 1669 000a FB70     		strb	r3, [r7, #3]
1130:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1670              		.loc 1 1130 16
 1671 000c 0923     		movs	r3, #9
 1672 000e FB73     		strb	r3, [r7, #15]
1131:./Lib/Src/stm32f4xx_flash.c ****   
1132:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1133:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1134:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1135:./Lib/Src/stm32f4xx_flash.c ****     
1136:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1673              		.loc 1 1136 12
 1674 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1675 0014 0346     		mov	r3, r0
 1676 0016 FB73     		strb	r3, [r7, #15]
1137:./Lib/Src/stm32f4xx_flash.c **** 
1138:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1677              		.loc 1 1138 5
 1678 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1679 001a 092B     		cmp	r3, #9
 1680 001c 17D1     		bne	.L118
1139:./Lib/Src/stm32f4xx_flash.c ****   { 
1140:./Lib/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1681              		.loc 1 1140 7
 1682 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/cc2eTGWX.s 			page 50


 1683 0020 002B     		cmp	r3, #0
 1684 0022 09D0     		beq	.L117
1141:./Lib/Src/stm32f4xx_flash.c ****     {
1142:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
 1685              		.loc 1 1142 7
 1686 0024 0C4B     		ldr	r3, .L119
 1687 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1688 0028 9AB2     		uxth	r2, r3
 1689              		.loc 1 1142 47
 1690 002a 7B68     		ldr	r3, [r7, #4]
 1691 002c 9BB2     		uxth	r3, r3
 1692              		.loc 1 1142 7
 1693 002e 0A49     		ldr	r1, .L119
 1694              		.loc 1 1142 44
 1695 0030 1343     		orrs	r3, r3, r2
 1696 0032 9BB2     		uxth	r3, r3
 1697 0034 0B80     		strh	r3, [r1]	@ movhi
1143:./Lib/Src/stm32f4xx_flash.c ****     }
1144:./Lib/Src/stm32f4xx_flash.c ****     else
1145:./Lib/Src/stm32f4xx_flash.c ****     {
1146:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
1147:./Lib/Src/stm32f4xx_flash.c ****     }
1148:./Lib/Src/stm32f4xx_flash.c ****   }
1149:./Lib/Src/stm32f4xx_flash.c **** }
 1698              		.loc 1 1149 1
 1699 0036 0AE0     		b	.L118
 1700              	.L117:
1146:./Lib/Src/stm32f4xx_flash.c ****     }
 1701              		.loc 1 1146 7
 1702 0038 074B     		ldr	r3, .L119
 1703 003a 1B88     		ldrh	r3, [r3]	@ movhi
 1704 003c 9AB2     		uxth	r2, r3
1146:./Lib/Src/stm32f4xx_flash.c ****     }
 1705              		.loc 1 1146 44
 1706 003e 7B68     		ldr	r3, [r7, #4]
 1707 0040 9BB2     		uxth	r3, r3
 1708 0042 DB43     		mvns	r3, r3
 1709 0044 9BB2     		uxth	r3, r3
1146:./Lib/Src/stm32f4xx_flash.c ****     }
 1710              		.loc 1 1146 7
 1711 0046 0449     		ldr	r1, .L119
1146:./Lib/Src/stm32f4xx_flash.c ****     }
 1712              		.loc 1 1146 44
 1713 0048 1340     		ands	r3, r3, r2
 1714 004a 9BB2     		uxth	r3, r3
 1715 004c 0B80     		strh	r3, [r1]	@ movhi
 1716              	.L118:
 1717              		.loc 1 1149 1
 1718 004e 00BF     		nop
 1719 0050 1037     		adds	r7, r7, #16
 1720              		.cfi_def_cfa_offset 8
 1721 0052 BD46     		mov	sp, r7
 1722              		.cfi_def_cfa_register 13
 1723              		@ sp needed
 1724 0054 80BD     		pop	{r7, pc}
 1725              	.L120:
 1726 0056 00BF     		.align	2
ARM GAS  /tmp/cc2eTGWX.s 			page 51


 1727              	.L119:
 1728 0058 163C0240 		.word	1073888278
 1729              		.cfi_endproc
 1730              	.LFE144:
 1732              		.section	.text.FLASH_OB_PCROP1Config,"ax",%progbits
 1733              		.align	1
 1734              		.global	FLASH_OB_PCROP1Config
 1735              		.syntax unified
 1736              		.thumb
 1737              		.thumb_func
 1739              	FLASH_OB_PCROP1Config:
 1740              	.LFB145:
1150:./Lib/Src/stm32f4xx_flash.c **** 
1151:./Lib/Src/stm32f4xx_flash.c **** /**
1152:./Lib/Src/stm32f4xx_flash.c ****    * @brief Enables or disables the read/write protection (PCROP) of the desired 
1153:./Lib/Src/stm32f4xx_flash.c ****   *         sectors
1154:./Lib/Src/stm32f4xx_flash.c ****   *           
1155:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1156:./Lib/Src/stm32f4xx_flash.c ****   *   
1157:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_PCROP: specifies the sector(s) to be read/write protected or unprotected.
1158:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1159:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP: A value between OB_PCROP_Sector12 and OB_PCROP_Sector23 
1160:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_PCROP_Sector_All
1161:./Lib/Src/stm32f4xx_flash.c ****   * @param  Newstate: new state of the Write Protection.
1162:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be: ENABLE or DISABLE.
1163:./Lib/Src/stm32f4xx_flash.c ****   * @retval None  
1164:./Lib/Src/stm32f4xx_flash.c ****   */
1165:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
1166:./Lib/Src/stm32f4xx_flash.c **** { 
 1741              		.loc 1 1166 1
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 16
 1744              		@ frame_needed = 1, uses_anonymous_args = 0
 1745 0000 80B5     		push	{r7, lr}
 1746              		.cfi_def_cfa_offset 8
 1747              		.cfi_offset 7, -8
 1748              		.cfi_offset 14, -4
 1749 0002 84B0     		sub	sp, sp, #16
 1750              		.cfi_def_cfa_offset 24
 1751 0004 00AF     		add	r7, sp, #0
 1752              		.cfi_def_cfa_register 7
 1753 0006 7860     		str	r0, [r7, #4]
 1754 0008 0B46     		mov	r3, r1
 1755 000a FB70     		strb	r3, [r7, #3]
1167:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1756              		.loc 1 1167 16
 1757 000c 0923     		movs	r3, #9
 1758 000e FB73     		strb	r3, [r7, #15]
1168:./Lib/Src/stm32f4xx_flash.c ****   
1169:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1170:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_PCROP(OB_PCROP));
1171:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1172:./Lib/Src/stm32f4xx_flash.c ****     
1173:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1759              		.loc 1 1173 12
 1760 0010 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1761 0014 0346     		mov	r3, r0
ARM GAS  /tmp/cc2eTGWX.s 			page 52


 1762 0016 FB73     		strb	r3, [r7, #15]
1174:./Lib/Src/stm32f4xx_flash.c **** 
1175:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1763              		.loc 1 1175 5
 1764 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1765 001a 092B     		cmp	r3, #9
 1766 001c 17D1     		bne	.L124
1176:./Lib/Src/stm32f4xx_flash.c ****   { 
1177:./Lib/Src/stm32f4xx_flash.c ****     if(NewState != DISABLE)
 1767              		.loc 1 1177 7
 1768 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1769 0020 002B     		cmp	r3, #0
 1770 0022 09D0     		beq	.L123
1178:./Lib/Src/stm32f4xx_flash.c ****     {
1179:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
 1771              		.loc 1 1179 7
 1772 0024 0C4B     		ldr	r3, .L125
 1773 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1774 0028 9AB2     		uxth	r2, r3
 1775              		.loc 1 1179 48
 1776 002a 7B68     		ldr	r3, [r7, #4]
 1777 002c 9BB2     		uxth	r3, r3
 1778              		.loc 1 1179 7
 1779 002e 0A49     		ldr	r1, .L125
 1780              		.loc 1 1179 45
 1781 0030 1343     		orrs	r3, r3, r2
 1782 0032 9BB2     		uxth	r3, r3
 1783 0034 0B80     		strh	r3, [r1]	@ movhi
1180:./Lib/Src/stm32f4xx_flash.c ****     }
1181:./Lib/Src/stm32f4xx_flash.c ****     else
1182:./Lib/Src/stm32f4xx_flash.c ****     {
1183:./Lib/Src/stm32f4xx_flash.c ****       *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
1184:./Lib/Src/stm32f4xx_flash.c ****     }
1185:./Lib/Src/stm32f4xx_flash.c ****   }
1186:./Lib/Src/stm32f4xx_flash.c **** }
 1784              		.loc 1 1186 1
 1785 0036 0AE0     		b	.L124
 1786              	.L123:
1183:./Lib/Src/stm32f4xx_flash.c ****     }
 1787              		.loc 1 1183 7
 1788 0038 074B     		ldr	r3, .L125
 1789 003a 1B88     		ldrh	r3, [r3]	@ movhi
 1790 003c 9AB2     		uxth	r2, r3
1183:./Lib/Src/stm32f4xx_flash.c ****     }
 1791              		.loc 1 1183 45
 1792 003e 7B68     		ldr	r3, [r7, #4]
 1793 0040 9BB2     		uxth	r3, r3
 1794 0042 DB43     		mvns	r3, r3
 1795 0044 9BB2     		uxth	r3, r3
1183:./Lib/Src/stm32f4xx_flash.c ****     }
 1796              		.loc 1 1183 7
 1797 0046 0449     		ldr	r1, .L125
1183:./Lib/Src/stm32f4xx_flash.c ****     }
 1798              		.loc 1 1183 45
 1799 0048 1340     		ands	r3, r3, r2
 1800 004a 9BB2     		uxth	r3, r3
 1801 004c 0B80     		strh	r3, [r1]	@ movhi
ARM GAS  /tmp/cc2eTGWX.s 			page 53


 1802              	.L124:
 1803              		.loc 1 1186 1
 1804 004e 00BF     		nop
 1805 0050 1037     		adds	r7, r7, #16
 1806              		.cfi_def_cfa_offset 8
 1807 0052 BD46     		mov	sp, r7
 1808              		.cfi_def_cfa_register 13
 1809              		@ sp needed
 1810 0054 80BD     		pop	{r7, pc}
 1811              	.L126:
 1812 0056 00BF     		.align	2
 1813              	.L125:
 1814 0058 1A3C0240 		.word	1073888282
 1815              		.cfi_endproc
 1816              	.LFE145:
 1818              		.section	.text.FLASH_OB_RDPConfig,"ax",%progbits
 1819              		.align	1
 1820              		.global	FLASH_OB_RDPConfig
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1825              	FLASH_OB_RDPConfig:
 1826              	.LFB146:
1187:./Lib/Src/stm32f4xx_flash.c **** 
1188:./Lib/Src/stm32f4xx_flash.c **** 
1189:./Lib/Src/stm32f4xx_flash.c **** /**
1190:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Sets the read protection level.
1191:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_RDP: specifies the read protection level.
1192:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1193:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_0: No protection
1194:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_1: Read protection of the memory
1195:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_RDP_Level_2: Full chip protection
1196:./Lib/Src/stm32f4xx_flash.c ****   *   
1197:./Lib/Src/stm32f4xx_flash.c ****   * /!\ Warning /!\ When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
1198:./Lib/Src/stm32f4xx_flash.c ****   *    
1199:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
1200:./Lib/Src/stm32f4xx_flash.c ****   */
1201:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_RDPConfig(uint8_t OB_RDP)
1202:./Lib/Src/stm32f4xx_flash.c **** {
 1827              		.loc 1 1202 1
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 16
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831 0000 80B5     		push	{r7, lr}
 1832              		.cfi_def_cfa_offset 8
 1833              		.cfi_offset 7, -8
 1834              		.cfi_offset 14, -4
 1835 0002 84B0     		sub	sp, sp, #16
 1836              		.cfi_def_cfa_offset 24
 1837 0004 00AF     		add	r7, sp, #0
 1838              		.cfi_def_cfa_register 7
 1839 0006 0346     		mov	r3, r0
 1840 0008 FB71     		strb	r3, [r7, #7]
1203:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1841              		.loc 1 1203 16
 1842 000a 0923     		movs	r3, #9
 1843 000c FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/cc2eTGWX.s 			page 54


1204:./Lib/Src/stm32f4xx_flash.c **** 
1205:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1206:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_RDP(OB_RDP));
1207:./Lib/Src/stm32f4xx_flash.c **** 
1208:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1844              		.loc 1 1208 12
 1845 000e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1846 0012 0346     		mov	r3, r0
 1847 0014 FB73     		strb	r3, [r7, #15]
1209:./Lib/Src/stm32f4xx_flash.c **** 
1210:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1848              		.loc 1 1210 5
 1849 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1850 0018 092B     		cmp	r3, #9
 1851 001a 02D1     		bne	.L129
1211:./Lib/Src/stm32f4xx_flash.c ****   {
1212:./Lib/Src/stm32f4xx_flash.c ****     *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 1852              		.loc 1 1212 5
 1853 001c 034A     		ldr	r2, .L130
 1854              		.loc 1 1212 41
 1855 001e FB79     		ldrb	r3, [r7, #7]
 1856 0020 1370     		strb	r3, [r2]
 1857              	.L129:
1213:./Lib/Src/stm32f4xx_flash.c **** 
1214:./Lib/Src/stm32f4xx_flash.c ****   }
1215:./Lib/Src/stm32f4xx_flash.c **** }
 1858              		.loc 1 1215 1
 1859 0022 00BF     		nop
 1860 0024 1037     		adds	r7, r7, #16
 1861              		.cfi_def_cfa_offset 8
 1862 0026 BD46     		mov	sp, r7
 1863              		.cfi_def_cfa_register 13
 1864              		@ sp needed
 1865 0028 80BD     		pop	{r7, pc}
 1866              	.L131:
 1867 002a 00BF     		.align	2
 1868              	.L130:
 1869 002c 153C0240 		.word	1073888277
 1870              		.cfi_endproc
 1871              	.LFE146:
 1873              		.section	.text.FLASH_OB_UserConfig,"ax",%progbits
 1874              		.align	1
 1875              		.global	FLASH_OB_UserConfig
 1876              		.syntax unified
 1877              		.thumb
 1878              		.thumb_func
 1880              	FLASH_OB_UserConfig:
 1881              	.LFB147:
1216:./Lib/Src/stm32f4xx_flash.c **** 
1217:./Lib/Src/stm32f4xx_flash.c **** /**
1218:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.    
1219:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1220:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1221:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_SW: Software IWDG selected
1222:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_IWDG_HW: Hardware IWDG selected
1223:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1224:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
ARM GAS  /tmp/cc2eTGWX.s 			page 55


1225:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_STOP_NoRST: No reset generated when entering in STOP
1226:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_STOP_RST: Reset generated when entering in STOP
1227:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1228:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter  can be one of the following values:
1229:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1230:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1231:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
1232:./Lib/Src/stm32f4xx_flash.c ****   */
1233:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
1234:./Lib/Src/stm32f4xx_flash.c **** {
 1882              		.loc 1 1234 1
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 16
 1885              		@ frame_needed = 1, uses_anonymous_args = 0
 1886 0000 80B5     		push	{r7, lr}
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 7, -8
 1889              		.cfi_offset 14, -4
 1890 0002 84B0     		sub	sp, sp, #16
 1891              		.cfi_def_cfa_offset 24
 1892 0004 00AF     		add	r7, sp, #0
 1893              		.cfi_def_cfa_register 7
 1894 0006 0346     		mov	r3, r0
 1895 0008 FB71     		strb	r3, [r7, #7]
 1896 000a 0B46     		mov	r3, r1
 1897 000c BB71     		strb	r3, [r7, #6]
 1898 000e 1346     		mov	r3, r2
 1899 0010 7B71     		strb	r3, [r7, #5]
1235:./Lib/Src/stm32f4xx_flash.c ****   uint8_t optiontmp = 0xFF;
 1900              		.loc 1 1235 11
 1901 0012 FF23     		movs	r3, #255
 1902 0014 FB73     		strb	r3, [r7, #15]
1236:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1903              		.loc 1 1236 16
 1904 0016 0923     		movs	r3, #9
 1905 0018 BB73     		strb	r3, [r7, #14]
1237:./Lib/Src/stm32f4xx_flash.c **** 
1238:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1239:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1240:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1241:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1242:./Lib/Src/stm32f4xx_flash.c **** 
1243:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1244:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 1906              		.loc 1 1244 12
 1907 001a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1908 001e 0346     		mov	r3, r0
 1909 0020 BB73     		strb	r3, [r7, #14]
1245:./Lib/Src/stm32f4xx_flash.c ****   
1246:./Lib/Src/stm32f4xx_flash.c ****   if(status == FLASH_COMPLETE)
 1910              		.loc 1 1246 5
 1911 0022 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1912 0024 092B     		cmp	r3, #9
 1913 0026 11D1     		bne	.L134
1247:./Lib/Src/stm32f4xx_flash.c ****   { 
1248:./Lib/Src/stm32f4xx_flash.c **** #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
1249:./Lib/Src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
ARM GAS  /tmp/cc2eTGWX.s 			page 56


1250:./Lib/Src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
1251:./Lib/Src/stm32f4xx_flash.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
1252:./Lib/Src/stm32f4xx_flash.c **** 
1253:./Lib/Src/stm32f4xx_flash.c **** #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE)
1254:./Lib/Src/stm32f4xx_flash.c ****     /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
1255:./Lib/Src/stm32f4xx_flash.c ****     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 1914              		.loc 1 1255 67
 1915 0028 0A4B     		ldr	r3, .L135
 1916 002a 1B78     		ldrb	r3, [r3]
 1917 002c DBB2     		uxtb	r3, r3
 1918              		.loc 1 1255 15
 1919 002e 03F00F03 		and	r3, r3, #15
 1920 0032 FB73     		strb	r3, [r7, #15]
1256:./Lib/Src/stm32f4xx_flash.c **** #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
1257:./Lib/Src/stm32f4xx_flash.c **** 
1258:./Lib/Src/stm32f4xx_flash.c ****     /* Update User Option Byte */
1259:./Lib/Src/stm32f4xx_flash.c ****     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uin
 1921              		.loc 1 1259 75
 1922 0034 BA79     		ldrb	r2, [r7, #6]
 1923 0036 FB7B     		ldrb	r3, [r7, #15]
 1924 0038 1343     		orrs	r3, r3, r2
 1925 003a DAB2     		uxtb	r2, r3
 1926              		.loc 1 1259 54
 1927 003c 7B79     		ldrb	r3, [r7, #5]
 1928 003e 1343     		orrs	r3, r3, r2
 1929 0040 DAB2     		uxtb	r2, r3
 1930              		.loc 1 1259 5
 1931 0042 0449     		ldr	r1, .L135
 1932              		.loc 1 1259 42
 1933 0044 FB79     		ldrb	r3, [r7, #7]
 1934 0046 1343     		orrs	r3, r3, r2
 1935 0048 DBB2     		uxtb	r3, r3
 1936 004a 0B70     		strb	r3, [r1]
 1937              	.L134:
1260:./Lib/Src/stm32f4xx_flash.c ****   }  
1261:./Lib/Src/stm32f4xx_flash.c **** }
 1938              		.loc 1 1261 1
 1939 004c 00BF     		nop
 1940 004e 1037     		adds	r7, r7, #16
 1941              		.cfi_def_cfa_offset 8
 1942 0050 BD46     		mov	sp, r7
 1943              		.cfi_def_cfa_register 13
 1944              		@ sp needed
 1945 0052 80BD     		pop	{r7, pc}
 1946              	.L136:
 1947              		.align	2
 1948              	.L135:
 1949 0054 143C0240 		.word	1073888276
 1950              		.cfi_endproc
 1951              	.LFE147:
 1953              		.section	.text.FLASH_OB_BootConfig,"ax",%progbits
 1954              		.align	1
 1955              		.global	FLASH_OB_BootConfig
 1956              		.syntax unified
 1957              		.thumb
 1958              		.thumb_func
 1960              	FLASH_OB_BootConfig:
ARM GAS  /tmp/cc2eTGWX.s 			page 57


 1961              	.LFB148:
1262:./Lib/Src/stm32f4xx_flash.c **** 
1263:./Lib/Src/stm32f4xx_flash.c **** /**
1264:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Configure the Dual Bank Boot.
1265:./Lib/Src/stm32f4xx_flash.c ****   *   
1266:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1267:./Lib/Src/stm32f4xx_flash.c ****   *      
1268:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_BOOT: specifies the Dual Bank Boot Option byte.
1269:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1270:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
1271:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
1272:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
1273:./Lib/Src/stm32f4xx_flash.c ****   */
1274:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_BootConfig(uint8_t OB_BOOT)
1275:./Lib/Src/stm32f4xx_flash.c **** {
 1962              		.loc 1 1275 1
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 8
 1965              		@ frame_needed = 1, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
 1967 0000 80B4     		push	{r7}
 1968              		.cfi_def_cfa_offset 4
 1969              		.cfi_offset 7, -4
 1970 0002 83B0     		sub	sp, sp, #12
 1971              		.cfi_def_cfa_offset 16
 1972 0004 00AF     		add	r7, sp, #0
 1973              		.cfi_def_cfa_register 7
 1974 0006 0346     		mov	r3, r0
 1975 0008 FB71     		strb	r3, [r7, #7]
1276:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1277:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOOT(OB_BOOT));
1278:./Lib/Src/stm32f4xx_flash.c **** 
1279:./Lib/Src/stm32f4xx_flash.c ****   /* Set Dual Bank Boot */
1280:./Lib/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 1976              		.loc 1 1280 3
 1977 000a 0B4B     		ldr	r3, .L138
 1978 000c 1B78     		ldrb	r3, [r3]
 1979 000e DBB2     		uxtb	r3, r3
 1980 0010 094A     		ldr	r2, .L138
 1981              		.loc 1 1280 40
 1982 0012 23F01003 		bic	r3, r3, #16
 1983 0016 DBB2     		uxtb	r3, r3
 1984 0018 1370     		strb	r3, [r2]
1281:./Lib/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
 1985              		.loc 1 1281 3
 1986 001a 074B     		ldr	r3, .L138
 1987 001c 1B78     		ldrb	r3, [r3]
 1988 001e DAB2     		uxtb	r2, r3
 1989 0020 0549     		ldr	r1, .L138
 1990              		.loc 1 1281 40
 1991 0022 FB79     		ldrb	r3, [r7, #7]
 1992 0024 1343     		orrs	r3, r3, r2
 1993 0026 DBB2     		uxtb	r3, r3
 1994 0028 0B70     		strb	r3, [r1]
1282:./Lib/Src/stm32f4xx_flash.c **** 
1283:./Lib/Src/stm32f4xx_flash.c **** }
 1995              		.loc 1 1283 1
ARM GAS  /tmp/cc2eTGWX.s 			page 58


 1996 002a 00BF     		nop
 1997 002c 0C37     		adds	r7, r7, #12
 1998              		.cfi_def_cfa_offset 4
 1999 002e BD46     		mov	sp, r7
 2000              		.cfi_def_cfa_register 13
 2001              		@ sp needed
 2002 0030 5DF8047B 		ldr	r7, [sp], #4
 2003              		.cfi_restore 7
 2004              		.cfi_def_cfa_offset 0
 2005 0034 7047     		bx	lr
 2006              	.L139:
 2007 0036 00BF     		.align	2
 2008              	.L138:
 2009 0038 143C0240 		.word	1073888276
 2010              		.cfi_endproc
 2011              	.LFE148:
 2013              		.section	.text.FLASH_OB_BORConfig,"ax",%progbits
 2014              		.align	1
 2015              		.global	FLASH_OB_BORConfig
 2016              		.syntax unified
 2017              		.thumb
 2018              		.thumb_func
 2020              	FLASH_OB_BORConfig:
 2021              	.LFB149:
1284:./Lib/Src/stm32f4xx_flash.c **** 
1285:./Lib/Src/stm32f4xx_flash.c **** /**
1286:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Sets the BOR Level. 
1287:./Lib/Src/stm32f4xx_flash.c ****   * @param  OB_BOR: specifies the Option Bytes BOR Reset Level.
1288:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1289:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
1290:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1291:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1292:./Lib/Src/stm32f4xx_flash.c ****   *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
1293:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
1294:./Lib/Src/stm32f4xx_flash.c ****   */
1295:./Lib/Src/stm32f4xx_flash.c **** void FLASH_OB_BORConfig(uint8_t OB_BOR)
1296:./Lib/Src/stm32f4xx_flash.c **** {
 2022              		.loc 1 1296 1
 2023              		.cfi_startproc
 2024              		@ args = 0, pretend = 0, frame = 8
 2025              		@ frame_needed = 1, uses_anonymous_args = 0
 2026              		@ link register save eliminated.
 2027 0000 80B4     		push	{r7}
 2028              		.cfi_def_cfa_offset 4
 2029              		.cfi_offset 7, -4
 2030 0002 83B0     		sub	sp, sp, #12
 2031              		.cfi_def_cfa_offset 16
 2032 0004 00AF     		add	r7, sp, #0
 2033              		.cfi_def_cfa_register 7
 2034 0006 0346     		mov	r3, r0
 2035 0008 FB71     		strb	r3, [r7, #7]
1297:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1298:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_OB_BOR(OB_BOR));
1299:./Lib/Src/stm32f4xx_flash.c **** 
1300:./Lib/Src/stm32f4xx_flash.c ****   /* Set the BOR Level */
1301:./Lib/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 2036              		.loc 1 1301 3
ARM GAS  /tmp/cc2eTGWX.s 			page 59


 2037 000a 0B4B     		ldr	r3, .L141
 2038 000c 1B78     		ldrb	r3, [r3]
 2039 000e DBB2     		uxtb	r3, r3
 2040 0010 094A     		ldr	r2, .L141
 2041              		.loc 1 1301 40
 2042 0012 23F00C03 		bic	r3, r3, #12
 2043 0016 DBB2     		uxtb	r3, r3
 2044 0018 1370     		strb	r3, [r2]
1302:./Lib/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 2045              		.loc 1 1302 3
 2046 001a 074B     		ldr	r3, .L141
 2047 001c 1B78     		ldrb	r3, [r3]
 2048 001e DAB2     		uxtb	r2, r3
 2049 0020 0549     		ldr	r1, .L141
 2050              		.loc 1 1302 40
 2051 0022 FB79     		ldrb	r3, [r7, #7]
 2052 0024 1343     		orrs	r3, r3, r2
 2053 0026 DBB2     		uxtb	r3, r3
 2054 0028 0B70     		strb	r3, [r1]
1303:./Lib/Src/stm32f4xx_flash.c **** 
1304:./Lib/Src/stm32f4xx_flash.c **** }
 2055              		.loc 1 1304 1
 2056 002a 00BF     		nop
 2057 002c 0C37     		adds	r7, r7, #12
 2058              		.cfi_def_cfa_offset 4
 2059 002e BD46     		mov	sp, r7
 2060              		.cfi_def_cfa_register 13
 2061              		@ sp needed
 2062 0030 5DF8047B 		ldr	r7, [sp], #4
 2063              		.cfi_restore 7
 2064              		.cfi_def_cfa_offset 0
 2065 0034 7047     		bx	lr
 2066              	.L142:
 2067 0036 00BF     		.align	2
 2068              	.L141:
 2069 0038 143C0240 		.word	1073888276
 2070              		.cfi_endproc
 2071              	.LFE149:
 2073              		.section	.text.FLASH_OB_Launch,"ax",%progbits
 2074              		.align	1
 2075              		.global	FLASH_OB_Launch
 2076              		.syntax unified
 2077              		.thumb
 2078              		.thumb_func
 2080              	FLASH_OB_Launch:
 2081              	.LFB150:
1305:./Lib/Src/stm32f4xx_flash.c **** 
1306:./Lib/Src/stm32f4xx_flash.c **** /**
1307:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Launch the option byte loading.
1308:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1309:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1310:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1311:./Lib/Src/stm32f4xx_flash.c ****   */
1312:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_OB_Launch(void)
1313:./Lib/Src/stm32f4xx_flash.c **** {
 2082              		.loc 1 1313 1
 2083              		.cfi_startproc
ARM GAS  /tmp/cc2eTGWX.s 			page 60


 2084              		@ args = 0, pretend = 0, frame = 8
 2085              		@ frame_needed = 1, uses_anonymous_args = 0
 2086 0000 80B5     		push	{r7, lr}
 2087              		.cfi_def_cfa_offset 8
 2088              		.cfi_offset 7, -8
 2089              		.cfi_offset 14, -4
 2090 0002 82B0     		sub	sp, sp, #8
 2091              		.cfi_def_cfa_offset 16
 2092 0004 00AF     		add	r7, sp, #0
 2093              		.cfi_def_cfa_register 7
1314:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 2094              		.loc 1 1314 16
 2095 0006 0923     		movs	r3, #9
 2096 0008 FB71     		strb	r3, [r7, #7]
1315:./Lib/Src/stm32f4xx_flash.c **** 
1316:./Lib/Src/stm32f4xx_flash.c ****   /* Set the OPTSTRT bit in OPTCR register */
1317:./Lib/Src/stm32f4xx_flash.c ****   *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 2097              		.loc 1 1317 3
 2098 000a 084B     		ldr	r3, .L145
 2099 000c 1B78     		ldrb	r3, [r3]
 2100 000e DBB2     		uxtb	r3, r3
 2101 0010 064A     		ldr	r2, .L145
 2102              		.loc 1 1317 40
 2103 0012 43F00203 		orr	r3, r3, #2
 2104 0016 DBB2     		uxtb	r3, r3
 2105 0018 1370     		strb	r3, [r2]
1318:./Lib/Src/stm32f4xx_flash.c **** 
1319:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for last operation to be completed */
1320:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_WaitForLastOperation();
 2106              		.loc 1 1320 12
 2107 001a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 2108 001e 0346     		mov	r3, r0
 2109 0020 FB71     		strb	r3, [r7, #7]
1321:./Lib/Src/stm32f4xx_flash.c **** 
1322:./Lib/Src/stm32f4xx_flash.c ****   return status;
 2110              		.loc 1 1322 10
 2111 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1323:./Lib/Src/stm32f4xx_flash.c **** }
 2112              		.loc 1 1323 1
 2113 0024 1846     		mov	r0, r3
 2114 0026 0837     		adds	r7, r7, #8
 2115              		.cfi_def_cfa_offset 8
 2116 0028 BD46     		mov	sp, r7
 2117              		.cfi_def_cfa_register 13
 2118              		@ sp needed
 2119 002a 80BD     		pop	{r7, pc}
 2120              	.L146:
 2121              		.align	2
 2122              	.L145:
 2123 002c 143C0240 		.word	1073888276
 2124              		.cfi_endproc
 2125              	.LFE150:
 2127              		.section	.text.FLASH_OB_GetUser,"ax",%progbits
 2128              		.align	1
 2129              		.global	FLASH_OB_GetUser
 2130              		.syntax unified
 2131              		.thumb
ARM GAS  /tmp/cc2eTGWX.s 			page 61


 2132              		.thumb_func
 2134              	FLASH_OB_GetUser:
 2135              	.LFB151:
1324:./Lib/Src/stm32f4xx_flash.c **** 
1325:./Lib/Src/stm32f4xx_flash.c **** /**
1326:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1327:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1328:./Lib/Src/stm32f4xx_flash.c ****   * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
1329:./Lib/Src/stm32f4xx_flash.c ****   *         and RST_STDBY(Bit2).
1330:./Lib/Src/stm32f4xx_flash.c ****   */
1331:./Lib/Src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetUser(void)
1332:./Lib/Src/stm32f4xx_flash.c **** {
 2136              		.loc 1 1332 1
 2137              		.cfi_startproc
 2138              		@ args = 0, pretend = 0, frame = 0
 2139              		@ frame_needed = 1, uses_anonymous_args = 0
 2140              		@ link register save eliminated.
 2141 0000 80B4     		push	{r7}
 2142              		.cfi_def_cfa_offset 4
 2143              		.cfi_offset 7, -4
 2144 0002 00AF     		add	r7, sp, #0
 2145              		.cfi_def_cfa_register 7
1333:./Lib/Src/stm32f4xx_flash.c ****   /* Return the User Option Byte */
1334:./Lib/Src/stm32f4xx_flash.c ****   return (uint8_t)(FLASH->OPTCR >> 5);
 2146              		.loc 1 1334 25
 2147 0004 044B     		ldr	r3, .L149
 2148 0006 5B69     		ldr	r3, [r3, #20]
 2149              		.loc 1 1334 33
 2150 0008 5B09     		lsrs	r3, r3, #5
 2151              		.loc 1 1334 10
 2152 000a DBB2     		uxtb	r3, r3
1335:./Lib/Src/stm32f4xx_flash.c **** }
 2153              		.loc 1 1335 1
 2154 000c 1846     		mov	r0, r3
 2155 000e BD46     		mov	sp, r7
 2156              		.cfi_def_cfa_register 13
 2157              		@ sp needed
 2158 0010 5DF8047B 		ldr	r7, [sp], #4
 2159              		.cfi_restore 7
 2160              		.cfi_def_cfa_offset 0
 2161 0014 7047     		bx	lr
 2162              	.L150:
 2163 0016 00BF     		.align	2
 2164              	.L149:
 2165 0018 003C0240 		.word	1073888256
 2166              		.cfi_endproc
 2167              	.LFE151:
 2169              		.section	.text.FLASH_OB_GetWRP,"ax",%progbits
 2170              		.align	1
 2171              		.global	FLASH_OB_GetWRP
 2172              		.syntax unified
 2173              		.thumb
 2174              		.thumb_func
 2176              	FLASH_OB_GetWRP:
 2177              	.LFB152:
1336:./Lib/Src/stm32f4xx_flash.c **** 
1337:./Lib/Src/stm32f4xx_flash.c **** /**
ARM GAS  /tmp/cc2eTGWX.s 			page 62


1338:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1339:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1340:./Lib/Src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1341:./Lib/Src/stm32f4xx_flash.c ****   */
1342:./Lib/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP(void)
1343:./Lib/Src/stm32f4xx_flash.c **** {
 2178              		.loc 1 1343 1
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 0
 2181              		@ frame_needed = 1, uses_anonymous_args = 0
 2182              		@ link register save eliminated.
 2183 0000 80B4     		push	{r7}
 2184              		.cfi_def_cfa_offset 4
 2185              		.cfi_offset 7, -4
 2186 0002 00AF     		add	r7, sp, #0
 2187              		.cfi_def_cfa_register 7
1344:./Lib/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1345:./Lib/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 2188              		.loc 1 1345 11
 2189 0004 034B     		ldr	r3, .L153
 2190 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2191 0008 9BB2     		uxth	r3, r3
1346:./Lib/Src/stm32f4xx_flash.c **** }
 2192              		.loc 1 1346 1
 2193 000a 1846     		mov	r0, r3
 2194 000c BD46     		mov	sp, r7
 2195              		.cfi_def_cfa_register 13
 2196              		@ sp needed
 2197 000e 5DF8047B 		ldr	r7, [sp], #4
 2198              		.cfi_restore 7
 2199              		.cfi_def_cfa_offset 0
 2200 0012 7047     		bx	lr
 2201              	.L154:
 2202              		.align	2
 2203              	.L153:
 2204 0014 163C0240 		.word	1073888278
 2205              		.cfi_endproc
 2206              	.LFE152:
 2208              		.section	.text.FLASH_OB_GetWRP1,"ax",%progbits
 2209              		.align	1
 2210              		.global	FLASH_OB_GetWRP1
 2211              		.syntax unified
 2212              		.thumb
 2213              		.thumb_func
 2215              	FLASH_OB_GetWRP1:
 2216              	.LFB153:
1347:./Lib/Src/stm32f4xx_flash.c **** 
1348:./Lib/Src/stm32f4xx_flash.c **** /**
1349:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes value.
1350:./Lib/Src/stm32f4xx_flash.c ****   *   
1351:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1352:./Lib/Src/stm32f4xx_flash.c ****   *   
1353:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1354:./Lib/Src/stm32f4xx_flash.c ****   * @retval The FLASH Write Protection  Option Bytes value
1355:./Lib/Src/stm32f4xx_flash.c ****   */
1356:./Lib/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetWRP1(void)
1357:./Lib/Src/stm32f4xx_flash.c **** {
ARM GAS  /tmp/cc2eTGWX.s 			page 63


 2217              		.loc 1 1357 1
 2218              		.cfi_startproc
 2219              		@ args = 0, pretend = 0, frame = 0
 2220              		@ frame_needed = 1, uses_anonymous_args = 0
 2221              		@ link register save eliminated.
 2222 0000 80B4     		push	{r7}
 2223              		.cfi_def_cfa_offset 4
 2224              		.cfi_offset 7, -4
 2225 0002 00AF     		add	r7, sp, #0
 2226              		.cfi_def_cfa_register 7
1358:./Lib/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1359:./Lib/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 2227              		.loc 1 1359 11
 2228 0004 034B     		ldr	r3, .L157
 2229 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2230 0008 9BB2     		uxth	r3, r3
1360:./Lib/Src/stm32f4xx_flash.c **** }
 2231              		.loc 1 1360 1
 2232 000a 1846     		mov	r0, r3
 2233 000c BD46     		mov	sp, r7
 2234              		.cfi_def_cfa_register 13
 2235              		@ sp needed
 2236 000e 5DF8047B 		ldr	r7, [sp], #4
 2237              		.cfi_restore 7
 2238              		.cfi_def_cfa_offset 0
 2239 0012 7047     		bx	lr
 2240              	.L158:
 2241              		.align	2
 2242              	.L157:
 2243 0014 1A3C0240 		.word	1073888282
 2244              		.cfi_endproc
 2245              	.LFE153:
 2247              		.section	.text.FLASH_OB_GetPCROP,"ax",%progbits
 2248              		.align	1
 2249              		.global	FLASH_OB_GetPCROP
 2250              		.syntax unified
 2251              		.thumb
 2252              		.thumb_func
 2254              	FLASH_OB_GetPCROP:
 2255              	.LFB154:
1361:./Lib/Src/stm32f4xx_flash.c **** 
1362:./Lib/Src/stm32f4xx_flash.c **** /**
1363:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1364:./Lib/Src/stm32f4xx_flash.c ****   *   
1365:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices and STM32F401xx/411xE devi
1366:./Lib/Src/stm32f4xx_flash.c ****   *   
1367:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1368:./Lib/Src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1369:./Lib/Src/stm32f4xx_flash.c ****   */
1370:./Lib/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP(void)
1371:./Lib/Src/stm32f4xx_flash.c **** {
 2256              		.loc 1 1371 1
 2257              		.cfi_startproc
 2258              		@ args = 0, pretend = 0, frame = 0
 2259              		@ frame_needed = 1, uses_anonymous_args = 0
 2260              		@ link register save eliminated.
 2261 0000 80B4     		push	{r7}
ARM GAS  /tmp/cc2eTGWX.s 			page 64


 2262              		.cfi_def_cfa_offset 4
 2263              		.cfi_offset 7, -4
 2264 0002 00AF     		add	r7, sp, #0
 2265              		.cfi_def_cfa_register 7
1372:./Lib/Src/stm32f4xx_flash.c ****   /* Return the FLASH PC Read/write protection Register value */
1373:./Lib/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 2266              		.loc 1 1373 11
 2267 0004 034B     		ldr	r3, .L161
 2268 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2269 0008 9BB2     		uxth	r3, r3
1374:./Lib/Src/stm32f4xx_flash.c **** }
 2270              		.loc 1 1374 1
 2271 000a 1846     		mov	r0, r3
 2272 000c BD46     		mov	sp, r7
 2273              		.cfi_def_cfa_register 13
 2274              		@ sp needed
 2275 000e 5DF8047B 		ldr	r7, [sp], #4
 2276              		.cfi_restore 7
 2277              		.cfi_def_cfa_offset 0
 2278 0012 7047     		bx	lr
 2279              	.L162:
 2280              		.align	2
 2281              	.L161:
 2282 0014 163C0240 		.word	1073888278
 2283              		.cfi_endproc
 2284              	.LFE154:
 2286              		.section	.text.FLASH_OB_GetPCROP1,"ax",%progbits
 2287              		.align	1
 2288              		.global	FLASH_OB_GetPCROP1
 2289              		.syntax unified
 2290              		.thumb
 2291              		.thumb_func
 2293              	FLASH_OB_GetPCROP1:
 2294              	.LFB155:
1375:./Lib/Src/stm32f4xx_flash.c **** 
1376:./Lib/Src/stm32f4xx_flash.c **** /**
1377:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH PC Read/Write Protection Option Bytes value.
1378:./Lib/Src/stm32f4xx_flash.c ****   *   
1379:./Lib/Src/stm32f4xx_flash.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices. 
1380:./Lib/Src/stm32f4xx_flash.c ****   *     
1381:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1382:./Lib/Src/stm32f4xx_flash.c ****   * @retval The FLASH PC Read/Write Protection Option Bytes value
1383:./Lib/Src/stm32f4xx_flash.c ****   */
1384:./Lib/Src/stm32f4xx_flash.c **** uint16_t FLASH_OB_GetPCROP1(void)
1385:./Lib/Src/stm32f4xx_flash.c **** {
 2295              		.loc 1 1385 1
 2296              		.cfi_startproc
 2297              		@ args = 0, pretend = 0, frame = 0
 2298              		@ frame_needed = 1, uses_anonymous_args = 0
 2299              		@ link register save eliminated.
 2300 0000 80B4     		push	{r7}
 2301              		.cfi_def_cfa_offset 4
 2302              		.cfi_offset 7, -4
 2303 0002 00AF     		add	r7, sp, #0
 2304              		.cfi_def_cfa_register 7
1386:./Lib/Src/stm32f4xx_flash.c ****   /* Return the FLASH write protection Register value */
1387:./Lib/Src/stm32f4xx_flash.c ****   return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
ARM GAS  /tmp/cc2eTGWX.s 			page 65


 2305              		.loc 1 1387 11
 2306 0004 034B     		ldr	r3, .L165
 2307 0006 1B88     		ldrh	r3, [r3]	@ movhi
 2308 0008 9BB2     		uxth	r3, r3
1388:./Lib/Src/stm32f4xx_flash.c **** }
 2309              		.loc 1 1388 1
 2310 000a 1846     		mov	r0, r3
 2311 000c BD46     		mov	sp, r7
 2312              		.cfi_def_cfa_register 13
 2313              		@ sp needed
 2314 000e 5DF8047B 		ldr	r7, [sp], #4
 2315              		.cfi_restore 7
 2316              		.cfi_def_cfa_offset 0
 2317 0012 7047     		bx	lr
 2318              	.L166:
 2319              		.align	2
 2320              	.L165:
 2321 0014 1A3C0240 		.word	1073888282
 2322              		.cfi_endproc
 2323              	.LFE155:
 2325              		.section	.text.FLASH_OB_GetRDP,"ax",%progbits
 2326              		.align	1
 2327              		.global	FLASH_OB_GetRDP
 2328              		.syntax unified
 2329              		.thumb
 2330              		.thumb_func
 2332              	FLASH_OB_GetRDP:
 2333              	.LFB156:
1389:./Lib/Src/stm32f4xx_flash.c **** 
1390:./Lib/Src/stm32f4xx_flash.c **** /**
1391:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Read Protection level.
1392:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1393:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH ReadOut Protection Status:
1394:./Lib/Src/stm32f4xx_flash.c ****   *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
1395:./Lib/Src/stm32f4xx_flash.c ****   *           - RESET, when OB_RDP_Level_0 is set
1396:./Lib/Src/stm32f4xx_flash.c ****   */
1397:./Lib/Src/stm32f4xx_flash.c **** FlagStatus FLASH_OB_GetRDP(void)
1398:./Lib/Src/stm32f4xx_flash.c **** {
 2334              		.loc 1 1398 1
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 8
 2337              		@ frame_needed = 1, uses_anonymous_args = 0
 2338              		@ link register save eliminated.
 2339 0000 80B4     		push	{r7}
 2340              		.cfi_def_cfa_offset 4
 2341              		.cfi_offset 7, -4
 2342 0002 83B0     		sub	sp, sp, #12
 2343              		.cfi_def_cfa_offset 16
 2344 0004 00AF     		add	r7, sp, #0
 2345              		.cfi_def_cfa_register 7
1399:./Lib/Src/stm32f4xx_flash.c ****   FlagStatus readstatus = RESET;
 2346              		.loc 1 1399 14
 2347 0006 0023     		movs	r3, #0
 2348 0008 FB71     		strb	r3, [r7, #7]
1400:./Lib/Src/stm32f4xx_flash.c **** 
1401:./Lib/Src/stm32f4xx_flash.c ****   if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 2349              		.loc 1 1401 8
ARM GAS  /tmp/cc2eTGWX.s 			page 66


 2350 000a 084B     		ldr	r3, .L171
 2351 000c 1B78     		ldrb	r3, [r3]
 2352 000e DBB2     		uxtb	r3, r3
 2353              		.loc 1 1401 6
 2354 0010 AA2B     		cmp	r3, #170
 2355 0012 02D0     		beq	.L168
1402:./Lib/Src/stm32f4xx_flash.c ****   {
1403:./Lib/Src/stm32f4xx_flash.c ****     readstatus = SET;
 2356              		.loc 1 1403 16
 2357 0014 0123     		movs	r3, #1
 2358 0016 FB71     		strb	r3, [r7, #7]
 2359 0018 01E0     		b	.L169
 2360              	.L168:
1404:./Lib/Src/stm32f4xx_flash.c ****   }
1405:./Lib/Src/stm32f4xx_flash.c ****   else
1406:./Lib/Src/stm32f4xx_flash.c ****   {
1407:./Lib/Src/stm32f4xx_flash.c ****     readstatus = RESET;
 2361              		.loc 1 1407 16
 2362 001a 0023     		movs	r3, #0
 2363 001c FB71     		strb	r3, [r7, #7]
 2364              	.L169:
1408:./Lib/Src/stm32f4xx_flash.c ****   }
1409:./Lib/Src/stm32f4xx_flash.c ****   return readstatus;
 2365              		.loc 1 1409 10
 2366 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1410:./Lib/Src/stm32f4xx_flash.c **** }
 2367              		.loc 1 1410 1
 2368 0020 1846     		mov	r0, r3
 2369 0022 0C37     		adds	r7, r7, #12
 2370              		.cfi_def_cfa_offset 4
 2371 0024 BD46     		mov	sp, r7
 2372              		.cfi_def_cfa_register 13
 2373              		@ sp needed
 2374 0026 5DF8047B 		ldr	r7, [sp], #4
 2375              		.cfi_restore 7
 2376              		.cfi_def_cfa_offset 0
 2377 002a 7047     		bx	lr
 2378              	.L172:
 2379              		.align	2
 2380              	.L171:
 2381 002c 153C0240 		.word	1073888277
 2382              		.cfi_endproc
 2383              	.LFE156:
 2385              		.section	.text.FLASH_OB_GetBOR,"ax",%progbits
 2386              		.align	1
 2387              		.global	FLASH_OB_GetBOR
 2388              		.syntax unified
 2389              		.thumb
 2390              		.thumb_func
 2392              	FLASH_OB_GetBOR:
 2393              	.LFB157:
1411:./Lib/Src/stm32f4xx_flash.c **** 
1412:./Lib/Src/stm32f4xx_flash.c **** /**
1413:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH BOR level.
1414:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1415:./Lib/Src/stm32f4xx_flash.c ****   * @retval The FLASH BOR level:
1416:./Lib/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL3: Supply voltage ranges from 2.7 to 3.6 V
ARM GAS  /tmp/cc2eTGWX.s 			page 67


1417:./Lib/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
1418:./Lib/Src/stm32f4xx_flash.c ****   *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
1419:./Lib/Src/stm32f4xx_flash.c ****   *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
1420:./Lib/Src/stm32f4xx_flash.c ****   */
1421:./Lib/Src/stm32f4xx_flash.c **** uint8_t FLASH_OB_GetBOR(void)
1422:./Lib/Src/stm32f4xx_flash.c **** {
 2394              		.loc 1 1422 1
 2395              		.cfi_startproc
 2396              		@ args = 0, pretend = 0, frame = 0
 2397              		@ frame_needed = 1, uses_anonymous_args = 0
 2398              		@ link register save eliminated.
 2399 0000 80B4     		push	{r7}
 2400              		.cfi_def_cfa_offset 4
 2401              		.cfi_offset 7, -4
 2402 0002 00AF     		add	r7, sp, #0
 2403              		.cfi_def_cfa_register 7
1423:./Lib/Src/stm32f4xx_flash.c ****   /* Return the FLASH BOR level */
1424:./Lib/Src/stm32f4xx_flash.c ****   return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 2404              		.loc 1 1424 10
 2405 0004 054B     		ldr	r3, .L175
 2406 0006 1B78     		ldrb	r3, [r3]
 2407 0008 DBB2     		uxtb	r3, r3
 2408 000a 03F00C03 		and	r3, r3, #12
 2409 000e DBB2     		uxtb	r3, r3
1425:./Lib/Src/stm32f4xx_flash.c **** }
 2410              		.loc 1 1425 1
 2411 0010 1846     		mov	r0, r3
 2412 0012 BD46     		mov	sp, r7
 2413              		.cfi_def_cfa_register 13
 2414              		@ sp needed
 2415 0014 5DF8047B 		ldr	r7, [sp], #4
 2416              		.cfi_restore 7
 2417              		.cfi_def_cfa_offset 0
 2418 0018 7047     		bx	lr
 2419              	.L176:
 2420 001a 00BF     		.align	2
 2421              	.L175:
 2422 001c 143C0240 		.word	1073888276
 2423              		.cfi_endproc
 2424              	.LFE157:
 2426              		.section	.text.FLASH_ITConfig,"ax",%progbits
 2427              		.align	1
 2428              		.global	FLASH_ITConfig
 2429              		.syntax unified
 2430              		.thumb
 2431              		.thumb_func
 2433              	FLASH_ITConfig:
 2434              	.LFB158:
1426:./Lib/Src/stm32f4xx_flash.c **** 
1427:./Lib/Src/stm32f4xx_flash.c **** /**
1428:./Lib/Src/stm32f4xx_flash.c ****   * @}
1429:./Lib/Src/stm32f4xx_flash.c ****   */
1430:./Lib/Src/stm32f4xx_flash.c **** 
1431:./Lib/Src/stm32f4xx_flash.c **** /** @defgroup FLASH_Group4 Interrupts and flags management functions
1432:./Lib/Src/stm32f4xx_flash.c ****  *  @brief   Interrupts and flags management functions
1433:./Lib/Src/stm32f4xx_flash.c ****  *
1434:./Lib/Src/stm32f4xx_flash.c **** @verbatim   
ARM GAS  /tmp/cc2eTGWX.s 			page 68


1435:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================
1436:./Lib/Src/stm32f4xx_flash.c ****               ##### Interrupts and flags management functions #####
1437:./Lib/Src/stm32f4xx_flash.c ****  ===============================================================================  
1438:./Lib/Src/stm32f4xx_flash.c **** @endverbatim
1439:./Lib/Src/stm32f4xx_flash.c ****   * @{
1440:./Lib/Src/stm32f4xx_flash.c ****   */
1441:./Lib/Src/stm32f4xx_flash.c **** 
1442:./Lib/Src/stm32f4xx_flash.c **** /**
1443:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
1444:./Lib/Src/stm32f4xx_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1445:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1446:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_ERR: FLASH Error Interrupt
1447:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1448:./Lib/Src/stm32f4xx_flash.c ****   * @retval None 
1449:./Lib/Src/stm32f4xx_flash.c ****   */
1450:./Lib/Src/stm32f4xx_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1451:./Lib/Src/stm32f4xx_flash.c **** {
 2435              		.loc 1 1451 1
 2436              		.cfi_startproc
 2437              		@ args = 0, pretend = 0, frame = 8
 2438              		@ frame_needed = 1, uses_anonymous_args = 0
 2439              		@ link register save eliminated.
 2440 0000 80B4     		push	{r7}
 2441              		.cfi_def_cfa_offset 4
 2442              		.cfi_offset 7, -4
 2443 0002 83B0     		sub	sp, sp, #12
 2444              		.cfi_def_cfa_offset 16
 2445 0004 00AF     		add	r7, sp, #0
 2446              		.cfi_def_cfa_register 7
 2447 0006 7860     		str	r0, [r7, #4]
 2448 0008 0B46     		mov	r3, r1
 2449 000a FB70     		strb	r3, [r7, #3]
1452:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1453:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1454:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1455:./Lib/Src/stm32f4xx_flash.c **** 
1456:./Lib/Src/stm32f4xx_flash.c ****   if(NewState != DISABLE)
 2450              		.loc 1 1456 5
 2451 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2452 000e 002B     		cmp	r3, #0
 2453 0010 06D0     		beq	.L178
1457:./Lib/Src/stm32f4xx_flash.c ****   {
1458:./Lib/Src/stm32f4xx_flash.c ****     /* Enable the interrupt sources */
1459:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR |= FLASH_IT;
 2454              		.loc 1 1459 10
 2455 0012 0A4B     		ldr	r3, .L181
 2456 0014 1A69     		ldr	r2, [r3, #16]
 2457 0016 0949     		ldr	r1, .L181
 2458              		.loc 1 1459 15
 2459 0018 7B68     		ldr	r3, [r7, #4]
 2460 001a 1343     		orrs	r3, r3, r2
 2461 001c 0B61     		str	r3, [r1, #16]
1460:./Lib/Src/stm32f4xx_flash.c ****   }
1461:./Lib/Src/stm32f4xx_flash.c ****   else
1462:./Lib/Src/stm32f4xx_flash.c ****   {
1463:./Lib/Src/stm32f4xx_flash.c ****     /* Disable the interrupt sources */
1464:./Lib/Src/stm32f4xx_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
ARM GAS  /tmp/cc2eTGWX.s 			page 69


1465:./Lib/Src/stm32f4xx_flash.c ****   }
1466:./Lib/Src/stm32f4xx_flash.c **** }
 2462              		.loc 1 1466 1
 2463 001e 06E0     		b	.L180
 2464              	.L178:
1464:./Lib/Src/stm32f4xx_flash.c ****   }
 2465              		.loc 1 1464 10
 2466 0020 064B     		ldr	r3, .L181
 2467 0022 1A69     		ldr	r2, [r3, #16]
1464:./Lib/Src/stm32f4xx_flash.c ****   }
 2468              		.loc 1 1464 18
 2469 0024 7B68     		ldr	r3, [r7, #4]
 2470 0026 DB43     		mvns	r3, r3
1464:./Lib/Src/stm32f4xx_flash.c ****   }
 2471              		.loc 1 1464 10
 2472 0028 0449     		ldr	r1, .L181
1464:./Lib/Src/stm32f4xx_flash.c ****   }
 2473              		.loc 1 1464 15
 2474 002a 1340     		ands	r3, r3, r2
 2475 002c 0B61     		str	r3, [r1, #16]
 2476              	.L180:
 2477              		.loc 1 1466 1
 2478 002e 00BF     		nop
 2479 0030 0C37     		adds	r7, r7, #12
 2480              		.cfi_def_cfa_offset 4
 2481 0032 BD46     		mov	sp, r7
 2482              		.cfi_def_cfa_register 13
 2483              		@ sp needed
 2484 0034 5DF8047B 		ldr	r7, [sp], #4
 2485              		.cfi_restore 7
 2486              		.cfi_def_cfa_offset 0
 2487 0038 7047     		bx	lr
 2488              	.L182:
 2489 003a 00BF     		.align	2
 2490              	.L181:
 2491 003c 003C0240 		.word	1073888256
 2492              		.cfi_endproc
 2493              	.LFE158:
 2495              		.section	.text.FLASH_GetFlagStatus,"ax",%progbits
 2496              		.align	1
 2497              		.global	FLASH_GetFlagStatus
 2498              		.syntax unified
 2499              		.thumb
 2500              		.thumb_func
 2502              	FLASH_GetFlagStatus:
 2503              	.LFB159:
1467:./Lib/Src/stm32f4xx_flash.c **** 
1468:./Lib/Src/stm32f4xx_flash.c **** /**
1469:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1470:./Lib/Src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1471:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be one of the following values:
1472:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1473:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1474:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1475:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag
1476:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1477:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
ARM GAS  /tmp/cc2eTGWX.s 			page 70


1478:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH (PCROP) Read Protection error flag (STM32F42xx/43xxx an
1479:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_BSY: FLASH Busy flag
1480:./Lib/Src/stm32f4xx_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1481:./Lib/Src/stm32f4xx_flash.c ****   */
1482:./Lib/Src/stm32f4xx_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1483:./Lib/Src/stm32f4xx_flash.c **** {
 2504              		.loc 1 1483 1
 2505              		.cfi_startproc
 2506              		@ args = 0, pretend = 0, frame = 16
 2507              		@ frame_needed = 1, uses_anonymous_args = 0
 2508              		@ link register save eliminated.
 2509 0000 80B4     		push	{r7}
 2510              		.cfi_def_cfa_offset 4
 2511              		.cfi_offset 7, -4
 2512 0002 85B0     		sub	sp, sp, #20
 2513              		.cfi_def_cfa_offset 24
 2514 0004 00AF     		add	r7, sp, #0
 2515              		.cfi_def_cfa_register 7
 2516 0006 7860     		str	r0, [r7, #4]
1484:./Lib/Src/stm32f4xx_flash.c ****   FlagStatus bitstatus = RESET;
 2517              		.loc 1 1484 14
 2518 0008 0023     		movs	r3, #0
 2519 000a FB73     		strb	r3, [r7, #15]
1485:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1486:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
1487:./Lib/Src/stm32f4xx_flash.c **** 
1488:./Lib/Src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 2520              		.loc 1 1488 12
 2521 000c 084B     		ldr	r3, .L187
 2522 000e DA68     		ldr	r2, [r3, #12]
 2523              		.loc 1 1488 17
 2524 0010 7B68     		ldr	r3, [r7, #4]
 2525 0012 1340     		ands	r3, r3, r2
 2526              		.loc 1 1488 5
 2527 0014 002B     		cmp	r3, #0
 2528 0016 02D0     		beq	.L184
1489:./Lib/Src/stm32f4xx_flash.c ****   {
1490:./Lib/Src/stm32f4xx_flash.c ****     bitstatus = SET;
 2529              		.loc 1 1490 15
 2530 0018 0123     		movs	r3, #1
 2531 001a FB73     		strb	r3, [r7, #15]
 2532 001c 01E0     		b	.L185
 2533              	.L184:
1491:./Lib/Src/stm32f4xx_flash.c ****   }
1492:./Lib/Src/stm32f4xx_flash.c ****   else
1493:./Lib/Src/stm32f4xx_flash.c ****   {
1494:./Lib/Src/stm32f4xx_flash.c ****     bitstatus = RESET;
 2534              		.loc 1 1494 15
 2535 001e 0023     		movs	r3, #0
 2536 0020 FB73     		strb	r3, [r7, #15]
 2537              	.L185:
1495:./Lib/Src/stm32f4xx_flash.c ****   }
1496:./Lib/Src/stm32f4xx_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1497:./Lib/Src/stm32f4xx_flash.c ****   return bitstatus; 
 2538              		.loc 1 1497 10
 2539 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1498:./Lib/Src/stm32f4xx_flash.c **** }
ARM GAS  /tmp/cc2eTGWX.s 			page 71


 2540              		.loc 1 1498 1
 2541 0024 1846     		mov	r0, r3
 2542 0026 1437     		adds	r7, r7, #20
 2543              		.cfi_def_cfa_offset 4
 2544 0028 BD46     		mov	sp, r7
 2545              		.cfi_def_cfa_register 13
 2546              		@ sp needed
 2547 002a 5DF8047B 		ldr	r7, [sp], #4
 2548              		.cfi_restore 7
 2549              		.cfi_def_cfa_offset 0
 2550 002e 7047     		bx	lr
 2551              	.L188:
 2552              		.align	2
 2553              	.L187:
 2554 0030 003C0240 		.word	1073888256
 2555              		.cfi_endproc
 2556              	.LFE159:
 2558              		.section	.text.FLASH_ClearFlag,"ax",%progbits
 2559              		.align	1
 2560              		.global	FLASH_ClearFlag
 2561              		.syntax unified
 2562              		.thumb
 2563              		.thumb_func
 2565              	FLASH_ClearFlag:
 2566              	.LFB160:
1499:./Lib/Src/stm32f4xx_flash.c **** 
1500:./Lib/Src/stm32f4xx_flash.c **** /**
1501:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Clears the FLASH's pending flags.
1502:./Lib/Src/stm32f4xx_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1503:./Lib/Src/stm32f4xx_flash.c ****   *          This parameter can be any combination of the following values:
1504:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_EOP: FLASH End of Operation flag 
1505:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_OPERR: FLASH operation Error flag 
1506:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_WRPERR: FLASH Write protected error flag 
1507:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGAERR: FLASH Programming Alignment error flag 
1508:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
1509:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
1510:./Lib/Src/stm32f4xx_flash.c ****   *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F
1511:./Lib/Src/stm32f4xx_flash.c ****   * @retval None
1512:./Lib/Src/stm32f4xx_flash.c ****   */
1513:./Lib/Src/stm32f4xx_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1514:./Lib/Src/stm32f4xx_flash.c **** {
 2567              		.loc 1 1514 1
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 8
 2570              		@ frame_needed = 1, uses_anonymous_args = 0
 2571              		@ link register save eliminated.
 2572 0000 80B4     		push	{r7}
 2573              		.cfi_def_cfa_offset 4
 2574              		.cfi_offset 7, -4
 2575 0002 83B0     		sub	sp, sp, #12
 2576              		.cfi_def_cfa_offset 16
 2577 0004 00AF     		add	r7, sp, #0
 2578              		.cfi_def_cfa_register 7
 2579 0006 7860     		str	r0, [r7, #4]
1515:./Lib/Src/stm32f4xx_flash.c ****   /* Check the parameters */
1516:./Lib/Src/stm32f4xx_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
1517:./Lib/Src/stm32f4xx_flash.c ****   
ARM GAS  /tmp/cc2eTGWX.s 			page 72


1518:./Lib/Src/stm32f4xx_flash.c ****   /* Clear the flags */
1519:./Lib/Src/stm32f4xx_flash.c ****   FLASH->SR = FLASH_FLAG;
 2580              		.loc 1 1519 8
 2581 0008 044A     		ldr	r2, .L190
 2582              		.loc 1 1519 13
 2583 000a 7B68     		ldr	r3, [r7, #4]
 2584 000c D360     		str	r3, [r2, #12]
1520:./Lib/Src/stm32f4xx_flash.c **** }
 2585              		.loc 1 1520 1
 2586 000e 00BF     		nop
 2587 0010 0C37     		adds	r7, r7, #12
 2588              		.cfi_def_cfa_offset 4
 2589 0012 BD46     		mov	sp, r7
 2590              		.cfi_def_cfa_register 13
 2591              		@ sp needed
 2592 0014 5DF8047B 		ldr	r7, [sp], #4
 2593              		.cfi_restore 7
 2594              		.cfi_def_cfa_offset 0
 2595 0018 7047     		bx	lr
 2596              	.L191:
 2597 001a 00BF     		.align	2
 2598              	.L190:
 2599 001c 003C0240 		.word	1073888256
 2600              		.cfi_endproc
 2601              	.LFE160:
 2603              		.section	.text.FLASH_GetStatus,"ax",%progbits
 2604              		.align	1
 2605              		.global	FLASH_GetStatus
 2606              		.syntax unified
 2607              		.thumb
 2608              		.thumb_func
 2610              	FLASH_GetStatus:
 2611              	.LFB161:
1521:./Lib/Src/stm32f4xx_flash.c **** 
1522:./Lib/Src/stm32f4xx_flash.c **** /**
1523:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Returns the FLASH Status.
1524:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1525:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1526:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_RD, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1527:./Lib/Src/stm32f4xx_flash.c ****   */
1528:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_GetStatus(void)
1529:./Lib/Src/stm32f4xx_flash.c **** {
 2612              		.loc 1 1529 1
 2613              		.cfi_startproc
 2614              		@ args = 0, pretend = 0, frame = 8
 2615              		@ frame_needed = 1, uses_anonymous_args = 0
 2616              		@ link register save eliminated.
 2617 0000 80B4     		push	{r7}
 2618              		.cfi_def_cfa_offset 4
 2619              		.cfi_offset 7, -4
 2620 0002 83B0     		sub	sp, sp, #12
 2621              		.cfi_def_cfa_offset 16
 2622 0004 00AF     		add	r7, sp, #0
 2623              		.cfi_def_cfa_register 7
1530:./Lib/Src/stm32f4xx_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
 2624              		.loc 1 1530 16
 2625 0006 0923     		movs	r3, #9
ARM GAS  /tmp/cc2eTGWX.s 			page 73


 2626 0008 FB71     		strb	r3, [r7, #7]
1531:./Lib/Src/stm32f4xx_flash.c ****   
1532:./Lib/Src/stm32f4xx_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 2627              		.loc 1 1532 12
 2628 000a 1B4B     		ldr	r3, .L200
 2629 000c DB68     		ldr	r3, [r3, #12]
 2630              		.loc 1 1532 17
 2631 000e 03F48033 		and	r3, r3, #65536
 2632              		.loc 1 1532 5
 2633 0012 B3F5803F 		cmp	r3, #65536
 2634 0016 02D1     		bne	.L193
1533:./Lib/Src/stm32f4xx_flash.c ****   {
1534:./Lib/Src/stm32f4xx_flash.c ****     flashstatus = FLASH_BUSY;
 2635              		.loc 1 1534 17
 2636 0018 0123     		movs	r3, #1
 2637 001a FB71     		strb	r3, [r7, #7]
 2638 001c 25E0     		b	.L194
 2639              	.L193:
1535:./Lib/Src/stm32f4xx_flash.c ****   }
1536:./Lib/Src/stm32f4xx_flash.c ****   else 
1537:./Lib/Src/stm32f4xx_flash.c ****   {  
1538:./Lib/Src/stm32f4xx_flash.c ****     if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 2640              		.loc 1 1538 14
 2641 001e 164B     		ldr	r3, .L200
 2642 0020 DB68     		ldr	r3, [r3, #12]
 2643              		.loc 1 1538 19
 2644 0022 03F01003 		and	r3, r3, #16
 2645              		.loc 1 1538 7
 2646 0026 002B     		cmp	r3, #0
 2647 0028 02D0     		beq	.L195
1539:./Lib/Src/stm32f4xx_flash.c ****     { 
1540:./Lib/Src/stm32f4xx_flash.c ****       flashstatus = FLASH_ERROR_WRP;
 2648              		.loc 1 1540 19
 2649 002a 0623     		movs	r3, #6
 2650 002c FB71     		strb	r3, [r7, #7]
 2651 002e 1CE0     		b	.L194
 2652              	.L195:
1541:./Lib/Src/stm32f4xx_flash.c ****     }
1542:./Lib/Src/stm32f4xx_flash.c ****     else
1543:./Lib/Src/stm32f4xx_flash.c ****     {
1544:./Lib/Src/stm32f4xx_flash.c ****       if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 2653              		.loc 1 1544 16
 2654 0030 114B     		ldr	r3, .L200
 2655 0032 DB68     		ldr	r3, [r3, #12]
 2656              		.loc 1 1544 21
 2657 0034 03F48073 		and	r3, r3, #256
 2658              		.loc 1 1544 9
 2659 0038 002B     		cmp	r3, #0
 2660 003a 02D0     		beq	.L196
1545:./Lib/Src/stm32f4xx_flash.c ****       { 
1546:./Lib/Src/stm32f4xx_flash.c ****         flashstatus = FLASH_ERROR_RD;
 2661              		.loc 1 1546 21
 2662 003c 0223     		movs	r3, #2
 2663 003e FB71     		strb	r3, [r7, #7]
 2664 0040 13E0     		b	.L194
 2665              	.L196:
1547:./Lib/Src/stm32f4xx_flash.c ****       } 
ARM GAS  /tmp/cc2eTGWX.s 			page 74


1548:./Lib/Src/stm32f4xx_flash.c ****       else 
1549:./Lib/Src/stm32f4xx_flash.c ****       {
1550:./Lib/Src/stm32f4xx_flash.c ****         if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 2666              		.loc 1 1550 18
 2667 0042 0D4B     		ldr	r3, .L200
 2668 0044 DB68     		ldr	r3, [r3, #12]
 2669              		.loc 1 1550 23
 2670 0046 03F0E003 		and	r3, r3, #224
 2671              		.loc 1 1550 11
 2672 004a 002B     		cmp	r3, #0
 2673 004c 02D0     		beq	.L197
1551:./Lib/Src/stm32f4xx_flash.c ****         {
1552:./Lib/Src/stm32f4xx_flash.c ****           flashstatus = FLASH_ERROR_PROGRAM; 
 2674              		.loc 1 1552 23
 2675 004e 0723     		movs	r3, #7
 2676 0050 FB71     		strb	r3, [r7, #7]
 2677 0052 0AE0     		b	.L194
 2678              	.L197:
1553:./Lib/Src/stm32f4xx_flash.c ****         }
1554:./Lib/Src/stm32f4xx_flash.c ****         else
1555:./Lib/Src/stm32f4xx_flash.c ****         {
1556:./Lib/Src/stm32f4xx_flash.c ****           if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 2679              		.loc 1 1556 20
 2680 0054 084B     		ldr	r3, .L200
 2681 0056 DB68     		ldr	r3, [r3, #12]
 2682              		.loc 1 1556 25
 2683 0058 03F00203 		and	r3, r3, #2
 2684              		.loc 1 1556 13
 2685 005c 002B     		cmp	r3, #0
 2686 005e 02D0     		beq	.L198
1557:./Lib/Src/stm32f4xx_flash.c ****           {
1558:./Lib/Src/stm32f4xx_flash.c ****             flashstatus = FLASH_ERROR_OPERATION;
 2687              		.loc 1 1558 25
 2688 0060 0823     		movs	r3, #8
 2689 0062 FB71     		strb	r3, [r7, #7]
 2690 0064 01E0     		b	.L194
 2691              	.L198:
1559:./Lib/Src/stm32f4xx_flash.c ****           }
1560:./Lib/Src/stm32f4xx_flash.c ****           else
1561:./Lib/Src/stm32f4xx_flash.c ****           {
1562:./Lib/Src/stm32f4xx_flash.c ****             flashstatus = FLASH_COMPLETE;
 2692              		.loc 1 1562 25
 2693 0066 0923     		movs	r3, #9
 2694 0068 FB71     		strb	r3, [r7, #7]
 2695              	.L194:
1563:./Lib/Src/stm32f4xx_flash.c ****           }
1564:./Lib/Src/stm32f4xx_flash.c ****         }
1565:./Lib/Src/stm32f4xx_flash.c ****       }
1566:./Lib/Src/stm32f4xx_flash.c ****     }
1567:./Lib/Src/stm32f4xx_flash.c ****   }
1568:./Lib/Src/stm32f4xx_flash.c ****   /* Return the FLASH Status */
1569:./Lib/Src/stm32f4xx_flash.c ****   return flashstatus;
 2696              		.loc 1 1569 10
 2697 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1570:./Lib/Src/stm32f4xx_flash.c **** }
 2698              		.loc 1 1570 1
 2699 006c 1846     		mov	r0, r3
ARM GAS  /tmp/cc2eTGWX.s 			page 75


 2700 006e 0C37     		adds	r7, r7, #12
 2701              		.cfi_def_cfa_offset 4
 2702 0070 BD46     		mov	sp, r7
 2703              		.cfi_def_cfa_register 13
 2704              		@ sp needed
 2705 0072 5DF8047B 		ldr	r7, [sp], #4
 2706              		.cfi_restore 7
 2707              		.cfi_def_cfa_offset 0
 2708 0076 7047     		bx	lr
 2709              	.L201:
 2710              		.align	2
 2711              	.L200:
 2712 0078 003C0240 		.word	1073888256
 2713              		.cfi_endproc
 2714              	.LFE161:
 2716              		.section	.text.FLASH_WaitForLastOperation,"ax",%progbits
 2717              		.align	1
 2718              		.global	FLASH_WaitForLastOperation
 2719              		.syntax unified
 2720              		.thumb
 2721              		.thumb_func
 2723              	FLASH_WaitForLastOperation:
 2724              	.LFB162:
1571:./Lib/Src/stm32f4xx_flash.c **** 
1572:./Lib/Src/stm32f4xx_flash.c **** /**
1573:./Lib/Src/stm32f4xx_flash.c ****   * @brief  Waits for a FLASH operation to complete.
1574:./Lib/Src/stm32f4xx_flash.c ****   * @param  None
1575:./Lib/Src/stm32f4xx_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
1576:./Lib/Src/stm32f4xx_flash.c ****   *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
1577:./Lib/Src/stm32f4xx_flash.c ****   */
1578:./Lib/Src/stm32f4xx_flash.c **** FLASH_Status FLASH_WaitForLastOperation(void)
1579:./Lib/Src/stm32f4xx_flash.c **** { 
 2725              		.loc 1 1579 1
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 8
 2728              		@ frame_needed = 1, uses_anonymous_args = 0
 2729 0000 80B5     		push	{r7, lr}
 2730              		.cfi_def_cfa_offset 8
 2731              		.cfi_offset 7, -8
 2732              		.cfi_offset 14, -4
 2733 0002 82B0     		sub	sp, sp, #8
 2734              		.cfi_def_cfa_offset 16
 2735 0004 00AF     		add	r7, sp, #0
 2736              		.cfi_def_cfa_register 7
1580:./Lib/Src/stm32f4xx_flash.c ****   __IO FLASH_Status status = FLASH_COMPLETE;
 2737              		.loc 1 1580 21
 2738 0006 0923     		movs	r3, #9
 2739 0008 FB71     		strb	r3, [r7, #7]
1581:./Lib/Src/stm32f4xx_flash.c ****    
1582:./Lib/Src/stm32f4xx_flash.c ****   /* Check for the FLASH Status */
1583:./Lib/Src/stm32f4xx_flash.c ****   status = FLASH_GetStatus();
 2740              		.loc 1 1583 12
 2741 000a FFF7FEFF 		bl	FLASH_GetStatus
 2742 000e 0346     		mov	r3, r0
 2743              		.loc 1 1583 10
 2744 0010 FB71     		strb	r3, [r7, #7]
1584:./Lib/Src/stm32f4xx_flash.c **** 
ARM GAS  /tmp/cc2eTGWX.s 			page 76


1585:./Lib/Src/stm32f4xx_flash.c ****   /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
1586:./Lib/Src/stm32f4xx_flash.c ****      Even if the FLASH operation fails, the BUSY flag will be reset and an error
1587:./Lib/Src/stm32f4xx_flash.c ****      flag will be set */
1588:./Lib/Src/stm32f4xx_flash.c ****   while(status == FLASH_BUSY)
 2745              		.loc 1 1588 8
 2746 0012 03E0     		b	.L203
 2747              	.L204:
1589:./Lib/Src/stm32f4xx_flash.c ****   {
1590:./Lib/Src/stm32f4xx_flash.c ****     status = FLASH_GetStatus();
 2748              		.loc 1 1590 14
 2749 0014 FFF7FEFF 		bl	FLASH_GetStatus
 2750 0018 0346     		mov	r3, r0
 2751              		.loc 1 1590 12
 2752 001a FB71     		strb	r3, [r7, #7]
 2753              	.L203:
1588:./Lib/Src/stm32f4xx_flash.c ****   {
 2754              		.loc 1 1588 16
 2755 001c FB79     		ldrb	r3, [r7, #7]
 2756 001e DBB2     		uxtb	r3, r3
 2757 0020 012B     		cmp	r3, #1
 2758 0022 F7D0     		beq	.L204
1591:./Lib/Src/stm32f4xx_flash.c ****   }
1592:./Lib/Src/stm32f4xx_flash.c ****   /* Return the operation status */
1593:./Lib/Src/stm32f4xx_flash.c ****   return status;
 2759              		.loc 1 1593 10
 2760 0024 FB79     		ldrb	r3, [r7, #7]
 2761 0026 DBB2     		uxtb	r3, r3
1594:./Lib/Src/stm32f4xx_flash.c **** }
 2762              		.loc 1 1594 1
 2763 0028 1846     		mov	r0, r3
 2764 002a 0837     		adds	r7, r7, #8
 2765              		.cfi_def_cfa_offset 8
 2766 002c BD46     		mov	sp, r7
 2767              		.cfi_def_cfa_register 13
 2768              		@ sp needed
 2769 002e 80BD     		pop	{r7, pc}
 2770              		.cfi_endproc
 2771              	.LFE162:
 2773              		.text
 2774              	.Letext0:
 2775              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 2776              		.file 3 "./Start/stm32f4xx.h"
 2777              		.file 4 "./Lib/inc/stm32f4xx_flash.h"
ARM GAS  /tmp/cc2eTGWX.s 			page 77


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_flash.c
     /tmp/cc2eTGWX.s:21     .text.FLASH_SetLatency:0000000000000000 $t
     /tmp/cc2eTGWX.s:27     .text.FLASH_SetLatency:0000000000000000 FLASH_SetLatency
     /tmp/cc2eTGWX.s:63     .text.FLASH_SetLatency:000000000000001c $d
     /tmp/cc2eTGWX.s:68     .text.FLASH_PrefetchBufferCmd:0000000000000000 $t
     /tmp/cc2eTGWX.s:74     .text.FLASH_PrefetchBufferCmd:0000000000000000 FLASH_PrefetchBufferCmd
     /tmp/cc2eTGWX.s:126    .text.FLASH_PrefetchBufferCmd:0000000000000038 $d
     /tmp/cc2eTGWX.s:131    .text.FLASH_InstructionCacheCmd:0000000000000000 $t
     /tmp/cc2eTGWX.s:137    .text.FLASH_InstructionCacheCmd:0000000000000000 FLASH_InstructionCacheCmd
     /tmp/cc2eTGWX.s:189    .text.FLASH_InstructionCacheCmd:0000000000000038 $d
     /tmp/cc2eTGWX.s:194    .text.FLASH_DataCacheCmd:0000000000000000 $t
     /tmp/cc2eTGWX.s:200    .text.FLASH_DataCacheCmd:0000000000000000 FLASH_DataCacheCmd
     /tmp/cc2eTGWX.s:252    .text.FLASH_DataCacheCmd:0000000000000038 $d
     /tmp/cc2eTGWX.s:257    .text.FLASH_InstructionCacheReset:0000000000000000 $t
     /tmp/cc2eTGWX.s:263    .text.FLASH_InstructionCacheReset:0000000000000000 FLASH_InstructionCacheReset
     /tmp/cc2eTGWX.s:294    .text.FLASH_InstructionCacheReset:000000000000001c $d
     /tmp/cc2eTGWX.s:299    .text.FLASH_DataCacheReset:0000000000000000 $t
     /tmp/cc2eTGWX.s:305    .text.FLASH_DataCacheReset:0000000000000000 FLASH_DataCacheReset
     /tmp/cc2eTGWX.s:336    .text.FLASH_DataCacheReset:000000000000001c $d
     /tmp/cc2eTGWX.s:341    .text.FLASH_Unlock:0000000000000000 $t
     /tmp/cc2eTGWX.s:347    .text.FLASH_Unlock:0000000000000000 FLASH_Unlock
     /tmp/cc2eTGWX.s:388    .text.FLASH_Unlock:0000000000000024 $d
     /tmp/cc2eTGWX.s:395    .text.FLASH_Lock:0000000000000000 $t
     /tmp/cc2eTGWX.s:401    .text.FLASH_Lock:0000000000000000 FLASH_Lock
     /tmp/cc2eTGWX.s:432    .text.FLASH_Lock:000000000000001c $d
     /tmp/cc2eTGWX.s:437    .text.FLASH_EraseSector:0000000000000000 $t
     /tmp/cc2eTGWX.s:443    .text.FLASH_EraseSector:0000000000000000 FLASH_EraseSector
     /tmp/cc2eTGWX.s:2723   .text.FLASH_WaitForLastOperation:0000000000000000 FLASH_WaitForLastOperation
     /tmp/cc2eTGWX.s:577    .text.FLASH_EraseSector:00000000000000bc $d
     /tmp/cc2eTGWX.s:582    .text.FLASH_EraseAllSectors:0000000000000000 $t
     /tmp/cc2eTGWX.s:588    .text.FLASH_EraseAllSectors:0000000000000000 FLASH_EraseAllSectors
     /tmp/cc2eTGWX.s:703    .text.FLASH_EraseAllSectors:000000000000009c $d
     /tmp/cc2eTGWX.s:708    .text.FLASH_EraseAllBank1Sectors:0000000000000000 $t
     /tmp/cc2eTGWX.s:714    .text.FLASH_EraseAllBank1Sectors:0000000000000000 FLASH_EraseAllBank1Sectors
     /tmp/cc2eTGWX.s:829    .text.FLASH_EraseAllBank1Sectors:000000000000009c $d
     /tmp/cc2eTGWX.s:834    .text.FLASH_EraseAllBank2Sectors:0000000000000000 $t
     /tmp/cc2eTGWX.s:840    .text.FLASH_EraseAllBank2Sectors:0000000000000000 FLASH_EraseAllBank2Sectors
     /tmp/cc2eTGWX.s:955    .text.FLASH_EraseAllBank2Sectors:000000000000009c $d
     /tmp/cc2eTGWX.s:960    .text.FLASH_ProgramDoubleWord:0000000000000000 $t
     /tmp/cc2eTGWX.s:966    .text.FLASH_ProgramDoubleWord:0000000000000000 FLASH_ProgramDoubleWord
     /tmp/cc2eTGWX.s:1044   .text.FLASH_ProgramDoubleWord:000000000000006c $d
     /tmp/cc2eTGWX.s:1049   .text.FLASH_ProgramWord:0000000000000000 $t
     /tmp/cc2eTGWX.s:1055   .text.FLASH_ProgramWord:0000000000000000 FLASH_ProgramWord
     /tmp/cc2eTGWX.s:1133   .text.FLASH_ProgramWord:0000000000000064 $d
     /tmp/cc2eTGWX.s:1138   .text.FLASH_ProgramHalfWord:0000000000000000 $t
     /tmp/cc2eTGWX.s:1144   .text.FLASH_ProgramHalfWord:0000000000000000 FLASH_ProgramHalfWord
     /tmp/cc2eTGWX.s:1223   .text.FLASH_ProgramHalfWord:0000000000000068 $d
     /tmp/cc2eTGWX.s:1228   .text.FLASH_ProgramByte:0000000000000000 $t
     /tmp/cc2eTGWX.s:1234   .text.FLASH_ProgramByte:0000000000000000 FLASH_ProgramByte
     /tmp/cc2eTGWX.s:1312   .text.FLASH_ProgramByte:0000000000000064 $d
     /tmp/cc2eTGWX.s:1317   .text.FLASH_OB_Unlock:0000000000000000 $t
     /tmp/cc2eTGWX.s:1323   .text.FLASH_OB_Unlock:0000000000000000 FLASH_OB_Unlock
     /tmp/cc2eTGWX.s:1366   .text.FLASH_OB_Unlock:0000000000000028 $d
     /tmp/cc2eTGWX.s:1373   .text.FLASH_OB_Lock:0000000000000000 $t
     /tmp/cc2eTGWX.s:1379   .text.FLASH_OB_Lock:0000000000000000 FLASH_OB_Lock
     /tmp/cc2eTGWX.s:1410   .text.FLASH_OB_Lock:000000000000001c $d
ARM GAS  /tmp/cc2eTGWX.s 			page 78


     /tmp/cc2eTGWX.s:1415   .text.FLASH_OB_WRPConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:1421   .text.FLASH_OB_WRPConfig:0000000000000000 FLASH_OB_WRPConfig
     /tmp/cc2eTGWX.s:1496   .text.FLASH_OB_WRPConfig:0000000000000058 $d
     /tmp/cc2eTGWX.s:1501   .text.FLASH_OB_WRP1Config:0000000000000000 $t
     /tmp/cc2eTGWX.s:1507   .text.FLASH_OB_WRP1Config:0000000000000000 FLASH_OB_WRP1Config
     /tmp/cc2eTGWX.s:1582   .text.FLASH_OB_WRP1Config:0000000000000058 $d
     /tmp/cc2eTGWX.s:1587   .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:1593   .text.FLASH_OB_PCROPSelectionConfig:0000000000000000 FLASH_OB_PCROPSelectionConfig
     /tmp/cc2eTGWX.s:1642   .text.FLASH_OB_PCROPSelectionConfig:0000000000000034 $d
     /tmp/cc2eTGWX.s:1647   .text.FLASH_OB_PCROPConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:1653   .text.FLASH_OB_PCROPConfig:0000000000000000 FLASH_OB_PCROPConfig
     /tmp/cc2eTGWX.s:1728   .text.FLASH_OB_PCROPConfig:0000000000000058 $d
     /tmp/cc2eTGWX.s:1733   .text.FLASH_OB_PCROP1Config:0000000000000000 $t
     /tmp/cc2eTGWX.s:1739   .text.FLASH_OB_PCROP1Config:0000000000000000 FLASH_OB_PCROP1Config
     /tmp/cc2eTGWX.s:1814   .text.FLASH_OB_PCROP1Config:0000000000000058 $d
     /tmp/cc2eTGWX.s:1819   .text.FLASH_OB_RDPConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:1825   .text.FLASH_OB_RDPConfig:0000000000000000 FLASH_OB_RDPConfig
     /tmp/cc2eTGWX.s:1869   .text.FLASH_OB_RDPConfig:000000000000002c $d
     /tmp/cc2eTGWX.s:1874   .text.FLASH_OB_UserConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:1880   .text.FLASH_OB_UserConfig:0000000000000000 FLASH_OB_UserConfig
     /tmp/cc2eTGWX.s:1949   .text.FLASH_OB_UserConfig:0000000000000054 $d
     /tmp/cc2eTGWX.s:1954   .text.FLASH_OB_BootConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:1960   .text.FLASH_OB_BootConfig:0000000000000000 FLASH_OB_BootConfig
     /tmp/cc2eTGWX.s:2009   .text.FLASH_OB_BootConfig:0000000000000038 $d
     /tmp/cc2eTGWX.s:2014   .text.FLASH_OB_BORConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:2020   .text.FLASH_OB_BORConfig:0000000000000000 FLASH_OB_BORConfig
     /tmp/cc2eTGWX.s:2069   .text.FLASH_OB_BORConfig:0000000000000038 $d
     /tmp/cc2eTGWX.s:2074   .text.FLASH_OB_Launch:0000000000000000 $t
     /tmp/cc2eTGWX.s:2080   .text.FLASH_OB_Launch:0000000000000000 FLASH_OB_Launch
     /tmp/cc2eTGWX.s:2123   .text.FLASH_OB_Launch:000000000000002c $d
     /tmp/cc2eTGWX.s:2128   .text.FLASH_OB_GetUser:0000000000000000 $t
     /tmp/cc2eTGWX.s:2134   .text.FLASH_OB_GetUser:0000000000000000 FLASH_OB_GetUser
     /tmp/cc2eTGWX.s:2165   .text.FLASH_OB_GetUser:0000000000000018 $d
     /tmp/cc2eTGWX.s:2170   .text.FLASH_OB_GetWRP:0000000000000000 $t
     /tmp/cc2eTGWX.s:2176   .text.FLASH_OB_GetWRP:0000000000000000 FLASH_OB_GetWRP
     /tmp/cc2eTGWX.s:2204   .text.FLASH_OB_GetWRP:0000000000000014 $d
     /tmp/cc2eTGWX.s:2209   .text.FLASH_OB_GetWRP1:0000000000000000 $t
     /tmp/cc2eTGWX.s:2215   .text.FLASH_OB_GetWRP1:0000000000000000 FLASH_OB_GetWRP1
     /tmp/cc2eTGWX.s:2243   .text.FLASH_OB_GetWRP1:0000000000000014 $d
     /tmp/cc2eTGWX.s:2248   .text.FLASH_OB_GetPCROP:0000000000000000 $t
     /tmp/cc2eTGWX.s:2254   .text.FLASH_OB_GetPCROP:0000000000000000 FLASH_OB_GetPCROP
     /tmp/cc2eTGWX.s:2282   .text.FLASH_OB_GetPCROP:0000000000000014 $d
     /tmp/cc2eTGWX.s:2287   .text.FLASH_OB_GetPCROP1:0000000000000000 $t
     /tmp/cc2eTGWX.s:2293   .text.FLASH_OB_GetPCROP1:0000000000000000 FLASH_OB_GetPCROP1
     /tmp/cc2eTGWX.s:2321   .text.FLASH_OB_GetPCROP1:0000000000000014 $d
     /tmp/cc2eTGWX.s:2326   .text.FLASH_OB_GetRDP:0000000000000000 $t
     /tmp/cc2eTGWX.s:2332   .text.FLASH_OB_GetRDP:0000000000000000 FLASH_OB_GetRDP
     /tmp/cc2eTGWX.s:2381   .text.FLASH_OB_GetRDP:000000000000002c $d
     /tmp/cc2eTGWX.s:2386   .text.FLASH_OB_GetBOR:0000000000000000 $t
     /tmp/cc2eTGWX.s:2392   .text.FLASH_OB_GetBOR:0000000000000000 FLASH_OB_GetBOR
     /tmp/cc2eTGWX.s:2422   .text.FLASH_OB_GetBOR:000000000000001c $d
     /tmp/cc2eTGWX.s:2427   .text.FLASH_ITConfig:0000000000000000 $t
     /tmp/cc2eTGWX.s:2433   .text.FLASH_ITConfig:0000000000000000 FLASH_ITConfig
     /tmp/cc2eTGWX.s:2491   .text.FLASH_ITConfig:000000000000003c $d
     /tmp/cc2eTGWX.s:2496   .text.FLASH_GetFlagStatus:0000000000000000 $t
     /tmp/cc2eTGWX.s:2502   .text.FLASH_GetFlagStatus:0000000000000000 FLASH_GetFlagStatus
     /tmp/cc2eTGWX.s:2554   .text.FLASH_GetFlagStatus:0000000000000030 $d
ARM GAS  /tmp/cc2eTGWX.s 			page 79


     /tmp/cc2eTGWX.s:2559   .text.FLASH_ClearFlag:0000000000000000 $t
     /tmp/cc2eTGWX.s:2565   .text.FLASH_ClearFlag:0000000000000000 FLASH_ClearFlag
     /tmp/cc2eTGWX.s:2599   .text.FLASH_ClearFlag:000000000000001c $d
     /tmp/cc2eTGWX.s:2604   .text.FLASH_GetStatus:0000000000000000 $t
     /tmp/cc2eTGWX.s:2610   .text.FLASH_GetStatus:0000000000000000 FLASH_GetStatus
     /tmp/cc2eTGWX.s:2712   .text.FLASH_GetStatus:0000000000000078 $d
     /tmp/cc2eTGWX.s:2717   .text.FLASH_WaitForLastOperation:0000000000000000 $t

NO UNDEFINED SYMBOLS
