ARM GAS  /tmp/ccznMrux.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_spi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_spi.c"
  20              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	SPI_I2S_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	SPI_I2S_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_spi.c **** /**
   2:./Lib/Src/stm32f4xx_spi.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:./Lib/Src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_spi.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_spi.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:./Lib/Src/stm32f4xx_spi.c ****   *           + Initialization and Configuration
  10:./Lib/Src/stm32f4xx_spi.c ****   *           + Data transfers functions
  11:./Lib/Src/stm32f4xx_spi.c ****   *           + Hardware CRC Calculation
  12:./Lib/Src/stm32f4xx_spi.c ****   *           + DMA transfers management
  13:./Lib/Src/stm32f4xx_spi.c ****   *           + Interrupts and flags management 
  14:./Lib/Src/stm32f4xx_spi.c ****   *           
  15:./Lib/Src/stm32f4xx_spi.c **** @verbatim
  16:./Lib/Src/stm32f4xx_spi.c **** 
  17:./Lib/Src/stm32f4xx_spi.c ****  ===================================================================
  18:./Lib/Src/stm32f4xx_spi.c ****                   ##### How to use this driver #####
  19:./Lib/Src/stm32f4xx_spi.c ****  ===================================================================
  20:./Lib/Src/stm32f4xx_spi.c ****  [..]
  21:./Lib/Src/stm32f4xx_spi.c ****    (#) Enable peripheral clock using the following functions 
  22:./Lib/Src/stm32f4xx_spi.c ****        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  23:./Lib/Src/stm32f4xx_spi.c ****        RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  24:./Lib/Src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3
  25:./Lib/Src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI4
  26:./Lib/Src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI5
  27:./Lib/Src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI6.
  28:./Lib/Src/stm32f4xx_spi.c ****   
  29:./Lib/Src/stm32f4xx_spi.c ****    (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  30:./Lib/Src/stm32f4xx_spi.c ****        function. In I2S mode, if an external clock source is used then the I2S 
ARM GAS  /tmp/ccznMrux.s 			page 2


  31:./Lib/Src/stm32f4xx_spi.c ****        CKIN pin GPIO clock should also be enabled.
  32:./Lib/Src/stm32f4xx_spi.c ****   
  33:./Lib/Src/stm32f4xx_spi.c ****    (#) Peripherals alternate function: 
  34:./Lib/Src/stm32f4xx_spi.c ****        (++) Connect the pin to the desired peripherals' Alternate Function (AF) 
  35:./Lib/Src/stm32f4xx_spi.c ****             using GPIO_PinAFConfig() function
  36:./Lib/Src/stm32f4xx_spi.c ****        (++) Configure the desired pin in alternate function by: 
  37:./Lib/Src/stm32f4xx_spi.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:./Lib/Src/stm32f4xx_spi.c ****        (++) Select the type, pull-up/pull-down and output speed via GPIO_PuPd, 
  39:./Lib/Src/stm32f4xx_spi.c ****             GPIO_OType and GPIO_Speed members
  40:./Lib/Src/stm32f4xx_spi.c ****        (++) Call GPIO_Init() function In I2S mode, if an external clock source is 
  41:./Lib/Src/stm32f4xx_spi.c ****             used then the I2S CKIN pin should be also configured in Alternate 
  42:./Lib/Src/stm32f4xx_spi.c ****             function Push-pull pull-up mode. 
  43:./Lib/Src/stm32f4xx_spi.c ****           
  44:./Lib/Src/stm32f4xx_spi.c ****    (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  45:./Lib/Src/stm32f4xx_spi.c ****        Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  46:./Lib/Src/stm32f4xx_spi.c ****        function.
  47:./Lib/Src/stm32f4xx_spi.c ****        In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  48:./Lib/Src/stm32f4xx_spi.c ****        frequency and Polarity using I2S_Init() function. For I2S mode, make sure 
  49:./Lib/Src/stm32f4xx_spi.c ****        that either:
  50:./Lib/Src/stm32f4xx_spi.c ****        (++) I2S PLL is configured using the functions 
  51:./Lib/Src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S), RCC_PLLI2SCmd(ENABLE) and 
  52:./Lib/Src/stm32f4xx_spi.c ****             RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY); or 
  53:./Lib/Src/stm32f4xx_spi.c ****        (++) External clock source is configured using the function 
  54:./Lib/Src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly 
  55:./Lib/Src/stm32f4xx_spi.c ****             the define constant I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  56:./Lib/Src/stm32f4xx_spi.c ****   
  57:./Lib/Src/stm32f4xx_spi.c ****    (#) Enable the NVIC and the corresponding interrupt using the function 
  58:./Lib/Src/stm32f4xx_spi.c ****        SPI_ITConfig() if you need to use interrupt mode. 
  59:./Lib/Src/stm32f4xx_spi.c ****   
  60:./Lib/Src/stm32f4xx_spi.c ****    (#) When using the DMA mode 
  61:./Lib/Src/stm32f4xx_spi.c ****        (++) Configure the DMA using DMA_Init() function
  62:./Lib/Src/stm32f4xx_spi.c ****        (++) Active the needed channel Request using SPI_I2S_DMACmd() function
  63:./Lib/Src/stm32f4xx_spi.c ****    
  64:./Lib/Src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  65:./Lib/Src/stm32f4xx_spi.c ****        I2S_Cmd().
  66:./Lib/Src/stm32f4xx_spi.c ****    
  67:./Lib/Src/stm32f4xx_spi.c ****    (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  68:./Lib/Src/stm32f4xx_spi.c ****   
  69:./Lib/Src/stm32f4xx_spi.c ****    (#) Optionally, you can enable/configure the following parameters without
  70:./Lib/Src/stm32f4xx_spi.c ****        re-initialization (i.e there is no need to call again SPI_Init() function):
  71:./Lib/Src/stm32f4xx_spi.c ****        (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  72:./Lib/Src/stm32f4xx_spi.c ****             is programmed as Data direction parameter using the SPI_Init() function
  73:./Lib/Src/stm32f4xx_spi.c ****             it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  74:./Lib/Src/stm32f4xx_spi.c ****             using the SPI_BiDirectionalLineConfig() function.
  75:./Lib/Src/stm32f4xx_spi.c ****        (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  76:./Lib/Src/stm32f4xx_spi.c ****             using the SPI_Init() function it can be possible to manage the 
  77:./Lib/Src/stm32f4xx_spi.c ****             NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  78:./Lib/Src/stm32f4xx_spi.c ****        (++) Reconfigure the data size using the SPI_DataSizeConfig() function  
  79:./Lib/Src/stm32f4xx_spi.c ****        (++) Enable or disable the SS output using the SPI_SSOutputCmd() function  
  80:./Lib/Src/stm32f4xx_spi.c ****             
  81:./Lib/Src/stm32f4xx_spi.c ****     (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  82:./Lib/Src/stm32f4xx_spi.c ****         CRC hardware Calculation subsection.
  83:./Lib/Src/stm32f4xx_spi.c ****      
  84:./Lib/Src/stm32f4xx_spi.c ****   
  85:./Lib/Src/stm32f4xx_spi.c ****  [..] It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  86:./Lib/Src/stm32f4xx_spi.c ****       peripheral is able to manage sending and receiving data simultaneously
  87:./Lib/Src/stm32f4xx_spi.c ****       using two data lines. Each SPI peripheral has an extended block called I2Sxext
ARM GAS  /tmp/ccznMrux.s 			page 3


  88:./Lib/Src/stm32f4xx_spi.c ****       (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  89:./Lib/Src/stm32f4xx_spi.c ****       The extension block is not a full SPI IP, it is used only as I2S slave to
  90:./Lib/Src/stm32f4xx_spi.c ****       implement full duplex mode. The extension block uses the same clock sources
  91:./Lib/Src/stm32f4xx_spi.c ****       as its master.          
  92:./Lib/Src/stm32f4xx_spi.c ****       To configure I2S full duplex you have to:
  93:./Lib/Src/stm32f4xx_spi.c ****               
  94:./Lib/Src/stm32f4xx_spi.c ****       (#) Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  95:./Lib/Src/stm32f4xx_spi.c ****              
  96:./Lib/Src/stm32f4xx_spi.c ****       (#) Call the I2S_FullDuplexConfig() function using the same structure passed to  
  97:./Lib/Src/stm32f4xx_spi.c ****           I2S_Init() function.
  98:./Lib/Src/stm32f4xx_spi.c ****               
  99:./Lib/Src/stm32f4xx_spi.c ****       (#) Call I2S_Cmd() for SPIx then for its extended block.
 100:./Lib/Src/stm32f4xx_spi.c ****             
 101:./Lib/Src/stm32f4xx_spi.c ****       (#) To configure interrupts or DMA requests and to get/clear flag status, 
 102:./Lib/Src/stm32f4xx_spi.c ****           use I2Sxext instance for the extension block.
 103:./Lib/Src/stm32f4xx_spi.c ****                
 104:./Lib/Src/stm32f4xx_spi.c ****  [..] Functions that can be called with I2Sxext instances are: I2S_Cmd(), 
 105:./Lib/Src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 106:./Lib/Src/stm32f4xx_spi.c ****       SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), 
 107:./Lib/Src/stm32f4xx_spi.c ****       SPI_I2S_ClearFlag(), SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 108:./Lib/Src/stm32f4xx_spi.c ****                    
 109:./Lib/Src/stm32f4xx_spi.c ****       Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 110:./Lib/Src/stm32f4xx_spi.c ****               
 111:./Lib/Src/stm32f4xx_spi.c ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 112:./Lib/Src/stm32f4xx_spi.c ****       I2S_StructInit(&I2SInitStruct);
 113:./Lib/Src/stm32f4xx_spi.c ****       I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 114:./Lib/Src/stm32f4xx_spi.c ****       I2S_Init(SPI3, &I2SInitStruct);
 115:./Lib/Src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 116:./Lib/Src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3, ENABLE);
 117:./Lib/Src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3ext, ENABLE);
 118:./Lib/Src/stm32f4xx_spi.c ****       ...
 119:./Lib/Src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 120:./Lib/Src/stm32f4xx_spi.c ****       {}
 121:./Lib/Src/stm32f4xx_spi.c ****       SPI_I2S_SendData(SPI3, txdata[i]);
 122:./Lib/Src/stm32f4xx_spi.c ****       ...  
 123:./Lib/Src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 124:./Lib/Src/stm32f4xx_spi.c ****       {}
 125:./Lib/Src/stm32f4xx_spi.c ****       rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 126:./Lib/Src/stm32f4xx_spi.c ****       ...          
 127:./Lib/Src/stm32f4xx_spi.c ****                 
 128:./Lib/Src/stm32f4xx_spi.c ****  [..]       
 129:./Lib/Src/stm32f4xx_spi.c ****    (@) In I2S mode: if an external clock is used as source clock for the I2S,  
 130:./Lib/Src/stm32f4xx_spi.c ****        then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 131:./Lib/Src/stm32f4xx_spi.c ****        be enabled and set to the value of the source clock frequency (in Hz).
 132:./Lib/Src/stm32f4xx_spi.c ****    
 133:./Lib/Src/stm32f4xx_spi.c ****    (@) In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 134:./Lib/Src/stm32f4xx_spi.c ****        just after calling the function SPI_Init().
 135:./Lib/Src/stm32f4xx_spi.c ****   
 136:./Lib/Src/stm32f4xx_spi.c **** @endverbatim  
 137:./Lib/Src/stm32f4xx_spi.c ****   *                                  
 138:./Lib/Src/stm32f4xx_spi.c ****   ******************************************************************************
 139:./Lib/Src/stm32f4xx_spi.c ****   * @attention
 140:./Lib/Src/stm32f4xx_spi.c ****   *
 141:./Lib/Src/stm32f4xx_spi.c ****   * Copyright (c) 2016 STMicroelectronics.
 142:./Lib/Src/stm32f4xx_spi.c ****   * All rights reserved.
 143:./Lib/Src/stm32f4xx_spi.c ****   *
 144:./Lib/Src/stm32f4xx_spi.c ****   * This software is licensed under terms that can be found in the LICENSE file
ARM GAS  /tmp/ccznMrux.s 			page 4


 145:./Lib/Src/stm32f4xx_spi.c ****   * in the root directory of this software component.
 146:./Lib/Src/stm32f4xx_spi.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
 147:./Lib/Src/stm32f4xx_spi.c ****   *
 148:./Lib/Src/stm32f4xx_spi.c ****   ******************************************************************************
 149:./Lib/Src/stm32f4xx_spi.c ****   */
 150:./Lib/Src/stm32f4xx_spi.c **** 
 151:./Lib/Src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 152:./Lib/Src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 153:./Lib/Src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 154:./Lib/Src/stm32f4xx_spi.c **** 
 155:./Lib/Src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 156:./Lib/Src/stm32f4xx_spi.c ****   * @{
 157:./Lib/Src/stm32f4xx_spi.c ****   */
 158:./Lib/Src/stm32f4xx_spi.c **** 
 159:./Lib/Src/stm32f4xx_spi.c **** /** @defgroup SPI 
 160:./Lib/Src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 161:./Lib/Src/stm32f4xx_spi.c ****   * @{
 162:./Lib/Src/stm32f4xx_spi.c ****   */ 
 163:./Lib/Src/stm32f4xx_spi.c **** 
 164:./Lib/Src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 165:./Lib/Src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 166:./Lib/Src/stm32f4xx_spi.c **** 
 167:./Lib/Src/stm32f4xx_spi.c **** /* SPI registers Masks */
 168:./Lib/Src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 169:./Lib/Src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 170:./Lib/Src/stm32f4xx_spi.c **** 
 171:./Lib/Src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 172:./Lib/Src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 173:./Lib/Src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 174:./Lib/Src/stm32f4xx_spi.c **** 
 175:./Lib/Src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 176:./Lib/Src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 177:./Lib/Src/stm32f4xx_spi.c **** 
 178:./Lib/Src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 179:./Lib/Src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 180:./Lib/Src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 181:./Lib/Src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 182:./Lib/Src/stm32f4xx_spi.c **** 
 183:./Lib/Src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 184:./Lib/Src/stm32f4xx_spi.c ****   * @{
 185:./Lib/Src/stm32f4xx_spi.c ****   */
 186:./Lib/Src/stm32f4xx_spi.c **** 
 187:./Lib/Src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 188:./Lib/Src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 189:./Lib/Src/stm32f4xx_spi.c ****  *
 190:./Lib/Src/stm32f4xx_spi.c **** @verbatim   
 191:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================
 192:./Lib/Src/stm32f4xx_spi.c ****              ##### Initialization and Configuration functions ##### 
 193:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================  
 194:./Lib/Src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to initialize the SPI 
 195:./Lib/Src/stm32f4xx_spi.c ****       Direction, SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS 
 196:./Lib/Src/stm32f4xx_spi.c ****       Management, SPI Baud Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 197:./Lib/Src/stm32f4xx_spi.c ****   
 198:./Lib/Src/stm32f4xx_spi.c ****  [..] The SPI_Init() function follows the SPI configuration procedures for Master 
 199:./Lib/Src/stm32f4xx_spi.c ****       mode and Slave mode (details for these procedures are available in reference 
 200:./Lib/Src/stm32f4xx_spi.c ****       manual (RM0090)).
 201:./Lib/Src/stm32f4xx_spi.c ****   
ARM GAS  /tmp/ccznMrux.s 			page 5


 202:./Lib/Src/stm32f4xx_spi.c **** @endverbatim
 203:./Lib/Src/stm32f4xx_spi.c ****   * @{
 204:./Lib/Src/stm32f4xx_spi.c ****   */
 205:./Lib/Src/stm32f4xx_spi.c **** 
 206:./Lib/Src/stm32f4xx_spi.c **** /**
 207:./Lib/Src/stm32f4xx_spi.c ****   * @brief  De-initialize the SPIx peripheral registers to their default reset values.
 208:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 209:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 210:./Lib/Src/stm32f4xx_spi.c ****   *         
 211:./Lib/Src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are de-initialized
 212:./Lib/Src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is de-initialized (the extended block's clock
 213:./Lib/Src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 214:./Lib/Src/stm32f4xx_spi.c ****   *             
 215:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 216:./Lib/Src/stm32f4xx_spi.c ****   */
 217:./Lib/Src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 218:./Lib/Src/stm32f4xx_spi.c **** {
  29              		.loc 1 218 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
 219:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 220:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 221:./Lib/Src/stm32f4xx_spi.c **** 
 222:./Lib/Src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  42              		.loc 1 222 6
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 2E4A     		ldr	r2, .L9
  45 000c 9342     		cmp	r3, r2
  46 000e 0AD1     		bne	.L2
 223:./Lib/Src/stm32f4xx_spi.c ****   {
 224:./Lib/Src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 225:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  47              		.loc 1 225 5
  48 0010 0121     		movs	r1, #1
  49 0012 4FF48050 		mov	r0, #4096
  50 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 226:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 227:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  51              		.loc 1 227 5
  52 001a 0021     		movs	r1, #0
  53 001c 4FF48050 		mov	r0, #4096
  54 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 228:./Lib/Src/stm32f4xx_spi.c ****   }
 229:./Lib/Src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
 230:./Lib/Src/stm32f4xx_spi.c ****   {
 231:./Lib/Src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 232:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
ARM GAS  /tmp/ccznMrux.s 			page 6


 233:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 234:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 235:./Lib/Src/stm32f4xx_spi.c ****   }
 236:./Lib/Src/stm32f4xx_spi.c ****   else if (SPIx == SPI3)
 237:./Lib/Src/stm32f4xx_spi.c ****   {
 238:./Lib/Src/stm32f4xx_spi.c ****     /* Enable SPI3 reset state */
 239:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 240:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
 241:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 242:./Lib/Src/stm32f4xx_spi.c ****   }
 243:./Lib/Src/stm32f4xx_spi.c ****   else if (SPIx == SPI4)
 244:./Lib/Src/stm32f4xx_spi.c ****   {
 245:./Lib/Src/stm32f4xx_spi.c ****     /* Enable SPI4 reset state */
 246:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 247:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 248:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 249:./Lib/Src/stm32f4xx_spi.c ****   }
 250:./Lib/Src/stm32f4xx_spi.c ****   else if (SPIx == SPI5)
 251:./Lib/Src/stm32f4xx_spi.c ****   {
 252:./Lib/Src/stm32f4xx_spi.c ****     /* Enable SPI5 reset state */
 253:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 254:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 255:./Lib/Src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 256:./Lib/Src/stm32f4xx_spi.c ****   }
 257:./Lib/Src/stm32f4xx_spi.c ****   else 
 258:./Lib/Src/stm32f4xx_spi.c ****   {
 259:./Lib/Src/stm32f4xx_spi.c ****     if (SPIx == SPI6)
 260:./Lib/Src/stm32f4xx_spi.c ****     {
 261:./Lib/Src/stm32f4xx_spi.c ****       /* Enable SPI6 reset state */
 262:./Lib/Src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 263:./Lib/Src/stm32f4xx_spi.c ****       /* Release SPI6 from reset state */
 264:./Lib/Src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 265:./Lib/Src/stm32f4xx_spi.c ****     }
 266:./Lib/Src/stm32f4xx_spi.c ****   }
 267:./Lib/Src/stm32f4xx_spi.c **** }
  55              		.loc 1 267 1
  56 0024 49E0     		b	.L8
  57              	.L2:
 229:./Lib/Src/stm32f4xx_spi.c ****   {
  58              		.loc 1 229 11
  59 0026 7B68     		ldr	r3, [r7, #4]
  60 0028 274A     		ldr	r2, .L9+4
  61 002a 9342     		cmp	r3, r2
  62 002c 0AD1     		bne	.L4
 232:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
  63              		.loc 1 232 5
  64 002e 0121     		movs	r1, #1
  65 0030 4FF48040 		mov	r0, #16384
  66 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 234:./Lib/Src/stm32f4xx_spi.c ****   }
  67              		.loc 1 234 5
  68 0038 0021     		movs	r1, #0
  69 003a 4FF48040 		mov	r0, #16384
  70 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  71              		.loc 1 267 1
  72 0042 3AE0     		b	.L8
  73              	.L4:
ARM GAS  /tmp/ccznMrux.s 			page 7


 236:./Lib/Src/stm32f4xx_spi.c ****   {
  74              		.loc 1 236 11
  75 0044 7B68     		ldr	r3, [r7, #4]
  76 0046 214A     		ldr	r2, .L9+8
  77 0048 9342     		cmp	r3, r2
  78 004a 0AD1     		bne	.L5
 239:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
  79              		.loc 1 239 5
  80 004c 0121     		movs	r1, #1
  81 004e 4FF40040 		mov	r0, #32768
  82 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 241:./Lib/Src/stm32f4xx_spi.c ****   }
  83              		.loc 1 241 5
  84 0056 0021     		movs	r1, #0
  85 0058 4FF40040 		mov	r0, #32768
  86 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  87              		.loc 1 267 1
  88 0060 2BE0     		b	.L8
  89              	.L5:
 243:./Lib/Src/stm32f4xx_spi.c ****   {
  90              		.loc 1 243 11
  91 0062 7B68     		ldr	r3, [r7, #4]
  92 0064 1A4A     		ldr	r2, .L9+12
  93 0066 9342     		cmp	r3, r2
  94 0068 0AD1     		bne	.L6
 246:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
  95              		.loc 1 246 5
  96 006a 0121     		movs	r1, #1
  97 006c 4FF40050 		mov	r0, #8192
  98 0070 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 248:./Lib/Src/stm32f4xx_spi.c ****   }
  99              		.loc 1 248 5
 100 0074 0021     		movs	r1, #0
 101 0076 4FF40050 		mov	r0, #8192
 102 007a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 103              		.loc 1 267 1
 104 007e 1CE0     		b	.L8
 105              	.L6:
 250:./Lib/Src/stm32f4xx_spi.c ****   {
 106              		.loc 1 250 11
 107 0080 7B68     		ldr	r3, [r7, #4]
 108 0082 144A     		ldr	r2, .L9+16
 109 0084 9342     		cmp	r3, r2
 110 0086 0AD1     		bne	.L7
 253:./Lib/Src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 111              		.loc 1 253 5
 112 0088 0121     		movs	r1, #1
 113 008a 4FF48010 		mov	r0, #1048576
 114 008e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 255:./Lib/Src/stm32f4xx_spi.c ****   }
 115              		.loc 1 255 5
 116 0092 0021     		movs	r1, #0
 117 0094 4FF48010 		mov	r0, #1048576
 118 0098 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 119              		.loc 1 267 1
 120 009c 0DE0     		b	.L8
 121              	.L7:
ARM GAS  /tmp/ccznMrux.s 			page 8


 259:./Lib/Src/stm32f4xx_spi.c ****     {
 122              		.loc 1 259 8
 123 009e 7B68     		ldr	r3, [r7, #4]
 124 00a0 0D4A     		ldr	r2, .L9+20
 125 00a2 9342     		cmp	r3, r2
 126 00a4 09D1     		bne	.L8
 262:./Lib/Src/stm32f4xx_spi.c ****       /* Release SPI6 from reset state */
 127              		.loc 1 262 7
 128 00a6 0121     		movs	r1, #1
 129 00a8 4FF40010 		mov	r0, #2097152
 130 00ac FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 264:./Lib/Src/stm32f4xx_spi.c ****     }
 131              		.loc 1 264 7
 132 00b0 0021     		movs	r1, #0
 133 00b2 4FF40010 		mov	r0, #2097152
 134 00b6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 135              	.L8:
 136              		.loc 1 267 1
 137 00ba 00BF     		nop
 138 00bc 0837     		adds	r7, r7, #8
 139              		.cfi_def_cfa_offset 8
 140 00be BD46     		mov	sp, r7
 141              		.cfi_def_cfa_register 13
 142              		@ sp needed
 143 00c0 80BD     		pop	{r7, pc}
 144              	.L10:
 145 00c2 00BF     		.align	2
 146              	.L9:
 147 00c4 00300140 		.word	1073819648
 148 00c8 00380040 		.word	1073756160
 149 00cc 003C0040 		.word	1073757184
 150 00d0 00340140 		.word	1073820672
 151 00d4 00500140 		.word	1073827840
 152 00d8 00540140 		.word	1073828864
 153              		.cfi_endproc
 154              	.LFE123:
 156              		.section	.text.SPI_Init,"ax",%progbits
 157              		.align	1
 158              		.global	SPI_Init
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 163              	SPI_Init:
 164              	.LFB124:
 268:./Lib/Src/stm32f4xx_spi.c **** 
 269:./Lib/Src/stm32f4xx_spi.c **** /**
 270:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 271:./Lib/Src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 272:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 273:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 274:./Lib/Src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 275:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 276:./Lib/Src/stm32f4xx_spi.c ****   */
 277:./Lib/Src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 278:./Lib/Src/stm32f4xx_spi.c **** {
 165              		.loc 1 278 1
 166              		.cfi_startproc
ARM GAS  /tmp/ccznMrux.s 			page 9


 167              		@ args = 0, pretend = 0, frame = 16
 168              		@ frame_needed = 1, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170 0000 80B4     		push	{r7}
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 85B0     		sub	sp, sp, #20
 174              		.cfi_def_cfa_offset 24
 175 0004 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 177 0006 7860     		str	r0, [r7, #4]
 178 0008 3960     		str	r1, [r7]
 279:./Lib/Src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 179              		.loc 1 279 12
 180 000a 0023     		movs	r3, #0
 181 000c FB81     		strh	r3, [r7, #14]	@ movhi
 280:./Lib/Src/stm32f4xx_spi.c ****   
 281:./Lib/Src/stm32f4xx_spi.c ****   /* check the parameters */
 282:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 283:./Lib/Src/stm32f4xx_spi.c ****   
 284:./Lib/Src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 285:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 286:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 287:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 288:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 289:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 290:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 291:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 292:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 293:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 294:./Lib/Src/stm32f4xx_spi.c **** 
 295:./Lib/Src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 296:./Lib/Src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 297:./Lib/Src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 182              		.loc 1 297 10
 183 000e 7B68     		ldr	r3, [r7, #4]
 184 0010 1B88     		ldrh	r3, [r3]	@ movhi
 185 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 298:./Lib/Src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 299:./Lib/Src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 186              		.loc 1 299 10
 187 0014 FB89     		ldrh	r3, [r7, #14]	@ movhi
 188 0016 03F44153 		and	r3, r3, #12352
 189 001a FB81     		strh	r3, [r7, #14]	@ movhi
 300:./Lib/Src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 301:./Lib/Src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 302:./Lib/Src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 303:./Lib/Src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 304:./Lib/Src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 305:./Lib/Src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 306:./Lib/Src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 307:./Lib/Src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 308:./Lib/Src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 190              		.loc 1 308 48
 191 001c 3B68     		ldr	r3, [r7]
 192 001e 1A88     		ldrh	r2, [r3]
 193              		.loc 1 308 80
ARM GAS  /tmp/ccznMrux.s 			page 10


 194 0020 3B68     		ldr	r3, [r7]
 195 0022 5B88     		ldrh	r3, [r3, #2]
 196              		.loc 1 308 13
 197 0024 1343     		orrs	r3, r3, r2
 198 0026 9AB2     		uxth	r2, r3
 309:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 199              		.loc 1 309 33
 200 0028 3B68     		ldr	r3, [r7]
 201 002a 9B88     		ldrh	r3, [r3, #4]
 308:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 202              		.loc 1 308 13
 203 002c 1343     		orrs	r3, r3, r2
 204 002e 9AB2     		uxth	r2, r3
 205              		.loc 1 309 64
 206 0030 3B68     		ldr	r3, [r7]
 207 0032 DB88     		ldrh	r3, [r3, #6]
 308:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 208              		.loc 1 308 13
 209 0034 1343     		orrs	r3, r3, r2
 210 0036 9AB2     		uxth	r2, r3
 310:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 211              		.loc 1 310 33
 212 0038 3B68     		ldr	r3, [r7]
 213 003a 1B89     		ldrh	r3, [r3, #8]
 308:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 214              		.loc 1 308 13
 215 003c 1343     		orrs	r3, r3, r2
 216 003e 9AB2     		uxth	r2, r3
 217              		.loc 1 310 60
 218 0040 3B68     		ldr	r3, [r7]
 219 0042 5B89     		ldrh	r3, [r3, #10]
 308:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 220              		.loc 1 308 13
 221 0044 1343     		orrs	r3, r3, r2
 222 0046 9AB2     		uxth	r2, r3
 311:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 223              		.loc 1 311 33
 224 0048 3B68     		ldr	r3, [r7]
 225 004a 9B89     		ldrh	r3, [r3, #12]
 308:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 226              		.loc 1 308 13
 227 004c 1343     		orrs	r3, r3, r2
 228 004e 9AB2     		uxth	r2, r3
 229              		.loc 1 311 73
 230 0050 3B68     		ldr	r3, [r7]
 231 0052 DB89     		ldrh	r3, [r3, #14]
 308:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 232              		.loc 1 308 13
 233 0054 1343     		orrs	r3, r3, r2
 234 0056 9AB2     		uxth	r2, r3
 308:./Lib/Src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 235              		.loc 1 308 10
 236 0058 FB89     		ldrh	r3, [r7, #14]	@ movhi
 237 005a 1343     		orrs	r3, r3, r2
 238 005c FB81     		strh	r3, [r7, #14]	@ movhi
 312:./Lib/Src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 313:./Lib/Src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
ARM GAS  /tmp/ccznMrux.s 			page 11


 239              		.loc 1 313 13
 240 005e 7B68     		ldr	r3, [r7, #4]
 241 0060 FA89     		ldrh	r2, [r7, #14]	@ movhi
 242 0062 1A80     		strh	r2, [r3]	@ movhi
 314:./Lib/Src/stm32f4xx_spi.c **** 
 315:./Lib/Src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 316:./Lib/Src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 243              		.loc 1 316 7
 244 0064 7B68     		ldr	r3, [r7, #4]
 245 0066 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 246 0068 9BB2     		uxth	r3, r3
 247              		.loc 1 316 17
 248 006a 23F40063 		bic	r3, r3, #2048
 249 006e 9AB2     		uxth	r2, r3
 250 0070 7B68     		ldr	r3, [r7, #4]
 251 0072 9A83     		strh	r2, [r3, #28]	@ movhi
 317:./Lib/Src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 318:./Lib/Src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 319:./Lib/Src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 252              		.loc 1 319 31
 253 0074 3B68     		ldr	r3, [r7]
 254 0076 1A8A     		ldrh	r2, [r3, #16]
 255              		.loc 1 319 15
 256 0078 7B68     		ldr	r3, [r7, #4]
 257 007a 1A82     		strh	r2, [r3, #16]	@ movhi
 320:./Lib/Src/stm32f4xx_spi.c **** }
 258              		.loc 1 320 1
 259 007c 00BF     		nop
 260 007e 1437     		adds	r7, r7, #20
 261              		.cfi_def_cfa_offset 4
 262 0080 BD46     		mov	sp, r7
 263              		.cfi_def_cfa_register 13
 264              		@ sp needed
 265 0082 5DF8047B 		ldr	r7, [sp], #4
 266              		.cfi_restore 7
 267              		.cfi_def_cfa_offset 0
 268 0086 7047     		bx	lr
 269              		.cfi_endproc
 270              	.LFE124:
 272              		.section	.text.I2S_Init,"ax",%progbits
 273              		.align	1
 274              		.global	I2S_Init
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 279              	I2S_Init:
 280              	.LFB125:
 321:./Lib/Src/stm32f4xx_spi.c **** 
 322:./Lib/Src/stm32f4xx_spi.c **** /**
 323:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 324:./Lib/Src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 325:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 326:./Lib/Src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 327:./Lib/Src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 328:./Lib/Src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 329:./Lib/Src/stm32f4xx_spi.c ****   *           
 330:./Lib/Src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
ARM GAS  /tmp/ccznMrux.s 			page 12


 331:./Lib/Src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 332:./Lib/Src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 333:./Lib/Src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 334:./Lib/Src/stm32f4xx_spi.c ****   * 
 335:./Lib/Src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 336:./Lib/Src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 337:./Lib/Src/stm32f4xx_spi.c ****   *         to the value of the source clock frequency (in Hz).
 338:./Lib/Src/stm32f4xx_spi.c ****   *  
 339:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 340:./Lib/Src/stm32f4xx_spi.c ****   */
 341:./Lib/Src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 342:./Lib/Src/stm32f4xx_spi.c **** {
 281              		.loc 1 342 1
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 40
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286 0000 80B4     		push	{r7}
 287              		.cfi_def_cfa_offset 4
 288              		.cfi_offset 7, -4
 289 0002 8BB0     		sub	sp, sp, #44
 290              		.cfi_def_cfa_offset 48
 291 0004 00AF     		add	r7, sp, #0
 292              		.cfi_def_cfa_register 7
 293 0006 7860     		str	r0, [r7, #4]
 294 0008 3960     		str	r1, [r7]
 343:./Lib/Src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 295              		.loc 1 343 12
 296 000a 0023     		movs	r3, #0
 297 000c FB82     		strh	r3, [r7, #22]	@ movhi
 298              		.loc 1 343 24
 299 000e 0223     		movs	r3, #2
 300 0010 FB84     		strh	r3, [r7, #38]	@ movhi
 301              		.loc 1 343 36
 302 0012 0023     		movs	r3, #0
 303 0014 BB84     		strh	r3, [r7, #36]	@ movhi
 304              		.loc 1 343 48
 305 0016 0123     		movs	r3, #1
 306 0018 7B84     		strh	r3, [r7, #34]	@ movhi
 344:./Lib/Src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 307              		.loc 1 344 12
 308 001a 0023     		movs	r3, #0
 309 001c FB61     		str	r3, [r7, #28]
 310              		.loc 1 344 21
 311 001e 0023     		movs	r3, #0
 312 0020 BB61     		str	r3, [r7, #24]
 345:./Lib/Src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 346:./Lib/Src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 313              		.loc 1 346 12
 314 0022 0023     		movs	r3, #0
 315 0024 3B61     		str	r3, [r7, #16]
 316              		.loc 1 346 22
 317 0026 0023     		movs	r3, #0
 318 0028 FB60     		str	r3, [r7, #12]
 319              		.loc 1 346 32
 320 002a 0023     		movs	r3, #0
 321 002c BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccznMrux.s 			page 13


 347:./Lib/Src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 348:./Lib/Src/stm32f4xx_spi.c ****   
 349:./Lib/Src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 350:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 351:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 352:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 353:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 354:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 355:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 356:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 357:./Lib/Src/stm32f4xx_spi.c **** 
 358:./Lib/Src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 359:./Lib/Src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 360:./Lib/Src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 322              		.loc 1 360 7
 323 002e 7B68     		ldr	r3, [r7, #4]
 324 0030 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 325 0032 9BB2     		uxth	r3, r3
 326              		.loc 1 360 17
 327 0034 23F47B63 		bic	r3, r3, #4016
 328 0038 23F00F03 		bic	r3, r3, #15
 329 003c 9AB2     		uxth	r2, r3
 330 003e 7B68     		ldr	r3, [r7, #4]
 331 0040 9A83     		strh	r2, [r3, #28]	@ movhi
 361:./Lib/Src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 332              		.loc 1 361 15
 333 0042 7B68     		ldr	r3, [r7, #4]
 334 0044 0222     		movs	r2, #2
 335 0046 1A84     		strh	r2, [r3, #32]	@ movhi
 362:./Lib/Src/stm32f4xx_spi.c ****   
 363:./Lib/Src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 364:./Lib/Src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 336              		.loc 1 364 10
 337 0048 7B68     		ldr	r3, [r7, #4]
 338 004a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 339 004c FB82     		strh	r3, [r7, #22]	@ movhi
 365:./Lib/Src/stm32f4xx_spi.c ****   
 366:./Lib/Src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 367:./Lib/Src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 340              		.loc 1 367 20
 341 004e 3B68     		ldr	r3, [r7]
 342 0050 9B68     		ldr	r3, [r3, #8]
 343              		.loc 1 367 5
 344 0052 022B     		cmp	r3, #2
 345 0054 04D1     		bne	.L13
 368:./Lib/Src/stm32f4xx_spi.c ****   {
 369:./Lib/Src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 346              		.loc 1 369 12
 347 0056 0023     		movs	r3, #0
 348 0058 BB84     		strh	r3, [r7, #36]	@ movhi
 370:./Lib/Src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 349              		.loc 1 370 12
 350 005a 0223     		movs	r3, #2
 351 005c FB84     		strh	r3, [r7, #38]	@ movhi
 352 005e 87E0     		b	.L14
 353              	.L13:
 371:./Lib/Src/stm32f4xx_spi.c ****   }
ARM GAS  /tmp/ccznMrux.s 			page 14


 372:./Lib/Src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 373:./Lib/Src/stm32f4xx_spi.c ****   else
 374:./Lib/Src/stm32f4xx_spi.c ****   {
 375:./Lib/Src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 376:./Lib/Src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 354              		.loc 1 376 22
 355 0060 3B68     		ldr	r3, [r7]
 356 0062 9B88     		ldrh	r3, [r3, #4]
 357              		.loc 1 376 7
 358 0064 002B     		cmp	r3, #0
 359 0066 02D1     		bne	.L15
 377:./Lib/Src/stm32f4xx_spi.c ****     {
 378:./Lib/Src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 379:./Lib/Src/stm32f4xx_spi.c ****       packetlength = 16;
 360              		.loc 1 379 20
 361 0068 1023     		movs	r3, #16
 362 006a 7B84     		strh	r3, [r7, #34]	@ movhi
 363 006c 01E0     		b	.L16
 364              	.L15:
 380:./Lib/Src/stm32f4xx_spi.c ****     }
 381:./Lib/Src/stm32f4xx_spi.c ****     else
 382:./Lib/Src/stm32f4xx_spi.c ****     {
 383:./Lib/Src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 384:./Lib/Src/stm32f4xx_spi.c ****       packetlength = 32;
 365              		.loc 1 384 20
 366 006e 2023     		movs	r3, #32
 367 0070 7B84     		strh	r3, [r7, #34]	@ movhi
 368              	.L16:
 385:./Lib/Src/stm32f4xx_spi.c ****     }
 386:./Lib/Src/stm32f4xx_spi.c **** 
 387:./Lib/Src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_Standard <= I2S_Standard_LSB)
 369              		.loc 1 387 22
 370 0072 3B68     		ldr	r3, [r7]
 371 0074 5B88     		ldrh	r3, [r3, #2]
 372              		.loc 1 387 7
 373 0076 202B     		cmp	r3, #32
 374 0078 02D8     		bhi	.L17
 388:./Lib/Src/stm32f4xx_spi.c ****     {
 389:./Lib/Src/stm32f4xx_spi.c ****       /* In I2S standard packet length is multiplied by 2 */
 390:./Lib/Src/stm32f4xx_spi.c ****       packetlength = packetlength * 2;
 375              		.loc 1 390 20
 376 007a 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 377 007c 5B00     		lsls	r3, r3, #1
 378 007e 7B84     		strh	r3, [r7, #34]	@ movhi
 379              	.L17:
 391:./Lib/Src/stm32f4xx_spi.c ****     }
 392:./Lib/Src/stm32f4xx_spi.c **** 
 393:./Lib/Src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 394:./Lib/Src/stm32f4xx_spi.c ****       
 395:./Lib/Src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 396:./Lib/Src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 397:./Lib/Src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 398:./Lib/Src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 399:./Lib/Src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 400:./Lib/Src/stm32f4xx_spi.c ****     {
 401:./Lib/Src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 402:./Lib/Src/stm32f4xx_spi.c ****     }
ARM GAS  /tmp/ccznMrux.s 			page 15


 403:./Lib/Src/stm32f4xx_spi.c ****     
 404:./Lib/Src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 405:./Lib/Src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 406:./Lib/Src/stm32f4xx_spi.c **** 
 407:./Lib/Src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 408:./Lib/Src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 409:./Lib/Src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 380              		.loc 1 409 13
 381 0080 544B     		ldr	r3, .L25
 382 0082 9B68     		ldr	r3, [r3, #8]
 383              		.loc 1 409 20
 384 0084 03F40003 		and	r3, r3, #8388608
 385              		.loc 1 409 8
 386 0088 002B     		cmp	r3, #0
 387 008a 05D0     		beq	.L18
 410:./Lib/Src/stm32f4xx_spi.c ****     {
 411:./Lib/Src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 388              		.loc 1 411 10
 389 008c 514B     		ldr	r3, .L25
 390 008e 9B68     		ldr	r3, [r3, #8]
 391 0090 504A     		ldr	r2, .L25
 392              		.loc 1 411 17
 393 0092 23F40003 		bic	r3, r3, #8388608
 394 0096 9360     		str	r3, [r2, #8]
 395              	.L18:
 412:./Lib/Src/stm32f4xx_spi.c ****     }    
 413:./Lib/Src/stm32f4xx_spi.c ****     
 414:./Lib/Src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 415:./Lib/Src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 396              		.loc 1 415 28
 397 0098 4E4B     		ldr	r3, .L25
 398 009a D3F88430 		ldr	r3, [r3, #132]
 399              		.loc 1 415 67
 400 009e 9B09     		lsrs	r3, r3, #6
 401              		.loc 1 415 10
 402 00a0 C3F30803 		ubfx	r3, r3, #0, #9
 403 00a4 FB60     		str	r3, [r7, #12]
 416:./Lib/Src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 417:./Lib/Src/stm32f4xx_spi.c ****     
 418:./Lib/Src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 419:./Lib/Src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 404              		.loc 1 419 28
 405 00a6 4B4B     		ldr	r3, .L25
 406 00a8 D3F88430 		ldr	r3, [r3, #132]
 407              		.loc 1 419 67
 408 00ac 1B0F     		lsrs	r3, r3, #28
 409              		.loc 1 419 10
 410 00ae 03F00703 		and	r3, r3, #7
 411 00b2 BB60     		str	r3, [r7, #8]
 420:./Lib/Src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 421:./Lib/Src/stm32f4xx_spi.c ****     
 422:./Lib/Src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 423:./Lib/Src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 412              		.loc 1 423 26
 413 00b4 474B     		ldr	r3, .L25
 414 00b6 5B68     		ldr	r3, [r3, #4]
 415              		.loc 1 423 10
ARM GAS  /tmp/ccznMrux.s 			page 16


 416 00b8 03F03F03 		and	r3, r3, #63
 417 00bc 3B61     		str	r3, [r7, #16]
 424:./Lib/Src/stm32f4xx_spi.c **** 
 425:./Lib/Src/stm32f4xx_spi.c ****     if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)
 418              		.loc 1 425 12
 419 00be 454B     		ldr	r3, .L25
 420 00c0 5B68     		ldr	r3, [r3, #4]
 421              		.loc 1 425 22
 422 00c2 03F48003 		and	r3, r3, #4194304
 423              		.loc 1 425 7
 424 00c6 B3F5800F 		cmp	r3, #4194304
 425 00ca 0BD1     		bne	.L19
 426:./Lib/Src/stm32f4xx_spi.c ****     {
 427:./Lib/Src/stm32f4xx_spi.c ****       /* Get the I2S source clock value */
 428:./Lib/Src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 426              		.loc 1 428 39
 427 00cc 424A     		ldr	r2, .L25+4
 428 00ce 3B69     		ldr	r3, [r7, #16]
 429 00d0 B2FBF3F3 		udiv	r3, r2, r3
 430              		.loc 1 428 47
 431 00d4 FA68     		ldr	r2, [r7, #12]
 432 00d6 03FB02F2 		mul	r2, r3, r2
 433              		.loc 1 428 14
 434 00da BB68     		ldr	r3, [r7, #8]
 435 00dc B2FBF3F3 		udiv	r3, r2, r3
 436 00e0 BB61     		str	r3, [r7, #24]
 437 00e2 0AE0     		b	.L20
 438              	.L19:
 429:./Lib/Src/stm32f4xx_spi.c ****     }
 430:./Lib/Src/stm32f4xx_spi.c ****     else
 431:./Lib/Src/stm32f4xx_spi.c ****     { /* Get the I2S source clock value */
 432:./Lib/Src/stm32f4xx_spi.c ****       i2sclk = (uint32_t)(((HSI_VALUE / pllm) * plln) / pllr);
 439              		.loc 1 432 39
 440 00e4 3D4A     		ldr	r2, .L25+8
 441 00e6 3B69     		ldr	r3, [r7, #16]
 442 00e8 B2FBF3F3 		udiv	r3, r2, r3
 443              		.loc 1 432 47
 444 00ec FA68     		ldr	r2, [r7, #12]
 445 00ee 03FB02F2 		mul	r2, r3, r2
 446              		.loc 1 432 14
 447 00f2 BB68     		ldr	r3, [r7, #8]
 448 00f4 B2FBF3F3 		udiv	r3, r2, r3
 449 00f8 BB61     		str	r3, [r7, #24]
 450              	.L20:
 433:./Lib/Src/stm32f4xx_spi.c ****     }
 434:./Lib/Src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 435:./Lib/Src/stm32f4xx_spi.c ****     
 436:./Lib/Src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 437:./Lib/Src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 451              		.loc 1 437 22
 452 00fa 3B68     		ldr	r3, [r7]
 453 00fc DB88     		ldrh	r3, [r3, #6]
 454              		.loc 1 437 7
 455 00fe B3F5007F 		cmp	r3, #512
 456 0102 0FD1     		bne	.L21
 438:./Lib/Src/stm32f4xx_spi.c ****     {
 439:./Lib/Src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
ARM GAS  /tmp/ccznMrux.s 			page 17


 440:./Lib/Src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 457              		.loc 1 440 35
 458 0104 BB69     		ldr	r3, [r7, #24]
 459 0106 1A0A     		lsrs	r2, r3, #8
 460              		.loc 1 440 42
 461 0108 1346     		mov	r3, r2
 462 010a 9B00     		lsls	r3, r3, #2
 463 010c 1344     		add	r3, r3, r2
 464 010e 5B00     		lsls	r3, r3, #1
 465 0110 1A46     		mov	r2, r3
 466              		.loc 1 440 64
 467 0112 3B68     		ldr	r3, [r7]
 468 0114 9B68     		ldr	r3, [r3, #8]
 469              		.loc 1 440 48
 470 0116 B2FBF3F3 		udiv	r3, r2, r3
 471              		.loc 1 440 13
 472 011a 9BB2     		uxth	r3, r3
 473 011c 0533     		adds	r3, r3, #5
 474 011e 9BB2     		uxth	r3, r3
 475              		.loc 1 440 11
 476 0120 FB61     		str	r3, [r7, #28]
 477 0122 12E0     		b	.L22
 478              	.L21:
 441:./Lib/Src/stm32f4xx_spi.c ****     }
 442:./Lib/Src/stm32f4xx_spi.c ****     else
 443:./Lib/Src/stm32f4xx_spi.c ****     {
 444:./Lib/Src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 445:./Lib/Src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 479              		.loc 1 445 41
 480 0124 7B8C     		ldrh	r3, [r7, #34]
 481 0126 5B01     		lsls	r3, r3, #5
 482 0128 1A46     		mov	r2, r3
 483              		.loc 1 445 35
 484 012a BB69     		ldr	r3, [r7, #24]
 485 012c B3FBF2F2 		udiv	r2, r3, r2
 486              		.loc 1 445 58
 487 0130 1346     		mov	r3, r2
 488 0132 9B00     		lsls	r3, r3, #2
 489 0134 1344     		add	r3, r3, r2
 490 0136 5B00     		lsls	r3, r3, #1
 491 0138 1A46     		mov	r2, r3
 492              		.loc 1 445 80
 493 013a 3B68     		ldr	r3, [r7]
 494 013c 9B68     		ldr	r3, [r3, #8]
 495              		.loc 1 445 64
 496 013e B2FBF3F3 		udiv	r3, r2, r3
 497              		.loc 1 445 13
 498 0142 9BB2     		uxth	r3, r3
 499 0144 0533     		adds	r3, r3, #5
 500 0146 9BB2     		uxth	r3, r3
 501              		.loc 1 445 11
 502 0148 FB61     		str	r3, [r7, #28]
 503              	.L22:
 446:./Lib/Src/stm32f4xx_spi.c ****     }
 447:./Lib/Src/stm32f4xx_spi.c ****     
 448:./Lib/Src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 449:./Lib/Src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
ARM GAS  /tmp/ccznMrux.s 			page 18


 504              		.loc 1 449 9
 505 014a FB69     		ldr	r3, [r7, #28]
 506 014c 244A     		ldr	r2, .L25+12
 507 014e A2FB0323 		umull	r2, r3, r2, r3
 508 0152 DB08     		lsrs	r3, r3, #3
 509 0154 FB61     		str	r3, [r7, #28]
 450:./Lib/Src/stm32f4xx_spi.c ****       
 451:./Lib/Src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 452:./Lib/Src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 510              		.loc 1 452 14
 511 0156 FB69     		ldr	r3, [r7, #28]
 512 0158 9BB2     		uxth	r3, r3
 513              		.loc 1 452 12
 514 015a 03F00103 		and	r3, r3, #1
 515 015e BB84     		strh	r3, [r7, #36]	@ movhi
 453:./Lib/Src/stm32f4xx_spi.c ****    
 454:./Lib/Src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 455:./Lib/Src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 516              		.loc 1 455 30
 517 0160 BB8C     		ldrh	r3, [r7, #36]
 518 0162 FA69     		ldr	r2, [r7, #28]
 519 0164 D31A     		subs	r3, r2, r3
 520              		.loc 1 455 40
 521 0166 5B08     		lsrs	r3, r3, #1
 522              		.loc 1 455 12
 523 0168 FB84     		strh	r3, [r7, #38]	@ movhi
 456:./Lib/Src/stm32f4xx_spi.c ****    
 457:./Lib/Src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 458:./Lib/Src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 524              		.loc 1 458 12
 525 016a BB8C     		ldrh	r3, [r7, #36]	@ movhi
 526 016c 1B02     		lsls	r3, r3, #8
 527 016e BB84     		strh	r3, [r7, #36]	@ movhi
 528              	.L14:
 459:./Lib/Src/stm32f4xx_spi.c ****   }
 460:./Lib/Src/stm32f4xx_spi.c **** 
 461:./Lib/Src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 462:./Lib/Src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 529              		.loc 1 462 6
 530 0170 FB8C     		ldrh	r3, [r7, #38]
 531 0172 012B     		cmp	r3, #1
 532 0174 02D9     		bls	.L23
 533              		.loc 1 462 20 discriminator 1
 534 0176 FB8C     		ldrh	r3, [r7, #38]
 535 0178 FF2B     		cmp	r3, #255
 536 017a 03D9     		bls	.L24
 537              	.L23:
 463:./Lib/Src/stm32f4xx_spi.c ****   {
 464:./Lib/Src/stm32f4xx_spi.c ****     /* Set the default values */
 465:./Lib/Src/stm32f4xx_spi.c ****     i2sdiv = 2;
 538              		.loc 1 465 12
 539 017c 0223     		movs	r3, #2
 540 017e FB84     		strh	r3, [r7, #38]	@ movhi
 466:./Lib/Src/stm32f4xx_spi.c ****     i2sodd = 0;
 541              		.loc 1 466 12
 542 0180 0023     		movs	r3, #0
 543 0182 BB84     		strh	r3, [r7, #36]	@ movhi
ARM GAS  /tmp/ccznMrux.s 			page 19


 544              	.L24:
 467:./Lib/Src/stm32f4xx_spi.c ****   }
 468:./Lib/Src/stm32f4xx_spi.c **** 
 469:./Lib/Src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 470:./Lib/Src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 545              		.loc 1 470 91
 546 0184 3B68     		ldr	r3, [r7]
 547 0186 DA88     		ldrh	r2, [r3, #6]
 548              		.loc 1 470 47
 549 0188 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 550 018a 1343     		orrs	r3, r3, r2
 551 018c 9AB2     		uxth	r2, r3
 552              		.loc 1 470 17
 553 018e FB8C     		ldrh	r3, [r7, #38]	@ movhi
 554 0190 1343     		orrs	r3, r3, r2
 555 0192 9AB2     		uxth	r2, r3
 556              		.loc 1 470 15
 557 0194 7B68     		ldr	r3, [r7, #4]
 558 0196 1A84     		strh	r2, [r3, #32]	@ movhi
 471:./Lib/Src/stm32f4xx_spi.c ****  
 472:./Lib/Src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 473:./Lib/Src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 559              		.loc 1 473 80
 560 0198 3B68     		ldr	r3, [r7]
 561 019a 1A88     		ldrh	r2, [r3]
 474:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 562              		.loc 1 474 44
 563 019c 3B68     		ldr	r3, [r7]
 564 019e 5988     		ldrh	r1, [r3, #2]
 565              		.loc 1 474 86
 566 01a0 3B68     		ldr	r3, [r7]
 567 01a2 9888     		ldrh	r0, [r3, #4]
 475:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 568              		.loc 1 475 43
 569 01a4 3B68     		ldr	r3, [r7]
 570 01a6 9B89     		ldrh	r3, [r3, #12]
 474:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 571              		.loc 1 474 61
 572 01a8 0343     		orrs	r3, r3, r0
 573 01aa 9BB2     		uxth	r3, r3
 474:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 574              		.loc 1 474 19
 575 01ac 0B43     		orrs	r3, r3, r1
 576 01ae 9BB2     		uxth	r3, r3
 473:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 577              		.loc 1 473 55
 578 01b0 1343     		orrs	r3, r3, r2
 579 01b2 9AB2     		uxth	r2, r3
 473:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 580              		.loc 1 473 10
 581 01b4 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 582 01b6 1343     		orrs	r3, r3, r2
 583 01b8 9BB2     		uxth	r3, r3
 584 01ba 43F40063 		orr	r3, r3, #2048
 585 01be FB82     		strh	r3, [r7, #22]	@ movhi
 476:./Lib/Src/stm32f4xx_spi.c ****  
 477:./Lib/Src/stm32f4xx_spi.c **** #if defined(SPI_I2SCFGR_ASTRTEN)
ARM GAS  /tmp/ccznMrux.s 			page 20


 478:./Lib/Src/stm32f4xx_spi.c ****   if((I2S_InitStruct->I2S_Standard  == I2S_Standard_PCMShort) || (I2S_InitStruct->I2S_Standard  == 
 479:./Lib/Src/stm32f4xx_spi.c ****   {
 480:./Lib/Src/stm32f4xx_spi.c ****     /* Write to SPIx I2SCFGR */  
 481:./Lib/Src/stm32f4xx_spi.c ****     SPIx->I2SCFGR = tmpreg | SPI_I2SCFGR_ASTRTEN;
 482:./Lib/Src/stm32f4xx_spi.c ****   }
 483:./Lib/Src/stm32f4xx_spi.c **** #else
 484:./Lib/Src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 485:./Lib/Src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg ;
 586              		.loc 1 485 17
 587 01c0 7B68     		ldr	r3, [r7, #4]
 588 01c2 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 589 01c4 9A83     		strh	r2, [r3, #28]	@ movhi
 486:./Lib/Src/stm32f4xx_spi.c **** #endif 
 487:./Lib/Src/stm32f4xx_spi.c **** }
 590              		.loc 1 487 1
 591 01c6 00BF     		nop
 592 01c8 2C37     		adds	r7, r7, #44
 593              		.cfi_def_cfa_offset 4
 594 01ca BD46     		mov	sp, r7
 595              		.cfi_def_cfa_register 13
 596              		@ sp needed
 597 01cc 5DF8047B 		ldr	r7, [sp], #4
 598              		.cfi_restore 7
 599              		.cfi_def_cfa_offset 0
 600 01d0 7047     		bx	lr
 601              	.L26:
 602 01d2 00BF     		.align	2
 603              	.L25:
 604 01d4 00380240 		.word	1073887232
 605 01d8 40787D01 		.word	25000000
 606 01dc 0024F400 		.word	16000000
 607 01e0 CDCCCCCC 		.word	-858993459
 608              		.cfi_endproc
 609              	.LFE125:
 611              		.section	.text.SPI_StructInit,"ax",%progbits
 612              		.align	1
 613              		.global	SPI_StructInit
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 618              	SPI_StructInit:
 619              	.LFB126:
 488:./Lib/Src/stm32f4xx_spi.c **** 
 489:./Lib/Src/stm32f4xx_spi.c **** /**
 490:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 491:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 492:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 493:./Lib/Src/stm32f4xx_spi.c ****   */
 494:./Lib/Src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 495:./Lib/Src/stm32f4xx_spi.c **** {
 620              		.loc 1 495 1
 621              		.cfi_startproc
 622              		@ args = 0, pretend = 0, frame = 8
 623              		@ frame_needed = 1, uses_anonymous_args = 0
 624              		@ link register save eliminated.
 625 0000 80B4     		push	{r7}
 626              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccznMrux.s 			page 21


 627              		.cfi_offset 7, -4
 628 0002 83B0     		sub	sp, sp, #12
 629              		.cfi_def_cfa_offset 16
 630 0004 00AF     		add	r7, sp, #0
 631              		.cfi_def_cfa_register 7
 632 0006 7860     		str	r0, [r7, #4]
 496:./Lib/Src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 497:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 498:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 633              		.loc 1 498 33
 634 0008 7B68     		ldr	r3, [r7, #4]
 635 000a 0022     		movs	r2, #0
 636 000c 1A80     		strh	r2, [r3]	@ movhi
 499:./Lib/Src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 500:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 637              		.loc 1 500 28
 638 000e 7B68     		ldr	r3, [r7, #4]
 639 0010 0022     		movs	r2, #0
 640 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 501:./Lib/Src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 502:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 641              		.loc 1 502 32
 642 0014 7B68     		ldr	r3, [r7, #4]
 643 0016 0022     		movs	r2, #0
 644 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 503:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 504:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 645              		.loc 1 504 28
 646 001a 7B68     		ldr	r3, [r7, #4]
 647 001c 0022     		movs	r2, #0
 648 001e DA80     		strh	r2, [r3, #6]	@ movhi
 505:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 506:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 649              		.loc 1 506 28
 650 0020 7B68     		ldr	r3, [r7, #4]
 651 0022 0022     		movs	r2, #0
 652 0024 1A81     		strh	r2, [r3, #8]	@ movhi
 507:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 508:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 653              		.loc 1 508 27
 654 0026 7B68     		ldr	r3, [r7, #4]
 655 0028 0022     		movs	r2, #0
 656 002a 5A81     		strh	r2, [r3, #10]	@ movhi
 509:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 510:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 657              		.loc 1 510 41
 658 002c 7B68     		ldr	r3, [r7, #4]
 659 002e 0022     		movs	r2, #0
 660 0030 9A81     		strh	r2, [r3, #12]	@ movhi
 511:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 512:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 661              		.loc 1 512 32
 662 0032 7B68     		ldr	r3, [r7, #4]
 663 0034 0022     		movs	r2, #0
 664 0036 DA81     		strh	r2, [r3, #14]	@ movhi
 513:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 514:./Lib/Src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
ARM GAS  /tmp/ccznMrux.s 			page 22


 665              		.loc 1 514 37
 666 0038 7B68     		ldr	r3, [r7, #4]
 667 003a 0722     		movs	r2, #7
 668 003c 1A82     		strh	r2, [r3, #16]	@ movhi
 515:./Lib/Src/stm32f4xx_spi.c **** }
 669              		.loc 1 515 1
 670 003e 00BF     		nop
 671 0040 0C37     		adds	r7, r7, #12
 672              		.cfi_def_cfa_offset 4
 673 0042 BD46     		mov	sp, r7
 674              		.cfi_def_cfa_register 13
 675              		@ sp needed
 676 0044 5DF8047B 		ldr	r7, [sp], #4
 677              		.cfi_restore 7
 678              		.cfi_def_cfa_offset 0
 679 0048 7047     		bx	lr
 680              		.cfi_endproc
 681              	.LFE126:
 683              		.section	.text.I2S_StructInit,"ax",%progbits
 684              		.align	1
 685              		.global	I2S_StructInit
 686              		.syntax unified
 687              		.thumb
 688              		.thumb_func
 690              	I2S_StructInit:
 691              	.LFB127:
 516:./Lib/Src/stm32f4xx_spi.c **** 
 517:./Lib/Src/stm32f4xx_spi.c **** /**
 518:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 519:./Lib/Src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 520:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 521:./Lib/Src/stm32f4xx_spi.c ****   */
 522:./Lib/Src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 523:./Lib/Src/stm32f4xx_spi.c **** {
 692              		.loc 1 523 1
 693              		.cfi_startproc
 694              		@ args = 0, pretend = 0, frame = 8
 695              		@ frame_needed = 1, uses_anonymous_args = 0
 696              		@ link register save eliminated.
 697 0000 80B4     		push	{r7}
 698              		.cfi_def_cfa_offset 4
 699              		.cfi_offset 7, -4
 700 0002 83B0     		sub	sp, sp, #12
 701              		.cfi_def_cfa_offset 16
 702 0004 00AF     		add	r7, sp, #0
 703              		.cfi_def_cfa_register 7
 704 0006 7860     		str	r0, [r7, #4]
 524:./Lib/Src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 525:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 526:./Lib/Src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 705              		.loc 1 526 28
 706 0008 7B68     		ldr	r3, [r7, #4]
 707 000a 0022     		movs	r2, #0
 708 000c 1A80     		strh	r2, [r3]	@ movhi
 527:./Lib/Src/stm32f4xx_spi.c ****   
 528:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 529:./Lib/Src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
ARM GAS  /tmp/ccznMrux.s 			page 23


 709              		.loc 1 529 32
 710 000e 7B68     		ldr	r3, [r7, #4]
 711 0010 0022     		movs	r2, #0
 712 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 530:./Lib/Src/stm32f4xx_spi.c ****   
 531:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 532:./Lib/Src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 713              		.loc 1 532 34
 714 0014 7B68     		ldr	r3, [r7, #4]
 715 0016 0022     		movs	r2, #0
 716 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 533:./Lib/Src/stm32f4xx_spi.c ****   
 534:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 535:./Lib/Src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 717              		.loc 1 535 34
 718 001a 7B68     		ldr	r3, [r7, #4]
 719 001c 0022     		movs	r2, #0
 720 001e DA80     		strh	r2, [r3, #6]	@ movhi
 536:./Lib/Src/stm32f4xx_spi.c ****   
 537:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 538:./Lib/Src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 721              		.loc 1 538 33
 722 0020 7B68     		ldr	r3, [r7, #4]
 723 0022 0222     		movs	r2, #2
 724 0024 9A60     		str	r2, [r3, #8]
 539:./Lib/Src/stm32f4xx_spi.c ****   
 540:./Lib/Src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 541:./Lib/Src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 725              		.loc 1 541 28
 726 0026 7B68     		ldr	r3, [r7, #4]
 727 0028 0022     		movs	r2, #0
 728 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 542:./Lib/Src/stm32f4xx_spi.c **** }
 729              		.loc 1 542 1
 730 002c 00BF     		nop
 731 002e 0C37     		adds	r7, r7, #12
 732              		.cfi_def_cfa_offset 4
 733 0030 BD46     		mov	sp, r7
 734              		.cfi_def_cfa_register 13
 735              		@ sp needed
 736 0032 5DF8047B 		ldr	r7, [sp], #4
 737              		.cfi_restore 7
 738              		.cfi_def_cfa_offset 0
 739 0036 7047     		bx	lr
 740              		.cfi_endproc
 741              	.LFE127:
 743              		.section	.text.SPI_Cmd,"ax",%progbits
 744              		.align	1
 745              		.global	SPI_Cmd
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 750              	SPI_Cmd:
 751              	.LFB128:
 543:./Lib/Src/stm32f4xx_spi.c **** 
 544:./Lib/Src/stm32f4xx_spi.c **** /**
 545:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
ARM GAS  /tmp/ccznMrux.s 			page 24


 546:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 547:./Lib/Src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 548:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 549:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 550:./Lib/Src/stm32f4xx_spi.c ****   */
 551:./Lib/Src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 552:./Lib/Src/stm32f4xx_spi.c **** {
 752              		.loc 1 552 1
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 8
 755              		@ frame_needed = 1, uses_anonymous_args = 0
 756              		@ link register save eliminated.
 757 0000 80B4     		push	{r7}
 758              		.cfi_def_cfa_offset 4
 759              		.cfi_offset 7, -4
 760 0002 83B0     		sub	sp, sp, #12
 761              		.cfi_def_cfa_offset 16
 762 0004 00AF     		add	r7, sp, #0
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 765 0008 0B46     		mov	r3, r1
 766 000a FB70     		strb	r3, [r7, #3]
 553:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 554:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 555:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 556:./Lib/Src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 767              		.loc 1 556 6
 768 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 769 000e 002B     		cmp	r3, #0
 770 0010 08D0     		beq	.L30
 557:./Lib/Src/stm32f4xx_spi.c ****   {
 558:./Lib/Src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 559:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 771              		.loc 1 559 9
 772 0012 7B68     		ldr	r3, [r7, #4]
 773 0014 1B88     		ldrh	r3, [r3]	@ movhi
 774 0016 9BB2     		uxth	r3, r3
 775              		.loc 1 559 15
 776 0018 43F04003 		orr	r3, r3, #64
 777 001c 9AB2     		uxth	r2, r3
 778 001e 7B68     		ldr	r3, [r7, #4]
 779 0020 1A80     		strh	r2, [r3]	@ movhi
 560:./Lib/Src/stm32f4xx_spi.c ****   }
 561:./Lib/Src/stm32f4xx_spi.c ****   else
 562:./Lib/Src/stm32f4xx_spi.c ****   {
 563:./Lib/Src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 564:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 565:./Lib/Src/stm32f4xx_spi.c ****   }
 566:./Lib/Src/stm32f4xx_spi.c **** }
 780              		.loc 1 566 1
 781 0022 07E0     		b	.L32
 782              	.L30:
 564:./Lib/Src/stm32f4xx_spi.c ****   }
 783              		.loc 1 564 9
 784 0024 7B68     		ldr	r3, [r7, #4]
 785 0026 1B88     		ldrh	r3, [r3]	@ movhi
 786 0028 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccznMrux.s 			page 25


 564:./Lib/Src/stm32f4xx_spi.c ****   }
 787              		.loc 1 564 15
 788 002a 23F04003 		bic	r3, r3, #64
 789 002e 9AB2     		uxth	r2, r3
 790 0030 7B68     		ldr	r3, [r7, #4]
 791 0032 1A80     		strh	r2, [r3]	@ movhi
 792              	.L32:
 793              		.loc 1 566 1
 794 0034 00BF     		nop
 795 0036 0C37     		adds	r7, r7, #12
 796              		.cfi_def_cfa_offset 4
 797 0038 BD46     		mov	sp, r7
 798              		.cfi_def_cfa_register 13
 799              		@ sp needed
 800 003a 5DF8047B 		ldr	r7, [sp], #4
 801              		.cfi_restore 7
 802              		.cfi_def_cfa_offset 0
 803 003e 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE128:
 807              		.section	.text.I2S_Cmd,"ax",%progbits
 808              		.align	1
 809              		.global	I2S_Cmd
 810              		.syntax unified
 811              		.thumb
 812              		.thumb_func
 814              	I2S_Cmd:
 815              	.LFB129:
 567:./Lib/Src/stm32f4xx_spi.c **** 
 568:./Lib/Src/stm32f4xx_spi.c **** /**
 569:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 570:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 571:./Lib/Src/stm32f4xx_spi.c ****   *         for full duplex mode).
 572:./Lib/Src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 573:./Lib/Src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 574:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 575:./Lib/Src/stm32f4xx_spi.c ****   */
 576:./Lib/Src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 577:./Lib/Src/stm32f4xx_spi.c **** {
 816              		.loc 1 577 1
 817              		.cfi_startproc
 818              		@ args = 0, pretend = 0, frame = 8
 819              		@ frame_needed = 1, uses_anonymous_args = 0
 820              		@ link register save eliminated.
 821 0000 80B4     		push	{r7}
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0002 83B0     		sub	sp, sp, #12
 825              		.cfi_def_cfa_offset 16
 826 0004 00AF     		add	r7, sp, #0
 827              		.cfi_def_cfa_register 7
 828 0006 7860     		str	r0, [r7, #4]
 829 0008 0B46     		mov	r3, r1
 830 000a FB70     		strb	r3, [r7, #3]
 578:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 579:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 580:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/ccznMrux.s 			page 26


 581:./Lib/Src/stm32f4xx_spi.c ****   
 582:./Lib/Src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 831              		.loc 1 582 6
 832 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 833 000e 002B     		cmp	r3, #0
 834 0010 08D0     		beq	.L34
 583:./Lib/Src/stm32f4xx_spi.c ****   {
 584:./Lib/Src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 585:./Lib/Src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 835              		.loc 1 585 9
 836 0012 7B68     		ldr	r3, [r7, #4]
 837 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 838 0016 9BB2     		uxth	r3, r3
 839              		.loc 1 585 19
 840 0018 43F48063 		orr	r3, r3, #1024
 841 001c 9AB2     		uxth	r2, r3
 842 001e 7B68     		ldr	r3, [r7, #4]
 843 0020 9A83     		strh	r2, [r3, #28]	@ movhi
 586:./Lib/Src/stm32f4xx_spi.c ****   }
 587:./Lib/Src/stm32f4xx_spi.c ****   else
 588:./Lib/Src/stm32f4xx_spi.c ****   {
 589:./Lib/Src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 590:./Lib/Src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 591:./Lib/Src/stm32f4xx_spi.c ****   }
 592:./Lib/Src/stm32f4xx_spi.c **** }
 844              		.loc 1 592 1
 845 0022 07E0     		b	.L36
 846              	.L34:
 590:./Lib/Src/stm32f4xx_spi.c ****   }
 847              		.loc 1 590 9
 848 0024 7B68     		ldr	r3, [r7, #4]
 849 0026 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 850 0028 9BB2     		uxth	r3, r3
 590:./Lib/Src/stm32f4xx_spi.c ****   }
 851              		.loc 1 590 19
 852 002a 23F48063 		bic	r3, r3, #1024
 853 002e 9AB2     		uxth	r2, r3
 854 0030 7B68     		ldr	r3, [r7, #4]
 855 0032 9A83     		strh	r2, [r3, #28]	@ movhi
 856              	.L36:
 857              		.loc 1 592 1
 858 0034 00BF     		nop
 859 0036 0C37     		adds	r7, r7, #12
 860              		.cfi_def_cfa_offset 4
 861 0038 BD46     		mov	sp, r7
 862              		.cfi_def_cfa_register 13
 863              		@ sp needed
 864 003a 5DF8047B 		ldr	r7, [sp], #4
 865              		.cfi_restore 7
 866              		.cfi_def_cfa_offset 0
 867 003e 7047     		bx	lr
 868              		.cfi_endproc
 869              	.LFE129:
 871              		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 872              		.align	1
 873              		.global	SPI_DataSizeConfig
 874              		.syntax unified
ARM GAS  /tmp/ccznMrux.s 			page 27


 875              		.thumb
 876              		.thumb_func
 878              	SPI_DataSizeConfig:
 879              	.LFB130:
 593:./Lib/Src/stm32f4xx_spi.c **** 
 594:./Lib/Src/stm32f4xx_spi.c **** /**
 595:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 596:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 597:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 598:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 599:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 600:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 601:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 602:./Lib/Src/stm32f4xx_spi.c ****   */
 603:./Lib/Src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 604:./Lib/Src/stm32f4xx_spi.c **** {
 880              		.loc 1 604 1
 881              		.cfi_startproc
 882              		@ args = 0, pretend = 0, frame = 8
 883              		@ frame_needed = 1, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 885 0000 80B4     		push	{r7}
 886              		.cfi_def_cfa_offset 4
 887              		.cfi_offset 7, -4
 888 0002 83B0     		sub	sp, sp, #12
 889              		.cfi_def_cfa_offset 16
 890 0004 00AF     		add	r7, sp, #0
 891              		.cfi_def_cfa_register 7
 892 0006 7860     		str	r0, [r7, #4]
 893 0008 0B46     		mov	r3, r1
 894 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 605:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 606:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 607:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 608:./Lib/Src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 609:./Lib/Src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 895              		.loc 1 609 7
 896 000c 7B68     		ldr	r3, [r7, #4]
 897 000e 1B88     		ldrh	r3, [r3]	@ movhi
 898 0010 9BB2     		uxth	r3, r3
 899              		.loc 1 609 13
 900 0012 23F40063 		bic	r3, r3, #2048
 901 0016 9AB2     		uxth	r2, r3
 902 0018 7B68     		ldr	r3, [r7, #4]
 903 001a 1A80     		strh	r2, [r3]	@ movhi
 610:./Lib/Src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 611:./Lib/Src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 904              		.loc 1 611 7
 905 001c 7B68     		ldr	r3, [r7, #4]
 906 001e 1B88     		ldrh	r3, [r3]	@ movhi
 907 0020 9AB2     		uxth	r2, r3
 908              		.loc 1 611 13
 909 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 910 0024 1343     		orrs	r3, r3, r2
 911 0026 9AB2     		uxth	r2, r3
 912 0028 7B68     		ldr	r3, [r7, #4]
 913 002a 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/ccznMrux.s 			page 28


 612:./Lib/Src/stm32f4xx_spi.c **** }
 914              		.loc 1 612 1
 915 002c 00BF     		nop
 916 002e 0C37     		adds	r7, r7, #12
 917              		.cfi_def_cfa_offset 4
 918 0030 BD46     		mov	sp, r7
 919              		.cfi_def_cfa_register 13
 920              		@ sp needed
 921 0032 5DF8047B 		ldr	r7, [sp], #4
 922              		.cfi_restore 7
 923              		.cfi_def_cfa_offset 0
 924 0036 7047     		bx	lr
 925              		.cfi_endproc
 926              	.LFE130:
 928              		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 929              		.align	1
 930              		.global	SPI_BiDirectionalLineConfig
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 935              	SPI_BiDirectionalLineConfig:
 936              	.LFB131:
 613:./Lib/Src/stm32f4xx_spi.c **** 
 614:./Lib/Src/stm32f4xx_spi.c **** /**
 615:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 616:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 617:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 618:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 619:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 620:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 621:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 622:./Lib/Src/stm32f4xx_spi.c ****   */
 623:./Lib/Src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 624:./Lib/Src/stm32f4xx_spi.c **** {
 937              		.loc 1 624 1
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 8
 940              		@ frame_needed = 1, uses_anonymous_args = 0
 941              		@ link register save eliminated.
 942 0000 80B4     		push	{r7}
 943              		.cfi_def_cfa_offset 4
 944              		.cfi_offset 7, -4
 945 0002 83B0     		sub	sp, sp, #12
 946              		.cfi_def_cfa_offset 16
 947 0004 00AF     		add	r7, sp, #0
 948              		.cfi_def_cfa_register 7
 949 0006 7860     		str	r0, [r7, #4]
 950 0008 0B46     		mov	r3, r1
 951 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 625:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 626:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 627:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 628:./Lib/Src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 952              		.loc 1 628 6
 953 000c 7B88     		ldrh	r3, [r7, #2]
 954 000e B3F5804F 		cmp	r3, #16384
 955 0012 08D1     		bne	.L39
ARM GAS  /tmp/ccznMrux.s 			page 29


 629:./Lib/Src/stm32f4xx_spi.c ****   {
 630:./Lib/Src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 631:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 956              		.loc 1 631 9
 957 0014 7B68     		ldr	r3, [r7, #4]
 958 0016 1B88     		ldrh	r3, [r3]	@ movhi
 959 0018 9BB2     		uxth	r3, r3
 960              		.loc 1 631 15
 961 001a 43F48043 		orr	r3, r3, #16384
 962 001e 9AB2     		uxth	r2, r3
 963 0020 7B68     		ldr	r3, [r7, #4]
 964 0022 1A80     		strh	r2, [r3]	@ movhi
 632:./Lib/Src/stm32f4xx_spi.c ****   }
 633:./Lib/Src/stm32f4xx_spi.c ****   else
 634:./Lib/Src/stm32f4xx_spi.c ****   {
 635:./Lib/Src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 636:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 637:./Lib/Src/stm32f4xx_spi.c ****   }
 638:./Lib/Src/stm32f4xx_spi.c **** }
 965              		.loc 1 638 1
 966 0024 07E0     		b	.L41
 967              	.L39:
 636:./Lib/Src/stm32f4xx_spi.c ****   }
 968              		.loc 1 636 9
 969 0026 7B68     		ldr	r3, [r7, #4]
 970 0028 1B88     		ldrh	r3, [r3]	@ movhi
 971 002a 9BB2     		uxth	r3, r3
 636:./Lib/Src/stm32f4xx_spi.c ****   }
 972              		.loc 1 636 15
 973 002c 23F48043 		bic	r3, r3, #16384
 974 0030 9AB2     		uxth	r2, r3
 975 0032 7B68     		ldr	r3, [r7, #4]
 976 0034 1A80     		strh	r2, [r3]	@ movhi
 977              	.L41:
 978              		.loc 1 638 1
 979 0036 00BF     		nop
 980 0038 0C37     		adds	r7, r7, #12
 981              		.cfi_def_cfa_offset 4
 982 003a BD46     		mov	sp, r7
 983              		.cfi_def_cfa_register 13
 984              		@ sp needed
 985 003c 5DF8047B 		ldr	r7, [sp], #4
 986              		.cfi_restore 7
 987              		.cfi_def_cfa_offset 0
 988 0040 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE131:
 992              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 993              		.align	1
 994              		.global	SPI_NSSInternalSoftwareConfig
 995              		.syntax unified
 996              		.thumb
 997              		.thumb_func
 999              	SPI_NSSInternalSoftwareConfig:
 1000              	.LFB132:
 639:./Lib/Src/stm32f4xx_spi.c **** 
 640:./Lib/Src/stm32f4xx_spi.c **** /**
ARM GAS  /tmp/ccznMrux.s 			page 30


 641:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 642:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 643:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 644:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 645:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 646:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 647:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 648:./Lib/Src/stm32f4xx_spi.c ****   */
 649:./Lib/Src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 650:./Lib/Src/stm32f4xx_spi.c **** {
 1001              		.loc 1 650 1
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 8
 1004              		@ frame_needed = 1, uses_anonymous_args = 0
 1005              		@ link register save eliminated.
 1006 0000 80B4     		push	{r7}
 1007              		.cfi_def_cfa_offset 4
 1008              		.cfi_offset 7, -4
 1009 0002 83B0     		sub	sp, sp, #12
 1010              		.cfi_def_cfa_offset 16
 1011 0004 00AF     		add	r7, sp, #0
 1012              		.cfi_def_cfa_register 7
 1013 0006 7860     		str	r0, [r7, #4]
 1014 0008 0B46     		mov	r3, r1
 1015 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 651:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 652:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 653:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 654:./Lib/Src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 1016              		.loc 1 654 6
 1017 000c 7B88     		ldrh	r3, [r7, #2]
 1018 000e 4FF6FF62 		movw	r2, #65279
 1019 0012 9342     		cmp	r3, r2
 1020 0014 08D0     		beq	.L43
 655:./Lib/Src/stm32f4xx_spi.c ****   {
 656:./Lib/Src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 657:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 1021              		.loc 1 657 9
 1022 0016 7B68     		ldr	r3, [r7, #4]
 1023 0018 1B88     		ldrh	r3, [r3]	@ movhi
 1024 001a 9BB2     		uxth	r3, r3
 1025              		.loc 1 657 15
 1026 001c 43F48073 		orr	r3, r3, #256
 1027 0020 9AB2     		uxth	r2, r3
 1028 0022 7B68     		ldr	r3, [r7, #4]
 1029 0024 1A80     		strh	r2, [r3]	@ movhi
 658:./Lib/Src/stm32f4xx_spi.c ****   }
 659:./Lib/Src/stm32f4xx_spi.c ****   else
 660:./Lib/Src/stm32f4xx_spi.c ****   {
 661:./Lib/Src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 662:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 663:./Lib/Src/stm32f4xx_spi.c ****   }
 664:./Lib/Src/stm32f4xx_spi.c **** }
 1030              		.loc 1 664 1
 1031 0026 07E0     		b	.L45
 1032              	.L43:
 662:./Lib/Src/stm32f4xx_spi.c ****   }
ARM GAS  /tmp/ccznMrux.s 			page 31


 1033              		.loc 1 662 9
 1034 0028 7B68     		ldr	r3, [r7, #4]
 1035 002a 1B88     		ldrh	r3, [r3]	@ movhi
 1036 002c 9BB2     		uxth	r3, r3
 662:./Lib/Src/stm32f4xx_spi.c ****   }
 1037              		.loc 1 662 15
 1038 002e 23F48073 		bic	r3, r3, #256
 1039 0032 9AB2     		uxth	r2, r3
 1040 0034 7B68     		ldr	r3, [r7, #4]
 1041 0036 1A80     		strh	r2, [r3]	@ movhi
 1042              	.L45:
 1043              		.loc 1 664 1
 1044 0038 00BF     		nop
 1045 003a 0C37     		adds	r7, r7, #12
 1046              		.cfi_def_cfa_offset 4
 1047 003c BD46     		mov	sp, r7
 1048              		.cfi_def_cfa_register 13
 1049              		@ sp needed
 1050 003e 5DF8047B 		ldr	r7, [sp], #4
 1051              		.cfi_restore 7
 1052              		.cfi_def_cfa_offset 0
 1053 0042 7047     		bx	lr
 1054              		.cfi_endproc
 1055              	.LFE132:
 1057              		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 1058              		.align	1
 1059              		.global	SPI_SSOutputCmd
 1060              		.syntax unified
 1061              		.thumb
 1062              		.thumb_func
 1064              	SPI_SSOutputCmd:
 1065              	.LFB133:
 665:./Lib/Src/stm32f4xx_spi.c **** 
 666:./Lib/Src/stm32f4xx_spi.c **** /**
 667:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 668:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 669:./Lib/Src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 670:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 671:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 672:./Lib/Src/stm32f4xx_spi.c ****   */
 673:./Lib/Src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 674:./Lib/Src/stm32f4xx_spi.c **** {
 1066              		.loc 1 674 1
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 8
 1069              		@ frame_needed = 1, uses_anonymous_args = 0
 1070              		@ link register save eliminated.
 1071 0000 80B4     		push	{r7}
 1072              		.cfi_def_cfa_offset 4
 1073              		.cfi_offset 7, -4
 1074 0002 83B0     		sub	sp, sp, #12
 1075              		.cfi_def_cfa_offset 16
 1076 0004 00AF     		add	r7, sp, #0
 1077              		.cfi_def_cfa_register 7
 1078 0006 7860     		str	r0, [r7, #4]
 1079 0008 0B46     		mov	r3, r1
 1080 000a FB70     		strb	r3, [r7, #3]
ARM GAS  /tmp/ccznMrux.s 			page 32


 675:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 676:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 677:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 678:./Lib/Src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1081              		.loc 1 678 6
 1082 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1083 000e 002B     		cmp	r3, #0
 1084 0010 08D0     		beq	.L47
 679:./Lib/Src/stm32f4xx_spi.c ****   {
 680:./Lib/Src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 681:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 1085              		.loc 1 681 9
 1086 0012 7B68     		ldr	r3, [r7, #4]
 1087 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1088 0016 9BB2     		uxth	r3, r3
 1089              		.loc 1 681 15
 1090 0018 43F00403 		orr	r3, r3, #4
 1091 001c 9AB2     		uxth	r2, r3
 1092 001e 7B68     		ldr	r3, [r7, #4]
 1093 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 682:./Lib/Src/stm32f4xx_spi.c ****   }
 683:./Lib/Src/stm32f4xx_spi.c ****   else
 684:./Lib/Src/stm32f4xx_spi.c ****   {
 685:./Lib/Src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 686:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 687:./Lib/Src/stm32f4xx_spi.c ****   }
 688:./Lib/Src/stm32f4xx_spi.c **** }
 1094              		.loc 1 688 1
 1095 0022 07E0     		b	.L49
 1096              	.L47:
 686:./Lib/Src/stm32f4xx_spi.c ****   }
 1097              		.loc 1 686 9
 1098 0024 7B68     		ldr	r3, [r7, #4]
 1099 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1100 0028 9BB2     		uxth	r3, r3
 686:./Lib/Src/stm32f4xx_spi.c ****   }
 1101              		.loc 1 686 15
 1102 002a 23F00403 		bic	r3, r3, #4
 1103 002e 9AB2     		uxth	r2, r3
 1104 0030 7B68     		ldr	r3, [r7, #4]
 1105 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1106              	.L49:
 1107              		.loc 1 688 1
 1108 0034 00BF     		nop
 1109 0036 0C37     		adds	r7, r7, #12
 1110              		.cfi_def_cfa_offset 4
 1111 0038 BD46     		mov	sp, r7
 1112              		.cfi_def_cfa_register 13
 1113              		@ sp needed
 1114 003a 5DF8047B 		ldr	r7, [sp], #4
 1115              		.cfi_restore 7
 1116              		.cfi_def_cfa_offset 0
 1117 003e 7047     		bx	lr
 1118              		.cfi_endproc
 1119              	.LFE133:
 1121              		.section	.text.SPI_TIModeCmd,"ax",%progbits
 1122              		.align	1
ARM GAS  /tmp/ccznMrux.s 			page 33


 1123              		.global	SPI_TIModeCmd
 1124              		.syntax unified
 1125              		.thumb
 1126              		.thumb_func
 1128              	SPI_TIModeCmd:
 1129              	.LFB134:
 689:./Lib/Src/stm32f4xx_spi.c **** 
 690:./Lib/Src/stm32f4xx_spi.c **** /**
 691:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 692:./Lib/Src/stm32f4xx_spi.c ****   *   
 693:./Lib/Src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 694:./Lib/Src/stm32f4xx_spi.c ****   *         been called. 
 695:./Lib/Src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 696:./Lib/Src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 697:./Lib/Src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 698:./Lib/Src/stm32f4xx_spi.c ****   * 
 699:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 
 700:./Lib/Src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 701:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 702:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 703:./Lib/Src/stm32f4xx_spi.c ****   */
 704:./Lib/Src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 705:./Lib/Src/stm32f4xx_spi.c **** {
 1130              		.loc 1 705 1
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 8
 1133              		@ frame_needed = 1, uses_anonymous_args = 0
 1134              		@ link register save eliminated.
 1135 0000 80B4     		push	{r7}
 1136              		.cfi_def_cfa_offset 4
 1137              		.cfi_offset 7, -4
 1138 0002 83B0     		sub	sp, sp, #12
 1139              		.cfi_def_cfa_offset 16
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
 1142 0006 7860     		str	r0, [r7, #4]
 1143 0008 0B46     		mov	r3, r1
 1144 000a FB70     		strb	r3, [r7, #3]
 706:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 707:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 708:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 709:./Lib/Src/stm32f4xx_spi.c **** 
 710:./Lib/Src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1145              		.loc 1 710 6
 1146 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1147 000e 002B     		cmp	r3, #0
 1148 0010 08D0     		beq	.L51
 711:./Lib/Src/stm32f4xx_spi.c ****   {
 712:./Lib/Src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 713:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 1149              		.loc 1 713 9
 1150 0012 7B68     		ldr	r3, [r7, #4]
 1151 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1152 0016 9BB2     		uxth	r3, r3
 1153              		.loc 1 713 15
 1154 0018 43F01003 		orr	r3, r3, #16
 1155 001c 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccznMrux.s 			page 34


 1156 001e 7B68     		ldr	r3, [r7, #4]
 1157 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 714:./Lib/Src/stm32f4xx_spi.c ****   }
 715:./Lib/Src/stm32f4xx_spi.c ****   else
 716:./Lib/Src/stm32f4xx_spi.c ****   {
 717:./Lib/Src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 718:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 719:./Lib/Src/stm32f4xx_spi.c ****   }
 720:./Lib/Src/stm32f4xx_spi.c **** }
 1158              		.loc 1 720 1
 1159 0022 07E0     		b	.L53
 1160              	.L51:
 718:./Lib/Src/stm32f4xx_spi.c ****   }
 1161              		.loc 1 718 9
 1162 0024 7B68     		ldr	r3, [r7, #4]
 1163 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1164 0028 9BB2     		uxth	r3, r3
 718:./Lib/Src/stm32f4xx_spi.c ****   }
 1165              		.loc 1 718 15
 1166 002a 23F01003 		bic	r3, r3, #16
 1167 002e 9AB2     		uxth	r2, r3
 1168 0030 7B68     		ldr	r3, [r7, #4]
 1169 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1170              	.L53:
 1171              		.loc 1 720 1
 1172 0034 00BF     		nop
 1173 0036 0C37     		adds	r7, r7, #12
 1174              		.cfi_def_cfa_offset 4
 1175 0038 BD46     		mov	sp, r7
 1176              		.cfi_def_cfa_register 13
 1177              		@ sp needed
 1178 003a 5DF8047B 		ldr	r7, [sp], #4
 1179              		.cfi_restore 7
 1180              		.cfi_def_cfa_offset 0
 1181 003e 7047     		bx	lr
 1182              		.cfi_endproc
 1183              	.LFE134:
 1185              		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 1186              		.align	1
 1187              		.global	I2S_FullDuplexConfig
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1192              	I2S_FullDuplexConfig:
 1193              	.LFB135:
 721:./Lib/Src/stm32f4xx_spi.c **** 
 722:./Lib/Src/stm32f4xx_spi.c **** /**
 723:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 724:./Lib/Src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 725:./Lib/Src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 726:./Lib/Src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 727:./Lib/Src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 728:./Lib/Src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 729:./Lib/Src/stm32f4xx_spi.c ****   *         extension.
 730:./Lib/Src/stm32f4xx_spi.c ****   * 
 731:./Lib/Src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 732:./Lib/Src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
ARM GAS  /tmp/ccznMrux.s 			page 35


 733:./Lib/Src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 734:./Lib/Src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 735:./Lib/Src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx independently of the master configuration.    
 736:./Lib/Src/stm32f4xx_spi.c ****   *         
 737:./Lib/Src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 738:./Lib/Src/stm32f4xx_spi.c ****   *  
 739:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 740:./Lib/Src/stm32f4xx_spi.c ****   */
 741:./Lib/Src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 742:./Lib/Src/stm32f4xx_spi.c **** {
 1194              		.loc 1 742 1
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 16
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198              		@ link register save eliminated.
 1199 0000 80B4     		push	{r7}
 1200              		.cfi_def_cfa_offset 4
 1201              		.cfi_offset 7, -4
 1202 0002 85B0     		sub	sp, sp, #20
 1203              		.cfi_def_cfa_offset 24
 1204 0004 00AF     		add	r7, sp, #0
 1205              		.cfi_def_cfa_register 7
 1206 0006 7860     		str	r0, [r7, #4]
 1207 0008 3960     		str	r1, [r7]
 743:./Lib/Src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1208              		.loc 1 743 12
 1209 000a 0023     		movs	r3, #0
 1210 000c BB81     		strh	r3, [r7, #12]	@ movhi
 1211              		.loc 1 743 24
 1212 000e 0023     		movs	r3, #0
 1213 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 744:./Lib/Src/stm32f4xx_spi.c ****   
 745:./Lib/Src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 746:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 747:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 748:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 749:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 750:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 751:./Lib/Src/stm32f4xx_spi.c **** 
 752:./Lib/Src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 753:./Lib/Src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 754:./Lib/Src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1214              		.loc 1 754 10
 1215 0012 7B68     		ldr	r3, [r7, #4]
 1216 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1217 0016 9BB2     		uxth	r3, r3
 1218              		.loc 1 754 20
 1219 0018 23F47B63 		bic	r3, r3, #4016
 1220 001c 23F00F03 		bic	r3, r3, #15
 1221 0020 9AB2     		uxth	r2, r3
 1222 0022 7B68     		ldr	r3, [r7, #4]
 1223 0024 9A83     		strh	r2, [r3, #28]	@ movhi
 755:./Lib/Src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1224              		.loc 1 755 18
 1225 0026 7B68     		ldr	r3, [r7, #4]
 1226 0028 0222     		movs	r2, #2
 1227 002a 1A84     		strh	r2, [r3, #32]	@ movhi
ARM GAS  /tmp/ccznMrux.s 			page 36


 756:./Lib/Src/stm32f4xx_spi.c ****   
 757:./Lib/Src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 758:./Lib/Src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1228              		.loc 1 758 10
 1229 002c 7B68     		ldr	r3, [r7, #4]
 1230 002e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1231 0030 BB81     		strh	r3, [r7, #12]	@ movhi
 759:./Lib/Src/stm32f4xx_spi.c ****   
 760:./Lib/Src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 761:./Lib/Src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1232              		.loc 1 761 22
 1233 0032 3B68     		ldr	r3, [r7]
 1234 0034 1B88     		ldrh	r3, [r3]
 1235              		.loc 1 761 6
 1236 0036 B3F5007F 		cmp	r3, #512
 1237 003a 03D0     		beq	.L55
 1238              		.loc 1 761 73 discriminator 1
 1239 003c 3B68     		ldr	r3, [r7]
 1240 003e 1B88     		ldrh	r3, [r3]
 1241              		.loc 1 761 55 discriminator 1
 1242 0040 002B     		cmp	r3, #0
 1243 0042 03D1     		bne	.L56
 1244              	.L55:
 762:./Lib/Src/stm32f4xx_spi.c ****   {
 763:./Lib/Src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1245              		.loc 1 763 9
 1246 0044 4FF48073 		mov	r3, #256
 1247 0048 FB81     		strh	r3, [r7, #14]	@ movhi
 1248 004a 0BE0     		b	.L57
 1249              	.L56:
 764:./Lib/Src/stm32f4xx_spi.c ****   }
 765:./Lib/Src/stm32f4xx_spi.c ****   else
 766:./Lib/Src/stm32f4xx_spi.c ****   {
 767:./Lib/Src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1250              		.loc 1 767 24
 1251 004c 3B68     		ldr	r3, [r7]
 1252 004e 1B88     		ldrh	r3, [r3]
 1253              		.loc 1 767 8
 1254 0050 B3F5407F 		cmp	r3, #768
 1255 0054 04D0     		beq	.L58
 1256              		.loc 1 767 75 discriminator 1
 1257 0056 3B68     		ldr	r3, [r7]
 1258 0058 1B88     		ldrh	r3, [r3]
 1259              		.loc 1 767 57 discriminator 1
 1260 005a B3F5807F 		cmp	r3, #256
 1261 005e 01D1     		bne	.L57
 1262              	.L58:
 768:./Lib/Src/stm32f4xx_spi.c ****     {
 769:./Lib/Src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1263              		.loc 1 769 11
 1264 0060 0023     		movs	r3, #0
 1265 0062 FB81     		strh	r3, [r7, #14]	@ movhi
 1266              	.L57:
 770:./Lib/Src/stm32f4xx_spi.c ****     }
 771:./Lib/Src/stm32f4xx_spi.c ****   }
 772:./Lib/Src/stm32f4xx_spi.c **** 
 773:./Lib/Src/stm32f4xx_spi.c ****  
ARM GAS  /tmp/ccznMrux.s 			page 37


 774:./Lib/Src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 775:./Lib/Src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 776:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1267              		.loc 1 776 44
 1268 0064 3B68     		ldr	r3, [r7]
 1269 0066 5A88     		ldrh	r2, [r3, #2]
 1270              		.loc 1 776 86
 1271 0068 3B68     		ldr	r3, [r7]
 1272 006a 9988     		ldrh	r1, [r3, #4]
 777:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1273              		.loc 1 777 43
 1274 006c 3B68     		ldr	r3, [r7]
 1275 006e 9B89     		ldrh	r3, [r3, #12]
 776:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1276              		.loc 1 776 61
 1277 0070 0B43     		orrs	r3, r3, r1
 1278 0072 9BB2     		uxth	r3, r3
 776:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1279              		.loc 1 776 19
 1280 0074 1343     		orrs	r3, r3, r2
 1281 0076 9AB2     		uxth	r2, r3
 775:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1282              		.loc 1 775 55
 1283 0078 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1284 007a 1343     		orrs	r3, r3, r2
 1285 007c 9AB2     		uxth	r2, r3
 775:./Lib/Src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1286              		.loc 1 775 10
 1287 007e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1288 0080 1343     		orrs	r3, r3, r2
 1289 0082 9BB2     		uxth	r3, r3
 1290 0084 43F40063 		orr	r3, r3, #2048
 1291 0088 BB81     		strh	r3, [r7, #12]	@ movhi
 778:./Lib/Src/stm32f4xx_spi.c ****  
 779:./Lib/Src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 780:./Lib/Src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1292              		.loc 1 780 20
 1293 008a 7B68     		ldr	r3, [r7, #4]
 1294 008c BA89     		ldrh	r2, [r7, #12]	@ movhi
 1295 008e 9A83     		strh	r2, [r3, #28]	@ movhi
 781:./Lib/Src/stm32f4xx_spi.c **** }
 1296              		.loc 1 781 1
 1297 0090 00BF     		nop
 1298 0092 1437     		adds	r7, r7, #20
 1299              		.cfi_def_cfa_offset 4
 1300 0094 BD46     		mov	sp, r7
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
 1303 0096 5DF8047B 		ldr	r7, [sp], #4
 1304              		.cfi_restore 7
 1305              		.cfi_def_cfa_offset 0
 1306 009a 7047     		bx	lr
 1307              		.cfi_endproc
 1308              	.LFE135:
 1310              		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 1311              		.align	1
 1312              		.global	SPI_I2S_ReceiveData
ARM GAS  /tmp/ccznMrux.s 			page 38


 1313              		.syntax unified
 1314              		.thumb
 1315              		.thumb_func
 1317              	SPI_I2S_ReceiveData:
 1318              	.LFB136:
 782:./Lib/Src/stm32f4xx_spi.c **** 
 783:./Lib/Src/stm32f4xx_spi.c **** /**
 784:./Lib/Src/stm32f4xx_spi.c ****   * @}
 785:./Lib/Src/stm32f4xx_spi.c ****   */
 786:./Lib/Src/stm32f4xx_spi.c **** 
 787:./Lib/Src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 788:./Lib/Src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 789:./Lib/Src/stm32f4xx_spi.c ****  *
 790:./Lib/Src/stm32f4xx_spi.c **** @verbatim   
 791:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================
 792:./Lib/Src/stm32f4xx_spi.c ****                       ##### Data transfers functions #####
 793:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================  
 794:./Lib/Src/stm32f4xx_spi.c **** 
 795:./Lib/Src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI data 
 796:./Lib/Src/stm32f4xx_spi.c ****       transfers. In reception, data are received and then stored into an internal 
 797:./Lib/Src/stm32f4xx_spi.c ****       Rx buffer while. In transmission, data are first stored into an internal Tx 
 798:./Lib/Src/stm32f4xx_spi.c ****       buffer before being transmitted.
 799:./Lib/Src/stm32f4xx_spi.c **** 
 800:./Lib/Src/stm32f4xx_spi.c ****  [..] The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 801:./Lib/Src/stm32f4xx_spi.c ****       function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 802:./Lib/Src/stm32f4xx_spi.c ****       can be done using SPI_I2S_SendData() function and stores the written data into 
 803:./Lib/Src/stm32f4xx_spi.c ****       Tx buffer.
 804:./Lib/Src/stm32f4xx_spi.c **** 
 805:./Lib/Src/stm32f4xx_spi.c **** @endverbatim
 806:./Lib/Src/stm32f4xx_spi.c ****   * @{
 807:./Lib/Src/stm32f4xx_spi.c ****   */
 808:./Lib/Src/stm32f4xx_spi.c **** 
 809:./Lib/Src/stm32f4xx_spi.c **** /**
 810:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 811:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 812:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 813:./Lib/Src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 814:./Lib/Src/stm32f4xx_spi.c ****   */
 815:./Lib/Src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 816:./Lib/Src/stm32f4xx_spi.c **** {
 1319              		.loc 1 816 1
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 8
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 1324 0000 80B4     		push	{r7}
 1325              		.cfi_def_cfa_offset 4
 1326              		.cfi_offset 7, -4
 1327 0002 83B0     		sub	sp, sp, #12
 1328              		.cfi_def_cfa_offset 16
 1329 0004 00AF     		add	r7, sp, #0
 1330              		.cfi_def_cfa_register 7
 1331 0006 7860     		str	r0, [r7, #4]
 817:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 818:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 819:./Lib/Src/stm32f4xx_spi.c ****   
 820:./Lib/Src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
ARM GAS  /tmp/ccznMrux.s 			page 39


 821:./Lib/Src/stm32f4xx_spi.c ****   return SPIx->DR;
 1332              		.loc 1 821 14
 1333 0008 7B68     		ldr	r3, [r7, #4]
 1334 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1335 000c 9BB2     		uxth	r3, r3
 822:./Lib/Src/stm32f4xx_spi.c **** }
 1336              		.loc 1 822 1
 1337 000e 1846     		mov	r0, r3
 1338 0010 0C37     		adds	r7, r7, #12
 1339              		.cfi_def_cfa_offset 4
 1340 0012 BD46     		mov	sp, r7
 1341              		.cfi_def_cfa_register 13
 1342              		@ sp needed
 1343 0014 5DF8047B 		ldr	r7, [sp], #4
 1344              		.cfi_restore 7
 1345              		.cfi_def_cfa_offset 0
 1346 0018 7047     		bx	lr
 1347              		.cfi_endproc
 1348              	.LFE136:
 1350              		.section	.text.SPI_I2S_SendData,"ax",%progbits
 1351              		.align	1
 1352              		.global	SPI_I2S_SendData
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1357              	SPI_I2S_SendData:
 1358              	.LFB137:
 823:./Lib/Src/stm32f4xx_spi.c **** 
 824:./Lib/Src/stm32f4xx_spi.c **** /**
 825:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 826:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 827:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 828:./Lib/Src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 829:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 830:./Lib/Src/stm32f4xx_spi.c ****   */
 831:./Lib/Src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 832:./Lib/Src/stm32f4xx_spi.c **** {
 1359              		.loc 1 832 1
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 8
 1362              		@ frame_needed = 1, uses_anonymous_args = 0
 1363              		@ link register save eliminated.
 1364 0000 80B4     		push	{r7}
 1365              		.cfi_def_cfa_offset 4
 1366              		.cfi_offset 7, -4
 1367 0002 83B0     		sub	sp, sp, #12
 1368              		.cfi_def_cfa_offset 16
 1369 0004 00AF     		add	r7, sp, #0
 1370              		.cfi_def_cfa_register 7
 1371 0006 7860     		str	r0, [r7, #4]
 1372 0008 0B46     		mov	r3, r1
 1373 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 833:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 834:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 835:./Lib/Src/stm32f4xx_spi.c ****   
 836:./Lib/Src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 837:./Lib/Src/stm32f4xx_spi.c ****   SPIx->DR = Data;
ARM GAS  /tmp/ccznMrux.s 			page 40


 1374              		.loc 1 837 12
 1375 000c 7B68     		ldr	r3, [r7, #4]
 1376 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1377 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 838:./Lib/Src/stm32f4xx_spi.c **** }
 1378              		.loc 1 838 1
 1379 0012 00BF     		nop
 1380 0014 0C37     		adds	r7, r7, #12
 1381              		.cfi_def_cfa_offset 4
 1382 0016 BD46     		mov	sp, r7
 1383              		.cfi_def_cfa_register 13
 1384              		@ sp needed
 1385 0018 5DF8047B 		ldr	r7, [sp], #4
 1386              		.cfi_restore 7
 1387              		.cfi_def_cfa_offset 0
 1388 001c 7047     		bx	lr
 1389              		.cfi_endproc
 1390              	.LFE137:
 1392              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 1393              		.align	1
 1394              		.global	SPI_CalculateCRC
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1399              	SPI_CalculateCRC:
 1400              	.LFB138:
 839:./Lib/Src/stm32f4xx_spi.c **** 
 840:./Lib/Src/stm32f4xx_spi.c **** /**
 841:./Lib/Src/stm32f4xx_spi.c ****   * @}
 842:./Lib/Src/stm32f4xx_spi.c ****   */
 843:./Lib/Src/stm32f4xx_spi.c **** 
 844:./Lib/Src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 845:./Lib/Src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 846:./Lib/Src/stm32f4xx_spi.c ****  *
 847:./Lib/Src/stm32f4xx_spi.c **** @verbatim   
 848:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================
 849:./Lib/Src/stm32f4xx_spi.c ****                  ##### Hardware CRC Calculation functions #####
 850:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================  
 851:./Lib/Src/stm32f4xx_spi.c **** 
 852:./Lib/Src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 853:./Lib/Src/stm32f4xx_spi.c ****       calculation
 854:./Lib/Src/stm32f4xx_spi.c **** 
 855:./Lib/Src/stm32f4xx_spi.c ****  [..] SPI communication using CRC is possible through the following procedure:
 856:./Lib/Src/stm32f4xx_spi.c ****    (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 857:./Lib/Src/stm32f4xx_spi.c ****        Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 858:./Lib/Src/stm32f4xx_spi.c ****        function.
 859:./Lib/Src/stm32f4xx_spi.c ****    (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 860:./Lib/Src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function
 861:./Lib/Src/stm32f4xx_spi.c ****    (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 862:./Lib/Src/stm32f4xx_spi.c ****        SPI_TransmitCRC() function to indicate that after transmission of the last 
 863:./Lib/Src/stm32f4xx_spi.c ****        data, the CRC should be transmitted.
 864:./Lib/Src/stm32f4xx_spi.c ****    (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 865:./Lib/Src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 866:./Lib/Src/stm32f4xx_spi.c ****         value. 
 867:./Lib/Src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 868:./Lib/Src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 869:./Lib/Src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccznMrux.s 			page 41


 870:./Lib/Src/stm32f4xx_spi.c ****  [..]
 871:./Lib/Src/stm32f4xx_spi.c ****    (@) It is advised not to read the calculated CRC values during the communication.
 872:./Lib/Src/stm32f4xx_spi.c **** 
 873:./Lib/Src/stm32f4xx_spi.c ****    (@) When the SPI is in slave mode, be careful to enable CRC calculation only 
 874:./Lib/Src/stm32f4xx_spi.c ****        when the clock is stable, that is, when the clock is in the steady state. 
 875:./Lib/Src/stm32f4xx_spi.c ****        If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 876:./Lib/Src/stm32f4xx_spi.c ****        to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 877:./Lib/Src/stm32f4xx_spi.c ****        the value of the SPE bit.
 878:./Lib/Src/stm32f4xx_spi.c **** 
 879:./Lib/Src/stm32f4xx_spi.c ****    (@) With high bitrate frequencies, be careful when transmitting the CRC.
 880:./Lib/Src/stm32f4xx_spi.c ****        As the number of used CPU cycles has to be as low as possible in the CRC 
 881:./Lib/Src/stm32f4xx_spi.c ****        transfer phase, it is forbidden to call software functions in the CRC 
 882:./Lib/Src/stm32f4xx_spi.c ****        transmission sequence to avoid errors in the last data and CRC reception. 
 883:./Lib/Src/stm32f4xx_spi.c ****        In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 884:./Lib/Src/stm32f4xx_spi.c ****        of the last data.
 885:./Lib/Src/stm32f4xx_spi.c **** 
 886:./Lib/Src/stm32f4xx_spi.c ****    (@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 887:./Lib/Src/stm32f4xx_spi.c ****        degradation of the SPI speed performance due to CPU accesses impacting the 
 888:./Lib/Src/stm32f4xx_spi.c ****        SPI bandwidth.
 889:./Lib/Src/stm32f4xx_spi.c **** 
 890:./Lib/Src/stm32f4xx_spi.c ****    (@) When the STM32F4xx is configured as slave and the NSS hardware mode is 
 891:./Lib/Src/stm32f4xx_spi.c ****        used, the NSS pin needs to be kept low between the data phase and the CRC 
 892:./Lib/Src/stm32f4xx_spi.c ****        phase.
 893:./Lib/Src/stm32f4xx_spi.c **** 
 894:./Lib/Src/stm32f4xx_spi.c ****    (@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 895:./Lib/Src/stm32f4xx_spi.c ****        calculation takes place even if a high level is applied on the NSS pin. 
 896:./Lib/Src/stm32f4xx_spi.c ****        This may happen for example in case of a multi-slave environment where the 
 897:./Lib/Src/stm32f4xx_spi.c ****        communication master addresses slaves alternately.
 898:./Lib/Src/stm32f4xx_spi.c **** 
 899:./Lib/Src/stm32f4xx_spi.c ****    (@) Between a slave de-selection (high level on NSS) and a new slave selection 
 900:./Lib/Src/stm32f4xx_spi.c ****        (low level on NSS), the CRC value should be cleared on both master and slave
 901:./Lib/Src/stm32f4xx_spi.c ****        sides in order to resynchronize the master and slave for their respective 
 902:./Lib/Src/stm32f4xx_spi.c ****        CRC calculation.
 903:./Lib/Src/stm32f4xx_spi.c **** 
 904:./Lib/Src/stm32f4xx_spi.c ****    (@) To clear the CRC, follow the procedure below:
 905:./Lib/Src/stm32f4xx_spi.c ****        (#@) Disable SPI using the SPI_Cmd() function
 906:./Lib/Src/stm32f4xx_spi.c ****        (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 907:./Lib/Src/stm32f4xx_spi.c ****        (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 908:./Lib/Src/stm32f4xx_spi.c ****        (#@) Enable SPI using the SPI_Cmd() function.
 909:./Lib/Src/stm32f4xx_spi.c **** 
 910:./Lib/Src/stm32f4xx_spi.c **** @endverbatim
 911:./Lib/Src/stm32f4xx_spi.c ****   * @{
 912:./Lib/Src/stm32f4xx_spi.c ****   */
 913:./Lib/Src/stm32f4xx_spi.c **** 
 914:./Lib/Src/stm32f4xx_spi.c **** /**
 915:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 916:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 917:./Lib/Src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 918:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 919:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 920:./Lib/Src/stm32f4xx_spi.c ****   */
 921:./Lib/Src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 922:./Lib/Src/stm32f4xx_spi.c **** {
 1401              		.loc 1 922 1
 1402              		.cfi_startproc
 1403              		@ args = 0, pretend = 0, frame = 8
 1404              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccznMrux.s 			page 42


 1405              		@ link register save eliminated.
 1406 0000 80B4     		push	{r7}
 1407              		.cfi_def_cfa_offset 4
 1408              		.cfi_offset 7, -4
 1409 0002 83B0     		sub	sp, sp, #12
 1410              		.cfi_def_cfa_offset 16
 1411 0004 00AF     		add	r7, sp, #0
 1412              		.cfi_def_cfa_register 7
 1413 0006 7860     		str	r0, [r7, #4]
 1414 0008 0B46     		mov	r3, r1
 1415 000a FB70     		strb	r3, [r7, #3]
 923:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 924:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 925:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 926:./Lib/Src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1416              		.loc 1 926 6
 1417 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1418 000e 002B     		cmp	r3, #0
 1419 0010 08D0     		beq	.L63
 927:./Lib/Src/stm32f4xx_spi.c ****   {
 928:./Lib/Src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 929:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1420              		.loc 1 929 9
 1421 0012 7B68     		ldr	r3, [r7, #4]
 1422 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1423 0016 9BB2     		uxth	r3, r3
 1424              		.loc 1 929 15
 1425 0018 43F40053 		orr	r3, r3, #8192
 1426 001c 9AB2     		uxth	r2, r3
 1427 001e 7B68     		ldr	r3, [r7, #4]
 1428 0020 1A80     		strh	r2, [r3]	@ movhi
 930:./Lib/Src/stm32f4xx_spi.c ****   }
 931:./Lib/Src/stm32f4xx_spi.c ****   else
 932:./Lib/Src/stm32f4xx_spi.c ****   {
 933:./Lib/Src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 934:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 935:./Lib/Src/stm32f4xx_spi.c ****   }
 936:./Lib/Src/stm32f4xx_spi.c **** }
 1429              		.loc 1 936 1
 1430 0022 07E0     		b	.L65
 1431              	.L63:
 934:./Lib/Src/stm32f4xx_spi.c ****   }
 1432              		.loc 1 934 9
 1433 0024 7B68     		ldr	r3, [r7, #4]
 1434 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1435 0028 9BB2     		uxth	r3, r3
 934:./Lib/Src/stm32f4xx_spi.c ****   }
 1436              		.loc 1 934 15
 1437 002a 23F40053 		bic	r3, r3, #8192
 1438 002e 9AB2     		uxth	r2, r3
 1439 0030 7B68     		ldr	r3, [r7, #4]
 1440 0032 1A80     		strh	r2, [r3]	@ movhi
 1441              	.L65:
 1442              		.loc 1 936 1
 1443 0034 00BF     		nop
 1444 0036 0C37     		adds	r7, r7, #12
 1445              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccznMrux.s 			page 43


 1446 0038 BD46     		mov	sp, r7
 1447              		.cfi_def_cfa_register 13
 1448              		@ sp needed
 1449 003a 5DF8047B 		ldr	r7, [sp], #4
 1450              		.cfi_restore 7
 1451              		.cfi_def_cfa_offset 0
 1452 003e 7047     		bx	lr
 1453              		.cfi_endproc
 1454              	.LFE138:
 1456              		.section	.text.SPI_TransmitCRC,"ax",%progbits
 1457              		.align	1
 1458              		.global	SPI_TransmitCRC
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1463              	SPI_TransmitCRC:
 1464              	.LFB139:
 937:./Lib/Src/stm32f4xx_spi.c **** 
 938:./Lib/Src/stm32f4xx_spi.c **** /**
 939:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 940:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 941:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
 942:./Lib/Src/stm32f4xx_spi.c ****   */
 943:./Lib/Src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 944:./Lib/Src/stm32f4xx_spi.c **** {
 1465              		.loc 1 944 1
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 8
 1468              		@ frame_needed = 1, uses_anonymous_args = 0
 1469              		@ link register save eliminated.
 1470 0000 80B4     		push	{r7}
 1471              		.cfi_def_cfa_offset 4
 1472              		.cfi_offset 7, -4
 1473 0002 83B0     		sub	sp, sp, #12
 1474              		.cfi_def_cfa_offset 16
 1475 0004 00AF     		add	r7, sp, #0
 1476              		.cfi_def_cfa_register 7
 1477 0006 7860     		str	r0, [r7, #4]
 945:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 946:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 947:./Lib/Src/stm32f4xx_spi.c ****   
 948:./Lib/Src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 949:./Lib/Src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1478              		.loc 1 949 7
 1479 0008 7B68     		ldr	r3, [r7, #4]
 1480 000a 1B88     		ldrh	r3, [r3]	@ movhi
 1481 000c 9BB2     		uxth	r3, r3
 1482              		.loc 1 949 13
 1483 000e 43F48053 		orr	r3, r3, #4096
 1484 0012 9AB2     		uxth	r2, r3
 1485 0014 7B68     		ldr	r3, [r7, #4]
 1486 0016 1A80     		strh	r2, [r3]	@ movhi
 950:./Lib/Src/stm32f4xx_spi.c **** }
 1487              		.loc 1 950 1
 1488 0018 00BF     		nop
 1489 001a 0C37     		adds	r7, r7, #12
 1490              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccznMrux.s 			page 44


 1491 001c BD46     		mov	sp, r7
 1492              		.cfi_def_cfa_register 13
 1493              		@ sp needed
 1494 001e 5DF8047B 		ldr	r7, [sp], #4
 1495              		.cfi_restore 7
 1496              		.cfi_def_cfa_offset 0
 1497 0022 7047     		bx	lr
 1498              		.cfi_endproc
 1499              	.LFE139:
 1501              		.section	.text.SPI_GetCRC,"ax",%progbits
 1502              		.align	1
 1503              		.global	SPI_GetCRC
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1508              	SPI_GetCRC:
 1509              	.LFB140:
 951:./Lib/Src/stm32f4xx_spi.c **** 
 952:./Lib/Src/stm32f4xx_spi.c **** /**
 953:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 954:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 955:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 956:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 957:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 958:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 959:./Lib/Src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 960:./Lib/Src/stm32f4xx_spi.c ****   */
 961:./Lib/Src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 962:./Lib/Src/stm32f4xx_spi.c **** {
 1510              		.loc 1 962 1
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 16
 1513              		@ frame_needed = 1, uses_anonymous_args = 0
 1514              		@ link register save eliminated.
 1515 0000 80B4     		push	{r7}
 1516              		.cfi_def_cfa_offset 4
 1517              		.cfi_offset 7, -4
 1518 0002 85B0     		sub	sp, sp, #20
 1519              		.cfi_def_cfa_offset 24
 1520 0004 00AF     		add	r7, sp, #0
 1521              		.cfi_def_cfa_register 7
 1522 0006 7860     		str	r0, [r7, #4]
 1523 0008 0B46     		mov	r3, r1
 1524 000a FB70     		strb	r3, [r7, #3]
 963:./Lib/Src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 1525              		.loc 1 963 12
 1526 000c 0023     		movs	r3, #0
 1527 000e FB81     		strh	r3, [r7, #14]	@ movhi
 964:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 965:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 966:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 967:./Lib/Src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1528              		.loc 1 967 6
 1529 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1530 0012 012B     		cmp	r3, #1
 1531 0014 03D0     		beq	.L68
 968:./Lib/Src/stm32f4xx_spi.c ****   {
ARM GAS  /tmp/ccznMrux.s 			page 45


 969:./Lib/Src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 970:./Lib/Src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 1532              		.loc 1 970 12
 1533 0016 7B68     		ldr	r3, [r7, #4]
 1534 0018 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1535 001a FB81     		strh	r3, [r7, #14]	@ movhi
 1536 001c 02E0     		b	.L69
 1537              	.L68:
 971:./Lib/Src/stm32f4xx_spi.c ****   }
 972:./Lib/Src/stm32f4xx_spi.c ****   else
 973:./Lib/Src/stm32f4xx_spi.c ****   {
 974:./Lib/Src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 975:./Lib/Src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 1538              		.loc 1 975 12
 1539 001e 7B68     		ldr	r3, [r7, #4]
 1540 0020 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1541 0022 FB81     		strh	r3, [r7, #14]	@ movhi
 1542              	.L69:
 976:./Lib/Src/stm32f4xx_spi.c ****   }
 977:./Lib/Src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 978:./Lib/Src/stm32f4xx_spi.c ****   return crcreg;
 1543              		.loc 1 978 10
 1544 0024 FB89     		ldrh	r3, [r7, #14]
 979:./Lib/Src/stm32f4xx_spi.c **** }
 1545              		.loc 1 979 1
 1546 0026 1846     		mov	r0, r3
 1547 0028 1437     		adds	r7, r7, #20
 1548              		.cfi_def_cfa_offset 4
 1549 002a BD46     		mov	sp, r7
 1550              		.cfi_def_cfa_register 13
 1551              		@ sp needed
 1552 002c 5DF8047B 		ldr	r7, [sp], #4
 1553              		.cfi_restore 7
 1554              		.cfi_def_cfa_offset 0
 1555 0030 7047     		bx	lr
 1556              		.cfi_endproc
 1557              	.LFE140:
 1559              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 1560              		.align	1
 1561              		.global	SPI_GetCRCPolynomial
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1566              	SPI_GetCRCPolynomial:
 1567              	.LFB141:
 980:./Lib/Src/stm32f4xx_spi.c **** 
 981:./Lib/Src/stm32f4xx_spi.c **** /**
 982:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 983:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 984:./Lib/Src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 985:./Lib/Src/stm32f4xx_spi.c ****   */
 986:./Lib/Src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 987:./Lib/Src/stm32f4xx_spi.c **** {
 1568              		.loc 1 987 1
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 8
 1571              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccznMrux.s 			page 46


 1572              		@ link register save eliminated.
 1573 0000 80B4     		push	{r7}
 1574              		.cfi_def_cfa_offset 4
 1575              		.cfi_offset 7, -4
 1576 0002 83B0     		sub	sp, sp, #12
 1577              		.cfi_def_cfa_offset 16
 1578 0004 00AF     		add	r7, sp, #0
 1579              		.cfi_def_cfa_register 7
 1580 0006 7860     		str	r0, [r7, #4]
 988:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
 989:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 990:./Lib/Src/stm32f4xx_spi.c ****   
 991:./Lib/Src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 992:./Lib/Src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1581              		.loc 1 992 14
 1582 0008 7B68     		ldr	r3, [r7, #4]
 1583 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1584 000c 9BB2     		uxth	r3, r3
 993:./Lib/Src/stm32f4xx_spi.c **** }
 1585              		.loc 1 993 1
 1586 000e 1846     		mov	r0, r3
 1587 0010 0C37     		adds	r7, r7, #12
 1588              		.cfi_def_cfa_offset 4
 1589 0012 BD46     		mov	sp, r7
 1590              		.cfi_def_cfa_register 13
 1591              		@ sp needed
 1592 0014 5DF8047B 		ldr	r7, [sp], #4
 1593              		.cfi_restore 7
 1594              		.cfi_def_cfa_offset 0
 1595 0018 7047     		bx	lr
 1596              		.cfi_endproc
 1597              	.LFE141:
 1599              		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1600              		.align	1
 1601              		.global	SPI_I2S_DMACmd
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1606              	SPI_I2S_DMACmd:
 1607              	.LFB142:
 994:./Lib/Src/stm32f4xx_spi.c **** 
 995:./Lib/Src/stm32f4xx_spi.c **** /**
 996:./Lib/Src/stm32f4xx_spi.c ****   * @}
 997:./Lib/Src/stm32f4xx_spi.c ****   */
 998:./Lib/Src/stm32f4xx_spi.c **** 
 999:./Lib/Src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
1000:./Lib/Src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
1001:./Lib/Src/stm32f4xx_spi.c ****   *
1002:./Lib/Src/stm32f4xx_spi.c **** @verbatim   
1003:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================
1004:./Lib/Src/stm32f4xx_spi.c ****                    ##### DMA transfers management functions #####
1005:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================  
1006:./Lib/Src/stm32f4xx_spi.c **** 
1007:./Lib/Src/stm32f4xx_spi.c **** @endverbatim
1008:./Lib/Src/stm32f4xx_spi.c ****   * @{
1009:./Lib/Src/stm32f4xx_spi.c ****   */
1010:./Lib/Src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccznMrux.s 			page 47


1011:./Lib/Src/stm32f4xx_spi.c **** /**
1012:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
1013:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1014:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1015:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
1016:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
1017:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
1018:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
1019:./Lib/Src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
1020:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1021:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
1022:./Lib/Src/stm32f4xx_spi.c ****   */
1023:./Lib/Src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
1024:./Lib/Src/stm32f4xx_spi.c **** {
 1608              		.loc 1 1024 1
 1609              		.cfi_startproc
 1610              		@ args = 0, pretend = 0, frame = 8
 1611              		@ frame_needed = 1, uses_anonymous_args = 0
 1612              		@ link register save eliminated.
 1613 0000 80B4     		push	{r7}
 1614              		.cfi_def_cfa_offset 4
 1615              		.cfi_offset 7, -4
 1616 0002 83B0     		sub	sp, sp, #12
 1617              		.cfi_def_cfa_offset 16
 1618 0004 00AF     		add	r7, sp, #0
 1619              		.cfi_def_cfa_register 7
 1620 0006 7860     		str	r0, [r7, #4]
 1621 0008 0B46     		mov	r3, r1
 1622 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 1623 000c 1346     		mov	r3, r2
 1624 000e 7B70     		strb	r3, [r7, #1]
1025:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
1026:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1027:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1028:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
1029:./Lib/Src/stm32f4xx_spi.c **** 
1030:./Lib/Src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1625              		.loc 1 1030 6
 1626 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1627 0012 002B     		cmp	r3, #0
 1628 0014 08D0     		beq	.L74
1031:./Lib/Src/stm32f4xx_spi.c ****   {
1032:./Lib/Src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
1033:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1629              		.loc 1 1033 9
 1630 0016 7B68     		ldr	r3, [r7, #4]
 1631 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1632 001a 9AB2     		uxth	r2, r3
 1633              		.loc 1 1033 15
 1634 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1635 001e 1343     		orrs	r3, r3, r2
 1636 0020 9AB2     		uxth	r2, r3
 1637 0022 7B68     		ldr	r3, [r7, #4]
 1638 0024 9A80     		strh	r2, [r3, #4]	@ movhi
1034:./Lib/Src/stm32f4xx_spi.c ****   }
1035:./Lib/Src/stm32f4xx_spi.c ****   else
1036:./Lib/Src/stm32f4xx_spi.c ****   {
ARM GAS  /tmp/ccznMrux.s 			page 48


1037:./Lib/Src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1038:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
1039:./Lib/Src/stm32f4xx_spi.c ****   }
1040:./Lib/Src/stm32f4xx_spi.c **** }
 1639              		.loc 1 1040 1
 1640 0026 09E0     		b	.L76
 1641              	.L74:
1038:./Lib/Src/stm32f4xx_spi.c ****   }
 1642              		.loc 1 1038 9
 1643 0028 7B68     		ldr	r3, [r7, #4]
 1644 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1645 002c 9AB2     		uxth	r2, r3
1038:./Lib/Src/stm32f4xx_spi.c ****   }
 1646              		.loc 1 1038 18
 1647 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1648 0030 DB43     		mvns	r3, r3
 1649 0032 9BB2     		uxth	r3, r3
1038:./Lib/Src/stm32f4xx_spi.c ****   }
 1650              		.loc 1 1038 15
 1651 0034 1340     		ands	r3, r3, r2
 1652 0036 9AB2     		uxth	r2, r3
 1653 0038 7B68     		ldr	r3, [r7, #4]
 1654 003a 9A80     		strh	r2, [r3, #4]	@ movhi
 1655              	.L76:
 1656              		.loc 1 1040 1
 1657 003c 00BF     		nop
 1658 003e 0C37     		adds	r7, r7, #12
 1659              		.cfi_def_cfa_offset 4
 1660 0040 BD46     		mov	sp, r7
 1661              		.cfi_def_cfa_register 13
 1662              		@ sp needed
 1663 0042 5DF8047B 		ldr	r7, [sp], #4
 1664              		.cfi_restore 7
 1665              		.cfi_def_cfa_offset 0
 1666 0046 7047     		bx	lr
 1667              		.cfi_endproc
 1668              	.LFE142:
 1670              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1671              		.align	1
 1672              		.global	SPI_I2S_ITConfig
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1677              	SPI_I2S_ITConfig:
 1678              	.LFB143:
1041:./Lib/Src/stm32f4xx_spi.c **** 
1042:./Lib/Src/stm32f4xx_spi.c **** /**
1043:./Lib/Src/stm32f4xx_spi.c ****   * @}
1044:./Lib/Src/stm32f4xx_spi.c ****   */
1045:./Lib/Src/stm32f4xx_spi.c **** 
1046:./Lib/Src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1047:./Lib/Src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1048:./Lib/Src/stm32f4xx_spi.c ****   *
1049:./Lib/Src/stm32f4xx_spi.c **** @verbatim   
1050:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================
1051:./Lib/Src/stm32f4xx_spi.c ****             ##### Interrupts and flags management functions #####
1052:./Lib/Src/stm32f4xx_spi.c ****  ===============================================================================  
ARM GAS  /tmp/ccznMrux.s 			page 49


1053:./Lib/Src/stm32f4xx_spi.c ****  
1054:./Lib/Src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to configure the SPI Interrupts 
1055:./Lib/Src/stm32f4xx_spi.c ****       sources and check or clear the flags or pending bits status.
1056:./Lib/Src/stm32f4xx_spi.c ****       The user should identify which mode will be used in his application to manage 
1057:./Lib/Src/stm32f4xx_spi.c ****       the communication: Polling mode, Interrupt mode or DMA mode. 
1058:./Lib/Src/stm32f4xx_spi.c ****     
1059:./Lib/Src/stm32f4xx_spi.c ****  *** Polling Mode ***
1060:./Lib/Src/stm32f4xx_spi.c ****  ====================
1061:./Lib/Src/stm32f4xx_spi.c **** [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1062:./Lib/Src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1063:./Lib/Src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1064:./Lib/Src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1065:./Lib/Src/stm32f4xx_spi.c ****   (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1066:./Lib/Src/stm32f4xx_spi.c ****   (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1067:./Lib/Src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1068:./Lib/Src/stm32f4xx_spi.c ****   (#) I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1069:./Lib/Src/stm32f4xx_spi.c ****   (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1070:./Lib/Src/stm32f4xx_spi.c ****   (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1071:./Lib/Src/stm32f4xx_spi.c **** 
1072:./Lib/Src/stm32f4xx_spi.c ****   (@) Do not use the BSY flag to handle each data transmission or reception. It is
1073:./Lib/Src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1074:./Lib/Src/stm32f4xx_spi.c **** 
1075:./Lib/Src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1076:./Lib/Src/stm32f4xx_spi.c ****    (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1077:./Lib/Src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1078:./Lib/Src/stm32f4xx_spi.c **** 
1079:./Lib/Src/stm32f4xx_spi.c ****  *** Interrupt Mode ***
1080:./Lib/Src/stm32f4xx_spi.c ****  ======================
1081:./Lib/Src/stm32f4xx_spi.c ****  [..] In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1082:./Lib/Src/stm32f4xx_spi.c ****       and 7 pending bits: 
1083:./Lib/Src/stm32f4xx_spi.c ****    (+) Pending Bits:
1084:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1085:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1086:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode onl
1087:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1088:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1089:./Lib/Src/stm32f4xx_spi.c ****        (##) I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1090:./Lib/Src/stm32f4xx_spi.c ****        (##) I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1091:./Lib/Src/stm32f4xx_spi.c **** 
1092:./Lib/Src/stm32f4xx_spi.c ****    (+) Interrupt Source:
1093:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1094:./Lib/Src/stm32f4xx_spi.c ****             interrupt.  
1095:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1096:./Lib/Src/stm32f4xx_spi.c ****             empty interrupt.
1097:./Lib/Src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1098:./Lib/Src/stm32f4xx_spi.c **** 
1099:./Lib/Src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1100:./Lib/Src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1101:./Lib/Src/stm32f4xx_spi.c ****    (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1102:./Lib/Src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1103:./Lib/Src/stm32f4xx_spi.c **** 
1104:./Lib/Src/stm32f4xx_spi.c ****  *** DMA Mode ***
1105:./Lib/Src/stm32f4xx_spi.c ****  ================
1106:./Lib/Src/stm32f4xx_spi.c ****  [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1107:./Lib/Src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1108:./Lib/Src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1109:./Lib/Src/stm32f4xx_spi.c **** 
ARM GAS  /tmp/ccznMrux.s 			page 50


1110:./Lib/Src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following function:
1111:./Lib/Src/stm32f4xx_spi.c ****    (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState 
1112:./Lib/Src/stm32f4xx_spi.c ****        NewState);
1113:./Lib/Src/stm32f4xx_spi.c **** 
1114:./Lib/Src/stm32f4xx_spi.c **** @endverbatim
1115:./Lib/Src/stm32f4xx_spi.c ****   * @{
1116:./Lib/Src/stm32f4xx_spi.c ****   */
1117:./Lib/Src/stm32f4xx_spi.c **** 
1118:./Lib/Src/stm32f4xx_spi.c **** /**
1119:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1120:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1121:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1122:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1123:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1124:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1125:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1126:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1127:./Lib/Src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1128:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1129:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
1130:./Lib/Src/stm32f4xx_spi.c ****   */
1131:./Lib/Src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1132:./Lib/Src/stm32f4xx_spi.c **** {
 1679              		.loc 1 1132 1
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 16
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683              		@ link register save eliminated.
 1684 0000 80B4     		push	{r7}
 1685              		.cfi_def_cfa_offset 4
 1686              		.cfi_offset 7, -4
 1687 0002 85B0     		sub	sp, sp, #20
 1688              		.cfi_def_cfa_offset 24
 1689 0004 00AF     		add	r7, sp, #0
 1690              		.cfi_def_cfa_register 7
 1691 0006 7860     		str	r0, [r7, #4]
 1692 0008 0B46     		mov	r3, r1
 1693 000a FB70     		strb	r3, [r7, #3]
 1694 000c 1346     		mov	r3, r2
 1695 000e BB70     		strb	r3, [r7, #2]
1133:./Lib/Src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1696              		.loc 1 1133 12
 1697 0010 0023     		movs	r3, #0
 1698 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 1699              		.loc 1 1133 23
 1700 0014 0023     		movs	r3, #0
 1701 0016 BB81     		strh	r3, [r7, #12]	@ movhi
1134:./Lib/Src/stm32f4xx_spi.c ****   
1135:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
1136:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1137:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1138:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1139:./Lib/Src/stm32f4xx_spi.c **** 
1140:./Lib/Src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1141:./Lib/Src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1702              		.loc 1 1141 9
 1703 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccznMrux.s 			page 51


 1704 001a 1B09     		lsrs	r3, r3, #4
 1705 001c DBB2     		uxtb	r3, r3
 1706 001e FB81     		strh	r3, [r7, #14]	@ movhi
1142:./Lib/Src/stm32f4xx_spi.c **** 
1143:./Lib/Src/stm32f4xx_spi.c ****   /* Set the IT mask */
1144:./Lib/Src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1707              		.loc 1 1144 27
 1708 0020 FB89     		ldrh	r3, [r7, #14]
 1709              		.loc 1 1144 24
 1710 0022 0122     		movs	r2, #1
 1711 0024 02FA03F3 		lsl	r3, r2, r3
 1712              		.loc 1 1144 10
 1713 0028 BB81     		strh	r3, [r7, #12]	@ movhi
1145:./Lib/Src/stm32f4xx_spi.c **** 
1146:./Lib/Src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1714              		.loc 1 1146 6
 1715 002a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1716 002c 002B     		cmp	r3, #0
 1717 002e 08D0     		beq	.L78
1147:./Lib/Src/stm32f4xx_spi.c ****   {
1148:./Lib/Src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1149:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 1718              		.loc 1 1149 9
 1719 0030 7B68     		ldr	r3, [r7, #4]
 1720 0032 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1721 0034 9AB2     		uxth	r2, r3
 1722              		.loc 1 1149 15
 1723 0036 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1724 0038 1343     		orrs	r3, r3, r2
 1725 003a 9AB2     		uxth	r2, r3
 1726 003c 7B68     		ldr	r3, [r7, #4]
 1727 003e 9A80     		strh	r2, [r3, #4]	@ movhi
1150:./Lib/Src/stm32f4xx_spi.c ****   }
1151:./Lib/Src/stm32f4xx_spi.c ****   else
1152:./Lib/Src/stm32f4xx_spi.c ****   {
1153:./Lib/Src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1154:./Lib/Src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
1155:./Lib/Src/stm32f4xx_spi.c ****   }
1156:./Lib/Src/stm32f4xx_spi.c **** }
 1728              		.loc 1 1156 1
 1729 0040 09E0     		b	.L80
 1730              	.L78:
1154:./Lib/Src/stm32f4xx_spi.c ****   }
 1731              		.loc 1 1154 9
 1732 0042 7B68     		ldr	r3, [r7, #4]
 1733 0044 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1734 0046 9AB2     		uxth	r2, r3
1154:./Lib/Src/stm32f4xx_spi.c ****   }
 1735              		.loc 1 1154 18
 1736 0048 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1737 004a DB43     		mvns	r3, r3
 1738 004c 9BB2     		uxth	r3, r3
1154:./Lib/Src/stm32f4xx_spi.c ****   }
 1739              		.loc 1 1154 15
 1740 004e 1340     		ands	r3, r3, r2
 1741 0050 9AB2     		uxth	r2, r3
 1742 0052 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccznMrux.s 			page 52


 1743 0054 9A80     		strh	r2, [r3, #4]	@ movhi
 1744              	.L80:
 1745              		.loc 1 1156 1
 1746 0056 00BF     		nop
 1747 0058 1437     		adds	r7, r7, #20
 1748              		.cfi_def_cfa_offset 4
 1749 005a BD46     		mov	sp, r7
 1750              		.cfi_def_cfa_register 13
 1751              		@ sp needed
 1752 005c 5DF8047B 		ldr	r7, [sp], #4
 1753              		.cfi_restore 7
 1754              		.cfi_def_cfa_offset 0
 1755 0060 7047     		bx	lr
 1756              		.cfi_endproc
 1757              	.LFE143:
 1759              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1760              		.align	1
 1761              		.global	SPI_I2S_GetFlagStatus
 1762              		.syntax unified
 1763              		.thumb
 1764              		.thumb_func
 1766              	SPI_I2S_GetFlagStatus:
 1767              	.LFB144:
1157:./Lib/Src/stm32f4xx_spi.c **** 
1158:./Lib/Src/stm32f4xx_spi.c **** /**
1159:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1160:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1161:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1162:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1163:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1164:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1165:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1166:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1167:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1168:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1169:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1170:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1171:./Lib/Src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1172:./Lib/Src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1173:./Lib/Src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1174:./Lib/Src/stm32f4xx_spi.c ****   */
1175:./Lib/Src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1176:./Lib/Src/stm32f4xx_spi.c **** {
 1768              		.loc 1 1176 1
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 16
 1771              		@ frame_needed = 1, uses_anonymous_args = 0
 1772              		@ link register save eliminated.
 1773 0000 80B4     		push	{r7}
 1774              		.cfi_def_cfa_offset 4
 1775              		.cfi_offset 7, -4
 1776 0002 85B0     		sub	sp, sp, #20
 1777              		.cfi_def_cfa_offset 24
 1778 0004 00AF     		add	r7, sp, #0
 1779              		.cfi_def_cfa_register 7
 1780 0006 7860     		str	r0, [r7, #4]
 1781 0008 0B46     		mov	r3, r1
ARM GAS  /tmp/ccznMrux.s 			page 53


 1782 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1177:./Lib/Src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 1783              		.loc 1 1177 14
 1784 000c 0023     		movs	r3, #0
 1785 000e FB73     		strb	r3, [r7, #15]
1178:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
1179:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1180:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1181:./Lib/Src/stm32f4xx_spi.c ****   
1182:./Lib/Src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1183:./Lib/Src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1786              		.loc 1 1183 12
 1787 0010 7B68     		ldr	r3, [r7, #4]
 1788 0012 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1789 0014 9AB2     		uxth	r2, r3
 1790              		.loc 1 1183 33
 1791 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1792 0018 1340     		ands	r3, r3, r2
 1793 001a 9BB2     		uxth	r3, r3
 1794              		.loc 1 1183 6
 1795 001c 002B     		cmp	r3, #0
 1796 001e 02D0     		beq	.L82
1184:./Lib/Src/stm32f4xx_spi.c ****   {
1185:./Lib/Src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1186:./Lib/Src/stm32f4xx_spi.c ****     bitstatus = SET;
 1797              		.loc 1 1186 15
 1798 0020 0123     		movs	r3, #1
 1799 0022 FB73     		strb	r3, [r7, #15]
 1800 0024 01E0     		b	.L83
 1801              	.L82:
1187:./Lib/Src/stm32f4xx_spi.c ****   }
1188:./Lib/Src/stm32f4xx_spi.c ****   else
1189:./Lib/Src/stm32f4xx_spi.c ****   {
1190:./Lib/Src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1191:./Lib/Src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1802              		.loc 1 1191 15
 1803 0026 0023     		movs	r3, #0
 1804 0028 FB73     		strb	r3, [r7, #15]
 1805              	.L83:
1192:./Lib/Src/stm32f4xx_spi.c ****   }
1193:./Lib/Src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1194:./Lib/Src/stm32f4xx_spi.c ****   return  bitstatus;
 1806              		.loc 1 1194 11
 1807 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1195:./Lib/Src/stm32f4xx_spi.c **** }
 1808              		.loc 1 1195 1
 1809 002c 1846     		mov	r0, r3
 1810 002e 1437     		adds	r7, r7, #20
 1811              		.cfi_def_cfa_offset 4
 1812 0030 BD46     		mov	sp, r7
 1813              		.cfi_def_cfa_register 13
 1814              		@ sp needed
 1815 0032 5DF8047B 		ldr	r7, [sp], #4
 1816              		.cfi_restore 7
 1817              		.cfi_def_cfa_offset 0
 1818 0036 7047     		bx	lr
 1819              		.cfi_endproc
ARM GAS  /tmp/ccznMrux.s 			page 54


 1820              	.LFE144:
 1822              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1823              		.align	1
 1824              		.global	SPI_I2S_ClearFlag
 1825              		.syntax unified
 1826              		.thumb
 1827              		.thumb_func
 1829              	SPI_I2S_ClearFlag:
 1830              	.LFB145:
1196:./Lib/Src/stm32f4xx_spi.c **** 
1197:./Lib/Src/stm32f4xx_spi.c **** /**
1198:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1199:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1200:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1201:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1202:./Lib/Src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1203:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1204:./Lib/Src/stm32f4xx_spi.c ****   *  
1205:./Lib/Src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1206:./Lib/Src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1207:./Lib/Src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1208:./Lib/Src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1209:./Lib/Src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1210:./Lib/Src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1211:./Lib/Src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1212:./Lib/Src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1213:./Lib/Src/stm32f4xx_spi.c ****   *  
1214:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
1215:./Lib/Src/stm32f4xx_spi.c ****   */
1216:./Lib/Src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1217:./Lib/Src/stm32f4xx_spi.c **** {
 1831              		.loc 1 1217 1
 1832              		.cfi_startproc
 1833              		@ args = 0, pretend = 0, frame = 8
 1834              		@ frame_needed = 1, uses_anonymous_args = 0
 1835              		@ link register save eliminated.
 1836 0000 80B4     		push	{r7}
 1837              		.cfi_def_cfa_offset 4
 1838              		.cfi_offset 7, -4
 1839 0002 83B0     		sub	sp, sp, #12
 1840              		.cfi_def_cfa_offset 16
 1841 0004 00AF     		add	r7, sp, #0
 1842              		.cfi_def_cfa_register 7
 1843 0006 7860     		str	r0, [r7, #4]
 1844 0008 0B46     		mov	r3, r1
 1845 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1218:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
1219:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1220:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1221:./Lib/Src/stm32f4xx_spi.c ****     
1222:./Lib/Src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1223:./Lib/Src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1846              		.loc 1 1223 14
 1847 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1848 000e DB43     		mvns	r3, r3
 1849 0010 9AB2     		uxth	r2, r3
 1850              		.loc 1 1223 12
ARM GAS  /tmp/ccznMrux.s 			page 55


 1851 0012 7B68     		ldr	r3, [r7, #4]
 1852 0014 1A81     		strh	r2, [r3, #8]	@ movhi
1224:./Lib/Src/stm32f4xx_spi.c **** }
 1853              		.loc 1 1224 1
 1854 0016 00BF     		nop
 1855 0018 0C37     		adds	r7, r7, #12
 1856              		.cfi_def_cfa_offset 4
 1857 001a BD46     		mov	sp, r7
 1858              		.cfi_def_cfa_register 13
 1859              		@ sp needed
 1860 001c 5DF8047B 		ldr	r7, [sp], #4
 1861              		.cfi_restore 7
 1862              		.cfi_def_cfa_offset 0
 1863 0020 7047     		bx	lr
 1864              		.cfi_endproc
 1865              	.LFE145:
 1867              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1868              		.align	1
 1869              		.global	SPI_I2S_GetITStatus
 1870              		.syntax unified
 1871              		.thumb
 1872              		.thumb_func
 1874              	SPI_I2S_GetITStatus:
 1875              	.LFB146:
1225:./Lib/Src/stm32f4xx_spi.c **** 
1226:./Lib/Src/stm32f4xx_spi.c **** /**
1227:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1228:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1229:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1230:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1231:./Lib/Src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1232:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1233:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1234:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1235:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1236:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1237:./Lib/Src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1238:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1239:./Lib/Src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1240:./Lib/Src/stm32f4xx_spi.c ****   */
1241:./Lib/Src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1242:./Lib/Src/stm32f4xx_spi.c **** {
 1876              		.loc 1 1242 1
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 16
 1879              		@ frame_needed = 1, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881 0000 80B4     		push	{r7}
 1882              		.cfi_def_cfa_offset 4
 1883              		.cfi_offset 7, -4
 1884 0002 85B0     		sub	sp, sp, #20
 1885              		.cfi_def_cfa_offset 24
 1886 0004 00AF     		add	r7, sp, #0
 1887              		.cfi_def_cfa_register 7
 1888 0006 7860     		str	r0, [r7, #4]
 1889 0008 0B46     		mov	r3, r1
 1890 000a FB70     		strb	r3, [r7, #3]
ARM GAS  /tmp/ccznMrux.s 			page 56


1243:./Lib/Src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 1891              		.loc 1 1243 12
 1892 000c 0023     		movs	r3, #0
 1893 000e FB73     		strb	r3, [r7, #15]
1244:./Lib/Src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1894              		.loc 1 1244 12
 1895 0010 0023     		movs	r3, #0
 1896 0012 BB81     		strh	r3, [r7, #12]	@ movhi
 1897              		.loc 1 1244 23
 1898 0014 0023     		movs	r3, #0
 1899 0016 7B81     		strh	r3, [r7, #10]	@ movhi
 1900              		.loc 1 1244 35
 1901 0018 0023     		movs	r3, #0
 1902 001a 3B81     		strh	r3, [r7, #8]	@ movhi
1245:./Lib/Src/stm32f4xx_spi.c **** 
1246:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
1247:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1248:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1249:./Lib/Src/stm32f4xx_spi.c **** 
1250:./Lib/Src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1251:./Lib/Src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1903              		.loc 1 1251 31
 1904 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1905 001e 03F00F03 		and	r3, r3, #15
 1906              		.loc 1 1251 16
 1907 0022 0122     		movs	r2, #1
 1908 0024 02FA03F3 		lsl	r3, r2, r3
 1909              		.loc 1 1251 9
 1910 0028 BB81     		strh	r3, [r7, #12]	@ movhi
1252:./Lib/Src/stm32f4xx_spi.c **** 
1253:./Lib/Src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1254:./Lib/Src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1911              		.loc 1 1254 10
 1912 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1913 002c 1B09     		lsrs	r3, r3, #4
 1914 002e DBB2     		uxtb	r3, r3
 1915 0030 7B81     		strh	r3, [r7, #10]	@ movhi
1255:./Lib/Src/stm32f4xx_spi.c **** 
1256:./Lib/Src/stm32f4xx_spi.c ****   /* Set the IT mask */
1257:./Lib/Src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1916              		.loc 1 1257 17
 1917 0032 7B89     		ldrh	r3, [r7, #10]
 1918 0034 0122     		movs	r2, #1
 1919 0036 02FA03F3 		lsl	r3, r2, r3
 1920              		.loc 1 1257 10
 1921 003a 7B81     		strh	r3, [r7, #10]	@ movhi
1258:./Lib/Src/stm32f4xx_spi.c **** 
1259:./Lib/Src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1260:./Lib/Src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1922              		.loc 1 1260 23
 1923 003c 7B68     		ldr	r3, [r7, #4]
 1924 003e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1925 0040 9AB2     		uxth	r2, r3
 1926              		.loc 1 1260 16
 1927 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1928 0044 1340     		ands	r3, r3, r2
 1929 0046 3B81     		strh	r3, [r7, #8]	@ movhi
ARM GAS  /tmp/ccznMrux.s 			page 57


1261:./Lib/Src/stm32f4xx_spi.c **** 
1262:./Lib/Src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1263:./Lib/Src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1930              		.loc 1 1263 13
 1931 0048 7B68     		ldr	r3, [r7, #4]
 1932 004a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1933 004c 9AB2     		uxth	r2, r3
 1934              		.loc 1 1263 27
 1935 004e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1936 0050 1340     		ands	r3, r3, r2
 1937 0052 9BB2     		uxth	r3, r3
 1938              		.loc 1 1263 6
 1939 0054 002B     		cmp	r3, #0
 1940 0056 05D0     		beq	.L87
 1941              		.loc 1 1263 47 discriminator 1
 1942 0058 3B89     		ldrh	r3, [r7, #8]
 1943 005a 002B     		cmp	r3, #0
 1944 005c 02D0     		beq	.L87
1264:./Lib/Src/stm32f4xx_spi.c ****   {
1265:./Lib/Src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1266:./Lib/Src/stm32f4xx_spi.c ****     bitstatus = SET;
 1945              		.loc 1 1266 15
 1946 005e 0123     		movs	r3, #1
 1947 0060 FB73     		strb	r3, [r7, #15]
 1948 0062 01E0     		b	.L88
 1949              	.L87:
1267:./Lib/Src/stm32f4xx_spi.c ****   }
1268:./Lib/Src/stm32f4xx_spi.c ****   else
1269:./Lib/Src/stm32f4xx_spi.c ****   {
1270:./Lib/Src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1271:./Lib/Src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1950              		.loc 1 1271 15
 1951 0064 0023     		movs	r3, #0
 1952 0066 FB73     		strb	r3, [r7, #15]
 1953              	.L88:
1272:./Lib/Src/stm32f4xx_spi.c ****   }
1273:./Lib/Src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1274:./Lib/Src/stm32f4xx_spi.c ****   return bitstatus;
 1954              		.loc 1 1274 10
 1955 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1275:./Lib/Src/stm32f4xx_spi.c **** }
 1956              		.loc 1 1275 1
 1957 006a 1846     		mov	r0, r3
 1958 006c 1437     		adds	r7, r7, #20
 1959              		.cfi_def_cfa_offset 4
 1960 006e BD46     		mov	sp, r7
 1961              		.cfi_def_cfa_register 13
 1962              		@ sp needed
 1963 0070 5DF8047B 		ldr	r7, [sp], #4
 1964              		.cfi_restore 7
 1965              		.cfi_def_cfa_offset 0
 1966 0074 7047     		bx	lr
 1967              		.cfi_endproc
 1968              	.LFE146:
 1970              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1971              		.align	1
 1972              		.global	SPI_I2S_ClearITPendingBit
ARM GAS  /tmp/ccznMrux.s 			page 58


 1973              		.syntax unified
 1974              		.thumb
 1975              		.thumb_func
 1977              	SPI_I2S_ClearITPendingBit:
 1978              	.LFB147:
1276:./Lib/Src/stm32f4xx_spi.c **** 
1277:./Lib/Src/stm32f4xx_spi.c **** /**
1278:./Lib/Src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1279:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1280:./Lib/Src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1281:./Lib/Src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1282:./Lib/Src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1283:./Lib/Src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1284:./Lib/Src/stm32f4xx_spi.c ****   *   
1285:./Lib/Src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1286:./Lib/Src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1287:./Lib/Src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1288:./Lib/Src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1289:./Lib/Src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1290:./Lib/Src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1291:./Lib/Src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1292:./Lib/Src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1293:./Lib/Src/stm32f4xx_spi.c ****   *          the SPI).
1294:./Lib/Src/stm32f4xx_spi.c ****   * @retval None
1295:./Lib/Src/stm32f4xx_spi.c ****   */
1296:./Lib/Src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1297:./Lib/Src/stm32f4xx_spi.c **** {
 1979              		.loc 1 1297 1
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 16
 1982              		@ frame_needed = 1, uses_anonymous_args = 0
 1983              		@ link register save eliminated.
 1984 0000 80B4     		push	{r7}
 1985              		.cfi_def_cfa_offset 4
 1986              		.cfi_offset 7, -4
 1987 0002 85B0     		sub	sp, sp, #20
 1988              		.cfi_def_cfa_offset 24
 1989 0004 00AF     		add	r7, sp, #0
 1990              		.cfi_def_cfa_register 7
 1991 0006 7860     		str	r0, [r7, #4]
 1992 0008 0B46     		mov	r3, r1
 1993 000a FB70     		strb	r3, [r7, #3]
1298:./Lib/Src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 1994              		.loc 1 1298 12
 1995 000c 0023     		movs	r3, #0
 1996 000e FB81     		strh	r3, [r7, #14]	@ movhi
1299:./Lib/Src/stm32f4xx_spi.c ****   /* Check the parameters */
1300:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1301:./Lib/Src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1302:./Lib/Src/stm32f4xx_spi.c **** 
1303:./Lib/Src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1304:./Lib/Src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1997              		.loc 1 1304 31
 1998 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1999 0012 03F00F03 		and	r3, r3, #15
 2000              		.loc 1 1304 16
 2001 0016 0122     		movs	r2, #1
ARM GAS  /tmp/ccznMrux.s 			page 59


 2002 0018 02FA03F3 		lsl	r3, r2, r3
 2003              		.loc 1 1304 9
 2004 001c FB81     		strh	r3, [r7, #14]	@ movhi
1305:./Lib/Src/stm32f4xx_spi.c **** 
1306:./Lib/Src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1307:./Lib/Src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 2005              		.loc 1 1307 14
 2006 001e FB89     		ldrh	r3, [r7, #14]	@ movhi
 2007 0020 DB43     		mvns	r3, r3
 2008 0022 9AB2     		uxth	r2, r3
 2009              		.loc 1 1307 12
 2010 0024 7B68     		ldr	r3, [r7, #4]
 2011 0026 1A81     		strh	r2, [r3, #8]	@ movhi
1308:./Lib/Src/stm32f4xx_spi.c **** }
 2012              		.loc 1 1308 1
 2013 0028 00BF     		nop
 2014 002a 1437     		adds	r7, r7, #20
 2015              		.cfi_def_cfa_offset 4
 2016 002c BD46     		mov	sp, r7
 2017              		.cfi_def_cfa_register 13
 2018              		@ sp needed
 2019 002e 5DF8047B 		ldr	r7, [sp], #4
 2020              		.cfi_restore 7
 2021              		.cfi_def_cfa_offset 0
 2022 0032 7047     		bx	lr
 2023              		.cfi_endproc
 2024              	.LFE147:
 2026              		.text
 2027              	.Letext0:
 2028              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 2029              		.file 3 "./Start/stm32f4xx.h"
 2030              		.file 4 "./Lib/inc/stm32f4xx_spi.h"
 2031              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccznMrux.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_spi.c
     /tmp/ccznMrux.s:21     .text.SPI_I2S_DeInit:0000000000000000 $t
     /tmp/ccznMrux.s:27     .text.SPI_I2S_DeInit:0000000000000000 SPI_I2S_DeInit
     /tmp/ccznMrux.s:147    .text.SPI_I2S_DeInit:00000000000000c4 $d
     /tmp/ccznMrux.s:157    .text.SPI_Init:0000000000000000 $t
     /tmp/ccznMrux.s:163    .text.SPI_Init:0000000000000000 SPI_Init
     /tmp/ccznMrux.s:273    .text.I2S_Init:0000000000000000 $t
     /tmp/ccznMrux.s:279    .text.I2S_Init:0000000000000000 I2S_Init
     /tmp/ccznMrux.s:604    .text.I2S_Init:00000000000001d4 $d
     /tmp/ccznMrux.s:612    .text.SPI_StructInit:0000000000000000 $t
     /tmp/ccznMrux.s:618    .text.SPI_StructInit:0000000000000000 SPI_StructInit
     /tmp/ccznMrux.s:684    .text.I2S_StructInit:0000000000000000 $t
     /tmp/ccznMrux.s:690    .text.I2S_StructInit:0000000000000000 I2S_StructInit
     /tmp/ccznMrux.s:744    .text.SPI_Cmd:0000000000000000 $t
     /tmp/ccznMrux.s:750    .text.SPI_Cmd:0000000000000000 SPI_Cmd
     /tmp/ccznMrux.s:808    .text.I2S_Cmd:0000000000000000 $t
     /tmp/ccznMrux.s:814    .text.I2S_Cmd:0000000000000000 I2S_Cmd
     /tmp/ccznMrux.s:872    .text.SPI_DataSizeConfig:0000000000000000 $t
     /tmp/ccznMrux.s:878    .text.SPI_DataSizeConfig:0000000000000000 SPI_DataSizeConfig
     /tmp/ccznMrux.s:929    .text.SPI_BiDirectionalLineConfig:0000000000000000 $t
     /tmp/ccznMrux.s:935    .text.SPI_BiDirectionalLineConfig:0000000000000000 SPI_BiDirectionalLineConfig
     /tmp/ccznMrux.s:993    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 $t
     /tmp/ccznMrux.s:999    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccznMrux.s:1058   .text.SPI_SSOutputCmd:0000000000000000 $t
     /tmp/ccznMrux.s:1064   .text.SPI_SSOutputCmd:0000000000000000 SPI_SSOutputCmd
     /tmp/ccznMrux.s:1122   .text.SPI_TIModeCmd:0000000000000000 $t
     /tmp/ccznMrux.s:1128   .text.SPI_TIModeCmd:0000000000000000 SPI_TIModeCmd
     /tmp/ccznMrux.s:1186   .text.I2S_FullDuplexConfig:0000000000000000 $t
     /tmp/ccznMrux.s:1192   .text.I2S_FullDuplexConfig:0000000000000000 I2S_FullDuplexConfig
     /tmp/ccznMrux.s:1311   .text.SPI_I2S_ReceiveData:0000000000000000 $t
     /tmp/ccznMrux.s:1317   .text.SPI_I2S_ReceiveData:0000000000000000 SPI_I2S_ReceiveData
     /tmp/ccznMrux.s:1351   .text.SPI_I2S_SendData:0000000000000000 $t
     /tmp/ccznMrux.s:1357   .text.SPI_I2S_SendData:0000000000000000 SPI_I2S_SendData
     /tmp/ccznMrux.s:1393   .text.SPI_CalculateCRC:0000000000000000 $t
     /tmp/ccznMrux.s:1399   .text.SPI_CalculateCRC:0000000000000000 SPI_CalculateCRC
     /tmp/ccznMrux.s:1457   .text.SPI_TransmitCRC:0000000000000000 $t
     /tmp/ccznMrux.s:1463   .text.SPI_TransmitCRC:0000000000000000 SPI_TransmitCRC
     /tmp/ccznMrux.s:1502   .text.SPI_GetCRC:0000000000000000 $t
     /tmp/ccznMrux.s:1508   .text.SPI_GetCRC:0000000000000000 SPI_GetCRC
     /tmp/ccznMrux.s:1560   .text.SPI_GetCRCPolynomial:0000000000000000 $t
     /tmp/ccznMrux.s:1566   .text.SPI_GetCRCPolynomial:0000000000000000 SPI_GetCRCPolynomial
     /tmp/ccznMrux.s:1600   .text.SPI_I2S_DMACmd:0000000000000000 $t
     /tmp/ccznMrux.s:1606   .text.SPI_I2S_DMACmd:0000000000000000 SPI_I2S_DMACmd
     /tmp/ccznMrux.s:1671   .text.SPI_I2S_ITConfig:0000000000000000 $t
     /tmp/ccznMrux.s:1677   .text.SPI_I2S_ITConfig:0000000000000000 SPI_I2S_ITConfig
     /tmp/ccznMrux.s:1760   .text.SPI_I2S_GetFlagStatus:0000000000000000 $t
     /tmp/ccznMrux.s:1766   .text.SPI_I2S_GetFlagStatus:0000000000000000 SPI_I2S_GetFlagStatus
     /tmp/ccznMrux.s:1823   .text.SPI_I2S_ClearFlag:0000000000000000 $t
     /tmp/ccznMrux.s:1829   .text.SPI_I2S_ClearFlag:0000000000000000 SPI_I2S_ClearFlag
     /tmp/ccznMrux.s:1868   .text.SPI_I2S_GetITStatus:0000000000000000 $t
     /tmp/ccznMrux.s:1874   .text.SPI_I2S_GetITStatus:0000000000000000 SPI_I2S_GetITStatus
     /tmp/ccznMrux.s:1971   .text.SPI_I2S_ClearITPendingBit:0000000000000000 $t
     /tmp/ccznMrux.s:1977   .text.SPI_I2S_ClearITPendingBit:0000000000000000 SPI_I2S_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
ARM GAS  /tmp/ccznMrux.s 			page 61


RCC_APB1PeriphResetCmd
