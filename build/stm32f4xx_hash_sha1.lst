ARM GAS  /tmp/cc54eC6t.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_hash_sha1.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_hash_sha1.c"
  20              		.section	.text.HASH_SHA1,"ax",%progbits
  21              		.align	1
  22              		.global	HASH_SHA1
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	HASH_SHA1:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_hash_sha1.c **** /**
   2:./Lib/Src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @file    stm32f4xx_hash_sha1.c
   4:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @brief   This file provides high level functions to compute the HASH SHA1 and
   8:./Lib/Src/stm32f4xx_hash_sha1.c ****   *          HMAC SHA1 Digest of an input message.
   9:./Lib/Src/stm32f4xx_hash_sha1.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:./Lib/Src/stm32f4xx_hash_sha1.c ****   *          peripheral.
  11:./Lib/Src/stm32f4xx_hash_sha1.c ****   *
  12:./Lib/Src/stm32f4xx_hash_sha1.c **** @verbatim
  13:./Lib/Src/stm32f4xx_hash_sha1.c ****  ===================================================================
  14:./Lib/Src/stm32f4xx_hash_sha1.c ****                  ##### How to use this driver #####
  15:./Lib/Src/stm32f4xx_hash_sha1.c ****  ===================================================================
  16:./Lib/Src/stm32f4xx_hash_sha1.c ****  [..]
  17:./Lib/Src/stm32f4xx_hash_sha1.c ****    (#) Enable The HASH controller clock using 
  18:./Lib/Src/stm32f4xx_hash_sha1.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:./Lib/Src/stm32f4xx_hash_sha1.c ****   
  20:./Lib/Src/stm32f4xx_hash_sha1.c ****    (#) Calculate the HASH SHA1 Digest using HASH_SHA1() function.
  21:./Lib/Src/stm32f4xx_hash_sha1.c ****   
  22:./Lib/Src/stm32f4xx_hash_sha1.c ****    (#) Calculate the HMAC SHA1 Digest using HMAC_SHA1() function.
  23:./Lib/Src/stm32f4xx_hash_sha1.c ****   
  24:./Lib/Src/stm32f4xx_hash_sha1.c **** @endverbatim
  25:./Lib/Src/stm32f4xx_hash_sha1.c ****   *
  26:./Lib/Src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  27:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @attention
  28:./Lib/Src/stm32f4xx_hash_sha1.c ****   *
  29:./Lib/Src/stm32f4xx_hash_sha1.c ****   * Copyright (c) 2016 STMicroelectronics.
  30:./Lib/Src/stm32f4xx_hash_sha1.c ****   * All rights reserved.
ARM GAS  /tmp/cc54eC6t.s 			page 2


  31:./Lib/Src/stm32f4xx_hash_sha1.c ****   *
  32:./Lib/Src/stm32f4xx_hash_sha1.c ****   * This software is licensed under terms that can be found in the LICENSE file
  33:./Lib/Src/stm32f4xx_hash_sha1.c ****   * in the root directory of this software component.
  34:./Lib/Src/stm32f4xx_hash_sha1.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  35:./Lib/Src/stm32f4xx_hash_sha1.c ****   *
  36:./Lib/Src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  37:./Lib/Src/stm32f4xx_hash_sha1.c ****   */
  38:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  39:./Lib/Src/stm32f4xx_hash_sha1.c **** /* Includes ------------------------------------------------------------------*/
  40:./Lib/Src/stm32f4xx_hash_sha1.c **** #include "stm32f4xx_hash.h"
  41:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  42:./Lib/Src/stm32f4xx_hash_sha1.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  43:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @{
  44:./Lib/Src/stm32f4xx_hash_sha1.c ****   */
  45:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  46:./Lib/Src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH 
  47:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @brief HASH driver modules
  48:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @{
  49:./Lib/Src/stm32f4xx_hash_sha1.c ****   */
  50:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  51:./Lib/Src/stm32f4xx_hash_sha1.c **** /* Private typedef -----------------------------------------------------------*/
  52:./Lib/Src/stm32f4xx_hash_sha1.c **** /* Private define ------------------------------------------------------------*/
  53:./Lib/Src/stm32f4xx_hash_sha1.c **** #define SHA1BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  54:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  55:./Lib/Src/stm32f4xx_hash_sha1.c **** /* Private macro -------------------------------------------------------------*/
  56:./Lib/Src/stm32f4xx_hash_sha1.c **** /* Private variables ---------------------------------------------------------*/
  57:./Lib/Src/stm32f4xx_hash_sha1.c **** /* Private function prototypes -----------------------------------------------*/
  58:./Lib/Src/stm32f4xx_hash_sha1.c **** /* Private functions ---------------------------------------------------------*/
  59:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  60:./Lib/Src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Private_Functions
  61:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @{
  62:./Lib/Src/stm32f4xx_hash_sha1.c ****   */ 
  63:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  64:./Lib/Src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Group6 High Level SHA1 functions
  65:./Lib/Src/stm32f4xx_hash_sha1.c ****  *  @brief   High Level SHA1 Hash and HMAC functions 
  66:./Lib/Src/stm32f4xx_hash_sha1.c ****  *
  67:./Lib/Src/stm32f4xx_hash_sha1.c **** @verbatim   
  68:./Lib/Src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  69:./Lib/Src/stm32f4xx_hash_sha1.c ****                ##### High Level SHA1 Hash and HMAC functions #####
  70:./Lib/Src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  71:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  72:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  73:./Lib/Src/stm32f4xx_hash_sha1.c **** @endverbatim
  74:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @{
  75:./Lib/Src/stm32f4xx_hash_sha1.c ****   */
  76:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  77:./Lib/Src/stm32f4xx_hash_sha1.c **** /**
  78:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HASH SHA1 digest.
  79:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
  80:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
  81:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
  82:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
  83:./Lib/Src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
  84:./Lib/Src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
  85:./Lib/Src/stm32f4xx_hash_sha1.c ****   */
  86:./Lib/Src/stm32f4xx_hash_sha1.c **** ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
  87:./Lib/Src/stm32f4xx_hash_sha1.c **** {
ARM GAS  /tmp/cc54eC6t.s 			page 3


  29              		.loc 1 87 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 112
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 9CB0     		sub	sp, sp, #112
  38              		.cfi_def_cfa_offset 120
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 F860     		str	r0, [r7, #12]
  42 0008 B960     		str	r1, [r7, #8]
  43 000a 7A60     		str	r2, [r7, #4]
  88:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
  89:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
  90:./Lib/Src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
  44              		.loc 1 90 17
  45 000c 0023     		movs	r3, #0
  46 000e FB82     		strh	r3, [r7, #22]	@ movhi
  91:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
  47              		.loc 1 91 12
  48 0010 0023     		movs	r3, #0
  49 0012 FB66     		str	r3, [r7, #108]
  92:./Lib/Src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 92 17
  51 0014 0023     		movs	r3, #0
  52 0016 3B61     		str	r3, [r7, #16]
  93:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
  53              		.loc 1 93 12
  54 0018 0023     		movs	r3, #0
  55 001a 3B66     		str	r3, [r7, #96]
  94:./Lib/Src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
  56              		.loc 1 94 15
  57 001c 0123     		movs	r3, #1
  58 001e 87F86B30 		strb	r3, [r7, #107]
  95:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
  59              		.loc 1 95 12
  60 0022 FB68     		ldr	r3, [r7, #12]
  61 0024 7B66     		str	r3, [r7, #100]
  96:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
  62              		.loc 1 96 12
  63 0026 7B68     		ldr	r3, [r7, #4]
  64 0028 FB65     		str	r3, [r7, #92]
  97:./Lib/Src/stm32f4xx_hash_sha1.c **** 
  98:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
  99:./Lib/Src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  65              		.loc 1 99 19
  66 002a BB68     		ldr	r3, [r7, #8]
  67 002c 9BB2     		uxth	r3, r3
  68 002e 03F00303 		and	r3, r3, #3
  69 0032 9BB2     		uxth	r3, r3
  70 0034 DB00     		lsls	r3, r3, #3
  71 0036 9BB2     		uxth	r3, r3
  72 0038 FB82     		strh	r3, [r7, #22]	@ movhi
 100:./Lib/Src/stm32f4xx_hash_sha1.c **** 
ARM GAS  /tmp/cc54eC6t.s 			page 4


 101:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 102:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
  73              		.loc 1 102 3
  74 003a FFF7FEFF 		bl	HASH_DeInit
 103:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 104:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 105:./Lib/Src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  75              		.loc 1 105 46
  76 003e 0023     		movs	r3, #0
  77 0040 BB63     		str	r3, [r7, #56]
 106:./Lib/Src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  78              		.loc 1 106 41
  79 0042 0023     		movs	r3, #0
  80 0044 FB63     		str	r3, [r7, #60]
 107:./Lib/Src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  81              		.loc 1 107 41
  82 0046 2023     		movs	r3, #32
  83 0048 3B64     		str	r3, [r7, #64]
 108:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
  84              		.loc 1 108 3
  85 004a 07F13803 		add	r3, r7, #56
  86 004e 1846     		mov	r0, r3
  87 0050 FFF7FEFF 		bl	HASH_Init
 109:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 110:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the data */
 111:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  88              		.loc 1 111 3
  89 0054 FB8A     		ldrh	r3, [r7, #22]	@ movhi
  90 0056 9BB2     		uxth	r3, r3
  91 0058 1846     		mov	r0, r3
  92 005a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 112:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 113:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Write the Input block in the IN FIFO */
 114:./Lib/Src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  93              		.loc 1 114 8
  94 005e 0023     		movs	r3, #0
  95 0060 FB66     		str	r3, [r7, #108]
  96              		.loc 1 114 3
  97 0062 0AE0     		b	.L2
  98              	.L3:
 115:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 116:./Lib/Src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
  99              		.loc 1 116 18 discriminator 3
 100 0064 7B6E     		ldr	r3, [r7, #100]
 101              		.loc 1 116 5 discriminator 3
 102 0066 1B68     		ldr	r3, [r3]
 103 0068 1846     		mov	r0, r3
 104 006a FFF7FEFF 		bl	HASH_DataIn
 117:./Lib/Src/stm32f4xx_hash_sha1.c ****     inputaddr+=4;
 105              		.loc 1 117 14 discriminator 3
 106 006e 7B6E     		ldr	r3, [r7, #100]
 107 0070 0433     		adds	r3, r3, #4
 108 0072 7B66     		str	r3, [r7, #100]
 114:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 109              		.loc 1 114 21 discriminator 3
 110 0074 FB6E     		ldr	r3, [r7, #108]
 111 0076 0433     		adds	r3, r3, #4
ARM GAS  /tmp/cc54eC6t.s 			page 5


 112 0078 FB66     		str	r3, [r7, #108]
 113              	.L2:
 114:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 114              		.loc 1 114 13 discriminator 1
 115 007a FA6E     		ldr	r2, [r7, #108]
 116 007c BB68     		ldr	r3, [r7, #8]
 117 007e 9A42     		cmp	r2, r3
 118 0080 F0D3     		bcc	.L3
 118:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 119:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 120:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 121:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 119              		.loc 1 121 3
 120 0082 FFF7FEFF 		bl	HASH_StartDigest
 121              	.L5:
 122:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 123:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 124:./Lib/Src/stm32f4xx_hash_sha1.c ****   do
 125:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 126:./Lib/Src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 122              		.loc 1 126 18 discriminator 2
 123 0086 0820     		movs	r0, #8
 124 0088 FFF7FEFF 		bl	HASH_GetFlagStatus
 125 008c 0346     		mov	r3, r0
 126              		.loc 1 126 16 discriminator 2
 127 008e 3B66     		str	r3, [r7, #96]
 127:./Lib/Src/stm32f4xx_hash_sha1.c ****     counter++;
 128              		.loc 1 127 12 discriminator 2
 129 0090 3B69     		ldr	r3, [r7, #16]
 130 0092 0133     		adds	r3, r3, #1
 131 0094 3B61     		str	r3, [r7, #16]
 128:./Lib/Src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 132              		.loc 1 128 20 discriminator 2
 133 0096 3B69     		ldr	r3, [r7, #16]
 134              		.loc 1 128 41 discriminator 2
 135 0098 B3F5803F 		cmp	r3, #65536
 136 009c 02D0     		beq	.L4
 137              		.loc 1 128 41 is_stmt 0 discriminator 1
 138 009e 3B6E     		ldr	r3, [r7, #96]
 139 00a0 002B     		cmp	r3, #0
 140 00a2 F0D1     		bne	.L5
 141              	.L4:
 129:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 130:./Lib/Src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 142              		.loc 1 130 6 is_stmt 1
 143 00a4 3B6E     		ldr	r3, [r7, #96]
 144 00a6 002B     		cmp	r3, #0
 145 00a8 03D0     		beq	.L6
 131:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 132:./Lib/Src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 146              		.loc 1 132 13
 147 00aa 0023     		movs	r3, #0
 148 00ac 87F86B30 		strb	r3, [r7, #107]
 149 00b0 2EE0     		b	.L7
 150              	.L6:
 133:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 134:./Lib/Src/stm32f4xx_hash_sha1.c ****   else
ARM GAS  /tmp/cc54eC6t.s 			page 6


 135:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 136:./Lib/Src/stm32f4xx_hash_sha1.c ****     /* Read the message digest */
 137:./Lib/Src/stm32f4xx_hash_sha1.c ****     HASH_GetDigest(&SHA1_MessageDigest);
 151              		.loc 1 137 5
 152 00b2 07F11803 		add	r3, r7, #24
 153 00b6 1846     		mov	r0, r3
 154 00b8 FFF7FEFF 		bl	HASH_GetDigest
 138:./Lib/Src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 155              		.loc 1 138 33
 156 00bc BA69     		ldr	r2, [r7, #24]
 157              		.loc 1 138 6
 158 00be FB6D     		ldr	r3, [r7, #92]
 159 00c0 BA64     		str	r2, [r7, #72]
 160              	.LBB22:
 161              	.LBB23:
 162              		.file 2 "./Start/core_cmInstr.h"
   1:./Start/core_cmInstr.h **** /**************************************************************************//**
   2:./Start/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:./Start/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:./Start/core_cmInstr.h ****  * @version  V4.10
   5:./Start/core_cmInstr.h ****  * @date     18. March 2015
   6:./Start/core_cmInstr.h ****  *
   7:./Start/core_cmInstr.h ****  * @note
   8:./Start/core_cmInstr.h ****  *
   9:./Start/core_cmInstr.h ****  ******************************************************************************/
  10:./Start/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:./Start/core_cmInstr.h **** 
  12:./Start/core_cmInstr.h ****    All rights reserved.
  13:./Start/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:./Start/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:./Start/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:./Start/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:./Start/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:./Start/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:./Start/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:./Start/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:./Start/core_cmInstr.h ****      specific prior written permission.
  23:./Start/core_cmInstr.h ****    *
  24:./Start/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:./Start/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:./Start/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:./Start/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:./Start/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:./Start/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:./Start/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:./Start/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:./Start/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:./Start/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:./Start/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:./Start/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:./Start/core_cmInstr.h **** 
  37:./Start/core_cmInstr.h **** 
  38:./Start/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:./Start/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:./Start/core_cmInstr.h **** 
  41:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/cc54eC6t.s 			page 7


  42:./Start/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:./Start/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:./Start/core_cmInstr.h ****   Access to dedicated instructions
  45:./Start/core_cmInstr.h ****   @{
  46:./Start/core_cmInstr.h **** */
  47:./Start/core_cmInstr.h **** 
  48:./Start/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:./Start/core_cmInstr.h **** /* ARM armcc specific functions */
  50:./Start/core_cmInstr.h **** 
  51:./Start/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:./Start/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:./Start/core_cmInstr.h **** #endif
  54:./Start/core_cmInstr.h **** 
  55:./Start/core_cmInstr.h **** 
  56:./Start/core_cmInstr.h **** /** \brief  No Operation
  57:./Start/core_cmInstr.h **** 
  58:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:./Start/core_cmInstr.h ****  */
  60:./Start/core_cmInstr.h **** #define __NOP                             __nop
  61:./Start/core_cmInstr.h **** 
  62:./Start/core_cmInstr.h **** 
  63:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:./Start/core_cmInstr.h **** 
  65:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:./Start/core_cmInstr.h ****     until one of a number of events occurs.
  67:./Start/core_cmInstr.h ****  */
  68:./Start/core_cmInstr.h **** #define __WFI                             __wfi
  69:./Start/core_cmInstr.h **** 
  70:./Start/core_cmInstr.h **** 
  71:./Start/core_cmInstr.h **** /** \brief  Wait For Event
  72:./Start/core_cmInstr.h **** 
  73:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:./Start/core_cmInstr.h ****  */
  76:./Start/core_cmInstr.h **** #define __WFE                             __wfe
  77:./Start/core_cmInstr.h **** 
  78:./Start/core_cmInstr.h **** 
  79:./Start/core_cmInstr.h **** /** \brief  Send Event
  80:./Start/core_cmInstr.h **** 
  81:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:./Start/core_cmInstr.h ****  */
  83:./Start/core_cmInstr.h **** #define __SEV                             __sev
  84:./Start/core_cmInstr.h **** 
  85:./Start/core_cmInstr.h **** 
  86:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:./Start/core_cmInstr.h **** 
  88:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:./Start/core_cmInstr.h ****  */
  92:./Start/core_cmInstr.h **** #define __ISB() do {\
  93:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  94:./Start/core_cmInstr.h ****                    __isb(0xF);\
  95:./Start/core_cmInstr.h ****                    __schedule_barrier();\
  96:./Start/core_cmInstr.h ****                 } while (0)
  97:./Start/core_cmInstr.h **** 
  98:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
ARM GAS  /tmp/cc54eC6t.s 			page 8


  99:./Start/core_cmInstr.h **** 
 100:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 101:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 102:./Start/core_cmInstr.h ****  */
 103:./Start/core_cmInstr.h **** #define __DSB() do {\
 104:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 105:./Start/core_cmInstr.h ****                    __dsb(0xF);\
 106:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 107:./Start/core_cmInstr.h ****                 } while (0)
 108:./Start/core_cmInstr.h **** 
 109:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 110:./Start/core_cmInstr.h **** 
 111:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 112:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 113:./Start/core_cmInstr.h ****  */
 114:./Start/core_cmInstr.h **** #define __DMB() do {\
 115:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 116:./Start/core_cmInstr.h ****                    __dmb(0xF);\
 117:./Start/core_cmInstr.h ****                    __schedule_barrier();\
 118:./Start/core_cmInstr.h ****                 } while (0)
 119:./Start/core_cmInstr.h **** 
 120:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 121:./Start/core_cmInstr.h **** 
 122:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 123:./Start/core_cmInstr.h **** 
 124:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 125:./Start/core_cmInstr.h ****     \return               Reversed value
 126:./Start/core_cmInstr.h ****  */
 127:./Start/core_cmInstr.h **** #define __REV                             __rev
 128:./Start/core_cmInstr.h **** 
 129:./Start/core_cmInstr.h **** 
 130:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 131:./Start/core_cmInstr.h **** 
 132:./Start/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 133:./Start/core_cmInstr.h **** 
 134:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 135:./Start/core_cmInstr.h ****     \return               Reversed value
 136:./Start/core_cmInstr.h ****  */
 137:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 138:./Start/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 139:./Start/core_cmInstr.h **** {
 140:./Start/core_cmInstr.h ****   rev16 r0, r0
 141:./Start/core_cmInstr.h ****   bx lr
 142:./Start/core_cmInstr.h **** }
 143:./Start/core_cmInstr.h **** #endif
 144:./Start/core_cmInstr.h **** 
 145:./Start/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 146:./Start/core_cmInstr.h **** 
 147:./Start/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 148:./Start/core_cmInstr.h **** 
 149:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 150:./Start/core_cmInstr.h ****     \return               Reversed value
 151:./Start/core_cmInstr.h ****  */
 152:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 153:./Start/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 154:./Start/core_cmInstr.h **** {
 155:./Start/core_cmInstr.h ****   revsh r0, r0
ARM GAS  /tmp/cc54eC6t.s 			page 9


 156:./Start/core_cmInstr.h ****   bx lr
 157:./Start/core_cmInstr.h **** }
 158:./Start/core_cmInstr.h **** #endif
 159:./Start/core_cmInstr.h **** 
 160:./Start/core_cmInstr.h **** 
 161:./Start/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 162:./Start/core_cmInstr.h **** 
 163:./Start/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 164:./Start/core_cmInstr.h **** 
 165:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 166:./Start/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 167:./Start/core_cmInstr.h ****     \return               Rotated value
 168:./Start/core_cmInstr.h ****  */
 169:./Start/core_cmInstr.h **** #define __ROR                             __ror
 170:./Start/core_cmInstr.h **** 
 171:./Start/core_cmInstr.h **** 
 172:./Start/core_cmInstr.h **** /** \brief  Breakpoint
 173:./Start/core_cmInstr.h **** 
 174:./Start/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 175:./Start/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 176:./Start/core_cmInstr.h **** 
 177:./Start/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 178:./Start/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 179:./Start/core_cmInstr.h ****  */
 180:./Start/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 181:./Start/core_cmInstr.h **** 
 182:./Start/core_cmInstr.h **** 
 183:./Start/core_cmInstr.h **** /** \brief  Reverse bit order of value
 184:./Start/core_cmInstr.h **** 
 185:./Start/core_cmInstr.h ****     This function reverses the bit order of the given value.
 186:./Start/core_cmInstr.h **** 
 187:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 188:./Start/core_cmInstr.h ****     \return               Reversed value
 189:./Start/core_cmInstr.h ****  */
 190:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 191:./Start/core_cmInstr.h ****   #define __RBIT                          __rbit
 192:./Start/core_cmInstr.h **** #else
 193:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 194:./Start/core_cmInstr.h **** {
 195:./Start/core_cmInstr.h ****   uint32_t result;
 196:./Start/core_cmInstr.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; // extra shift needed at end
 197:./Start/core_cmInstr.h **** 
 198:./Start/core_cmInstr.h ****   result = value;                      // r will be reversed bits of v; first get LSB of v
 199:./Start/core_cmInstr.h ****   for (value >>= 1; value; value >>= 1)
 200:./Start/core_cmInstr.h ****   {
 201:./Start/core_cmInstr.h ****     result <<= 1;
 202:./Start/core_cmInstr.h ****     result |= value & 1;
 203:./Start/core_cmInstr.h ****     s--;
 204:./Start/core_cmInstr.h ****   }
 205:./Start/core_cmInstr.h ****   result <<= s;                       // shift when v's highest bits are zero
 206:./Start/core_cmInstr.h ****   return(result);
 207:./Start/core_cmInstr.h **** }
 208:./Start/core_cmInstr.h **** #endif
 209:./Start/core_cmInstr.h **** 
 210:./Start/core_cmInstr.h **** 
 211:./Start/core_cmInstr.h **** /** \brief  Count leading zeros
 212:./Start/core_cmInstr.h **** 
ARM GAS  /tmp/cc54eC6t.s 			page 10


 213:./Start/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 214:./Start/core_cmInstr.h **** 
 215:./Start/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 216:./Start/core_cmInstr.h ****     \return             number of leading zeros in value
 217:./Start/core_cmInstr.h ****  */
 218:./Start/core_cmInstr.h **** #define __CLZ                             __clz
 219:./Start/core_cmInstr.h **** 
 220:./Start/core_cmInstr.h **** 
 221:./Start/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 222:./Start/core_cmInstr.h **** 
 223:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 224:./Start/core_cmInstr.h **** 
 225:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 226:./Start/core_cmInstr.h **** 
 227:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 228:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 229:./Start/core_cmInstr.h ****  */
 230:./Start/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 231:./Start/core_cmInstr.h **** 
 232:./Start/core_cmInstr.h **** 
 233:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 234:./Start/core_cmInstr.h **** 
 235:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 236:./Start/core_cmInstr.h **** 
 237:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 238:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 239:./Start/core_cmInstr.h ****  */
 240:./Start/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 241:./Start/core_cmInstr.h **** 
 242:./Start/core_cmInstr.h **** 
 243:./Start/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 244:./Start/core_cmInstr.h **** 
 245:./Start/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 246:./Start/core_cmInstr.h **** 
 247:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 248:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 249:./Start/core_cmInstr.h ****  */
 250:./Start/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 251:./Start/core_cmInstr.h **** 
 252:./Start/core_cmInstr.h **** 
 253:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 254:./Start/core_cmInstr.h **** 
 255:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 256:./Start/core_cmInstr.h **** 
 257:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 258:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 259:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 260:./Start/core_cmInstr.h ****     \return          1  Function failed
 261:./Start/core_cmInstr.h ****  */
 262:./Start/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 263:./Start/core_cmInstr.h **** 
 264:./Start/core_cmInstr.h **** 
 265:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 266:./Start/core_cmInstr.h **** 
 267:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 268:./Start/core_cmInstr.h **** 
 269:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
ARM GAS  /tmp/cc54eC6t.s 			page 11


 270:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 271:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 272:./Start/core_cmInstr.h ****     \return          1  Function failed
 273:./Start/core_cmInstr.h ****  */
 274:./Start/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 275:./Start/core_cmInstr.h **** 
 276:./Start/core_cmInstr.h **** 
 277:./Start/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 278:./Start/core_cmInstr.h **** 
 279:./Start/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 280:./Start/core_cmInstr.h **** 
 281:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 282:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 283:./Start/core_cmInstr.h ****     \return          0  Function succeeded
 284:./Start/core_cmInstr.h ****     \return          1  Function failed
 285:./Start/core_cmInstr.h ****  */
 286:./Start/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 287:./Start/core_cmInstr.h **** 
 288:./Start/core_cmInstr.h **** 
 289:./Start/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 290:./Start/core_cmInstr.h **** 
 291:./Start/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 292:./Start/core_cmInstr.h **** 
 293:./Start/core_cmInstr.h ****  */
 294:./Start/core_cmInstr.h **** #define __CLREX                           __clrex
 295:./Start/core_cmInstr.h **** 
 296:./Start/core_cmInstr.h **** 
 297:./Start/core_cmInstr.h **** /** \brief  Signed Saturate
 298:./Start/core_cmInstr.h **** 
 299:./Start/core_cmInstr.h ****     This function saturates a signed value.
 300:./Start/core_cmInstr.h **** 
 301:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 302:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 303:./Start/core_cmInstr.h ****     \return             Saturated value
 304:./Start/core_cmInstr.h ****  */
 305:./Start/core_cmInstr.h **** #define __SSAT                            __ssat
 306:./Start/core_cmInstr.h **** 
 307:./Start/core_cmInstr.h **** 
 308:./Start/core_cmInstr.h **** /** \brief  Unsigned Saturate
 309:./Start/core_cmInstr.h **** 
 310:./Start/core_cmInstr.h ****     This function saturates an unsigned value.
 311:./Start/core_cmInstr.h **** 
 312:./Start/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 313:./Start/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 314:./Start/core_cmInstr.h ****     \return             Saturated value
 315:./Start/core_cmInstr.h ****  */
 316:./Start/core_cmInstr.h **** #define __USAT                            __usat
 317:./Start/core_cmInstr.h **** 
 318:./Start/core_cmInstr.h **** 
 319:./Start/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 320:./Start/core_cmInstr.h **** 
 321:./Start/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit.
 322:./Start/core_cmInstr.h ****     The carry input is shifted in at the left end of the bitstring.
 323:./Start/core_cmInstr.h **** 
 324:./Start/core_cmInstr.h ****     \param [in]    value  Value to rotate
 325:./Start/core_cmInstr.h ****     \return               Rotated value
 326:./Start/core_cmInstr.h ****  */
ARM GAS  /tmp/cc54eC6t.s 			page 12


 327:./Start/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 328:./Start/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 329:./Start/core_cmInstr.h **** {
 330:./Start/core_cmInstr.h ****   rrx r0, r0
 331:./Start/core_cmInstr.h ****   bx lr
 332:./Start/core_cmInstr.h **** }
 333:./Start/core_cmInstr.h **** #endif
 334:./Start/core_cmInstr.h **** 
 335:./Start/core_cmInstr.h **** 
 336:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 337:./Start/core_cmInstr.h **** 
 338:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 339:./Start/core_cmInstr.h **** 
 340:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 341:./Start/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 342:./Start/core_cmInstr.h ****  */
 343:./Start/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 344:./Start/core_cmInstr.h **** 
 345:./Start/core_cmInstr.h **** 
 346:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 347:./Start/core_cmInstr.h **** 
 348:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 349:./Start/core_cmInstr.h **** 
 350:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 351:./Start/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 352:./Start/core_cmInstr.h ****  */
 353:./Start/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 354:./Start/core_cmInstr.h **** 
 355:./Start/core_cmInstr.h **** 
 356:./Start/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 357:./Start/core_cmInstr.h **** 
 358:./Start/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 359:./Start/core_cmInstr.h **** 
 360:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 361:./Start/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 362:./Start/core_cmInstr.h ****  */
 363:./Start/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 364:./Start/core_cmInstr.h **** 
 365:./Start/core_cmInstr.h **** 
 366:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 367:./Start/core_cmInstr.h **** 
 368:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 369:./Start/core_cmInstr.h **** 
 370:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 371:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 372:./Start/core_cmInstr.h ****  */
 373:./Start/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 374:./Start/core_cmInstr.h **** 
 375:./Start/core_cmInstr.h **** 
 376:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 377:./Start/core_cmInstr.h **** 
 378:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 379:./Start/core_cmInstr.h **** 
 380:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 381:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 382:./Start/core_cmInstr.h ****  */
 383:./Start/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
ARM GAS  /tmp/cc54eC6t.s 			page 13


 384:./Start/core_cmInstr.h **** 
 385:./Start/core_cmInstr.h **** 
 386:./Start/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 387:./Start/core_cmInstr.h **** 
 388:./Start/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 389:./Start/core_cmInstr.h **** 
 390:./Start/core_cmInstr.h ****     \param [in]  value  Value to store
 391:./Start/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 392:./Start/core_cmInstr.h ****  */
 393:./Start/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 394:./Start/core_cmInstr.h **** 
 395:./Start/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 396:./Start/core_cmInstr.h **** 
 397:./Start/core_cmInstr.h **** 
 398:./Start/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 399:./Start/core_cmInstr.h **** /* GNU gcc specific functions */
 400:./Start/core_cmInstr.h **** 
 401:./Start/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 402:./Start/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 403:./Start/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 404:./Start/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 405:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 406:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 407:./Start/core_cmInstr.h **** #else
 408:./Start/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 409:./Start/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 410:./Start/core_cmInstr.h **** #endif
 411:./Start/core_cmInstr.h **** 
 412:./Start/core_cmInstr.h **** /** \brief  No Operation
 413:./Start/core_cmInstr.h **** 
 414:./Start/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 415:./Start/core_cmInstr.h ****  */
 416:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 417:./Start/core_cmInstr.h **** {
 418:./Start/core_cmInstr.h ****   __ASM volatile ("nop");
 419:./Start/core_cmInstr.h **** }
 420:./Start/core_cmInstr.h **** 
 421:./Start/core_cmInstr.h **** 
 422:./Start/core_cmInstr.h **** /** \brief  Wait For Interrupt
 423:./Start/core_cmInstr.h **** 
 424:./Start/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 425:./Start/core_cmInstr.h ****     until one of a number of events occurs.
 426:./Start/core_cmInstr.h ****  */
 427:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 428:./Start/core_cmInstr.h **** {
 429:./Start/core_cmInstr.h ****   __ASM volatile ("wfi");
 430:./Start/core_cmInstr.h **** }
 431:./Start/core_cmInstr.h **** 
 432:./Start/core_cmInstr.h **** 
 433:./Start/core_cmInstr.h **** /** \brief  Wait For Event
 434:./Start/core_cmInstr.h **** 
 435:./Start/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 436:./Start/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 437:./Start/core_cmInstr.h ****  */
 438:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 439:./Start/core_cmInstr.h **** {
 440:./Start/core_cmInstr.h ****   __ASM volatile ("wfe");
ARM GAS  /tmp/cc54eC6t.s 			page 14


 441:./Start/core_cmInstr.h **** }
 442:./Start/core_cmInstr.h **** 
 443:./Start/core_cmInstr.h **** 
 444:./Start/core_cmInstr.h **** /** \brief  Send Event
 445:./Start/core_cmInstr.h **** 
 446:./Start/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 447:./Start/core_cmInstr.h ****  */
 448:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 449:./Start/core_cmInstr.h **** {
 450:./Start/core_cmInstr.h ****   __ASM volatile ("sev");
 451:./Start/core_cmInstr.h **** }
 452:./Start/core_cmInstr.h **** 
 453:./Start/core_cmInstr.h **** 
 454:./Start/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 455:./Start/core_cmInstr.h **** 
 456:./Start/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 457:./Start/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 458:./Start/core_cmInstr.h ****     memory, after the instruction has been completed.
 459:./Start/core_cmInstr.h ****  */
 460:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 461:./Start/core_cmInstr.h **** {
 462:./Start/core_cmInstr.h ****   __ASM volatile ("isb 0xF":::"memory");
 463:./Start/core_cmInstr.h **** }
 464:./Start/core_cmInstr.h **** 
 465:./Start/core_cmInstr.h **** 
 466:./Start/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 467:./Start/core_cmInstr.h **** 
 468:./Start/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 469:./Start/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 470:./Start/core_cmInstr.h ****  */
 471:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 472:./Start/core_cmInstr.h **** {
 473:./Start/core_cmInstr.h ****   __ASM volatile ("dsb 0xF":::"memory");
 474:./Start/core_cmInstr.h **** }
 475:./Start/core_cmInstr.h **** 
 476:./Start/core_cmInstr.h **** 
 477:./Start/core_cmInstr.h **** /** \brief  Data Memory Barrier
 478:./Start/core_cmInstr.h **** 
 479:./Start/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 480:./Start/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 481:./Start/core_cmInstr.h ****  */
 482:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 483:./Start/core_cmInstr.h **** {
 484:./Start/core_cmInstr.h ****   __ASM volatile ("dmb 0xF":::"memory");
 485:./Start/core_cmInstr.h **** }
 486:./Start/core_cmInstr.h **** 
 487:./Start/core_cmInstr.h **** 
 488:./Start/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 489:./Start/core_cmInstr.h **** 
 490:./Start/core_cmInstr.h ****     This function reverses the byte order in integer value.
 491:./Start/core_cmInstr.h **** 
 492:./Start/core_cmInstr.h ****     \param [in]    value  Value to reverse
 493:./Start/core_cmInstr.h ****     \return               Reversed value
 494:./Start/core_cmInstr.h ****  */
 495:./Start/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 496:./Start/core_cmInstr.h **** {
 497:./Start/core_cmInstr.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
ARM GAS  /tmp/cc54eC6t.s 			page 15


 498:./Start/core_cmInstr.h ****   return __builtin_bswap32(value);
 163              		.loc 2 498 10
 164 00c2 BA6C     		ldr	r2, [r7, #72]
 165 00c4 12BA     		rev	r2, r2
 166              	.LBE23:
 167              	.LBE22:
 168              		.loc 1 138 31
 169 00c6 1A60     		str	r2, [r3]
 139:./Lib/Src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 170              		.loc 1 139 15
 171 00c8 FB6D     		ldr	r3, [r7, #92]
 172 00ca 0433     		adds	r3, r3, #4
 173 00cc FB65     		str	r3, [r7, #92]
 140:./Lib/Src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 174              		.loc 1 140 33
 175 00ce FA69     		ldr	r2, [r7, #28]
 176              		.loc 1 140 6
 177 00d0 FB6D     		ldr	r3, [r7, #92]
 178 00d2 FA64     		str	r2, [r7, #76]
 179              	.LBB24:
 180              	.LBB25:
 181              		.loc 2 498 10
 182 00d4 FA6C     		ldr	r2, [r7, #76]
 183 00d6 12BA     		rev	r2, r2
 184              	.LBE25:
 185              	.LBE24:
 186              		.loc 1 140 31
 187 00d8 1A60     		str	r2, [r3]
 141:./Lib/Src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 188              		.loc 1 141 15
 189 00da FB6D     		ldr	r3, [r7, #92]
 190 00dc 0433     		adds	r3, r3, #4
 191 00de FB65     		str	r3, [r7, #92]
 142:./Lib/Src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 192              		.loc 1 142 33
 193 00e0 3A6A     		ldr	r2, [r7, #32]
 194              		.loc 1 142 6
 195 00e2 FB6D     		ldr	r3, [r7, #92]
 196 00e4 3A65     		str	r2, [r7, #80]
 197              	.LBB26:
 198              	.LBB27:
 199              		.loc 2 498 10
 200 00e6 3A6D     		ldr	r2, [r7, #80]
 201 00e8 12BA     		rev	r2, r2
 202              	.LBE27:
 203              	.LBE26:
 204              		.loc 1 142 31
 205 00ea 1A60     		str	r2, [r3]
 143:./Lib/Src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 206              		.loc 1 143 15
 207 00ec FB6D     		ldr	r3, [r7, #92]
 208 00ee 0433     		adds	r3, r3, #4
 209 00f0 FB65     		str	r3, [r7, #92]
 144:./Lib/Src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 210              		.loc 1 144 33
 211 00f2 7A6A     		ldr	r2, [r7, #36]
 212              		.loc 1 144 6
ARM GAS  /tmp/cc54eC6t.s 			page 16


 213 00f4 FB6D     		ldr	r3, [r7, #92]
 214 00f6 7A65     		str	r2, [r7, #84]
 215              	.LBB28:
 216              	.LBB29:
 217              		.loc 2 498 10
 218 00f8 7A6D     		ldr	r2, [r7, #84]
 219 00fa 12BA     		rev	r2, r2
 220              	.LBE29:
 221              	.LBE28:
 222              		.loc 1 144 31
 223 00fc 1A60     		str	r2, [r3]
 145:./Lib/Src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 224              		.loc 1 145 15
 225 00fe FB6D     		ldr	r3, [r7, #92]
 226 0100 0433     		adds	r3, r3, #4
 227 0102 FB65     		str	r3, [r7, #92]
 146:./Lib/Src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 228              		.loc 1 146 33
 229 0104 BA6A     		ldr	r2, [r7, #40]
 230              		.loc 1 146 6
 231 0106 FB6D     		ldr	r3, [r7, #92]
 232 0108 BA65     		str	r2, [r7, #88]
 233              	.LBB30:
 234              	.LBB31:
 235              		.loc 2 498 10
 236 010a BA6D     		ldr	r2, [r7, #88]
 237 010c 12BA     		rev	r2, r2
 238              	.LBE31:
 239              	.LBE30:
 240              		.loc 1 146 31
 241 010e 1A60     		str	r2, [r3]
 242              	.L7:
 147:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 148:./Lib/Src/stm32f4xx_hash_sha1.c ****   return status;
 243              		.loc 1 148 10
 244 0110 97F86B30 		ldrb	r3, [r7, #107]	@ zero_extendqisi2
 149:./Lib/Src/stm32f4xx_hash_sha1.c **** }
 245              		.loc 1 149 1
 246 0114 1846     		mov	r0, r3
 247 0116 7037     		adds	r7, r7, #112
 248              		.cfi_def_cfa_offset 8
 249 0118 BD46     		mov	sp, r7
 250              		.cfi_def_cfa_register 13
 251              		@ sp needed
 252 011a 80BD     		pop	{r7, pc}
 253              		.cfi_endproc
 254              	.LFE123:
 256              		.section	.text.HMAC_SHA1,"ax",%progbits
 257              		.align	1
 258              		.global	HMAC_SHA1
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 263              	HMAC_SHA1:
 264              	.LFB124:
 150:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 151:./Lib/Src/stm32f4xx_hash_sha1.c **** /**
ARM GAS  /tmp/cc54eC6t.s 			page 17


 152:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HMAC SHA1 digest.
 153:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Key: pointer to the Key used for HMAC.
 154:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Keylen: length of the Key used for HMAC.  
 155:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
 156:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
 157:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
 158:./Lib/Src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
 159:./Lib/Src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
 160:./Lib/Src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
 161:./Lib/Src/stm32f4xx_hash_sha1.c ****   */
 162:./Lib/Src/stm32f4xx_hash_sha1.c **** ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
 163:./Lib/Src/stm32f4xx_hash_sha1.c ****                       uint32_t Ilen, uint8_t Output[20])
 164:./Lib/Src/stm32f4xx_hash_sha1.c **** {
 265              		.loc 1 164 1
 266              		.cfi_startproc
 267              		@ args = 4, pretend = 0, frame = 120
 268              		@ frame_needed = 1, uses_anonymous_args = 0
 269 0000 80B5     		push	{r7, lr}
 270              		.cfi_def_cfa_offset 8
 271              		.cfi_offset 7, -8
 272              		.cfi_offset 14, -4
 273 0002 9EB0     		sub	sp, sp, #120
 274              		.cfi_def_cfa_offset 128
 275 0004 00AF     		add	r7, sp, #0
 276              		.cfi_def_cfa_register 7
 277 0006 F860     		str	r0, [r7, #12]
 278 0008 B960     		str	r1, [r7, #8]
 279 000a 7A60     		str	r2, [r7, #4]
 280 000c 3B60     		str	r3, [r7]
 165:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
 166:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
 167:./Lib/Src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
 281              		.loc 1 167 17
 282 000e 0023     		movs	r3, #0
 283 0010 7B83     		strh	r3, [r7, #26]	@ movhi
 168:./Lib/Src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitskey = 0;
 284              		.loc 1 168 17
 285 0012 0023     		movs	r3, #0
 286 0014 3B83     		strh	r3, [r7, #24]	@ movhi
 169:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
 287              		.loc 1 169 12
 288 0016 0023     		movs	r3, #0
 289 0018 7B67     		str	r3, [r7, #116]
 170:./Lib/Src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
 290              		.loc 1 170 17
 291 001a 0023     		movs	r3, #0
 292 001c 7B61     		str	r3, [r7, #20]
 171:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
 293              		.loc 1 171 12
 294 001e 0023     		movs	r3, #0
 295 0020 7B66     		str	r3, [r7, #100]
 172:./Lib/Src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 296              		.loc 1 172 15
 297 0022 0123     		movs	r3, #1
 298 0024 87F87330 		strb	r3, [r7, #115]
 173:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 299              		.loc 1 173 12
ARM GAS  /tmp/cc54eC6t.s 			page 18


 300 0028 FB68     		ldr	r3, [r7, #12]
 301 002a FB66     		str	r3, [r7, #108]
 174:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 302              		.loc 1 174 12
 303 002c 7B68     		ldr	r3, [r7, #4]
 304 002e BB66     		str	r3, [r7, #104]
 175:./Lib/Src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
 305              		.loc 1 175 12
 306 0030 D7F88030 		ldr	r3, [r7, #128]
 307 0034 3B66     		str	r3, [r7, #96]
 176:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 177:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 178:./Lib/Src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 308              		.loc 1 178 19
 309 0036 3B68     		ldr	r3, [r7]
 310 0038 9BB2     		uxth	r3, r3
 311 003a 03F00303 		and	r3, r3, #3
 312 003e 9BB2     		uxth	r3, r3
 313 0040 DB00     		lsls	r3, r3, #3
 314 0042 9BB2     		uxth	r3, r3
 315 0044 7B83     		strh	r3, [r7, #26]	@ movhi
 179:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 180:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Key */
 181:./Lib/Src/stm32f4xx_hash_sha1.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 316              		.loc 1 181 18
 317 0046 BB68     		ldr	r3, [r7, #8]
 318 0048 9BB2     		uxth	r3, r3
 319 004a 03F00303 		and	r3, r3, #3
 320 004e 9BB2     		uxth	r3, r3
 321 0050 DB00     		lsls	r3, r3, #3
 322 0052 9BB2     		uxth	r3, r3
 323 0054 3B83     		strh	r3, [r7, #24]	@ movhi
 182:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 183:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 184:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
 324              		.loc 1 184 3
 325 0056 FFF7FEFF 		bl	HASH_DeInit
 185:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 186:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 187:./Lib/Src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 326              		.loc 1 187 46
 327 005a 0023     		movs	r3, #0
 328 005c FB63     		str	r3, [r7, #60]
 188:./Lib/Src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 329              		.loc 1 188 41
 330 005e 4023     		movs	r3, #64
 331 0060 3B64     		str	r3, [r7, #64]
 189:./Lib/Src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 332              		.loc 1 189 41
 333 0062 2023     		movs	r3, #32
 334 0064 7B64     		str	r3, [r7, #68]
 190:./Lib/Src/stm32f4xx_hash_sha1.c ****   if(Keylen > 64)
 335              		.loc 1 190 5
 336 0066 BB68     		ldr	r3, [r7, #8]
 337 0068 402B     		cmp	r3, #64
 338 006a 03D9     		bls	.L15
 191:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
ARM GAS  /tmp/cc54eC6t.s 			page 19


 192:./Lib/Src/stm32f4xx_hash_sha1.c ****     /* HMAC long Key */
 193:./Lib/Src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 339              		.loc 1 193 46
 340 006c 4FF48033 		mov	r3, #65536
 341 0070 BB64     		str	r3, [r7, #72]
 342 0072 01E0     		b	.L16
 343              	.L15:
 194:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 195:./Lib/Src/stm32f4xx_hash_sha1.c ****   else
 196:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 197:./Lib/Src/stm32f4xx_hash_sha1.c ****     /* HMAC short Key */
 198:./Lib/Src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 344              		.loc 1 198 46
 345 0074 0023     		movs	r3, #0
 346 0076 BB64     		str	r3, [r7, #72]
 347              	.L16:
 199:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 200:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
 348              		.loc 1 200 3
 349 0078 07F13C03 		add	r3, r7, #60
 350 007c 1846     		mov	r0, r3
 351 007e FFF7FEFF 		bl	HASH_Init
 201:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 202:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the Key */
 203:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 352              		.loc 1 203 3
 353 0082 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 354 0084 9BB2     		uxth	r3, r3
 355 0086 1846     		mov	r0, r3
 356 0088 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 204:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 205:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Write the Key */
 206:./Lib/Src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 357              		.loc 1 206 8
 358 008c 0023     		movs	r3, #0
 359 008e 7B67     		str	r3, [r7, #116]
 360              		.loc 1 206 3
 361 0090 0AE0     		b	.L17
 362              	.L18:
 207:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 208:./Lib/Src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 363              		.loc 1 208 18 discriminator 3
 364 0092 FB6E     		ldr	r3, [r7, #108]
 365              		.loc 1 208 5 discriminator 3
 366 0094 1B68     		ldr	r3, [r3]
 367 0096 1846     		mov	r0, r3
 368 0098 FFF7FEFF 		bl	HASH_DataIn
 209:./Lib/Src/stm32f4xx_hash_sha1.c ****     keyaddr+=4;
 369              		.loc 1 209 12 discriminator 3
 370 009c FB6E     		ldr	r3, [r7, #108]
 371 009e 0433     		adds	r3, r3, #4
 372 00a0 FB66     		str	r3, [r7, #108]
 206:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 373              		.loc 1 206 23 discriminator 3
 374 00a2 7B6F     		ldr	r3, [r7, #116]
 375 00a4 0433     		adds	r3, r3, #4
 376 00a6 7B67     		str	r3, [r7, #116]
ARM GAS  /tmp/cc54eC6t.s 			page 20


 377              	.L17:
 206:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 378              		.loc 1 206 13 discriminator 1
 379 00a8 7A6F     		ldr	r2, [r7, #116]
 380 00aa BB68     		ldr	r3, [r7, #8]
 381 00ac 9A42     		cmp	r2, r3
 382 00ae F0D3     		bcc	.L18
 210:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 211:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 212:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 213:./Lib/Src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 383              		.loc 1 213 3
 384 00b0 FFF7FEFF 		bl	HASH_StartDigest
 385              	.L20:
 214:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 215:./Lib/Src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 216:./Lib/Src/stm32f4xx_hash_sha1.c ****   do
 217:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 218:./Lib/Src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 386              		.loc 1 218 18 discriminator 2
 387 00b4 0820     		movs	r0, #8
 388 00b6 FFF7FEFF 		bl	HASH_GetFlagStatus
 389 00ba 0346     		mov	r3, r0
 390              		.loc 1 218 16 discriminator 2
 391 00bc 7B66     		str	r3, [r7, #100]
 219:./Lib/Src/stm32f4xx_hash_sha1.c ****     counter++;
 392              		.loc 1 219 12 discriminator 2
 393 00be 7B69     		ldr	r3, [r7, #20]
 394 00c0 0133     		adds	r3, r3, #1
 395 00c2 7B61     		str	r3, [r7, #20]
 220:./Lib/Src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 396              		.loc 1 220 20 discriminator 2
 397 00c4 7B69     		ldr	r3, [r7, #20]
 398              		.loc 1 220 41 discriminator 2
 399 00c6 B3F5803F 		cmp	r3, #65536
 400 00ca 02D0     		beq	.L19
 401              		.loc 1 220 41 is_stmt 0 discriminator 1
 402 00cc 7B6E     		ldr	r3, [r7, #100]
 403 00ce 002B     		cmp	r3, #0
 404 00d0 F0D1     		bne	.L20
 405              	.L19:
 221:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 222:./Lib/Src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 406              		.loc 1 222 6 is_stmt 1
 407 00d2 7B6E     		ldr	r3, [r7, #100]
 408 00d4 002B     		cmp	r3, #0
 409 00d6 03D0     		beq	.L21
 223:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
 224:./Lib/Src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 410              		.loc 1 224 13
 411 00d8 0023     		movs	r3, #0
 412 00da 87F87330 		strb	r3, [r7, #115]
 413 00de 92E0     		b	.L22
 414              	.L21:
 225:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 226:./Lib/Src/stm32f4xx_hash_sha1.c ****   else
 227:./Lib/Src/stm32f4xx_hash_sha1.c ****   {
ARM GAS  /tmp/cc54eC6t.s 			page 21


 228:./Lib/Src/stm32f4xx_hash_sha1.c ****     /* Configure the number of valid bits in last word of the Input data */
 229:./Lib/Src/stm32f4xx_hash_sha1.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 415              		.loc 1 229 5
 416 00e0 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 417 00e2 9BB2     		uxth	r3, r3
 418 00e4 1846     		mov	r0, r3
 419 00e6 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 230:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 231:./Lib/Src/stm32f4xx_hash_sha1.c ****     /* Write the Input block in the IN FIFO */
 232:./Lib/Src/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 420              		.loc 1 232 10
 421 00ea 0023     		movs	r3, #0
 422 00ec 7B67     		str	r3, [r7, #116]
 423              		.loc 1 232 5
 424 00ee 0AE0     		b	.L23
 425              	.L24:
 233:./Lib/Src/stm32f4xx_hash_sha1.c ****     {
 234:./Lib/Src/stm32f4xx_hash_sha1.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 426              		.loc 1 234 20 discriminator 3
 427 00f0 BB6E     		ldr	r3, [r7, #104]
 428              		.loc 1 234 7 discriminator 3
 429 00f2 1B68     		ldr	r3, [r3]
 430 00f4 1846     		mov	r0, r3
 431 00f6 FFF7FEFF 		bl	HASH_DataIn
 235:./Lib/Src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 432              		.loc 1 235 16 discriminator 3
 433 00fa BB6E     		ldr	r3, [r7, #104]
 434 00fc 0433     		adds	r3, r3, #4
 435 00fe BB66     		str	r3, [r7, #104]
 232:./Lib/Src/stm32f4xx_hash_sha1.c ****     {
 436              		.loc 1 232 23 discriminator 3
 437 0100 7B6F     		ldr	r3, [r7, #116]
 438 0102 0433     		adds	r3, r3, #4
 439 0104 7B67     		str	r3, [r7, #116]
 440              	.L23:
 232:./Lib/Src/stm32f4xx_hash_sha1.c ****     {
 441              		.loc 1 232 15 discriminator 1
 442 0106 7A6F     		ldr	r2, [r7, #116]
 443 0108 3B68     		ldr	r3, [r7]
 444 010a 9A42     		cmp	r2, r3
 445 010c F0D3     		bcc	.L24
 236:./Lib/Src/stm32f4xx_hash_sha1.c ****     }
 237:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 238:./Lib/Src/stm32f4xx_hash_sha1.c ****     /* Start the HASH processor */
 239:./Lib/Src/stm32f4xx_hash_sha1.c ****     HASH_StartDigest();
 446              		.loc 1 239 5
 447 010e FFF7FEFF 		bl	HASH_StartDigest
 240:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 241:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 242:./Lib/Src/stm32f4xx_hash_sha1.c ****     /* wait until the Busy flag is RESET */
 243:./Lib/Src/stm32f4xx_hash_sha1.c ****     counter =0;
 448              		.loc 1 243 13
 449 0112 0023     		movs	r3, #0
 450 0114 7B61     		str	r3, [r7, #20]
 451              	.L26:
 244:./Lib/Src/stm32f4xx_hash_sha1.c ****     do
 245:./Lib/Src/stm32f4xx_hash_sha1.c ****     {
ARM GAS  /tmp/cc54eC6t.s 			page 22


 246:./Lib/Src/stm32f4xx_hash_sha1.c ****       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 452              		.loc 1 246 20 discriminator 2
 453 0116 0820     		movs	r0, #8
 454 0118 FFF7FEFF 		bl	HASH_GetFlagStatus
 455 011c 0346     		mov	r3, r0
 456              		.loc 1 246 18 discriminator 2
 457 011e 7B66     		str	r3, [r7, #100]
 247:./Lib/Src/stm32f4xx_hash_sha1.c ****       counter++;
 458              		.loc 1 247 14 discriminator 2
 459 0120 7B69     		ldr	r3, [r7, #20]
 460 0122 0133     		adds	r3, r3, #1
 461 0124 7B61     		str	r3, [r7, #20]
 248:./Lib/Src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 462              		.loc 1 248 22 discriminator 2
 463 0126 7B69     		ldr	r3, [r7, #20]
 464              		.loc 1 248 43 discriminator 2
 465 0128 B3F5803F 		cmp	r3, #65536
 466 012c 02D0     		beq	.L25
 467              		.loc 1 248 43 is_stmt 0 discriminator 1
 468 012e 7B6E     		ldr	r3, [r7, #100]
 469 0130 002B     		cmp	r3, #0
 470 0132 F0D1     		bne	.L26
 471              	.L25:
 249:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 250:./Lib/Src/stm32f4xx_hash_sha1.c ****     if (busystatus != RESET)
 472              		.loc 1 250 8 is_stmt 1
 473 0134 7B6E     		ldr	r3, [r7, #100]
 474 0136 002B     		cmp	r3, #0
 475 0138 03D0     		beq	.L27
 251:./Lib/Src/stm32f4xx_hash_sha1.c ****     {
 252:./Lib/Src/stm32f4xx_hash_sha1.c ****       status = ERROR;
 476              		.loc 1 252 14
 477 013a 0023     		movs	r3, #0
 478 013c 87F87330 		strb	r3, [r7, #115]
 479 0140 61E0     		b	.L22
 480              	.L27:
 253:./Lib/Src/stm32f4xx_hash_sha1.c ****     }
 254:./Lib/Src/stm32f4xx_hash_sha1.c ****     else
 255:./Lib/Src/stm32f4xx_hash_sha1.c ****     {  
 256:./Lib/Src/stm32f4xx_hash_sha1.c ****       /* Configure the number of valid bits in last word of the Key */
 257:./Lib/Src/stm32f4xx_hash_sha1.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 481              		.loc 1 257 7
 482 0142 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 483 0144 9BB2     		uxth	r3, r3
 484 0146 1846     		mov	r0, r3
 485 0148 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 258:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 259:./Lib/Src/stm32f4xx_hash_sha1.c ****       /* Write the Key */
 260:./Lib/Src/stm32f4xx_hash_sha1.c ****       keyaddr = (uint32_t)Key;
 486              		.loc 1 260 15
 487 014c FB68     		ldr	r3, [r7, #12]
 488 014e FB66     		str	r3, [r7, #108]
 261:./Lib/Src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 489              		.loc 1 261 12
 490 0150 0023     		movs	r3, #0
 491 0152 7B67     		str	r3, [r7, #116]
 492              		.loc 1 261 7
ARM GAS  /tmp/cc54eC6t.s 			page 23


 493 0154 0AE0     		b	.L28
 494              	.L29:
 262:./Lib/Src/stm32f4xx_hash_sha1.c ****       {
 263:./Lib/Src/stm32f4xx_hash_sha1.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 495              		.loc 1 263 22 discriminator 3
 496 0156 FB6E     		ldr	r3, [r7, #108]
 497              		.loc 1 263 9 discriminator 3
 498 0158 1B68     		ldr	r3, [r3]
 499 015a 1846     		mov	r0, r3
 500 015c FFF7FEFF 		bl	HASH_DataIn
 264:./Lib/Src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 501              		.loc 1 264 16 discriminator 3
 502 0160 FB6E     		ldr	r3, [r7, #108]
 503 0162 0433     		adds	r3, r3, #4
 504 0164 FB66     		str	r3, [r7, #108]
 261:./Lib/Src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 505              		.loc 1 261 27 discriminator 3
 506 0166 7B6F     		ldr	r3, [r7, #116]
 507 0168 0433     		adds	r3, r3, #4
 508 016a 7B67     		str	r3, [r7, #116]
 509              	.L28:
 261:./Lib/Src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 510              		.loc 1 261 17 discriminator 1
 511 016c 7A6F     		ldr	r2, [r7, #116]
 512 016e BB68     		ldr	r3, [r7, #8]
 513 0170 9A42     		cmp	r2, r3
 514 0172 F0D3     		bcc	.L29
 265:./Lib/Src/stm32f4xx_hash_sha1.c ****       }
 266:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 267:./Lib/Src/stm32f4xx_hash_sha1.c ****       /* Start the HASH processor */
 268:./Lib/Src/stm32f4xx_hash_sha1.c ****       HASH_StartDigest();
 515              		.loc 1 268 7
 516 0174 FFF7FEFF 		bl	HASH_StartDigest
 269:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 270:./Lib/Src/stm32f4xx_hash_sha1.c ****       /* wait until the Busy flag is RESET */
 271:./Lib/Src/stm32f4xx_hash_sha1.c ****       counter =0;
 517              		.loc 1 271 15
 518 0178 0023     		movs	r3, #0
 519 017a 7B61     		str	r3, [r7, #20]
 520              	.L31:
 272:./Lib/Src/stm32f4xx_hash_sha1.c ****       do
 273:./Lib/Src/stm32f4xx_hash_sha1.c ****       {
 274:./Lib/Src/stm32f4xx_hash_sha1.c ****         busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 521              		.loc 1 274 22 discriminator 2
 522 017c 0820     		movs	r0, #8
 523 017e FFF7FEFF 		bl	HASH_GetFlagStatus
 524 0182 0346     		mov	r3, r0
 525              		.loc 1 274 20 discriminator 2
 526 0184 7B66     		str	r3, [r7, #100]
 275:./Lib/Src/stm32f4xx_hash_sha1.c ****         counter++;
 527              		.loc 1 275 16 discriminator 2
 528 0186 7B69     		ldr	r3, [r7, #20]
 529 0188 0133     		adds	r3, r3, #1
 530 018a 7B61     		str	r3, [r7, #20]
 276:./Lib/Src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 531              		.loc 1 276 24 discriminator 2
 532 018c 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc54eC6t.s 			page 24


 533              		.loc 1 276 45 discriminator 2
 534 018e B3F5803F 		cmp	r3, #65536
 535 0192 02D0     		beq	.L30
 536              		.loc 1 276 45 is_stmt 0 discriminator 1
 537 0194 7B6E     		ldr	r3, [r7, #100]
 538 0196 002B     		cmp	r3, #0
 539 0198 F0D1     		bne	.L31
 540              	.L30:
 277:./Lib/Src/stm32f4xx_hash_sha1.c **** 
 278:./Lib/Src/stm32f4xx_hash_sha1.c ****       if (busystatus != RESET)
 541              		.loc 1 278 10 is_stmt 1
 542 019a 7B6E     		ldr	r3, [r7, #100]
 543 019c 002B     		cmp	r3, #0
 544 019e 03D0     		beq	.L32
 279:./Lib/Src/stm32f4xx_hash_sha1.c ****       {
 280:./Lib/Src/stm32f4xx_hash_sha1.c ****         status = ERROR;
 545              		.loc 1 280 16
 546 01a0 0023     		movs	r3, #0
 547 01a2 87F87330 		strb	r3, [r7, #115]
 548 01a6 2EE0     		b	.L22
 549              	.L32:
 281:./Lib/Src/stm32f4xx_hash_sha1.c ****       }
 282:./Lib/Src/stm32f4xx_hash_sha1.c ****       else
 283:./Lib/Src/stm32f4xx_hash_sha1.c ****       {
 284:./Lib/Src/stm32f4xx_hash_sha1.c ****         /* Read the message digest */
 285:./Lib/Src/stm32f4xx_hash_sha1.c ****         HASH_GetDigest(&SHA1_MessageDigest);
 550              		.loc 1 285 9
 551 01a8 07F11C03 		add	r3, r7, #28
 552 01ac 1846     		mov	r0, r3
 553 01ae FFF7FEFF 		bl	HASH_GetDigest
 286:./Lib/Src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 554              		.loc 1 286 37
 555 01b2 FA69     		ldr	r2, [r7, #28]
 556              		.loc 1 286 10
 557 01b4 3B6E     		ldr	r3, [r7, #96]
 558 01b6 FA64     		str	r2, [r7, #76]
 559              	.LBB32:
 560              	.LBB33:
 561              		.loc 2 498 10
 562 01b8 FA6C     		ldr	r2, [r7, #76]
 563 01ba 12BA     		rev	r2, r2
 564              	.LBE33:
 565              	.LBE32:
 566              		.loc 1 286 35
 567 01bc 1A60     		str	r2, [r3]
 287:./Lib/Src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 568              		.loc 1 287 19
 569 01be 3B6E     		ldr	r3, [r7, #96]
 570 01c0 0433     		adds	r3, r3, #4
 571 01c2 3B66     		str	r3, [r7, #96]
 288:./Lib/Src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 572              		.loc 1 288 37
 573 01c4 3A6A     		ldr	r2, [r7, #32]
 574              		.loc 1 288 10
 575 01c6 3B6E     		ldr	r3, [r7, #96]
 576 01c8 3A65     		str	r2, [r7, #80]
 577              	.LBB34:
ARM GAS  /tmp/cc54eC6t.s 			page 25


 578              	.LBB35:
 579              		.loc 2 498 10
 580 01ca 3A6D     		ldr	r2, [r7, #80]
 581 01cc 12BA     		rev	r2, r2
 582              	.LBE35:
 583              	.LBE34:
 584              		.loc 1 288 35
 585 01ce 1A60     		str	r2, [r3]
 289:./Lib/Src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 586              		.loc 1 289 19
 587 01d0 3B6E     		ldr	r3, [r7, #96]
 588 01d2 0433     		adds	r3, r3, #4
 589 01d4 3B66     		str	r3, [r7, #96]
 290:./Lib/Src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 590              		.loc 1 290 37
 591 01d6 7A6A     		ldr	r2, [r7, #36]
 592              		.loc 1 290 10
 593 01d8 3B6E     		ldr	r3, [r7, #96]
 594 01da 7A65     		str	r2, [r7, #84]
 595              	.LBB36:
 596              	.LBB37:
 597              		.loc 2 498 10
 598 01dc 7A6D     		ldr	r2, [r7, #84]
 599 01de 12BA     		rev	r2, r2
 600              	.LBE37:
 601              	.LBE36:
 602              		.loc 1 290 35
 603 01e0 1A60     		str	r2, [r3]
 291:./Lib/Src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 604              		.loc 1 291 19
 605 01e2 3B6E     		ldr	r3, [r7, #96]
 606 01e4 0433     		adds	r3, r3, #4
 607 01e6 3B66     		str	r3, [r7, #96]
 292:./Lib/Src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 608              		.loc 1 292 37
 609 01e8 BA6A     		ldr	r2, [r7, #40]
 610              		.loc 1 292 10
 611 01ea 3B6E     		ldr	r3, [r7, #96]
 612 01ec BA65     		str	r2, [r7, #88]
 613              	.LBB38:
 614              	.LBB39:
 615              		.loc 2 498 10
 616 01ee BA6D     		ldr	r2, [r7, #88]
 617 01f0 12BA     		rev	r2, r2
 618              	.LBE39:
 619              	.LBE38:
 620              		.loc 1 292 35
 621 01f2 1A60     		str	r2, [r3]
 293:./Lib/Src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 622              		.loc 1 293 19
 623 01f4 3B6E     		ldr	r3, [r7, #96]
 624 01f6 0433     		adds	r3, r3, #4
 625 01f8 3B66     		str	r3, [r7, #96]
 294:./Lib/Src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 626              		.loc 1 294 37
 627 01fa FA6A     		ldr	r2, [r7, #44]
 628              		.loc 1 294 10
ARM GAS  /tmp/cc54eC6t.s 			page 26


 629 01fc 3B6E     		ldr	r3, [r7, #96]
 630 01fe FA65     		str	r2, [r7, #92]
 631              	.LBB40:
 632              	.LBB41:
 633              		.loc 2 498 10
 634 0200 FA6D     		ldr	r2, [r7, #92]
 635 0202 12BA     		rev	r2, r2
 636              	.LBE41:
 637              	.LBE40:
 638              		.loc 1 294 35
 639 0204 1A60     		str	r2, [r3]
 640              	.L22:
 295:./Lib/Src/stm32f4xx_hash_sha1.c ****       }
 296:./Lib/Src/stm32f4xx_hash_sha1.c ****     }  
 297:./Lib/Src/stm32f4xx_hash_sha1.c ****   }
 298:./Lib/Src/stm32f4xx_hash_sha1.c ****   return status;  
 641              		.loc 1 298 10
 642 0206 97F87330 		ldrb	r3, [r7, #115]	@ zero_extendqisi2
 299:./Lib/Src/stm32f4xx_hash_sha1.c **** }
 643              		.loc 1 299 1
 644 020a 1846     		mov	r0, r3
 645 020c 7837     		adds	r7, r7, #120
 646              		.cfi_def_cfa_offset 8
 647 020e BD46     		mov	sp, r7
 648              		.cfi_def_cfa_register 13
 649              		@ sp needed
 650 0210 80BD     		pop	{r7, pc}
 651              		.cfi_endproc
 652              	.LFE124:
 654              		.text
 655              	.Letext0:
 656              		.file 3 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 657              		.file 4 "./Start/stm32f4xx.h"
 658              		.file 5 "./Lib/inc/stm32f4xx_hash.h"
ARM GAS  /tmp/cc54eC6t.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash_sha1.c
     /tmp/cc54eC6t.s:21     .text.HASH_SHA1:0000000000000000 $t
     /tmp/cc54eC6t.s:27     .text.HASH_SHA1:0000000000000000 HASH_SHA1
     /tmp/cc54eC6t.s:257    .text.HMAC_SHA1:0000000000000000 $t
     /tmp/cc54eC6t.s:263    .text.HMAC_SHA1:0000000000000000 HMAC_SHA1

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
