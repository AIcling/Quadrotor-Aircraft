ARM GAS  /tmp/ccIbLEgY.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_adc.c"
  20              		.section	.text.ADC_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	ADC_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	ADC_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_adc.c **** /**
   2:./Lib/Src/stm32f4xx_adc.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:./Lib/Src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_adc.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_adc.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:./Lib/Src/stm32f4xx_adc.c ****   *           + Initialization and Configuration (in addition to ADC multi mode 
  10:./Lib/Src/stm32f4xx_adc.c ****   *             selection)
  11:./Lib/Src/stm32f4xx_adc.c ****   *           + Analog Watchdog configuration
  12:./Lib/Src/stm32f4xx_adc.c ****   *           + Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:./Lib/Src/stm32f4xx_adc.c ****   *             management 
  14:./Lib/Src/stm32f4xx_adc.c ****   *           + Regular Channels Configuration
  15:./Lib/Src/stm32f4xx_adc.c ****   *           + Regular Channels DMA Configuration
  16:./Lib/Src/stm32f4xx_adc.c ****   *           + Injected channels Configuration
  17:./Lib/Src/stm32f4xx_adc.c ****   *           + Interrupts and flags management
  18:./Lib/Src/stm32f4xx_adc.c ****   *         
  19:./Lib/Src/stm32f4xx_adc.c ****   @verbatim
  20:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
  21:./Lib/Src/stm32f4xx_adc.c ****                      ##### How to use this driver #####
  22:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
  23:./Lib/Src/stm32f4xx_adc.c ****     [..]
  24:./Lib/Src/stm32f4xx_adc.c ****     (#) Enable the ADC interface clock using 
  25:./Lib/Src/stm32f4xx_adc.c ****         RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  26:./Lib/Src/stm32f4xx_adc.c ****        
  27:./Lib/Src/stm32f4xx_adc.c ****     (#) ADC pins configuration
  28:./Lib/Src/stm32f4xx_adc.c ****          (++) Enable the clock for the ADC GPIOs using the following function:
  29:./Lib/Src/stm32f4xx_adc.c ****              RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  30:./Lib/Src/stm32f4xx_adc.c ****          (++) Configure these ADC pins in analog mode using GPIO_Init();  
ARM GAS  /tmp/ccIbLEgY.s 			page 2


  31:./Lib/Src/stm32f4xx_adc.c ****   
  32:./Lib/Src/stm32f4xx_adc.c ****      (#) Configure the ADC Prescaler, conversion resolution and data 
  33:./Lib/Src/stm32f4xx_adc.c ****          alignment using the ADC_Init() function.
  34:./Lib/Src/stm32f4xx_adc.c ****      (#) Activate the ADC peripheral using ADC_Cmd() function.
  35:./Lib/Src/stm32f4xx_adc.c ****   
  36:./Lib/Src/stm32f4xx_adc.c ****      *** Regular channels group configuration ***
  37:./Lib/Src/stm32f4xx_adc.c ****      ============================================
  38:./Lib/Src/stm32f4xx_adc.c ****      [..]    
  39:./Lib/Src/stm32f4xx_adc.c ****        (+) To configure the ADC regular channels group features, use 
  40:./Lib/Src/stm32f4xx_adc.c ****            ADC_Init() and ADC_RegularChannelConfig() functions.
  41:./Lib/Src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  42:./Lib/Src/stm32f4xx_adc.c ****            function.
  43:./Lib/Src/stm32f4xx_adc.c ****        (+) To configurate and activate the Discontinuous mode, use the 
  44:./Lib/Src/stm32f4xx_adc.c ****            ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:./Lib/Src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetConversionValue()
  46:./Lib/Src/stm32f4xx_adc.c ****            function.
  47:./Lib/Src/stm32f4xx_adc.c ****   
  48:./Lib/Src/stm32f4xx_adc.c ****      *** Multi mode ADCs Regular channels configuration ***
  49:./Lib/Src/stm32f4xx_adc.c ****      ======================================================
  50:./Lib/Src/stm32f4xx_adc.c ****      [..]
  51:./Lib/Src/stm32f4xx_adc.c ****        (+) Refer to "Regular channels group configuration" description to
  52:./Lib/Src/stm32f4xx_adc.c ****            configure the ADC1, ADC2 and ADC3 regular channels.        
  53:./Lib/Src/stm32f4xx_adc.c ****        (+) Select the Multi mode ADC regular channels features (dual or 
  54:./Lib/Src/stm32f4xx_adc.c ****            triple mode) using ADC_CommonInit() function and configure 
  55:./Lib/Src/stm32f4xx_adc.c ****            the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  56:./Lib/Src/stm32f4xx_adc.c ****            functions.        
  57:./Lib/Src/stm32f4xx_adc.c ****        (+) Read the ADCs converted values using the 
  58:./Lib/Src/stm32f4xx_adc.c ****            ADC_GetMultiModeConversionValue() function.
  59:./Lib/Src/stm32f4xx_adc.c ****   
  60:./Lib/Src/stm32f4xx_adc.c ****      *** DMA for Regular channels group features configuration ***
  61:./Lib/Src/stm32f4xx_adc.c ****      ============================================================= 
  62:./Lib/Src/stm32f4xx_adc.c ****      [..]
  63:./Lib/Src/stm32f4xx_adc.c ****        (+) To enable the DMA mode for regular channels group, use the 
  64:./Lib/Src/stm32f4xx_adc.c ****            ADC_DMACmd() function.
  65:./Lib/Src/stm32f4xx_adc.c ****        (+) To enable the generation of DMA requests continuously at the end
  66:./Lib/Src/stm32f4xx_adc.c ****            of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  67:./Lib/Src/stm32f4xx_adc.c ****            function.
  68:./Lib/Src/stm32f4xx_adc.c ****   
  69:./Lib/Src/stm32f4xx_adc.c ****      *** Injected channels group configuration ***
  70:./Lib/Src/stm32f4xx_adc.c ****      =============================================    
  71:./Lib/Src/stm32f4xx_adc.c ****      [..]
  72:./Lib/Src/stm32f4xx_adc.c ****        (+) To configure the ADC Injected channels group features, use 
  73:./Lib/Src/stm32f4xx_adc.c ****            ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  74:./Lib/Src/stm32f4xx_adc.c ****            functions.
  75:./Lib/Src/stm32f4xx_adc.c ****        (+) To activate the continuous mode, use the ADC_continuousModeCmd()
  76:./Lib/Src/stm32f4xx_adc.c ****            function.
  77:./Lib/Src/stm32f4xx_adc.c ****        (+) To activate the Injected Discontinuous mode, use the 
  78:./Lib/Src/stm32f4xx_adc.c ****            ADC_InjectedDiscModeCmd() function.  
  79:./Lib/Src/stm32f4xx_adc.c ****        (+) To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  80:./Lib/Src/stm32f4xx_adc.c ****            function.        
  81:./Lib/Src/stm32f4xx_adc.c ****        (+) To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  82:./Lib/Src/stm32f4xx_adc.c ****            function.
  83:./Lib/Src/stm32f4xx_adc.c ****   
  84:./Lib/Src/stm32f4xx_adc.c ****     @endverbatim
  85:./Lib/Src/stm32f4xx_adc.c ****   ******************************************************************************
  86:./Lib/Src/stm32f4xx_adc.c ****   * @attention
  87:./Lib/Src/stm32f4xx_adc.c ****   *
ARM GAS  /tmp/ccIbLEgY.s 			page 3


  88:./Lib/Src/stm32f4xx_adc.c ****   * Copyright (c) 2016 STMicroelectronics.
  89:./Lib/Src/stm32f4xx_adc.c ****   * All rights reserved.
  90:./Lib/Src/stm32f4xx_adc.c ****   *
  91:./Lib/Src/stm32f4xx_adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  92:./Lib/Src/stm32f4xx_adc.c ****   * in the root directory of this software component.
  93:./Lib/Src/stm32f4xx_adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  94:./Lib/Src/stm32f4xx_adc.c ****   *
  95:./Lib/Src/stm32f4xx_adc.c ****   ******************************************************************************
  96:./Lib/Src/stm32f4xx_adc.c ****   */
  97:./Lib/Src/stm32f4xx_adc.c **** 
  98:./Lib/Src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  99:./Lib/Src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
 100:./Lib/Src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 101:./Lib/Src/stm32f4xx_adc.c **** 
 102:./Lib/Src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 103:./Lib/Src/stm32f4xx_adc.c ****   * @{
 104:./Lib/Src/stm32f4xx_adc.c ****   */
 105:./Lib/Src/stm32f4xx_adc.c **** 
 106:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC 
 107:./Lib/Src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 108:./Lib/Src/stm32f4xx_adc.c ****   * @{
 109:./Lib/Src/stm32f4xx_adc.c ****   */ 
 110:./Lib/Src/stm32f4xx_adc.c **** 
 111:./Lib/Src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 112:./Lib/Src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 113:./Lib/Src/stm32f4xx_adc.c **** 
 114:./Lib/Src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 115:./Lib/Src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 116:./Lib/Src/stm32f4xx_adc.c **** 
 117:./Lib/Src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 118:./Lib/Src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 119:./Lib/Src/stm32f4xx_adc.c **** 
 120:./Lib/Src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 121:./Lib/Src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 122:./Lib/Src/stm32f4xx_adc.c **** 
 123:./Lib/Src/stm32f4xx_adc.c **** /* CR1 register Mask */
 124:./Lib/Src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 125:./Lib/Src/stm32f4xx_adc.c **** 
 126:./Lib/Src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 127:./Lib/Src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 128:./Lib/Src/stm32f4xx_adc.c **** 
 129:./Lib/Src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 130:./Lib/Src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 131:./Lib/Src/stm32f4xx_adc.c **** 
 132:./Lib/Src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 133:./Lib/Src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 134:./Lib/Src/stm32f4xx_adc.c **** 
 135:./Lib/Src/stm32f4xx_adc.c **** /* CR2 register Mask */
 136:./Lib/Src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 137:./Lib/Src/stm32f4xx_adc.c **** 
 138:./Lib/Src/stm32f4xx_adc.c **** /* ADC SQx mask */
 139:./Lib/Src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 140:./Lib/Src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 141:./Lib/Src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 142:./Lib/Src/stm32f4xx_adc.c **** 
 143:./Lib/Src/stm32f4xx_adc.c **** /* ADC L Mask */
 144:./Lib/Src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
ARM GAS  /tmp/ccIbLEgY.s 			page 4


 145:./Lib/Src/stm32f4xx_adc.c **** 
 146:./Lib/Src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 147:./Lib/Src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 148:./Lib/Src/stm32f4xx_adc.c **** 
 149:./Lib/Src/stm32f4xx_adc.c **** /* ADC JL mask */
 150:./Lib/Src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 151:./Lib/Src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 152:./Lib/Src/stm32f4xx_adc.c **** 
 153:./Lib/Src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 154:./Lib/Src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 155:./Lib/Src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 156:./Lib/Src/stm32f4xx_adc.c **** 
 157:./Lib/Src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 158:./Lib/Src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 159:./Lib/Src/stm32f4xx_adc.c **** 
 160:./Lib/Src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 161:./Lib/Src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 162:./Lib/Src/stm32f4xx_adc.c **** 
 163:./Lib/Src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 164:./Lib/Src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 165:./Lib/Src/stm32f4xx_adc.c **** 
 166:./Lib/Src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 167:./Lib/Src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 168:./Lib/Src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 169:./Lib/Src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 170:./Lib/Src/stm32f4xx_adc.c **** 
 171:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 172:./Lib/Src/stm32f4xx_adc.c ****   * @{
 173:./Lib/Src/stm32f4xx_adc.c ****   */ 
 174:./Lib/Src/stm32f4xx_adc.c **** 
 175:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 176:./Lib/Src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 177:./Lib/Src/stm32f4xx_adc.c ****  *
 178:./Lib/Src/stm32f4xx_adc.c **** @verbatim    
 179:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
 180:./Lib/Src/stm32f4xx_adc.c ****               ##### Initialization and Configuration functions #####
 181:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
 182:./Lib/Src/stm32f4xx_adc.c ****     [..]  This section provides functions allowing to:
 183:./Lib/Src/stm32f4xx_adc.c ****       (+) Initialize and configure the ADC Prescaler
 184:./Lib/Src/stm32f4xx_adc.c ****       (+) ADC Conversion Resolution (12bit..6bit)
 185:./Lib/Src/stm32f4xx_adc.c ****       (+) Scan Conversion Mode (multichannel or one channel) for regular group
 186:./Lib/Src/stm32f4xx_adc.c ****       (+) ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 187:./Lib/Src/stm32f4xx_adc.c ****           regular group
 188:./Lib/Src/stm32f4xx_adc.c ****       (+) External trigger Edge and source of regular group, 
 189:./Lib/Src/stm32f4xx_adc.c ****       (+) Converted data alignment (left or right)
 190:./Lib/Src/stm32f4xx_adc.c ****       (+) The number of ADC conversions that will be done using the sequencer for 
 191:./Lib/Src/stm32f4xx_adc.c ****           regular channel group
 192:./Lib/Src/stm32f4xx_adc.c ****       (+) Multi ADC mode selection
 193:./Lib/Src/stm32f4xx_adc.c ****       (+) Direct memory access mode selection for multi ADC mode  
 194:./Lib/Src/stm32f4xx_adc.c ****       (+) Delay between 2 sampling phases (used in dual or triple interleaved modes)
 195:./Lib/Src/stm32f4xx_adc.c ****       (+) Enable or disable the ADC peripheral   
 196:./Lib/Src/stm32f4xx_adc.c **** @endverbatim
 197:./Lib/Src/stm32f4xx_adc.c ****   * @{
 198:./Lib/Src/stm32f4xx_adc.c ****   */
 199:./Lib/Src/stm32f4xx_adc.c **** 
 200:./Lib/Src/stm32f4xx_adc.c **** /**
 201:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
ARM GAS  /tmp/ccIbLEgY.s 			page 5


 202:./Lib/Src/stm32f4xx_adc.c ****   *         values.
 203:./Lib/Src/stm32f4xx_adc.c ****   * @param  None
 204:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 205:./Lib/Src/stm32f4xx_adc.c ****   */
 206:./Lib/Src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:./Lib/Src/stm32f4xx_adc.c **** {
  29              		.loc 1 207 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
 208:./Lib/Src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:./Lib/Src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  39              		.loc 1 209 3
  40 0004 0121     		movs	r1, #1
  41 0006 4FF48070 		mov	r0, #256
  42 000a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:./Lib/Src/stm32f4xx_adc.c ****   
 211:./Lib/Src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:./Lib/Src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  43              		.loc 1 212 3
  44 000e 0021     		movs	r1, #0
  45 0010 4FF48070 		mov	r0, #256
  46 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:./Lib/Src/stm32f4xx_adc.c **** }
  47              		.loc 1 213 1
  48 0018 00BF     		nop
  49 001a 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE123:
  53              		.section	.text.ADC_Init,"ax",%progbits
  54              		.align	1
  55              		.global	ADC_Init
  56              		.syntax unified
  57              		.thumb
  58              		.thumb_func
  60              	ADC_Init:
  61              	.LFB124:
 214:./Lib/Src/stm32f4xx_adc.c **** 
 215:./Lib/Src/stm32f4xx_adc.c **** /**
 216:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:./Lib/Src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:./Lib/Src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:./Lib/Src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:./Lib/Src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:./Lib/Src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:./Lib/Src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:./Lib/Src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 227:./Lib/Src/stm32f4xx_adc.c ****   */
ARM GAS  /tmp/ccIbLEgY.s 			page 6


 228:./Lib/Src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:./Lib/Src/stm32f4xx_adc.c **** {
  62              		.loc 1 229 1
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 16
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66              		@ link register save eliminated.
  67 0000 80B4     		push	{r7}
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 85B0     		sub	sp, sp, #20
  71              		.cfi_def_cfa_offset 24
  72 0004 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
  75 0008 3960     		str	r1, [r7]
 230:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  76              		.loc 1 230 12
  77 000a 0023     		movs	r3, #0
  78 000c FB60     		str	r3, [r7, #12]
 231:./Lib/Src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  79              		.loc 1 231 11
  80 000e 0023     		movs	r3, #0
  81 0010 FB72     		strb	r3, [r7, #11]
 232:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:./Lib/Src/stm32f4xx_adc.c ****   
 242:./Lib/Src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  82              		.loc 1 244 11
  83 0012 7B68     		ldr	r3, [r7, #4]
  84 0014 5B68     		ldr	r3, [r3, #4]
  85 0016 FB60     		str	r3, [r7, #12]
 245:./Lib/Src/stm32f4xx_adc.c ****   
 246:./Lib/Src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  86              		.loc 1 247 11
  87 0018 FB68     		ldr	r3, [r7, #12]
  88 001a 23F04073 		bic	r3, r3, #50331648
  89 001e 23F48073 		bic	r3, r3, #256
  90 0022 FB60     		str	r3, [r7, #12]
 248:./Lib/Src/stm32f4xx_adc.c ****   
 249:./Lib/Src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:./Lib/Src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:./Lib/Src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  91              		.loc 1 252 50
  92 0024 3B68     		ldr	r3, [r7]
  93 0026 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
ARM GAS  /tmp/ccIbLEgY.s 			page 7


  94              		.loc 1 252 69
  95 0028 1A02     		lsls	r2, r3, #8
 253:./Lib/Src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  96              		.loc 1 253 50
  97 002a 3B68     		ldr	r3, [r7]
  98 002c 1B68     		ldr	r3, [r3]
 252:./Lib/Src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  99              		.loc 1 252 14
 100 002e 1343     		orrs	r3, r3, r2
 252:./Lib/Src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 101              		.loc 1 252 11
 102 0030 FA68     		ldr	r2, [r7, #12]
 103 0032 1343     		orrs	r3, r3, r2
 104 0034 FB60     		str	r3, [r7, #12]
 254:./Lib/Src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 105              		.loc 1 255 13
 106 0036 7B68     		ldr	r3, [r7, #4]
 107 0038 FA68     		ldr	r2, [r7, #12]
 108 003a 5A60     		str	r2, [r3, #4]
 256:./Lib/Src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 109              		.loc 1 258 11
 110 003c 7B68     		ldr	r3, [r7, #4]
 111 003e 9B68     		ldr	r3, [r3, #8]
 112 0040 FB60     		str	r3, [r7, #12]
 259:./Lib/Src/stm32f4xx_adc.c ****   
 260:./Lib/Src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 113              		.loc 1 261 11
 114 0042 FA68     		ldr	r2, [r7, #12]
 115 0044 184B     		ldr	r3, .L3
 116 0046 1340     		ands	r3, r3, r2
 117 0048 FB60     		str	r3, [r7, #12]
 262:./Lib/Src/stm32f4xx_adc.c ****   
 263:./Lib/Src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:./Lib/Src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:./Lib/Src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:./Lib/Src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:./Lib/Src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:./Lib/Src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 118              		.loc 1 269 39
 119 004a 3B68     		ldr	r3, [r7]
 120 004c 1A69     		ldr	r2, [r3, #16]
 270:./Lib/Src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 121              		.loc 1 270 39
 122 004e 3B68     		ldr	r3, [r7]
 123 0050 DB68     		ldr	r3, [r3, #12]
 269:./Lib/Src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 124              		.loc 1 269 55
 125 0052 1A43     		orrs	r2, r2, r3
 271:./Lib/Src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 126              		.loc 1 271 39
 127 0054 3B68     		ldr	r3, [r7]
 128 0056 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccIbLEgY.s 			page 8


 270:./Lib/Src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 129              		.loc 1 270 62
 130 0058 1A43     		orrs	r2, r2, r3
 272:./Lib/Src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 131              		.loc 1 272 50
 132 005a 3B68     		ldr	r3, [r7]
 133 005c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 134              		.loc 1 272 75
 135 005e 5B00     		lsls	r3, r3, #1
 269:./Lib/Src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 136              		.loc 1 269 14
 137 0060 1343     		orrs	r3, r3, r2
 269:./Lib/Src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 138              		.loc 1 269 11
 139 0062 FA68     		ldr	r2, [r7, #12]
 140 0064 1343     		orrs	r3, r3, r2
 141 0066 FB60     		str	r3, [r7, #12]
 273:./Lib/Src/stm32f4xx_adc.c ****                         
 274:./Lib/Src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 142              		.loc 1 275 13
 143 0068 7B68     		ldr	r3, [r7, #4]
 144 006a FA68     		ldr	r2, [r7, #12]
 145 006c 9A60     		str	r2, [r3, #8]
 276:./Lib/Src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 146              		.loc 1 278 11
 147 006e 7B68     		ldr	r3, [r7, #4]
 148 0070 DB6A     		ldr	r3, [r3, #44]
 149 0072 FB60     		str	r3, [r7, #12]
 279:./Lib/Src/stm32f4xx_adc.c ****   
 280:./Lib/Src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 150              		.loc 1 281 11
 151 0074 FB68     		ldr	r3, [r7, #12]
 152 0076 23F47003 		bic	r3, r3, #15728640
 153 007a FB60     		str	r3, [r7, #12]
 282:./Lib/Src/stm32f4xx_adc.c ****   
 283:./Lib/Src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:./Lib/Src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:./Lib/Src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 154              		.loc 1 285 38
 155 007c 3B68     		ldr	r3, [r7]
 156 007e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 157              		.loc 1 285 14
 158 0080 013B     		subs	r3, r3, #1
 159 0082 DAB2     		uxtb	r2, r3
 160              		.loc 1 285 11
 161 0084 FB7A     		ldrb	r3, [r7, #11]
 162 0086 1343     		orrs	r3, r3, r2
 163 0088 FB72     		strb	r3, [r7, #11]
 286:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 164              		.loc 1 286 15
 165 008a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 166              		.loc 1 286 33
 167 008c 1B05     		lsls	r3, r3, #20
ARM GAS  /tmp/ccIbLEgY.s 			page 9


 168              		.loc 1 286 11
 169 008e FA68     		ldr	r2, [r7, #12]
 170 0090 1343     		orrs	r3, r3, r2
 171 0092 FB60     		str	r3, [r7, #12]
 287:./Lib/Src/stm32f4xx_adc.c ****   
 288:./Lib/Src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:./Lib/Src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 172              		.loc 1 289 14
 173 0094 7B68     		ldr	r3, [r7, #4]
 174 0096 FA68     		ldr	r2, [r7, #12]
 175 0098 DA62     		str	r2, [r3, #44]
 290:./Lib/Src/stm32f4xx_adc.c **** }
 176              		.loc 1 290 1
 177 009a 00BF     		nop
 178 009c 1437     		adds	r7, r7, #20
 179              		.cfi_def_cfa_offset 4
 180 009e BD46     		mov	sp, r7
 181              		.cfi_def_cfa_register 13
 182              		@ sp needed
 183 00a0 5DF8047B 		ldr	r7, [sp], #4
 184              		.cfi_restore 7
 185              		.cfi_def_cfa_offset 0
 186 00a4 7047     		bx	lr
 187              	.L4:
 188 00a6 00BF     		.align	2
 189              	.L3:
 190 00a8 FDF7FFC0 		.word	-1056966659
 191              		.cfi_endproc
 192              	.LFE124:
 194              		.section	.text.ADC_StructInit,"ax",%progbits
 195              		.align	1
 196              		.global	ADC_StructInit
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 201              	ADC_StructInit:
 202              	.LFB125:
 291:./Lib/Src/stm32f4xx_adc.c **** 
 292:./Lib/Src/stm32f4xx_adc.c **** /**
 293:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:./Lib/Src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:./Lib/Src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:./Lib/Src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:./Lib/Src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:./Lib/Src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:./Lib/Src/stm32f4xx_adc.c ****   *         be initialized.
 301:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 302:./Lib/Src/stm32f4xx_adc.c ****   */
 303:./Lib/Src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:./Lib/Src/stm32f4xx_adc.c **** {
 203              		.loc 1 304 1
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 8
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207              		@ link register save eliminated.
 208 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccIbLEgY.s 			page 10


 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 7, -4
 211 0002 83B0     		sub	sp, sp, #12
 212              		.cfi_def_cfa_offset 16
 213 0004 00AF     		add	r7, sp, #0
 214              		.cfi_def_cfa_register 7
 215 0006 7860     		str	r0, [r7, #4]
 305:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:./Lib/Src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 216              		.loc 1 306 34
 217 0008 7B68     		ldr	r3, [r7, #4]
 218 000a 0022     		movs	r2, #0
 219 000c 1A60     		str	r2, [r3]
 307:./Lib/Src/stm32f4xx_adc.c **** 
 308:./Lib/Src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:./Lib/Src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 220              		.loc 1 309 36
 221 000e 7B68     		ldr	r3, [r7, #4]
 222 0010 0022     		movs	r2, #0
 223 0012 1A71     		strb	r2, [r3, #4]
 310:./Lib/Src/stm32f4xx_adc.c **** 
 311:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:./Lib/Src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 224              		.loc 1 312 42
 225 0014 7B68     		ldr	r3, [r7, #4]
 226 0016 0022     		movs	r2, #0
 227 0018 5A71     		strb	r2, [r3, #5]
 313:./Lib/Src/stm32f4xx_adc.c **** 
 314:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:./Lib/Src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 228              		.loc 1 315 44
 229 001a 7B68     		ldr	r3, [r7, #4]
 230 001c 0022     		movs	r2, #0
 231 001e 9A60     		str	r2, [r3, #8]
 316:./Lib/Src/stm32f4xx_adc.c **** 
 317:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:./Lib/Src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 232              		.loc 1 318 40
 233 0020 7B68     		ldr	r3, [r7, #4]
 234 0022 0022     		movs	r2, #0
 235 0024 DA60     		str	r2, [r3, #12]
 319:./Lib/Src/stm32f4xx_adc.c **** 
 320:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:./Lib/Src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 236              		.loc 1 321 33
 237 0026 7B68     		ldr	r3, [r7, #4]
 238 0028 0022     		movs	r2, #0
 239 002a 1A61     		str	r2, [r3, #16]
 322:./Lib/Src/stm32f4xx_adc.c **** 
 323:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:./Lib/Src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 240              		.loc 1 324 39
 241 002c 7B68     		ldr	r3, [r7, #4]
 242 002e 0122     		movs	r2, #1
 243 0030 1A75     		strb	r2, [r3, #20]
 325:./Lib/Src/stm32f4xx_adc.c **** }
 244              		.loc 1 325 1
ARM GAS  /tmp/ccIbLEgY.s 			page 11


 245 0032 00BF     		nop
 246 0034 0C37     		adds	r7, r7, #12
 247              		.cfi_def_cfa_offset 4
 248 0036 BD46     		mov	sp, r7
 249              		.cfi_def_cfa_register 13
 250              		@ sp needed
 251 0038 5DF8047B 		ldr	r7, [sp], #4
 252              		.cfi_restore 7
 253              		.cfi_def_cfa_offset 0
 254 003c 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE125:
 258              		.section	.text.ADC_CommonInit,"ax",%progbits
 259              		.align	1
 260              		.global	ADC_CommonInit
 261              		.syntax unified
 262              		.thumb
 263              		.thumb_func
 265              	ADC_CommonInit:
 266              	.LFB126:
 326:./Lib/Src/stm32f4xx_adc.c **** 
 327:./Lib/Src/stm32f4xx_adc.c **** /**
 328:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:./Lib/Src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:./Lib/Src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 333:./Lib/Src/stm32f4xx_adc.c ****   */
 334:./Lib/Src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:./Lib/Src/stm32f4xx_adc.c **** {
 267              		.loc 1 335 1
 268              		.cfi_startproc
 269              		@ args = 0, pretend = 0, frame = 16
 270              		@ frame_needed = 1, uses_anonymous_args = 0
 271              		@ link register save eliminated.
 272 0000 80B4     		push	{r7}
 273              		.cfi_def_cfa_offset 4
 274              		.cfi_offset 7, -4
 275 0002 85B0     		sub	sp, sp, #20
 276              		.cfi_def_cfa_offset 24
 277 0004 00AF     		add	r7, sp, #0
 278              		.cfi_def_cfa_register 7
 279 0006 7860     		str	r0, [r7, #4]
 336:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 280              		.loc 1 336 12
 281 0008 0023     		movs	r3, #0
 282 000a FB60     		str	r3, [r7, #12]
 337:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:./Lib/Src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 283              		.loc 1 344 16
 284 000c 0E4B     		ldr	r3, .L7
ARM GAS  /tmp/ccIbLEgY.s 			page 12


 285              		.loc 1 344 11
 286 000e 5B68     		ldr	r3, [r3, #4]
 287 0010 FB60     		str	r3, [r7, #12]
 345:./Lib/Src/stm32f4xx_adc.c ****   
 346:./Lib/Src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 288              		.loc 1 347 11
 289 0012 FA68     		ldr	r2, [r7, #12]
 290 0014 0D4B     		ldr	r3, .L7+4
 291 0016 1340     		ands	r3, r3, r2
 292 0018 FB60     		str	r3, [r7, #12]
 348:./Lib/Src/stm32f4xx_adc.c ****   
 349:./Lib/Src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:./Lib/Src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:./Lib/Src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:./Lib/Src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:./Lib/Src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:./Lib/Src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 293              		.loc 1 355 45
 294 001a 7B68     		ldr	r3, [r7, #4]
 295 001c 1A68     		ldr	r2, [r3]
 356:./Lib/Src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 296              		.loc 1 356 45
 297 001e 7B68     		ldr	r3, [r7, #4]
 298 0020 5B68     		ldr	r3, [r3, #4]
 355:./Lib/Src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 299              		.loc 1 355 56
 300 0022 1A43     		orrs	r2, r2, r3
 357:./Lib/Src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 301              		.loc 1 357 45
 302 0024 7B68     		ldr	r3, [r7, #4]
 303 0026 9B68     		ldr	r3, [r3, #8]
 356:./Lib/Src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 304              		.loc 1 356 61
 305 0028 1A43     		orrs	r2, r2, r3
 358:./Lib/Src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 306              		.loc 1 358 45
 307 002a 7B68     		ldr	r3, [r7, #4]
 308 002c DB68     		ldr	r3, [r3, #12]
 357:./Lib/Src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 309              		.loc 1 357 65
 310 002e 1343     		orrs	r3, r3, r2
 355:./Lib/Src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 311              		.loc 1 355 11
 312 0030 FA68     		ldr	r2, [r7, #12]
 313 0032 1343     		orrs	r3, r3, r2
 314 0034 FB60     		str	r3, [r7, #12]
 359:./Lib/Src/stm32f4xx_adc.c ****                         
 360:./Lib/Src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:./Lib/Src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 315              		.loc 1 361 6
 316 0036 044A     		ldr	r2, .L7
 317              		.loc 1 361 12
 318 0038 FB68     		ldr	r3, [r7, #12]
 319 003a 5360     		str	r3, [r2, #4]
 362:./Lib/Src/stm32f4xx_adc.c **** }
ARM GAS  /tmp/ccIbLEgY.s 			page 13


 320              		.loc 1 362 1
 321 003c 00BF     		nop
 322 003e 1437     		adds	r7, r7, #20
 323              		.cfi_def_cfa_offset 4
 324 0040 BD46     		mov	sp, r7
 325              		.cfi_def_cfa_register 13
 326              		@ sp needed
 327 0042 5DF8047B 		ldr	r7, [sp], #4
 328              		.cfi_restore 7
 329              		.cfi_def_cfa_offset 0
 330 0046 7047     		bx	lr
 331              	.L8:
 332              		.align	2
 333              	.L7:
 334 0048 00230140 		.word	1073816320
 335 004c E030FCFF 		.word	-249632
 336              		.cfi_endproc
 337              	.LFE126:
 339              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 340              		.align	1
 341              		.global	ADC_CommonStructInit
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	ADC_CommonStructInit:
 347              	.LFB127:
 363:./Lib/Src/stm32f4xx_adc.c **** 
 364:./Lib/Src/stm32f4xx_adc.c **** /**
 365:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:./Lib/Src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 369:./Lib/Src/stm32f4xx_adc.c ****   */
 370:./Lib/Src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:./Lib/Src/stm32f4xx_adc.c **** {
 348              		.loc 1 371 1
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 7, -4
 356 0002 83B0     		sub	sp, sp, #12
 357              		.cfi_def_cfa_offset 16
 358 0004 00AF     		add	r7, sp, #0
 359              		.cfi_def_cfa_register 7
 360 0006 7860     		str	r0, [r7, #4]
 372:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:./Lib/Src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 361              		.loc 1 373 34
 362 0008 7B68     		ldr	r3, [r7, #4]
 363 000a 0022     		movs	r2, #0
 364 000c 1A60     		str	r2, [r3]
 374:./Lib/Src/stm32f4xx_adc.c **** 
 375:./Lib/Src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:./Lib/Src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
ARM GAS  /tmp/ccIbLEgY.s 			page 14


 365              		.loc 1 376 39
 366 000e 7B68     		ldr	r3, [r7, #4]
 367 0010 0022     		movs	r2, #0
 368 0012 5A60     		str	r2, [r3, #4]
 377:./Lib/Src/stm32f4xx_adc.c **** 
 378:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:./Lib/Src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 369              		.loc 1 379 43
 370 0014 7B68     		ldr	r3, [r7, #4]
 371 0016 0022     		movs	r2, #0
 372 0018 9A60     		str	r2, [r3, #8]
 380:./Lib/Src/stm32f4xx_adc.c **** 
 381:./Lib/Src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:./Lib/Src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 373              		.loc 1 382 46
 374 001a 7B68     		ldr	r3, [r7, #4]
 375 001c 0022     		movs	r2, #0
 376 001e DA60     		str	r2, [r3, #12]
 383:./Lib/Src/stm32f4xx_adc.c **** }
 377              		.loc 1 383 1
 378 0020 00BF     		nop
 379 0022 0C37     		adds	r7, r7, #12
 380              		.cfi_def_cfa_offset 4
 381 0024 BD46     		mov	sp, r7
 382              		.cfi_def_cfa_register 13
 383              		@ sp needed
 384 0026 5DF8047B 		ldr	r7, [sp], #4
 385              		.cfi_restore 7
 386              		.cfi_def_cfa_offset 0
 387 002a 7047     		bx	lr
 388              		.cfi_endproc
 389              	.LFE127:
 391              		.section	.text.ADC_Cmd,"ax",%progbits
 392              		.align	1
 393              		.global	ADC_Cmd
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 398              	ADC_Cmd:
 399              	.LFB128:
 384:./Lib/Src/stm32f4xx_adc.c **** 
 385:./Lib/Src/stm32f4xx_adc.c **** /**
 386:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 391:./Lib/Src/stm32f4xx_adc.c ****   */
 392:./Lib/Src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:./Lib/Src/stm32f4xx_adc.c **** {
 400              		.loc 1 393 1
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 8
 403              		@ frame_needed = 1, uses_anonymous_args = 0
 404              		@ link register save eliminated.
 405 0000 80B4     		push	{r7}
 406              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccIbLEgY.s 			page 15


 407              		.cfi_offset 7, -4
 408 0002 83B0     		sub	sp, sp, #12
 409              		.cfi_def_cfa_offset 16
 410 0004 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 412 0006 7860     		str	r0, [r7, #4]
 413 0008 0B46     		mov	r3, r1
 414 000a FB70     		strb	r3, [r7, #3]
 394:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 415              		.loc 1 397 6
 416 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 417 000e 002B     		cmp	r3, #0
 418 0010 06D0     		beq	.L11
 398:./Lib/Src/stm32f4xx_adc.c ****   {
 399:./Lib/Src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 419              		.loc 1 400 9
 420 0012 7B68     		ldr	r3, [r7, #4]
 421 0014 9B68     		ldr	r3, [r3, #8]
 422              		.loc 1 400 15
 423 0016 43F00102 		orr	r2, r3, #1
 424 001a 7B68     		ldr	r3, [r7, #4]
 425 001c 9A60     		str	r2, [r3, #8]
 401:./Lib/Src/stm32f4xx_adc.c ****   }
 402:./Lib/Src/stm32f4xx_adc.c ****   else
 403:./Lib/Src/stm32f4xx_adc.c ****   {
 404:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 406:./Lib/Src/stm32f4xx_adc.c ****   }
 407:./Lib/Src/stm32f4xx_adc.c **** }
 426              		.loc 1 407 1
 427 001e 05E0     		b	.L13
 428              	.L11:
 405:./Lib/Src/stm32f4xx_adc.c ****   }
 429              		.loc 1 405 9
 430 0020 7B68     		ldr	r3, [r7, #4]
 431 0022 9B68     		ldr	r3, [r3, #8]
 405:./Lib/Src/stm32f4xx_adc.c ****   }
 432              		.loc 1 405 15
 433 0024 23F00102 		bic	r2, r3, #1
 434 0028 7B68     		ldr	r3, [r7, #4]
 435 002a 9A60     		str	r2, [r3, #8]
 436              	.L13:
 437              		.loc 1 407 1
 438 002c 00BF     		nop
 439 002e 0C37     		adds	r7, r7, #12
 440              		.cfi_def_cfa_offset 4
 441 0030 BD46     		mov	sp, r7
 442              		.cfi_def_cfa_register 13
 443              		@ sp needed
 444 0032 5DF8047B 		ldr	r7, [sp], #4
 445              		.cfi_restore 7
 446              		.cfi_def_cfa_offset 0
 447 0036 7047     		bx	lr
ARM GAS  /tmp/ccIbLEgY.s 			page 16


 448              		.cfi_endproc
 449              	.LFE128:
 451              		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 452              		.align	1
 453              		.global	ADC_AnalogWatchdogCmd
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 458              	ADC_AnalogWatchdogCmd:
 459              	.LFB129:
 408:./Lib/Src/stm32f4xx_adc.c **** /**
 409:./Lib/Src/stm32f4xx_adc.c ****   * @}
 410:./Lib/Src/stm32f4xx_adc.c ****   */
 411:./Lib/Src/stm32f4xx_adc.c **** 
 412:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:./Lib/Src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:./Lib/Src/stm32f4xx_adc.c ****  *
 415:./Lib/Src/stm32f4xx_adc.c **** @verbatim   
 416:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
 417:./Lib/Src/stm32f4xx_adc.c ****              ##### Analog Watchdog configuration functions #####
 418:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================  
 419:./Lib/Src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the Analog Watchdog
 420:./Lib/Src/stm32f4xx_adc.c ****          (AWD) feature in the ADC.
 421:./Lib/Src/stm32f4xx_adc.c ****   
 422:./Lib/Src/stm32f4xx_adc.c ****     [..] A typical configuration Analog Watchdog is done following these steps :
 423:./Lib/Src/stm32f4xx_adc.c ****       (#) the ADC guarded channel(s) is (are) selected using the 
 424:./Lib/Src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogSingleChannelConfig() function.
 425:./Lib/Src/stm32f4xx_adc.c ****       (#) The Analog watchdog lower and higher threshold are configured using the  
 426:./Lib/Src/stm32f4xx_adc.c ****           ADC_AnalogWatchdogThresholdsConfig() function.
 427:./Lib/Src/stm32f4xx_adc.c ****       (#) The Analog watchdog is enabled and configured to enable the check, on one
 428:./Lib/Src/stm32f4xx_adc.c ****           or more channels, using the  ADC_AnalogWatchdogCmd() function.
 429:./Lib/Src/stm32f4xx_adc.c **** @endverbatim
 430:./Lib/Src/stm32f4xx_adc.c ****   * @{
 431:./Lib/Src/stm32f4xx_adc.c ****   */
 432:./Lib/Src/stm32f4xx_adc.c ****   
 433:./Lib/Src/stm32f4xx_adc.c **** /**
 434:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 435:./Lib/Src/stm32f4xx_adc.c ****   *         injected channels
 436:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 437:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 438:./Lib/Src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 439:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 440:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 441:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 442:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 443:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 444:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 445:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 446:./Lib/Src/stm32f4xx_adc.c ****   * @retval None	  
 447:./Lib/Src/stm32f4xx_adc.c ****   */
 448:./Lib/Src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 449:./Lib/Src/stm32f4xx_adc.c **** {
 460              		.loc 1 449 1
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 16
 463              		@ frame_needed = 1, uses_anonymous_args = 0
 464              		@ link register save eliminated.
ARM GAS  /tmp/ccIbLEgY.s 			page 17


 465 0000 80B4     		push	{r7}
 466              		.cfi_def_cfa_offset 4
 467              		.cfi_offset 7, -4
 468 0002 85B0     		sub	sp, sp, #20
 469              		.cfi_def_cfa_offset 24
 470 0004 00AF     		add	r7, sp, #0
 471              		.cfi_def_cfa_register 7
 472 0006 7860     		str	r0, [r7, #4]
 473 0008 3960     		str	r1, [r7]
 450:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 474              		.loc 1 450 12
 475 000a 0023     		movs	r3, #0
 476 000c FB60     		str	r3, [r7, #12]
 451:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 452:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 453:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 454:./Lib/Src/stm32f4xx_adc.c ****   
 455:./Lib/Src/stm32f4xx_adc.c ****   /* Get the old register value */
 456:./Lib/Src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 477              		.loc 1 456 10
 478 000e 7B68     		ldr	r3, [r7, #4]
 479 0010 5B68     		ldr	r3, [r3, #4]
 480 0012 FB60     		str	r3, [r7, #12]
 457:./Lib/Src/stm32f4xx_adc.c ****   
 458:./Lib/Src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 459:./Lib/Src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 481              		.loc 1 459 10
 482 0014 FB68     		ldr	r3, [r7, #12]
 483 0016 23F44003 		bic	r3, r3, #12582912
 484 001a 23F40073 		bic	r3, r3, #512
 485 001e FB60     		str	r3, [r7, #12]
 460:./Lib/Src/stm32f4xx_adc.c ****   
 461:./Lib/Src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 462:./Lib/Src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 486              		.loc 1 462 10
 487 0020 FA68     		ldr	r2, [r7, #12]
 488 0022 3B68     		ldr	r3, [r7]
 489 0024 1343     		orrs	r3, r3, r2
 490 0026 FB60     		str	r3, [r7, #12]
 463:./Lib/Src/stm32f4xx_adc.c ****   
 464:./Lib/Src/stm32f4xx_adc.c ****   /* Store the new register value */
 465:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 491              		.loc 1 465 13
 492 0028 7B68     		ldr	r3, [r7, #4]
 493 002a FA68     		ldr	r2, [r7, #12]
 494 002c 5A60     		str	r2, [r3, #4]
 466:./Lib/Src/stm32f4xx_adc.c **** }
 495              		.loc 1 466 1
 496 002e 00BF     		nop
 497 0030 1437     		adds	r7, r7, #20
 498              		.cfi_def_cfa_offset 4
 499 0032 BD46     		mov	sp, r7
 500              		.cfi_def_cfa_register 13
 501              		@ sp needed
 502 0034 5DF8047B 		ldr	r7, [sp], #4
 503              		.cfi_restore 7
 504              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccIbLEgY.s 			page 18


 505 0038 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE129:
 509              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 510              		.align	1
 511              		.global	ADC_AnalogWatchdogThresholdsConfig
 512              		.syntax unified
 513              		.thumb
 514              		.thumb_func
 516              	ADC_AnalogWatchdogThresholdsConfig:
 517              	.LFB130:
 467:./Lib/Src/stm32f4xx_adc.c **** 
 468:./Lib/Src/stm32f4xx_adc.c **** /**
 469:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 470:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 471:./Lib/Src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 472:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 473:./Lib/Src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 474:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 476:./Lib/Src/stm32f4xx_adc.c ****   */
 477:./Lib/Src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 478:./Lib/Src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 479:./Lib/Src/stm32f4xx_adc.c **** {
 518              		.loc 1 479 1
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 8
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523 0000 80B4     		push	{r7}
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 7, -4
 526 0002 83B0     		sub	sp, sp, #12
 527              		.cfi_def_cfa_offset 16
 528 0004 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 530 0006 7860     		str	r0, [r7, #4]
 531 0008 0B46     		mov	r3, r1
 532 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 533 000c 1346     		mov	r3, r2	@ movhi
 534 000e 3B80     		strh	r3, [r7]	@ movhi
 480:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 481:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 482:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 483:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 484:./Lib/Src/stm32f4xx_adc.c ****   
 485:./Lib/Src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 486:./Lib/Src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 535              		.loc 1 486 13
 536 0010 7A88     		ldrh	r2, [r7, #2]
 537 0012 7B68     		ldr	r3, [r7, #4]
 538 0014 5A62     		str	r2, [r3, #36]
 487:./Lib/Src/stm32f4xx_adc.c ****   
 488:./Lib/Src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 489:./Lib/Src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 539              		.loc 1 489 13
 540 0016 3A88     		ldrh	r2, [r7]
ARM GAS  /tmp/ccIbLEgY.s 			page 19


 541 0018 7B68     		ldr	r3, [r7, #4]
 542 001a 9A62     		str	r2, [r3, #40]
 490:./Lib/Src/stm32f4xx_adc.c **** }
 543              		.loc 1 490 1
 544 001c 00BF     		nop
 545 001e 0C37     		adds	r7, r7, #12
 546              		.cfi_def_cfa_offset 4
 547 0020 BD46     		mov	sp, r7
 548              		.cfi_def_cfa_register 13
 549              		@ sp needed
 550 0022 5DF8047B 		ldr	r7, [sp], #4
 551              		.cfi_restore 7
 552              		.cfi_def_cfa_offset 0
 553 0026 7047     		bx	lr
 554              		.cfi_endproc
 555              	.LFE130:
 557              		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 558              		.align	1
 559              		.global	ADC_AnalogWatchdogSingleChannelConfig
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 564              	ADC_AnalogWatchdogSingleChannelConfig:
 565              	.LFB131:
 491:./Lib/Src/stm32f4xx_adc.c **** 
 492:./Lib/Src/stm32f4xx_adc.c **** /**
 493:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 494:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 495:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 496:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 497:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 498:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 499:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 500:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 501:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 502:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 503:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 504:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 505:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 506:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 507:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 508:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 509:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 510:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 511:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 512:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 513:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 514:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 515:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 516:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 517:./Lib/Src/stm32f4xx_adc.c ****   */
 518:./Lib/Src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 519:./Lib/Src/stm32f4xx_adc.c **** {
 566              		.loc 1 519 1
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 16
 569              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccIbLEgY.s 			page 20


 570              		@ link register save eliminated.
 571 0000 80B4     		push	{r7}
 572              		.cfi_def_cfa_offset 4
 573              		.cfi_offset 7, -4
 574 0002 85B0     		sub	sp, sp, #20
 575              		.cfi_def_cfa_offset 24
 576 0004 00AF     		add	r7, sp, #0
 577              		.cfi_def_cfa_register 7
 578 0006 7860     		str	r0, [r7, #4]
 579 0008 0B46     		mov	r3, r1
 580 000a FB70     		strb	r3, [r7, #3]
 520:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 581              		.loc 1 520 12
 582 000c 0023     		movs	r3, #0
 583 000e FB60     		str	r3, [r7, #12]
 521:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 522:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 523:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 524:./Lib/Src/stm32f4xx_adc.c ****   
 525:./Lib/Src/stm32f4xx_adc.c ****   /* Get the old register value */
 526:./Lib/Src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 584              		.loc 1 526 10
 585 0010 7B68     		ldr	r3, [r7, #4]
 586 0012 5B68     		ldr	r3, [r3, #4]
 587 0014 FB60     		str	r3, [r7, #12]
 527:./Lib/Src/stm32f4xx_adc.c ****   
 528:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 529:./Lib/Src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 588              		.loc 1 529 10
 589 0016 FB68     		ldr	r3, [r7, #12]
 590 0018 23F01F03 		bic	r3, r3, #31
 591 001c FB60     		str	r3, [r7, #12]
 530:./Lib/Src/stm32f4xx_adc.c ****   
 531:./Lib/Src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 532:./Lib/Src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 592              		.loc 1 532 10
 593 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 594 0020 FA68     		ldr	r2, [r7, #12]
 595 0022 1343     		orrs	r3, r3, r2
 596 0024 FB60     		str	r3, [r7, #12]
 533:./Lib/Src/stm32f4xx_adc.c ****   
 534:./Lib/Src/stm32f4xx_adc.c ****   /* Store the new register value */
 535:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 597              		.loc 1 535 13
 598 0026 7B68     		ldr	r3, [r7, #4]
 599 0028 FA68     		ldr	r2, [r7, #12]
 600 002a 5A60     		str	r2, [r3, #4]
 536:./Lib/Src/stm32f4xx_adc.c **** }
 601              		.loc 1 536 1
 602 002c 00BF     		nop
 603 002e 1437     		adds	r7, r7, #20
 604              		.cfi_def_cfa_offset 4
 605 0030 BD46     		mov	sp, r7
 606              		.cfi_def_cfa_register 13
 607              		@ sp needed
 608 0032 5DF8047B 		ldr	r7, [sp], #4
 609              		.cfi_restore 7
ARM GAS  /tmp/ccIbLEgY.s 			page 21


 610              		.cfi_def_cfa_offset 0
 611 0036 7047     		bx	lr
 612              		.cfi_endproc
 613              	.LFE131:
 615              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 616              		.align	1
 617              		.global	ADC_TempSensorVrefintCmd
 618              		.syntax unified
 619              		.thumb
 620              		.thumb_func
 622              	ADC_TempSensorVrefintCmd:
 623              	.LFB132:
 537:./Lib/Src/stm32f4xx_adc.c **** /**
 538:./Lib/Src/stm32f4xx_adc.c ****   * @}
 539:./Lib/Src/stm32f4xx_adc.c ****   */
 540:./Lib/Src/stm32f4xx_adc.c **** 
 541:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 542:./Lib/Src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 543:./Lib/Src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 544:./Lib/Src/stm32f4xx_adc.c ****  *
 545:./Lib/Src/stm32f4xx_adc.c **** @verbatim   
 546:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
 547:./Lib/Src/stm32f4xx_adc.c ****       ##### Temperature Sensor, Vrefint and VBAT management functions #####
 548:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================  
 549:./Lib/Src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to enable/ disable the internal 
 550:./Lib/Src/stm32f4xx_adc.c ****          connections between the ADC and the Temperature Sensor, the Vrefint and 
 551:./Lib/Src/stm32f4xx_adc.c ****          the Vbat sources.
 552:./Lib/Src/stm32f4xx_adc.c ****      
 553:./Lib/Src/stm32f4xx_adc.c ****     [..] A typical configuration to get the Temperature sensor and Vrefint channels 
 554:./Lib/Src/stm32f4xx_adc.c ****          voltages is done following these steps :
 555:./Lib/Src/stm32f4xx_adc.c ****       (#) Enable the internal connection of Temperature sensor and Vrefint sources 
 556:./Lib/Src/stm32f4xx_adc.c ****           with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 557:./Lib/Src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 558:./Lib/Src/stm32f4xx_adc.c ****           ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 559:./Lib/Src/stm32f4xx_adc.c ****       (#) Get the voltage values, using ADC_GetConversionValue() or  
 560:./Lib/Src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 561:./Lib/Src/stm32f4xx_adc.c **** 
 562:./Lib/Src/stm32f4xx_adc.c ****     [..] A typical configuration to get the VBAT channel voltage is done following 
 563:./Lib/Src/stm32f4xx_adc.c ****          these steps :
 564:./Lib/Src/stm32f4xx_adc.c ****       (#) Enable the internal connection of VBAT source with the ADC channel using 
 565:./Lib/Src/stm32f4xx_adc.c ****           ADC_VBATCmd() function. 
 566:./Lib/Src/stm32f4xx_adc.c ****       (#) Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 567:./Lib/Src/stm32f4xx_adc.c ****           ADC_InjectedChannelConfig() functions 
 568:./Lib/Src/stm32f4xx_adc.c ****       (#) Get the voltage value, using ADC_GetConversionValue() or  
 569:./Lib/Src/stm32f4xx_adc.c ****           ADC_GetInjectedConversionValue().
 570:./Lib/Src/stm32f4xx_adc.c ****  
 571:./Lib/Src/stm32f4xx_adc.c **** @endverbatim
 572:./Lib/Src/stm32f4xx_adc.c ****   * @{
 573:./Lib/Src/stm32f4xx_adc.c ****   */
 574:./Lib/Src/stm32f4xx_adc.c ****   
 575:./Lib/Src/stm32f4xx_adc.c ****   
 576:./Lib/Src/stm32f4xx_adc.c **** /**
 577:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 578:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 579:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 580:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 581:./Lib/Src/stm32f4xx_adc.c ****   */
ARM GAS  /tmp/ccIbLEgY.s 			page 22


 582:./Lib/Src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 583:./Lib/Src/stm32f4xx_adc.c **** {
 624              		.loc 1 583 1
 625              		.cfi_startproc
 626              		@ args = 0, pretend = 0, frame = 8
 627              		@ frame_needed = 1, uses_anonymous_args = 0
 628              		@ link register save eliminated.
 629 0000 80B4     		push	{r7}
 630              		.cfi_def_cfa_offset 4
 631              		.cfi_offset 7, -4
 632 0002 83B0     		sub	sp, sp, #12
 633              		.cfi_def_cfa_offset 16
 634 0004 00AF     		add	r7, sp, #0
 635              		.cfi_def_cfa_register 7
 636 0006 0346     		mov	r3, r0
 637 0008 FB71     		strb	r3, [r7, #7]
 584:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 585:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 586:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 638              		.loc 1 586 6
 639 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 640 000c 002B     		cmp	r3, #0
 641 000e 06D0     		beq	.L18
 587:./Lib/Src/stm32f4xx_adc.c ****   {
 588:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 589:./Lib/Src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 642              		.loc 1 589 8
 643 0010 094B     		ldr	r3, .L21
 644 0012 5B68     		ldr	r3, [r3, #4]
 645 0014 084A     		ldr	r2, .L21
 646              		.loc 1 589 14
 647 0016 43F40003 		orr	r3, r3, #8388608
 648 001a 5360     		str	r3, [r2, #4]
 590:./Lib/Src/stm32f4xx_adc.c ****   }
 591:./Lib/Src/stm32f4xx_adc.c ****   else
 592:./Lib/Src/stm32f4xx_adc.c ****   {
 593:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 594:./Lib/Src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 595:./Lib/Src/stm32f4xx_adc.c ****   }
 596:./Lib/Src/stm32f4xx_adc.c **** }
 649              		.loc 1 596 1
 650 001c 05E0     		b	.L20
 651              	.L18:
 594:./Lib/Src/stm32f4xx_adc.c ****   }
 652              		.loc 1 594 8
 653 001e 064B     		ldr	r3, .L21
 654 0020 5B68     		ldr	r3, [r3, #4]
 655 0022 054A     		ldr	r2, .L21
 594:./Lib/Src/stm32f4xx_adc.c ****   }
 656              		.loc 1 594 14
 657 0024 23F40003 		bic	r3, r3, #8388608
 658 0028 5360     		str	r3, [r2, #4]
 659              	.L20:
 660              		.loc 1 596 1
 661 002a 00BF     		nop
 662 002c 0C37     		adds	r7, r7, #12
 663              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccIbLEgY.s 			page 23


 664 002e BD46     		mov	sp, r7
 665              		.cfi_def_cfa_register 13
 666              		@ sp needed
 667 0030 5DF8047B 		ldr	r7, [sp], #4
 668              		.cfi_restore 7
 669              		.cfi_def_cfa_offset 0
 670 0034 7047     		bx	lr
 671              	.L22:
 672 0036 00BF     		.align	2
 673              	.L21:
 674 0038 00230140 		.word	1073816320
 675              		.cfi_endproc
 676              	.LFE132:
 678              		.section	.text.ADC_VBATCmd,"ax",%progbits
 679              		.align	1
 680              		.global	ADC_VBATCmd
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 685              	ADC_VBATCmd:
 686              	.LFB133:
 597:./Lib/Src/stm32f4xx_adc.c **** 
 598:./Lib/Src/stm32f4xx_adc.c **** /**
 599:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 600:./Lib/Src/stm32f4xx_adc.c ****   * 
 601:./Lib/Src/stm32f4xx_adc.c ****   * @note   the Battery voltage measured is equal to VBAT/2 on STM32F40xx and 
 602:./Lib/Src/stm32f4xx_adc.c ****   *         STM32F41xx devices and equal to VBAT/4 on STM32F42xx and STM32F43xx devices 
 603:./Lib/Src/stm32f4xx_adc.c ****   *              
 604:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 605:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 606:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 607:./Lib/Src/stm32f4xx_adc.c ****   */
 608:./Lib/Src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 609:./Lib/Src/stm32f4xx_adc.c **** {
 687              		.loc 1 609 1
 688              		.cfi_startproc
 689              		@ args = 0, pretend = 0, frame = 8
 690              		@ frame_needed = 1, uses_anonymous_args = 0
 691              		@ link register save eliminated.
 692 0000 80B4     		push	{r7}
 693              		.cfi_def_cfa_offset 4
 694              		.cfi_offset 7, -4
 695 0002 83B0     		sub	sp, sp, #12
 696              		.cfi_def_cfa_offset 16
 697 0004 00AF     		add	r7, sp, #0
 698              		.cfi_def_cfa_register 7
 699 0006 0346     		mov	r3, r0
 700 0008 FB71     		strb	r3, [r7, #7]
 610:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 611:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 612:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 701              		.loc 1 612 6
 702 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 703 000c 002B     		cmp	r3, #0
 704 000e 06D0     		beq	.L24
 613:./Lib/Src/stm32f4xx_adc.c ****   {
 614:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
ARM GAS  /tmp/ccIbLEgY.s 			page 24


 615:./Lib/Src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 705              		.loc 1 615 8
 706 0010 094B     		ldr	r3, .L27
 707 0012 5B68     		ldr	r3, [r3, #4]
 708 0014 084A     		ldr	r2, .L27
 709              		.loc 1 615 14
 710 0016 43F48003 		orr	r3, r3, #4194304
 711 001a 5360     		str	r3, [r2, #4]
 616:./Lib/Src/stm32f4xx_adc.c ****   }
 617:./Lib/Src/stm32f4xx_adc.c ****   else
 618:./Lib/Src/stm32f4xx_adc.c ****   {
 619:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 620:./Lib/Src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 621:./Lib/Src/stm32f4xx_adc.c ****   }
 622:./Lib/Src/stm32f4xx_adc.c **** }
 712              		.loc 1 622 1
 713 001c 05E0     		b	.L26
 714              	.L24:
 620:./Lib/Src/stm32f4xx_adc.c ****   }
 715              		.loc 1 620 8
 716 001e 064B     		ldr	r3, .L27
 717 0020 5B68     		ldr	r3, [r3, #4]
 718 0022 054A     		ldr	r2, .L27
 620:./Lib/Src/stm32f4xx_adc.c ****   }
 719              		.loc 1 620 14
 720 0024 23F48003 		bic	r3, r3, #4194304
 721 0028 5360     		str	r3, [r2, #4]
 722              	.L26:
 723              		.loc 1 622 1
 724 002a 00BF     		nop
 725 002c 0C37     		adds	r7, r7, #12
 726              		.cfi_def_cfa_offset 4
 727 002e BD46     		mov	sp, r7
 728              		.cfi_def_cfa_register 13
 729              		@ sp needed
 730 0030 5DF8047B 		ldr	r7, [sp], #4
 731              		.cfi_restore 7
 732              		.cfi_def_cfa_offset 0
 733 0034 7047     		bx	lr
 734              	.L28:
 735 0036 00BF     		.align	2
 736              	.L27:
 737 0038 00230140 		.word	1073816320
 738              		.cfi_endproc
 739              	.LFE133:
 741              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 742              		.align	1
 743              		.global	ADC_RegularChannelConfig
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 748              	ADC_RegularChannelConfig:
 749              	.LFB134:
 623:./Lib/Src/stm32f4xx_adc.c **** 
 624:./Lib/Src/stm32f4xx_adc.c **** /**
 625:./Lib/Src/stm32f4xx_adc.c ****   * @}
 626:./Lib/Src/stm32f4xx_adc.c ****   */
ARM GAS  /tmp/ccIbLEgY.s 			page 25


 627:./Lib/Src/stm32f4xx_adc.c **** 
 628:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 629:./Lib/Src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 630:./Lib/Src/stm32f4xx_adc.c ****  *
 631:./Lib/Src/stm32f4xx_adc.c **** @verbatim   
 632:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
 633:./Lib/Src/stm32f4xx_adc.c ****              ##### Regular Channels Configuration functions #####
 634:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================  
 635:./Lib/Src/stm32f4xx_adc.c **** 
 636:./Lib/Src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to manage the ADC's regular channels,
 637:./Lib/Src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
 638:./Lib/Src/stm32f4xx_adc.c ****   
 639:./Lib/Src/stm32f4xx_adc.c ****       (#) Configuration and management functions for regular channels: This subsection 
 640:./Lib/Src/stm32f4xx_adc.c ****           provides functions allowing to configure the ADC regular channels :    
 641:./Lib/Src/stm32f4xx_adc.c ****          (++) Configure the rank in the regular group sequencer for each channel
 642:./Lib/Src/stm32f4xx_adc.c ****          (++) Configure the sampling time for each channel
 643:./Lib/Src/stm32f4xx_adc.c ****          (++) select the conversion Trigger for regular channels
 644:./Lib/Src/stm32f4xx_adc.c ****          (++) select the desired EOC event behavior configuration
 645:./Lib/Src/stm32f4xx_adc.c ****          (++) Activate the continuous Mode  (*)
 646:./Lib/Src/stm32f4xx_adc.c ****          (++) Activate the Discontinuous Mode 
 647:./Lib/Src/stm32f4xx_adc.c ****          -@@- Please Note that the following features for regular channels 
 648:./Lib/Src/stm32f4xx_adc.c ****              are configured using the ADC_Init() function : 
 649:./Lib/Src/stm32f4xx_adc.c ****            (+@@) scan mode activation 
 650:./Lib/Src/stm32f4xx_adc.c ****            (+@@) continuous mode activation (**) 
 651:./Lib/Src/stm32f4xx_adc.c ****            (+@@) External trigger source  
 652:./Lib/Src/stm32f4xx_adc.c ****            (+@@) External trigger edge 
 653:./Lib/Src/stm32f4xx_adc.c ****            (+@@) number of conversion in the regular channels group sequencer.
 654:./Lib/Src/stm32f4xx_adc.c ****      
 655:./Lib/Src/stm32f4xx_adc.c ****          -@@- (*) and (**) are performing the same configuration
 656:./Lib/Src/stm32f4xx_adc.c ****      
 657:./Lib/Src/stm32f4xx_adc.c ****       (#) Get the conversion data: This subsection provides an important function in 
 658:./Lib/Src/stm32f4xx_adc.c ****           the ADC peripheral since it returns the converted data of the current 
 659:./Lib/Src/stm32f4xx_adc.c ****           regular channel. When the Conversion value is read, the EOC Flag is 
 660:./Lib/Src/stm32f4xx_adc.c ****           automatically cleared.
 661:./Lib/Src/stm32f4xx_adc.c ****      
 662:./Lib/Src/stm32f4xx_adc.c ****           -@- For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 663:./Lib/Src/stm32f4xx_adc.c ****               results data (in the selected multi mode) can be returned in the same 
 664:./Lib/Src/stm32f4xx_adc.c ****               time using ADC_GetMultiModeConversionValue() function. 
 665:./Lib/Src/stm32f4xx_adc.c ****          
 666:./Lib/Src/stm32f4xx_adc.c **** @endverbatim
 667:./Lib/Src/stm32f4xx_adc.c ****   * @{
 668:./Lib/Src/stm32f4xx_adc.c ****   */
 669:./Lib/Src/stm32f4xx_adc.c **** /**
 670:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:./Lib/Src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
ARM GAS  /tmp/ccIbLEgY.s 			page 26


 684:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:./Lib/Src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 707:./Lib/Src/stm32f4xx_adc.c ****   */
 708:./Lib/Src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:./Lib/Src/stm32f4xx_adc.c **** {
 750              		.loc 1 709 1
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 16
 753              		@ frame_needed = 1, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755 0000 80B4     		push	{r7}
 756              		.cfi_def_cfa_offset 4
 757              		.cfi_offset 7, -4
 758 0002 85B0     		sub	sp, sp, #20
 759              		.cfi_def_cfa_offset 24
 760 0004 00AF     		add	r7, sp, #0
 761              		.cfi_def_cfa_register 7
 762 0006 7860     		str	r0, [r7, #4]
 763 0008 0846     		mov	r0, r1
 764 000a 1146     		mov	r1, r2
 765 000c 1A46     		mov	r2, r3
 766 000e 0346     		mov	r3, r0
 767 0010 FB70     		strb	r3, [r7, #3]
 768 0012 0B46     		mov	r3, r1
 769 0014 BB70     		strb	r3, [r7, #2]
 770 0016 1346     		mov	r3, r2
 771 0018 7B70     		strb	r3, [r7, #1]
 710:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 772              		.loc 1 710 12
 773 001a 0023     		movs	r3, #0
 774 001c FB60     		str	r3, [r7, #12]
 775              		.loc 1 710 25
 776 001e 0023     		movs	r3, #0
 777 0020 BB60     		str	r3, [r7, #8]
 711:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
ARM GAS  /tmp/ccIbLEgY.s 			page 27


 713:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:./Lib/Src/stm32f4xx_adc.c ****   
 717:./Lib/Src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:./Lib/Src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 778              		.loc 1 718 6
 779 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 780 0024 092B     		cmp	r3, #9
 781 0026 23D9     		bls	.L30
 719:./Lib/Src/stm32f4xx_adc.c ****   {
 720:./Lib/Src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 782              		.loc 1 721 13
 783 0028 7B68     		ldr	r3, [r7, #4]
 784 002a DB68     		ldr	r3, [r3, #12]
 785 002c FB60     		str	r3, [r7, #12]
 722:./Lib/Src/stm32f4xx_adc.c ****     
 723:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 786              		.loc 1 724 50
 787 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 788 0030 A3F10A02 		sub	r2, r3, #10
 789              		.loc 1 724 35
 790 0034 1346     		mov	r3, r2
 791 0036 5B00     		lsls	r3, r3, #1
 792 0038 1344     		add	r3, r3, r2
 793              		.loc 1 724 13
 794 003a 0722     		movs	r2, #7
 795 003c 02FA03F3 		lsl	r3, r2, r3
 796 0040 BB60     		str	r3, [r7, #8]
 725:./Lib/Src/stm32f4xx_adc.c ****     
 726:./Lib/Src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 797              		.loc 1 727 16
 798 0042 BB68     		ldr	r3, [r7, #8]
 799 0044 DB43     		mvns	r3, r3
 800              		.loc 1 727 13
 801 0046 FA68     		ldr	r2, [r7, #12]
 802 0048 1340     		ands	r3, r3, r2
 803 004a FB60     		str	r3, [r7, #12]
 728:./Lib/Src/stm32f4xx_adc.c ****     
 729:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 804              		.loc 1 730 15
 805 004c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 806              		.loc 1 730 61
 807 004e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 808 0050 A3F10A02 		sub	r2, r3, #10
 809              		.loc 1 730 46
 810 0054 1346     		mov	r3, r2
 811 0056 5B00     		lsls	r3, r3, #1
 812 0058 1344     		add	r3, r3, r2
 813              		.loc 1 730 13
 814 005a 01FA03F3 		lsl	r3, r1, r3
 815 005e BB60     		str	r3, [r7, #8]
 731:./Lib/Src/stm32f4xx_adc.c ****     
ARM GAS  /tmp/ccIbLEgY.s 			page 28


 732:./Lib/Src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 816              		.loc 1 733 13
 817 0060 FA68     		ldr	r2, [r7, #12]
 818 0062 BB68     		ldr	r3, [r7, #8]
 819 0064 1343     		orrs	r3, r3, r2
 820 0066 FB60     		str	r3, [r7, #12]
 734:./Lib/Src/stm32f4xx_adc.c ****     
 735:./Lib/Src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:./Lib/Src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 821              		.loc 1 736 17
 822 0068 7B68     		ldr	r3, [r7, #4]
 823 006a FA68     		ldr	r2, [r7, #12]
 824 006c DA60     		str	r2, [r3, #12]
 825 006e 1EE0     		b	.L31
 826              	.L30:
 737:./Lib/Src/stm32f4xx_adc.c ****   }
 738:./Lib/Src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:./Lib/Src/stm32f4xx_adc.c ****   {
 740:./Lib/Src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 827              		.loc 1 741 13
 828 0070 7B68     		ldr	r3, [r7, #4]
 829 0072 1B69     		ldr	r3, [r3, #16]
 830 0074 FB60     		str	r3, [r7, #12]
 742:./Lib/Src/stm32f4xx_adc.c ****     
 743:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 831              		.loc 1 744 35
 832 0076 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 833 0078 1346     		mov	r3, r2
 834 007a 5B00     		lsls	r3, r3, #1
 835 007c 1344     		add	r3, r3, r2
 836              		.loc 1 744 13
 837 007e 0722     		movs	r2, #7
 838 0080 02FA03F3 		lsl	r3, r2, r3
 839 0084 BB60     		str	r3, [r7, #8]
 745:./Lib/Src/stm32f4xx_adc.c ****     
 746:./Lib/Src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 840              		.loc 1 747 16
 841 0086 BB68     		ldr	r3, [r7, #8]
 842 0088 DB43     		mvns	r3, r3
 843              		.loc 1 747 13
 844 008a FA68     		ldr	r2, [r7, #12]
 845 008c 1340     		ands	r3, r3, r2
 846 008e FB60     		str	r3, [r7, #12]
 748:./Lib/Src/stm32f4xx_adc.c ****     
 749:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 847              		.loc 1 750 15
 848 0090 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 849              		.loc 1 750 46
 850 0092 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 851 0094 1346     		mov	r3, r2
 852 0096 5B00     		lsls	r3, r3, #1
 853 0098 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccIbLEgY.s 			page 29


 854              		.loc 1 750 13
 855 009a 01FA03F3 		lsl	r3, r1, r3
 856 009e BB60     		str	r3, [r7, #8]
 751:./Lib/Src/stm32f4xx_adc.c ****     
 752:./Lib/Src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 857              		.loc 1 753 13
 858 00a0 FA68     		ldr	r2, [r7, #12]
 859 00a2 BB68     		ldr	r3, [r7, #8]
 860 00a4 1343     		orrs	r3, r3, r2
 861 00a6 FB60     		str	r3, [r7, #12]
 754:./Lib/Src/stm32f4xx_adc.c ****     
 755:./Lib/Src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:./Lib/Src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 862              		.loc 1 756 17
 863 00a8 7B68     		ldr	r3, [r7, #4]
 864 00aa FA68     		ldr	r2, [r7, #12]
 865 00ac 1A61     		str	r2, [r3, #16]
 866              	.L31:
 757:./Lib/Src/stm32f4xx_adc.c ****   }
 758:./Lib/Src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:./Lib/Src/stm32f4xx_adc.c ****   if (Rank < 7)
 867              		.loc 1 759 6
 868 00ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 869 00b0 062B     		cmp	r3, #6
 870 00b2 21D8     		bhi	.L32
 760:./Lib/Src/stm32f4xx_adc.c ****   {
 761:./Lib/Src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 871              		.loc 1 762 13
 872 00b4 7B68     		ldr	r3, [r7, #4]
 873 00b6 5B6B     		ldr	r3, [r3, #52]
 874 00b8 FB60     		str	r3, [r7, #12]
 763:./Lib/Src/stm32f4xx_adc.c ****     
 764:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 875              		.loc 1 765 41
 876 00ba BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 877 00bc 5A1E     		subs	r2, r3, #1
 878              		.loc 1 765 33
 879 00be 1346     		mov	r3, r2
 880 00c0 9B00     		lsls	r3, r3, #2
 881 00c2 1344     		add	r3, r3, r2
 882              		.loc 1 765 13
 883 00c4 1F22     		movs	r2, #31
 884 00c6 02FA03F3 		lsl	r3, r2, r3
 885 00ca BB60     		str	r3, [r7, #8]
 766:./Lib/Src/stm32f4xx_adc.c ****     
 767:./Lib/Src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 886              		.loc 1 768 16
 887 00cc BB68     		ldr	r3, [r7, #8]
 888 00ce DB43     		mvns	r3, r3
 889              		.loc 1 768 13
 890 00d0 FA68     		ldr	r2, [r7, #12]
 891 00d2 1340     		ands	r3, r3, r2
 892 00d4 FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccIbLEgY.s 			page 30


 769:./Lib/Src/stm32f4xx_adc.c ****     
 770:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 893              		.loc 1 771 15
 894 00d6 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 895              		.loc 1 771 51
 896 00d8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 897 00da 5A1E     		subs	r2, r3, #1
 898              		.loc 1 771 43
 899 00dc 1346     		mov	r3, r2
 900 00de 9B00     		lsls	r3, r3, #2
 901 00e0 1344     		add	r3, r3, r2
 902              		.loc 1 771 13
 903 00e2 01FA03F3 		lsl	r3, r1, r3
 904 00e6 BB60     		str	r3, [r7, #8]
 772:./Lib/Src/stm32f4xx_adc.c ****     
 773:./Lib/Src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 905              		.loc 1 774 13
 906 00e8 FA68     		ldr	r2, [r7, #12]
 907 00ea BB68     		ldr	r3, [r7, #8]
 908 00ec 1343     		orrs	r3, r3, r2
 909 00ee FB60     		str	r3, [r7, #12]
 775:./Lib/Src/stm32f4xx_adc.c ****     
 776:./Lib/Src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:./Lib/Src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 910              		.loc 1 777 16
 911 00f0 7B68     		ldr	r3, [r7, #4]
 912 00f2 FA68     		ldr	r2, [r7, #12]
 913 00f4 5A63     		str	r2, [r3, #52]
 778:./Lib/Src/stm32f4xx_adc.c ****   }
 779:./Lib/Src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:./Lib/Src/stm32f4xx_adc.c ****   else if (Rank < 13)
 781:./Lib/Src/stm32f4xx_adc.c ****   {
 782:./Lib/Src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 784:./Lib/Src/stm32f4xx_adc.c ****     
 785:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 787:./Lib/Src/stm32f4xx_adc.c ****     
 788:./Lib/Src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 790:./Lib/Src/stm32f4xx_adc.c ****     
 791:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 793:./Lib/Src/stm32f4xx_adc.c ****     
 794:./Lib/Src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 796:./Lib/Src/stm32f4xx_adc.c ****     
 797:./Lib/Src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:./Lib/Src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 799:./Lib/Src/stm32f4xx_adc.c ****   }
 800:./Lib/Src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:./Lib/Src/stm32f4xx_adc.c ****   else
 802:./Lib/Src/stm32f4xx_adc.c ****   {
 803:./Lib/Src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
ARM GAS  /tmp/ccIbLEgY.s 			page 31


 805:./Lib/Src/stm32f4xx_adc.c ****     
 806:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 808:./Lib/Src/stm32f4xx_adc.c ****     
 809:./Lib/Src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 811:./Lib/Src/stm32f4xx_adc.c ****     
 812:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 814:./Lib/Src/stm32f4xx_adc.c ****     
 815:./Lib/Src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 817:./Lib/Src/stm32f4xx_adc.c ****     
 818:./Lib/Src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:./Lib/Src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 820:./Lib/Src/stm32f4xx_adc.c ****   }
 821:./Lib/Src/stm32f4xx_adc.c **** }
 914              		.loc 1 821 1
 915 00f6 47E0     		b	.L35
 916              	.L32:
 780:./Lib/Src/stm32f4xx_adc.c ****   {
 917              		.loc 1 780 11
 918 00f8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 919 00fa 0C2B     		cmp	r3, #12
 920 00fc 21D8     		bhi	.L34
 783:./Lib/Src/stm32f4xx_adc.c ****     
 921              		.loc 1 783 13
 922 00fe 7B68     		ldr	r3, [r7, #4]
 923 0100 1B6B     		ldr	r3, [r3, #48]
 924 0102 FB60     		str	r3, [r7, #12]
 786:./Lib/Src/stm32f4xx_adc.c ****     
 925              		.loc 1 786 41
 926 0104 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 927 0106 DA1F     		subs	r2, r3, #7
 786:./Lib/Src/stm32f4xx_adc.c ****     
 928              		.loc 1 786 33
 929 0108 1346     		mov	r3, r2
 930 010a 9B00     		lsls	r3, r3, #2
 931 010c 1344     		add	r3, r3, r2
 786:./Lib/Src/stm32f4xx_adc.c ****     
 932              		.loc 1 786 13
 933 010e 1F22     		movs	r2, #31
 934 0110 02FA03F3 		lsl	r3, r2, r3
 935 0114 BB60     		str	r3, [r7, #8]
 789:./Lib/Src/stm32f4xx_adc.c ****     
 936              		.loc 1 789 16
 937 0116 BB68     		ldr	r3, [r7, #8]
 938 0118 DB43     		mvns	r3, r3
 789:./Lib/Src/stm32f4xx_adc.c ****     
 939              		.loc 1 789 13
 940 011a FA68     		ldr	r2, [r7, #12]
 941 011c 1340     		ands	r3, r3, r2
 942 011e FB60     		str	r3, [r7, #12]
 792:./Lib/Src/stm32f4xx_adc.c ****     
 943              		.loc 1 792 15
 944 0120 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 792:./Lib/Src/stm32f4xx_adc.c ****     
ARM GAS  /tmp/ccIbLEgY.s 			page 32


 945              		.loc 1 792 51
 946 0122 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 947 0124 DA1F     		subs	r2, r3, #7
 792:./Lib/Src/stm32f4xx_adc.c ****     
 948              		.loc 1 792 43
 949 0126 1346     		mov	r3, r2
 950 0128 9B00     		lsls	r3, r3, #2
 951 012a 1344     		add	r3, r3, r2
 792:./Lib/Src/stm32f4xx_adc.c ****     
 952              		.loc 1 792 13
 953 012c 01FA03F3 		lsl	r3, r1, r3
 954 0130 BB60     		str	r3, [r7, #8]
 795:./Lib/Src/stm32f4xx_adc.c ****     
 955              		.loc 1 795 13
 956 0132 FA68     		ldr	r2, [r7, #12]
 957 0134 BB68     		ldr	r3, [r7, #8]
 958 0136 1343     		orrs	r3, r3, r2
 959 0138 FB60     		str	r3, [r7, #12]
 798:./Lib/Src/stm32f4xx_adc.c ****   }
 960              		.loc 1 798 16
 961 013a 7B68     		ldr	r3, [r7, #4]
 962 013c FA68     		ldr	r2, [r7, #12]
 963 013e 1A63     		str	r2, [r3, #48]
 964              		.loc 1 821 1
 965 0140 22E0     		b	.L35
 966              	.L34:
 804:./Lib/Src/stm32f4xx_adc.c ****     
 967              		.loc 1 804 13
 968 0142 7B68     		ldr	r3, [r7, #4]
 969 0144 DB6A     		ldr	r3, [r3, #44]
 970 0146 FB60     		str	r3, [r7, #12]
 807:./Lib/Src/stm32f4xx_adc.c ****     
 971              		.loc 1 807 41
 972 0148 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 973 014a A3F10D02 		sub	r2, r3, #13
 807:./Lib/Src/stm32f4xx_adc.c ****     
 974              		.loc 1 807 33
 975 014e 1346     		mov	r3, r2
 976 0150 9B00     		lsls	r3, r3, #2
 977 0152 1344     		add	r3, r3, r2
 807:./Lib/Src/stm32f4xx_adc.c ****     
 978              		.loc 1 807 13
 979 0154 1F22     		movs	r2, #31
 980 0156 02FA03F3 		lsl	r3, r2, r3
 981 015a BB60     		str	r3, [r7, #8]
 810:./Lib/Src/stm32f4xx_adc.c ****     
 982              		.loc 1 810 16
 983 015c BB68     		ldr	r3, [r7, #8]
 984 015e DB43     		mvns	r3, r3
 810:./Lib/Src/stm32f4xx_adc.c ****     
 985              		.loc 1 810 13
 986 0160 FA68     		ldr	r2, [r7, #12]
 987 0162 1340     		ands	r3, r3, r2
 988 0164 FB60     		str	r3, [r7, #12]
 813:./Lib/Src/stm32f4xx_adc.c ****     
 989              		.loc 1 813 15
 990 0166 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccIbLEgY.s 			page 33


 813:./Lib/Src/stm32f4xx_adc.c ****     
 991              		.loc 1 813 51
 992 0168 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 993 016a A3F10D02 		sub	r2, r3, #13
 813:./Lib/Src/stm32f4xx_adc.c ****     
 994              		.loc 1 813 43
 995 016e 1346     		mov	r3, r2
 996 0170 9B00     		lsls	r3, r3, #2
 997 0172 1344     		add	r3, r3, r2
 813:./Lib/Src/stm32f4xx_adc.c ****     
 998              		.loc 1 813 13
 999 0174 01FA03F3 		lsl	r3, r1, r3
 1000 0178 BB60     		str	r3, [r7, #8]
 816:./Lib/Src/stm32f4xx_adc.c ****     
 1001              		.loc 1 816 13
 1002 017a FA68     		ldr	r2, [r7, #12]
 1003 017c BB68     		ldr	r3, [r7, #8]
 1004 017e 1343     		orrs	r3, r3, r2
 1005 0180 FB60     		str	r3, [r7, #12]
 819:./Lib/Src/stm32f4xx_adc.c ****   }
 1006              		.loc 1 819 16
 1007 0182 7B68     		ldr	r3, [r7, #4]
 1008 0184 FA68     		ldr	r2, [r7, #12]
 1009 0186 DA62     		str	r2, [r3, #44]
 1010              	.L35:
 1011              		.loc 1 821 1
 1012 0188 00BF     		nop
 1013 018a 1437     		adds	r7, r7, #20
 1014              		.cfi_def_cfa_offset 4
 1015 018c BD46     		mov	sp, r7
 1016              		.cfi_def_cfa_register 13
 1017              		@ sp needed
 1018 018e 5DF8047B 		ldr	r7, [sp], #4
 1019              		.cfi_restore 7
 1020              		.cfi_def_cfa_offset 0
 1021 0192 7047     		bx	lr
 1022              		.cfi_endproc
 1023              	.LFE134:
 1025              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 1026              		.align	1
 1027              		.global	ADC_SoftwareStartConv
 1028              		.syntax unified
 1029              		.thumb
 1030              		.thumb_func
 1032              	ADC_SoftwareStartConv:
 1033              	.LFB135:
 822:./Lib/Src/stm32f4xx_adc.c **** 
 823:./Lib/Src/stm32f4xx_adc.c **** /**
 824:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 827:./Lib/Src/stm32f4xx_adc.c ****   */
 828:./Lib/Src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:./Lib/Src/stm32f4xx_adc.c **** {
 1034              		.loc 1 829 1
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccIbLEgY.s 			page 34


 1037              		@ frame_needed = 1, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
 1039 0000 80B4     		push	{r7}
 1040              		.cfi_def_cfa_offset 4
 1041              		.cfi_offset 7, -4
 1042 0002 83B0     		sub	sp, sp, #12
 1043              		.cfi_def_cfa_offset 16
 1044 0004 00AF     		add	r7, sp, #0
 1045              		.cfi_def_cfa_register 7
 1046 0006 7860     		str	r0, [r7, #4]
 830:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:./Lib/Src/stm32f4xx_adc.c ****   
 833:./Lib/Src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 1047              		.loc 1 834 7
 1048 0008 7B68     		ldr	r3, [r7, #4]
 1049 000a 9B68     		ldr	r3, [r3, #8]
 1050              		.loc 1 834 13
 1051 000c 43F08042 		orr	r2, r3, #1073741824
 1052 0010 7B68     		ldr	r3, [r7, #4]
 1053 0012 9A60     		str	r2, [r3, #8]
 835:./Lib/Src/stm32f4xx_adc.c **** }
 1054              		.loc 1 835 1
 1055 0014 00BF     		nop
 1056 0016 0C37     		adds	r7, r7, #12
 1057              		.cfi_def_cfa_offset 4
 1058 0018 BD46     		mov	sp, r7
 1059              		.cfi_def_cfa_register 13
 1060              		@ sp needed
 1061 001a 5DF8047B 		ldr	r7, [sp], #4
 1062              		.cfi_restore 7
 1063              		.cfi_def_cfa_offset 0
 1064 001e 7047     		bx	lr
 1065              		.cfi_endproc
 1066              	.LFE135:
 1068              		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 1069              		.align	1
 1070              		.global	ADC_GetSoftwareStartConvStatus
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1075              	ADC_GetSoftwareStartConvStatus:
 1076              	.LFB136:
 836:./Lib/Src/stm32f4xx_adc.c **** 
 837:./Lib/Src/stm32f4xx_adc.c **** /**
 838:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:./Lib/Src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:./Lib/Src/stm32f4xx_adc.c ****   */
 842:./Lib/Src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:./Lib/Src/stm32f4xx_adc.c **** {
 1077              		.loc 1 843 1
 1078              		.cfi_startproc
 1079              		@ args = 0, pretend = 0, frame = 16
 1080              		@ frame_needed = 1, uses_anonymous_args = 0
 1081              		@ link register save eliminated.
ARM GAS  /tmp/ccIbLEgY.s 			page 35


 1082 0000 80B4     		push	{r7}
 1083              		.cfi_def_cfa_offset 4
 1084              		.cfi_offset 7, -4
 1085 0002 85B0     		sub	sp, sp, #20
 1086              		.cfi_def_cfa_offset 24
 1087 0004 00AF     		add	r7, sp, #0
 1088              		.cfi_def_cfa_register 7
 1089 0006 7860     		str	r0, [r7, #4]
 844:./Lib/Src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1090              		.loc 1 844 14
 1091 0008 0023     		movs	r3, #0
 1092 000a FB73     		strb	r3, [r7, #15]
 845:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:./Lib/Src/stm32f4xx_adc.c ****   
 848:./Lib/Src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:./Lib/Src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_SWSTART) != (uint32_t)RESET)
 1093              		.loc 1 849 12
 1094 000c 7B68     		ldr	r3, [r7, #4]
 1095 000e 9B68     		ldr	r3, [r3, #8]
 1096              		.loc 1 849 18
 1097 0010 03F08043 		and	r3, r3, #1073741824
 1098              		.loc 1 849 6
 1099 0014 002B     		cmp	r3, #0
 1100 0016 02D0     		beq	.L38
 850:./Lib/Src/stm32f4xx_adc.c ****   {
 851:./Lib/Src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = SET;
 1101              		.loc 1 852 15
 1102 0018 0123     		movs	r3, #1
 1103 001a FB73     		strb	r3, [r7, #15]
 1104 001c 01E0     		b	.L39
 1105              	.L38:
 853:./Lib/Src/stm32f4xx_adc.c ****   }
 854:./Lib/Src/stm32f4xx_adc.c ****   else
 855:./Lib/Src/stm32f4xx_adc.c ****   {
 856:./Lib/Src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1106              		.loc 1 857 15
 1107 001e 0023     		movs	r3, #0
 1108 0020 FB73     		strb	r3, [r7, #15]
 1109              	.L39:
 858:./Lib/Src/stm32f4xx_adc.c ****   }
 859:./Lib/Src/stm32f4xx_adc.c ****   
 860:./Lib/Src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:./Lib/Src/stm32f4xx_adc.c ****   return  bitstatus;
 1110              		.loc 1 861 11
 1111 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:./Lib/Src/stm32f4xx_adc.c **** }
 1112              		.loc 1 862 1
 1113 0024 1846     		mov	r0, r3
 1114 0026 1437     		adds	r7, r7, #20
 1115              		.cfi_def_cfa_offset 4
 1116 0028 BD46     		mov	sp, r7
 1117              		.cfi_def_cfa_register 13
 1118              		@ sp needed
 1119 002a 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccIbLEgY.s 			page 36


 1120              		.cfi_restore 7
 1121              		.cfi_def_cfa_offset 0
 1122 002e 7047     		bx	lr
 1123              		.cfi_endproc
 1124              	.LFE136:
 1126              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 1127              		.align	1
 1128              		.global	ADC_EOCOnEachRegularChannelCmd
 1129              		.syntax unified
 1130              		.thumb
 1131              		.thumb_func
 1133              	ADC_EOCOnEachRegularChannelCmd:
 1134              	.LFB137:
 863:./Lib/Src/stm32f4xx_adc.c **** 
 864:./Lib/Src/stm32f4xx_adc.c **** 
 865:./Lib/Src/stm32f4xx_adc.c **** /**
 866:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 871:./Lib/Src/stm32f4xx_adc.c ****   */
 872:./Lib/Src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:./Lib/Src/stm32f4xx_adc.c **** {
 1135              		.loc 1 873 1
 1136              		.cfi_startproc
 1137              		@ args = 0, pretend = 0, frame = 8
 1138              		@ frame_needed = 1, uses_anonymous_args = 0
 1139              		@ link register save eliminated.
 1140 0000 80B4     		push	{r7}
 1141              		.cfi_def_cfa_offset 4
 1142              		.cfi_offset 7, -4
 1143 0002 83B0     		sub	sp, sp, #12
 1144              		.cfi_def_cfa_offset 16
 1145 0004 00AF     		add	r7, sp, #0
 1146              		.cfi_def_cfa_register 7
 1147 0006 7860     		str	r0, [r7, #4]
 1148 0008 0B46     		mov	r3, r1
 1149 000a FB70     		strb	r3, [r7, #3]
 874:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:./Lib/Src/stm32f4xx_adc.c ****   
 878:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1150              		.loc 1 878 6
 1151 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1152 000e 002B     		cmp	r3, #0
 1153 0010 06D0     		beq	.L42
 879:./Lib/Src/stm32f4xx_adc.c ****   {
 880:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1154              		.loc 1 881 9
 1155 0012 7B68     		ldr	r3, [r7, #4]
 1156 0014 9B68     		ldr	r3, [r3, #8]
 1157              		.loc 1 881 15
 1158 0016 43F48062 		orr	r2, r3, #1024
 1159 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccIbLEgY.s 			page 37


 1160 001c 9A60     		str	r2, [r3, #8]
 882:./Lib/Src/stm32f4xx_adc.c ****   }
 883:./Lib/Src/stm32f4xx_adc.c ****   else
 884:./Lib/Src/stm32f4xx_adc.c ****   {
 885:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 887:./Lib/Src/stm32f4xx_adc.c ****   }
 888:./Lib/Src/stm32f4xx_adc.c **** }
 1161              		.loc 1 888 1
 1162 001e 05E0     		b	.L44
 1163              	.L42:
 886:./Lib/Src/stm32f4xx_adc.c ****   }
 1164              		.loc 1 886 9
 1165 0020 7B68     		ldr	r3, [r7, #4]
 1166 0022 9B68     		ldr	r3, [r3, #8]
 886:./Lib/Src/stm32f4xx_adc.c ****   }
 1167              		.loc 1 886 15
 1168 0024 23F48062 		bic	r2, r3, #1024
 1169 0028 7B68     		ldr	r3, [r7, #4]
 1170 002a 9A60     		str	r2, [r3, #8]
 1171              	.L44:
 1172              		.loc 1 888 1
 1173 002c 00BF     		nop
 1174 002e 0C37     		adds	r7, r7, #12
 1175              		.cfi_def_cfa_offset 4
 1176 0030 BD46     		mov	sp, r7
 1177              		.cfi_def_cfa_register 13
 1178              		@ sp needed
 1179 0032 5DF8047B 		ldr	r7, [sp], #4
 1180              		.cfi_restore 7
 1181              		.cfi_def_cfa_offset 0
 1182 0036 7047     		bx	lr
 1183              		.cfi_endproc
 1184              	.LFE137:
 1186              		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 1187              		.align	1
 1188              		.global	ADC_ContinuousModeCmd
 1189              		.syntax unified
 1190              		.thumb
 1191              		.thumb_func
 1193              	ADC_ContinuousModeCmd:
 1194              	.LFB138:
 889:./Lib/Src/stm32f4xx_adc.c **** 
 890:./Lib/Src/stm32f4xx_adc.c **** /**
 891:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 896:./Lib/Src/stm32f4xx_adc.c ****   */
 897:./Lib/Src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:./Lib/Src/stm32f4xx_adc.c **** {
 1195              		.loc 1 898 1
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 8
 1198              		@ frame_needed = 1, uses_anonymous_args = 0
 1199              		@ link register save eliminated.
ARM GAS  /tmp/ccIbLEgY.s 			page 38


 1200 0000 80B4     		push	{r7}
 1201              		.cfi_def_cfa_offset 4
 1202              		.cfi_offset 7, -4
 1203 0002 83B0     		sub	sp, sp, #12
 1204              		.cfi_def_cfa_offset 16
 1205 0004 00AF     		add	r7, sp, #0
 1206              		.cfi_def_cfa_register 7
 1207 0006 7860     		str	r0, [r7, #4]
 1208 0008 0B46     		mov	r3, r1
 1209 000a FB70     		strb	r3, [r7, #3]
 899:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:./Lib/Src/stm32f4xx_adc.c ****   
 903:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1210              		.loc 1 903 6
 1211 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1212 000e 002B     		cmp	r3, #0
 1213 0010 06D0     		beq	.L46
 904:./Lib/Src/stm32f4xx_adc.c ****   {
 905:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1214              		.loc 1 906 9
 1215 0012 7B68     		ldr	r3, [r7, #4]
 1216 0014 9B68     		ldr	r3, [r3, #8]
 1217              		.loc 1 906 15
 1218 0016 43F00202 		orr	r2, r3, #2
 1219 001a 7B68     		ldr	r3, [r7, #4]
 1220 001c 9A60     		str	r2, [r3, #8]
 907:./Lib/Src/stm32f4xx_adc.c ****   }
 908:./Lib/Src/stm32f4xx_adc.c ****   else
 909:./Lib/Src/stm32f4xx_adc.c ****   {
 910:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 912:./Lib/Src/stm32f4xx_adc.c ****   }
 913:./Lib/Src/stm32f4xx_adc.c **** }
 1221              		.loc 1 913 1
 1222 001e 05E0     		b	.L48
 1223              	.L46:
 911:./Lib/Src/stm32f4xx_adc.c ****   }
 1224              		.loc 1 911 9
 1225 0020 7B68     		ldr	r3, [r7, #4]
 1226 0022 9B68     		ldr	r3, [r3, #8]
 911:./Lib/Src/stm32f4xx_adc.c ****   }
 1227              		.loc 1 911 15
 1228 0024 23F00202 		bic	r2, r3, #2
 1229 0028 7B68     		ldr	r3, [r7, #4]
 1230 002a 9A60     		str	r2, [r3, #8]
 1231              	.L48:
 1232              		.loc 1 913 1
 1233 002c 00BF     		nop
 1234 002e 0C37     		adds	r7, r7, #12
 1235              		.cfi_def_cfa_offset 4
 1236 0030 BD46     		mov	sp, r7
 1237              		.cfi_def_cfa_register 13
 1238              		@ sp needed
 1239 0032 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccIbLEgY.s 			page 39


 1240              		.cfi_restore 7
 1241              		.cfi_def_cfa_offset 0
 1242 0036 7047     		bx	lr
 1243              		.cfi_endproc
 1244              	.LFE138:
 1246              		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 1247              		.align	1
 1248              		.global	ADC_DiscModeChannelCountConfig
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1253              	ADC_DiscModeChannelCountConfig:
 1254              	.LFB139:
 914:./Lib/Src/stm32f4xx_adc.c **** 
 915:./Lib/Src/stm32f4xx_adc.c **** /**
 916:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:./Lib/Src/stm32f4xx_adc.c ****   *         channel.
 918:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:./Lib/Src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:./Lib/Src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 922:./Lib/Src/stm32f4xx_adc.c ****   */
 923:./Lib/Src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:./Lib/Src/stm32f4xx_adc.c **** {
 1255              		.loc 1 924 1
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 16
 1258              		@ frame_needed = 1, uses_anonymous_args = 0
 1259              		@ link register save eliminated.
 1260 0000 80B4     		push	{r7}
 1261              		.cfi_def_cfa_offset 4
 1262              		.cfi_offset 7, -4
 1263 0002 85B0     		sub	sp, sp, #20
 1264              		.cfi_def_cfa_offset 24
 1265 0004 00AF     		add	r7, sp, #0
 1266              		.cfi_def_cfa_register 7
 1267 0006 7860     		str	r0, [r7, #4]
 1268 0008 0B46     		mov	r3, r1
 1269 000a FB70     		strb	r3, [r7, #3]
 925:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1270              		.loc 1 925 12
 1271 000c 0023     		movs	r3, #0
 1272 000e FB60     		str	r3, [r7, #12]
 926:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1273              		.loc 1 926 12
 1274 0010 0023     		movs	r3, #0
 1275 0012 BB60     		str	r3, [r7, #8]
 927:./Lib/Src/stm32f4xx_adc.c ****   
 928:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:./Lib/Src/stm32f4xx_adc.c ****   
 932:./Lib/Src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1276              		.loc 1 933 11
 1277 0014 7B68     		ldr	r3, [r7, #4]
 1278 0016 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccIbLEgY.s 			page 40


 1279 0018 FB60     		str	r3, [r7, #12]
 934:./Lib/Src/stm32f4xx_adc.c ****   
 935:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1280              		.loc 1 936 11
 1281 001a FB68     		ldr	r3, [r7, #12]
 1282 001c 23F46043 		bic	r3, r3, #57344
 1283 0020 FB60     		str	r3, [r7, #12]
 937:./Lib/Src/stm32f4xx_adc.c ****   
 938:./Lib/Src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:./Lib/Src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1284              		.loc 1 939 20
 1285 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1286 0024 013B     		subs	r3, r3, #1
 1287              		.loc 1 939 11
 1288 0026 BB60     		str	r3, [r7, #8]
 940:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1289              		.loc 1 940 22
 1290 0028 BB68     		ldr	r3, [r7, #8]
 1291 002a 5B03     		lsls	r3, r3, #13
 1292              		.loc 1 940 11
 1293 002c FA68     		ldr	r2, [r7, #12]
 1294 002e 1343     		orrs	r3, r3, r2
 1295 0030 FB60     		str	r3, [r7, #12]
 941:./Lib/Src/stm32f4xx_adc.c ****   
 942:./Lib/Src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1296              		.loc 1 943 13
 1297 0032 7B68     		ldr	r3, [r7, #4]
 1298 0034 FA68     		ldr	r2, [r7, #12]
 1299 0036 5A60     		str	r2, [r3, #4]
 944:./Lib/Src/stm32f4xx_adc.c **** }
 1300              		.loc 1 944 1
 1301 0038 00BF     		nop
 1302 003a 1437     		adds	r7, r7, #20
 1303              		.cfi_def_cfa_offset 4
 1304 003c BD46     		mov	sp, r7
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 003e 5DF8047B 		ldr	r7, [sp], #4
 1308              		.cfi_restore 7
 1309              		.cfi_def_cfa_offset 0
 1310 0042 7047     		bx	lr
 1311              		.cfi_endproc
 1312              	.LFE139:
 1314              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 1315              		.align	1
 1316              		.global	ADC_DiscModeCmd
 1317              		.syntax unified
 1318              		.thumb
 1319              		.thumb_func
 1321              	ADC_DiscModeCmd:
 1322              	.LFB140:
 945:./Lib/Src/stm32f4xx_adc.c **** 
 946:./Lib/Src/stm32f4xx_adc.c **** /**
 947:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:./Lib/Src/stm32f4xx_adc.c ****   *         for the specified ADC
ARM GAS  /tmp/ccIbLEgY.s 			page 41


 949:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:./Lib/Src/stm32f4xx_adc.c ****   *         regular group channel.
 952:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
 954:./Lib/Src/stm32f4xx_adc.c ****   */
 955:./Lib/Src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:./Lib/Src/stm32f4xx_adc.c **** {
 1323              		.loc 1 956 1
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 8
 1326              		@ frame_needed = 1, uses_anonymous_args = 0
 1327              		@ link register save eliminated.
 1328 0000 80B4     		push	{r7}
 1329              		.cfi_def_cfa_offset 4
 1330              		.cfi_offset 7, -4
 1331 0002 83B0     		sub	sp, sp, #12
 1332              		.cfi_def_cfa_offset 16
 1333 0004 00AF     		add	r7, sp, #0
 1334              		.cfi_def_cfa_register 7
 1335 0006 7860     		str	r0, [r7, #4]
 1336 0008 0B46     		mov	r3, r1
 1337 000a FB70     		strb	r3, [r7, #3]
 957:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:./Lib/Src/stm32f4xx_adc.c ****   
 961:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1338              		.loc 1 961 6
 1339 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1340 000e 002B     		cmp	r3, #0
 1341 0010 06D0     		beq	.L51
 962:./Lib/Src/stm32f4xx_adc.c ****   {
 963:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1342              		.loc 1 964 9
 1343 0012 7B68     		ldr	r3, [r7, #4]
 1344 0014 5B68     		ldr	r3, [r3, #4]
 1345              		.loc 1 964 15
 1346 0016 43F40062 		orr	r2, r3, #2048
 1347 001a 7B68     		ldr	r3, [r7, #4]
 1348 001c 5A60     		str	r2, [r3, #4]
 965:./Lib/Src/stm32f4xx_adc.c ****   }
 966:./Lib/Src/stm32f4xx_adc.c ****   else
 967:./Lib/Src/stm32f4xx_adc.c ****   {
 968:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 970:./Lib/Src/stm32f4xx_adc.c ****   }
 971:./Lib/Src/stm32f4xx_adc.c **** }
 1349              		.loc 1 971 1
 1350 001e 05E0     		b	.L53
 1351              	.L51:
 969:./Lib/Src/stm32f4xx_adc.c ****   }
 1352              		.loc 1 969 9
 1353 0020 7B68     		ldr	r3, [r7, #4]
 1354 0022 5B68     		ldr	r3, [r3, #4]
 969:./Lib/Src/stm32f4xx_adc.c ****   }
ARM GAS  /tmp/ccIbLEgY.s 			page 42


 1355              		.loc 1 969 15
 1356 0024 23F40062 		bic	r2, r3, #2048
 1357 0028 7B68     		ldr	r3, [r7, #4]
 1358 002a 5A60     		str	r2, [r3, #4]
 1359              	.L53:
 1360              		.loc 1 971 1
 1361 002c 00BF     		nop
 1362 002e 0C37     		adds	r7, r7, #12
 1363              		.cfi_def_cfa_offset 4
 1364 0030 BD46     		mov	sp, r7
 1365              		.cfi_def_cfa_register 13
 1366              		@ sp needed
 1367 0032 5DF8047B 		ldr	r7, [sp], #4
 1368              		.cfi_restore 7
 1369              		.cfi_def_cfa_offset 0
 1370 0036 7047     		bx	lr
 1371              		.cfi_endproc
 1372              	.LFE140:
 1374              		.section	.text.ADC_GetConversionValue,"ax",%progbits
 1375              		.align	1
 1376              		.global	ADC_GetConversionValue
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1381              	ADC_GetConversionValue:
 1382              	.LFB141:
 972:./Lib/Src/stm32f4xx_adc.c **** 
 973:./Lib/Src/stm32f4xx_adc.c **** /**
 974:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:./Lib/Src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:./Lib/Src/stm32f4xx_adc.c ****   */
 978:./Lib/Src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:./Lib/Src/stm32f4xx_adc.c **** {
 1383              		.loc 1 979 1
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 8
 1386              		@ frame_needed = 1, uses_anonymous_args = 0
 1387              		@ link register save eliminated.
 1388 0000 80B4     		push	{r7}
 1389              		.cfi_def_cfa_offset 4
 1390              		.cfi_offset 7, -4
 1391 0002 83B0     		sub	sp, sp, #12
 1392              		.cfi_def_cfa_offset 16
 1393 0004 00AF     		add	r7, sp, #0
 1394              		.cfi_def_cfa_register 7
 1395 0006 7860     		str	r0, [r7, #4]
 980:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:./Lib/Src/stm32f4xx_adc.c ****   
 983:./Lib/Src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:./Lib/Src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1396              		.loc 1 984 25
 1397 0008 7B68     		ldr	r3, [r7, #4]
 1398 000a DB6C     		ldr	r3, [r3, #76]
 1399              		.loc 1 984 10
 1400 000c 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccIbLEgY.s 			page 43


 985:./Lib/Src/stm32f4xx_adc.c **** }
 1401              		.loc 1 985 1
 1402 000e 1846     		mov	r0, r3
 1403 0010 0C37     		adds	r7, r7, #12
 1404              		.cfi_def_cfa_offset 4
 1405 0012 BD46     		mov	sp, r7
 1406              		.cfi_def_cfa_register 13
 1407              		@ sp needed
 1408 0014 5DF8047B 		ldr	r7, [sp], #4
 1409              		.cfi_restore 7
 1410              		.cfi_def_cfa_offset 0
 1411 0018 7047     		bx	lr
 1412              		.cfi_endproc
 1413              	.LFE141:
 1415              		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 1416              		.align	1
 1417              		.global	ADC_GetMultiModeConversionValue
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1422              	ADC_GetMultiModeConversionValue:
 1423              	.LFB142:
 986:./Lib/Src/stm32f4xx_adc.c **** 
 987:./Lib/Src/stm32f4xx_adc.c **** /**
 988:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:./Lib/Src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:./Lib/Src/stm32f4xx_adc.c ****   * @param  None  
 991:./Lib/Src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:./Lib/Src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:./Lib/Src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:./Lib/Src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:./Lib/Src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:./Lib/Src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:./Lib/Src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:./Lib/Src/stm32f4xx_adc.c ****   */
 999:./Lib/Src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:./Lib/Src/stm32f4xx_adc.c **** {
 1424              		.loc 1 1000 1
 1425              		.cfi_startproc
 1426              		@ args = 0, pretend = 0, frame = 0
 1427              		@ frame_needed = 1, uses_anonymous_args = 0
 1428              		@ link register save eliminated.
 1429 0000 80B4     		push	{r7}
 1430              		.cfi_def_cfa_offset 4
 1431              		.cfi_offset 7, -4
 1432 0002 00AF     		add	r7, sp, #0
 1433              		.cfi_def_cfa_register 7
1001:./Lib/Src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:./Lib/Src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1434              		.loc 1 1002 11
 1435 0004 034B     		ldr	r3, .L58
 1436 0006 1B68     		ldr	r3, [r3]
1003:./Lib/Src/stm32f4xx_adc.c **** }
 1437              		.loc 1 1003 1
 1438 0008 1846     		mov	r0, r3
 1439 000a BD46     		mov	sp, r7
 1440              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccIbLEgY.s 			page 44


 1441              		@ sp needed
 1442 000c 5DF8047B 		ldr	r7, [sp], #4
 1443              		.cfi_restore 7
 1444              		.cfi_def_cfa_offset 0
 1445 0010 7047     		bx	lr
 1446              	.L59:
 1447 0012 00BF     		.align	2
 1448              	.L58:
 1449 0014 08230140 		.word	1073816328
 1450              		.cfi_endproc
 1451              	.LFE142:
 1453              		.section	.text.ADC_DMACmd,"ax",%progbits
 1454              		.align	1
 1455              		.global	ADC_DMACmd
 1456              		.syntax unified
 1457              		.thumb
 1458              		.thumb_func
 1460              	ADC_DMACmd:
 1461              	.LFB143:
1004:./Lib/Src/stm32f4xx_adc.c **** /**
1005:./Lib/Src/stm32f4xx_adc.c ****   * @}
1006:./Lib/Src/stm32f4xx_adc.c ****   */
1007:./Lib/Src/stm32f4xx_adc.c **** 
1008:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:./Lib/Src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:./Lib/Src/stm32f4xx_adc.c ****  *
1011:./Lib/Src/stm32f4xx_adc.c **** @verbatim   
1012:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
1013:./Lib/Src/stm32f4xx_adc.c ****             ##### Regular Channels DMA Configuration functions #####
1014:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================  
1015:./Lib/Src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the DMA for ADC 
1016:./Lib/Src/stm32f4xx_adc.c ****          regular channels.
1017:./Lib/Src/stm32f4xx_adc.c ****          Since converted regular channel values are stored into a unique data 
1018:./Lib/Src/stm32f4xx_adc.c ****          register, it is useful to use DMA for conversion of more than one regular 
1019:./Lib/Src/stm32f4xx_adc.c ****          channel. This avoids the loss of the data already stored in the ADC 
1020:./Lib/Src/stm32f4xx_adc.c ****          Data register.   
1021:./Lib/Src/stm32f4xx_adc.c ****          When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1022:./Lib/Src/stm32f4xx_adc.c ****          conversion of a regular channel, a DMA request is generated.
1023:./Lib/Src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for Independent ADC mode" 
1024:./Lib/Src/stm32f4xx_adc.c ****          configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1025:./Lib/Src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1026:./Lib/Src/stm32f4xx_adc.c ****       (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1027:./Lib/Src/stm32f4xx_adc.c ****       (+) Requests can continue to be generated (feature ENABLED).  
1028:./Lib/Src/stm32f4xx_adc.c ****     [..] Depending on the "DMA disable selection for multi ADC mode" configuration 
1029:./Lib/Src/stm32f4xx_adc.c ****          (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1030:./Lib/Src/stm32f4xx_adc.c ****          at the end of the last DMA transfer, two possibilities are allowed:
1031:./Lib/Src/stm32f4xx_adc.c ****         (+) No new DMA request is issued to the DMA controller (feature DISABLED) 
1032:./Lib/Src/stm32f4xx_adc.c ****         (+) Requests can continue to be generated (feature ENABLED).
1033:./Lib/Src/stm32f4xx_adc.c **** 
1034:./Lib/Src/stm32f4xx_adc.c **** @endverbatim
1035:./Lib/Src/stm32f4xx_adc.c ****   * @{
1036:./Lib/Src/stm32f4xx_adc.c ****   */
1037:./Lib/Src/stm32f4xx_adc.c ****   
1038:./Lib/Src/stm32f4xx_adc.c ****  /**
1039:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1040:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1041:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
ARM GAS  /tmp/ccIbLEgY.s 			page 45


1042:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1043:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1044:./Lib/Src/stm32f4xx_adc.c ****   */
1045:./Lib/Src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1046:./Lib/Src/stm32f4xx_adc.c **** {
 1462              		.loc 1 1046 1
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 8
 1465              		@ frame_needed = 1, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
 1467 0000 80B4     		push	{r7}
 1468              		.cfi_def_cfa_offset 4
 1469              		.cfi_offset 7, -4
 1470 0002 83B0     		sub	sp, sp, #12
 1471              		.cfi_def_cfa_offset 16
 1472 0004 00AF     		add	r7, sp, #0
 1473              		.cfi_def_cfa_register 7
 1474 0006 7860     		str	r0, [r7, #4]
 1475 0008 0B46     		mov	r3, r1
 1476 000a FB70     		strb	r3, [r7, #3]
1047:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1048:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1049:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1050:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1477              		.loc 1 1050 6
 1478 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1479 000e 002B     		cmp	r3, #0
 1480 0010 06D0     		beq	.L61
1051:./Lib/Src/stm32f4xx_adc.c ****   {
1052:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1053:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1481              		.loc 1 1053 9
 1482 0012 7B68     		ldr	r3, [r7, #4]
 1483 0014 9B68     		ldr	r3, [r3, #8]
 1484              		.loc 1 1053 15
 1485 0016 43F48072 		orr	r2, r3, #256
 1486 001a 7B68     		ldr	r3, [r7, #4]
 1487 001c 9A60     		str	r2, [r3, #8]
1054:./Lib/Src/stm32f4xx_adc.c ****   }
1055:./Lib/Src/stm32f4xx_adc.c ****   else
1056:./Lib/Src/stm32f4xx_adc.c ****   {
1057:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1058:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
1059:./Lib/Src/stm32f4xx_adc.c ****   }
1060:./Lib/Src/stm32f4xx_adc.c **** }
 1488              		.loc 1 1060 1
 1489 001e 05E0     		b	.L63
 1490              	.L61:
1058:./Lib/Src/stm32f4xx_adc.c ****   }
 1491              		.loc 1 1058 9
 1492 0020 7B68     		ldr	r3, [r7, #4]
 1493 0022 9B68     		ldr	r3, [r3, #8]
1058:./Lib/Src/stm32f4xx_adc.c ****   }
 1494              		.loc 1 1058 15
 1495 0024 23F48072 		bic	r2, r3, #256
 1496 0028 7B68     		ldr	r3, [r7, #4]
 1497 002a 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccIbLEgY.s 			page 46


 1498              	.L63:
 1499              		.loc 1 1060 1
 1500 002c 00BF     		nop
 1501 002e 0C37     		adds	r7, r7, #12
 1502              		.cfi_def_cfa_offset 4
 1503 0030 BD46     		mov	sp, r7
 1504              		.cfi_def_cfa_register 13
 1505              		@ sp needed
 1506 0032 5DF8047B 		ldr	r7, [sp], #4
 1507              		.cfi_restore 7
 1508              		.cfi_def_cfa_offset 0
 1509 0036 7047     		bx	lr
 1510              		.cfi_endproc
 1511              	.LFE143:
 1513              		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 1514              		.align	1
 1515              		.global	ADC_DMARequestAfterLastTransferCmd
 1516              		.syntax unified
 1517              		.thumb
 1518              		.thumb_func
 1520              	ADC_DMARequestAfterLastTransferCmd:
 1521              	.LFB144:
1061:./Lib/Src/stm32f4xx_adc.c **** 
1062:./Lib/Src/stm32f4xx_adc.c **** /**
1063:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1064:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1065:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1066:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1067:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1068:./Lib/Src/stm32f4xx_adc.c ****   */
1069:./Lib/Src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1070:./Lib/Src/stm32f4xx_adc.c **** {
 1522              		.loc 1 1070 1
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 8
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526              		@ link register save eliminated.
 1527 0000 80B4     		push	{r7}
 1528              		.cfi_def_cfa_offset 4
 1529              		.cfi_offset 7, -4
 1530 0002 83B0     		sub	sp, sp, #12
 1531              		.cfi_def_cfa_offset 16
 1532 0004 00AF     		add	r7, sp, #0
 1533              		.cfi_def_cfa_register 7
 1534 0006 7860     		str	r0, [r7, #4]
 1535 0008 0B46     		mov	r3, r1
 1536 000a FB70     		strb	r3, [r7, #3]
1071:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1072:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1073:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1074:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1537              		.loc 1 1074 6
 1538 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1539 000e 002B     		cmp	r3, #0
 1540 0010 06D0     		beq	.L65
1075:./Lib/Src/stm32f4xx_adc.c ****   {
1076:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
ARM GAS  /tmp/ccIbLEgY.s 			page 47


1077:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1541              		.loc 1 1077 9
 1542 0012 7B68     		ldr	r3, [r7, #4]
 1543 0014 9B68     		ldr	r3, [r3, #8]
 1544              		.loc 1 1077 15
 1545 0016 43F40072 		orr	r2, r3, #512
 1546 001a 7B68     		ldr	r3, [r7, #4]
 1547 001c 9A60     		str	r2, [r3, #8]
1078:./Lib/Src/stm32f4xx_adc.c ****   }
1079:./Lib/Src/stm32f4xx_adc.c ****   else
1080:./Lib/Src/stm32f4xx_adc.c ****   {
1081:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1082:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
1083:./Lib/Src/stm32f4xx_adc.c ****   }
1084:./Lib/Src/stm32f4xx_adc.c **** }
 1548              		.loc 1 1084 1
 1549 001e 05E0     		b	.L67
 1550              	.L65:
1082:./Lib/Src/stm32f4xx_adc.c ****   }
 1551              		.loc 1 1082 9
 1552 0020 7B68     		ldr	r3, [r7, #4]
 1553 0022 9B68     		ldr	r3, [r3, #8]
1082:./Lib/Src/stm32f4xx_adc.c ****   }
 1554              		.loc 1 1082 15
 1555 0024 23F40072 		bic	r2, r3, #512
 1556 0028 7B68     		ldr	r3, [r7, #4]
 1557 002a 9A60     		str	r2, [r3, #8]
 1558              	.L67:
 1559              		.loc 1 1084 1
 1560 002c 00BF     		nop
 1561 002e 0C37     		adds	r7, r7, #12
 1562              		.cfi_def_cfa_offset 4
 1563 0030 BD46     		mov	sp, r7
 1564              		.cfi_def_cfa_register 13
 1565              		@ sp needed
 1566 0032 5DF8047B 		ldr	r7, [sp], #4
 1567              		.cfi_restore 7
 1568              		.cfi_def_cfa_offset 0
 1569 0036 7047     		bx	lr
 1570              		.cfi_endproc
 1571              	.LFE144:
 1573              		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 1574              		.align	1
 1575              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1576              		.syntax unified
 1577              		.thumb
 1578              		.thumb_func
 1580              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1581              	.LFB145:
1085:./Lib/Src/stm32f4xx_adc.c **** 
1086:./Lib/Src/stm32f4xx_adc.c **** /**
1087:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1088:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1089:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1090:./Lib/Src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1091:./Lib/Src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1092:./Lib/Src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
ARM GAS  /tmp/ccIbLEgY.s 			page 48


1093:./Lib/Src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1094:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1095:./Lib/Src/stm32f4xx_adc.c ****   */
1096:./Lib/Src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1097:./Lib/Src/stm32f4xx_adc.c **** {
 1582              		.loc 1 1097 1
 1583              		.cfi_startproc
 1584              		@ args = 0, pretend = 0, frame = 8
 1585              		@ frame_needed = 1, uses_anonymous_args = 0
 1586              		@ link register save eliminated.
 1587 0000 80B4     		push	{r7}
 1588              		.cfi_def_cfa_offset 4
 1589              		.cfi_offset 7, -4
 1590 0002 83B0     		sub	sp, sp, #12
 1591              		.cfi_def_cfa_offset 16
 1592 0004 00AF     		add	r7, sp, #0
 1593              		.cfi_def_cfa_register 7
 1594 0006 0346     		mov	r3, r0
 1595 0008 FB71     		strb	r3, [r7, #7]
1098:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1099:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1596              		.loc 1 1100 6
 1597 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1598 000c 002B     		cmp	r3, #0
 1599 000e 06D0     		beq	.L69
1101:./Lib/Src/stm32f4xx_adc.c ****   {
1102:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1103:./Lib/Src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1600              		.loc 1 1103 8
 1601 0010 094B     		ldr	r3, .L72
 1602 0012 5B68     		ldr	r3, [r3, #4]
 1603 0014 084A     		ldr	r2, .L72
 1604              		.loc 1 1103 14
 1605 0016 43F40053 		orr	r3, r3, #8192
 1606 001a 5360     		str	r3, [r2, #4]
1104:./Lib/Src/stm32f4xx_adc.c ****   }
1105:./Lib/Src/stm32f4xx_adc.c ****   else
1106:./Lib/Src/stm32f4xx_adc.c ****   {
1107:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1108:./Lib/Src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
1109:./Lib/Src/stm32f4xx_adc.c ****   }
1110:./Lib/Src/stm32f4xx_adc.c **** }
 1607              		.loc 1 1110 1
 1608 001c 05E0     		b	.L71
 1609              	.L69:
1108:./Lib/Src/stm32f4xx_adc.c ****   }
 1610              		.loc 1 1108 8
 1611 001e 064B     		ldr	r3, .L72
 1612 0020 5B68     		ldr	r3, [r3, #4]
 1613 0022 054A     		ldr	r2, .L72
1108:./Lib/Src/stm32f4xx_adc.c ****   }
 1614              		.loc 1 1108 14
 1615 0024 23F40053 		bic	r3, r3, #8192
 1616 0028 5360     		str	r3, [r2, #4]
 1617              	.L71:
 1618              		.loc 1 1110 1
ARM GAS  /tmp/ccIbLEgY.s 			page 49


 1619 002a 00BF     		nop
 1620 002c 0C37     		adds	r7, r7, #12
 1621              		.cfi_def_cfa_offset 4
 1622 002e BD46     		mov	sp, r7
 1623              		.cfi_def_cfa_register 13
 1624              		@ sp needed
 1625 0030 5DF8047B 		ldr	r7, [sp], #4
 1626              		.cfi_restore 7
 1627              		.cfi_def_cfa_offset 0
 1628 0034 7047     		bx	lr
 1629              	.L73:
 1630 0036 00BF     		.align	2
 1631              	.L72:
 1632 0038 00230140 		.word	1073816320
 1633              		.cfi_endproc
 1634              	.LFE145:
 1636              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1637              		.align	1
 1638              		.global	ADC_InjectedChannelConfig
 1639              		.syntax unified
 1640              		.thumb
 1641              		.thumb_func
 1643              	ADC_InjectedChannelConfig:
 1644              	.LFB146:
1111:./Lib/Src/stm32f4xx_adc.c **** /**
1112:./Lib/Src/stm32f4xx_adc.c ****   * @}
1113:./Lib/Src/stm32f4xx_adc.c ****   */
1114:./Lib/Src/stm32f4xx_adc.c **** 
1115:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1116:./Lib/Src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1117:./Lib/Src/stm32f4xx_adc.c ****  *
1118:./Lib/Src/stm32f4xx_adc.c **** @verbatim   
1119:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
1120:./Lib/Src/stm32f4xx_adc.c ****               ##### Injected channels Configuration functions #####
1121:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================  
1122:./Lib/Src/stm32f4xx_adc.c **** 
1123:./Lib/Src/stm32f4xx_adc.c ****     [..] This section provide functions allowing to configure the ADC Injected channels,
1124:./Lib/Src/stm32f4xx_adc.c ****          it is composed of 2 sub sections : 
1125:./Lib/Src/stm32f4xx_adc.c ****     
1126:./Lib/Src/stm32f4xx_adc.c ****       (#) Configuration functions for Injected channels: This subsection provides 
1127:./Lib/Src/stm32f4xx_adc.c ****           functions allowing to configure the ADC injected channels :    
1128:./Lib/Src/stm32f4xx_adc.c ****         (++) Configure the rank in the injected group sequencer for each channel
1129:./Lib/Src/stm32f4xx_adc.c ****         (++) Configure the sampling time for each channel    
1130:./Lib/Src/stm32f4xx_adc.c ****         (++) Activate the Auto injected Mode  
1131:./Lib/Src/stm32f4xx_adc.c ****         (++) Activate the Discontinuous Mode 
1132:./Lib/Src/stm32f4xx_adc.c ****         (++) scan mode activation  
1133:./Lib/Src/stm32f4xx_adc.c ****         (++) External/software trigger source   
1134:./Lib/Src/stm32f4xx_adc.c ****         (++) External trigger edge 
1135:./Lib/Src/stm32f4xx_adc.c ****         (++) injected channels sequencer.
1136:./Lib/Src/stm32f4xx_adc.c ****     
1137:./Lib/Src/stm32f4xx_adc.c ****       (#) Get the Specified Injected channel conversion data: This subsection 
1138:./Lib/Src/stm32f4xx_adc.c ****           provides an important function in the ADC peripheral since it returns the 
1139:./Lib/Src/stm32f4xx_adc.c ****           converted data of the specific injected channel.
1140:./Lib/Src/stm32f4xx_adc.c **** 
1141:./Lib/Src/stm32f4xx_adc.c **** @endverbatim
1142:./Lib/Src/stm32f4xx_adc.c ****   * @{
1143:./Lib/Src/stm32f4xx_adc.c ****   */ 
ARM GAS  /tmp/ccIbLEgY.s 			page 50


1144:./Lib/Src/stm32f4xx_adc.c **** /**
1145:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1146:./Lib/Src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1147:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1148:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1149:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1150:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1151:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1152:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1153:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1154:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1155:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1156:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1157:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1158:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1159:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1160:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1161:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1162:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1163:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1164:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1165:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1166:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1167:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1168:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1169:./Lib/Src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1170:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1171:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1172:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1173:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1174:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1175:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1176:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1177:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1178:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1179:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1180:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1181:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1182:./Lib/Src/stm32f4xx_adc.c ****   */
1183:./Lib/Src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1184:./Lib/Src/stm32f4xx_adc.c **** {
 1645              		.loc 1 1184 1
 1646              		.cfi_startproc
 1647              		@ args = 0, pretend = 0, frame = 24
 1648              		@ frame_needed = 1, uses_anonymous_args = 0
 1649              		@ link register save eliminated.
 1650 0000 80B4     		push	{r7}
 1651              		.cfi_def_cfa_offset 4
 1652              		.cfi_offset 7, -4
 1653 0002 87B0     		sub	sp, sp, #28
 1654              		.cfi_def_cfa_offset 32
 1655 0004 00AF     		add	r7, sp, #0
 1656              		.cfi_def_cfa_register 7
 1657 0006 7860     		str	r0, [r7, #4]
 1658 0008 0846     		mov	r0, r1
 1659 000a 1146     		mov	r1, r2
 1660 000c 1A46     		mov	r2, r3
ARM GAS  /tmp/ccIbLEgY.s 			page 51


 1661 000e 0346     		mov	r3, r0
 1662 0010 FB70     		strb	r3, [r7, #3]
 1663 0012 0B46     		mov	r3, r1
 1664 0014 BB70     		strb	r3, [r7, #2]
 1665 0016 1346     		mov	r3, r2
 1666 0018 7B70     		strb	r3, [r7, #1]
1185:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1667              		.loc 1 1185 12
 1668 001a 0023     		movs	r3, #0
 1669 001c 7B61     		str	r3, [r7, #20]
 1670              		.loc 1 1185 25
 1671 001e 0023     		movs	r3, #0
 1672 0020 3B61     		str	r3, [r7, #16]
 1673              		.loc 1 1185 38
 1674 0022 0023     		movs	r3, #0
 1675 0024 FB60     		str	r3, [r7, #12]
1186:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1187:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1188:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1189:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1190:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1191:./Lib/Src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1192:./Lib/Src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1676              		.loc 1 1192 6
 1677 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1678 0028 092B     		cmp	r3, #9
 1679 002a 23D9     		bls	.L75
1193:./Lib/Src/stm32f4xx_adc.c ****   {
1194:./Lib/Src/stm32f4xx_adc.c ****     /* Get the old register value */
1195:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1680              		.loc 1 1195 13
 1681 002c 7B68     		ldr	r3, [r7, #4]
 1682 002e DB68     		ldr	r3, [r3, #12]
 1683 0030 7B61     		str	r3, [r7, #20]
1196:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1197:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1684              		.loc 1 1197 48
 1685 0032 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1686 0034 A3F10A02 		sub	r2, r3, #10
 1687              		.loc 1 1197 34
 1688 0038 1346     		mov	r3, r2
 1689 003a 5B00     		lsls	r3, r3, #1
 1690 003c 1344     		add	r3, r3, r2
 1691              		.loc 1 1197 13
 1692 003e 0722     		movs	r2, #7
 1693 0040 02FA03F3 		lsl	r3, r2, r3
 1694 0044 3B61     		str	r3, [r7, #16]
1198:./Lib/Src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1199:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1695              		.loc 1 1199 16
 1696 0046 3B69     		ldr	r3, [r7, #16]
 1697 0048 DB43     		mvns	r3, r3
 1698              		.loc 1 1199 13
 1699 004a 7A69     		ldr	r2, [r7, #20]
 1700 004c 1340     		ands	r3, r3, r2
 1701 004e 7B61     		str	r3, [r7, #20]
1200:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
ARM GAS  /tmp/ccIbLEgY.s 			page 52


1201:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1702              		.loc 1 1201 15
 1703 0050 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1704              		.loc 1 1201 59
 1705 0052 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1706 0054 A3F10A02 		sub	r2, r3, #10
 1707              		.loc 1 1201 45
 1708 0058 1346     		mov	r3, r2
 1709 005a 5B00     		lsls	r3, r3, #1
 1710 005c 1344     		add	r3, r3, r2
 1711              		.loc 1 1201 13
 1712 005e 01FA03F3 		lsl	r3, r1, r3
 1713 0062 3B61     		str	r3, [r7, #16]
1202:./Lib/Src/stm32f4xx_adc.c ****     /* Set the new sample time */
1203:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1714              		.loc 1 1203 13
 1715 0064 7A69     		ldr	r2, [r7, #20]
 1716 0066 3B69     		ldr	r3, [r7, #16]
 1717 0068 1343     		orrs	r3, r3, r2
 1718 006a 7B61     		str	r3, [r7, #20]
1204:./Lib/Src/stm32f4xx_adc.c ****     /* Store the new register value */
1205:./Lib/Src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1719              		.loc 1 1205 17
 1720 006c 7B68     		ldr	r3, [r7, #4]
 1721 006e 7A69     		ldr	r2, [r7, #20]
 1722 0070 DA60     		str	r2, [r3, #12]
 1723 0072 1EE0     		b	.L76
 1724              	.L75:
1206:./Lib/Src/stm32f4xx_adc.c ****   }
1207:./Lib/Src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1208:./Lib/Src/stm32f4xx_adc.c ****   {
1209:./Lib/Src/stm32f4xx_adc.c ****     /* Get the old register value */
1210:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1725              		.loc 1 1210 13
 1726 0074 7B68     		ldr	r3, [r7, #4]
 1727 0076 1B69     		ldr	r3, [r3, #16]
 1728 0078 7B61     		str	r3, [r7, #20]
1211:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1212:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1729              		.loc 1 1212 35
 1730 007a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1731 007c 1346     		mov	r3, r2
 1732 007e 5B00     		lsls	r3, r3, #1
 1733 0080 1344     		add	r3, r3, r2
 1734              		.loc 1 1212 13
 1735 0082 0722     		movs	r2, #7
 1736 0084 02FA03F3 		lsl	r3, r2, r3
 1737 0088 3B61     		str	r3, [r7, #16]
1213:./Lib/Src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1214:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1738              		.loc 1 1214 16
 1739 008a 3B69     		ldr	r3, [r7, #16]
 1740 008c DB43     		mvns	r3, r3
 1741              		.loc 1 1214 13
 1742 008e 7A69     		ldr	r2, [r7, #20]
 1743 0090 1340     		ands	r3, r3, r2
 1744 0092 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccIbLEgY.s 			page 53


1215:./Lib/Src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1216:./Lib/Src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1745              		.loc 1 1216 15
 1746 0094 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1747              		.loc 1 1216 46
 1748 0096 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1749 0098 1346     		mov	r3, r2
 1750 009a 5B00     		lsls	r3, r3, #1
 1751 009c 1344     		add	r3, r3, r2
 1752              		.loc 1 1216 13
 1753 009e 01FA03F3 		lsl	r3, r1, r3
 1754 00a2 3B61     		str	r3, [r7, #16]
1217:./Lib/Src/stm32f4xx_adc.c ****     /* Set the new sample time */
1218:./Lib/Src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1755              		.loc 1 1218 13
 1756 00a4 7A69     		ldr	r2, [r7, #20]
 1757 00a6 3B69     		ldr	r3, [r7, #16]
 1758 00a8 1343     		orrs	r3, r3, r2
 1759 00aa 7B61     		str	r3, [r7, #20]
1219:./Lib/Src/stm32f4xx_adc.c ****     /* Store the new register value */
1220:./Lib/Src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1760              		.loc 1 1220 17
 1761 00ac 7B68     		ldr	r3, [r7, #4]
 1762 00ae 7A69     		ldr	r2, [r7, #20]
 1763 00b0 1A61     		str	r2, [r3, #16]
 1764              	.L76:
1221:./Lib/Src/stm32f4xx_adc.c ****   }
1222:./Lib/Src/stm32f4xx_adc.c ****   /* Rank configuration */
1223:./Lib/Src/stm32f4xx_adc.c ****   /* Get the old register value */
1224:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1765              		.loc 1 1224 11
 1766 00b2 7B68     		ldr	r3, [r7, #4]
 1767 00b4 9B6B     		ldr	r3, [r3, #56]
 1768 00b6 7B61     		str	r3, [r7, #20]
1225:./Lib/Src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1226:./Lib/Src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1769              		.loc 1 1226 37
 1770 00b8 7B69     		ldr	r3, [r7, #20]
 1771 00ba 1B0D     		lsrs	r3, r3, #20
 1772              		.loc 1 1226 11
 1773 00bc 03F00303 		and	r3, r3, #3
 1774 00c0 FB60     		str	r3, [r7, #12]
1227:./Lib/Src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1228:./Lib/Src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1775              		.loc 1 1228 55
 1776 00c2 FB68     		ldr	r3, [r7, #12]
 1777 00c4 DBB2     		uxtb	r3, r3
 1778 00c6 BA78     		ldrb	r2, [r7, #2]
 1779 00c8 D31A     		subs	r3, r2, r3
 1780 00ca DBB2     		uxtb	r3, r3
 1781              		.loc 1 1228 34
 1782 00cc 0233     		adds	r3, r3, #2
 1783 00ce DBB2     		uxtb	r3, r3
 1784 00d0 1A46     		mov	r2, r3
 1785              		.loc 1 1228 32
 1786 00d2 1346     		mov	r3, r2
 1787 00d4 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccIbLEgY.s 			page 54


 1788 00d6 1344     		add	r3, r3, r2
 1789              		.loc 1 1228 11
 1790 00d8 1F22     		movs	r2, #31
 1791 00da 02FA03F3 		lsl	r3, r2, r3
 1792 00de 3B61     		str	r3, [r7, #16]
1229:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1230:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1793              		.loc 1 1230 14
 1794 00e0 3B69     		ldr	r3, [r7, #16]
 1795 00e2 DB43     		mvns	r3, r3
 1796              		.loc 1 1230 11
 1797 00e4 7A69     		ldr	r2, [r7, #20]
 1798 00e6 1340     		ands	r3, r3, r2
 1799 00e8 7B61     		str	r3, [r7, #20]
1231:./Lib/Src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1232:./Lib/Src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1800              		.loc 1 1232 13
 1801 00ea FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1802              		.loc 1 1232 64
 1803 00ec FB68     		ldr	r3, [r7, #12]
 1804 00ee DBB2     		uxtb	r3, r3
 1805 00f0 B978     		ldrb	r1, [r7, #2]
 1806 00f2 CB1A     		subs	r3, r1, r3
 1807 00f4 DBB2     		uxtb	r3, r3
 1808              		.loc 1 1232 43
 1809 00f6 0233     		adds	r3, r3, #2
 1810 00f8 DBB2     		uxtb	r3, r3
 1811 00fa 1946     		mov	r1, r3
 1812              		.loc 1 1232 41
 1813 00fc 0B46     		mov	r3, r1
 1814 00fe 9B00     		lsls	r3, r3, #2
 1815 0100 0B44     		add	r3, r3, r1
 1816              		.loc 1 1232 11
 1817 0102 02FA03F3 		lsl	r3, r2, r3
 1818 0106 3B61     		str	r3, [r7, #16]
1233:./Lib/Src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1234:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1819              		.loc 1 1234 11
 1820 0108 7A69     		ldr	r2, [r7, #20]
 1821 010a 3B69     		ldr	r3, [r7, #16]
 1822 010c 1343     		orrs	r3, r3, r2
 1823 010e 7B61     		str	r3, [r7, #20]
1235:./Lib/Src/stm32f4xx_adc.c ****   /* Store the new register value */
1236:./Lib/Src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1824              		.loc 1 1236 14
 1825 0110 7B68     		ldr	r3, [r7, #4]
 1826 0112 7A69     		ldr	r2, [r7, #20]
 1827 0114 9A63     		str	r2, [r3, #56]
1237:./Lib/Src/stm32f4xx_adc.c **** }
 1828              		.loc 1 1237 1
 1829 0116 00BF     		nop
 1830 0118 1C37     		adds	r7, r7, #28
 1831              		.cfi_def_cfa_offset 4
 1832 011a BD46     		mov	sp, r7
 1833              		.cfi_def_cfa_register 13
 1834              		@ sp needed
 1835 011c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccIbLEgY.s 			page 55


 1836              		.cfi_restore 7
 1837              		.cfi_def_cfa_offset 0
 1838 0120 7047     		bx	lr
 1839              		.cfi_endproc
 1840              	.LFE146:
 1842              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1843              		.align	1
 1844              		.global	ADC_InjectedSequencerLengthConfig
 1845              		.syntax unified
 1846              		.thumb
 1847              		.thumb_func
 1849              	ADC_InjectedSequencerLengthConfig:
 1850              	.LFB147:
1238:./Lib/Src/stm32f4xx_adc.c **** 
1239:./Lib/Src/stm32f4xx_adc.c **** /**
1240:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1241:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1242:./Lib/Src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1243:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1244:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1245:./Lib/Src/stm32f4xx_adc.c ****   */
1246:./Lib/Src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1247:./Lib/Src/stm32f4xx_adc.c **** {
 1851              		.loc 1 1247 1
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 16
 1854              		@ frame_needed = 1, uses_anonymous_args = 0
 1855              		@ link register save eliminated.
 1856 0000 80B4     		push	{r7}
 1857              		.cfi_def_cfa_offset 4
 1858              		.cfi_offset 7, -4
 1859 0002 85B0     		sub	sp, sp, #20
 1860              		.cfi_def_cfa_offset 24
 1861 0004 00AF     		add	r7, sp, #0
 1862              		.cfi_def_cfa_register 7
 1863 0006 7860     		str	r0, [r7, #4]
 1864 0008 0B46     		mov	r3, r1
 1865 000a FB70     		strb	r3, [r7, #3]
1248:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1866              		.loc 1 1248 12
 1867 000c 0023     		movs	r3, #0
 1868 000e FB60     		str	r3, [r7, #12]
1249:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1869              		.loc 1 1249 12
 1870 0010 0023     		movs	r3, #0
 1871 0012 BB60     		str	r3, [r7, #8]
1250:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1251:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1252:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1253:./Lib/Src/stm32f4xx_adc.c ****   
1254:./Lib/Src/stm32f4xx_adc.c ****   /* Get the old register value */
1255:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1872              		.loc 1 1255 11
 1873 0014 7B68     		ldr	r3, [r7, #4]
 1874 0016 9B6B     		ldr	r3, [r3, #56]
 1875 0018 FB60     		str	r3, [r7, #12]
1256:./Lib/Src/stm32f4xx_adc.c ****   
ARM GAS  /tmp/ccIbLEgY.s 			page 56


1257:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1258:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1876              		.loc 1 1258 11
 1877 001a FB68     		ldr	r3, [r7, #12]
 1878 001c 23F44013 		bic	r3, r3, #3145728
 1879 0020 FB60     		str	r3, [r7, #12]
1259:./Lib/Src/stm32f4xx_adc.c ****   
1260:./Lib/Src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1261:./Lib/Src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1880              		.loc 1 1261 20
 1881 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1882 0024 013B     		subs	r3, r3, #1
 1883              		.loc 1 1261 11
 1884 0026 BB60     		str	r3, [r7, #8]
1262:./Lib/Src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1885              		.loc 1 1262 22
 1886 0028 BB68     		ldr	r3, [r7, #8]
 1887 002a 1B05     		lsls	r3, r3, #20
 1888              		.loc 1 1262 11
 1889 002c FA68     		ldr	r2, [r7, #12]
 1890 002e 1343     		orrs	r3, r3, r2
 1891 0030 FB60     		str	r3, [r7, #12]
1263:./Lib/Src/stm32f4xx_adc.c ****   
1264:./Lib/Src/stm32f4xx_adc.c ****   /* Store the new register value */
1265:./Lib/Src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1892              		.loc 1 1265 14
 1893 0032 7B68     		ldr	r3, [r7, #4]
 1894 0034 FA68     		ldr	r2, [r7, #12]
 1895 0036 9A63     		str	r2, [r3, #56]
1266:./Lib/Src/stm32f4xx_adc.c **** }
 1896              		.loc 1 1266 1
 1897 0038 00BF     		nop
 1898 003a 1437     		adds	r7, r7, #20
 1899              		.cfi_def_cfa_offset 4
 1900 003c BD46     		mov	sp, r7
 1901              		.cfi_def_cfa_register 13
 1902              		@ sp needed
 1903 003e 5DF8047B 		ldr	r7, [sp], #4
 1904              		.cfi_restore 7
 1905              		.cfi_def_cfa_offset 0
 1906 0042 7047     		bx	lr
 1907              		.cfi_endproc
 1908              	.LFE147:
 1910              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1911              		.align	1
 1912              		.global	ADC_SetInjectedOffset
 1913              		.syntax unified
 1914              		.thumb
 1915              		.thumb_func
 1917              	ADC_SetInjectedOffset:
 1918              	.LFB148:
1267:./Lib/Src/stm32f4xx_adc.c **** 
1268:./Lib/Src/stm32f4xx_adc.c **** /**
1269:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1270:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1271:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1272:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
ARM GAS  /tmp/ccIbLEgY.s 			page 57


1273:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1274:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1275:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1276:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1277:./Lib/Src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1278:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1279:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1280:./Lib/Src/stm32f4xx_adc.c ****   */
1281:./Lib/Src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1282:./Lib/Src/stm32f4xx_adc.c **** {
 1919              		.loc 1 1282 1
 1920              		.cfi_startproc
 1921              		@ args = 0, pretend = 0, frame = 16
 1922              		@ frame_needed = 1, uses_anonymous_args = 0
 1923              		@ link register save eliminated.
 1924 0000 80B4     		push	{r7}
 1925              		.cfi_def_cfa_offset 4
 1926              		.cfi_offset 7, -4
 1927 0002 85B0     		sub	sp, sp, #20
 1928              		.cfi_def_cfa_offset 24
 1929 0004 00AF     		add	r7, sp, #0
 1930              		.cfi_def_cfa_register 7
 1931 0006 7860     		str	r0, [r7, #4]
 1932 0008 0B46     		mov	r3, r1
 1933 000a FB70     		strb	r3, [r7, #3]
 1934 000c 1346     		mov	r3, r2	@ movhi
 1935 000e 3B80     		strh	r3, [r7]	@ movhi
1283:./Lib/Src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1936              		.loc 1 1283 19
 1937 0010 0023     		movs	r3, #0
 1938 0012 FB60     		str	r3, [r7, #12]
1284:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1285:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1286:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1287:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1288:./Lib/Src/stm32f4xx_adc.c ****   
1289:./Lib/Src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1939              		.loc 1 1289 9
 1940 0014 7B68     		ldr	r3, [r7, #4]
 1941              		.loc 1 1289 7
 1942 0016 FB60     		str	r3, [r7, #12]
1290:./Lib/Src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1943              		.loc 1 1290 7
 1944 0018 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1945 001a FB68     		ldr	r3, [r7, #12]
 1946 001c 1344     		add	r3, r3, r2
 1947 001e FB60     		str	r3, [r7, #12]
1291:./Lib/Src/stm32f4xx_adc.c ****   
1292:./Lib/Src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1293:./Lib/Src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1948              		.loc 1 1293 3
 1949 0020 FB68     		ldr	r3, [r7, #12]
 1950 0022 1A46     		mov	r2, r3
 1951              		.loc 1 1293 27
 1952 0024 3B88     		ldrh	r3, [r7]
 1953              		.loc 1 1293 25
 1954 0026 1360     		str	r3, [r2]
ARM GAS  /tmp/ccIbLEgY.s 			page 58


1294:./Lib/Src/stm32f4xx_adc.c **** }
 1955              		.loc 1 1294 1
 1956 0028 00BF     		nop
 1957 002a 1437     		adds	r7, r7, #20
 1958              		.cfi_def_cfa_offset 4
 1959 002c BD46     		mov	sp, r7
 1960              		.cfi_def_cfa_register 13
 1961              		@ sp needed
 1962 002e 5DF8047B 		ldr	r7, [sp], #4
 1963              		.cfi_restore 7
 1964              		.cfi_def_cfa_offset 0
 1965 0032 7047     		bx	lr
 1966              		.cfi_endproc
 1967              	.LFE148:
 1969              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1970              		.align	1
 1971              		.global	ADC_ExternalTrigInjectedConvConfig
 1972              		.syntax unified
 1973              		.thumb
 1974              		.thumb_func
 1976              	ADC_ExternalTrigInjectedConvConfig:
 1977              	.LFB149:
1295:./Lib/Src/stm32f4xx_adc.c **** 
1296:./Lib/Src/stm32f4xx_adc.c ****  /**
1297:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1298:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1299:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1300:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1301:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1302:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1303:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1304:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1305:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1306:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1307:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1308:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1309:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1310:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1311:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1312:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1313:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1314:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1315:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1316:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1317:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1318:./Lib/Src/stm32f4xx_adc.c ****   */
1319:./Lib/Src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1320:./Lib/Src/stm32f4xx_adc.c **** {
 1978              		.loc 1 1320 1
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 16
 1981              		@ frame_needed = 1, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
 1983 0000 80B4     		push	{r7}
 1984              		.cfi_def_cfa_offset 4
 1985              		.cfi_offset 7, -4
 1986 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccIbLEgY.s 			page 59


 1987              		.cfi_def_cfa_offset 24
 1988 0004 00AF     		add	r7, sp, #0
 1989              		.cfi_def_cfa_register 7
 1990 0006 7860     		str	r0, [r7, #4]
 1991 0008 3960     		str	r1, [r7]
1321:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1992              		.loc 1 1321 12
 1993 000a 0023     		movs	r3, #0
 1994 000c FB60     		str	r3, [r7, #12]
1322:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1323:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1324:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1325:./Lib/Src/stm32f4xx_adc.c ****   
1326:./Lib/Src/stm32f4xx_adc.c ****   /* Get the old register value */
1327:./Lib/Src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1995              		.loc 1 1327 10
 1996 000e 7B68     		ldr	r3, [r7, #4]
 1997 0010 9B68     		ldr	r3, [r3, #8]
 1998 0012 FB60     		str	r3, [r7, #12]
1328:./Lib/Src/stm32f4xx_adc.c ****   
1329:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1330:./Lib/Src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1999              		.loc 1 1330 10
 2000 0014 FB68     		ldr	r3, [r7, #12]
 2001 0016 23F47023 		bic	r3, r3, #983040
 2002 001a FB60     		str	r3, [r7, #12]
1331:./Lib/Src/stm32f4xx_adc.c ****   
1332:./Lib/Src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1333:./Lib/Src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 2003              		.loc 1 1333 10
 2004 001c FA68     		ldr	r2, [r7, #12]
 2005 001e 3B68     		ldr	r3, [r7]
 2006 0020 1343     		orrs	r3, r3, r2
 2007 0022 FB60     		str	r3, [r7, #12]
1334:./Lib/Src/stm32f4xx_adc.c ****   
1335:./Lib/Src/stm32f4xx_adc.c ****   /* Store the new register value */
1336:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 2008              		.loc 1 1336 13
 2009 0024 7B68     		ldr	r3, [r7, #4]
 2010 0026 FA68     		ldr	r2, [r7, #12]
 2011 0028 9A60     		str	r2, [r3, #8]
1337:./Lib/Src/stm32f4xx_adc.c **** }
 2012              		.loc 1 1337 1
 2013 002a 00BF     		nop
 2014 002c 1437     		adds	r7, r7, #20
 2015              		.cfi_def_cfa_offset 4
 2016 002e BD46     		mov	sp, r7
 2017              		.cfi_def_cfa_register 13
 2018              		@ sp needed
 2019 0030 5DF8047B 		ldr	r7, [sp], #4
 2020              		.cfi_restore 7
 2021              		.cfi_def_cfa_offset 0
 2022 0034 7047     		bx	lr
 2023              		.cfi_endproc
 2024              	.LFE149:
 2026              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 2027              		.align	1
ARM GAS  /tmp/ccIbLEgY.s 			page 60


 2028              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 2029              		.syntax unified
 2030              		.thumb
 2031              		.thumb_func
 2033              	ADC_ExternalTrigInjectedConvEdgeConfig:
 2034              	.LFB150:
1338:./Lib/Src/stm32f4xx_adc.c **** 
1339:./Lib/Src/stm32f4xx_adc.c **** /**
1340:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1341:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1342:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1343:./Lib/Src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1344:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1345:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1346:./Lib/Src/stm32f4xx_adc.c ****   *                                                     injected conversion
1347:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1348:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1349:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1350:./Lib/Src/stm32f4xx_adc.c ****   *                                                               and falling edge
1351:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1352:./Lib/Src/stm32f4xx_adc.c ****   */
1353:./Lib/Src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1354:./Lib/Src/stm32f4xx_adc.c **** {
 2035              		.loc 1 1354 1
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 16
 2038              		@ frame_needed = 1, uses_anonymous_args = 0
 2039              		@ link register save eliminated.
 2040 0000 80B4     		push	{r7}
 2041              		.cfi_def_cfa_offset 4
 2042              		.cfi_offset 7, -4
 2043 0002 85B0     		sub	sp, sp, #20
 2044              		.cfi_def_cfa_offset 24
 2045 0004 00AF     		add	r7, sp, #0
 2046              		.cfi_def_cfa_register 7
 2047 0006 7860     		str	r0, [r7, #4]
 2048 0008 3960     		str	r1, [r7]
1355:./Lib/Src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 2049              		.loc 1 1355 12
 2050 000a 0023     		movs	r3, #0
 2051 000c FB60     		str	r3, [r7, #12]
1356:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1357:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1358:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1359:./Lib/Src/stm32f4xx_adc.c ****   /* Get the old register value */
1360:./Lib/Src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 2052              		.loc 1 1360 10
 2053 000e 7B68     		ldr	r3, [r7, #4]
 2054 0010 9B68     		ldr	r3, [r3, #8]
 2055 0012 FB60     		str	r3, [r7, #12]
1361:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1362:./Lib/Src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 2056              		.loc 1 1362 10
 2057 0014 FB68     		ldr	r3, [r7, #12]
 2058 0016 23F44013 		bic	r3, r3, #3145728
 2059 001a FB60     		str	r3, [r7, #12]
1363:./Lib/Src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
ARM GAS  /tmp/ccIbLEgY.s 			page 61


1364:./Lib/Src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 2060              		.loc 1 1364 10
 2061 001c FA68     		ldr	r2, [r7, #12]
 2062 001e 3B68     		ldr	r3, [r7]
 2063 0020 1343     		orrs	r3, r3, r2
 2064 0022 FB60     		str	r3, [r7, #12]
1365:./Lib/Src/stm32f4xx_adc.c ****   /* Store the new register value */
1366:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 2065              		.loc 1 1366 13
 2066 0024 7B68     		ldr	r3, [r7, #4]
 2067 0026 FA68     		ldr	r2, [r7, #12]
 2068 0028 9A60     		str	r2, [r3, #8]
1367:./Lib/Src/stm32f4xx_adc.c **** }
 2069              		.loc 1 1367 1
 2070 002a 00BF     		nop
 2071 002c 1437     		adds	r7, r7, #20
 2072              		.cfi_def_cfa_offset 4
 2073 002e BD46     		mov	sp, r7
 2074              		.cfi_def_cfa_register 13
 2075              		@ sp needed
 2076 0030 5DF8047B 		ldr	r7, [sp], #4
 2077              		.cfi_restore 7
 2078              		.cfi_def_cfa_offset 0
 2079 0034 7047     		bx	lr
 2080              		.cfi_endproc
 2081              	.LFE150:
 2083              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 2084              		.align	1
 2085              		.global	ADC_SoftwareStartInjectedConv
 2086              		.syntax unified
 2087              		.thumb
 2088              		.thumb_func
 2090              	ADC_SoftwareStartInjectedConv:
 2091              	.LFB151:
1368:./Lib/Src/stm32f4xx_adc.c **** 
1369:./Lib/Src/stm32f4xx_adc.c **** /**
1370:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1371:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1372:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1373:./Lib/Src/stm32f4xx_adc.c ****   */
1374:./Lib/Src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1375:./Lib/Src/stm32f4xx_adc.c **** {
 2092              		.loc 1 1375 1
 2093              		.cfi_startproc
 2094              		@ args = 0, pretend = 0, frame = 8
 2095              		@ frame_needed = 1, uses_anonymous_args = 0
 2096              		@ link register save eliminated.
 2097 0000 80B4     		push	{r7}
 2098              		.cfi_def_cfa_offset 4
 2099              		.cfi_offset 7, -4
 2100 0002 83B0     		sub	sp, sp, #12
 2101              		.cfi_def_cfa_offset 16
 2102 0004 00AF     		add	r7, sp, #0
 2103              		.cfi_def_cfa_register 7
 2104 0006 7860     		str	r0, [r7, #4]
1376:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1377:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
ARM GAS  /tmp/ccIbLEgY.s 			page 62


1378:./Lib/Src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1379:./Lib/Src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 2105              		.loc 1 1379 7
 2106 0008 7B68     		ldr	r3, [r7, #4]
 2107 000a 9B68     		ldr	r3, [r3, #8]
 2108              		.loc 1 1379 13
 2109 000c 43F48002 		orr	r2, r3, #4194304
 2110 0010 7B68     		ldr	r3, [r7, #4]
 2111 0012 9A60     		str	r2, [r3, #8]
1380:./Lib/Src/stm32f4xx_adc.c **** }
 2112              		.loc 1 1380 1
 2113 0014 00BF     		nop
 2114 0016 0C37     		adds	r7, r7, #12
 2115              		.cfi_def_cfa_offset 4
 2116 0018 BD46     		mov	sp, r7
 2117              		.cfi_def_cfa_register 13
 2118              		@ sp needed
 2119 001a 5DF8047B 		ldr	r7, [sp], #4
 2120              		.cfi_restore 7
 2121              		.cfi_def_cfa_offset 0
 2122 001e 7047     		bx	lr
 2123              		.cfi_endproc
 2124              	.LFE151:
 2126              		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 2127              		.align	1
 2128              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 2129              		.syntax unified
 2130              		.thumb
 2131              		.thumb_func
 2133              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 2134              	.LFB152:
1381:./Lib/Src/stm32f4xx_adc.c **** 
1382:./Lib/Src/stm32f4xx_adc.c **** /**
1383:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1384:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1385:./Lib/Src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1386:./Lib/Src/stm32f4xx_adc.c ****   */
1387:./Lib/Src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1388:./Lib/Src/stm32f4xx_adc.c **** {
 2135              		.loc 1 1388 1
 2136              		.cfi_startproc
 2137              		@ args = 0, pretend = 0, frame = 16
 2138              		@ frame_needed = 1, uses_anonymous_args = 0
 2139              		@ link register save eliminated.
 2140 0000 80B4     		push	{r7}
 2141              		.cfi_def_cfa_offset 4
 2142              		.cfi_offset 7, -4
 2143 0002 85B0     		sub	sp, sp, #20
 2144              		.cfi_def_cfa_offset 24
 2145 0004 00AF     		add	r7, sp, #0
 2146              		.cfi_def_cfa_register 7
 2147 0006 7860     		str	r0, [r7, #4]
1389:./Lib/Src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2148              		.loc 1 1389 14
 2149 0008 0023     		movs	r3, #0
 2150 000a FB73     		strb	r3, [r7, #15]
1390:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccIbLEgY.s 			page 63


1391:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1392:./Lib/Src/stm32f4xx_adc.c ****   
1393:./Lib/Src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1394:./Lib/Src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 2151              		.loc 1 1394 12
 2152 000c 7B68     		ldr	r3, [r7, #4]
 2153 000e 9B68     		ldr	r3, [r3, #8]
 2154              		.loc 1 1394 18
 2155 0010 03F48003 		and	r3, r3, #4194304
 2156              		.loc 1 1394 6
 2157 0014 002B     		cmp	r3, #0
 2158 0016 02D0     		beq	.L83
1395:./Lib/Src/stm32f4xx_adc.c ****   {
1396:./Lib/Src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1397:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = SET;
 2159              		.loc 1 1397 15
 2160 0018 0123     		movs	r3, #1
 2161 001a FB73     		strb	r3, [r7, #15]
 2162 001c 01E0     		b	.L84
 2163              	.L83:
1398:./Lib/Src/stm32f4xx_adc.c ****   }
1399:./Lib/Src/stm32f4xx_adc.c ****   else
1400:./Lib/Src/stm32f4xx_adc.c ****   {
1401:./Lib/Src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1402:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2164              		.loc 1 1402 15
 2165 001e 0023     		movs	r3, #0
 2166 0020 FB73     		strb	r3, [r7, #15]
 2167              	.L84:
1403:./Lib/Src/stm32f4xx_adc.c ****   }
1404:./Lib/Src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1405:./Lib/Src/stm32f4xx_adc.c ****   return  bitstatus;
 2168              		.loc 1 1405 11
 2169 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1406:./Lib/Src/stm32f4xx_adc.c **** }
 2170              		.loc 1 1406 1
 2171 0024 1846     		mov	r0, r3
 2172 0026 1437     		adds	r7, r7, #20
 2173              		.cfi_def_cfa_offset 4
 2174 0028 BD46     		mov	sp, r7
 2175              		.cfi_def_cfa_register 13
 2176              		@ sp needed
 2177 002a 5DF8047B 		ldr	r7, [sp], #4
 2178              		.cfi_restore 7
 2179              		.cfi_def_cfa_offset 0
 2180 002e 7047     		bx	lr
 2181              		.cfi_endproc
 2182              	.LFE152:
 2184              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 2185              		.align	1
 2186              		.global	ADC_AutoInjectedConvCmd
 2187              		.syntax unified
 2188              		.thumb
 2189              		.thumb_func
 2191              	ADC_AutoInjectedConvCmd:
 2192              	.LFB153:
1407:./Lib/Src/stm32f4xx_adc.c **** 
ARM GAS  /tmp/ccIbLEgY.s 			page 64


1408:./Lib/Src/stm32f4xx_adc.c **** /**
1409:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1410:./Lib/Src/stm32f4xx_adc.c ****   *         conversion after regular one.
1411:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1412:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1413:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1414:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1415:./Lib/Src/stm32f4xx_adc.c ****   */
1416:./Lib/Src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1417:./Lib/Src/stm32f4xx_adc.c **** {
 2193              		.loc 1 1417 1
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 8
 2196              		@ frame_needed = 1, uses_anonymous_args = 0
 2197              		@ link register save eliminated.
 2198 0000 80B4     		push	{r7}
 2199              		.cfi_def_cfa_offset 4
 2200              		.cfi_offset 7, -4
 2201 0002 83B0     		sub	sp, sp, #12
 2202              		.cfi_def_cfa_offset 16
 2203 0004 00AF     		add	r7, sp, #0
 2204              		.cfi_def_cfa_register 7
 2205 0006 7860     		str	r0, [r7, #4]
 2206 0008 0B46     		mov	r3, r1
 2207 000a FB70     		strb	r3, [r7, #3]
1418:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1419:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1420:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1421:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2208              		.loc 1 1421 6
 2209 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2210 000e 002B     		cmp	r3, #0
 2211 0010 06D0     		beq	.L87
1422:./Lib/Src/stm32f4xx_adc.c ****   {
1423:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1424:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 2212              		.loc 1 1424 9
 2213 0012 7B68     		ldr	r3, [r7, #4]
 2214 0014 5B68     		ldr	r3, [r3, #4]
 2215              		.loc 1 1424 15
 2216 0016 43F48062 		orr	r2, r3, #1024
 2217 001a 7B68     		ldr	r3, [r7, #4]
 2218 001c 5A60     		str	r2, [r3, #4]
1425:./Lib/Src/stm32f4xx_adc.c ****   }
1426:./Lib/Src/stm32f4xx_adc.c ****   else
1427:./Lib/Src/stm32f4xx_adc.c ****   {
1428:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1429:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
1430:./Lib/Src/stm32f4xx_adc.c ****   }
1431:./Lib/Src/stm32f4xx_adc.c **** }
 2219              		.loc 1 1431 1
 2220 001e 05E0     		b	.L89
 2221              	.L87:
1429:./Lib/Src/stm32f4xx_adc.c ****   }
 2222              		.loc 1 1429 9
 2223 0020 7B68     		ldr	r3, [r7, #4]
 2224 0022 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccIbLEgY.s 			page 65


1429:./Lib/Src/stm32f4xx_adc.c ****   }
 2225              		.loc 1 1429 15
 2226 0024 23F48062 		bic	r2, r3, #1024
 2227 0028 7B68     		ldr	r3, [r7, #4]
 2228 002a 5A60     		str	r2, [r3, #4]
 2229              	.L89:
 2230              		.loc 1 1431 1
 2231 002c 00BF     		nop
 2232 002e 0C37     		adds	r7, r7, #12
 2233              		.cfi_def_cfa_offset 4
 2234 0030 BD46     		mov	sp, r7
 2235              		.cfi_def_cfa_register 13
 2236              		@ sp needed
 2237 0032 5DF8047B 		ldr	r7, [sp], #4
 2238              		.cfi_restore 7
 2239              		.cfi_def_cfa_offset 0
 2240 0036 7047     		bx	lr
 2241              		.cfi_endproc
 2242              	.LFE153:
 2244              		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 2245              		.align	1
 2246              		.global	ADC_InjectedDiscModeCmd
 2247              		.syntax unified
 2248              		.thumb
 2249              		.thumb_func
 2251              	ADC_InjectedDiscModeCmd:
 2252              	.LFB154:
1432:./Lib/Src/stm32f4xx_adc.c **** 
1433:./Lib/Src/stm32f4xx_adc.c **** /**
1434:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1435:./Lib/Src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1436:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1437:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1438:./Lib/Src/stm32f4xx_adc.c ****   *         group channel.
1439:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1440:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1441:./Lib/Src/stm32f4xx_adc.c ****   */
1442:./Lib/Src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1443:./Lib/Src/stm32f4xx_adc.c **** {
 2253              		.loc 1 1443 1
 2254              		.cfi_startproc
 2255              		@ args = 0, pretend = 0, frame = 8
 2256              		@ frame_needed = 1, uses_anonymous_args = 0
 2257              		@ link register save eliminated.
 2258 0000 80B4     		push	{r7}
 2259              		.cfi_def_cfa_offset 4
 2260              		.cfi_offset 7, -4
 2261 0002 83B0     		sub	sp, sp, #12
 2262              		.cfi_def_cfa_offset 16
 2263 0004 00AF     		add	r7, sp, #0
 2264              		.cfi_def_cfa_register 7
 2265 0006 7860     		str	r0, [r7, #4]
 2266 0008 0B46     		mov	r3, r1
 2267 000a FB70     		strb	r3, [r7, #3]
1444:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1445:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1446:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/ccIbLEgY.s 			page 66


1447:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2268              		.loc 1 1447 6
 2269 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2270 000e 002B     		cmp	r3, #0
 2271 0010 06D0     		beq	.L91
1448:./Lib/Src/stm32f4xx_adc.c ****   {
1449:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1450:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2272              		.loc 1 1450 9
 2273 0012 7B68     		ldr	r3, [r7, #4]
 2274 0014 5B68     		ldr	r3, [r3, #4]
 2275              		.loc 1 1450 15
 2276 0016 43F48052 		orr	r2, r3, #4096
 2277 001a 7B68     		ldr	r3, [r7, #4]
 2278 001c 5A60     		str	r2, [r3, #4]
1451:./Lib/Src/stm32f4xx_adc.c ****   }
1452:./Lib/Src/stm32f4xx_adc.c ****   else
1453:./Lib/Src/stm32f4xx_adc.c ****   {
1454:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1455:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
1456:./Lib/Src/stm32f4xx_adc.c ****   }
1457:./Lib/Src/stm32f4xx_adc.c **** }
 2279              		.loc 1 1457 1
 2280 001e 05E0     		b	.L93
 2281              	.L91:
1455:./Lib/Src/stm32f4xx_adc.c ****   }
 2282              		.loc 1 1455 9
 2283 0020 7B68     		ldr	r3, [r7, #4]
 2284 0022 5B68     		ldr	r3, [r3, #4]
1455:./Lib/Src/stm32f4xx_adc.c ****   }
 2285              		.loc 1 1455 15
 2286 0024 23F48052 		bic	r2, r3, #4096
 2287 0028 7B68     		ldr	r3, [r7, #4]
 2288 002a 5A60     		str	r2, [r3, #4]
 2289              	.L93:
 2290              		.loc 1 1457 1
 2291 002c 00BF     		nop
 2292 002e 0C37     		adds	r7, r7, #12
 2293              		.cfi_def_cfa_offset 4
 2294 0030 BD46     		mov	sp, r7
 2295              		.cfi_def_cfa_register 13
 2296              		@ sp needed
 2297 0032 5DF8047B 		ldr	r7, [sp], #4
 2298              		.cfi_restore 7
 2299              		.cfi_def_cfa_offset 0
 2300 0036 7047     		bx	lr
 2301              		.cfi_endproc
 2302              	.LFE154:
 2304              		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 2305              		.align	1
 2306              		.global	ADC_GetInjectedConversionValue
 2307              		.syntax unified
 2308              		.thumb
 2309              		.thumb_func
 2311              	ADC_GetInjectedConversionValue:
 2312              	.LFB155:
1458:./Lib/Src/stm32f4xx_adc.c **** 
ARM GAS  /tmp/ccIbLEgY.s 			page 67


1459:./Lib/Src/stm32f4xx_adc.c **** /**
1460:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1461:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1462:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1463:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1464:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1465:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1466:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1467:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1468:./Lib/Src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1469:./Lib/Src/stm32f4xx_adc.c ****   */
1470:./Lib/Src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1471:./Lib/Src/stm32f4xx_adc.c **** {
 2313              		.loc 1 1471 1
 2314              		.cfi_startproc
 2315              		@ args = 0, pretend = 0, frame = 16
 2316              		@ frame_needed = 1, uses_anonymous_args = 0
 2317              		@ link register save eliminated.
 2318 0000 80B4     		push	{r7}
 2319              		.cfi_def_cfa_offset 4
 2320              		.cfi_offset 7, -4
 2321 0002 85B0     		sub	sp, sp, #20
 2322              		.cfi_def_cfa_offset 24
 2323 0004 00AF     		add	r7, sp, #0
 2324              		.cfi_def_cfa_register 7
 2325 0006 7860     		str	r0, [r7, #4]
 2326 0008 0B46     		mov	r3, r1
 2327 000a FB70     		strb	r3, [r7, #3]
1472:./Lib/Src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2328              		.loc 1 1472 17
 2329 000c 0023     		movs	r3, #0
 2330 000e FB60     		str	r3, [r7, #12]
1473:./Lib/Src/stm32f4xx_adc.c ****   
1474:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1475:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1476:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1477:./Lib/Src/stm32f4xx_adc.c **** 
1478:./Lib/Src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2331              		.loc 1 1478 9
 2332 0010 7B68     		ldr	r3, [r7, #4]
 2333              		.loc 1 1478 7
 2334 0012 FB60     		str	r3, [r7, #12]
1479:./Lib/Src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2335              		.loc 1 1479 7
 2336 0014 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2337 0016 FB68     		ldr	r3, [r7, #12]
 2338 0018 1344     		add	r3, r3, r2
 2339 001a 2833     		adds	r3, r3, #40
 2340 001c FB60     		str	r3, [r7, #12]
1480:./Lib/Src/stm32f4xx_adc.c ****   
1481:./Lib/Src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1482:./Lib/Src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2341              		.loc 1 1482 23
 2342 001e FB68     		ldr	r3, [r7, #12]
 2343              		.loc 1 1482 22
 2344 0020 1B68     		ldr	r3, [r3]
 2345              		.loc 1 1482 10
ARM GAS  /tmp/ccIbLEgY.s 			page 68


 2346 0022 9BB2     		uxth	r3, r3
1483:./Lib/Src/stm32f4xx_adc.c **** }
 2347              		.loc 1 1483 1
 2348 0024 1846     		mov	r0, r3
 2349 0026 1437     		adds	r7, r7, #20
 2350              		.cfi_def_cfa_offset 4
 2351 0028 BD46     		mov	sp, r7
 2352              		.cfi_def_cfa_register 13
 2353              		@ sp needed
 2354 002a 5DF8047B 		ldr	r7, [sp], #4
 2355              		.cfi_restore 7
 2356              		.cfi_def_cfa_offset 0
 2357 002e 7047     		bx	lr
 2358              		.cfi_endproc
 2359              	.LFE155:
 2361              		.section	.text.ADC_ITConfig,"ax",%progbits
 2362              		.align	1
 2363              		.global	ADC_ITConfig
 2364              		.syntax unified
 2365              		.thumb
 2366              		.thumb_func
 2368              	ADC_ITConfig:
 2369              	.LFB156:
1484:./Lib/Src/stm32f4xx_adc.c **** /**
1485:./Lib/Src/stm32f4xx_adc.c ****   * @}
1486:./Lib/Src/stm32f4xx_adc.c ****   */
1487:./Lib/Src/stm32f4xx_adc.c **** 
1488:./Lib/Src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1489:./Lib/Src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1490:./Lib/Src/stm32f4xx_adc.c ****  *
1491:./Lib/Src/stm32f4xx_adc.c **** @verbatim   
1492:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================
1493:./Lib/Src/stm32f4xx_adc.c ****             ##### Interrupts and flags management functions #####
1494:./Lib/Src/stm32f4xx_adc.c ****  ===============================================================================  
1495:./Lib/Src/stm32f4xx_adc.c **** 
1496:./Lib/Src/stm32f4xx_adc.c ****     [..] This section provides functions allowing to configure the ADC Interrupts 
1497:./Lib/Src/stm32f4xx_adc.c ****          and to get the status and clear flags and Interrupts pending bits.
1498:./Lib/Src/stm32f4xx_adc.c ****   
1499:./Lib/Src/stm32f4xx_adc.c ****     [..] Each ADC provides 4 Interrupts sources and 6 Flags which can be divided
1500:./Lib/Src/stm32f4xx_adc.c ****         into 3 groups:
1501:./Lib/Src/stm32f4xx_adc.c ****   
1502:./Lib/Src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC regular channels ***
1503:./Lib/Src/stm32f4xx_adc.c ****   =====================================================
1504:./Lib/Src/stm32f4xx_adc.c ****     [..]
1505:./Lib/Src/stm32f4xx_adc.c ****       (+) Flags :
1506:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1507:./Lib/Src/stm32f4xx_adc.c **** 
1508:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate 
1509:./Lib/Src/stm32f4xx_adc.c ****              (depending on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() )
1510:./Lib/Src/stm32f4xx_adc.c ****              the end of:
1511:./Lib/Src/stm32f4xx_adc.c ****              (+++) a regular CHANNEL conversion 
1512:./Lib/Src/stm32f4xx_adc.c ****              (+++) sequence of regular GROUP conversions .
1513:./Lib/Src/stm32f4xx_adc.c **** 
1514:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_FLAG_STRT: Regular channel start ==> to indicate when regular 
1515:./Lib/Src/stm32f4xx_adc.c ****              CHANNEL conversion starts.
1516:./Lib/Src/stm32f4xx_adc.c ****     [..]
1517:./Lib/Src/stm32f4xx_adc.c ****       (+) Interrupts :
ARM GAS  /tmp/ccIbLEgY.s 			page 69


1518:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_IT_OVR : specifies the interrupt source for Overrun detection 
1519:./Lib/Src/stm32f4xx_adc.c ****              event.  
1520:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_IT_EOC : specifies the interrupt source for Regular channel end
1521:./Lib/Src/stm32f4xx_adc.c ****              of conversion event.
1522:./Lib/Src/stm32f4xx_adc.c ****   
1523:./Lib/Src/stm32f4xx_adc.c ****   
1524:./Lib/Src/stm32f4xx_adc.c ****   *** Flags and Interrupts for ADC Injected channels ***
1525:./Lib/Src/stm32f4xx_adc.c ****   ======================================================
1526:./Lib/Src/stm32f4xx_adc.c ****     [..]
1527:./Lib/Src/stm32f4xx_adc.c ****       (+) Flags :
1528:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate 
1529:./Lib/Src/stm32f4xx_adc.c ****              at the end of injected GROUP conversion  
1530:./Lib/Src/stm32f4xx_adc.c ****               
1531:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1532:./Lib/Src/stm32f4xx_adc.c ****              injected GROUP conversion starts.
1533:./Lib/Src/stm32f4xx_adc.c ****     [..]
1534:./Lib/Src/stm32f4xx_adc.c ****       (+) Interrupts :
1535:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_IT_JEOC : specifies the interrupt source for Injected channel 
1536:./Lib/Src/stm32f4xx_adc.c ****              end of conversion event.     
1537:./Lib/Src/stm32f4xx_adc.c **** 
1538:./Lib/Src/stm32f4xx_adc.c ****   *** General Flags and Interrupts for the ADC ***
1539:./Lib/Src/stm32f4xx_adc.c ****   ================================================ 
1540:./Lib/Src/stm32f4xx_adc.c ****     [..]
1541:./Lib/Src/stm32f4xx_adc.c ****       (+)Flags :
1542:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1543:./Lib/Src/stm32f4xx_adc.c ****              crosses the programmed thresholds values.
1544:./Lib/Src/stm32f4xx_adc.c ****     [..]          
1545:./Lib/Src/stm32f4xx_adc.c ****       (+) Interrupts :
1546:./Lib/Src/stm32f4xx_adc.c ****         (##) ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1547:./Lib/Src/stm32f4xx_adc.c **** 
1548:./Lib/Src/stm32f4xx_adc.c ****   
1549:./Lib/Src/stm32f4xx_adc.c ****     [..] The user should identify which mode will be used in his application to 
1550:./Lib/Src/stm32f4xx_adc.c ****          manage the ADC controller events: Polling mode or Interrupt mode.
1551:./Lib/Src/stm32f4xx_adc.c ****   
1552:./Lib/Src/stm32f4xx_adc.c ****     [..] In the Polling Mode it is advised to use the following functions:
1553:./Lib/Src/stm32f4xx_adc.c ****       (+) ADC_GetFlagStatus() : to check if flags events occur. 
1554:./Lib/Src/stm32f4xx_adc.c ****       (+) ADC_ClearFlag()     : to clear the flags events.
1555:./Lib/Src/stm32f4xx_adc.c ****       
1556:./Lib/Src/stm32f4xx_adc.c ****     [..] In the Interrupt Mode it is advised to use the following functions:
1557:./Lib/Src/stm32f4xx_adc.c ****       (+) ADC_ITConfig()          : to enable or disable the interrupt source.
1558:./Lib/Src/stm32f4xx_adc.c ****       (+) ADC_GetITStatus()       : to check if Interrupt occurs.
1559:./Lib/Src/stm32f4xx_adc.c ****       (+) ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1560:./Lib/Src/stm32f4xx_adc.c ****                                    (corresponding Flag). 
1561:./Lib/Src/stm32f4xx_adc.c **** @endverbatim
1562:./Lib/Src/stm32f4xx_adc.c ****   * @{
1563:./Lib/Src/stm32f4xx_adc.c ****   */ 
1564:./Lib/Src/stm32f4xx_adc.c **** /**
1565:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1566:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1567:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1568:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1569:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1570:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1571:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1572:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1573:./Lib/Src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1574:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccIbLEgY.s 			page 70


1575:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1576:./Lib/Src/stm32f4xx_adc.c ****   */
1577:./Lib/Src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1578:./Lib/Src/stm32f4xx_adc.c **** {
 2370              		.loc 1 1578 1
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 16
 2373              		@ frame_needed = 1, uses_anonymous_args = 0
 2374              		@ link register save eliminated.
 2375 0000 80B4     		push	{r7}
 2376              		.cfi_def_cfa_offset 4
 2377              		.cfi_offset 7, -4
 2378 0002 85B0     		sub	sp, sp, #20
 2379              		.cfi_def_cfa_offset 24
 2380 0004 00AF     		add	r7, sp, #0
 2381              		.cfi_def_cfa_register 7
 2382 0006 7860     		str	r0, [r7, #4]
 2383 0008 0B46     		mov	r3, r1
 2384 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 2385 000c 1346     		mov	r3, r2
 2386 000e 7B70     		strb	r3, [r7, #1]
1579:./Lib/Src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2387              		.loc 1 1579 12
 2388 0010 0023     		movs	r3, #0
 2389 0012 FB60     		str	r3, [r7, #12]
1580:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1581:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1582:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1583:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1584:./Lib/Src/stm32f4xx_adc.c **** 
1585:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1586:./Lib/Src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2390              		.loc 1 1586 12
 2391 0014 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2392 0016 DBB2     		uxtb	r3, r3
 2393              		.loc 1 1586 10
 2394 0018 FB60     		str	r3, [r7, #12]
1587:./Lib/Src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2395              		.loc 1 1587 10
 2396 001a 0122     		movs	r2, #1
 2397 001c FB68     		ldr	r3, [r7, #12]
 2398 001e 02FA03F3 		lsl	r3, r2, r3
 2399 0022 FB60     		str	r3, [r7, #12]
1588:./Lib/Src/stm32f4xx_adc.c **** 
1589:./Lib/Src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2400              		.loc 1 1589 6
 2401 0024 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2402 0026 002B     		cmp	r3, #0
 2403 0028 06D0     		beq	.L97
1590:./Lib/Src/stm32f4xx_adc.c ****   {
1591:./Lib/Src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1592:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2404              		.loc 1 1592 9
 2405 002a 7B68     		ldr	r3, [r7, #4]
 2406 002c 5A68     		ldr	r2, [r3, #4]
 2407              		.loc 1 1592 15
 2408 002e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccIbLEgY.s 			page 71


 2409 0030 1A43     		orrs	r2, r2, r3
 2410 0032 7B68     		ldr	r3, [r7, #4]
 2411 0034 5A60     		str	r2, [r3, #4]
1593:./Lib/Src/stm32f4xx_adc.c ****   }
1594:./Lib/Src/stm32f4xx_adc.c ****   else
1595:./Lib/Src/stm32f4xx_adc.c ****   {
1596:./Lib/Src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1597:./Lib/Src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
1598:./Lib/Src/stm32f4xx_adc.c ****   }
1599:./Lib/Src/stm32f4xx_adc.c **** }
 2412              		.loc 1 1599 1
 2413 0036 06E0     		b	.L99
 2414              	.L97:
1597:./Lib/Src/stm32f4xx_adc.c ****   }
 2415              		.loc 1 1597 9
 2416 0038 7B68     		ldr	r3, [r7, #4]
 2417 003a 5A68     		ldr	r2, [r3, #4]
1597:./Lib/Src/stm32f4xx_adc.c ****   }
 2418              		.loc 1 1597 19
 2419 003c FB68     		ldr	r3, [r7, #12]
 2420 003e DB43     		mvns	r3, r3
1597:./Lib/Src/stm32f4xx_adc.c ****   }
 2421              		.loc 1 1597 15
 2422 0040 1A40     		ands	r2, r2, r3
 2423 0042 7B68     		ldr	r3, [r7, #4]
 2424 0044 5A60     		str	r2, [r3, #4]
 2425              	.L99:
 2426              		.loc 1 1599 1
 2427 0046 00BF     		nop
 2428 0048 1437     		adds	r7, r7, #20
 2429              		.cfi_def_cfa_offset 4
 2430 004a BD46     		mov	sp, r7
 2431              		.cfi_def_cfa_register 13
 2432              		@ sp needed
 2433 004c 5DF8047B 		ldr	r7, [sp], #4
 2434              		.cfi_restore 7
 2435              		.cfi_def_cfa_offset 0
 2436 0050 7047     		bx	lr
 2437              		.cfi_endproc
 2438              	.LFE156:
 2440              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 2441              		.align	1
 2442              		.global	ADC_GetFlagStatus
 2443              		.syntax unified
 2444              		.thumb
 2445              		.thumb_func
 2447              	ADC_GetFlagStatus:
 2448              	.LFB157:
1600:./Lib/Src/stm32f4xx_adc.c **** 
1601:./Lib/Src/stm32f4xx_adc.c **** /**
1602:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1603:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1604:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1605:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1606:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1607:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1608:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
ARM GAS  /tmp/ccIbLEgY.s 			page 72


1609:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1610:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1611:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1612:./Lib/Src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1613:./Lib/Src/stm32f4xx_adc.c ****   */
1614:./Lib/Src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1615:./Lib/Src/stm32f4xx_adc.c **** {
 2449              		.loc 1 1615 1
 2450              		.cfi_startproc
 2451              		@ args = 0, pretend = 0, frame = 16
 2452              		@ frame_needed = 1, uses_anonymous_args = 0
 2453              		@ link register save eliminated.
 2454 0000 80B4     		push	{r7}
 2455              		.cfi_def_cfa_offset 4
 2456              		.cfi_offset 7, -4
 2457 0002 85B0     		sub	sp, sp, #20
 2458              		.cfi_def_cfa_offset 24
 2459 0004 00AF     		add	r7, sp, #0
 2460              		.cfi_def_cfa_register 7
 2461 0006 7860     		str	r0, [r7, #4]
 2462 0008 0B46     		mov	r3, r1
 2463 000a FB70     		strb	r3, [r7, #3]
1616:./Lib/Src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2464              		.loc 1 1616 14
 2465 000c 0023     		movs	r3, #0
 2466 000e FB73     		strb	r3, [r7, #15]
1617:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1618:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1619:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1620:./Lib/Src/stm32f4xx_adc.c **** 
1621:./Lib/Src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1622:./Lib/Src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2467              		.loc 1 1622 12
 2468 0010 7B68     		ldr	r3, [r7, #4]
 2469 0012 1A68     		ldr	r2, [r3]
 2470              		.loc 1 1622 17
 2471 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2472 0016 1340     		ands	r3, r3, r2
 2473              		.loc 1 1622 6
 2474 0018 002B     		cmp	r3, #0
 2475 001a 02D0     		beq	.L101
1623:./Lib/Src/stm32f4xx_adc.c ****   {
1624:./Lib/Src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1625:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = SET;
 2476              		.loc 1 1625 15
 2477 001c 0123     		movs	r3, #1
 2478 001e FB73     		strb	r3, [r7, #15]
 2479 0020 01E0     		b	.L102
 2480              	.L101:
1626:./Lib/Src/stm32f4xx_adc.c ****   }
1627:./Lib/Src/stm32f4xx_adc.c ****   else
1628:./Lib/Src/stm32f4xx_adc.c ****   {
1629:./Lib/Src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1630:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2481              		.loc 1 1630 15
 2482 0022 0023     		movs	r3, #0
 2483 0024 FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccIbLEgY.s 			page 73


 2484              	.L102:
1631:./Lib/Src/stm32f4xx_adc.c ****   }
1632:./Lib/Src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1633:./Lib/Src/stm32f4xx_adc.c ****   return  bitstatus;
 2485              		.loc 1 1633 11
 2486 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1634:./Lib/Src/stm32f4xx_adc.c **** }
 2487              		.loc 1 1634 1
 2488 0028 1846     		mov	r0, r3
 2489 002a 1437     		adds	r7, r7, #20
 2490              		.cfi_def_cfa_offset 4
 2491 002c BD46     		mov	sp, r7
 2492              		.cfi_def_cfa_register 13
 2493              		@ sp needed
 2494 002e 5DF8047B 		ldr	r7, [sp], #4
 2495              		.cfi_restore 7
 2496              		.cfi_def_cfa_offset 0
 2497 0032 7047     		bx	lr
 2498              		.cfi_endproc
 2499              	.LFE157:
 2501              		.section	.text.ADC_ClearFlag,"ax",%progbits
 2502              		.align	1
 2503              		.global	ADC_ClearFlag
 2504              		.syntax unified
 2505              		.thumb
 2506              		.thumb_func
 2508              	ADC_ClearFlag:
 2509              	.LFB158:
1635:./Lib/Src/stm32f4xx_adc.c **** 
1636:./Lib/Src/stm32f4xx_adc.c **** /**
1637:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1638:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1639:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1640:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1641:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1642:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1643:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1644:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1645:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1646:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1647:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1648:./Lib/Src/stm32f4xx_adc.c ****   */
1649:./Lib/Src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1650:./Lib/Src/stm32f4xx_adc.c **** {
 2510              		.loc 1 1650 1
 2511              		.cfi_startproc
 2512              		@ args = 0, pretend = 0, frame = 8
 2513              		@ frame_needed = 1, uses_anonymous_args = 0
 2514              		@ link register save eliminated.
 2515 0000 80B4     		push	{r7}
 2516              		.cfi_def_cfa_offset 4
 2517              		.cfi_offset 7, -4
 2518 0002 83B0     		sub	sp, sp, #12
 2519              		.cfi_def_cfa_offset 16
 2520 0004 00AF     		add	r7, sp, #0
 2521              		.cfi_def_cfa_register 7
 2522 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccIbLEgY.s 			page 74


 2523 0008 0B46     		mov	r3, r1
 2524 000a FB70     		strb	r3, [r7, #3]
1651:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1652:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1653:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1654:./Lib/Src/stm32f4xx_adc.c **** 
1655:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1656:./Lib/Src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2525              		.loc 1 1656 15
 2526 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2527              		.loc 1 1656 14
 2528 000e DA43     		mvns	r2, r3
 2529              		.loc 1 1656 12
 2530 0010 7B68     		ldr	r3, [r7, #4]
 2531 0012 1A60     		str	r2, [r3]
1657:./Lib/Src/stm32f4xx_adc.c **** }
 2532              		.loc 1 1657 1
 2533 0014 00BF     		nop
 2534 0016 0C37     		adds	r7, r7, #12
 2535              		.cfi_def_cfa_offset 4
 2536 0018 BD46     		mov	sp, r7
 2537              		.cfi_def_cfa_register 13
 2538              		@ sp needed
 2539 001a 5DF8047B 		ldr	r7, [sp], #4
 2540              		.cfi_restore 7
 2541              		.cfi_def_cfa_offset 0
 2542 001e 7047     		bx	lr
 2543              		.cfi_endproc
 2544              	.LFE158:
 2546              		.section	.text.ADC_GetITStatus,"ax",%progbits
 2547              		.align	1
 2548              		.global	ADC_GetITStatus
 2549              		.syntax unified
 2550              		.thumb
 2551              		.thumb_func
 2553              	ADC_GetITStatus:
 2554              	.LFB159:
1658:./Lib/Src/stm32f4xx_adc.c **** 
1659:./Lib/Src/stm32f4xx_adc.c **** /**
1660:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1661:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1662:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1663:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1664:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1665:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1666:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1667:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1668:./Lib/Src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1669:./Lib/Src/stm32f4xx_adc.c ****   */
1670:./Lib/Src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1671:./Lib/Src/stm32f4xx_adc.c **** {
 2555              		.loc 1 1671 1
 2556              		.cfi_startproc
 2557              		@ args = 0, pretend = 0, frame = 24
 2558              		@ frame_needed = 1, uses_anonymous_args = 0
 2559              		@ link register save eliminated.
 2560 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccIbLEgY.s 			page 75


 2561              		.cfi_def_cfa_offset 4
 2562              		.cfi_offset 7, -4
 2563 0002 87B0     		sub	sp, sp, #28
 2564              		.cfi_def_cfa_offset 32
 2565 0004 00AF     		add	r7, sp, #0
 2566              		.cfi_def_cfa_register 7
 2567 0006 7860     		str	r0, [r7, #4]
 2568 0008 0B46     		mov	r3, r1
 2569 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1672:./Lib/Src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2570              		.loc 1 1672 12
 2571 000c 0023     		movs	r3, #0
 2572 000e FB75     		strb	r3, [r7, #23]
1673:./Lib/Src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2573              		.loc 1 1673 12
 2574 0010 0023     		movs	r3, #0
 2575 0012 3B61     		str	r3, [r7, #16]
 2576              		.loc 1 1673 24
 2577 0014 0023     		movs	r3, #0
 2578 0016 FB60     		str	r3, [r7, #12]
1674:./Lib/Src/stm32f4xx_adc.c **** 
1675:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1676:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1677:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1678:./Lib/Src/stm32f4xx_adc.c **** 
1679:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1680:./Lib/Src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2579              		.loc 1 1680 19
 2580 0018 7B88     		ldrh	r3, [r7, #2]
 2581 001a 1B0A     		lsrs	r3, r3, #8
 2582 001c 9BB2     		uxth	r3, r3
 2583              		.loc 1 1680 10
 2584 001e 3B61     		str	r3, [r7, #16]
1681:./Lib/Src/stm32f4xx_adc.c **** 
1682:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1683:./Lib/Src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2585              		.loc 1 1683 23
 2586 0020 7B68     		ldr	r3, [r7, #4]
 2587 0022 5A68     		ldr	r2, [r3, #4]
 2588              		.loc 1 1683 50
 2589 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2590 0026 DBB2     		uxtb	r3, r3
 2591 0028 1946     		mov	r1, r3
 2592              		.loc 1 1683 47
 2593 002a 0123     		movs	r3, #1
 2594 002c 8B40     		lsls	r3, r3, r1
 2595              		.loc 1 1683 16
 2596 002e 1340     		ands	r3, r3, r2
 2597 0030 FB60     		str	r3, [r7, #12]
1684:./Lib/Src/stm32f4xx_adc.c **** 
1685:./Lib/Src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1686:./Lib/Src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2598              		.loc 1 1686 13
 2599 0032 7B68     		ldr	r3, [r7, #4]
 2600 0034 1A68     		ldr	r2, [r3]
 2601              		.loc 1 1686 18
 2602 0036 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccIbLEgY.s 			page 76


 2603 0038 1340     		ands	r3, r3, r2
 2604              		.loc 1 1686 6
 2605 003a 002B     		cmp	r3, #0
 2606 003c 05D0     		beq	.L106
 2607              		.loc 1 1686 48 discriminator 1
 2608 003e FB68     		ldr	r3, [r7, #12]
 2609 0040 002B     		cmp	r3, #0
 2610 0042 02D0     		beq	.L106
1687:./Lib/Src/stm32f4xx_adc.c ****   {
1688:./Lib/Src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1689:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = SET;
 2611              		.loc 1 1689 15
 2612 0044 0123     		movs	r3, #1
 2613 0046 FB75     		strb	r3, [r7, #23]
 2614 0048 01E0     		b	.L107
 2615              	.L106:
1690:./Lib/Src/stm32f4xx_adc.c ****   }
1691:./Lib/Src/stm32f4xx_adc.c ****   else
1692:./Lib/Src/stm32f4xx_adc.c ****   {
1693:./Lib/Src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1694:./Lib/Src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2616              		.loc 1 1694 15
 2617 004a 0023     		movs	r3, #0
 2618 004c FB75     		strb	r3, [r7, #23]
 2619              	.L107:
1695:./Lib/Src/stm32f4xx_adc.c ****   }
1696:./Lib/Src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1697:./Lib/Src/stm32f4xx_adc.c ****   return  bitstatus;
 2620              		.loc 1 1697 11
 2621 004e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1698:./Lib/Src/stm32f4xx_adc.c **** }
 2622              		.loc 1 1698 1
 2623 0050 1846     		mov	r0, r3
 2624 0052 1C37     		adds	r7, r7, #28
 2625              		.cfi_def_cfa_offset 4
 2626 0054 BD46     		mov	sp, r7
 2627              		.cfi_def_cfa_register 13
 2628              		@ sp needed
 2629 0056 5DF8047B 		ldr	r7, [sp], #4
 2630              		.cfi_restore 7
 2631              		.cfi_def_cfa_offset 0
 2632 005a 7047     		bx	lr
 2633              		.cfi_endproc
 2634              	.LFE159:
 2636              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 2637              		.align	1
 2638              		.global	ADC_ClearITPendingBit
 2639              		.syntax unified
 2640              		.thumb
 2641              		.thumb_func
 2643              	ADC_ClearITPendingBit:
 2644              	.LFB160:
1699:./Lib/Src/stm32f4xx_adc.c **** 
1700:./Lib/Src/stm32f4xx_adc.c **** /**
1701:./Lib/Src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1702:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1703:./Lib/Src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
ARM GAS  /tmp/ccIbLEgY.s 			page 77


1704:./Lib/Src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1705:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1706:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1707:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1708:./Lib/Src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1709:./Lib/Src/stm32f4xx_adc.c ****   * @retval None
1710:./Lib/Src/stm32f4xx_adc.c ****   */
1711:./Lib/Src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1712:./Lib/Src/stm32f4xx_adc.c **** {
 2645              		.loc 1 1712 1
 2646              		.cfi_startproc
 2647              		@ args = 0, pretend = 0, frame = 16
 2648              		@ frame_needed = 1, uses_anonymous_args = 0
 2649              		@ link register save eliminated.
 2650 0000 80B4     		push	{r7}
 2651              		.cfi_def_cfa_offset 4
 2652              		.cfi_offset 7, -4
 2653 0002 85B0     		sub	sp, sp, #20
 2654              		.cfi_def_cfa_offset 24
 2655 0004 00AF     		add	r7, sp, #0
 2656              		.cfi_def_cfa_register 7
 2657 0006 7860     		str	r0, [r7, #4]
 2658 0008 0B46     		mov	r3, r1
 2659 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1713:./Lib/Src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2660              		.loc 1 1713 11
 2661 000c 0023     		movs	r3, #0
 2662 000e FB73     		strb	r3, [r7, #15]
1714:./Lib/Src/stm32f4xx_adc.c ****   /* Check the parameters */
1715:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1716:./Lib/Src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1717:./Lib/Src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1718:./Lib/Src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2663              		.loc 1 1718 12
 2664 0010 7B88     		ldrh	r3, [r7, #2]
 2665 0012 1B0A     		lsrs	r3, r3, #8
 2666 0014 9BB2     		uxth	r3, r3
 2667              		.loc 1 1718 10
 2668 0016 FB73     		strb	r3, [r7, #15]
1719:./Lib/Src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1720:./Lib/Src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2669              		.loc 1 1720 15
 2670 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2671              		.loc 1 1720 14
 2672 001a DA43     		mvns	r2, r3
 2673              		.loc 1 1720 12
 2674 001c 7B68     		ldr	r3, [r7, #4]
 2675 001e 1A60     		str	r2, [r3]
1721:./Lib/Src/stm32f4xx_adc.c **** }                    
 2676              		.loc 1 1721 1
 2677 0020 00BF     		nop
 2678 0022 1437     		adds	r7, r7, #20
 2679              		.cfi_def_cfa_offset 4
 2680 0024 BD46     		mov	sp, r7
 2681              		.cfi_def_cfa_register 13
 2682              		@ sp needed
 2683 0026 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccIbLEgY.s 			page 78


 2684              		.cfi_restore 7
 2685              		.cfi_def_cfa_offset 0
 2686 002a 7047     		bx	lr
 2687              		.cfi_endproc
 2688              	.LFE160:
 2690              		.text
 2691              	.Letext0:
 2692              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 2693              		.file 3 "./Start/stm32f4xx.h"
 2694              		.file 4 "./Lib/inc/stm32f4xx_adc.h"
 2695              		.file 5 "./Lib/inc/stm32f4xx_rcc.h"
ARM GAS  /tmp/ccIbLEgY.s 			page 79


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_adc.c
     /tmp/ccIbLEgY.s:21     .text.ADC_DeInit:0000000000000000 $t
     /tmp/ccIbLEgY.s:27     .text.ADC_DeInit:0000000000000000 ADC_DeInit
     /tmp/ccIbLEgY.s:54     .text.ADC_Init:0000000000000000 $t
     /tmp/ccIbLEgY.s:60     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/ccIbLEgY.s:190    .text.ADC_Init:00000000000000a8 $d
     /tmp/ccIbLEgY.s:195    .text.ADC_StructInit:0000000000000000 $t
     /tmp/ccIbLEgY.s:201    .text.ADC_StructInit:0000000000000000 ADC_StructInit
     /tmp/ccIbLEgY.s:259    .text.ADC_CommonInit:0000000000000000 $t
     /tmp/ccIbLEgY.s:265    .text.ADC_CommonInit:0000000000000000 ADC_CommonInit
     /tmp/ccIbLEgY.s:334    .text.ADC_CommonInit:0000000000000048 $d
     /tmp/ccIbLEgY.s:340    .text.ADC_CommonStructInit:0000000000000000 $t
     /tmp/ccIbLEgY.s:346    .text.ADC_CommonStructInit:0000000000000000 ADC_CommonStructInit
     /tmp/ccIbLEgY.s:392    .text.ADC_Cmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:398    .text.ADC_Cmd:0000000000000000 ADC_Cmd
     /tmp/ccIbLEgY.s:452    .text.ADC_AnalogWatchdogCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:458    .text.ADC_AnalogWatchdogCmd:0000000000000000 ADC_AnalogWatchdogCmd
     /tmp/ccIbLEgY.s:510    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:516    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccIbLEgY.s:558    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:564    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccIbLEgY.s:616    .text.ADC_TempSensorVrefintCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:622    .text.ADC_TempSensorVrefintCmd:0000000000000000 ADC_TempSensorVrefintCmd
     /tmp/ccIbLEgY.s:674    .text.ADC_TempSensorVrefintCmd:0000000000000038 $d
     /tmp/ccIbLEgY.s:679    .text.ADC_VBATCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:685    .text.ADC_VBATCmd:0000000000000000 ADC_VBATCmd
     /tmp/ccIbLEgY.s:737    .text.ADC_VBATCmd:0000000000000038 $d
     /tmp/ccIbLEgY.s:742    .text.ADC_RegularChannelConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:748    .text.ADC_RegularChannelConfig:0000000000000000 ADC_RegularChannelConfig
     /tmp/ccIbLEgY.s:1026   .text.ADC_SoftwareStartConv:0000000000000000 $t
     /tmp/ccIbLEgY.s:1032   .text.ADC_SoftwareStartConv:0000000000000000 ADC_SoftwareStartConv
     /tmp/ccIbLEgY.s:1069   .text.ADC_GetSoftwareStartConvStatus:0000000000000000 $t
     /tmp/ccIbLEgY.s:1075   .text.ADC_GetSoftwareStartConvStatus:0000000000000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccIbLEgY.s:1127   .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:1133   .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/ccIbLEgY.s:1187   .text.ADC_ContinuousModeCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:1193   .text.ADC_ContinuousModeCmd:0000000000000000 ADC_ContinuousModeCmd
     /tmp/ccIbLEgY.s:1247   .text.ADC_DiscModeChannelCountConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:1253   .text.ADC_DiscModeChannelCountConfig:0000000000000000 ADC_DiscModeChannelCountConfig
     /tmp/ccIbLEgY.s:1315   .text.ADC_DiscModeCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:1321   .text.ADC_DiscModeCmd:0000000000000000 ADC_DiscModeCmd
     /tmp/ccIbLEgY.s:1375   .text.ADC_GetConversionValue:0000000000000000 $t
     /tmp/ccIbLEgY.s:1381   .text.ADC_GetConversionValue:0000000000000000 ADC_GetConversionValue
     /tmp/ccIbLEgY.s:1416   .text.ADC_GetMultiModeConversionValue:0000000000000000 $t
     /tmp/ccIbLEgY.s:1422   .text.ADC_GetMultiModeConversionValue:0000000000000000 ADC_GetMultiModeConversionValue
     /tmp/ccIbLEgY.s:1449   .text.ADC_GetMultiModeConversionValue:0000000000000014 $d
     /tmp/ccIbLEgY.s:1454   .text.ADC_DMACmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:1460   .text.ADC_DMACmd:0000000000000000 ADC_DMACmd
     /tmp/ccIbLEgY.s:1514   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:1520   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccIbLEgY.s:1574   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:1580   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccIbLEgY.s:1632   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000038 $d
     /tmp/ccIbLEgY.s:1637   .text.ADC_InjectedChannelConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:1643   .text.ADC_InjectedChannelConfig:0000000000000000 ADC_InjectedChannelConfig
     /tmp/ccIbLEgY.s:1843   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 $t
ARM GAS  /tmp/ccIbLEgY.s 			page 80


     /tmp/ccIbLEgY.s:1849   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccIbLEgY.s:1911   .text.ADC_SetInjectedOffset:0000000000000000 $t
     /tmp/ccIbLEgY.s:1917   .text.ADC_SetInjectedOffset:0000000000000000 ADC_SetInjectedOffset
     /tmp/ccIbLEgY.s:1970   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:1976   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccIbLEgY.s:2027   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:2033   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccIbLEgY.s:2084   .text.ADC_SoftwareStartInjectedConv:0000000000000000 $t
     /tmp/ccIbLEgY.s:2090   .text.ADC_SoftwareStartInjectedConv:0000000000000000 ADC_SoftwareStartInjectedConv
     /tmp/ccIbLEgY.s:2127   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 $t
     /tmp/ccIbLEgY.s:2133   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccIbLEgY.s:2185   .text.ADC_AutoInjectedConvCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:2191   .text.ADC_AutoInjectedConvCmd:0000000000000000 ADC_AutoInjectedConvCmd
     /tmp/ccIbLEgY.s:2245   .text.ADC_InjectedDiscModeCmd:0000000000000000 $t
     /tmp/ccIbLEgY.s:2251   .text.ADC_InjectedDiscModeCmd:0000000000000000 ADC_InjectedDiscModeCmd
     /tmp/ccIbLEgY.s:2305   .text.ADC_GetInjectedConversionValue:0000000000000000 $t
     /tmp/ccIbLEgY.s:2311   .text.ADC_GetInjectedConversionValue:0000000000000000 ADC_GetInjectedConversionValue
     /tmp/ccIbLEgY.s:2362   .text.ADC_ITConfig:0000000000000000 $t
     /tmp/ccIbLEgY.s:2368   .text.ADC_ITConfig:0000000000000000 ADC_ITConfig
     /tmp/ccIbLEgY.s:2441   .text.ADC_GetFlagStatus:0000000000000000 $t
     /tmp/ccIbLEgY.s:2447   .text.ADC_GetFlagStatus:0000000000000000 ADC_GetFlagStatus
     /tmp/ccIbLEgY.s:2502   .text.ADC_ClearFlag:0000000000000000 $t
     /tmp/ccIbLEgY.s:2508   .text.ADC_ClearFlag:0000000000000000 ADC_ClearFlag
     /tmp/ccIbLEgY.s:2547   .text.ADC_GetITStatus:0000000000000000 $t
     /tmp/ccIbLEgY.s:2553   .text.ADC_GetITStatus:0000000000000000 ADC_GetITStatus
     /tmp/ccIbLEgY.s:2637   .text.ADC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccIbLEgY.s:2643   .text.ADC_ClearITPendingBit:0000000000000000 ADC_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
