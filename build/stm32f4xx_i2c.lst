ARM GAS  /tmp/ccqephDo.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_i2c.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "./Lib/Src/stm32f4xx_i2c.c"
  20              		.section	.text.I2C_DeInit,"ax",%progbits
  21              		.align	1
  22              		.global	I2C_DeInit
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	I2C_DeInit:
  28              	.LFB123:
   1:./Lib/Src/stm32f4xx_i2c.c **** /**
   2:./Lib/Src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:./Lib/Src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:./Lib/Src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:./Lib/Src/stm32f4xx_i2c.c ****   * @version V1.8.1
   6:./Lib/Src/stm32f4xx_i2c.c ****   * @date    27-January-2022
   7:./Lib/Src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:./Lib/Src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:./Lib/Src/stm32f4xx_i2c.c ****   *           + Initialization and Configuration
  10:./Lib/Src/stm32f4xx_i2c.c ****   *           + Data transfers
  11:./Lib/Src/stm32f4xx_i2c.c ****   *           + PEC management
  12:./Lib/Src/stm32f4xx_i2c.c ****   *           + DMA transfers management
  13:./Lib/Src/stm32f4xx_i2c.c ****   *           + Interrupts, events and flags management 
  14:./Lib/Src/stm32f4xx_i2c.c ****   *           
  15:./Lib/Src/stm32f4xx_i2c.c ****     @verbatim    
  16:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
  17:./Lib/Src/stm32f4xx_i2c.c ****                     ##### How to use this driver #####
  18:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
  19:./Lib/Src/stm32f4xx_i2c.c ****     [..]
  20:./Lib/Src/stm32f4xx_i2c.c ****       (#) Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:./Lib/Src/stm32f4xx_i2c.c ****           function for I2C1, I2C2 or I2C3.
  22:./Lib/Src/stm32f4xx_i2c.c ****   
  23:./Lib/Src/stm32f4xx_i2c.c ****       (#) Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:./Lib/Src/stm32f4xx_i2c.c ****           RCC_AHBPeriphClockCmd() function. 
  25:./Lib/Src/stm32f4xx_i2c.c ****   
  26:./Lib/Src/stm32f4xx_i2c.c ****       (#) Peripherals alternate function: 
  27:./Lib/Src/stm32f4xx_i2c.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  28:./Lib/Src/stm32f4xx_i2c.c ****              Function (AF) using GPIO_PinAFConfig() function
  29:./Lib/Src/stm32f4xx_i2c.c ****         (++) Configure the desired pin in alternate function by:
  30:./Lib/Src/stm32f4xx_i2c.c ****              GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
ARM GAS  /tmp/ccqephDo.s 			page 2


  31:./Lib/Src/stm32f4xx_i2c.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  32:./Lib/Src/stm32f4xx_i2c.c ****              GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:./Lib/Src/stm32f4xx_i2c.c ****         (++) Call GPIO_Init() function
  34:./Lib/Src/stm32f4xx_i2c.c ****              Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:./Lib/Src/stm32f4xx_i2c.c ****              Add an external pull up if necessary (typically 4.7 KOhm).      
  36:./Lib/Src/stm32f4xx_i2c.c ****           
  37:./Lib/Src/stm32f4xx_i2c.c ****       (#) Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:./Lib/Src/stm32f4xx_i2c.c ****           Address using the I2C_Init() function.
  39:./Lib/Src/stm32f4xx_i2c.c ****   
  40:./Lib/Src/stm32f4xx_i2c.c ****       (#) Optionally you can enable/configure the following parameters without
  41:./Lib/Src/stm32f4xx_i2c.c ****           re-initialization (i.e there is no need to call again I2C_Init() function):
  42:./Lib/Src/stm32f4xx_i2c.c ****         (++) Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:./Lib/Src/stm32f4xx_i2c.c ****         (++) Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:./Lib/Src/stm32f4xx_i2c.c ****         (++) Enable the general call using the I2C_GeneralCallCmd() function
  45:./Lib/Src/stm32f4xx_i2c.c ****         (++) Enable the clock stretching using I2C_StretchClockCmd() function
  46:./Lib/Src/stm32f4xx_i2c.c ****         (++) Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:./Lib/Src/stm32f4xx_i2c.c ****              function.
  48:./Lib/Src/stm32f4xx_i2c.c ****         (++) Configure the NACK position for Master Receiver mode in case of 
  49:./Lib/Src/stm32f4xx_i2c.c ****              2 bytes reception using the function I2C_NACKPositionConfig().  
  50:./Lib/Src/stm32f4xx_i2c.c ****         (++) Enable the PEC Calculation using I2C_CalculatePEC() function
  51:./Lib/Src/stm32f4xx_i2c.c ****         (++) For SMBus Mode: 
  52:./Lib/Src/stm32f4xx_i2c.c ****           (+++) Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:./Lib/Src/stm32f4xx_i2c.c ****           (+++) Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:./Lib/Src/stm32f4xx_i2c.c ****   
  55:./Lib/Src/stm32f4xx_i2c.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  56:./Lib/Src/stm32f4xx_i2c.c ****           I2C_ITConfig() if you need to use interrupt mode. 
  57:./Lib/Src/stm32f4xx_i2c.c ****   
  58:./Lib/Src/stm32f4xx_i2c.c ****       (#) When using the DMA mode 
  59:./Lib/Src/stm32f4xx_i2c.c ****         (++) Configure the DMA using DMA_Init() function
  60:./Lib/Src/stm32f4xx_i2c.c ****         (++) Active the needed channel Request using I2C_DMACmd() or
  61:./Lib/Src/stm32f4xx_i2c.c ****              I2C_DMALastTransferCmd() function.
  62:./Lib/Src/stm32f4xx_i2c.c ****         -@@- When using DMA mode, I2C interrupts may be used at the same time to
  63:./Lib/Src/stm32f4xx_i2c.c ****              control the communication flow (Start/Stop/Ack... events and errors).
  64:./Lib/Src/stm32f4xx_i2c.c ****    
  65:./Lib/Src/stm32f4xx_i2c.c ****       (#) Enable the I2C using the I2C_Cmd() function.
  66:./Lib/Src/stm32f4xx_i2c.c ****    
  67:./Lib/Src/stm32f4xx_i2c.c ****       (#) Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:./Lib/Src/stm32f4xx_i2c.c ****           transfers. 
  69:./Lib/Src/stm32f4xx_i2c.c ****   
  70:./Lib/Src/stm32f4xx_i2c.c ****     @endverbatim  
  71:./Lib/Src/stm32f4xx_i2c.c ****   ******************************************************************************
  72:./Lib/Src/stm32f4xx_i2c.c ****   * @attention
  73:./Lib/Src/stm32f4xx_i2c.c ****   *
  74:./Lib/Src/stm32f4xx_i2c.c ****   * Copyright (c) 2016 STMicroelectronics.
  75:./Lib/Src/stm32f4xx_i2c.c ****   * All rights reserved.
  76:./Lib/Src/stm32f4xx_i2c.c ****   *
  77:./Lib/Src/stm32f4xx_i2c.c ****   * This software is licensed under terms that can be found in the LICENSE file
  78:./Lib/Src/stm32f4xx_i2c.c ****   * in the root directory of this software component.
  79:./Lib/Src/stm32f4xx_i2c.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  80:./Lib/Src/stm32f4xx_i2c.c ****   *
  81:./Lib/Src/stm32f4xx_i2c.c ****   ******************************************************************************
  82:./Lib/Src/stm32f4xx_i2c.c ****   */
  83:./Lib/Src/stm32f4xx_i2c.c **** 
  84:./Lib/Src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  85:./Lib/Src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  86:./Lib/Src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  87:./Lib/Src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccqephDo.s 			page 3


  88:./Lib/Src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:./Lib/Src/stm32f4xx_i2c.c ****   * @{
  90:./Lib/Src/stm32f4xx_i2c.c ****   */
  91:./Lib/Src/stm32f4xx_i2c.c **** 
  92:./Lib/Src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  93:./Lib/Src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  94:./Lib/Src/stm32f4xx_i2c.c ****   * @{
  95:./Lib/Src/stm32f4xx_i2c.c ****   */ 
  96:./Lib/Src/stm32f4xx_i2c.c **** 
  97:./Lib/Src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
  98:./Lib/Src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
  99:./Lib/Src/stm32f4xx_i2c.c **** 
 100:./Lib/Src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 101:./Lib/Src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 102:./Lib/Src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 103:./Lib/Src/stm32f4xx_i2c.c **** 
 104:./Lib/Src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 105:./Lib/Src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 106:./Lib/Src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 107:./Lib/Src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 108:./Lib/Src/stm32f4xx_i2c.c **** 
 109:./Lib/Src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 110:./Lib/Src/stm32f4xx_i2c.c ****   * @{
 111:./Lib/Src/stm32f4xx_i2c.c ****   */
 112:./Lib/Src/stm32f4xx_i2c.c **** 
 113:./Lib/Src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 114:./Lib/Src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 115:./Lib/Src/stm32f4xx_i2c.c ****  *
 116:./Lib/Src/stm32f4xx_i2c.c **** @verbatim   
 117:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
 118:./Lib/Src/stm32f4xx_i2c.c ****             ##### Initialization and Configuration functions #####
 119:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================  
 120:./Lib/Src/stm32f4xx_i2c.c **** 
 121:./Lib/Src/stm32f4xx_i2c.c **** @endverbatim
 122:./Lib/Src/stm32f4xx_i2c.c ****   * @{
 123:./Lib/Src/stm32f4xx_i2c.c ****   */
 124:./Lib/Src/stm32f4xx_i2c.c **** 
 125:./Lib/Src/stm32f4xx_i2c.c **** /**
 126:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 127:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 128:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 129:./Lib/Src/stm32f4xx_i2c.c ****   */
 130:./Lib/Src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 131:./Lib/Src/stm32f4xx_i2c.c **** {
  29              		.loc 1 131 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccqephDo.s 			page 4


 132:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 133:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 134:./Lib/Src/stm32f4xx_i2c.c **** 
 135:./Lib/Src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  42              		.loc 1 135 6
  43 0008 7B68     		ldr	r3, [r7, #4]
  44 000a 174A     		ldr	r2, .L6
  45 000c 9342     		cmp	r3, r2
  46 000e 0AD1     		bne	.L2
 136:./Lib/Src/stm32f4xx_i2c.c ****   {
 137:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 138:./Lib/Src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  47              		.loc 1 138 5
  48 0010 0121     		movs	r1, #1
  49 0012 4FF40010 		mov	r0, #2097152
  50 0016 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 139:./Lib/Src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 140:./Lib/Src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  51              		.loc 1 140 5
  52 001a 0021     		movs	r1, #0
  53 001c 4FF40010 		mov	r0, #2097152
  54 0020 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:./Lib/Src/stm32f4xx_i2c.c ****   }
 142:./Lib/Src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
 143:./Lib/Src/stm32f4xx_i2c.c ****   {
 144:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 145:./Lib/Src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 146:./Lib/Src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 147:./Lib/Src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 148:./Lib/Src/stm32f4xx_i2c.c ****   }
 149:./Lib/Src/stm32f4xx_i2c.c ****   else 
 150:./Lib/Src/stm32f4xx_i2c.c ****   {
 151:./Lib/Src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
 152:./Lib/Src/stm32f4xx_i2c.c ****     {
 153:./Lib/Src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 154:./Lib/Src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 155:./Lib/Src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 156:./Lib/Src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 157:./Lib/Src/stm32f4xx_i2c.c ****     }
 158:./Lib/Src/stm32f4xx_i2c.c ****   }
 159:./Lib/Src/stm32f4xx_i2c.c **** }
  55              		.loc 1 159 1
  56 0024 1CE0     		b	.L5
  57              	.L2:
 142:./Lib/Src/stm32f4xx_i2c.c ****   {
  58              		.loc 1 142 11
  59 0026 7B68     		ldr	r3, [r7, #4]
  60 0028 104A     		ldr	r2, .L6+4
  61 002a 9342     		cmp	r3, r2
  62 002c 0AD1     		bne	.L4
 145:./Lib/Src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
  63              		.loc 1 145 5
  64 002e 0121     		movs	r1, #1
  65 0030 4FF48000 		mov	r0, #4194304
  66 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 147:./Lib/Src/stm32f4xx_i2c.c ****   }
  67              		.loc 1 147 5
ARM GAS  /tmp/ccqephDo.s 			page 5


  68 0038 0021     		movs	r1, #0
  69 003a 4FF48000 		mov	r0, #4194304
  70 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  71              		.loc 1 159 1
  72 0042 0DE0     		b	.L5
  73              	.L4:
 151:./Lib/Src/stm32f4xx_i2c.c ****     {
  74              		.loc 1 151 8
  75 0044 7B68     		ldr	r3, [r7, #4]
  76 0046 0A4A     		ldr	r2, .L6+8
  77 0048 9342     		cmp	r3, r2
  78 004a 09D1     		bne	.L5
 154:./Lib/Src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
  79              		.loc 1 154 7
  80 004c 0121     		movs	r1, #1
  81 004e 4FF40000 		mov	r0, #8388608
  82 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 156:./Lib/Src/stm32f4xx_i2c.c ****     }
  83              		.loc 1 156 7
  84 0056 0021     		movs	r1, #0
  85 0058 4FF40000 		mov	r0, #8388608
  86 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  87              	.L5:
  88              		.loc 1 159 1
  89 0060 00BF     		nop
  90 0062 0837     		adds	r7, r7, #8
  91              		.cfi_def_cfa_offset 8
  92 0064 BD46     		mov	sp, r7
  93              		.cfi_def_cfa_register 13
  94              		@ sp needed
  95 0066 80BD     		pop	{r7, pc}
  96              	.L7:
  97              		.align	2
  98              	.L6:
  99 0068 00540040 		.word	1073763328
 100 006c 00580040 		.word	1073764352
 101 0070 005C0040 		.word	1073765376
 102              		.cfi_endproc
 103              	.LFE123:
 105              		.section	.text.I2C_Init,"ax",%progbits
 106              		.align	1
 107              		.global	I2C_Init
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 112              	I2C_Init:
 113              	.LFB124:
 160:./Lib/Src/stm32f4xx_i2c.c **** 
 161:./Lib/Src/stm32f4xx_i2c.c **** /**
 162:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 163:./Lib/Src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 164:./Lib/Src/stm32f4xx_i2c.c ****   *           
 165:./Lib/Src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 166:./Lib/Src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 167:./Lib/Src/stm32f4xx_i2c.c ****   *           
 168:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 169:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
ARM GAS  /tmp/ccqephDo.s 			page 6


 170:./Lib/Src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 171:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 172:./Lib/Src/stm32f4xx_i2c.c ****   */
 173:./Lib/Src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 174:./Lib/Src/stm32f4xx_i2c.c **** {
 114              		.loc 1 174 1
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 40
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              		.cfi_def_cfa_offset 8
 120              		.cfi_offset 7, -8
 121              		.cfi_offset 14, -4
 122 0002 8AB0     		sub	sp, sp, #40
 123              		.cfi_def_cfa_offset 48
 124 0004 00AF     		add	r7, sp, #0
 125              		.cfi_def_cfa_register 7
 126 0006 7860     		str	r0, [r7, #4]
 127 0008 3960     		str	r1, [r7]
 175:./Lib/Src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 128              		.loc 1 175 12
 129 000a 0023     		movs	r3, #0
 130 000c FB84     		strh	r3, [r7, #38]	@ movhi
 131              		.loc 1 175 24
 132 000e 0023     		movs	r3, #0
 133 0010 7B84     		strh	r3, [r7, #34]	@ movhi
 176:./Lib/Src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 134              		.loc 1 176 12
 135 0012 0423     		movs	r3, #4
 136 0014 BB84     		strh	r3, [r7, #36]	@ movhi
 177:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 137              		.loc 1 177 12
 138 0016 574B     		ldr	r3, .L15
 139 0018 FB61     		str	r3, [r7, #28]
 178:./Lib/Src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 179:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 180:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 181:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 182:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 183:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 184:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 185:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 186:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 187:./Lib/Src/stm32f4xx_i2c.c **** 
 188:./Lib/Src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 189:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 190:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 140              		.loc 1 190 10
 141 001a 7B68     		ldr	r3, [r7, #4]
 142 001c 9B88     		ldrh	r3, [r3, #4]	@ movhi
 143 001e FB84     		strh	r3, [r7, #38]	@ movhi
 191:./Lib/Src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 192:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 144              		.loc 1 192 10
 145 0020 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 146 0022 23F03F03 		bic	r3, r3, #63
 147 0026 FB84     		strh	r3, [r7, #38]	@ movhi
ARM GAS  /tmp/ccqephDo.s 			page 7


 193:./Lib/Src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 194:./Lib/Src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 148              		.loc 1 194 3
 149 0028 07F10C03 		add	r3, r7, #12
 150 002c 1846     		mov	r0, r3
 151 002e FFF7FEFF 		bl	RCC_GetClocksFreq
 195:./Lib/Src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 152              		.loc 1 195 9
 153 0032 7B69     		ldr	r3, [r7, #20]
 154 0034 FB61     		str	r3, [r7, #28]
 196:./Lib/Src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 197:./Lib/Src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 155              		.loc 1 197 32
 156 0036 FB69     		ldr	r3, [r7, #28]
 157 0038 4F4A     		ldr	r2, .L15+4
 158 003a A2FB0323 		umull	r2, r3, r2, r3
 159 003e 9B0C     		lsrs	r3, r3, #18
 160              		.loc 1 197 13
 161 0040 7B84     		strh	r3, [r7, #34]	@ movhi
 198:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 162              		.loc 1 198 10
 163 0042 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 164 0044 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 165 0046 1343     		orrs	r3, r3, r2
 166 0048 FB84     		strh	r3, [r7, #38]	@ movhi
 199:./Lib/Src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 200:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 167              		.loc 1 200 13
 168 004a 7B68     		ldr	r3, [r7, #4]
 169 004c FA8C     		ldrh	r2, [r7, #38]	@ movhi
 170 004e 9A80     		strh	r2, [r3, #4]	@ movhi
 201:./Lib/Src/stm32f4xx_i2c.c **** 
 202:./Lib/Src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 203:./Lib/Src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 204:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 171              		.loc 1 204 7
 172 0050 7B68     		ldr	r3, [r7, #4]
 173 0052 1B88     		ldrh	r3, [r3]	@ movhi
 174 0054 9BB2     		uxth	r3, r3
 175              		.loc 1 204 13
 176 0056 23F00103 		bic	r3, r3, #1
 177 005a 9AB2     		uxth	r2, r3
 178 005c 7B68     		ldr	r3, [r7, #4]
 179 005e 1A80     		strh	r2, [r3]	@ movhi
 205:./Lib/Src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 206:./Lib/Src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 207:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg = 0;
 180              		.loc 1 207 10
 181 0060 0023     		movs	r3, #0
 182 0062 FB84     		strh	r3, [r7, #38]	@ movhi
 208:./Lib/Src/stm32f4xx_i2c.c **** 
 209:./Lib/Src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 210:./Lib/Src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 183              		.loc 1 210 21
 184 0064 3B68     		ldr	r3, [r7]
 185 0066 1B68     		ldr	r3, [r3]
 186              		.loc 1 210 6
ARM GAS  /tmp/ccqephDo.s 			page 8


 187 0068 444A     		ldr	r2, .L15+8
 188 006a 9342     		cmp	r3, r2
 189 006c 15D8     		bhi	.L9
 211:./Lib/Src/stm32f4xx_i2c.c ****   {
 212:./Lib/Src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 213:./Lib/Src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 190              		.loc 1 213 48
 191 006e 3B68     		ldr	r3, [r7]
 192 0070 1B68     		ldr	r3, [r3]
 193              		.loc 1 213 65
 194 0072 5B00     		lsls	r3, r3, #1
 195              		.loc 1 213 31
 196 0074 FA69     		ldr	r2, [r7, #28]
 197 0076 B2FBF3F3 		udiv	r3, r2, r3
 198              		.loc 1 213 12
 199 007a BB84     		strh	r3, [r7, #36]	@ movhi
 214:./Lib/Src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 215:./Lib/Src/stm32f4xx_i2c.c ****     if (result < 0x04)
 200              		.loc 1 215 8
 201 007c BB8C     		ldrh	r3, [r7, #36]
 202 007e 032B     		cmp	r3, #3
 203 0080 01D8     		bhi	.L10
 216:./Lib/Src/stm32f4xx_i2c.c ****     {
 217:./Lib/Src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 218:./Lib/Src/stm32f4xx_i2c.c ****       result = 0x04;  
 204              		.loc 1 218 14
 205 0082 0423     		movs	r3, #4
 206 0084 BB84     		strh	r3, [r7, #36]	@ movhi
 207              	.L10:
 219:./Lib/Src/stm32f4xx_i2c.c ****     }
 220:./Lib/Src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 221:./Lib/Src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 208              		.loc 1 221 12
 209 0086 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 210 0088 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 211 008a 1343     		orrs	r3, r3, r2
 212 008c FB84     		strh	r3, [r7, #38]	@ movhi
 222:./Lib/Src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 223:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 213              		.loc 1 223 29
 214 008e 7B8C     		ldrh	r3, [r7, #34]	@ movhi
 215 0090 0133     		adds	r3, r3, #1
 216 0092 9AB2     		uxth	r2, r3
 217              		.loc 1 223 17
 218 0094 7B68     		ldr	r3, [r7, #4]
 219 0096 1A84     		strh	r2, [r3, #32]	@ movhi
 220 0098 40E0     		b	.L11
 221              	.L9:
 224:./Lib/Src/stm32f4xx_i2c.c ****   }
 225:./Lib/Src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 226:./Lib/Src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 227:./Lib/Src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 228:./Lib/Src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 229:./Lib/Src/stm32f4xx_i2c.c ****   {
 230:./Lib/Src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 222              		.loc 1 230 23
 223 009a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccqephDo.s 			page 9


 224 009c DB88     		ldrh	r3, [r3, #6]
 225              		.loc 1 230 8
 226 009e 4BF6FF72 		movw	r2, #49151
 227 00a2 9342     		cmp	r3, r2
 228 00a4 09D1     		bne	.L12
 231:./Lib/Src/stm32f4xx_i2c.c ****     {
 232:./Lib/Src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 233:./Lib/Src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 229              		.loc 1 233 50
 230 00a6 3B68     		ldr	r3, [r7]
 231 00a8 1A68     		ldr	r2, [r3]
 232              		.loc 1 233 67
 233 00aa 1346     		mov	r3, r2
 234 00ac 5B00     		lsls	r3, r3, #1
 235 00ae 1344     		add	r3, r3, r2
 236              		.loc 1 233 33
 237 00b0 FA69     		ldr	r2, [r7, #28]
 238 00b2 B2FBF3F3 		udiv	r3, r2, r3
 239              		.loc 1 233 14
 240 00b6 BB84     		strh	r3, [r7, #36]	@ movhi
 241 00b8 0EE0     		b	.L13
 242              	.L12:
 234:./Lib/Src/stm32f4xx_i2c.c ****     }
 235:./Lib/Src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 236:./Lib/Src/stm32f4xx_i2c.c ****     {
 237:./Lib/Src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 238:./Lib/Src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 243              		.loc 1 238 50
 244 00ba 3B68     		ldr	r3, [r7]
 245 00bc 1A68     		ldr	r2, [r3]
 246              		.loc 1 238 67
 247 00be 1346     		mov	r3, r2
 248 00c0 9B00     		lsls	r3, r3, #2
 249 00c2 1344     		add	r3, r3, r2
 250 00c4 9A00     		lsls	r2, r3, #2
 251 00c6 1344     		add	r3, r3, r2
 252              		.loc 1 238 33
 253 00c8 FA69     		ldr	r2, [r7, #28]
 254 00ca B2FBF3F3 		udiv	r3, r2, r3
 255              		.loc 1 238 14
 256 00ce BB84     		strh	r3, [r7, #36]	@ movhi
 239:./Lib/Src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 240:./Lib/Src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 257              		.loc 1 240 14
 258 00d0 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 259 00d2 43F48043 		orr	r3, r3, #16384
 260 00d6 BB84     		strh	r3, [r7, #36]	@ movhi
 261              	.L13:
 241:./Lib/Src/stm32f4xx_i2c.c ****     }
 242:./Lib/Src/stm32f4xx_i2c.c **** 
 243:./Lib/Src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 244:./Lib/Src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 262              		.loc 1 244 17
 263 00d8 BB8C     		ldrh	r3, [r7, #36]
 264 00da C3F30B03 		ubfx	r3, r3, #0, #12
 265              		.loc 1 244 8
 266 00de 002B     		cmp	r3, #0
ARM GAS  /tmp/ccqephDo.s 			page 10


 267 00e0 03D1     		bne	.L14
 245:./Lib/Src/stm32f4xx_i2c.c ****     {
 246:./Lib/Src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 247:./Lib/Src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 268              		.loc 1 247 14
 269 00e2 BB8C     		ldrh	r3, [r7, #36]	@ movhi
 270 00e4 43F00103 		orr	r3, r3, #1
 271 00e8 BB84     		strh	r3, [r7, #36]	@ movhi
 272              	.L14:
 248:./Lib/Src/stm32f4xx_i2c.c ****     }
 249:./Lib/Src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 250:./Lib/Src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 273              		.loc 1 250 12
 274 00ea BA8C     		ldrh	r2, [r7, #36]	@ movhi
 275 00ec FB8C     		ldrh	r3, [r7, #38]	@ movhi
 276 00ee 1343     		orrs	r3, r3, r2
 277 00f0 9BB2     		uxth	r3, r3
 278 00f2 6FEA4343 		mvn	r3, r3, lsl #17
 279 00f6 6FEA5343 		mvn	r3, r3, lsr #17
 280 00fa FB84     		strh	r3, [r7, #38]	@ movhi
 251:./Lib/Src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 252:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 281              		.loc 1 252 42
 282 00fc 7B8C     		ldrh	r3, [r7, #34]
 283 00fe 4FF49672 		mov	r2, #300
 284 0102 02FB03F3 		mul	r3, r2, r3
 285              		.loc 1 252 59
 286 0106 1E4A     		ldr	r2, .L15+12
 287 0108 82FB0312 		smull	r1, r2, r2, r3
 288 010c 9211     		asrs	r2, r2, #6
 289 010e DB17     		asrs	r3, r3, #31
 290 0110 D31A     		subs	r3, r2, r3
 291              		.loc 1 252 19
 292 0112 9BB2     		uxth	r3, r3
 293 0114 0133     		adds	r3, r3, #1
 294 0116 9AB2     		uxth	r2, r3
 295              		.loc 1 252 17
 296 0118 7B68     		ldr	r3, [r7, #4]
 297 011a 1A84     		strh	r2, [r3, #32]	@ movhi
 298              	.L11:
 253:./Lib/Src/stm32f4xx_i2c.c ****   }
 254:./Lib/Src/stm32f4xx_i2c.c **** 
 255:./Lib/Src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 256:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 299              		.loc 1 256 13
 300 011c 7B68     		ldr	r3, [r7, #4]
 301 011e FA8C     		ldrh	r2, [r7, #38]	@ movhi
 302 0120 9A83     		strh	r2, [r3, #28]	@ movhi
 257:./Lib/Src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 258:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 303              		.loc 1 258 7
 304 0122 7B68     		ldr	r3, [r7, #4]
 305 0124 1B88     		ldrh	r3, [r3]	@ movhi
 306 0126 9BB2     		uxth	r3, r3
 307              		.loc 1 258 13
 308 0128 43F00103 		orr	r3, r3, #1
 309 012c 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccqephDo.s 			page 11


 310 012e 7B68     		ldr	r3, [r7, #4]
 311 0130 1A80     		strh	r2, [r3]	@ movhi
 259:./Lib/Src/stm32f4xx_i2c.c **** 
 260:./Lib/Src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 261:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 262:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 312              		.loc 1 262 10
 313 0132 7B68     		ldr	r3, [r7, #4]
 314 0134 1B88     		ldrh	r3, [r3]	@ movhi
 315 0136 FB84     		strh	r3, [r7, #38]	@ movhi
 263:./Lib/Src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 264:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 316              		.loc 1 264 10
 317 0138 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 318 013a 23F48163 		bic	r3, r3, #1032
 319 013e 23F00203 		bic	r3, r3, #2
 320 0142 FB84     		strh	r3, [r7, #38]	@ movhi
 265:./Lib/Src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 266:./Lib/Src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 267:./Lib/Src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 268:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 321              		.loc 1 268 48
 322 0144 3B68     		ldr	r3, [r7]
 323 0146 9A88     		ldrh	r2, [r3, #4]
 324              		.loc 1 268 75
 325 0148 3B68     		ldr	r3, [r7]
 326 014a 5B89     		ldrh	r3, [r3, #10]
 327              		.loc 1 268 13
 328 014c 1343     		orrs	r3, r3, r2
 329 014e 9AB2     		uxth	r2, r3
 330              		.loc 1 268 10
 331 0150 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 332 0152 1343     		orrs	r3, r3, r2
 333 0154 FB84     		strh	r3, [r7, #38]	@ movhi
 269:./Lib/Src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 270:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 334              		.loc 1 270 13
 335 0156 7B68     		ldr	r3, [r7, #4]
 336 0158 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 337 015a 1A80     		strh	r2, [r3]	@ movhi
 271:./Lib/Src/stm32f4xx_i2c.c **** 
 272:./Lib/Src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 273:./Lib/Src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 274:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 338              		.loc 1 274 31
 339 015c 3B68     		ldr	r3, [r7]
 340 015e 9A89     		ldrh	r2, [r3, #12]
 341              		.loc 1 274 73
 342 0160 3B68     		ldr	r3, [r7]
 343 0162 1B89     		ldrh	r3, [r3, #8]
 344              		.loc 1 274 14
 345 0164 1343     		orrs	r3, r3, r2
 346 0166 9AB2     		uxth	r2, r3
 347 0168 7B68     		ldr	r3, [r7, #4]
 348 016a 1A81     		strh	r2, [r3, #8]	@ movhi
 275:./Lib/Src/stm32f4xx_i2c.c **** }
 349              		.loc 1 275 1
ARM GAS  /tmp/ccqephDo.s 			page 12


 350 016c 00BF     		nop
 351 016e 2837     		adds	r7, r7, #40
 352              		.cfi_def_cfa_offset 8
 353 0170 BD46     		mov	sp, r7
 354              		.cfi_def_cfa_register 13
 355              		@ sp needed
 356 0172 80BD     		pop	{r7, pc}
 357              	.L16:
 358              		.align	2
 359              	.L15:
 360 0174 00127A00 		.word	8000000
 361 0178 83DE1B43 		.word	1125899907
 362 017c A0860100 		.word	100000
 363 0180 D34D6210 		.word	274877907
 364              		.cfi_endproc
 365              	.LFE124:
 367              		.section	.text.I2C_StructInit,"ax",%progbits
 368              		.align	1
 369              		.global	I2C_StructInit
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 374              	I2C_StructInit:
 375              	.LFB125:
 276:./Lib/Src/stm32f4xx_i2c.c **** 
 277:./Lib/Src/stm32f4xx_i2c.c **** /**
 278:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 279:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 280:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 281:./Lib/Src/stm32f4xx_i2c.c ****   */
 282:./Lib/Src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 283:./Lib/Src/stm32f4xx_i2c.c **** {
 376              		.loc 1 283 1
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 8
 379              		@ frame_needed = 1, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381 0000 80B4     		push	{r7}
 382              		.cfi_def_cfa_offset 4
 383              		.cfi_offset 7, -4
 384 0002 83B0     		sub	sp, sp, #12
 385              		.cfi_def_cfa_offset 16
 386 0004 00AF     		add	r7, sp, #0
 387              		.cfi_def_cfa_register 7
 388 0006 7860     		str	r0, [r7, #4]
 284:./Lib/Src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 285:./Lib/Src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 286:./Lib/Src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 389              		.loc 1 286 34
 390 0008 7B68     		ldr	r3, [r7, #4]
 391 000a 41F28832 		movw	r2, #5000
 392 000e 1A60     		str	r2, [r3]
 287:./Lib/Src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 288:./Lib/Src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 393              		.loc 1 288 28
 394 0010 7B68     		ldr	r3, [r7, #4]
 395 0012 0022     		movs	r2, #0
ARM GAS  /tmp/ccqephDo.s 			page 13


 396 0014 9A80     		strh	r2, [r3, #4]	@ movhi
 289:./Lib/Src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 290:./Lib/Src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 397              		.loc 1 290 33
 398 0016 7B68     		ldr	r3, [r7, #4]
 399 0018 4BF6FF72 		movw	r2, #49151
 400 001c DA80     		strh	r2, [r3, #6]	@ movhi
 291:./Lib/Src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 292:./Lib/Src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 401              		.loc 1 292 35
 402 001e 7B68     		ldr	r3, [r7, #4]
 403 0020 0022     		movs	r2, #0
 404 0022 1A81     		strh	r2, [r3, #8]	@ movhi
 293:./Lib/Src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 294:./Lib/Src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 405              		.loc 1 294 27
 406 0024 7B68     		ldr	r3, [r7, #4]
 407 0026 0022     		movs	r2, #0
 408 0028 5A81     		strh	r2, [r3, #10]	@ movhi
 295:./Lib/Src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 296:./Lib/Src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 409              		.loc 1 296 43
 410 002a 7B68     		ldr	r3, [r7, #4]
 411 002c 4FF48042 		mov	r2, #16384
 412 0030 9A81     		strh	r2, [r3, #12]	@ movhi
 297:./Lib/Src/stm32f4xx_i2c.c **** }
 413              		.loc 1 297 1
 414 0032 00BF     		nop
 415 0034 0C37     		adds	r7, r7, #12
 416              		.cfi_def_cfa_offset 4
 417 0036 BD46     		mov	sp, r7
 418              		.cfi_def_cfa_register 13
 419              		@ sp needed
 420 0038 5DF8047B 		ldr	r7, [sp], #4
 421              		.cfi_restore 7
 422              		.cfi_def_cfa_offset 0
 423 003c 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE125:
 427              		.section	.text.I2C_Cmd,"ax",%progbits
 428              		.align	1
 429              		.global	I2C_Cmd
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 434              	I2C_Cmd:
 435              	.LFB126:
 298:./Lib/Src/stm32f4xx_i2c.c **** 
 299:./Lib/Src/stm32f4xx_i2c.c **** /**
 300:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 301:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 302:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 303:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 304:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 305:./Lib/Src/stm32f4xx_i2c.c ****   */
 306:./Lib/Src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 307:./Lib/Src/stm32f4xx_i2c.c **** {
ARM GAS  /tmp/ccqephDo.s 			page 14


 436              		.loc 1 307 1
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 8
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441 0000 80B4     		push	{r7}
 442              		.cfi_def_cfa_offset 4
 443              		.cfi_offset 7, -4
 444 0002 83B0     		sub	sp, sp, #12
 445              		.cfi_def_cfa_offset 16
 446 0004 00AF     		add	r7, sp, #0
 447              		.cfi_def_cfa_register 7
 448 0006 7860     		str	r0, [r7, #4]
 449 0008 0B46     		mov	r3, r1
 450 000a FB70     		strb	r3, [r7, #3]
 308:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 309:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 310:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 311:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 451              		.loc 1 311 6
 452 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 453 000e 002B     		cmp	r3, #0
 454 0010 08D0     		beq	.L19
 312:./Lib/Src/stm32f4xx_i2c.c ****   {
 313:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 314:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 455              		.loc 1 314 9
 456 0012 7B68     		ldr	r3, [r7, #4]
 457 0014 1B88     		ldrh	r3, [r3]	@ movhi
 458 0016 9BB2     		uxth	r3, r3
 459              		.loc 1 314 15
 460 0018 43F00103 		orr	r3, r3, #1
 461 001c 9AB2     		uxth	r2, r3
 462 001e 7B68     		ldr	r3, [r7, #4]
 463 0020 1A80     		strh	r2, [r3]	@ movhi
 315:./Lib/Src/stm32f4xx_i2c.c ****   }
 316:./Lib/Src/stm32f4xx_i2c.c ****   else
 317:./Lib/Src/stm32f4xx_i2c.c ****   {
 318:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 319:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 320:./Lib/Src/stm32f4xx_i2c.c ****   }
 321:./Lib/Src/stm32f4xx_i2c.c **** }
 464              		.loc 1 321 1
 465 0022 07E0     		b	.L21
 466              	.L19:
 319:./Lib/Src/stm32f4xx_i2c.c ****   }
 467              		.loc 1 319 9
 468 0024 7B68     		ldr	r3, [r7, #4]
 469 0026 1B88     		ldrh	r3, [r3]	@ movhi
 470 0028 9BB2     		uxth	r3, r3
 319:./Lib/Src/stm32f4xx_i2c.c ****   }
 471              		.loc 1 319 15
 472 002a 23F00103 		bic	r3, r3, #1
 473 002e 9AB2     		uxth	r2, r3
 474 0030 7B68     		ldr	r3, [r7, #4]
 475 0032 1A80     		strh	r2, [r3]	@ movhi
 476              	.L21:
ARM GAS  /tmp/ccqephDo.s 			page 15


 477              		.loc 1 321 1
 478 0034 00BF     		nop
 479 0036 0C37     		adds	r7, r7, #12
 480              		.cfi_def_cfa_offset 4
 481 0038 BD46     		mov	sp, r7
 482              		.cfi_def_cfa_register 13
 483              		@ sp needed
 484 003a 5DF8047B 		ldr	r7, [sp], #4
 485              		.cfi_restore 7
 486              		.cfi_def_cfa_offset 0
 487 003e 7047     		bx	lr
 488              		.cfi_endproc
 489              	.LFE126:
 491              		.section	.text.I2C_AnalogFilterCmd,"ax",%progbits
 492              		.align	1
 493              		.global	I2C_AnalogFilterCmd
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 498              	I2C_AnalogFilterCmd:
 499              	.LFB127:
 322:./Lib/Src/stm32f4xx_i2c.c **** 
 323:./Lib/Src/stm32f4xx_i2c.c **** /**
 324:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the Analog filter of I2C peripheral.
 325:./Lib/Src/stm32f4xx_i2c.c ****   * 
 326:./Lib/Src/stm32f4xx_i2c.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx, STM32F401xx, STM32F410xx and
 327:./Lib/Src/stm32f4xx_i2c.c ****   *        
 328:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 329:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the Analog filter. 
 330:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 331:./Lib/Src/stm32f4xx_i2c.c ****   * @note   This function should be called before initializing and enabling
 332:./Lib/Src/stm32f4xx_i2c.c ****             the I2C Peripheral.
 333:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 334:./Lib/Src/stm32f4xx_i2c.c ****   */
 335:./Lib/Src/stm32f4xx_i2c.c **** void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 336:./Lib/Src/stm32f4xx_i2c.c **** {
 500              		.loc 1 336 1
 501              		.cfi_startproc
 502              		@ args = 0, pretend = 0, frame = 8
 503              		@ frame_needed = 1, uses_anonymous_args = 0
 504              		@ link register save eliminated.
 505 0000 80B4     		push	{r7}
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
 508 0002 83B0     		sub	sp, sp, #12
 509              		.cfi_def_cfa_offset 16
 510 0004 00AF     		add	r7, sp, #0
 511              		.cfi_def_cfa_register 7
 512 0006 7860     		str	r0, [r7, #4]
 513 0008 0B46     		mov	r3, r1
 514 000a FB70     		strb	r3, [r7, #3]
 337:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 338:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 339:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 340:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 515              		.loc 1 340 6
 516 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccqephDo.s 			page 16


 517 000e 002B     		cmp	r3, #0
 518 0010 08D0     		beq	.L23
 341:./Lib/Src/stm32f4xx_i2c.c ****   {
 342:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the analog filter */
 343:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 519              		.loc 1 343 9
 520 0012 7B68     		ldr	r3, [r7, #4]
 521 0014 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 522 0016 9BB2     		uxth	r3, r3
 523              		.loc 1 343 16
 524 0018 23F01003 		bic	r3, r3, #16
 525 001c 9AB2     		uxth	r2, r3
 526 001e 7B68     		ldr	r3, [r7, #4]
 527 0020 9A84     		strh	r2, [r3, #36]	@ movhi
 344:./Lib/Src/stm32f4xx_i2c.c ****   }
 345:./Lib/Src/stm32f4xx_i2c.c ****   else
 346:./Lib/Src/stm32f4xx_i2c.c ****   {
 347:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the analog filter */
 348:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->FLTR |= I2C_FLTR_ANOFF;
 349:./Lib/Src/stm32f4xx_i2c.c ****   }
 350:./Lib/Src/stm32f4xx_i2c.c **** }
 528              		.loc 1 350 1
 529 0022 07E0     		b	.L25
 530              	.L23:
 348:./Lib/Src/stm32f4xx_i2c.c ****   }
 531              		.loc 1 348 9
 532 0024 7B68     		ldr	r3, [r7, #4]
 533 0026 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 534 0028 9BB2     		uxth	r3, r3
 348:./Lib/Src/stm32f4xx_i2c.c ****   }
 535              		.loc 1 348 16
 536 002a 43F01003 		orr	r3, r3, #16
 537 002e 9AB2     		uxth	r2, r3
 538 0030 7B68     		ldr	r3, [r7, #4]
 539 0032 9A84     		strh	r2, [r3, #36]	@ movhi
 540              	.L25:
 541              		.loc 1 350 1
 542 0034 00BF     		nop
 543 0036 0C37     		adds	r7, r7, #12
 544              		.cfi_def_cfa_offset 4
 545 0038 BD46     		mov	sp, r7
 546              		.cfi_def_cfa_register 13
 547              		@ sp needed
 548 003a 5DF8047B 		ldr	r7, [sp], #4
 549              		.cfi_restore 7
 550              		.cfi_def_cfa_offset 0
 551 003e 7047     		bx	lr
 552              		.cfi_endproc
 553              	.LFE127:
 555              		.section	.text.I2C_DigitalFilterConfig,"ax",%progbits
 556              		.align	1
 557              		.global	I2C_DigitalFilterConfig
 558              		.syntax unified
 559              		.thumb
 560              		.thumb_func
 562              	I2C_DigitalFilterConfig:
 563              	.LFB128:
ARM GAS  /tmp/ccqephDo.s 			page 17


 351:./Lib/Src/stm32f4xx_i2c.c **** 
 352:./Lib/Src/stm32f4xx_i2c.c **** /**
 353:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Configures the Digital noise filter of I2C peripheral.
 354:./Lib/Src/stm32f4xx_i2c.c ****   * 
 355:./Lib/Src/stm32f4xx_i2c.c ****   * @note   This function can be used only for STM32F42xxx/STM3243xxx, STM32F401xx, STM32F410xx and
 356:./Lib/Src/stm32f4xx_i2c.c ****   *       
 357:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 358:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_DigitalFilter: Coefficient of digital noise filter. 
 359:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be a number between 0x00 and 0x0F.
 360:./Lib/Src/stm32f4xx_i2c.c ****   * @note   This function should be called before initializing and enabling
 361:./Lib/Src/stm32f4xx_i2c.c ****             the I2C Peripheral.
 362:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 363:./Lib/Src/stm32f4xx_i2c.c ****   */
 364:./Lib/Src/stm32f4xx_i2c.c **** void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
 365:./Lib/Src/stm32f4xx_i2c.c **** {
 564              		.loc 1 365 1
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 16
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569 0000 80B4     		push	{r7}
 570              		.cfi_def_cfa_offset 4
 571              		.cfi_offset 7, -4
 572 0002 85B0     		sub	sp, sp, #20
 573              		.cfi_def_cfa_offset 24
 574 0004 00AF     		add	r7, sp, #0
 575              		.cfi_def_cfa_register 7
 576 0006 7860     		str	r0, [r7, #4]
 577 0008 0B46     		mov	r3, r1
 578 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 366:./Lib/Src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 579              		.loc 1 366 12
 580 000c 0023     		movs	r3, #0
 581 000e FB81     		strh	r3, [r7, #14]	@ movhi
 367:./Lib/Src/stm32f4xx_i2c.c ****   
 368:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 369:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 370:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
 371:./Lib/Src/stm32f4xx_i2c.c ****   
 372:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the old register value */
 373:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->FLTR;
 582              		.loc 1 373 10
 583 0010 7B68     		ldr	r3, [r7, #4]
 584 0012 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 585 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 374:./Lib/Src/stm32f4xx_i2c.c ****   
 375:./Lib/Src/stm32f4xx_i2c.c ****   /* Reset I2Cx DNF bit [3:0] */
 376:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 586              		.loc 1 376 10
 587 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 588 0018 23F00F03 		bic	r3, r3, #15
 589 001c FB81     		strh	r3, [r7, #14]	@ movhi
 377:./Lib/Src/stm32f4xx_i2c.c ****   
 378:./Lib/Src/stm32f4xx_i2c.c ****   /* Set I2Cx DNF coefficient */
 379:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 590              		.loc 1 379 13
 591 001e B7F90230 		ldrsh	r3, [r7, #2]
ARM GAS  /tmp/ccqephDo.s 			page 18


 592 0022 03F00F03 		and	r3, r3, #15
 593 0026 1AB2     		sxth	r2, r3
 594              		.loc 1 379 10
 595 0028 B7F90E30 		ldrsh	r3, [r7, #14]
 596 002c 1343     		orrs	r3, r3, r2
 597 002e 1BB2     		sxth	r3, r3
 598 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 380:./Lib/Src/stm32f4xx_i2c.c ****   
 381:./Lib/Src/stm32f4xx_i2c.c ****   /* Store the new register value */
 382:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->FLTR = tmpreg;
 599              		.loc 1 382 14
 600 0032 7B68     		ldr	r3, [r7, #4]
 601 0034 FA89     		ldrh	r2, [r7, #14]	@ movhi
 602 0036 9A84     		strh	r2, [r3, #36]	@ movhi
 383:./Lib/Src/stm32f4xx_i2c.c **** }
 603              		.loc 1 383 1
 604 0038 00BF     		nop
 605 003a 1437     		adds	r7, r7, #20
 606              		.cfi_def_cfa_offset 4
 607 003c BD46     		mov	sp, r7
 608              		.cfi_def_cfa_register 13
 609              		@ sp needed
 610 003e 5DF8047B 		ldr	r7, [sp], #4
 611              		.cfi_restore 7
 612              		.cfi_def_cfa_offset 0
 613 0042 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE128:
 617              		.section	.text.I2C_GenerateSTART,"ax",%progbits
 618              		.align	1
 619              		.global	I2C_GenerateSTART
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 624              	I2C_GenerateSTART:
 625              	.LFB129:
 384:./Lib/Src/stm32f4xx_i2c.c **** 
 385:./Lib/Src/stm32f4xx_i2c.c **** /**
 386:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 387:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 388:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 389:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None.
 391:./Lib/Src/stm32f4xx_i2c.c ****   */
 392:./Lib/Src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 393:./Lib/Src/stm32f4xx_i2c.c **** {
 626              		.loc 1 393 1
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 8
 629              		@ frame_needed = 1, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631 0000 80B4     		push	{r7}
 632              		.cfi_def_cfa_offset 4
 633              		.cfi_offset 7, -4
 634 0002 83B0     		sub	sp, sp, #12
 635              		.cfi_def_cfa_offset 16
 636 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccqephDo.s 			page 19


 637              		.cfi_def_cfa_register 7
 638 0006 7860     		str	r0, [r7, #4]
 639 0008 0B46     		mov	r3, r1
 640 000a FB70     		strb	r3, [r7, #3]
 394:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 395:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 396:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 641              		.loc 1 397 6
 642 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 643 000e 002B     		cmp	r3, #0
 644 0010 08D0     		beq	.L28
 398:./Lib/Src/stm32f4xx_i2c.c ****   {
 399:./Lib/Src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 400:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 645              		.loc 1 400 9
 646 0012 7B68     		ldr	r3, [r7, #4]
 647 0014 1B88     		ldrh	r3, [r3]	@ movhi
 648 0016 9BB2     		uxth	r3, r3
 649              		.loc 1 400 15
 650 0018 43F48073 		orr	r3, r3, #256
 651 001c 9AB2     		uxth	r2, r3
 652 001e 7B68     		ldr	r3, [r7, #4]
 653 0020 1A80     		strh	r2, [r3]	@ movhi
 401:./Lib/Src/stm32f4xx_i2c.c ****   }
 402:./Lib/Src/stm32f4xx_i2c.c ****   else
 403:./Lib/Src/stm32f4xx_i2c.c ****   {
 404:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 405:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 406:./Lib/Src/stm32f4xx_i2c.c ****   }
 407:./Lib/Src/stm32f4xx_i2c.c **** }
 654              		.loc 1 407 1
 655 0022 07E0     		b	.L30
 656              	.L28:
 405:./Lib/Src/stm32f4xx_i2c.c ****   }
 657              		.loc 1 405 9
 658 0024 7B68     		ldr	r3, [r7, #4]
 659 0026 1B88     		ldrh	r3, [r3]	@ movhi
 660 0028 9BB2     		uxth	r3, r3
 405:./Lib/Src/stm32f4xx_i2c.c ****   }
 661              		.loc 1 405 15
 662 002a 23F48073 		bic	r3, r3, #256
 663 002e 9AB2     		uxth	r2, r3
 664 0030 7B68     		ldr	r3, [r7, #4]
 665 0032 1A80     		strh	r2, [r3]	@ movhi
 666              	.L30:
 667              		.loc 1 407 1
 668 0034 00BF     		nop
 669 0036 0C37     		adds	r7, r7, #12
 670              		.cfi_def_cfa_offset 4
 671 0038 BD46     		mov	sp, r7
 672              		.cfi_def_cfa_register 13
 673              		@ sp needed
 674 003a 5DF8047B 		ldr	r7, [sp], #4
 675              		.cfi_restore 7
 676              		.cfi_def_cfa_offset 0
 677 003e 7047     		bx	lr
ARM GAS  /tmp/ccqephDo.s 			page 20


 678              		.cfi_endproc
 679              	.LFE129:
 681              		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 682              		.align	1
 683              		.global	I2C_GenerateSTOP
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 688              	I2C_GenerateSTOP:
 689              	.LFB130:
 408:./Lib/Src/stm32f4xx_i2c.c **** 
 409:./Lib/Src/stm32f4xx_i2c.c **** /**
 410:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 411:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 412:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 413:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 414:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None.
 415:./Lib/Src/stm32f4xx_i2c.c ****   */
 416:./Lib/Src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 417:./Lib/Src/stm32f4xx_i2c.c **** {
 690              		.loc 1 417 1
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 8
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695 0000 80B4     		push	{r7}
 696              		.cfi_def_cfa_offset 4
 697              		.cfi_offset 7, -4
 698 0002 83B0     		sub	sp, sp, #12
 699              		.cfi_def_cfa_offset 16
 700 0004 00AF     		add	r7, sp, #0
 701              		.cfi_def_cfa_register 7
 702 0006 7860     		str	r0, [r7, #4]
 703 0008 0B46     		mov	r3, r1
 704 000a FB70     		strb	r3, [r7, #3]
 418:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 419:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 420:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 421:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 705              		.loc 1 421 6
 706 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 707 000e 002B     		cmp	r3, #0
 708 0010 08D0     		beq	.L32
 422:./Lib/Src/stm32f4xx_i2c.c ****   {
 423:./Lib/Src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 424:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 709              		.loc 1 424 9
 710 0012 7B68     		ldr	r3, [r7, #4]
 711 0014 1B88     		ldrh	r3, [r3]	@ movhi
 712 0016 9BB2     		uxth	r3, r3
 713              		.loc 1 424 15
 714 0018 43F40073 		orr	r3, r3, #512
 715 001c 9AB2     		uxth	r2, r3
 716 001e 7B68     		ldr	r3, [r7, #4]
 717 0020 1A80     		strh	r2, [r3]	@ movhi
 425:./Lib/Src/stm32f4xx_i2c.c ****   }
 426:./Lib/Src/stm32f4xx_i2c.c ****   else
ARM GAS  /tmp/ccqephDo.s 			page 21


 427:./Lib/Src/stm32f4xx_i2c.c ****   {
 428:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 429:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 430:./Lib/Src/stm32f4xx_i2c.c ****   }
 431:./Lib/Src/stm32f4xx_i2c.c **** }
 718              		.loc 1 431 1
 719 0022 07E0     		b	.L34
 720              	.L32:
 429:./Lib/Src/stm32f4xx_i2c.c ****   }
 721              		.loc 1 429 9
 722 0024 7B68     		ldr	r3, [r7, #4]
 723 0026 1B88     		ldrh	r3, [r3]	@ movhi
 724 0028 9BB2     		uxth	r3, r3
 429:./Lib/Src/stm32f4xx_i2c.c ****   }
 725              		.loc 1 429 15
 726 002a 23F40073 		bic	r3, r3, #512
 727 002e 9AB2     		uxth	r2, r3
 728 0030 7B68     		ldr	r3, [r7, #4]
 729 0032 1A80     		strh	r2, [r3]	@ movhi
 730              	.L34:
 731              		.loc 1 431 1
 732 0034 00BF     		nop
 733 0036 0C37     		adds	r7, r7, #12
 734              		.cfi_def_cfa_offset 4
 735 0038 BD46     		mov	sp, r7
 736              		.cfi_def_cfa_register 13
 737              		@ sp needed
 738 003a 5DF8047B 		ldr	r7, [sp], #4
 739              		.cfi_restore 7
 740              		.cfi_def_cfa_offset 0
 741 003e 7047     		bx	lr
 742              		.cfi_endproc
 743              	.LFE130:
 745              		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 746              		.align	1
 747              		.global	I2C_Send7bitAddress
 748              		.syntax unified
 749              		.thumb
 750              		.thumb_func
 752              	I2C_Send7bitAddress:
 753              	.LFB131:
 432:./Lib/Src/stm32f4xx_i2c.c **** 
 433:./Lib/Src/stm32f4xx_i2c.c **** /**
 434:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 435:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 436:./Lib/Src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 437:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 438:./Lib/Src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 439:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 440:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 441:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 442:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None.
 443:./Lib/Src/stm32f4xx_i2c.c ****   */
 444:./Lib/Src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 445:./Lib/Src/stm32f4xx_i2c.c **** {
 754              		.loc 1 445 1
 755              		.cfi_startproc
ARM GAS  /tmp/ccqephDo.s 			page 22


 756              		@ args = 0, pretend = 0, frame = 8
 757              		@ frame_needed = 1, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759 0000 80B4     		push	{r7}
 760              		.cfi_def_cfa_offset 4
 761              		.cfi_offset 7, -4
 762 0002 83B0     		sub	sp, sp, #12
 763              		.cfi_def_cfa_offset 16
 764 0004 00AF     		add	r7, sp, #0
 765              		.cfi_def_cfa_register 7
 766 0006 7860     		str	r0, [r7, #4]
 767 0008 0B46     		mov	r3, r1
 768 000a FB70     		strb	r3, [r7, #3]
 769 000c 1346     		mov	r3, r2
 770 000e BB70     		strb	r3, [r7, #2]
 446:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 447:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 448:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 449:./Lib/Src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 450:./Lib/Src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 771              		.loc 1 450 6
 772 0010 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 773 0012 002B     		cmp	r3, #0
 774 0014 04D0     		beq	.L36
 451:./Lib/Src/stm32f4xx_i2c.c ****   {
 452:./Lib/Src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 453:./Lib/Src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 775              		.loc 1 453 13
 776 0016 FB78     		ldrb	r3, [r7, #3]
 777 0018 43F00103 		orr	r3, r3, #1
 778 001c FB70     		strb	r3, [r7, #3]
 779 001e 03E0     		b	.L37
 780              	.L36:
 454:./Lib/Src/stm32f4xx_i2c.c ****   }
 455:./Lib/Src/stm32f4xx_i2c.c ****   else
 456:./Lib/Src/stm32f4xx_i2c.c ****   {
 457:./Lib/Src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 458:./Lib/Src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 781              		.loc 1 458 13
 782 0020 FB78     		ldrb	r3, [r7, #3]
 783 0022 23F00103 		bic	r3, r3, #1
 784 0026 FB70     		strb	r3, [r7, #3]
 785              	.L37:
 459:./Lib/Src/stm32f4xx_i2c.c ****   }
 460:./Lib/Src/stm32f4xx_i2c.c ****   /* Send the address */
 461:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 786              		.loc 1 461 12
 787 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 788 002a 9AB2     		uxth	r2, r3
 789 002c 7B68     		ldr	r3, [r7, #4]
 790 002e 1A82     		strh	r2, [r3, #16]	@ movhi
 462:./Lib/Src/stm32f4xx_i2c.c **** }
 791              		.loc 1 462 1
 792 0030 00BF     		nop
 793 0032 0C37     		adds	r7, r7, #12
 794              		.cfi_def_cfa_offset 4
 795 0034 BD46     		mov	sp, r7
ARM GAS  /tmp/ccqephDo.s 			page 23


 796              		.cfi_def_cfa_register 13
 797              		@ sp needed
 798 0036 5DF8047B 		ldr	r7, [sp], #4
 799              		.cfi_restore 7
 800              		.cfi_def_cfa_offset 0
 801 003a 7047     		bx	lr
 802              		.cfi_endproc
 803              	.LFE131:
 805              		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 806              		.align	1
 807              		.global	I2C_AcknowledgeConfig
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 812              	I2C_AcknowledgeConfig:
 813              	.LFB132:
 463:./Lib/Src/stm32f4xx_i2c.c **** 
 464:./Lib/Src/stm32f4xx_i2c.c **** /**
 465:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 466:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 467:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 468:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 469:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None.
 470:./Lib/Src/stm32f4xx_i2c.c ****   */
 471:./Lib/Src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 472:./Lib/Src/stm32f4xx_i2c.c **** {
 814              		.loc 1 472 1
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 8
 817              		@ frame_needed = 1, uses_anonymous_args = 0
 818              		@ link register save eliminated.
 819 0000 80B4     		push	{r7}
 820              		.cfi_def_cfa_offset 4
 821              		.cfi_offset 7, -4
 822 0002 83B0     		sub	sp, sp, #12
 823              		.cfi_def_cfa_offset 16
 824 0004 00AF     		add	r7, sp, #0
 825              		.cfi_def_cfa_register 7
 826 0006 7860     		str	r0, [r7, #4]
 827 0008 0B46     		mov	r3, r1
 828 000a FB70     		strb	r3, [r7, #3]
 473:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 474:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 475:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 476:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 829              		.loc 1 476 6
 830 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 831 000e 002B     		cmp	r3, #0
 832 0010 08D0     		beq	.L39
 477:./Lib/Src/stm32f4xx_i2c.c ****   {
 478:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 479:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 833              		.loc 1 479 9
 834 0012 7B68     		ldr	r3, [r7, #4]
 835 0014 1B88     		ldrh	r3, [r3]	@ movhi
 836 0016 9BB2     		uxth	r3, r3
 837              		.loc 1 479 15
ARM GAS  /tmp/ccqephDo.s 			page 24


 838 0018 43F48063 		orr	r3, r3, #1024
 839 001c 9AB2     		uxth	r2, r3
 840 001e 7B68     		ldr	r3, [r7, #4]
 841 0020 1A80     		strh	r2, [r3]	@ movhi
 480:./Lib/Src/stm32f4xx_i2c.c ****   }
 481:./Lib/Src/stm32f4xx_i2c.c ****   else
 482:./Lib/Src/stm32f4xx_i2c.c ****   {
 483:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 484:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 485:./Lib/Src/stm32f4xx_i2c.c ****   }
 486:./Lib/Src/stm32f4xx_i2c.c **** }
 842              		.loc 1 486 1
 843 0022 07E0     		b	.L41
 844              	.L39:
 484:./Lib/Src/stm32f4xx_i2c.c ****   }
 845              		.loc 1 484 9
 846 0024 7B68     		ldr	r3, [r7, #4]
 847 0026 1B88     		ldrh	r3, [r3]	@ movhi
 848 0028 9BB2     		uxth	r3, r3
 484:./Lib/Src/stm32f4xx_i2c.c ****   }
 849              		.loc 1 484 15
 850 002a 23F48063 		bic	r3, r3, #1024
 851 002e 9AB2     		uxth	r2, r3
 852 0030 7B68     		ldr	r3, [r7, #4]
 853 0032 1A80     		strh	r2, [r3]	@ movhi
 854              	.L41:
 855              		.loc 1 486 1
 856 0034 00BF     		nop
 857 0036 0C37     		adds	r7, r7, #12
 858              		.cfi_def_cfa_offset 4
 859 0038 BD46     		mov	sp, r7
 860              		.cfi_def_cfa_register 13
 861              		@ sp needed
 862 003a 5DF8047B 		ldr	r7, [sp], #4
 863              		.cfi_restore 7
 864              		.cfi_def_cfa_offset 0
 865 003e 7047     		bx	lr
 866              		.cfi_endproc
 867              	.LFE132:
 869              		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 870              		.align	1
 871              		.global	I2C_OwnAddress2Config
 872              		.syntax unified
 873              		.thumb
 874              		.thumb_func
 876              	I2C_OwnAddress2Config:
 877              	.LFB133:
 487:./Lib/Src/stm32f4xx_i2c.c **** 
 488:./Lib/Src/stm32f4xx_i2c.c **** /**
 489:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 490:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 491:./Lib/Src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 492:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None.
 493:./Lib/Src/stm32f4xx_i2c.c ****   */
 494:./Lib/Src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 495:./Lib/Src/stm32f4xx_i2c.c **** {
 878              		.loc 1 495 1
ARM GAS  /tmp/ccqephDo.s 			page 25


 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 16
 881              		@ frame_needed = 1, uses_anonymous_args = 0
 882              		@ link register save eliminated.
 883 0000 80B4     		push	{r7}
 884              		.cfi_def_cfa_offset 4
 885              		.cfi_offset 7, -4
 886 0002 85B0     		sub	sp, sp, #20
 887              		.cfi_def_cfa_offset 24
 888 0004 00AF     		add	r7, sp, #0
 889              		.cfi_def_cfa_register 7
 890 0006 7860     		str	r0, [r7, #4]
 891 0008 0B46     		mov	r3, r1
 892 000a FB70     		strb	r3, [r7, #3]
 496:./Lib/Src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 893              		.loc 1 496 12
 894 000c 0023     		movs	r3, #0
 895 000e FB81     		strh	r3, [r7, #14]	@ movhi
 497:./Lib/Src/stm32f4xx_i2c.c **** 
 498:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 499:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 500:./Lib/Src/stm32f4xx_i2c.c **** 
 501:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the old register value */
 502:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 896              		.loc 1 502 10
 897 0010 7B68     		ldr	r3, [r7, #4]
 898 0012 9B89     		ldrh	r3, [r3, #12]	@ movhi
 899 0014 FB81     		strh	r3, [r7, #14]	@ movhi
 503:./Lib/Src/stm32f4xx_i2c.c **** 
 504:./Lib/Src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 505:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 900              		.loc 1 505 10
 901 0016 FB89     		ldrh	r3, [r7, #14]	@ movhi
 902 0018 23F0FE03 		bic	r3, r3, #254
 903 001c FB81     		strh	r3, [r7, #14]	@ movhi
 506:./Lib/Src/stm32f4xx_i2c.c **** 
 507:./Lib/Src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 508:./Lib/Src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 904              		.loc 1 508 13
 905 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 906 0020 1BB2     		sxth	r3, r3
 907 0022 03F0FE03 		and	r3, r3, #254
 908 0026 1AB2     		sxth	r2, r3
 909              		.loc 1 508 10
 910 0028 B7F90E30 		ldrsh	r3, [r7, #14]
 911 002c 1343     		orrs	r3, r3, r2
 912 002e 1BB2     		sxth	r3, r3
 913 0030 FB81     		strh	r3, [r7, #14]	@ movhi
 509:./Lib/Src/stm32f4xx_i2c.c **** 
 510:./Lib/Src/stm32f4xx_i2c.c ****   /* Store the new register value */
 511:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 914              		.loc 1 511 14
 915 0032 7B68     		ldr	r3, [r7, #4]
 916 0034 FA89     		ldrh	r2, [r7, #14]	@ movhi
 917 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 512:./Lib/Src/stm32f4xx_i2c.c **** }
 918              		.loc 1 512 1
ARM GAS  /tmp/ccqephDo.s 			page 26


 919 0038 00BF     		nop
 920 003a 1437     		adds	r7, r7, #20
 921              		.cfi_def_cfa_offset 4
 922 003c BD46     		mov	sp, r7
 923              		.cfi_def_cfa_register 13
 924              		@ sp needed
 925 003e 5DF8047B 		ldr	r7, [sp], #4
 926              		.cfi_restore 7
 927              		.cfi_def_cfa_offset 0
 928 0042 7047     		bx	lr
 929              		.cfi_endproc
 930              	.LFE133:
 932              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 933              		.align	1
 934              		.global	I2C_DualAddressCmd
 935              		.syntax unified
 936              		.thumb
 937              		.thumb_func
 939              	I2C_DualAddressCmd:
 940              	.LFB134:
 513:./Lib/Src/stm32f4xx_i2c.c **** 
 514:./Lib/Src/stm32f4xx_i2c.c **** /**
 515:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 516:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 517:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 518:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 519:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 520:./Lib/Src/stm32f4xx_i2c.c ****   */
 521:./Lib/Src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 522:./Lib/Src/stm32f4xx_i2c.c **** {
 941              		.loc 1 522 1
 942              		.cfi_startproc
 943              		@ args = 0, pretend = 0, frame = 8
 944              		@ frame_needed = 1, uses_anonymous_args = 0
 945              		@ link register save eliminated.
 946 0000 80B4     		push	{r7}
 947              		.cfi_def_cfa_offset 4
 948              		.cfi_offset 7, -4
 949 0002 83B0     		sub	sp, sp, #12
 950              		.cfi_def_cfa_offset 16
 951 0004 00AF     		add	r7, sp, #0
 952              		.cfi_def_cfa_register 7
 953 0006 7860     		str	r0, [r7, #4]
 954 0008 0B46     		mov	r3, r1
 955 000a FB70     		strb	r3, [r7, #3]
 523:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 524:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 525:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 526:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 956              		.loc 1 526 6
 957 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 958 000e 002B     		cmp	r3, #0
 959 0010 08D0     		beq	.L44
 527:./Lib/Src/stm32f4xx_i2c.c ****   {
 528:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 529:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 960              		.loc 1 529 9
ARM GAS  /tmp/ccqephDo.s 			page 27


 961 0012 7B68     		ldr	r3, [r7, #4]
 962 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 963 0016 9BB2     		uxth	r3, r3
 964              		.loc 1 529 16
 965 0018 43F00103 		orr	r3, r3, #1
 966 001c 9AB2     		uxth	r2, r3
 967 001e 7B68     		ldr	r3, [r7, #4]
 968 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 530:./Lib/Src/stm32f4xx_i2c.c ****   }
 531:./Lib/Src/stm32f4xx_i2c.c ****   else
 532:./Lib/Src/stm32f4xx_i2c.c ****   {
 533:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 534:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 535:./Lib/Src/stm32f4xx_i2c.c ****   }
 536:./Lib/Src/stm32f4xx_i2c.c **** }
 969              		.loc 1 536 1
 970 0022 07E0     		b	.L46
 971              	.L44:
 534:./Lib/Src/stm32f4xx_i2c.c ****   }
 972              		.loc 1 534 9
 973 0024 7B68     		ldr	r3, [r7, #4]
 974 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 975 0028 9BB2     		uxth	r3, r3
 534:./Lib/Src/stm32f4xx_i2c.c ****   }
 976              		.loc 1 534 16
 977 002a 23F00103 		bic	r3, r3, #1
 978 002e 9AB2     		uxth	r2, r3
 979 0030 7B68     		ldr	r3, [r7, #4]
 980 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 981              	.L46:
 982              		.loc 1 536 1
 983 0034 00BF     		nop
 984 0036 0C37     		adds	r7, r7, #12
 985              		.cfi_def_cfa_offset 4
 986 0038 BD46     		mov	sp, r7
 987              		.cfi_def_cfa_register 13
 988              		@ sp needed
 989 003a 5DF8047B 		ldr	r7, [sp], #4
 990              		.cfi_restore 7
 991              		.cfi_def_cfa_offset 0
 992 003e 7047     		bx	lr
 993              		.cfi_endproc
 994              	.LFE134:
 996              		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 997              		.align	1
 998              		.global	I2C_GeneralCallCmd
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1003              	I2C_GeneralCallCmd:
 1004              	.LFB135:
 537:./Lib/Src/stm32f4xx_i2c.c **** 
 538:./Lib/Src/stm32f4xx_i2c.c **** /**
 539:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 540:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 541:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 542:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccqephDo.s 			page 28


 543:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 544:./Lib/Src/stm32f4xx_i2c.c ****   */
 545:./Lib/Src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 546:./Lib/Src/stm32f4xx_i2c.c **** {
 1005              		.loc 1 546 1
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 8
 1008              		@ frame_needed = 1, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 1010 0000 80B4     		push	{r7}
 1011              		.cfi_def_cfa_offset 4
 1012              		.cfi_offset 7, -4
 1013 0002 83B0     		sub	sp, sp, #12
 1014              		.cfi_def_cfa_offset 16
 1015 0004 00AF     		add	r7, sp, #0
 1016              		.cfi_def_cfa_register 7
 1017 0006 7860     		str	r0, [r7, #4]
 1018 0008 0B46     		mov	r3, r1
 1019 000a FB70     		strb	r3, [r7, #3]
 547:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 548:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 549:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 550:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1020              		.loc 1 550 6
 1021 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1022 000e 002B     		cmp	r3, #0
 1023 0010 08D0     		beq	.L48
 551:./Lib/Src/stm32f4xx_i2c.c ****   {
 552:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable general call */
 553:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 1024              		.loc 1 553 9
 1025 0012 7B68     		ldr	r3, [r7, #4]
 1026 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1027 0016 9BB2     		uxth	r3, r3
 1028              		.loc 1 553 15
 1029 0018 43F04003 		orr	r3, r3, #64
 1030 001c 9AB2     		uxth	r2, r3
 1031 001e 7B68     		ldr	r3, [r7, #4]
 1032 0020 1A80     		strh	r2, [r3]	@ movhi
 554:./Lib/Src/stm32f4xx_i2c.c ****   }
 555:./Lib/Src/stm32f4xx_i2c.c ****   else
 556:./Lib/Src/stm32f4xx_i2c.c ****   {
 557:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable general call */
 558:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 559:./Lib/Src/stm32f4xx_i2c.c ****   }
 560:./Lib/Src/stm32f4xx_i2c.c **** }
 1033              		.loc 1 560 1
 1034 0022 07E0     		b	.L50
 1035              	.L48:
 558:./Lib/Src/stm32f4xx_i2c.c ****   }
 1036              		.loc 1 558 9
 1037 0024 7B68     		ldr	r3, [r7, #4]
 1038 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1039 0028 9BB2     		uxth	r3, r3
 558:./Lib/Src/stm32f4xx_i2c.c ****   }
 1040              		.loc 1 558 15
 1041 002a 23F04003 		bic	r3, r3, #64
ARM GAS  /tmp/ccqephDo.s 			page 29


 1042 002e 9AB2     		uxth	r2, r3
 1043 0030 7B68     		ldr	r3, [r7, #4]
 1044 0032 1A80     		strh	r2, [r3]	@ movhi
 1045              	.L50:
 1046              		.loc 1 560 1
 1047 0034 00BF     		nop
 1048 0036 0C37     		adds	r7, r7, #12
 1049              		.cfi_def_cfa_offset 4
 1050 0038 BD46     		mov	sp, r7
 1051              		.cfi_def_cfa_register 13
 1052              		@ sp needed
 1053 003a 5DF8047B 		ldr	r7, [sp], #4
 1054              		.cfi_restore 7
 1055              		.cfi_def_cfa_offset 0
 1056 003e 7047     		bx	lr
 1057              		.cfi_endproc
 1058              	.LFE135:
 1060              		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 1061              		.align	1
 1062              		.global	I2C_SoftwareResetCmd
 1063              		.syntax unified
 1064              		.thumb
 1065              		.thumb_func
 1067              	I2C_SoftwareResetCmd:
 1068              	.LFB136:
 561:./Lib/Src/stm32f4xx_i2c.c **** 
 562:./Lib/Src/stm32f4xx_i2c.c **** /**
 563:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 564:./Lib/Src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 565:./Lib/Src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 566:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 567:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 568:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 569:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 570:./Lib/Src/stm32f4xx_i2c.c ****   */
 571:./Lib/Src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 572:./Lib/Src/stm32f4xx_i2c.c **** {
 1069              		.loc 1 572 1
 1070              		.cfi_startproc
 1071              		@ args = 0, pretend = 0, frame = 8
 1072              		@ frame_needed = 1, uses_anonymous_args = 0
 1073              		@ link register save eliminated.
 1074 0000 80B4     		push	{r7}
 1075              		.cfi_def_cfa_offset 4
 1076              		.cfi_offset 7, -4
 1077 0002 83B0     		sub	sp, sp, #12
 1078              		.cfi_def_cfa_offset 16
 1079 0004 00AF     		add	r7, sp, #0
 1080              		.cfi_def_cfa_register 7
 1081 0006 7860     		str	r0, [r7, #4]
 1082 0008 0B46     		mov	r3, r1
 1083 000a FB70     		strb	r3, [r7, #3]
 573:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 574:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 575:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 576:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1084              		.loc 1 576 6
ARM GAS  /tmp/ccqephDo.s 			page 30


 1085 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1086 000e 002B     		cmp	r3, #0
 1087 0010 0AD0     		beq	.L52
 577:./Lib/Src/stm32f4xx_i2c.c ****   {
 578:./Lib/Src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 579:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 1088              		.loc 1 579 9
 1089 0012 7B68     		ldr	r3, [r7, #4]
 1090 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1091 0016 9BB2     		uxth	r3, r3
 1092              		.loc 1 579 15
 1093 0018 6FEA4343 		mvn	r3, r3, lsl #17
 1094 001c 6FEA5343 		mvn	r3, r3, lsr #17
 1095 0020 9AB2     		uxth	r2, r3
 1096 0022 7B68     		ldr	r3, [r7, #4]
 1097 0024 1A80     		strh	r2, [r3]	@ movhi
 580:./Lib/Src/stm32f4xx_i2c.c ****   }
 581:./Lib/Src/stm32f4xx_i2c.c ****   else
 582:./Lib/Src/stm32f4xx_i2c.c ****   {
 583:./Lib/Src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 584:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 585:./Lib/Src/stm32f4xx_i2c.c ****   }
 586:./Lib/Src/stm32f4xx_i2c.c **** }
 1098              		.loc 1 586 1
 1099 0026 07E0     		b	.L54
 1100              	.L52:
 584:./Lib/Src/stm32f4xx_i2c.c ****   }
 1101              		.loc 1 584 9
 1102 0028 7B68     		ldr	r3, [r7, #4]
 1103 002a 1B88     		ldrh	r3, [r3]	@ movhi
 1104 002c 9BB2     		uxth	r3, r3
 584:./Lib/Src/stm32f4xx_i2c.c ****   }
 1105              		.loc 1 584 15
 1106 002e C3F30E03 		ubfx	r3, r3, #0, #15
 1107 0032 9AB2     		uxth	r2, r3
 1108 0034 7B68     		ldr	r3, [r7, #4]
 1109 0036 1A80     		strh	r2, [r3]	@ movhi
 1110              	.L54:
 1111              		.loc 1 586 1
 1112 0038 00BF     		nop
 1113 003a 0C37     		adds	r7, r7, #12
 1114              		.cfi_def_cfa_offset 4
 1115 003c BD46     		mov	sp, r7
 1116              		.cfi_def_cfa_register 13
 1117              		@ sp needed
 1118 003e 5DF8047B 		ldr	r7, [sp], #4
 1119              		.cfi_restore 7
 1120              		.cfi_def_cfa_offset 0
 1121 0042 7047     		bx	lr
 1122              		.cfi_endproc
 1123              	.LFE136:
 1125              		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 1126              		.align	1
 1127              		.global	I2C_StretchClockCmd
 1128              		.syntax unified
 1129              		.thumb
 1130              		.thumb_func
ARM GAS  /tmp/ccqephDo.s 			page 31


 1132              	I2C_StretchClockCmd:
 1133              	.LFB137:
 587:./Lib/Src/stm32f4xx_i2c.c **** 
 588:./Lib/Src/stm32f4xx_i2c.c **** /**
 589:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 590:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 591:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 592:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 593:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 594:./Lib/Src/stm32f4xx_i2c.c ****   */
 595:./Lib/Src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 596:./Lib/Src/stm32f4xx_i2c.c **** {
 1134              		.loc 1 596 1
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 8
 1137              		@ frame_needed = 1, uses_anonymous_args = 0
 1138              		@ link register save eliminated.
 1139 0000 80B4     		push	{r7}
 1140              		.cfi_def_cfa_offset 4
 1141              		.cfi_offset 7, -4
 1142 0002 83B0     		sub	sp, sp, #12
 1143              		.cfi_def_cfa_offset 16
 1144 0004 00AF     		add	r7, sp, #0
 1145              		.cfi_def_cfa_register 7
 1146 0006 7860     		str	r0, [r7, #4]
 1147 0008 0B46     		mov	r3, r1
 1148 000a FB70     		strb	r3, [r7, #3]
 597:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 598:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 599:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 600:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 1149              		.loc 1 600 6
 1150 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1151 000e 002B     		cmp	r3, #0
 1152 0010 08D1     		bne	.L56
 601:./Lib/Src/stm32f4xx_i2c.c ****   {
 602:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 603:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 1153              		.loc 1 603 9
 1154 0012 7B68     		ldr	r3, [r7, #4]
 1155 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1156 0016 9BB2     		uxth	r3, r3
 1157              		.loc 1 603 15
 1158 0018 43F08003 		orr	r3, r3, #128
 1159 001c 9AB2     		uxth	r2, r3
 1160 001e 7B68     		ldr	r3, [r7, #4]
 1161 0020 1A80     		strh	r2, [r3]	@ movhi
 604:./Lib/Src/stm32f4xx_i2c.c ****   }
 605:./Lib/Src/stm32f4xx_i2c.c ****   else
 606:./Lib/Src/stm32f4xx_i2c.c ****   {
 607:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 608:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 609:./Lib/Src/stm32f4xx_i2c.c ****   }
 610:./Lib/Src/stm32f4xx_i2c.c **** }
 1162              		.loc 1 610 1
 1163 0022 07E0     		b	.L58
 1164              	.L56:
ARM GAS  /tmp/ccqephDo.s 			page 32


 608:./Lib/Src/stm32f4xx_i2c.c ****   }
 1165              		.loc 1 608 9
 1166 0024 7B68     		ldr	r3, [r7, #4]
 1167 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1168 0028 9BB2     		uxth	r3, r3
 608:./Lib/Src/stm32f4xx_i2c.c ****   }
 1169              		.loc 1 608 15
 1170 002a 23F08003 		bic	r3, r3, #128
 1171 002e 9AB2     		uxth	r2, r3
 1172 0030 7B68     		ldr	r3, [r7, #4]
 1173 0032 1A80     		strh	r2, [r3]	@ movhi
 1174              	.L58:
 1175              		.loc 1 610 1
 1176 0034 00BF     		nop
 1177 0036 0C37     		adds	r7, r7, #12
 1178              		.cfi_def_cfa_offset 4
 1179 0038 BD46     		mov	sp, r7
 1180              		.cfi_def_cfa_register 13
 1181              		@ sp needed
 1182 003a 5DF8047B 		ldr	r7, [sp], #4
 1183              		.cfi_restore 7
 1184              		.cfi_def_cfa_offset 0
 1185 003e 7047     		bx	lr
 1186              		.cfi_endproc
 1187              	.LFE137:
 1189              		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 1190              		.align	1
 1191              		.global	I2C_FastModeDutyCycleConfig
 1192              		.syntax unified
 1193              		.thumb
 1194              		.thumb_func
 1196              	I2C_FastModeDutyCycleConfig:
 1197              	.LFB138:
 611:./Lib/Src/stm32f4xx_i2c.c **** 
 612:./Lib/Src/stm32f4xx_i2c.c **** /**
 613:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 614:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 615:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 616:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 617:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 618:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 619:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 620:./Lib/Src/stm32f4xx_i2c.c ****   */
 621:./Lib/Src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 622:./Lib/Src/stm32f4xx_i2c.c **** {
 1198              		.loc 1 622 1
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 8
 1201              		@ frame_needed = 1, uses_anonymous_args = 0
 1202              		@ link register save eliminated.
 1203 0000 80B4     		push	{r7}
 1204              		.cfi_def_cfa_offset 4
 1205              		.cfi_offset 7, -4
 1206 0002 83B0     		sub	sp, sp, #12
 1207              		.cfi_def_cfa_offset 16
 1208 0004 00AF     		add	r7, sp, #0
 1209              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccqephDo.s 			page 33


 1210 0006 7860     		str	r0, [r7, #4]
 1211 0008 0B46     		mov	r3, r1
 1212 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 623:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 624:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 625:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 626:./Lib/Src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 1213              		.loc 1 626 6
 1214 000c 7B88     		ldrh	r3, [r7, #2]
 1215 000e B3F5804F 		cmp	r3, #16384
 1216 0012 08D0     		beq	.L60
 627:./Lib/Src/stm32f4xx_i2c.c ****   {
 628:./Lib/Src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 629:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 1217              		.loc 1 629 9
 1218 0014 7B68     		ldr	r3, [r7, #4]
 1219 0016 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1220 0018 9BB2     		uxth	r3, r3
 1221              		.loc 1 629 15
 1222 001a 23F48043 		bic	r3, r3, #16384
 1223 001e 9AB2     		uxth	r2, r3
 1224 0020 7B68     		ldr	r3, [r7, #4]
 1225 0022 9A83     		strh	r2, [r3, #28]	@ movhi
 630:./Lib/Src/stm32f4xx_i2c.c ****   }
 631:./Lib/Src/stm32f4xx_i2c.c ****   else
 632:./Lib/Src/stm32f4xx_i2c.c ****   {
 633:./Lib/Src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 634:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 635:./Lib/Src/stm32f4xx_i2c.c ****   }
 636:./Lib/Src/stm32f4xx_i2c.c **** }
 1226              		.loc 1 636 1
 1227 0024 07E0     		b	.L62
 1228              	.L60:
 634:./Lib/Src/stm32f4xx_i2c.c ****   }
 1229              		.loc 1 634 9
 1230 0026 7B68     		ldr	r3, [r7, #4]
 1231 0028 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1232 002a 9BB2     		uxth	r3, r3
 634:./Lib/Src/stm32f4xx_i2c.c ****   }
 1233              		.loc 1 634 15
 1234 002c 43F48043 		orr	r3, r3, #16384
 1235 0030 9AB2     		uxth	r2, r3
 1236 0032 7B68     		ldr	r3, [r7, #4]
 1237 0034 9A83     		strh	r2, [r3, #28]	@ movhi
 1238              	.L62:
 1239              		.loc 1 636 1
 1240 0036 00BF     		nop
 1241 0038 0C37     		adds	r7, r7, #12
 1242              		.cfi_def_cfa_offset 4
 1243 003a BD46     		mov	sp, r7
 1244              		.cfi_def_cfa_register 13
 1245              		@ sp needed
 1246 003c 5DF8047B 		ldr	r7, [sp], #4
 1247              		.cfi_restore 7
 1248              		.cfi_def_cfa_offset 0
 1249 0040 7047     		bx	lr
 1250              		.cfi_endproc
ARM GAS  /tmp/ccqephDo.s 			page 34


 1251              	.LFE138:
 1253              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 1254              		.align	1
 1255              		.global	I2C_NACKPositionConfig
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1260              	I2C_NACKPositionConfig:
 1261              	.LFB139:
 637:./Lib/Src/stm32f4xx_i2c.c **** 
 638:./Lib/Src/stm32f4xx_i2c.c **** /**
 639:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 640:./Lib/Src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 641:./Lib/Src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 642:./Lib/Src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 643:./Lib/Src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 644:./Lib/Src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 645:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 646:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 647:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 648:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 649:./Lib/Src/stm32f4xx_i2c.c ****   *                                        received byte.  
 650:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 651:./Lib/Src/stm32f4xx_i2c.c ****   *                                           received byte.
 652:./Lib/Src/stm32f4xx_i2c.c ****   *            
 653:./Lib/Src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 654:./Lib/Src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 655:./Lib/Src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 656:./Lib/Src/stm32f4xx_i2c.c ****   *            
 657:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 658:./Lib/Src/stm32f4xx_i2c.c ****   */
 659:./Lib/Src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 660:./Lib/Src/stm32f4xx_i2c.c **** {
 1262              		.loc 1 660 1
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 8
 1265              		@ frame_needed = 1, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 1267 0000 80B4     		push	{r7}
 1268              		.cfi_def_cfa_offset 4
 1269              		.cfi_offset 7, -4
 1270 0002 83B0     		sub	sp, sp, #12
 1271              		.cfi_def_cfa_offset 16
 1272 0004 00AF     		add	r7, sp, #0
 1273              		.cfi_def_cfa_register 7
 1274 0006 7860     		str	r0, [r7, #4]
 1275 0008 0B46     		mov	r3, r1
 1276 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 661:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 662:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 663:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 664:./Lib/Src/stm32f4xx_i2c.c ****   
 665:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 666:./Lib/Src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 1277              		.loc 1 666 6
 1278 000c 7B88     		ldrh	r3, [r7, #2]
 1279 000e B3F5006F 		cmp	r3, #2048
ARM GAS  /tmp/ccqephDo.s 			page 35


 1280 0012 08D1     		bne	.L64
 667:./Lib/Src/stm32f4xx_i2c.c ****   {
 668:./Lib/Src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 669:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 1281              		.loc 1 669 9
 1282 0014 7B68     		ldr	r3, [r7, #4]
 1283 0016 1B88     		ldrh	r3, [r3]	@ movhi
 1284 0018 9BB2     		uxth	r3, r3
 1285              		.loc 1 669 15
 1286 001a 43F40063 		orr	r3, r3, #2048
 1287 001e 9AB2     		uxth	r2, r3
 1288 0020 7B68     		ldr	r3, [r7, #4]
 1289 0022 1A80     		strh	r2, [r3]	@ movhi
 670:./Lib/Src/stm32f4xx_i2c.c ****   }
 671:./Lib/Src/stm32f4xx_i2c.c ****   else
 672:./Lib/Src/stm32f4xx_i2c.c ****   {
 673:./Lib/Src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 674:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 675:./Lib/Src/stm32f4xx_i2c.c ****   }
 676:./Lib/Src/stm32f4xx_i2c.c **** }
 1290              		.loc 1 676 1
 1291 0024 07E0     		b	.L66
 1292              	.L64:
 674:./Lib/Src/stm32f4xx_i2c.c ****   }
 1293              		.loc 1 674 9
 1294 0026 7B68     		ldr	r3, [r7, #4]
 1295 0028 1B88     		ldrh	r3, [r3]	@ movhi
 1296 002a 9BB2     		uxth	r3, r3
 674:./Lib/Src/stm32f4xx_i2c.c ****   }
 1297              		.loc 1 674 15
 1298 002c 23F40063 		bic	r3, r3, #2048
 1299 0030 9AB2     		uxth	r2, r3
 1300 0032 7B68     		ldr	r3, [r7, #4]
 1301 0034 1A80     		strh	r2, [r3]	@ movhi
 1302              	.L66:
 1303              		.loc 1 676 1
 1304 0036 00BF     		nop
 1305 0038 0C37     		adds	r7, r7, #12
 1306              		.cfi_def_cfa_offset 4
 1307 003a BD46     		mov	sp, r7
 1308              		.cfi_def_cfa_register 13
 1309              		@ sp needed
 1310 003c 5DF8047B 		ldr	r7, [sp], #4
 1311              		.cfi_restore 7
 1312              		.cfi_def_cfa_offset 0
 1313 0040 7047     		bx	lr
 1314              		.cfi_endproc
 1315              	.LFE139:
 1317              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 1318              		.align	1
 1319              		.global	I2C_SMBusAlertConfig
 1320              		.syntax unified
 1321              		.thumb
 1322              		.thumb_func
 1324              	I2C_SMBusAlertConfig:
 1325              	.LFB140:
 677:./Lib/Src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccqephDo.s 			page 36


 678:./Lib/Src/stm32f4xx_i2c.c **** /**
 679:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 680:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 681:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 682:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 683:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 684:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 685:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 686:./Lib/Src/stm32f4xx_i2c.c ****   */
 687:./Lib/Src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 688:./Lib/Src/stm32f4xx_i2c.c **** {
 1326              		.loc 1 688 1
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 8
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330              		@ link register save eliminated.
 1331 0000 80B4     		push	{r7}
 1332              		.cfi_def_cfa_offset 4
 1333              		.cfi_offset 7, -4
 1334 0002 83B0     		sub	sp, sp, #12
 1335              		.cfi_def_cfa_offset 16
 1336 0004 00AF     		add	r7, sp, #0
 1337              		.cfi_def_cfa_register 7
 1338 0006 7860     		str	r0, [r7, #4]
 1339 0008 0B46     		mov	r3, r1
 1340 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 689:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 690:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 691:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 692:./Lib/Src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 1341              		.loc 1 692 6
 1342 000c 7B88     		ldrh	r3, [r7, #2]
 1343 000e B3F5005F 		cmp	r3, #8192
 1344 0012 08D1     		bne	.L68
 693:./Lib/Src/stm32f4xx_i2c.c ****   {
 694:./Lib/Src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 695:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 1345              		.loc 1 695 9
 1346 0014 7B68     		ldr	r3, [r7, #4]
 1347 0016 1B88     		ldrh	r3, [r3]	@ movhi
 1348 0018 9BB2     		uxth	r3, r3
 1349              		.loc 1 695 15
 1350 001a 43F40053 		orr	r3, r3, #8192
 1351 001e 9AB2     		uxth	r2, r3
 1352 0020 7B68     		ldr	r3, [r7, #4]
 1353 0022 1A80     		strh	r2, [r3]	@ movhi
 696:./Lib/Src/stm32f4xx_i2c.c ****   }
 697:./Lib/Src/stm32f4xx_i2c.c ****   else
 698:./Lib/Src/stm32f4xx_i2c.c ****   {
 699:./Lib/Src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 700:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 701:./Lib/Src/stm32f4xx_i2c.c ****   }
 702:./Lib/Src/stm32f4xx_i2c.c **** }
 1354              		.loc 1 702 1
 1355 0024 07E0     		b	.L70
 1356              	.L68:
 700:./Lib/Src/stm32f4xx_i2c.c ****   }
ARM GAS  /tmp/ccqephDo.s 			page 37


 1357              		.loc 1 700 9
 1358 0026 7B68     		ldr	r3, [r7, #4]
 1359 0028 1B88     		ldrh	r3, [r3]	@ movhi
 1360 002a 9BB2     		uxth	r3, r3
 700:./Lib/Src/stm32f4xx_i2c.c ****   }
 1361              		.loc 1 700 15
 1362 002c 23F40053 		bic	r3, r3, #8192
 1363 0030 9AB2     		uxth	r2, r3
 1364 0032 7B68     		ldr	r3, [r7, #4]
 1365 0034 1A80     		strh	r2, [r3]	@ movhi
 1366              	.L70:
 1367              		.loc 1 702 1
 1368 0036 00BF     		nop
 1369 0038 0C37     		adds	r7, r7, #12
 1370              		.cfi_def_cfa_offset 4
 1371 003a BD46     		mov	sp, r7
 1372              		.cfi_def_cfa_register 13
 1373              		@ sp needed
 1374 003c 5DF8047B 		ldr	r7, [sp], #4
 1375              		.cfi_restore 7
 1376              		.cfi_def_cfa_offset 0
 1377 0040 7047     		bx	lr
 1378              		.cfi_endproc
 1379              	.LFE140:
 1381              		.section	.text.I2C_ARPCmd,"ax",%progbits
 1382              		.align	1
 1383              		.global	I2C_ARPCmd
 1384              		.syntax unified
 1385              		.thumb
 1386              		.thumb_func
 1388              	I2C_ARPCmd:
 1389              	.LFB141:
 703:./Lib/Src/stm32f4xx_i2c.c **** 
 704:./Lib/Src/stm32f4xx_i2c.c **** /**
 705:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 706:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 707:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 708:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 709:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 710:./Lib/Src/stm32f4xx_i2c.c ****   */
 711:./Lib/Src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 712:./Lib/Src/stm32f4xx_i2c.c **** {
 1390              		.loc 1 712 1
 1391              		.cfi_startproc
 1392              		@ args = 0, pretend = 0, frame = 8
 1393              		@ frame_needed = 1, uses_anonymous_args = 0
 1394              		@ link register save eliminated.
 1395 0000 80B4     		push	{r7}
 1396              		.cfi_def_cfa_offset 4
 1397              		.cfi_offset 7, -4
 1398 0002 83B0     		sub	sp, sp, #12
 1399              		.cfi_def_cfa_offset 16
 1400 0004 00AF     		add	r7, sp, #0
 1401              		.cfi_def_cfa_register 7
 1402 0006 7860     		str	r0, [r7, #4]
 1403 0008 0B46     		mov	r3, r1
 1404 000a FB70     		strb	r3, [r7, #3]
ARM GAS  /tmp/ccqephDo.s 			page 38


 713:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 714:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 715:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 716:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1405              		.loc 1 716 6
 1406 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1407 000e 002B     		cmp	r3, #0
 1408 0010 08D0     		beq	.L72
 717:./Lib/Src/stm32f4xx_i2c.c ****   {
 718:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 719:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 1409              		.loc 1 719 9
 1410 0012 7B68     		ldr	r3, [r7, #4]
 1411 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1412 0016 9BB2     		uxth	r3, r3
 1413              		.loc 1 719 15
 1414 0018 43F01003 		orr	r3, r3, #16
 1415 001c 9AB2     		uxth	r2, r3
 1416 001e 7B68     		ldr	r3, [r7, #4]
 1417 0020 1A80     		strh	r2, [r3]	@ movhi
 720:./Lib/Src/stm32f4xx_i2c.c ****   }
 721:./Lib/Src/stm32f4xx_i2c.c ****   else
 722:./Lib/Src/stm32f4xx_i2c.c ****   {
 723:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 724:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 725:./Lib/Src/stm32f4xx_i2c.c ****   }
 726:./Lib/Src/stm32f4xx_i2c.c **** }
 1418              		.loc 1 726 1
 1419 0022 07E0     		b	.L74
 1420              	.L72:
 724:./Lib/Src/stm32f4xx_i2c.c ****   }
 1421              		.loc 1 724 9
 1422 0024 7B68     		ldr	r3, [r7, #4]
 1423 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1424 0028 9BB2     		uxth	r3, r3
 724:./Lib/Src/stm32f4xx_i2c.c ****   }
 1425              		.loc 1 724 15
 1426 002a 23F01003 		bic	r3, r3, #16
 1427 002e 9AB2     		uxth	r2, r3
 1428 0030 7B68     		ldr	r3, [r7, #4]
 1429 0032 1A80     		strh	r2, [r3]	@ movhi
 1430              	.L74:
 1431              		.loc 1 726 1
 1432 0034 00BF     		nop
 1433 0036 0C37     		adds	r7, r7, #12
 1434              		.cfi_def_cfa_offset 4
 1435 0038 BD46     		mov	sp, r7
 1436              		.cfi_def_cfa_register 13
 1437              		@ sp needed
 1438 003a 5DF8047B 		ldr	r7, [sp], #4
 1439              		.cfi_restore 7
 1440              		.cfi_def_cfa_offset 0
 1441 003e 7047     		bx	lr
 1442              		.cfi_endproc
 1443              	.LFE141:
 1445              		.section	.text.I2C_SendData,"ax",%progbits
 1446              		.align	1
ARM GAS  /tmp/ccqephDo.s 			page 39


 1447              		.global	I2C_SendData
 1448              		.syntax unified
 1449              		.thumb
 1450              		.thumb_func
 1452              	I2C_SendData:
 1453              	.LFB142:
 727:./Lib/Src/stm32f4xx_i2c.c **** /**
 728:./Lib/Src/stm32f4xx_i2c.c ****   * @}
 729:./Lib/Src/stm32f4xx_i2c.c ****   */
 730:./Lib/Src/stm32f4xx_i2c.c **** 
 731:./Lib/Src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 732:./Lib/Src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 733:./Lib/Src/stm32f4xx_i2c.c ****  *
 734:./Lib/Src/stm32f4xx_i2c.c **** @verbatim   
 735:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
 736:./Lib/Src/stm32f4xx_i2c.c ****                   ##### Data transfers functions #####
 737:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================  
 738:./Lib/Src/stm32f4xx_i2c.c **** 
 739:./Lib/Src/stm32f4xx_i2c.c **** @endverbatim
 740:./Lib/Src/stm32f4xx_i2c.c ****   * @{
 741:./Lib/Src/stm32f4xx_i2c.c ****   */
 742:./Lib/Src/stm32f4xx_i2c.c **** 
 743:./Lib/Src/stm32f4xx_i2c.c **** /**
 744:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 745:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 746:./Lib/Src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 747:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 748:./Lib/Src/stm32f4xx_i2c.c ****   */
 749:./Lib/Src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 750:./Lib/Src/stm32f4xx_i2c.c **** {
 1454              		.loc 1 750 1
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 8
 1457              		@ frame_needed = 1, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
 1459 0000 80B4     		push	{r7}
 1460              		.cfi_def_cfa_offset 4
 1461              		.cfi_offset 7, -4
 1462 0002 83B0     		sub	sp, sp, #12
 1463              		.cfi_def_cfa_offset 16
 1464 0004 00AF     		add	r7, sp, #0
 1465              		.cfi_def_cfa_register 7
 1466 0006 7860     		str	r0, [r7, #4]
 1467 0008 0B46     		mov	r3, r1
 1468 000a FB70     		strb	r3, [r7, #3]
 751:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 752:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 753:./Lib/Src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 754:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 1469              		.loc 1 754 12
 1470 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1471 000e 9AB2     		uxth	r2, r3
 1472 0010 7B68     		ldr	r3, [r7, #4]
 1473 0012 1A82     		strh	r2, [r3, #16]	@ movhi
 755:./Lib/Src/stm32f4xx_i2c.c **** }
 1474              		.loc 1 755 1
 1475 0014 00BF     		nop
ARM GAS  /tmp/ccqephDo.s 			page 40


 1476 0016 0C37     		adds	r7, r7, #12
 1477              		.cfi_def_cfa_offset 4
 1478 0018 BD46     		mov	sp, r7
 1479              		.cfi_def_cfa_register 13
 1480              		@ sp needed
 1481 001a 5DF8047B 		ldr	r7, [sp], #4
 1482              		.cfi_restore 7
 1483              		.cfi_def_cfa_offset 0
 1484 001e 7047     		bx	lr
 1485              		.cfi_endproc
 1486              	.LFE142:
 1488              		.section	.text.I2C_ReceiveData,"ax",%progbits
 1489              		.align	1
 1490              		.global	I2C_ReceiveData
 1491              		.syntax unified
 1492              		.thumb
 1493              		.thumb_func
 1495              	I2C_ReceiveData:
 1496              	.LFB143:
 756:./Lib/Src/stm32f4xx_i2c.c **** 
 757:./Lib/Src/stm32f4xx_i2c.c **** /**
 758:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 759:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 760:./Lib/Src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 761:./Lib/Src/stm32f4xx_i2c.c ****   */
 762:./Lib/Src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 763:./Lib/Src/stm32f4xx_i2c.c **** {
 1497              		.loc 1 763 1
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 8
 1500              		@ frame_needed = 1, uses_anonymous_args = 0
 1501              		@ link register save eliminated.
 1502 0000 80B4     		push	{r7}
 1503              		.cfi_def_cfa_offset 4
 1504              		.cfi_offset 7, -4
 1505 0002 83B0     		sub	sp, sp, #12
 1506              		.cfi_def_cfa_offset 16
 1507 0004 00AF     		add	r7, sp, #0
 1508              		.cfi_def_cfa_register 7
 1509 0006 7860     		str	r0, [r7, #4]
 764:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 765:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 766:./Lib/Src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 767:./Lib/Src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 1510              		.loc 1 767 23
 1511 0008 7B68     		ldr	r3, [r7, #4]
 1512 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1513 000c 9BB2     		uxth	r3, r3
 1514              		.loc 1 767 10
 1515 000e DBB2     		uxtb	r3, r3
 768:./Lib/Src/stm32f4xx_i2c.c **** }
 1516              		.loc 1 768 1
 1517 0010 1846     		mov	r0, r3
 1518 0012 0C37     		adds	r7, r7, #12
 1519              		.cfi_def_cfa_offset 4
 1520 0014 BD46     		mov	sp, r7
 1521              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccqephDo.s 			page 41


 1522              		@ sp needed
 1523 0016 5DF8047B 		ldr	r7, [sp], #4
 1524              		.cfi_restore 7
 1525              		.cfi_def_cfa_offset 0
 1526 001a 7047     		bx	lr
 1527              		.cfi_endproc
 1528              	.LFE143:
 1530              		.section	.text.I2C_TransmitPEC,"ax",%progbits
 1531              		.align	1
 1532              		.global	I2C_TransmitPEC
 1533              		.syntax unified
 1534              		.thumb
 1535              		.thumb_func
 1537              	I2C_TransmitPEC:
 1538              	.LFB144:
 769:./Lib/Src/stm32f4xx_i2c.c **** 
 770:./Lib/Src/stm32f4xx_i2c.c **** /**
 771:./Lib/Src/stm32f4xx_i2c.c ****   * @}
 772:./Lib/Src/stm32f4xx_i2c.c ****   */
 773:./Lib/Src/stm32f4xx_i2c.c **** 
 774:./Lib/Src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 775:./Lib/Src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 776:./Lib/Src/stm32f4xx_i2c.c ****  *
 777:./Lib/Src/stm32f4xx_i2c.c **** @verbatim   
 778:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
 779:./Lib/Src/stm32f4xx_i2c.c ****                   ##### PEC management functions #####
 780:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================  
 781:./Lib/Src/stm32f4xx_i2c.c **** 
 782:./Lib/Src/stm32f4xx_i2c.c **** @endverbatim
 783:./Lib/Src/stm32f4xx_i2c.c ****   * @{
 784:./Lib/Src/stm32f4xx_i2c.c ****   */
 785:./Lib/Src/stm32f4xx_i2c.c **** 
 786:./Lib/Src/stm32f4xx_i2c.c **** /**
 787:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 788:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 789:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 790:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 791:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 792:./Lib/Src/stm32f4xx_i2c.c ****   */
 793:./Lib/Src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 794:./Lib/Src/stm32f4xx_i2c.c **** {
 1539              		.loc 1 794 1
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 8
 1542              		@ frame_needed = 1, uses_anonymous_args = 0
 1543              		@ link register save eliminated.
 1544 0000 80B4     		push	{r7}
 1545              		.cfi_def_cfa_offset 4
 1546              		.cfi_offset 7, -4
 1547 0002 83B0     		sub	sp, sp, #12
 1548              		.cfi_def_cfa_offset 16
 1549 0004 00AF     		add	r7, sp, #0
 1550              		.cfi_def_cfa_register 7
 1551 0006 7860     		str	r0, [r7, #4]
 1552 0008 0B46     		mov	r3, r1
 1553 000a FB70     		strb	r3, [r7, #3]
 795:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
ARM GAS  /tmp/ccqephDo.s 			page 42


 796:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 797:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 798:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1554              		.loc 1 798 6
 1555 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1556 000e 002B     		cmp	r3, #0
 1557 0010 08D0     		beq	.L79
 799:./Lib/Src/stm32f4xx_i2c.c ****   {
 800:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 801:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 1558              		.loc 1 801 9
 1559 0012 7B68     		ldr	r3, [r7, #4]
 1560 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1561 0016 9BB2     		uxth	r3, r3
 1562              		.loc 1 801 15
 1563 0018 43F48053 		orr	r3, r3, #4096
 1564 001c 9AB2     		uxth	r2, r3
 1565 001e 7B68     		ldr	r3, [r7, #4]
 1566 0020 1A80     		strh	r2, [r3]	@ movhi
 802:./Lib/Src/stm32f4xx_i2c.c ****   }
 803:./Lib/Src/stm32f4xx_i2c.c ****   else
 804:./Lib/Src/stm32f4xx_i2c.c ****   {
 805:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 806:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 807:./Lib/Src/stm32f4xx_i2c.c ****   }
 808:./Lib/Src/stm32f4xx_i2c.c **** }
 1567              		.loc 1 808 1
 1568 0022 07E0     		b	.L81
 1569              	.L79:
 806:./Lib/Src/stm32f4xx_i2c.c ****   }
 1570              		.loc 1 806 9
 1571 0024 7B68     		ldr	r3, [r7, #4]
 1572 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1573 0028 9BB2     		uxth	r3, r3
 806:./Lib/Src/stm32f4xx_i2c.c ****   }
 1574              		.loc 1 806 15
 1575 002a 23F48053 		bic	r3, r3, #4096
 1576 002e 9AB2     		uxth	r2, r3
 1577 0030 7B68     		ldr	r3, [r7, #4]
 1578 0032 1A80     		strh	r2, [r3]	@ movhi
 1579              	.L81:
 1580              		.loc 1 808 1
 1581 0034 00BF     		nop
 1582 0036 0C37     		adds	r7, r7, #12
 1583              		.cfi_def_cfa_offset 4
 1584 0038 BD46     		mov	sp, r7
 1585              		.cfi_def_cfa_register 13
 1586              		@ sp needed
 1587 003a 5DF8047B 		ldr	r7, [sp], #4
 1588              		.cfi_restore 7
 1589              		.cfi_def_cfa_offset 0
 1590 003e 7047     		bx	lr
 1591              		.cfi_endproc
 1592              	.LFE144:
 1594              		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 1595              		.align	1
 1596              		.global	I2C_PECPositionConfig
ARM GAS  /tmp/ccqephDo.s 			page 43


 1597              		.syntax unified
 1598              		.thumb
 1599              		.thumb_func
 1601              	I2C_PECPositionConfig:
 1602              	.LFB145:
 809:./Lib/Src/stm32f4xx_i2c.c **** 
 810:./Lib/Src/stm32f4xx_i2c.c **** /**
 811:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 812:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 813:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 814:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 815:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 816:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 817:./Lib/Src/stm32f4xx_i2c.c ****   *       
 818:./Lib/Src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 819:./Lib/Src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 820:./Lib/Src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 821:./Lib/Src/stm32f4xx_i2c.c ****   *                
 822:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 823:./Lib/Src/stm32f4xx_i2c.c ****   */
 824:./Lib/Src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 825:./Lib/Src/stm32f4xx_i2c.c **** {
 1603              		.loc 1 825 1
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 8
 1606              		@ frame_needed = 1, uses_anonymous_args = 0
 1607              		@ link register save eliminated.
 1608 0000 80B4     		push	{r7}
 1609              		.cfi_def_cfa_offset 4
 1610              		.cfi_offset 7, -4
 1611 0002 83B0     		sub	sp, sp, #12
 1612              		.cfi_def_cfa_offset 16
 1613 0004 00AF     		add	r7, sp, #0
 1614              		.cfi_def_cfa_register 7
 1615 0006 7860     		str	r0, [r7, #4]
 1616 0008 0B46     		mov	r3, r1
 1617 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 826:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 827:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 828:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 829:./Lib/Src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 1618              		.loc 1 829 6
 1619 000c 7B88     		ldrh	r3, [r7, #2]
 1620 000e B3F5006F 		cmp	r3, #2048
 1621 0012 08D1     		bne	.L83
 830:./Lib/Src/stm32f4xx_i2c.c ****   {
 831:./Lib/Src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 832:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 1622              		.loc 1 832 9
 1623 0014 7B68     		ldr	r3, [r7, #4]
 1624 0016 1B88     		ldrh	r3, [r3]	@ movhi
 1625 0018 9BB2     		uxth	r3, r3
 1626              		.loc 1 832 15
 1627 001a 43F40063 		orr	r3, r3, #2048
 1628 001e 9AB2     		uxth	r2, r3
 1629 0020 7B68     		ldr	r3, [r7, #4]
 1630 0022 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/ccqephDo.s 			page 44


 833:./Lib/Src/stm32f4xx_i2c.c ****   }
 834:./Lib/Src/stm32f4xx_i2c.c ****   else
 835:./Lib/Src/stm32f4xx_i2c.c ****   {
 836:./Lib/Src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 837:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 838:./Lib/Src/stm32f4xx_i2c.c ****   }
 839:./Lib/Src/stm32f4xx_i2c.c **** }
 1631              		.loc 1 839 1
 1632 0024 07E0     		b	.L85
 1633              	.L83:
 837:./Lib/Src/stm32f4xx_i2c.c ****   }
 1634              		.loc 1 837 9
 1635 0026 7B68     		ldr	r3, [r7, #4]
 1636 0028 1B88     		ldrh	r3, [r3]	@ movhi
 1637 002a 9BB2     		uxth	r3, r3
 837:./Lib/Src/stm32f4xx_i2c.c ****   }
 1638              		.loc 1 837 15
 1639 002c 23F40063 		bic	r3, r3, #2048
 1640 0030 9AB2     		uxth	r2, r3
 1641 0032 7B68     		ldr	r3, [r7, #4]
 1642 0034 1A80     		strh	r2, [r3]	@ movhi
 1643              	.L85:
 1644              		.loc 1 839 1
 1645 0036 00BF     		nop
 1646 0038 0C37     		adds	r7, r7, #12
 1647              		.cfi_def_cfa_offset 4
 1648 003a BD46     		mov	sp, r7
 1649              		.cfi_def_cfa_register 13
 1650              		@ sp needed
 1651 003c 5DF8047B 		ldr	r7, [sp], #4
 1652              		.cfi_restore 7
 1653              		.cfi_def_cfa_offset 0
 1654 0040 7047     		bx	lr
 1655              		.cfi_endproc
 1656              	.LFE145:
 1658              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 1659              		.align	1
 1660              		.global	I2C_CalculatePEC
 1661              		.syntax unified
 1662              		.thumb
 1663              		.thumb_func
 1665              	I2C_CalculatePEC:
 1666              	.LFB146:
 840:./Lib/Src/stm32f4xx_i2c.c **** 
 841:./Lib/Src/stm32f4xx_i2c.c **** /**
 842:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 843:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 844:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 845:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 846:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 847:./Lib/Src/stm32f4xx_i2c.c ****   */
 848:./Lib/Src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 849:./Lib/Src/stm32f4xx_i2c.c **** {
 1667              		.loc 1 849 1
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 8
 1670              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccqephDo.s 			page 45


 1671              		@ link register save eliminated.
 1672 0000 80B4     		push	{r7}
 1673              		.cfi_def_cfa_offset 4
 1674              		.cfi_offset 7, -4
 1675 0002 83B0     		sub	sp, sp, #12
 1676              		.cfi_def_cfa_offset 16
 1677 0004 00AF     		add	r7, sp, #0
 1678              		.cfi_def_cfa_register 7
 1679 0006 7860     		str	r0, [r7, #4]
 1680 0008 0B46     		mov	r3, r1
 1681 000a FB70     		strb	r3, [r7, #3]
 850:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 851:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 852:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 853:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1682              		.loc 1 853 6
 1683 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1684 000e 002B     		cmp	r3, #0
 1685 0010 08D0     		beq	.L87
 854:./Lib/Src/stm32f4xx_i2c.c ****   {
 855:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 856:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 1686              		.loc 1 856 9
 1687 0012 7B68     		ldr	r3, [r7, #4]
 1688 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1689 0016 9BB2     		uxth	r3, r3
 1690              		.loc 1 856 15
 1691 0018 43F02003 		orr	r3, r3, #32
 1692 001c 9AB2     		uxth	r2, r3
 1693 001e 7B68     		ldr	r3, [r7, #4]
 1694 0020 1A80     		strh	r2, [r3]	@ movhi
 857:./Lib/Src/stm32f4xx_i2c.c ****   }
 858:./Lib/Src/stm32f4xx_i2c.c ****   else
 859:./Lib/Src/stm32f4xx_i2c.c ****   {
 860:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 861:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 862:./Lib/Src/stm32f4xx_i2c.c ****   }
 863:./Lib/Src/stm32f4xx_i2c.c **** }
 1695              		.loc 1 863 1
 1696 0022 07E0     		b	.L89
 1697              	.L87:
 861:./Lib/Src/stm32f4xx_i2c.c ****   }
 1698              		.loc 1 861 9
 1699 0024 7B68     		ldr	r3, [r7, #4]
 1700 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1701 0028 9BB2     		uxth	r3, r3
 861:./Lib/Src/stm32f4xx_i2c.c ****   }
 1702              		.loc 1 861 15
 1703 002a 23F02003 		bic	r3, r3, #32
 1704 002e 9AB2     		uxth	r2, r3
 1705 0030 7B68     		ldr	r3, [r7, #4]
 1706 0032 1A80     		strh	r2, [r3]	@ movhi
 1707              	.L89:
 1708              		.loc 1 863 1
 1709 0034 00BF     		nop
 1710 0036 0C37     		adds	r7, r7, #12
 1711              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccqephDo.s 			page 46


 1712 0038 BD46     		mov	sp, r7
 1713              		.cfi_def_cfa_register 13
 1714              		@ sp needed
 1715 003a 5DF8047B 		ldr	r7, [sp], #4
 1716              		.cfi_restore 7
 1717              		.cfi_def_cfa_offset 0
 1718 003e 7047     		bx	lr
 1719              		.cfi_endproc
 1720              	.LFE146:
 1722              		.section	.text.I2C_GetPEC,"ax",%progbits
 1723              		.align	1
 1724              		.global	I2C_GetPEC
 1725              		.syntax unified
 1726              		.thumb
 1727              		.thumb_func
 1729              	I2C_GetPEC:
 1730              	.LFB147:
 864:./Lib/Src/stm32f4xx_i2c.c **** 
 865:./Lib/Src/stm32f4xx_i2c.c **** /**
 866:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 867:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 868:./Lib/Src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 869:./Lib/Src/stm32f4xx_i2c.c ****   */
 870:./Lib/Src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 871:./Lib/Src/stm32f4xx_i2c.c **** {
 1731              		.loc 1 871 1
 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 8
 1734              		@ frame_needed = 1, uses_anonymous_args = 0
 1735              		@ link register save eliminated.
 1736 0000 80B4     		push	{r7}
 1737              		.cfi_def_cfa_offset 4
 1738              		.cfi_offset 7, -4
 1739 0002 83B0     		sub	sp, sp, #12
 1740              		.cfi_def_cfa_offset 16
 1741 0004 00AF     		add	r7, sp, #0
 1742              		.cfi_def_cfa_register 7
 1743 0006 7860     		str	r0, [r7, #4]
 872:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 873:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 874:./Lib/Src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 875:./Lib/Src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 1744              		.loc 1 875 16
 1745 0008 7B68     		ldr	r3, [r7, #4]
 1746 000a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1747 000c 9BB2     		uxth	r3, r3
 1748              		.loc 1 875 23
 1749 000e 1B0A     		lsrs	r3, r3, #8
 1750 0010 9BB2     		uxth	r3, r3
 1751 0012 DBB2     		uxtb	r3, r3
 876:./Lib/Src/stm32f4xx_i2c.c **** }
 1752              		.loc 1 876 1
 1753 0014 1846     		mov	r0, r3
 1754 0016 0C37     		adds	r7, r7, #12
 1755              		.cfi_def_cfa_offset 4
 1756 0018 BD46     		mov	sp, r7
 1757              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccqephDo.s 			page 47


 1758              		@ sp needed
 1759 001a 5DF8047B 		ldr	r7, [sp], #4
 1760              		.cfi_restore 7
 1761              		.cfi_def_cfa_offset 0
 1762 001e 7047     		bx	lr
 1763              		.cfi_endproc
 1764              	.LFE147:
 1766              		.section	.text.I2C_DMACmd,"ax",%progbits
 1767              		.align	1
 1768              		.global	I2C_DMACmd
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1773              	I2C_DMACmd:
 1774              	.LFB148:
 877:./Lib/Src/stm32f4xx_i2c.c **** 
 878:./Lib/Src/stm32f4xx_i2c.c **** /**
 879:./Lib/Src/stm32f4xx_i2c.c ****   * @}
 880:./Lib/Src/stm32f4xx_i2c.c ****   */
 881:./Lib/Src/stm32f4xx_i2c.c **** 
 882:./Lib/Src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 883:./Lib/Src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 884:./Lib/Src/stm32f4xx_i2c.c ****  *
 885:./Lib/Src/stm32f4xx_i2c.c **** @verbatim   
 886:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
 887:./Lib/Src/stm32f4xx_i2c.c ****                 ##### DMA transfers management functions #####
 888:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================  
 889:./Lib/Src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 890:./Lib/Src/stm32f4xx_i2c.c ****   requests.
 891:./Lib/Src/stm32f4xx_i2c.c ****   
 892:./Lib/Src/stm32f4xx_i2c.c **** @endverbatim
 893:./Lib/Src/stm32f4xx_i2c.c ****   * @{
 894:./Lib/Src/stm32f4xx_i2c.c ****   */
 895:./Lib/Src/stm32f4xx_i2c.c **** 
 896:./Lib/Src/stm32f4xx_i2c.c **** /**
 897:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 898:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 899:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 900:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 901:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 902:./Lib/Src/stm32f4xx_i2c.c ****   */
 903:./Lib/Src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 904:./Lib/Src/stm32f4xx_i2c.c **** {
 1775              		.loc 1 904 1
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 8
 1778              		@ frame_needed = 1, uses_anonymous_args = 0
 1779              		@ link register save eliminated.
 1780 0000 80B4     		push	{r7}
 1781              		.cfi_def_cfa_offset 4
 1782              		.cfi_offset 7, -4
 1783 0002 83B0     		sub	sp, sp, #12
 1784              		.cfi_def_cfa_offset 16
 1785 0004 00AF     		add	r7, sp, #0
 1786              		.cfi_def_cfa_register 7
 1787 0006 7860     		str	r0, [r7, #4]
 1788 0008 0B46     		mov	r3, r1
ARM GAS  /tmp/ccqephDo.s 			page 48


 1789 000a FB70     		strb	r3, [r7, #3]
 905:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 906:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 907:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 908:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1790              		.loc 1 908 6
 1791 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1792 000e 002B     		cmp	r3, #0
 1793 0010 08D0     		beq	.L93
 909:./Lib/Src/stm32f4xx_i2c.c ****   {
 910:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 911:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 1794              		.loc 1 911 9
 1795 0012 7B68     		ldr	r3, [r7, #4]
 1796 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1797 0016 9BB2     		uxth	r3, r3
 1798              		.loc 1 911 15
 1799 0018 43F40063 		orr	r3, r3, #2048
 1800 001c 9AB2     		uxth	r2, r3
 1801 001e 7B68     		ldr	r3, [r7, #4]
 1802 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 912:./Lib/Src/stm32f4xx_i2c.c ****   }
 913:./Lib/Src/stm32f4xx_i2c.c ****   else
 914:./Lib/Src/stm32f4xx_i2c.c ****   {
 915:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 916:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 917:./Lib/Src/stm32f4xx_i2c.c ****   }
 918:./Lib/Src/stm32f4xx_i2c.c **** }
 1803              		.loc 1 918 1
 1804 0022 07E0     		b	.L95
 1805              	.L93:
 916:./Lib/Src/stm32f4xx_i2c.c ****   }
 1806              		.loc 1 916 9
 1807 0024 7B68     		ldr	r3, [r7, #4]
 1808 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1809 0028 9BB2     		uxth	r3, r3
 916:./Lib/Src/stm32f4xx_i2c.c ****   }
 1810              		.loc 1 916 15
 1811 002a 23F40063 		bic	r3, r3, #2048
 1812 002e 9AB2     		uxth	r2, r3
 1813 0030 7B68     		ldr	r3, [r7, #4]
 1814 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1815              	.L95:
 1816              		.loc 1 918 1
 1817 0034 00BF     		nop
 1818 0036 0C37     		adds	r7, r7, #12
 1819              		.cfi_def_cfa_offset 4
 1820 0038 BD46     		mov	sp, r7
 1821              		.cfi_def_cfa_register 13
 1822              		@ sp needed
 1823 003a 5DF8047B 		ldr	r7, [sp], #4
 1824              		.cfi_restore 7
 1825              		.cfi_def_cfa_offset 0
 1826 003e 7047     		bx	lr
 1827              		.cfi_endproc
 1828              	.LFE148:
 1830              		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
ARM GAS  /tmp/ccqephDo.s 			page 49


 1831              		.align	1
 1832              		.global	I2C_DMALastTransferCmd
 1833              		.syntax unified
 1834              		.thumb
 1835              		.thumb_func
 1837              	I2C_DMALastTransferCmd:
 1838              	.LFB149:
 919:./Lib/Src/stm32f4xx_i2c.c **** 
 920:./Lib/Src/stm32f4xx_i2c.c **** /**
 921:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 922:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 923:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 924:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 925:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
 926:./Lib/Src/stm32f4xx_i2c.c ****   */
 927:./Lib/Src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 928:./Lib/Src/stm32f4xx_i2c.c **** {
 1839              		.loc 1 928 1
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 8
 1842              		@ frame_needed = 1, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 1844 0000 80B4     		push	{r7}
 1845              		.cfi_def_cfa_offset 4
 1846              		.cfi_offset 7, -4
 1847 0002 83B0     		sub	sp, sp, #12
 1848              		.cfi_def_cfa_offset 16
 1849 0004 00AF     		add	r7, sp, #0
 1850              		.cfi_def_cfa_register 7
 1851 0006 7860     		str	r0, [r7, #4]
 1852 0008 0B46     		mov	r3, r1
 1853 000a FB70     		strb	r3, [r7, #3]
 929:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
 930:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 931:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 932:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1854              		.loc 1 932 6
 1855 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1856 000e 002B     		cmp	r3, #0
 1857 0010 08D0     		beq	.L97
 933:./Lib/Src/stm32f4xx_i2c.c ****   {
 934:./Lib/Src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 935:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 1858              		.loc 1 935 9
 1859 0012 7B68     		ldr	r3, [r7, #4]
 1860 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1861 0016 9BB2     		uxth	r3, r3
 1862              		.loc 1 935 15
 1863 0018 43F48053 		orr	r3, r3, #4096
 1864 001c 9AB2     		uxth	r2, r3
 1865 001e 7B68     		ldr	r3, [r7, #4]
 1866 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 936:./Lib/Src/stm32f4xx_i2c.c ****   }
 937:./Lib/Src/stm32f4xx_i2c.c ****   else
 938:./Lib/Src/stm32f4xx_i2c.c ****   {
 939:./Lib/Src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 940:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
ARM GAS  /tmp/ccqephDo.s 			page 50


 941:./Lib/Src/stm32f4xx_i2c.c ****   }
 942:./Lib/Src/stm32f4xx_i2c.c **** }
 1867              		.loc 1 942 1
 1868 0022 07E0     		b	.L99
 1869              	.L97:
 940:./Lib/Src/stm32f4xx_i2c.c ****   }
 1870              		.loc 1 940 9
 1871 0024 7B68     		ldr	r3, [r7, #4]
 1872 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1873 0028 9BB2     		uxth	r3, r3
 940:./Lib/Src/stm32f4xx_i2c.c ****   }
 1874              		.loc 1 940 15
 1875 002a 23F48053 		bic	r3, r3, #4096
 1876 002e 9AB2     		uxth	r2, r3
 1877 0030 7B68     		ldr	r3, [r7, #4]
 1878 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1879              	.L99:
 1880              		.loc 1 942 1
 1881 0034 00BF     		nop
 1882 0036 0C37     		adds	r7, r7, #12
 1883              		.cfi_def_cfa_offset 4
 1884 0038 BD46     		mov	sp, r7
 1885              		.cfi_def_cfa_register 13
 1886              		@ sp needed
 1887 003a 5DF8047B 		ldr	r7, [sp], #4
 1888              		.cfi_restore 7
 1889              		.cfi_def_cfa_offset 0
 1890 003e 7047     		bx	lr
 1891              		.cfi_endproc
 1892              	.LFE149:
 1894              		.section	.text.I2C_ReadRegister,"ax",%progbits
 1895              		.align	1
 1896              		.global	I2C_ReadRegister
 1897              		.syntax unified
 1898              		.thumb
 1899              		.thumb_func
 1901              	I2C_ReadRegister:
 1902              	.LFB150:
 943:./Lib/Src/stm32f4xx_i2c.c **** 
 944:./Lib/Src/stm32f4xx_i2c.c **** /**
 945:./Lib/Src/stm32f4xx_i2c.c ****   * @}
 946:./Lib/Src/stm32f4xx_i2c.c ****   */
 947:./Lib/Src/stm32f4xx_i2c.c **** 
 948:./Lib/Src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 949:./Lib/Src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 950:./Lib/Src/stm32f4xx_i2c.c ****  *
 951:./Lib/Src/stm32f4xx_i2c.c **** @verbatim   
 952:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
 953:./Lib/Src/stm32f4xx_i2c.c ****           ##### Interrupts, events and flags management functions #####
 954:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
 955:./Lib/Src/stm32f4xx_i2c.c ****     [..]
 956:./Lib/Src/stm32f4xx_i2c.c ****     This section provides functions allowing to configure the I2C Interrupts 
 957:./Lib/Src/stm32f4xx_i2c.c ****     sources and check or clear the flags or pending bits status.
 958:./Lib/Src/stm32f4xx_i2c.c ****     The user should identify which mode will be used in his application to manage 
 959:./Lib/Src/stm32f4xx_i2c.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
 960:./Lib/Src/stm32f4xx_i2c.c **** 
 961:./Lib/Src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccqephDo.s 			page 51


 962:./Lib/Src/stm32f4xx_i2c.c ****                 ##### I2C State Monitoring Functions #####                   
 963:./Lib/Src/stm32f4xx_i2c.c ****  =============================================================================== 
 964:./Lib/Src/stm32f4xx_i2c.c ****     [..]  
 965:./Lib/Src/stm32f4xx_i2c.c ****     This I2C driver provides three different ways for I2C state monitoring
 966:./Lib/Src/stm32f4xx_i2c.c ****     depending on the application requirements and constraints:
 967:./Lib/Src/stm32f4xx_i2c.c ****          
 968:./Lib/Src/stm32f4xx_i2c.c ****    
 969:./Lib/Src/stm32f4xx_i2c.c ****      (#) Basic state monitoring (Using I2C_CheckEvent() function)
 970:./Lib/Src/stm32f4xx_i2c.c ****      
 971:./Lib/Src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 972:./Lib/Src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 973:./Lib/Src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 974:./Lib/Src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 975:./Lib/Src/stm32f4xx_i2c.c **** 
 976:./Lib/Src/stm32f4xx_i2c.c ****           (++) When to use
 977:./Lib/Src/stm32f4xx_i2c.c ****              (+++) This function is suitable for most applications as well as for startup 
 978:./Lib/Src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 979:./Lib/Src/stm32f4xx_i2c.c ****                manual (RM0090).
 980:./Lib/Src/stm32f4xx_i2c.c ****              (+++) It is also suitable for users who need to define their own events.
 981:./Lib/Src/stm32f4xx_i2c.c **** 
 982:./Lib/Src/stm32f4xx_i2c.c ****           (++) Limitations
 983:./Lib/Src/stm32f4xx_i2c.c ****                If an error occurs (ie. error flags are set besides to the monitored 
 984:./Lib/Src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 985:./Lib/Src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 986:./Lib/Src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 987:./Lib/Src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 988:./Lib/Src/stm32f4xx_i2c.c ****          
 989:./Lib/Src/stm32f4xx_i2c.c ****      -@@- For error management, it is advised to use the following functions:
 990:./Lib/Src/stm32f4xx_i2c.c ****         (+@@) I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 991:./Lib/Src/stm32f4xx_i2c.c ****         (+@@) I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 992:./Lib/Src/stm32f4xx_i2c.c ****               Where x is the peripheral instance (I2C1, I2C2 ...)
 993:./Lib/Src/stm32f4xx_i2c.c ****         (+@@) I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 994:./Lib/Src/stm32f4xx_i2c.c ****               I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 995:./Lib/Src/stm32f4xx_i2c.c ****         (+@@) I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 996:./Lib/Src/stm32f4xx_i2c.c ****               and/or I2C_GenerateStop() in order to clear the error flag and source 
 997:./Lib/Src/stm32f4xx_i2c.c ****               and return to correct  communication status.
 998:./Lib/Src/stm32f4xx_i2c.c ****              
 999:./Lib/Src/stm32f4xx_i2c.c ****  
1000:./Lib/Src/stm32f4xx_i2c.c ****      (#) Advanced state monitoring (Using the function I2C_GetLastEvent())
1001:./Lib/Src/stm32f4xx_i2c.c **** 
1002:./Lib/Src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
1003:./Lib/Src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
1004:./Lib/Src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
1005:./Lib/Src/stm32f4xx_i2c.c **** 
1006:./Lib/Src/stm32f4xx_i2c.c ****           (++) When to use
1007:./Lib/Src/stm32f4xx_i2c.c ****              (+++) This function is suitable for the same applications above but it 
1008:./Lib/Src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
1009:./Lib/Src/stm32f4xx_i2c.c ****                function.
1010:./Lib/Src/stm32f4xx_i2c.c ****              (+++) The returned value could be compared to events already defined in 
1011:./Lib/Src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
1012:./Lib/Src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
1013:./Lib/Src/stm32f4xx_i2c.c ****                same time.
1014:./Lib/Src/stm32f4xx_i2c.c ****              (+++) At the opposite of I2C_CheckEvent() function, this function allows 
1015:./Lib/Src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
1016:./Lib/Src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
1017:./Lib/Src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
1018:./Lib/Src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccqephDo.s 			page 52


1019:./Lib/Src/stm32f4xx_i2c.c ****           (++) Limitations
1020:./Lib/Src/stm32f4xx_i2c.c ****              (+++) User may need to define his own events.
1021:./Lib/Src/stm32f4xx_i2c.c ****              (+++) Same remark concerning the error management is applicable for this 
1022:./Lib/Src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
1023:./Lib/Src/stm32f4xx_i2c.c ****                (and ignores error flags).
1024:./Lib/Src/stm32f4xx_i2c.c ****       
1025:./Lib/Src/stm32f4xx_i2c.c ****  
1026:./Lib/Src/stm32f4xx_i2c.c ****      (#) Flag-based state monitoring (Using the function I2C_GetFlagStatus())
1027:./Lib/Src/stm32f4xx_i2c.c ****      
1028:./Lib/Src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
1029:./Lib/Src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
1030:./Lib/Src/stm32f4xx_i2c.c **** 
1031:./Lib/Src/stm32f4xx_i2c.c ****           (++) When to use
1032:./Lib/Src/stm32f4xx_i2c.c ****              (+++) This function could be used for specific applications or in debug 
1033:./Lib/Src/stm32f4xx_i2c.c ****                phase.
1034:./Lib/Src/stm32f4xx_i2c.c ****              (+++) It is suitable when only one flag checking is needed (most I2C 
1035:./Lib/Src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
1036:./Lib/Src/stm32f4xx_i2c.c ****           (++) Limitations: 
1037:./Lib/Src/stm32f4xx_i2c.c ****              (+++) When calling this function, the Status register is accessed. 
1038:./Lib/Src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
1039:./Lib/Src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
1040:./Lib/Src/stm32f4xx_i2c.c ****              (+++) Function may need to be called twice or more in order to monitor 
1041:./Lib/Src/stm32f4xx_i2c.c ****                one single event.
1042:./Lib/Src/stm32f4xx_i2c.c ****  
1043:./Lib/Src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
1044:./Lib/Src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
1045:./Lib/Src/stm32f4xx_i2c.c ****        
1046:./Lib/Src/stm32f4xx_i2c.c **** @endverbatim
1047:./Lib/Src/stm32f4xx_i2c.c ****   * @{
1048:./Lib/Src/stm32f4xx_i2c.c ****   */
1049:./Lib/Src/stm32f4xx_i2c.c ****    
1050:./Lib/Src/stm32f4xx_i2c.c **** /**
1051:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
1052:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
1053:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1054:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
1055:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
1056:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
1057:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
1058:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
1059:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1060:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1061:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1062:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1063:./Lib/Src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1064:./Lib/Src/stm32f4xx_i2c.c ****   */
1065:./Lib/Src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1066:./Lib/Src/stm32f4xx_i2c.c **** {
 1903              		.loc 1 1066 1
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 16
 1906              		@ frame_needed = 1, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 1908 0000 80B4     		push	{r7}
 1909              		.cfi_def_cfa_offset 4
 1910              		.cfi_offset 7, -4
 1911 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccqephDo.s 			page 53


 1912              		.cfi_def_cfa_offset 24
 1913 0004 00AF     		add	r7, sp, #0
 1914              		.cfi_def_cfa_register 7
 1915 0006 7860     		str	r0, [r7, #4]
 1916 0008 0B46     		mov	r3, r1
 1917 000a FB70     		strb	r3, [r7, #3]
1067:./Lib/Src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1918              		.loc 1 1067 17
 1919 000c 0023     		movs	r3, #0
 1920 000e FB60     		str	r3, [r7, #12]
1068:./Lib/Src/stm32f4xx_i2c.c **** 
1069:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1070:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1071:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1072:./Lib/Src/stm32f4xx_i2c.c **** 
1073:./Lib/Src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1921              		.loc 1 1073 9
 1922 0010 7B68     		ldr	r3, [r7, #4]
 1923              		.loc 1 1073 7
 1924 0012 FB60     		str	r3, [r7, #12]
1074:./Lib/Src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1925              		.loc 1 1074 7
 1926 0014 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1927 0016 FB68     		ldr	r3, [r7, #12]
 1928 0018 1344     		add	r3, r3, r2
 1929 001a FB60     		str	r3, [r7, #12]
1075:./Lib/Src/stm32f4xx_i2c.c **** 
1076:./Lib/Src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1077:./Lib/Src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1930              		.loc 1 1077 12
 1931 001c FB68     		ldr	r3, [r7, #12]
 1932              		.loc 1 1077 11
 1933 001e 1B88     		ldrh	r3, [r3]	@ movhi
 1934 0020 9BB2     		uxth	r3, r3
1078:./Lib/Src/stm32f4xx_i2c.c **** }
 1935              		.loc 1 1078 1
 1936 0022 1846     		mov	r0, r3
 1937 0024 1437     		adds	r7, r7, #20
 1938              		.cfi_def_cfa_offset 4
 1939 0026 BD46     		mov	sp, r7
 1940              		.cfi_def_cfa_register 13
 1941              		@ sp needed
 1942 0028 5DF8047B 		ldr	r7, [sp], #4
 1943              		.cfi_restore 7
 1944              		.cfi_def_cfa_offset 0
 1945 002c 7047     		bx	lr
 1946              		.cfi_endproc
 1947              	.LFE150:
 1949              		.section	.text.I2C_ITConfig,"ax",%progbits
 1950              		.align	1
 1951              		.global	I2C_ITConfig
 1952              		.syntax unified
 1953              		.thumb
 1954              		.thumb_func
 1956              	I2C_ITConfig:
 1957              	.LFB151:
1079:./Lib/Src/stm32f4xx_i2c.c **** 
ARM GAS  /tmp/ccqephDo.s 			page 54


1080:./Lib/Src/stm32f4xx_i2c.c **** /**
1081:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1082:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1083:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1084:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1085:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1086:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1087:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1088:./Lib/Src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1089:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1090:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
1091:./Lib/Src/stm32f4xx_i2c.c ****   */
1092:./Lib/Src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1093:./Lib/Src/stm32f4xx_i2c.c **** {
 1958              		.loc 1 1093 1
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 8
 1961              		@ frame_needed = 1, uses_anonymous_args = 0
 1962              		@ link register save eliminated.
 1963 0000 80B4     		push	{r7}
 1964              		.cfi_def_cfa_offset 4
 1965              		.cfi_offset 7, -4
 1966 0002 83B0     		sub	sp, sp, #12
 1967              		.cfi_def_cfa_offset 16
 1968 0004 00AF     		add	r7, sp, #0
 1969              		.cfi_def_cfa_register 7
 1970 0006 7860     		str	r0, [r7, #4]
 1971 0008 0B46     		mov	r3, r1
 1972 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 1973 000c 1346     		mov	r3, r2
 1974 000e 7B70     		strb	r3, [r7, #1]
1094:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1095:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1096:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1097:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1098:./Lib/Src/stm32f4xx_i2c.c ****   
1099:./Lib/Src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1975              		.loc 1 1099 6
 1976 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1977 0012 002B     		cmp	r3, #0
 1978 0014 08D0     		beq	.L103
1100:./Lib/Src/stm32f4xx_i2c.c ****   {
1101:./Lib/Src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1102:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1979              		.loc 1 1102 9
 1980 0016 7B68     		ldr	r3, [r7, #4]
 1981 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1982 001a 9AB2     		uxth	r2, r3
 1983              		.loc 1 1102 15
 1984 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1985 001e 1343     		orrs	r3, r3, r2
 1986 0020 9AB2     		uxth	r2, r3
 1987 0022 7B68     		ldr	r3, [r7, #4]
 1988 0024 9A80     		strh	r2, [r3, #4]	@ movhi
1103:./Lib/Src/stm32f4xx_i2c.c ****   }
1104:./Lib/Src/stm32f4xx_i2c.c ****   else
1105:./Lib/Src/stm32f4xx_i2c.c ****   {
ARM GAS  /tmp/ccqephDo.s 			page 55


1106:./Lib/Src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1107:./Lib/Src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
1108:./Lib/Src/stm32f4xx_i2c.c ****   }
1109:./Lib/Src/stm32f4xx_i2c.c **** }
 1989              		.loc 1 1109 1
 1990 0026 09E0     		b	.L105
 1991              	.L103:
1107:./Lib/Src/stm32f4xx_i2c.c ****   }
 1992              		.loc 1 1107 9
 1993 0028 7B68     		ldr	r3, [r7, #4]
 1994 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1995 002c 9AB2     		uxth	r2, r3
1107:./Lib/Src/stm32f4xx_i2c.c ****   }
 1996              		.loc 1 1107 18
 1997 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1998 0030 DB43     		mvns	r3, r3
 1999 0032 9BB2     		uxth	r3, r3
1107:./Lib/Src/stm32f4xx_i2c.c ****   }
 2000              		.loc 1 1107 15
 2001 0034 1340     		ands	r3, r3, r2
 2002 0036 9AB2     		uxth	r2, r3
 2003 0038 7B68     		ldr	r3, [r7, #4]
 2004 003a 9A80     		strh	r2, [r3, #4]	@ movhi
 2005              	.L105:
 2006              		.loc 1 1109 1
 2007 003c 00BF     		nop
 2008 003e 0C37     		adds	r7, r7, #12
 2009              		.cfi_def_cfa_offset 4
 2010 0040 BD46     		mov	sp, r7
 2011              		.cfi_def_cfa_register 13
 2012              		@ sp needed
 2013 0042 5DF8047B 		ldr	r7, [sp], #4
 2014              		.cfi_restore 7
 2015              		.cfi_def_cfa_offset 0
 2016 0046 7047     		bx	lr
 2017              		.cfi_endproc
 2018              	.LFE151:
 2020              		.section	.text.I2C_CheckEvent,"ax",%progbits
 2021              		.align	1
 2022              		.global	I2C_CheckEvent
 2023              		.syntax unified
 2024              		.thumb
 2025              		.thumb_func
 2027              	I2C_CheckEvent:
 2028              	.LFB152:
1110:./Lib/Src/stm32f4xx_i2c.c **** 
1111:./Lib/Src/stm32f4xx_i2c.c **** /*
1112:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
1113:./Lib/Src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1114:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================  
1115:./Lib/Src/stm32f4xx_i2c.c ****  */
1116:./Lib/Src/stm32f4xx_i2c.c **** 
1117:./Lib/Src/stm32f4xx_i2c.c **** /**
1118:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1119:./Lib/Src/stm32f4xx_i2c.c ****   *         as parameter.
1120:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1121:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
ARM GAS  /tmp/ccqephDo.s 			page 56


1122:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1123:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1124:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1125:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1126:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1127:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1128:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1129:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1130:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1131:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1132:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1133:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1134:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1135:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1136:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1137:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1138:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1139:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1140:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1141:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1142:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1143:./Lib/Src/stm32f4xx_i2c.c ****   *     
1144:./Lib/Src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1145:./Lib/Src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1146:./Lib/Src/stm32f4xx_i2c.c ****   *    
1147:./Lib/Src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1148:./Lib/Src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1149:./Lib/Src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1150:./Lib/Src/stm32f4xx_i2c.c ****   */
1151:./Lib/Src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1152:./Lib/Src/stm32f4xx_i2c.c **** {
 2029              		.loc 1 1152 1
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 24
 2032              		@ frame_needed = 1, uses_anonymous_args = 0
 2033              		@ link register save eliminated.
 2034 0000 80B4     		push	{r7}
 2035              		.cfi_def_cfa_offset 4
 2036              		.cfi_offset 7, -4
 2037 0002 87B0     		sub	sp, sp, #28
 2038              		.cfi_def_cfa_offset 32
 2039 0004 00AF     		add	r7, sp, #0
 2040              		.cfi_def_cfa_register 7
 2041 0006 7860     		str	r0, [r7, #4]
 2042 0008 3960     		str	r1, [r7]
1153:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 2043              		.loc 1 1153 12
 2044 000a 0023     		movs	r3, #0
 2045 000c 3B61     		str	r3, [r7, #16]
1154:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 2046              		.loc 1 1154 12
 2047 000e 0023     		movs	r3, #0
 2048 0010 FB60     		str	r3, [r7, #12]
 2049              		.loc 1 1154 23
 2050 0012 0023     		movs	r3, #0
 2051 0014 BB60     		str	r3, [r7, #8]
1155:./Lib/Src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
ARM GAS  /tmp/ccqephDo.s 			page 57


 2052              		.loc 1 1155 15
 2053 0016 0023     		movs	r3, #0
 2054 0018 FB75     		strb	r3, [r7, #23]
1156:./Lib/Src/stm32f4xx_i2c.c **** 
1157:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1158:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1159:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1160:./Lib/Src/stm32f4xx_i2c.c **** 
1161:./Lib/Src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1162:./Lib/Src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 2055              		.loc 1 1162 15
 2056 001a 7B68     		ldr	r3, [r7, #4]
 2057 001c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2058 001e 9BB2     		uxth	r3, r3
 2059              		.loc 1 1162 9
 2060 0020 FB60     		str	r3, [r7, #12]
1163:./Lib/Src/stm32f4xx_i2c.c **** 
1164:./Lib/Src/stm32f4xx_i2c.c ****   /* I2C_SR2 must be read only when ADDR is found set in I2C_SR1 or when the STOPF bit is cleared *
1165:./Lib/Src/stm32f4xx_i2c.c ****   if((flag1 & I2C_SR1_ADDR) || (flag1 & ~I2C_SR1_STOPF)) 
 2061              		.loc 1 1165 13
 2062 0022 FB68     		ldr	r3, [r7, #12]
 2063 0024 03F00203 		and	r3, r3, #2
 2064              		.loc 1 1165 5
 2065 0028 002B     		cmp	r3, #0
 2066 002a 04D1     		bne	.L107
 2067              		.loc 1 1165 39 discriminator 1
 2068 002c FB68     		ldr	r3, [r7, #12]
 2069 002e 23F01003 		bic	r3, r3, #16
 2070              		.loc 1 1165 29 discriminator 1
 2071 0032 002B     		cmp	r3, #0
 2072 0034 13D0     		beq	.L108
 2073              	.L107:
1166:./Lib/Src/stm32f4xx_i2c.c ****   {
1167:./Lib/Src/stm32f4xx_i2c.c ****     flag2 = I2Cx->SR2;
 2074              		.loc 1 1167 17
 2075 0036 7B68     		ldr	r3, [r7, #4]
 2076 0038 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2077 003a 9BB2     		uxth	r3, r3
 2078              		.loc 1 1167 11
 2079 003c BB60     		str	r3, [r7, #8]
1168:./Lib/Src/stm32f4xx_i2c.c ****   }
1169:./Lib/Src/stm32f4xx_i2c.c ****   else 
1170:./Lib/Src/stm32f4xx_i2c.c ****   { 
1171:./Lib/Src/stm32f4xx_i2c.c ****     return ERROR; 
1172:./Lib/Src/stm32f4xx_i2c.c ****   }
1173:./Lib/Src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 2080              		.loc 1 1173 9
 2081 003e BB68     		ldr	r3, [r7, #8]
 2082 0040 1B04     		lsls	r3, r3, #16
 2083 0042 BB60     		str	r3, [r7, #8]
1174:./Lib/Src/stm32f4xx_i2c.c **** 
1175:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1176:./Lib/Src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 2084              		.loc 1 1176 22
 2085 0044 FA68     		ldr	r2, [r7, #12]
 2086 0046 BB68     		ldr	r3, [r7, #8]
 2087 0048 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccqephDo.s 			page 58


 2088              		.loc 1 1176 13
 2089 004a 23F07F43 		bic	r3, r3, #-16777216
 2090 004e 3B61     		str	r3, [r7, #16]
1177:./Lib/Src/stm32f4xx_i2c.c **** 
1178:./Lib/Src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1179:./Lib/Src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 2091              		.loc 1 1179 18
 2092 0050 3A69     		ldr	r2, [r7, #16]
 2093 0052 3B68     		ldr	r3, [r7]
 2094 0054 1340     		ands	r3, r3, r2
 2095              		.loc 1 1179 6
 2096 0056 3A68     		ldr	r2, [r7]
 2097 0058 9A42     		cmp	r2, r3
 2098 005a 02D0     		beq	.L109
 2099 005c 04E0     		b	.L113
 2100              	.L108:
1171:./Lib/Src/stm32f4xx_i2c.c ****   }
 2101              		.loc 1 1171 12
 2102 005e 0023     		movs	r3, #0
 2103 0060 05E0     		b	.L111
 2104              	.L109:
1180:./Lib/Src/stm32f4xx_i2c.c ****   {
1181:./Lib/Src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1182:./Lib/Src/stm32f4xx_i2c.c ****     status = SUCCESS;
 2105              		.loc 1 1182 12
 2106 0062 0123     		movs	r3, #1
 2107 0064 FB75     		strb	r3, [r7, #23]
 2108 0066 01E0     		b	.L112
 2109              	.L113:
1183:./Lib/Src/stm32f4xx_i2c.c ****   }
1184:./Lib/Src/stm32f4xx_i2c.c ****   else
1185:./Lib/Src/stm32f4xx_i2c.c ****   {
1186:./Lib/Src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1187:./Lib/Src/stm32f4xx_i2c.c ****     status = ERROR;
 2110              		.loc 1 1187 12
 2111 0068 0023     		movs	r3, #0
 2112 006a FB75     		strb	r3, [r7, #23]
 2113              	.L112:
1188:./Lib/Src/stm32f4xx_i2c.c ****   }
1189:./Lib/Src/stm32f4xx_i2c.c ****   /* Return status */
1190:./Lib/Src/stm32f4xx_i2c.c ****   return status;
 2114              		.loc 1 1190 10
 2115 006c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 2116              	.L111:
1191:./Lib/Src/stm32f4xx_i2c.c **** }
 2117              		.loc 1 1191 1
 2118 006e 1846     		mov	r0, r3
 2119 0070 1C37     		adds	r7, r7, #28
 2120              		.cfi_def_cfa_offset 4
 2121 0072 BD46     		mov	sp, r7
 2122              		.cfi_def_cfa_register 13
 2123              		@ sp needed
 2124 0074 5DF8047B 		ldr	r7, [sp], #4
 2125              		.cfi_restore 7
 2126              		.cfi_def_cfa_offset 0
 2127 0078 7047     		bx	lr
 2128              		.cfi_endproc
ARM GAS  /tmp/ccqephDo.s 			page 59


 2129              	.LFE152:
 2131              		.section	.text.I2C_GetLastEvent,"ax",%progbits
 2132              		.align	1
 2133              		.global	I2C_GetLastEvent
 2134              		.syntax unified
 2135              		.thumb
 2136              		.thumb_func
 2138              	I2C_GetLastEvent:
 2139              	.LFB153:
1192:./Lib/Src/stm32f4xx_i2c.c **** 
1193:./Lib/Src/stm32f4xx_i2c.c **** /*
1194:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
1195:./Lib/Src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1196:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================  
1197:./Lib/Src/stm32f4xx_i2c.c ****  */
1198:./Lib/Src/stm32f4xx_i2c.c **** 
1199:./Lib/Src/stm32f4xx_i2c.c **** /**
1200:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1201:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1202:./Lib/Src/stm32f4xx_i2c.c ****   *     
1203:./Lib/Src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1204:./Lib/Src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1205:./Lib/Src/stm32f4xx_i2c.c ****   *    
1206:./Lib/Src/stm32f4xx_i2c.c ****   * @retval The last event
1207:./Lib/Src/stm32f4xx_i2c.c ****   */
1208:./Lib/Src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1209:./Lib/Src/stm32f4xx_i2c.c **** {
 2140              		.loc 1 1209 1
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 24
 2143              		@ frame_needed = 1, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
 2145 0000 80B4     		push	{r7}
 2146              		.cfi_def_cfa_offset 4
 2147              		.cfi_offset 7, -4
 2148 0002 87B0     		sub	sp, sp, #28
 2149              		.cfi_def_cfa_offset 32
 2150 0004 00AF     		add	r7, sp, #0
 2151              		.cfi_def_cfa_register 7
 2152 0006 7860     		str	r0, [r7, #4]
1210:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
 2153              		.loc 1 1210 12
 2154 0008 0023     		movs	r3, #0
 2155 000a 7B61     		str	r3, [r7, #20]
1211:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
 2156              		.loc 1 1211 12
 2157 000c 0023     		movs	r3, #0
 2158 000e 3B61     		str	r3, [r7, #16]
 2159              		.loc 1 1211 23
 2160 0010 0023     		movs	r3, #0
 2161 0012 FB60     		str	r3, [r7, #12]
1212:./Lib/Src/stm32f4xx_i2c.c **** 
1213:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1214:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1215:./Lib/Src/stm32f4xx_i2c.c **** 
1216:./Lib/Src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1217:./Lib/Src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
ARM GAS  /tmp/ccqephDo.s 			page 60


 2162              		.loc 1 1217 15
 2163 0014 7B68     		ldr	r3, [r7, #4]
 2164 0016 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2165 0018 9BB2     		uxth	r3, r3
 2166              		.loc 1 1217 9
 2167 001a 3B61     		str	r3, [r7, #16]
1218:./Lib/Src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 2168              		.loc 1 1218 15
 2169 001c 7B68     		ldr	r3, [r7, #4]
 2170 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2171 0020 9BB2     		uxth	r3, r3
 2172              		.loc 1 1218 9
 2173 0022 FB60     		str	r3, [r7, #12]
1219:./Lib/Src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
 2174              		.loc 1 1219 9
 2175 0024 FB68     		ldr	r3, [r7, #12]
 2176 0026 1B04     		lsls	r3, r3, #16
 2177 0028 FB60     		str	r3, [r7, #12]
1220:./Lib/Src/stm32f4xx_i2c.c **** 
1221:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1222:./Lib/Src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 2178              		.loc 1 1222 22
 2179 002a 3A69     		ldr	r2, [r7, #16]
 2180 002c FB68     		ldr	r3, [r7, #12]
 2181 002e 1343     		orrs	r3, r3, r2
 2182              		.loc 1 1222 13
 2183 0030 23F07F43 		bic	r3, r3, #-16777216
 2184 0034 7B61     		str	r3, [r7, #20]
1223:./Lib/Src/stm32f4xx_i2c.c **** 
1224:./Lib/Src/stm32f4xx_i2c.c ****   /* Return status */
1225:./Lib/Src/stm32f4xx_i2c.c ****   return lastevent;
 2185              		.loc 1 1225 10
 2186 0036 7B69     		ldr	r3, [r7, #20]
1226:./Lib/Src/stm32f4xx_i2c.c **** }
 2187              		.loc 1 1226 1
 2188 0038 1846     		mov	r0, r3
 2189 003a 1C37     		adds	r7, r7, #28
 2190              		.cfi_def_cfa_offset 4
 2191 003c BD46     		mov	sp, r7
 2192              		.cfi_def_cfa_register 13
 2193              		@ sp needed
 2194 003e 5DF8047B 		ldr	r7, [sp], #4
 2195              		.cfi_restore 7
 2196              		.cfi_def_cfa_offset 0
 2197 0042 7047     		bx	lr
 2198              		.cfi_endproc
 2199              	.LFE153:
 2201              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 2202              		.align	1
 2203              		.global	I2C_GetFlagStatus
 2204              		.syntax unified
 2205              		.thumb
 2206              		.thumb_func
 2208              	I2C_GetFlagStatus:
 2209              	.LFB154:
1227:./Lib/Src/stm32f4xx_i2c.c **** 
1228:./Lib/Src/stm32f4xx_i2c.c **** /*
ARM GAS  /tmp/ccqephDo.s 			page 61


1229:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================
1230:./Lib/Src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1231:./Lib/Src/stm32f4xx_i2c.c ****  ===============================================================================  
1232:./Lib/Src/stm32f4xx_i2c.c ****  */
1233:./Lib/Src/stm32f4xx_i2c.c **** 
1234:./Lib/Src/stm32f4xx_i2c.c **** /**
1235:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1236:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1237:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1238:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1239:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1240:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1241:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1242:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1243:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1244:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1245:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1246:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1247:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1248:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1249:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1250:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1251:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1252:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1253:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1254:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1255:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1256:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1257:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1258:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1259:./Lib/Src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1260:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1261:./Lib/Src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1262:./Lib/Src/stm32f4xx_i2c.c ****   */
1263:./Lib/Src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1264:./Lib/Src/stm32f4xx_i2c.c **** {
 2210              		.loc 1 1264 1
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 24
 2213              		@ frame_needed = 1, uses_anonymous_args = 0
 2214              		@ link register save eliminated.
 2215 0000 80B4     		push	{r7}
 2216              		.cfi_def_cfa_offset 4
 2217              		.cfi_offset 7, -4
 2218 0002 87B0     		sub	sp, sp, #28
 2219              		.cfi_def_cfa_offset 32
 2220 0004 00AF     		add	r7, sp, #0
 2221              		.cfi_def_cfa_register 7
 2222 0006 7860     		str	r0, [r7, #4]
 2223 0008 3960     		str	r1, [r7]
1265:./Lib/Src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
 2224              		.loc 1 1265 14
 2225 000a 0023     		movs	r3, #0
 2226 000c FB75     		strb	r3, [r7, #23]
1266:./Lib/Src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 2227              		.loc 1 1266 17
 2228 000e 0023     		movs	r3, #0
ARM GAS  /tmp/ccqephDo.s 			page 62


 2229 0010 3B61     		str	r3, [r7, #16]
 2230              		.loc 1 1266 29
 2231 0012 0023     		movs	r3, #0
 2232 0014 FB60     		str	r3, [r7, #12]
1267:./Lib/Src/stm32f4xx_i2c.c **** 
1268:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1269:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1270:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1271:./Lib/Src/stm32f4xx_i2c.c **** 
1272:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1273:./Lib/Src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 2233              		.loc 1 1273 14
 2234 0016 7B68     		ldr	r3, [r7, #4]
 2235              		.loc 1 1273 12
 2236 0018 FB60     		str	r3, [r7, #12]
1274:./Lib/Src/stm32f4xx_i2c.c ****   
1275:./Lib/Src/stm32f4xx_i2c.c ****   /* Read flag register index */
1276:./Lib/Src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 2237              		.loc 1 1276 21
 2238 001a 3B68     		ldr	r3, [r7]
 2239 001c 1B0F     		lsrs	r3, r3, #28
 2240              		.loc 1 1276 10
 2241 001e 3B61     		str	r3, [r7, #16]
1277:./Lib/Src/stm32f4xx_i2c.c ****   
1278:./Lib/Src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1279:./Lib/Src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 2242              		.loc 1 1279 12
 2243 0020 3B68     		ldr	r3, [r7]
 2244 0022 23F07F43 		bic	r3, r3, #-16777216
 2245 0026 3B60     		str	r3, [r7]
1280:./Lib/Src/stm32f4xx_i2c.c ****   
1281:./Lib/Src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 2246              		.loc 1 1281 13
 2247 0028 3B69     		ldr	r3, [r7, #16]
 2248              		.loc 1 1281 5
 2249 002a 002B     		cmp	r3, #0
 2250 002c 03D0     		beq	.L117
1282:./Lib/Src/stm32f4xx_i2c.c ****   {
1283:./Lib/Src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1284:./Lib/Src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 2251              		.loc 1 1284 14
 2252 002e FB68     		ldr	r3, [r7, #12]
 2253 0030 1433     		adds	r3, r3, #20
 2254 0032 FB60     		str	r3, [r7, #12]
 2255 0034 05E0     		b	.L118
 2256              	.L117:
1285:./Lib/Src/stm32f4xx_i2c.c ****   }
1286:./Lib/Src/stm32f4xx_i2c.c ****   else
1287:./Lib/Src/stm32f4xx_i2c.c ****   {
1288:./Lib/Src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1289:./Lib/Src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 2257              		.loc 1 1289 14
 2258 0036 3B68     		ldr	r3, [r7]
 2259 0038 1B0C     		lsrs	r3, r3, #16
 2260 003a 3B60     		str	r3, [r7]
1290:./Lib/Src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1291:./Lib/Src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
ARM GAS  /tmp/ccqephDo.s 			page 63


 2261              		.loc 1 1291 14
 2262 003c FB68     		ldr	r3, [r7, #12]
 2263 003e 1833     		adds	r3, r3, #24
 2264 0040 FB60     		str	r3, [r7, #12]
 2265              	.L118:
1292:./Lib/Src/stm32f4xx_i2c.c ****   }
1293:./Lib/Src/stm32f4xx_i2c.c ****   
1294:./Lib/Src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 2266              		.loc 1 1294 9
 2267 0042 FB68     		ldr	r3, [r7, #12]
 2268              		.loc 1 1294 8
 2269 0044 1A68     		ldr	r2, [r3]
 2270              		.loc 1 1294 36
 2271 0046 3B68     		ldr	r3, [r7]
 2272 0048 1340     		ands	r3, r3, r2
 2273              		.loc 1 1294 5
 2274 004a 002B     		cmp	r3, #0
 2275 004c 02D0     		beq	.L119
1295:./Lib/Src/stm32f4xx_i2c.c ****   {
1296:./Lib/Src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1297:./Lib/Src/stm32f4xx_i2c.c ****     bitstatus = SET;
 2276              		.loc 1 1297 15
 2277 004e 0123     		movs	r3, #1
 2278 0050 FB75     		strb	r3, [r7, #23]
 2279 0052 01E0     		b	.L120
 2280              	.L119:
1298:./Lib/Src/stm32f4xx_i2c.c ****   }
1299:./Lib/Src/stm32f4xx_i2c.c ****   else
1300:./Lib/Src/stm32f4xx_i2c.c ****   {
1301:./Lib/Src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1302:./Lib/Src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 2281              		.loc 1 1302 15
 2282 0054 0023     		movs	r3, #0
 2283 0056 FB75     		strb	r3, [r7, #23]
 2284              	.L120:
1303:./Lib/Src/stm32f4xx_i2c.c ****   }
1304:./Lib/Src/stm32f4xx_i2c.c ****   
1305:./Lib/Src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1306:./Lib/Src/stm32f4xx_i2c.c ****   return  bitstatus;
 2285              		.loc 1 1306 11
 2286 0058 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1307:./Lib/Src/stm32f4xx_i2c.c **** }
 2287              		.loc 1 1307 1
 2288 005a 1846     		mov	r0, r3
 2289 005c 1C37     		adds	r7, r7, #28
 2290              		.cfi_def_cfa_offset 4
 2291 005e BD46     		mov	sp, r7
 2292              		.cfi_def_cfa_register 13
 2293              		@ sp needed
 2294 0060 5DF8047B 		ldr	r7, [sp], #4
 2295              		.cfi_restore 7
 2296              		.cfi_def_cfa_offset 0
 2297 0064 7047     		bx	lr
 2298              		.cfi_endproc
 2299              	.LFE154:
 2301              		.section	.text.I2C_ClearFlag,"ax",%progbits
 2302              		.align	1
ARM GAS  /tmp/ccqephDo.s 			page 64


 2303              		.global	I2C_ClearFlag
 2304              		.syntax unified
 2305              		.thumb
 2306              		.thumb_func
 2308              	I2C_ClearFlag:
 2309              	.LFB155:
1308:./Lib/Src/stm32f4xx_i2c.c **** 
1309:./Lib/Src/stm32f4xx_i2c.c **** /**
1310:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1311:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1312:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1313:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1314:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1315:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1316:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1317:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1318:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1319:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1320:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1321:./Lib/Src/stm32f4xx_i2c.c ****   *   
1322:./Lib/Src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1323:./Lib/Src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1324:./Lib/Src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1325:./Lib/Src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1326:./Lib/Src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1327:./Lib/Src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1328:./Lib/Src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1329:./Lib/Src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1330:./Lib/Src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1331:./Lib/Src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1332:./Lib/Src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1333:./Lib/Src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1334:./Lib/Src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1335:./Lib/Src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1336:./Lib/Src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1337:./Lib/Src/stm32f4xx_i2c.c ****   *  
1338:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
1339:./Lib/Src/stm32f4xx_i2c.c ****   */
1340:./Lib/Src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1341:./Lib/Src/stm32f4xx_i2c.c **** {
 2310              		.loc 1 1341 1
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 16
 2313              		@ frame_needed = 1, uses_anonymous_args = 0
 2314              		@ link register save eliminated.
 2315 0000 80B4     		push	{r7}
 2316              		.cfi_def_cfa_offset 4
 2317              		.cfi_offset 7, -4
 2318 0002 85B0     		sub	sp, sp, #20
 2319              		.cfi_def_cfa_offset 24
 2320 0004 00AF     		add	r7, sp, #0
 2321              		.cfi_def_cfa_register 7
 2322 0006 7860     		str	r0, [r7, #4]
 2323 0008 3960     		str	r1, [r7]
1342:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 2324              		.loc 1 1342 12
 2325 000a 0023     		movs	r3, #0
ARM GAS  /tmp/ccqephDo.s 			page 65


 2326 000c FB60     		str	r3, [r7, #12]
1343:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1344:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1345:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1346:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1347:./Lib/Src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
 2327              		.loc 1 1347 11
 2328 000e 3B68     		ldr	r3, [r7]
 2329 0010 23F07F43 		bic	r3, r3, #-16777216
 2330 0014 FB60     		str	r3, [r7, #12]
1348:./Lib/Src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1349:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2331              		.loc 1 1349 15
 2332 0016 FB68     		ldr	r3, [r7, #12]
 2333 0018 9BB2     		uxth	r3, r3
 2334 001a DB43     		mvns	r3, r3
 2335 001c 9AB2     		uxth	r2, r3
 2336              		.loc 1 1349 13
 2337 001e 7B68     		ldr	r3, [r7, #4]
 2338 0020 9A82     		strh	r2, [r3, #20]	@ movhi
1350:./Lib/Src/stm32f4xx_i2c.c **** }
 2339              		.loc 1 1350 1
 2340 0022 00BF     		nop
 2341 0024 1437     		adds	r7, r7, #20
 2342              		.cfi_def_cfa_offset 4
 2343 0026 BD46     		mov	sp, r7
 2344              		.cfi_def_cfa_register 13
 2345              		@ sp needed
 2346 0028 5DF8047B 		ldr	r7, [sp], #4
 2347              		.cfi_restore 7
 2348              		.cfi_def_cfa_offset 0
 2349 002c 7047     		bx	lr
 2350              		.cfi_endproc
 2351              	.LFE155:
 2353              		.section	.text.I2C_GetITStatus,"ax",%progbits
 2354              		.align	1
 2355              		.global	I2C_GetITStatus
 2356              		.syntax unified
 2357              		.thumb
 2358              		.thumb_func
 2360              	I2C_GetITStatus:
 2361              	.LFB156:
1351:./Lib/Src/stm32f4xx_i2c.c **** 
1352:./Lib/Src/stm32f4xx_i2c.c **** /**
1353:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1354:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1355:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1356:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1357:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1358:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1359:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1360:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1361:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1362:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1363:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1364:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1365:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
ARM GAS  /tmp/ccqephDo.s 			page 66


1366:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1367:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1368:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1369:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1370:./Lib/Src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1371:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1372:./Lib/Src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1373:./Lib/Src/stm32f4xx_i2c.c ****   */
1374:./Lib/Src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1375:./Lib/Src/stm32f4xx_i2c.c **** {
 2362              		.loc 1 1375 1
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 16
 2365              		@ frame_needed = 1, uses_anonymous_args = 0
 2366              		@ link register save eliminated.
 2367 0000 80B4     		push	{r7}
 2368              		.cfi_def_cfa_offset 4
 2369              		.cfi_offset 7, -4
 2370 0002 85B0     		sub	sp, sp, #20
 2371              		.cfi_def_cfa_offset 24
 2372 0004 00AF     		add	r7, sp, #0
 2373              		.cfi_def_cfa_register 7
 2374 0006 7860     		str	r0, [r7, #4]
 2375 0008 3960     		str	r1, [r7]
1376:./Lib/Src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
 2376              		.loc 1 1376 12
 2377 000a 0023     		movs	r3, #0
 2378 000c FB73     		strb	r3, [r7, #15]
1377:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
 2379              		.loc 1 1377 12
 2380 000e 0023     		movs	r3, #0
 2381 0010 BB60     		str	r3, [r7, #8]
1378:./Lib/Src/stm32f4xx_i2c.c **** 
1379:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1380:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1381:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1382:./Lib/Src/stm32f4xx_i2c.c **** 
1383:./Lib/Src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1384:./Lib/Src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 2382              		.loc 1 1384 51
 2383 0012 3B68     		ldr	r3, [r7]
 2384 0014 1B0C     		lsrs	r3, r3, #16
 2385              		.loc 1 1384 65
 2386 0016 7A68     		ldr	r2, [r7, #4]
 2387 0018 9288     		ldrh	r2, [r2, #4]	@ movhi
 2388 001a 92B2     		uxth	r2, r2
 2389              		.loc 1 1384 18
 2390 001c 1340     		ands	r3, r3, r2
 2391              		.loc 1 1384 16
 2392 001e 03F4E063 		and	r3, r3, #1792
 2393 0022 BB60     		str	r3, [r7, #8]
1385:./Lib/Src/stm32f4xx_i2c.c ****   
1386:./Lib/Src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1387:./Lib/Src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
 2394              		.loc 1 1387 10
 2395 0024 3B68     		ldr	r3, [r7]
 2396 0026 23F07F43 		bic	r3, r3, #-16777216
ARM GAS  /tmp/ccqephDo.s 			page 67


 2397 002a 3B60     		str	r3, [r7]
1388:./Lib/Src/stm32f4xx_i2c.c **** 
1389:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1390:./Lib/Src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 2398              		.loc 1 1390 13
 2399 002c 7B68     		ldr	r3, [r7, #4]
 2400 002e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 2401 0030 9BB2     		uxth	r3, r3
 2402 0032 1A46     		mov	r2, r3
 2403              		.loc 1 1390 19
 2404 0034 3B68     		ldr	r3, [r7]
 2405 0036 1340     		ands	r3, r3, r2
 2406              		.loc 1 1390 6
 2407 0038 002B     		cmp	r3, #0
 2408 003a 05D0     		beq	.L124
 2409              		.loc 1 1390 49 discriminator 1
 2410 003c BB68     		ldr	r3, [r7, #8]
 2411 003e 002B     		cmp	r3, #0
 2412 0040 02D0     		beq	.L124
1391:./Lib/Src/stm32f4xx_i2c.c ****   {
1392:./Lib/Src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1393:./Lib/Src/stm32f4xx_i2c.c ****     bitstatus = SET;
 2413              		.loc 1 1393 15
 2414 0042 0123     		movs	r3, #1
 2415 0044 FB73     		strb	r3, [r7, #15]
 2416 0046 01E0     		b	.L125
 2417              	.L124:
1394:./Lib/Src/stm32f4xx_i2c.c ****   }
1395:./Lib/Src/stm32f4xx_i2c.c ****   else
1396:./Lib/Src/stm32f4xx_i2c.c ****   {
1397:./Lib/Src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1398:./Lib/Src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 2418              		.loc 1 1398 15
 2419 0048 0023     		movs	r3, #0
 2420 004a FB73     		strb	r3, [r7, #15]
 2421              	.L125:
1399:./Lib/Src/stm32f4xx_i2c.c ****   }
1400:./Lib/Src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1401:./Lib/Src/stm32f4xx_i2c.c ****   return  bitstatus;
 2422              		.loc 1 1401 11
 2423 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1402:./Lib/Src/stm32f4xx_i2c.c **** }
 2424              		.loc 1 1402 1
 2425 004e 1846     		mov	r0, r3
 2426 0050 1437     		adds	r7, r7, #20
 2427              		.cfi_def_cfa_offset 4
 2428 0052 BD46     		mov	sp, r7
 2429              		.cfi_def_cfa_register 13
 2430              		@ sp needed
 2431 0054 5DF8047B 		ldr	r7, [sp], #4
 2432              		.cfi_restore 7
 2433              		.cfi_def_cfa_offset 0
 2434 0058 7047     		bx	lr
 2435              		.cfi_endproc
 2436              	.LFE156:
 2438              		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 2439              		.align	1
ARM GAS  /tmp/ccqephDo.s 			page 68


 2440              		.global	I2C_ClearITPendingBit
 2441              		.syntax unified
 2442              		.thumb
 2443              		.thumb_func
 2445              	I2C_ClearITPendingBit:
 2446              	.LFB157:
1403:./Lib/Src/stm32f4xx_i2c.c **** 
1404:./Lib/Src/stm32f4xx_i2c.c **** /**
1405:./Lib/Src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1406:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1407:./Lib/Src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1408:./Lib/Src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1409:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1410:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1411:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1412:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1413:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1414:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1415:./Lib/Src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1416:./Lib/Src/stm32f4xx_i2c.c ****   * 
1417:./Lib/Src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1418:./Lib/Src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1419:./Lib/Src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1420:./Lib/Src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1421:./Lib/Src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1422:./Lib/Src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1423:./Lib/Src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1424:./Lib/Src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1425:./Lib/Src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1426:./Lib/Src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1427:./Lib/Src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1428:./Lib/Src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1429:./Lib/Src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1430:./Lib/Src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1431:./Lib/Src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1432:./Lib/Src/stm32f4xx_i2c.c ****   * @retval None
1433:./Lib/Src/stm32f4xx_i2c.c ****   */
1434:./Lib/Src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1435:./Lib/Src/stm32f4xx_i2c.c **** {
 2447              		.loc 1 1435 1
 2448              		.cfi_startproc
 2449              		@ args = 0, pretend = 0, frame = 16
 2450              		@ frame_needed = 1, uses_anonymous_args = 0
 2451              		@ link register save eliminated.
 2452 0000 80B4     		push	{r7}
 2453              		.cfi_def_cfa_offset 4
 2454              		.cfi_offset 7, -4
 2455 0002 85B0     		sub	sp, sp, #20
 2456              		.cfi_def_cfa_offset 24
 2457 0004 00AF     		add	r7, sp, #0
 2458              		.cfi_def_cfa_register 7
 2459 0006 7860     		str	r0, [r7, #4]
 2460 0008 3960     		str	r1, [r7]
1436:./Lib/Src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
 2461              		.loc 1 1436 12
 2462 000a 0023     		movs	r3, #0
 2463 000c FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccqephDo.s 			page 69


1437:./Lib/Src/stm32f4xx_i2c.c ****   /* Check the parameters */
1438:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1439:./Lib/Src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1440:./Lib/Src/stm32f4xx_i2c.c **** 
1441:./Lib/Src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1442:./Lib/Src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
 2464              		.loc 1 1442 11
 2465 000e 3B68     		ldr	r3, [r7]
 2466 0010 23F07F43 		bic	r3, r3, #-16777216
 2467 0014 FB60     		str	r3, [r7, #12]
1443:./Lib/Src/stm32f4xx_i2c.c **** 
1444:./Lib/Src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1445:./Lib/Src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 2468              		.loc 1 1445 15
 2469 0016 FB68     		ldr	r3, [r7, #12]
 2470 0018 9BB2     		uxth	r3, r3
 2471 001a DB43     		mvns	r3, r3
 2472 001c 9AB2     		uxth	r2, r3
 2473              		.loc 1 1445 13
 2474 001e 7B68     		ldr	r3, [r7, #4]
 2475 0020 9A82     		strh	r2, [r3, #20]	@ movhi
1446:./Lib/Src/stm32f4xx_i2c.c **** }
 2476              		.loc 1 1446 1
 2477 0022 00BF     		nop
 2478 0024 1437     		adds	r7, r7, #20
 2479              		.cfi_def_cfa_offset 4
 2480 0026 BD46     		mov	sp, r7
 2481              		.cfi_def_cfa_register 13
 2482              		@ sp needed
 2483 0028 5DF8047B 		ldr	r7, [sp], #4
 2484              		.cfi_restore 7
 2485              		.cfi_def_cfa_offset 0
 2486 002c 7047     		bx	lr
 2487              		.cfi_endproc
 2488              	.LFE157:
 2490              		.text
 2491              	.Letext0:
 2492              		.file 2 "/usr/lib/gcc/arm-none-eabi/12.2.1/include/stdint.h"
 2493              		.file 3 "./Start/stm32f4xx.h"
 2494              		.file 4 "./Lib/inc/stm32f4xx_rcc.h"
 2495              		.file 5 "./Lib/inc/stm32f4xx_i2c.h"
ARM GAS  /tmp/ccqephDo.s 			page 70


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_i2c.c
     /tmp/ccqephDo.s:21     .text.I2C_DeInit:0000000000000000 $t
     /tmp/ccqephDo.s:27     .text.I2C_DeInit:0000000000000000 I2C_DeInit
     /tmp/ccqephDo.s:99     .text.I2C_DeInit:0000000000000068 $d
     /tmp/ccqephDo.s:106    .text.I2C_Init:0000000000000000 $t
     /tmp/ccqephDo.s:112    .text.I2C_Init:0000000000000000 I2C_Init
     /tmp/ccqephDo.s:360    .text.I2C_Init:0000000000000174 $d
     /tmp/ccqephDo.s:368    .text.I2C_StructInit:0000000000000000 $t
     /tmp/ccqephDo.s:374    .text.I2C_StructInit:0000000000000000 I2C_StructInit
     /tmp/ccqephDo.s:428    .text.I2C_Cmd:0000000000000000 $t
     /tmp/ccqephDo.s:434    .text.I2C_Cmd:0000000000000000 I2C_Cmd
     /tmp/ccqephDo.s:492    .text.I2C_AnalogFilterCmd:0000000000000000 $t
     /tmp/ccqephDo.s:498    .text.I2C_AnalogFilterCmd:0000000000000000 I2C_AnalogFilterCmd
     /tmp/ccqephDo.s:556    .text.I2C_DigitalFilterConfig:0000000000000000 $t
     /tmp/ccqephDo.s:562    .text.I2C_DigitalFilterConfig:0000000000000000 I2C_DigitalFilterConfig
     /tmp/ccqephDo.s:618    .text.I2C_GenerateSTART:0000000000000000 $t
     /tmp/ccqephDo.s:624    .text.I2C_GenerateSTART:0000000000000000 I2C_GenerateSTART
     /tmp/ccqephDo.s:682    .text.I2C_GenerateSTOP:0000000000000000 $t
     /tmp/ccqephDo.s:688    .text.I2C_GenerateSTOP:0000000000000000 I2C_GenerateSTOP
     /tmp/ccqephDo.s:746    .text.I2C_Send7bitAddress:0000000000000000 $t
     /tmp/ccqephDo.s:752    .text.I2C_Send7bitAddress:0000000000000000 I2C_Send7bitAddress
     /tmp/ccqephDo.s:806    .text.I2C_AcknowledgeConfig:0000000000000000 $t
     /tmp/ccqephDo.s:812    .text.I2C_AcknowledgeConfig:0000000000000000 I2C_AcknowledgeConfig
     /tmp/ccqephDo.s:870    .text.I2C_OwnAddress2Config:0000000000000000 $t
     /tmp/ccqephDo.s:876    .text.I2C_OwnAddress2Config:0000000000000000 I2C_OwnAddress2Config
     /tmp/ccqephDo.s:933    .text.I2C_DualAddressCmd:0000000000000000 $t
     /tmp/ccqephDo.s:939    .text.I2C_DualAddressCmd:0000000000000000 I2C_DualAddressCmd
     /tmp/ccqephDo.s:997    .text.I2C_GeneralCallCmd:0000000000000000 $t
     /tmp/ccqephDo.s:1003   .text.I2C_GeneralCallCmd:0000000000000000 I2C_GeneralCallCmd
     /tmp/ccqephDo.s:1061   .text.I2C_SoftwareResetCmd:0000000000000000 $t
     /tmp/ccqephDo.s:1067   .text.I2C_SoftwareResetCmd:0000000000000000 I2C_SoftwareResetCmd
     /tmp/ccqephDo.s:1126   .text.I2C_StretchClockCmd:0000000000000000 $t
     /tmp/ccqephDo.s:1132   .text.I2C_StretchClockCmd:0000000000000000 I2C_StretchClockCmd
     /tmp/ccqephDo.s:1190   .text.I2C_FastModeDutyCycleConfig:0000000000000000 $t
     /tmp/ccqephDo.s:1196   .text.I2C_FastModeDutyCycleConfig:0000000000000000 I2C_FastModeDutyCycleConfig
     /tmp/ccqephDo.s:1254   .text.I2C_NACKPositionConfig:0000000000000000 $t
     /tmp/ccqephDo.s:1260   .text.I2C_NACKPositionConfig:0000000000000000 I2C_NACKPositionConfig
     /tmp/ccqephDo.s:1318   .text.I2C_SMBusAlertConfig:0000000000000000 $t
     /tmp/ccqephDo.s:1324   .text.I2C_SMBusAlertConfig:0000000000000000 I2C_SMBusAlertConfig
     /tmp/ccqephDo.s:1382   .text.I2C_ARPCmd:0000000000000000 $t
     /tmp/ccqephDo.s:1388   .text.I2C_ARPCmd:0000000000000000 I2C_ARPCmd
     /tmp/ccqephDo.s:1446   .text.I2C_SendData:0000000000000000 $t
     /tmp/ccqephDo.s:1452   .text.I2C_SendData:0000000000000000 I2C_SendData
     /tmp/ccqephDo.s:1489   .text.I2C_ReceiveData:0000000000000000 $t
     /tmp/ccqephDo.s:1495   .text.I2C_ReceiveData:0000000000000000 I2C_ReceiveData
     /tmp/ccqephDo.s:1531   .text.I2C_TransmitPEC:0000000000000000 $t
     /tmp/ccqephDo.s:1537   .text.I2C_TransmitPEC:0000000000000000 I2C_TransmitPEC
     /tmp/ccqephDo.s:1595   .text.I2C_PECPositionConfig:0000000000000000 $t
     /tmp/ccqephDo.s:1601   .text.I2C_PECPositionConfig:0000000000000000 I2C_PECPositionConfig
     /tmp/ccqephDo.s:1659   .text.I2C_CalculatePEC:0000000000000000 $t
     /tmp/ccqephDo.s:1665   .text.I2C_CalculatePEC:0000000000000000 I2C_CalculatePEC
     /tmp/ccqephDo.s:1723   .text.I2C_GetPEC:0000000000000000 $t
     /tmp/ccqephDo.s:1729   .text.I2C_GetPEC:0000000000000000 I2C_GetPEC
     /tmp/ccqephDo.s:1767   .text.I2C_DMACmd:0000000000000000 $t
     /tmp/ccqephDo.s:1773   .text.I2C_DMACmd:0000000000000000 I2C_DMACmd
     /tmp/ccqephDo.s:1831   .text.I2C_DMALastTransferCmd:0000000000000000 $t
ARM GAS  /tmp/ccqephDo.s 			page 71


     /tmp/ccqephDo.s:1837   .text.I2C_DMALastTransferCmd:0000000000000000 I2C_DMALastTransferCmd
     /tmp/ccqephDo.s:1895   .text.I2C_ReadRegister:0000000000000000 $t
     /tmp/ccqephDo.s:1901   .text.I2C_ReadRegister:0000000000000000 I2C_ReadRegister
     /tmp/ccqephDo.s:1950   .text.I2C_ITConfig:0000000000000000 $t
     /tmp/ccqephDo.s:1956   .text.I2C_ITConfig:0000000000000000 I2C_ITConfig
     /tmp/ccqephDo.s:2021   .text.I2C_CheckEvent:0000000000000000 $t
     /tmp/ccqephDo.s:2027   .text.I2C_CheckEvent:0000000000000000 I2C_CheckEvent
     /tmp/ccqephDo.s:2132   .text.I2C_GetLastEvent:0000000000000000 $t
     /tmp/ccqephDo.s:2138   .text.I2C_GetLastEvent:0000000000000000 I2C_GetLastEvent
     /tmp/ccqephDo.s:2202   .text.I2C_GetFlagStatus:0000000000000000 $t
     /tmp/ccqephDo.s:2208   .text.I2C_GetFlagStatus:0000000000000000 I2C_GetFlagStatus
     /tmp/ccqephDo.s:2302   .text.I2C_ClearFlag:0000000000000000 $t
     /tmp/ccqephDo.s:2308   .text.I2C_ClearFlag:0000000000000000 I2C_ClearFlag
     /tmp/ccqephDo.s:2354   .text.I2C_GetITStatus:0000000000000000 $t
     /tmp/ccqephDo.s:2360   .text.I2C_GetITStatus:0000000000000000 I2C_GetITStatus
     /tmp/ccqephDo.s:2439   .text.I2C_ClearITPendingBit:0000000000000000 $t
     /tmp/ccqephDo.s:2445   .text.I2C_ClearITPendingBit:0000000000000000 I2C_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
